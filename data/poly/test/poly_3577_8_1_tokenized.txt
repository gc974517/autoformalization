\begin{document} \begin{theorem} Let the following list of commands as follows \begin{verbatim} <var:h1> := <var:U> ; <var:h2> := <var:h1> * <var:U> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:8> ; <var:h2> := <var:h2> * <nat:3> ; <var:b> := <var:h2> <var:b> := <var:b> + <var:h1> <var:b> := <var:b> + <var:h0> \end{verbatim} Given it to hold that $ <var:U> = <var:t> $ ahead of the evaluation of our code , it holds that we have $ <var:b> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:U> = <var:t> \} \\ <var:h1> := <var:U> ; \\ \{ <var:U> = <var:t> \land <var:h1> = <var:t> \} \\ <var:h2> := <var:h1> * <var:U> ; \\ \{ <var:U> = <var:t> \land <var:h1> = <var:t> \land <var:h2> = <var:t> ^ <nat:2> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:U> = <var:t> \land <var:h1> = <var:t> \land <var:h2> = <var:t> ^ <nat:2> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:8> ; \\ \{ <var:U> = <var:t> \land <var:h1> = <nat:8> \times <var:t> \land <var:h2> = <var:t> ^ <nat:2> \land <var:h0> = <nat:8> \} \\ <var:h2> := <var:h2> * <nat:3> ; \\ \{ <var:U> = <var:t> \land <var:h1> = <nat:8> \times <var:t> \land <var:h2> = <nat:3> \times <var:t> ^ <nat:2> \land <var:h0> = <nat:8> \} \\ <var:b> := <var:h2> \\ \{ <var:U> = <var:t> \land <var:h1> = <nat:8> \times <var:t> \land <var:h0> = <nat:8> \land <var:b> = <nat:3> \times <var:t> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:h1> \\ \{ <var:U> = <var:t> \land <var:h0> = <nat:8> \land <var:b> = <nat:3> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> \} \\ <var:b> := <var:b> + <var:h0> \\ \{ <var:U> = <var:t> \land <var:b> = <nat:3> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> + <nat:8> \} \end{eqnarray} Hence , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:U> = <var:t> }} <var:h1> := <var:U> ; <var:h2> := <var:h1> * <var:U> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:8> ; <var:h2> := <var:h2> * <nat:3> ; <var:b> := <var:h2> <var:b> := <var:b> + <var:h1> <var:b> := <var:b> + <var:h0> {{ <var:b> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <var:t> /\ <var:h2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <var:t> /\ <var:h2> = <var:t> ^ <nat:2> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <nat:8> * <var:t> /\ <var:h2> = <var:t> ^ <nat:2> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <nat:8> * <var:t> /\ <var:h2> = <nat:3> * <var:t> ^ <nat:2> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h1> = <nat:8> * <var:t> /\ <var:h0> = <nat:8> /\ <var:b> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:h0> = <nat:8> /\ <var:b> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:b> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 