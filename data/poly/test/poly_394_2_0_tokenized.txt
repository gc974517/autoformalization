\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:5> ; <var:U> := <var:r0> \end{verbatim} Allowing it to hold that $ <var:c> = <var:K> $ for every $ <var:K> $ before the evaluation of our program , it holds that we have $ <var:U> = <nat:5> $ after list of commands has exited . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:c> = <var:K> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:c> = <var:K> \land <var:r0> = <nat:5> \} \\ <var:U> := <var:r0> \\ \{ <var:c> = <var:K> \land <var:U> = <nat:5> \} \end{eqnarray} Hence , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <var:r0> := <nat:5> ; <var:U> := <var:r0> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 