\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:j> ; <var:p2> := <var:p1> * <var:j> ; <var:p3> := <var:p2> * <var:j> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:5> ; <var:U> := <var:p3> <var:U> := <var:U> + <var:p2> <var:U> := <var:U> + <var:p1> <var:U> := <var:U> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given all positive integers $ <var:A> $ , $ <var:j> = <var:A> $ ahead of interpreting the code , it follows that we have $ <var:U> = <nat:5> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is evident through Hoare reasoning . Observing the upcoming command contained in the series of commands , we see the code defining $ <var:j> $ into $ <var:p1>$ . This moves the precondition $ \{ <var:j> = <var:A> \} $ as the postcondition $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \} $ . Taking a look at the upcoming command found in our set of instructions , we have the variable assignmet code yielding $ <var:p1> * <var:j> $ into $ <var:p2>$ . This code takes the condition $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \} $ as $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare logic . Taking another step toward the upcoming step seen in our list of commands , we see the variable binding command defining $ <var:p2> * <var:j> $ to $ <var:p3>$ . This statement takes $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \} $ as $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \} $ . This is given using the assignment inference rule of standard Hoare reasoning . Now , we have the assignment line defining $ <nat:1> $ into $ <var:p0>$ . This line transfers the condition $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . This is ensured through the assignment rule of standard Hoare reasoning . Moving on to the next step , we have the assignment code yielding $ <var:p1> * <nat:1> $ into $ <var:p1>$ . This moves the precondition $ \{ <var:j> = <var:A> \land <var:p1> = <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ to the condition $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Moving forward to the next piece of code in our series of instructions , we see the binding line letting $ <var:p2> * <nat:4> $ as $ <var:p2>$ . This statement moves the precondition $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ as $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . This is given by the assignment rule given by usual Hoare reasoning . Shifting focus toward the subsequent line of code seen in our code , we have the command assigning $ <var:p3> * <nat:5> $ toward $ <var:p3>$ . This code redefines $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p3> = <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ toward $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Moving forward , the variable assignmet statement \verb | <var:U> := <var:p3> | . This code forwards $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:p0> = <nat:1> \} $ as $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> \} $ . Observing the upcoming line of code found in our code , we have the variable update statement defining $ <var:U> + <var:p2$ to $ <var:U>$ . This takes $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> \} $ into $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> \} $ . Stepping through , we see the assignment line letting $ <var:U> + <var:p1$ as $ <var:U>$ . This statement takes $ \{ <var:j> = <var:A> \land <var:p1> = <nat:1> \cdot <var:A> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:A> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ . Considering the upcoming line of code contained in our series of instructions , we see the assignment line \verb | <var:U> := <var:U> + <var:p0> | . This command moves $ \{ <var:j> = <var:A> \land <var:p0> = <nat:1> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ as the condition $ \{ <var:j> = <var:A> \land <var:U> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:1> \} $ . This is shown with the assignment law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:j> ; <var:p2> := <var:p1> * <var:j> ; <var:p3> := <var:p2> * <var:j> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:5> ; <var:U> := <var:p3> <var:U> := <var:U> + <var:p2> <var:U> := <var:U> + <var:p1> <var:U> := <var:U> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:j> = <var:A> }} <def:poly> {{ <var:U> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <var:A> /\ <var:p2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <var:A> /\ <var:p2> = <var:A> ^ <nat:2> /\ <var:p3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <var:A> /\ <var:p2> = <var:A> ^ <nat:2> /\ <var:p3> = <var:A> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <nat:1> * <var:A> /\ <var:p2> = <var:A> ^ <nat:2> /\ <var:p3> = <var:A> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <nat:1> * <var:A> /\ <var:p2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:p3> = <var:A> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <nat:1> * <var:A> /\ <var:p2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <nat:1> * <var:A> /\ <var:p2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:p0> = <nat:1> /\ <var:U> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p1> = <nat:1> * <var:A> /\ <var:p0> = <nat:1> /\ <var:U> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:p0> = <nat:1> /\ <var:U> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:U> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 