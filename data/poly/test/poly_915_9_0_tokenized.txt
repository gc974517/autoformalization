\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:e> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:e> ; <var:Z2> := <var:Z2> * <var:e> ; <var:m> := <var:Z2> ; <var:m> := <var:m> + <var:Z1> ; <var:m> := <var:m> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:e> = <var:n> $ before evaluating our code then we see $ <var:m> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is given by standard Hoare logic . After , \begin{eqnarray} \{ <var:e> = <var:n> \} \, <var:Z0> := <nat:8> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \\ \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \, <var:Z1> := <nat:3> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \} \\ \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \} \, <var:Z1> := <var:Z1> * <var:e> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> * <var:n> \} \\ \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> * <var:n> \} \, <var:Z2> := <nat:4> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> * <var:n> \land <var:Z2> = <nat:4> \} \\ \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> * <var:n> \land <var:Z2> = <nat:4> \} \, <var:Z2> := <var:Z2> * <var:e> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> * <var:n> \land <var:Z2> = <nat:4> * <var:n> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:e> = <var:n> \} \, <var:Z0> := <nat:8> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \end{eqnarray} This is known to be sound by the variable assignmet scheme obtained from typical Hoare reasoning . Honing in on the upcoming statement contained in the list of commands , we have \begin{eqnarray} \{ <var:e> = <var:n> \} \, <var:Z0> := <nat:8> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:e> = <var:n> \} \, <var:Z0> := <nat:8> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \\ \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \} \, <var:Z1> := <nat:3> \, \{ <var:e> = <var:n> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:3> \} \end{eqnarray} This is rigorously given by the variable binding scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:e> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:e> ; <var:Z2> := <var:Z2> * <var:e> ; <var:m> := <var:Z2> ; <var:m> := <var:m> + <var:Z1> ; <var:m> := <var:m> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:e> = <var:n> }} <def:poly> {{ <var:m> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:n> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:n> /\ <var:Z2> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:n> /\ <var:Z2> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:3> * <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:Z0> = <nat:8> /\ <var:m> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 