\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l3> := <var:l2> * <var:E> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:8> ; <var:l3> := <var:l3> * <nat:9> ; <var:b> := <var:l3> <var:b> := <var:b> + <var:l1> <var:b> := <var:b> + <var:l0> \end{verbatim} Assume that we have $ <var:E> = <var:I> $ ahead of the execution of the segment of code it follows that we have $ <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> + <nat:7> $ after segment of code finishes . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:E> = <var:I> \} \\ <var:l1> := <var:E> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <var:I> \} \\ <var:l2> := <var:l1> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <var:I> \land <var:l2> = <var:I> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <var:I> \land <var:l2> = <var:I> ^ <nat:2> \land <var:l3> = <var:I> ^ <nat:3> \} \\ <var:l0> := <nat:7> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <var:I> \land <var:l2> = <var:I> ^ <nat:2> \land <var:l3> = <var:I> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:l1> := <var:l1> * <nat:8> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <nat:8> * <var:I> \land <var:l2> = <var:I> ^ <nat:2> \land <var:l3> = <var:I> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:l3> := <var:l3> * <nat:9> ; \\ \{ <var:E> = <var:I> \land <var:l1> = <nat:8> * <var:I> \land <var:l2> = <var:I> ^ <nat:2> \land <var:l3> = <nat:9> * <var:I> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:b> := <var:l3> \\ \{ <var:E> = <var:I> \land <var:l1> = <nat:8> * <var:I> \land <var:l2> = <var:I> ^ <nat:2> \land <var:l0> = <nat:7> \land <var:b> = <nat:9> * <var:I> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:l1> \\ \{ <var:E> = <var:I> \land <var:l0> = <nat:7> \land <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> \} \\ <var:b> := <var:b> + <var:l0> \\ \{ <var:E> = <var:I> \land <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> + <nat:7> \} \end{eqnarray} Hence , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l3> := <var:l2> * <var:E> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:8> ; <var:l3> := <var:l3> * <nat:9> ; <var:b> := <var:l3> <var:b> := <var:b> + <var:l1> <var:b> := <var:b> + <var:l0> {{ <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <var:I> /\ <var:l2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <var:I> /\ <var:l2> = <var:I> ^ <nat:2> /\ <var:l3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <var:I> /\ <var:l2> = <var:I> ^ <nat:2> /\ <var:l3> = <var:I> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <nat:8> * <var:I> /\ <var:l2> = <var:I> ^ <nat:2> /\ <var:l3> = <var:I> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <nat:8> * <var:I> /\ <var:l2> = <var:I> ^ <nat:2> /\ <var:l3> = <nat:9> * <var:I> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l1> = <nat:8> * <var:I> /\ <var:l2> = <var:I> ^ <nat:2> /\ <var:l0> = <nat:7> /\ <var:b> = <nat:9> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:l0> = <nat:7> /\ <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:b> = <nat:9> * <var:I> ^ <nat:3> + <nat:8> * <var:I> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 