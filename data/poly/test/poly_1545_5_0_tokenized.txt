\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:m> ; <var:k> := <var:q1> ; <var:k> := <var:k> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:m> = <var:C> $ before running our code it must be that $ <var:k> = <nat:8> \cdot <var:C> + <nat:6> $ once code terminates . \end{theorem} \begin{proof} The flow of logic for our series of instructions is given using Hoare reasoning . Moving forward to the proceeding line contained in the series of commands , we have \verb | { <var:m> = <var:C> } <var:q0> := <nat:6> { <var:m> = <var:C> \land <var:q0> = <nat:6> } | . Next , we have \verb | { <var:m> = <var:C> } <var:q0> := <nat:6> { <var:m> = <var:C> \land <var:q0> = <nat:6> } | , \verb | { <var:m> = <var:C> \land <var:q0> = <nat:6> } <var:q1> := <nat:8> { <var:m> = <var:C> \land <var:q0> = <nat:6> \land <var:q1> = <nat:8> } | , \verb | { <var:m> = <var:C> \land <var:q0> = <nat:6> \land <var:q1> = <nat:8> } <var:q1> := <var:q1> * <var:m> { <var:m> = <var:C> \land <var:q0> = <nat:6> \land <var:q1> = <nat:8> \cdot <var:C> } | and \verb | { <var:m> = <var:C> \land <var:q0> = <nat:6> \land <var:q1> = <nat:8> \cdot <var:C> } <var:k> := <var:q1> { <var:m> = <var:C> \land <var:q0> = <nat:6> \land <var:k> = <nat:8> \cdot <var:C> } | . This is sound through the assignment rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:m> ; <var:k> := <var:q1> ; <var:k> := <var:k> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:m> = <var:C> }} <def:poly> {{ <var:k> = <nat:8> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:q0> = <nat:6> /\ <var:k> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:C> /\ <var:k> = <nat:8> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 