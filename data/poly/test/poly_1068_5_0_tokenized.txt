\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:m> ; <var:J> := <var:X1> ; <var:J> := <var:J> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:m> = <var:n> $ , letting positive numbers $ <var:n> $ , prior to the execution of this set of instructions , it follows that $ <var:J> = <nat:8> \cdot <var:n> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our code segment can be demonstrated with usual Hoare logic . Paying attention to the next command found in our list of commands , we see the variable binding code yielding $ <nat:4> $ into $ <var:X0>$ . This transfers the precondition $ \{ <var:m> = <var:n> \} $ to the condition $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \} $ . This is ensured with the assignment law found in standard Hoare techniques . Taking a look at the upcoming line of code found in our series of instructions , we see the binding code assigning $ <nat:8> $ toward $ <var:X1>$ . This advances the precondition $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \} $ as the condition $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:X1> = <nat:8> \} $ . This is deduced by the assignment scheme given in typical Hoare techniques . Moving forward to the proceeding piece of code in the series of commands , we have the binding code \verb | <var:X1> := <var:X1> * <var:m> ; | . This code moves the condition $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:X1> = <nat:8> \} $ into $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:X1> = <nat:8> \times <var:n> \} $ . This is guaranteed by the assignment scheme from typical Hoare logic . Going to the next step , we see the line \verb | <var:J> := <var:X1> ; | . This takes $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:X1> = <nat:8> \times <var:n> \} $ into $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:J> = <nat:8> \times <var:n> \} $ . Stepping forward , we see the variable assignmet line \verb | <var:J> := <var:J> + <var:X0> | . This code moves $ \{ <var:m> = <var:n> \land <var:X0> = <nat:4> \land <var:J> = <nat:8> \times <var:n> \} $ toward the condition $ \{ <var:m> = <var:n> \land <var:J> = <nat:8> \times <var:n> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:m> ; <var:J> := <var:X1> ; <var:J> := <var:J> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <def:poly> {{ <var:J> = <nat:8> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:X0> = <nat:4> /\ <var:J> = <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:J> = <nat:8> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 