\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:A1> := <var:I> ; <var:A2> := <var:A1> * <var:I> ; <var:A3> := <var:A2> * <var:I> ; <var:A4> := <var:A3> * <var:I> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:2> ; <var:A4> := <var:A4> * <nat:4> ; <var:D> := <var:A4> <var:D> := <var:D> + <var:A3> <var:D> := <var:D> + <var:A2> <var:D> := <var:D> + <var:A1> <var:D> := <var:D> + <var:A0> \end{verbatim} Assume it to be that $ <var:I> = <var:B> $ before executing this set of commands it follows that $ <var:D> = <nat:4> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:5> $ after code segment has exited . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives us : \begin{eqnarray} \{ <var:I> = <var:B> \} \\ <var:A1> := <var:I> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <var:B> \} \\ <var:A2> := <var:A1> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <var:B> \land <var:A2> = <var:B> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <var:B> \land <var:A2> = <var:B> ^ <nat:2> \land <var:A3> = <var:B> ^ <nat:3> \} \\ <var:A4> := <var:A3> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <var:B> \land <var:A2> = <var:B> ^ <nat:2> \land <var:A3> = <var:B> ^ <nat:3> \land <var:A4> = <var:B> ^ <nat:4> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <var:B> \land <var:A2> = <var:B> ^ <nat:2> \land <var:A3> = <var:B> ^ <nat:3> \land <var:A4> = <var:B> ^ <nat:4> \land <var:A0> = <nat:5> \} \\ <var:A1> := <var:A1> * <nat:1> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <var:B> ^ <nat:2> \land <var:A3> = <var:B> ^ <nat:3> \land <var:A4> = <var:B> ^ <nat:4> \land <var:A0> = <nat:5> \} \\ <var:A2> := <var:A2> * <nat:9> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <nat:9> * <var:B> ^ <nat:2> \land <var:A3> = <var:B> ^ <nat:3> \land <var:A4> = <var:B> ^ <nat:4> \land <var:A0> = <nat:5> \} \\ <var:A3> := <var:A3> * <nat:2> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <nat:9> * <var:B> ^ <nat:2> \land <var:A3> = <nat:2> * <var:B> ^ <nat:3> \land <var:A4> = <var:B> ^ <nat:4> \land <var:A0> = <nat:5> \} \\ <var:A4> := <var:A4> * <nat:4> ; \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <nat:9> * <var:B> ^ <nat:2> \land <var:A3> = <nat:2> * <var:B> ^ <nat:3> \land <var:A4> = <nat:4> * <var:B> ^ <nat:4> \land <var:A0> = <nat:5> \} \\ <var:D> := <var:A4> \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <nat:9> * <var:B> ^ <nat:2> \land <var:A3> = <nat:2> * <var:B> ^ <nat:3> \land <var:A0> = <nat:5> \land <var:D> = <nat:4> * <var:B> ^ <nat:4> \} \\ <var:D> := <var:D> + <var:A3> \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A2> = <nat:9> * <var:B> ^ <nat:2> \land <var:A0> = <nat:5> \land <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:A2> \\ \{ <var:I> = <var:B> \land <var:A1> = <nat:1> * <var:B> \land <var:A0> = <nat:5> \land <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:A1> \\ \{ <var:I> = <var:B> \land <var:A0> = <nat:5> \land <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> \} \\ <var:D> := <var:D> + <var:A0> \\ \{ <var:I> = <var:B> \land <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:5> \} \end{eqnarray} Considering the above , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:I> = <var:B> }} <var:A1> := <var:I> ; <var:A2> := <var:A1> * <var:I> ; <var:A3> := <var:A2> * <var:I> ; <var:A4> := <var:A3> * <var:I> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:2> ; <var:A4> := <var:A4> * <nat:4> ; <var:D> := <var:A4> <var:D> := <var:D> + <var:A3> <var:D> := <var:D> + <var:A2> <var:D> := <var:D> + <var:A1> <var:D> := <var:D> + <var:A0> {{ <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <var:B> /\ <var:A2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <var:B> /\ <var:A2> = <var:B> ^ <nat:2> /\ <var:A3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <var:B> /\ <var:A2> = <var:B> ^ <nat:2> /\ <var:A3> = <var:B> ^ <nat:3> /\ <var:A4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <var:B> /\ <var:A2> = <var:B> ^ <nat:2> /\ <var:A3> = <var:B> ^ <nat:3> /\ <var:A4> = <var:B> ^ <nat:4> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <var:B> ^ <nat:2> /\ <var:A3> = <var:B> ^ <nat:3> /\ <var:A4> = <var:B> ^ <nat:4> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:A3> = <var:B> ^ <nat:3> /\ <var:A4> = <var:B> ^ <nat:4> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:A4> = <var:B> ^ <nat:4> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:A4> = <nat:4> * <var:B> ^ <nat:4> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:A0> = <nat:5> /\ <var:D> = <nat:4> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:A0> = <nat:5> /\ <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A1> = <nat:1> * <var:B> /\ <var:A0> = <nat:5> /\ <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:A0> = <nat:5> /\ <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:D> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 