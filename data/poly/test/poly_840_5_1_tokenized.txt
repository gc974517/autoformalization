\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:O1> := <var:D> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:6> ; <var:f> := <var:O1> <var:f> := <var:f> + <var:O0> \end{verbatim} Assume that we have $ <var:D> = <var:A> $ before evaluating the code , it follows that $ <var:f> = <nat:6> \cdot <var:A> + <nat:6> $ when program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:A> \} \\ <var:O1> := <var:D> ; \\ \{ <var:D> = <var:A> \land <var:O1> = <var:A> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:D> = <var:A> \land <var:O1> = <var:A> \land <var:O0> = <nat:6> \} \\ <var:O1> := <var:O1> * <nat:6> ; \\ \{ <var:D> = <var:A> \land <var:O1> = <nat:6> \cdot <var:A> \land <var:O0> = <nat:6> \} \\ <var:f> := <var:O1> \\ \{ <var:D> = <var:A> \land <var:O0> = <nat:6> \land <var:f> = <nat:6> \cdot <var:A> \} \\ <var:f> := <var:f> + <var:O0> \\ \{ <var:D> = <var:A> \land <var:f> = <nat:6> \cdot <var:A> + <nat:6> \} \end{eqnarray} Applying Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <var:O1> := <var:D> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:6> ; <var:f> := <var:O1> <var:f> := <var:f> + <var:O0> {{ <var:f> = <nat:6> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:O1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:O1> = <var:A> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:O1> = <nat:6> * <var:A> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:O0> = <nat:6> /\ <var:f> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:f> = <nat:6> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 