\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:k> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:1> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Assume that we have $ <var:k> = <var:J> $ given all $ <var:J> $ before executing the code then we have $ <var:M> = <nat:1> \times <var:J> + <nat:1> $ once program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:J> \} \\ <var:e1> := <var:k> ; \\ \{ <var:k> = <var:J> \land <var:e1> = <var:J> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:k> = <var:J> \land <var:e1> = <var:J> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:1> ; \\ \{ <var:k> = <var:J> \land <var:e1> = <nat:1> \cdot <var:J> \land <var:e0> = <nat:1> \} \\ <var:M> := <var:e1> \\ \{ <var:k> = <var:J> \land <var:e0> = <nat:1> \land <var:M> = <nat:1> \cdot <var:J> \} \\ <var:M> := <var:M> + <var:e0> \\ \{ <var:k> = <var:J> \land <var:M> = <nat:1> \cdot <var:J> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:k> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:1> ; <var:M> := <var:e1> <var:M> := <var:M> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:k> = <var:J> }} <def:poly> {{ <var:M> = <nat:1> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:e1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:e1> = <var:J> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:e1> = <nat:1> * <var:J> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:e0> = <nat:1> /\ <var:M> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:J> /\ <var:M> = <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 