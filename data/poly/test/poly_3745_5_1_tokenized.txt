\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:d> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:6> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:d> = <var:n> $ ( letting natural numbers $ <var:n> $ ) prior to the execution of this series of instructions , it must be that we see $ <var:j> = <nat:6> \cdot <var:n> + <nat:2> $ once code has finished . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is done using this decorated list of instructions . \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:g1> := <var:d> ; \\ \{ <var:d> = <var:n> \land <var:g1> = <var:n> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:d> = <var:n> \land <var:g1> = <var:n> \land <var:g0> = <nat:2> \} \\ <var:g1> := <var:g1> * <nat:6> ; \\ \{ <var:d> = <var:n> \land <var:g1> = <nat:6> \cdot <var:n> \land <var:g0> = <nat:2> \} \\ <var:j> := <var:g1> \\ \{ <var:d> = <var:n> \land <var:g0> = <nat:2> \land <var:j> = <nat:6> \cdot <var:n> \} \\ <var:j> := <var:j> + <var:g0> \\ \{ <var:d> = <var:n> \land <var:j> = <nat:6> \cdot <var:n> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:d> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:6> ; <var:j> := <var:g1> <var:j> := <var:j> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <def:poly> {{ <var:j> = <nat:6> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <var:n> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <nat:6> * <var:n> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g0> = <nat:2> /\ <var:j> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:j> = <nat:6> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 