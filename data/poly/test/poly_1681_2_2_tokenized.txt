\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:4> + <var:B> * <var:s> \end{verbatim} Allowing that $ <var:s> = <var:y> $ ( given all whole numbers $ <var:y> $ ) prior to evaluating this code segment , it holds that $ <var:B> = <nat:2> * <var:y> + <nat:4> $ after code segment has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:y> \} \\ <var:B> := <nat:2> ; \\ \{ <var:s> = <var:y> \land <var:B> = <nat:2> \} \\ <var:B> := <nat:4> + <var:B> * <var:s> \\ \{ <var:s> = <var:y> \land <var:B> = <nat:2> \times <var:y> + <nat:4> \} \end{eqnarray} Using usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <var:B> := <nat:2> ; <var:B> := <nat:4> + <var:B> * <var:s> {{ <var:B> = <nat:2> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:B> = <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 