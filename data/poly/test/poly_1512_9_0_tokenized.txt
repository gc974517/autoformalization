\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:Z> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:Z> ; <var:n2> := <var:n2> * <var:Z> ; <var:b> := <var:n2> ; <var:b> := <var:b> + <var:n1> ; <var:b> := <var:b> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Given --- for all whole numbers $ <var:J> $ --- it to be that $ <var:Z> = <var:J> $ before running this set of instructions then $ <var:b> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:Z> = <var:J> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \} \\ <var:n1> := <nat:2> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} \\ <var:n1> := <var:n1> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:J> \} \\ <var:n2> := <nat:8> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:J> \land <var:n2> = <nat:8> \} \\ <var:n2> := <var:n2> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:J> \land <var:n2> = <nat:8> \times <var:J> \} \\ <var:n2> := <var:n2> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:J> \land <var:n2> = <nat:8> \times <var:J> ^ <nat:2> \} \\ <var:b> := <var:n2> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \times <var:J> \land <var:b> = <nat:8> \times <var:J> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:n1> ; \\ \{ <var:Z> = <var:J> \land <var:n0> = <nat:1> \land <var:b> = <nat:8> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> \} \\ <var:b> := <var:b> + <var:n0> \\ \{ <var:Z> = <var:J> \land <var:b> = <nat:8> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> \} \end{eqnarray} Given the above , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:Z> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:Z> ; <var:n2> := <var:n2> * <var:Z> ; <var:b> := <var:n2> ; <var:b> := <var:b> + <var:n1> ; <var:b> := <var:b> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <def:poly> {{ <var:b> = <nat:8> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:J> /\ <var:b> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:n0> = <nat:1> /\ <var:b> = <nat:8> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:b> = <nat:8> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 