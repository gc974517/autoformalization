\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:7> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:Y> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:Y> ; <var:a2> := <var:a2> * <var:Y> ; <var:a3> := <nat:5> ; <var:a3> := <var:a3> * <var:Y> ; <var:a3> := <var:a3> * <var:Y> ; <var:a3> := <var:a3> * <var:Y> ; <var:u> := <var:a3> ; <var:u> := <var:u> + <var:a2> ; <var:u> := <var:u> + <var:a1> ; <var:u> := <var:u> + <var:a0> \end{verbatim} Assume that $ <var:Y> = <var:v> $ prior to executing our list of instructions , it holds that we have $ <var:u> = <nat:5> \times <var:v> ^ <nat:3> + <nat:7> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> + <nat:7> $ when set of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for our code segment is accomplished with typical Hoare reasoning . Looking at the following statement in our code segment , the variable update line assigning $ <nat:7> $ into $ <var:a0>$ . This forwards the precondition $ \{ <var:Y> = <var:v> \} $ toward $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \} $ . Next , the variable update code assigning $ <nat:5> $ as $ <var:a1>$ . This code moves $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \} $ toward $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \} $ . Focusing on the subsequent step contained in the series of commands , we have the code \verb | <var:a1> := <var:a1> * <var:Y> ; | . This statement transfers the precondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \} $ to the postcondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \} $ . This is rigorously given with the assignment law of Hoare techniques . Moving forward to the next step , we see the variable binding line \verb | <var:a2> := <nat:7> ; | . This forwards the precondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \} $ to $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \} $ . This is sound using the assignment law obtained from usual Hoare logic . Moving forward , we see the variable binding code binding $ <var:a2> * <var:Y> $ into $ <var:a2>$ . This line forwards the condition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \} $ as $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> \} $ . Going forward , the variable binding line \verb | <var:a2> := <var:a2> * <var:Y> ; | . This advances the precondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> \} $ to the postcondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \} $ . This is shown with the assignment inference rule defined in Hoare reasoning . Immediately after , the binding line giving $ <nat:5> $ to $ <var:a3>$ . This takes the precondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \} $ as $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \} $ . This is guaranteed using the assignment rule given by Hoare logic . After , we see the statement \verb | <var:a3> := <var:a3> * <var:Y> ; | . This statement forwards $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \} $ as the condition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> \} $ . Going forward , we have the assignment command \verb | <var:a3> := <var:a3> * <var:Y> ; | . This statement advances $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> \} $ to $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ . Honing in on the subsequent bit of code found in our list of instructions , we see the assignment line assigning $ <var:a3> * <var:Y> $ as $ <var:a3>$ . This forwards the condition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ as the postcondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> ^ <nat:3> \} $ . This is deduced using the assignment law given in standard Hoare techniques . Observing the following line of code contained in our code , we have the assignment command defining $ <var:a3> $ as $ <var:u>$ . This advances $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:v> ^ <nat:3> \} $ as the condition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> \} $ . Going to the next step , the binding command assigning $ <var:u> + <var:a2> $ as $ <var:u>$ . This takes the precondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:a2> = <nat:7> \cdot <var:v> ^ <nat:2> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> \} $ to the postcondition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> + <nat:7> \cdot <var:v> ^ <nat:2> \} $ . Paying attention to the proceeding command found in the set of instructions , the binding code \verb | <var:u> := <var:u> + <var:a1> ; | . This takes $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:a1> = <nat:5> \cdot <var:v> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> + <nat:7> \cdot <var:v> ^ <nat:2> \} $ toward $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> + <nat:7> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> \} $ . This is rigorously given through the assignment inference rule defined in usual Hoare techniques . Focusing on the following step seen in the segment of code , we see the binding statement yielding $ <var:u> + <var:a0$ into $ <var:u>$ . This redefines the condition $ \{ <var:Y> = <var:v> \land <var:a0> = <nat:7> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> + <nat:7> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> \} $ to the condition $ \{ <var:Y> = <var:v> \land <var:u> = <nat:5> \cdot <var:v> ^ <nat:3> + <nat:7> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Y> = <var:v> }} <var:a0> := <nat:7> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:Y> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:Y> ; <var:a2> := <var:a2> * <var:Y> ; <var:a3> := <nat:5> ; <var:a3> := <var:a3> * <var:Y> ; <var:a3> := <var:a3> * <var:Y> ; <var:a3> := <var:a3> * <var:Y> ; <var:u> := <var:a3> ; <var:u> := <var:u> + <var:a2> ; <var:u> := <var:u> + <var:a1> ; <var:u> := <var:u> + <var:a0> {{ <var:u> = <nat:5> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:a3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:a2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:u> = <nat:5> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:5> * <var:v> /\ <var:u> = <nat:5> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:a0> = <nat:7> /\ <var:u> = <nat:5> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:v> /\ <var:u> = <nat:5> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 