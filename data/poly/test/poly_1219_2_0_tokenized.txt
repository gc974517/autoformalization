\begin{document} \begin{theorem} We define a set of instructions : \begin{verbatim} <var:C0> := <nat:5> ; <var:s> := <var:C0> \end{verbatim} Given that $ <var:Z> = <var:Y> $ prior to running the set of commands , it holds that we have $ <var:s> = <nat:5> $ . \end{theorem} \begin{proof} The proof of the list of instructions is clear with standard Hoare techniques . Advancing on , we see \verb | { <var:Z> = <var:Y> } <var:C0> := <nat:5> { <var:Z> = <var:Y> \land <var:C0> = <nat:5> } | and \verb | { <var:Z> = <var:Y> \land <var:C0> = <nat:5> } <var:s> := <var:C0{ <var:Z> = <var:Y> \land <var:s> = <nat:5> } | . This is rigorously given through the variable update rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Z> = <var:Y> }} <var:C0> := <nat:5> ; <var:s> := <var:C0> {{ <var:s> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:s> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 