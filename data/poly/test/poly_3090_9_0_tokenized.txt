\begin{document} \begin{theorem} Let the following list of instructions as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:r> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:r> ; <var:c2> := <var:c2> * <var:r> ; <var:l> := <var:c2> ; <var:l> := <var:l> + <var:c1> ; <var:l> := <var:l> + <var:c0> \end{verbatim} Assuming , for every $ <var:t> \in \mathbb{N} $ , that $ <var:r> = <var:t> $ prior to evaluating our code segment , it follows that $ <var:l> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:8> \cdot <var:t> + <nat:3> $ when segment of code has exited . \end{theorem} \begin{proof} The application of usual Hoare reasoning yields : \begin{eqnarray} \{ <var:r> = <var:t> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:8> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> \} \\ <var:c1> := <var:c1> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> * <var:t> \} \\ <var:c2> := <nat:3> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> * <var:t> \land <var:c2> = <nat:3> \} \\ <var:c2> := <var:c2> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> * <var:t> \land <var:c2> = <nat:3> * <var:t> \} \\ <var:c2> := <var:c2> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> * <var:t> \land <var:c2> = <nat:3> * <var:t> ^ <nat:2> \} \\ <var:l> := <var:c2> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:c1> = <nat:8> * <var:t> \land <var:l> = <nat:3> * <var:t> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:c1> ; \\ \{ <var:r> = <var:t> \land <var:c0> = <nat:3> \land <var:l> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> \} \\ <var:l> := <var:l> + <var:c0> \\ \{ <var:r> = <var:t> \land <var:l> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> \} \end{eqnarray} Given the above , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:c0> := <nat:3> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:r> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:r> ; <var:c2> := <var:c2> * <var:r> ; <var:l> := <var:c2> ; <var:l> := <var:l> + <var:c1> ; <var:l> := <var:l> + <var:c0> {{ <var:l> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> * <var:t> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> * <var:t> /\ <var:c2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> * <var:t> /\ <var:c2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:8> * <var:t> /\ <var:l> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:c0> = <nat:3> /\ <var:l> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:l> = <nat:3> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 