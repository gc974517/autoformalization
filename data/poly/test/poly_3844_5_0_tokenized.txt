\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:8> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:v> ; <var:R> := <var:M1> ; <var:R> := <var:R> + <var:M0> \end{verbatim} Allow it to be that $ <var:v> = <var:G> $ ahead of the execution of our code segment , it holds that $ <var:R> = <nat:1> \times <var:G> + <nat:8> $ . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:v> = <var:G> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:v> = <var:G> \land <var:M0> = <nat:8> \} \\ <var:M1> := <nat:1> ; \\ \{ <var:v> = <var:G> \land <var:M0> = <nat:8> \land <var:M1> = <nat:1> \} \end{eqnarray} Furthering running the segment of code gives us : \begin{eqnarray} <var:M1> := <var:M1> * <var:v> ; \\ \{ <var:v> = <var:G> \land <var:M0> = <nat:8> \land <var:M1> = <nat:1> \cdot <var:G> \} \\ <var:R> := <var:M1> ; \\ \{ <var:v> = <var:G> \land <var:M0> = <nat:8> \land <var:R> = <nat:1> \cdot <var:G> \} \\ <var:R> := <var:R> + <var:M0> \\ \{ <var:v> = <var:G> \land <var:R> = <nat:1> \cdot <var:G> + <nat:8> \} \end{eqnarray} The application of usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:v> = <var:G> }} <var:M0> := <nat:8> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:v> ; <var:R> := <var:M1> ; <var:R> := <var:R> + <var:M0> {{ <var:R> = <nat:1> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:M0> = <nat:8> /\ <var:R> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:G> /\ <var:R> = <nat:1> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 