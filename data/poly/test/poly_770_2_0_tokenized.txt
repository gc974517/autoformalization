\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:x0> := <nat:3> ; <var:r> := <var:x0> \end{verbatim} Assume that $ <var:h> = <var:y> $ ahead of interpreting the list of commands it must be that we have $ <var:r> = <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:y> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:h> = <var:y> \land <var:x0> = <nat:3> \} \\ <var:r> := <var:x0> \\ \{ <var:h> = <var:y> \land <var:r> = <nat:3> \} \end{eqnarray} Given the above , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <var:x0> := <nat:3> ; <var:r> := <var:x0> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 