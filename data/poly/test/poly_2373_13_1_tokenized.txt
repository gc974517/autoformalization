\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:p> ; <var:h2> := <var:h1> * <var:p> ; <var:h3> := <var:h2> * <var:p> ; <var:h4> := <var:h3> * <var:p> ; <var:h5> := <var:h4> * <var:p> ; <var:h0> := <nat:3> ; <var:h2> := <var:h2> * <nat:3> ; <var:h4> := <var:h4> * <nat:3> ; <var:h5> := <var:h5> * <nat:1> ; <var:D> := <var:h5> <var:D> := <var:D> + <var:h4> <var:D> := <var:D> + <var:h2> <var:D> := <var:D> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:p> = <var:H> $ ahead of evaluating the code segment then $ <var:D> = <nat:1> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be demonstrated through Hoare logic . Immediately after , the variable assignmet command \verb | <var:h1> := <var:p> ; | . This transfers the condition $ \{ <var:p> = <var:H> \} $ into the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \} $ . This is known to be sound with the assignment law from usual Hoare techniques . Going to the next step , the variable binding command \verb | <var:h2> := <var:h1> * <var:p> ; | . This redefines the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \} $ toward the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \} $ . Following , the binding command giving $ <var:h2> * <var:p> $ as $ <var:h3>$ . This command forwards the precondition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \} $ into $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule given by Hoare techniques . Honing in on the next bit of code contained in our set of commands , the statement letting $ <var:h3> * <var:p> $ to $ <var:h4>$ . This line advances $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \} $ as $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \} $ . Moving forward to the proceeding step contained in our list of instructions , we have the binding statement letting $ <var:h4> * <var:p> $ toward $ <var:h5>$ . This line moves $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \} $ as the postcondition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \} $ . Moving on to the following command in the list of commands , the variable binding statement assigning $ <nat:3> $ as $ <var:h0>$ . This code transfers the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \} $ toward the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ . Going to the next step , we see the variable update code \verb | <var:h2> := <var:h2> * <nat:3> ; | . This transfers the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ into $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ . Advancing to the next step , we have the assignment statement \verb | <var:h4> := <var:h4> * <nat:3> ; | . This line moves $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ toward $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ . Observing the upcoming line of code seen in the series of commands , we have the command defining $ <var:h5> * <nat:1> $ toward $ <var:h5>$ . This code moves the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h5> = <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ into the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h5> = <nat:1> \cdot <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ . This is deduced by the assignment law of usual Hoare reasoning . Advancing to the proceeding command contained in the series of instructions , we see the variable assignmet code assigning $ <var:h5$ as $ <var:D>$ . This transfers the precondition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h5> = <nat:1> \cdot <var:H> ^ <nat:5> \land <var:h0> = <nat:3> \} $ into $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> \} $ . This is known to be sound with the assignment inference rule defined by Hoare techniques . Focusing on the proceeding step seen in the series of instructions , we have the command binding $ <var:D> + <var:h4$ as $ <var:D>$ . This advances the precondition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h4> = <nat:3> \cdot <var:H> ^ <nat:4> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> \} $ toward the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> \} $ . This is deduced by the assignment scheme found in typical Hoare reasoning . Moving forward , we see the environment update command binding $ <var:D> + <var:h2$ into $ <var:D>$ . This command transfers the precondition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:3> \cdot <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> \} $ as the condition $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:2> \} $ . Moving forward to the upcoming bit of code in our code , we have the variable assignmet line \verb | <var:D> := <var:D> + <var:h0> | . This line forwards $ \{ <var:p> = <var:H> \land <var:h1> = <var:H> \land <var:h0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:2> \} $ into $ \{ <var:p> = <var:H> \land <var:D> = <nat:1> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <var:h4> : string := " <var:h4> " . Definition <var:h5> : string := " <var:h5> " . Definition <def:poly> := <var:h1> := <var:p> ; <var:h2> := <var:h1> * <var:p> ; <var:h3> := <var:h2> * <var:p> ; <var:h4> := <var:h3> * <var:p> ; <var:h5> := <var:h4> * <var:p> ; <var:h0> := <nat:3> ; <var:h2> := <var:h2> * <nat:3> ; <var:h4> := <var:h4> * <nat:3> ; <var:h5> := <var:h5> * <nat:1> ; <var:D> := <var:h5> <var:D> := <var:D> + <var:h4> <var:D> := <var:D> + <var:h2> <var:D> := <var:D> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:p> = <var:H> }} <def:poly> {{ <var:D> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <var:H> ^ <nat:4> /\ <var:h5> = <var:H> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <var:H> ^ <nat:4> /\ <var:h5> = <var:H> ^ <nat:5> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <var:H> ^ <nat:4> /\ <var:h5> = <var:H> ^ <nat:5> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <nat:3> * <var:H> ^ <nat:4> /\ <var:h5> = <var:H> ^ <nat:5> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <nat:3> * <var:H> ^ <nat:4> /\ <var:h5> = <nat:1> * <var:H> ^ <nat:5> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h4> = <nat:3> * <var:H> ^ <nat:4> /\ <var:h0> = <nat:3> /\ <var:D> = <nat:1> * <var:H> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h0> = <nat:3> /\ <var:D> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:h1> = <var:H> /\ <var:h0> = <nat:3> /\ <var:D> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:H> /\ <var:D> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 