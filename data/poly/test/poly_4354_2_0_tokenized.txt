\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:7> ; <var:K> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Allow that we have $ <var:e> = <var:y> $ prior to interpreting our series of instructions , it must be that $ <var:K> = <nat:7> $ when list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:y> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:e> = <var:y> \land <var:U0> = <nat:7> \} \\ <var:K> := <var:U0> \\ \{ <var:e> = <var:y> \land <var:K> = <nat:7> \} \end{eqnarray} Applying typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:7> ; <var:K> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:e> = <var:y> }} <def:poly> {{ <var:K> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:y> /\ <var:K> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 