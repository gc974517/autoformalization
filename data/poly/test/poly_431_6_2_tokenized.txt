\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:4> ; <var:F> := <nat:2> + <var:F> * <var:n> ; <var:F> := <nat:3> + <var:F> * <var:n> ; <var:F> := <nat:1> + <var:F> * <var:n> ; <var:F> := <nat:2> + <var:F> * <var:n> ; <var:F> := <nat:4> + <var:F> * <var:n> \end{verbatim} Allowing it to hold that $ <var:n> = <var:g> $ prior to executing the code segment then $ <var:F> = <nat:4> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:4> $ after set of instructions has executed . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:n> = <var:g> \} \\ <var:F> := <nat:4> ; \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \} \\ <var:F> := <nat:2> + <var:F> * <var:n> ; \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \cdot <var:g> + <nat:2> \} \\ <var:F> := <nat:3> + <var:F> * <var:n> ; \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:3> \} \\ <var:F> := <nat:1> + <var:F> * <var:n> ; \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:1> \} \\ <var:F> := <nat:2> + <var:F> * <var:n> ; \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:2> \} \\ <var:F> := <nat:4> + <var:F> * <var:n> \\ \{ <var:n> = <var:g> \land <var:F> = <nat:4> \cdot <var:g> ^ <nat:5> + <nat:2> \cdot <var:g> ^ <nat:4> + <nat:3> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:4> \} \end{eqnarray} Thus , this code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:n> = <var:g> }} <var:F> := <nat:4> ; <var:F> := <nat:2> + <var:F> * <var:n> ; <var:F> := <nat:3> + <var:F> * <var:n> ; <var:F> := <nat:1> + <var:F> * <var:n> ; <var:F> := <nat:2> + <var:F> * <var:n> ; <var:F> := <nat:4> + <var:F> * <var:n> {{ <var:F> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:F> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 