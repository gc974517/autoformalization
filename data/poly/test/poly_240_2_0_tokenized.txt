\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:6> ; <var:D> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allowing it to hold that $ <var:M> = <var:E> $ before running our code segment it holds that $ <var:D> = <nat:6> $ once series of commands terminates . \end{theorem} \begin{proof} The flow of logic for the set of instructions is accomplished through Hoare logic . Taking a look at the following bit of code seen in the list of commands , we have the assignment statement \verb | <var:u0> := <nat:6> ; | . This takes $ \{ <var:M> = <var:E> \} $ to $ \{ <var:M> = <var:E> \land <var:u0> = <nat:6> \} $ . Jumping to the upcoming command contained in the list of commands , we see the statement defining $ <var:u0$ to $ <var:D>$ . This redefines the precondition $ \{ <var:M> = <var:E> \land <var:u0> = <nat:6> \} $ as the postcondition $ \{ <var:M> = <var:E> \land <var:D> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:D> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:M> = <var:E> }} <def:poly> {{ <var:D> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:D> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 