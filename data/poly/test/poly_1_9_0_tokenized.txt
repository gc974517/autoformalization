\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:Z> ; <var:q2> := <nat:2> ; <var:q2> := <var:q2> * <var:Z> ; <var:q2> := <var:q2> * <var:Z> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allow that $ <var:Z> = <var:n> $ prior to executing this code segment , it must be that we see $ <var:K> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:6> $ when set of instructions has exited . \end{theorem} \begin{proof} The course of logic for this program can be done by typical Hoare logic . Taking another step toward the following steps seen in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:n> \} & <var:q0> := <nat:6> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \} & <var:q1> := <nat:2> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} & <var:q1> := <var:q1> * <var:Z> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \} & <var:q2> := <nat:2> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \land <var:q2> = <nat:2> \} \end{tabular} This is shown through the variable binding inference rule defined by Hoare reasoning . Looking at the subsequent lines of codecontained in our code , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:n> \} & <var:q0> := <nat:6> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \} & <var:q1> := <nat:2> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} & <var:q1> := <var:q1> * <var:Z> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \} & <var:q2> := <nat:2> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \land <var:q2> = <nat:2> \} \\ \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \land <var:q2> = <nat:2> \} & <var:q2> := <var:q2> * <var:Z> & \{ <var:Z> = <var:n> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:n> \land <var:q2> = <nat:2> \times <var:n> \} \end{tabular} This is shown with the variable assignmet law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:Z> ; <var:q2> := <nat:2> ; <var:q2> := <var:q2> * <var:Z> ; <var:q2> := <var:q2> * <var:Z> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <def:poly> {{ <var:K> = <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:n> /\ <var:q2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:n> /\ <var:q2> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:n> /\ <var:q2> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:n> /\ <var:K> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:q0> = <nat:6> /\ <var:K> = <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:K> = <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 