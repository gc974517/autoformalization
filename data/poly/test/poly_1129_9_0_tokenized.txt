\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:9> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:I> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:I> ; <var:o2> := <var:o2> * <var:I> ; <var:s> := <var:o2> ; <var:s> := <var:s> + <var:o1> ; <var:s> := <var:s> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Given that $ <var:I> = <var:N> $ ( given natural coefficients $ <var:N> $ ) ahead of the execution of this set of commands , it holds that we have $ <var:s> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:5> \cdot <var:N> + <nat:9> $ after list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:N> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \} \\ <var:o1> := <nat:5> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> \} \\ <var:o1> := <var:o1> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:N> \} \\ <var:o2> := <nat:6> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:N> \land <var:o2> = <nat:6> \} \\ <var:o2> := <var:o2> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:N> \land <var:o2> = <nat:6> * <var:N> \} \\ <var:o2> := <var:o2> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:N> \land <var:o2> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:s> := <var:o2> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:N> \land <var:s> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:o1> ; \\ \{ <var:I> = <var:N> \land <var:o0> = <nat:9> \land <var:s> = <nat:6> * <var:N> ^ <nat:2> + <nat:5> * <var:N> \} \\ <var:s> := <var:s> + <var:o0> \\ \{ <var:I> = <var:N> \land <var:s> = <nat:6> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:9> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:I> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:I> ; <var:o2> := <var:o2> * <var:I> ; <var:s> := <var:o2> ; <var:s> := <var:s> + <var:o1> ; <var:s> := <var:s> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:s> = <nat:6> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:N> /\ <var:o2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:N> /\ <var:o2> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:N> /\ <var:o2> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:N> /\ <var:s> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:o0> = <nat:9> /\ <var:s> = <nat:6> * <var:N> ^ <nat:2> + <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:s> = <nat:6> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 