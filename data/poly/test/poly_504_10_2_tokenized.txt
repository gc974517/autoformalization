\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <var:E> * <var:G> ; <var:E> := <nat:1> + <var:E> * <var:G> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <nat:3> + <var:E> * <var:G> ; <var:E> := <var:E> * <var:G> ; <var:E> := <nat:3> + <var:E> * <var:G> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <nat:2> + <var:E> * <var:G> \end{verbatim} Allowing that $ <var:G> = <var:s> $ ( letting $ <var:s> \in \mathbb{Z}^+ $ ) before the execution of our code segment it must be that $ <var:E> = <nat:4> \times <var:s> ^ <nat:9> + <nat:4> \times <var:s> ^ <nat:8> + <nat:1> \times <var:s> ^ <nat:6> + <nat:4> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:2> $ once set of commands exits . \end{theorem} \begin{proof} The application of Hoare logic results in : \begin{eqnarray} \{ <var:G> = <var:s> \} \\ <var:E> := <nat:4> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> \} \\ <var:E> := <nat:4> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> + <nat:4> \} \\ <var:E> := <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + \} \\ <var:E> := <nat:1> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:1> \} \\ <var:E> := <nat:4> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + <nat:4> \} \\ <var:E> := <nat:3> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} \\ <var:E> := <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + \} \end{eqnarray} Continuing the evaluation of the code produces : \begin{eqnarray} <var:E> := <nat:3> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> \} \\ <var:E> := <nat:4> + <var:E> * <var:G> ; \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:8> + <nat:4> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:4> \} \\ <var:E> := <nat:2> + <var:E> * <var:G> \\ \{ <var:G> = <var:s> \land <var:E> = <nat:4> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> \} \end{eqnarray} Hence , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:G> = <var:s> }} <var:E> := <nat:4> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <var:E> * <var:G> ; <var:E> := <nat:1> + <var:E> * <var:G> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <nat:3> + <var:E> * <var:G> ; <var:E> := <var:E> * <var:G> ; <var:E> := <nat:3> + <var:E> * <var:G> ; <var:E> := <nat:4> + <var:E> * <var:G> ; <var:E> := <nat:2> + <var:E> * <var:G> {{ <var:E> = <nat:4> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:8> + <nat:4> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 