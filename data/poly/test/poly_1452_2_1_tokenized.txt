\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:7> ; <var:P> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow --- with some positive integer coefficients $ <var:V> $ --- $ <var:b> = <var:V> $ prior to interpreting the set of instructions , it follows that $ <var:P> = <nat:7> $ when code exits . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:b> = <var:V> \} \\ <var:J0> := <nat:7> ; \\ \{ <var:b> = <var:V> \land <var:J0> = <nat:7> \} \end{eqnarray} Continuing interpreting the set of commands gives us : \begin{eqnarray} <var:P> := <var:J0> \\ \{ <var:b> = <var:V> \land <var:P> = <nat:7> \} \end{eqnarray} Considering the above , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:7> ; <var:P> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <def:poly> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 