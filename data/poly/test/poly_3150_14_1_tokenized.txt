\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:b> ; <var:g2> := <var:g1> * <var:b> ; <var:g3> := <var:g2> * <var:b> ; <var:g4> := <var:g3> * <var:b> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:5> ; <var:g4> := <var:g4> * <nat:7> ; <var:o> := <var:g4> <var:o> := <var:o> + <var:g3> <var:o> := <var:o> + <var:g2> <var:o> := <var:o> + <var:g1> <var:o> := <var:o> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Given that we have $ <var:b> = <var:u> $ --- letting integers $ <var:u> $ --- prior to running our set of instructions it must be that we have $ <var:o> = <nat:7> \times <var:u> ^ <nat:4> + <nat:5> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:b> = <var:u> \} \\ <var:g1> := <var:b> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <var:u> \} \\ <var:g2> := <var:g1> * <var:b> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:b> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \} \\ <var:g4> := <var:g3> * <var:b> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \} \\ <var:g0> := <nat:9> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g1> := <var:g1> * <nat:4> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g2> := <var:g2> * <nat:5> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g3> := <var:g3> * <nat:5> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g4> := <var:g4> * <nat:7> ; \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:u> ^ <nat:3> \land <var:g4> = <nat:7> \times <var:u> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:o> := <var:g4> \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:u> ^ <nat:3> \land <var:g0> = <nat:9> \land <var:o> = <nat:7> \times <var:u> ^ <nat:4> \} \\ <var:o> := <var:o> + <var:g3> \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:o> = <nat:7> \times <var:u> ^ <nat:4> + <nat:5> \times <var:u> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:g2> \\ \{ <var:b> = <var:u> \land <var:g1> = <nat:4> \times <var:u> \land <var:g0> = <nat:9> \land <var:o> = <nat:7> \times <var:u> ^ <nat:4> + <nat:5> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:g1> \\ \{ <var:b> = <var:u> \land <var:g0> = <nat:9> \land <var:o> = <nat:7> \times <var:u> ^ <nat:4> + <nat:5> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> \} \\ <var:o> := <var:o> + <var:g0> \\ \{ <var:b> = <var:u> \land <var:o> = <nat:7> \times <var:u> ^ <nat:4> + <nat:5> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:9> \} \end{eqnarray} Hence , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Definition <def:poly> := <var:g1> := <var:b> ; <var:g2> := <var:g1> * <var:b> ; <var:g3> := <var:g2> * <var:b> ; <var:g4> := <var:g3> * <var:b> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:5> ; <var:g4> := <var:g4> * <nat:7> ; <var:o> := <var:g4> <var:o> := <var:o> + <var:g3> <var:o> := <var:o> + <var:g2> <var:o> := <var:o> + <var:g1> <var:o> := <var:o> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:b> = <var:u> }} <def:poly> {{ <var:o> = <nat:7> * <var:u> ^ <nat:4> + <nat:5> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:u> ^ <nat:3> /\ <var:g4> = <nat:7> * <var:u> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:u> ^ <nat:3> /\ <var:g0> = <nat:9> /\ <var:o> = <nat:7> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:g0> = <nat:9> /\ <var:o> = <nat:7> * <var:u> ^ <nat:4> + <nat:5> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g1> = <nat:4> * <var:u> /\ <var:g0> = <nat:9> /\ <var:o> = <nat:7> * <var:u> ^ <nat:4> + <nat:5> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:g0> = <nat:9> /\ <var:o> = <nat:7> * <var:u> ^ <nat:4> + <nat:5> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:u> /\ <var:o> = <nat:7> * <var:u> ^ <nat:4> + <nat:5> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 