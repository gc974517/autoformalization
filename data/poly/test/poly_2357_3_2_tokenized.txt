\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <nat:4> + <var:S> * <var:O> ; <var:S> := <nat:2> + <var:S> * <var:O> \end{verbatim} Given that we have $ <var:O> = <var:I> $ --- for integers $ <var:I> $ --- before evaluating this segment of code it holds that we see $ <var:S> = <nat:4> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:2> $ after program terminates . \end{theorem} \begin{proof} The course of logic for this series of instructions is accomplished by Hoare logic . Looking at the proceeding line contained in our series of instructions , we see the variable binding code \verb | <var:S> := <nat:4> ; | . This transfers the precondition $ \{ <var:O> = <var:I> \} $ into $ \{ <var:O> = <var:I> \land <var:S> = <nat:4> \} $ . This is rigorously given with the assignment scheme of standard Hoare reasoning . Moving on , we have the assignment line \verb | <var:S> := <nat:4> + <var:S> * <var:O> ; | . This line advances the precondition $ \{ <var:O> = <var:I> \land <var:S> = <nat:4> \} $ to the condition $ \{ <var:O> = <var:I> \land <var:S> = <nat:4> \cdot <var:I> + <nat:4> \} $ . Moving forward to the upcoming line of code contained in the code , the variable update code \verb | <var:S> := <nat:2> + <var:S> * <var:O> | . This statement takes $ \{ <var:O> = <var:I> \land <var:S> = <nat:4> \cdot <var:I> + <nat:4> \} $ to $ \{ <var:O> = <var:I> \land <var:S> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <var:S> := <nat:4> ; <var:S> := <nat:4> + <var:S> * <var:O> ; <var:S> := <nat:2> + <var:S> * <var:O> {{ <var:S> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:S> = <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:S> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 