\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:s> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:s> ; <var:m2> := <var:m2> * <var:s> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:s> ; <var:m3> := <var:m3> * <var:s> ; <var:m3> := <var:m3> * <var:s> ; <var:c> := <var:m3> ; <var:c> := <var:c> + <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Allowing $ <var:s> = <var:n> $ --- for some integers $ <var:n> $ --- ahead of running the segment of code , it holds that we see $ <var:c> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:3> $ once set of commands is done . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be seen by Hoare reasoning . Immediately after , \verb | { <var:s> = <var:n> } <var:m0> := <nat:3> { <var:s> = <var:n> \land <var:m0> = <nat:3> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> } <var:m1> := <nat:4> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> } <var:m1> := <var:m1> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> } <var:m2> := <nat:1> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> } <var:m2> := <var:m2> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> } <var:m2> := <var:m2> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> } <var:m3> := <nat:1> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> } <var:m3> := <var:m3> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> } <var:m3> := <var:m3> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> ^ <nat:2> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> ^ <nat:2> } <var:m3> := <var:m3> * <var:s> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> ^ <nat:3> } | , \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:n> ^ <nat:3> } <var:c> := <var:m3> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:c> = <nat:1> \cdot <var:n> ^ <nat:3> } | and \verb | { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:m2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:c> = <nat:1> \cdot <var:n> ^ <nat:3> } <var:c> := <var:c> + <var:m2> { <var:s> = <var:n> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \cdot <var:n> \land <var:c> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> } | . Honing in on the following piece of code found in our set of commands , \verb | { <var:s> = <var:n> } <var:m0> := <nat:3> { <var:s> = <var:n> \land <var:m0> = <nat:3> } | . This is sound by the environment update law from standard Hoare logic . Going to the next step , \verb | { <var:s> = <var:n> } <var:m0> := <nat:3> { <var:s> = <var:n> \land <var:m0> = <nat:3> } | . This is deduced using the variable binding scheme given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:s> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:s> ; <var:m2> := <var:m2> * <var:s> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:s> ; <var:m3> := <var:m3> * <var:s> ; <var:m3> := <var:m3> * <var:s> ; <var:c> := <var:m3> ; <var:c> := <var:c> + <var:m2> ; <var:c> := <var:c> + <var:m1> ; <var:c> := <var:c> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <def:poly> {{ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:m3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:m2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:n> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:m0> = <nat:3> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:c> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 