\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:1> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:t> ; <var:o> := <var:X1> ; <var:o> := <var:o> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:t> = <var:b> $ ahead of the evaluation of our segment of code , it follows that $ <var:o> = <nat:7> \times <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be accomplished with Hoare techniques . Moving forward , we see \begin{eqnarray} \{ <var:t> = <var:b> \} \, <var:X0> := <nat:1> \, \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \} \\ \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \} \, <var:X1> := <nat:7> \, \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \land <var:X1> = <nat:7> \} \\ \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \land <var:X1> = <nat:7> \} \, <var:X1> := <var:X1> * <var:t> \, \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \land <var:X1> = <nat:7> \cdot <var:b> \} \\ \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \land <var:X1> = <nat:7> \cdot <var:b> \} \, <var:o> := <var:X1> \, \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \land <var:o> = <nat:7> \cdot <var:b> \} \end{eqnarray} Taking a look at the subsequent line contained in the list of commands , we see \begin{eqnarray} \{ <var:t> = <var:b> \} \, <var:X0> := <nat:1> \, \{ <var:t> = <var:b> \land <var:X0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:t> ; <var:o> := <var:X1> ; <var:o> := <var:o> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:t> = <var:b> }} <def:poly> {{ <var:o> = <nat:7> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:X0> = <nat:1> /\ <var:o> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:o> = <nat:7> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 