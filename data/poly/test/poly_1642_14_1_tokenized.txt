\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:x> ; <var:o2> := <var:o1> * <var:x> ; <var:o3> := <var:o2> * <var:x> ; <var:o4> := <var:o3> * <var:x> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:3> ; <var:o4> := <var:o4> * <nat:3> ; <var:i> := <var:o4> <var:i> := <var:i> + <var:o3> <var:i> := <var:i> + <var:o2> <var:i> := <var:i> + <var:o1> <var:i> := <var:i> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assuming that $ <var:x> = <var:Q> $ --- letting $ <var:Q> \in \mathbb{N} $ --- before the execution of the series of instructions , it follows that $ <var:i> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> $ once code terminates . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:Q> \} \\ <var:o1> := <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <var:Q> \} \\ <var:o2> := <var:o1> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <var:Q> \land <var:o2> = <var:Q> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <var:Q> \land <var:o2> = <var:Q> ^ <nat:2> \land <var:o3> = <var:Q> ^ <nat:3> \} \\ <var:o4> := <var:o3> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <var:Q> \land <var:o2> = <var:Q> ^ <nat:2> \land <var:o3> = <var:Q> ^ <nat:3> \land <var:o4> = <var:Q> ^ <nat:4> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <var:Q> \land <var:o2> = <var:Q> ^ <nat:2> \land <var:o3> = <var:Q> ^ <nat:3> \land <var:o4> = <var:Q> ^ <nat:4> \land <var:o0> = <nat:3> \} \\ <var:o1> := <var:o1> * <nat:1> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <var:Q> ^ <nat:2> \land <var:o3> = <var:Q> ^ <nat:3> \land <var:o4> = <var:Q> ^ <nat:4> \land <var:o0> = <nat:3> \} \\ <var:o2> := <var:o2> * <nat:1> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:o3> = <var:Q> ^ <nat:3> \land <var:o4> = <var:Q> ^ <nat:4> \land <var:o0> = <nat:3> \} \\ <var:o3> := <var:o3> * <nat:3> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:o3> = <nat:3> * <var:Q> ^ <nat:3> \land <var:o4> = <var:Q> ^ <nat:4> \land <var:o0> = <nat:3> \} \\ <var:o4> := <var:o4> * <nat:3> ; \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:o3> = <nat:3> * <var:Q> ^ <nat:3> \land <var:o4> = <nat:3> * <var:Q> ^ <nat:4> \land <var:o0> = <nat:3> \} \\ <var:i> := <var:o4> \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:o3> = <nat:3> * <var:Q> ^ <nat:3> \land <var:o0> = <nat:3> \land <var:i> = <nat:3> * <var:Q> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:o3> \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:o2> \\ \{ <var:x> = <var:Q> \land <var:o1> = <nat:1> * <var:Q> \land <var:o0> = <nat:3> \land <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:o1> \\ \{ <var:x> = <var:Q> \land <var:o0> = <nat:3> \land <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> \} \\ <var:i> := <var:i> + <var:o0> \\ \{ <var:x> = <var:Q> \land <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> \} \end{eqnarray} Hence , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Definition <def:poly> := <var:o1> := <var:x> ; <var:o2> := <var:o1> * <var:x> ; <var:o3> := <var:o2> * <var:x> ; <var:o4> := <var:o3> * <var:x> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:1> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:3> ; <var:o4> := <var:o4> * <nat:3> ; <var:i> := <var:o4> <var:i> := <var:i> + <var:o3> <var:i> := <var:i> + <var:o2> <var:i> := <var:i> + <var:o1> <var:i> := <var:i> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:x> = <var:Q> }} <def:poly> {{ <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <var:Q> /\ <var:o2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <var:Q> /\ <var:o2> = <var:Q> ^ <nat:2> /\ <var:o3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <var:Q> /\ <var:o2> = <var:Q> ^ <nat:2> /\ <var:o3> = <var:Q> ^ <nat:3> /\ <var:o4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <var:Q> /\ <var:o2> = <var:Q> ^ <nat:2> /\ <var:o3> = <var:Q> ^ <nat:3> /\ <var:o4> = <var:Q> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <var:Q> ^ <nat:2> /\ <var:o3> = <var:Q> ^ <nat:3> /\ <var:o4> = <var:Q> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:o3> = <var:Q> ^ <nat:3> /\ <var:o4> = <var:Q> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:o4> = <var:Q> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:o4> = <nat:3> * <var:Q> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:o0> = <nat:3> /\ <var:i> = <nat:3> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:o0> = <nat:3> /\ <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o0> = <nat:3> /\ <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:o0> = <nat:3> /\ <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:i> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 