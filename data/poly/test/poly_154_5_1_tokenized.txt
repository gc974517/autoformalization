\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:q> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:a> := <var:N1> <var:a> := <var:a> + <var:N0> \end{verbatim} Allowing that $ <var:q> = <var:H> $ before running our set of commands , it follows that we see $ <var:a> = <nat:3> \times <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:q> = <var:H> \} \\ <var:N1> := <var:q> ; \\ \{ <var:q> = <var:H> \land <var:N1> = <var:H> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:q> = <var:H> \land <var:N1> = <var:H> \land <var:N0> = <nat:3> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:q> = <var:H> \land <var:N1> = <nat:3> * <var:H> \land <var:N0> = <nat:3> \} \\ <var:a> := <var:N1> \\ \{ <var:q> = <var:H> \land <var:N0> = <nat:3> \land <var:a> = <nat:3> * <var:H> \} \\ <var:a> := <var:a> + <var:N0> \\ \{ <var:q> = <var:H> \land <var:a> = <nat:3> * <var:H> + <nat:3> \} \end{eqnarray} Continuing running our series of instructions results in : \begin{eqnarray} \end{eqnarray} Hence , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:q> = <var:H> }} <var:N1> := <var:q> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:a> := <var:N1> <var:a> := <var:a> + <var:N0> {{ <var:a> = <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:N1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:N1> = <var:H> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:N1> = <nat:3> * <var:H> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:N0> = <nat:3> /\ <var:a> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:a> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 