\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:T> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:T> ; <var:j2> := <var:j2> * <var:T> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:G> := <var:j3> ; <var:G> := <var:G> + <var:j2> ; <var:G> := <var:G> + <var:j1> ; <var:G> := <var:G> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:T> = <var:I> $ before executing our series of instructions it follows that $ <var:G> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> $ once segment of code is done executing . \end{theorem} \begin{proof} The proof of this list of commands can be accomplished using Hoare logic . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:T> = <var:I> \} & <var:j0> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} & <var:j1> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} & <var:j1> := <var:j1> * <var:T> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \} & <var:j2> := <nat:3> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \land <var:j2> = <nat:3> \} \end{tabular} Looking at the subsequent commands found in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:I> \} & <var:j0> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} & <var:j1> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} & <var:j1> := <var:j1> * <var:T> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \} \end{tabular} Honing in on the next lines seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:I> \} & <var:j0> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} & <var:j1> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} & <var:j1> := <var:j1> * <var:T> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \} & <var:j2> := <nat:3> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \land <var:j2> = <nat:3> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \land <var:j2> = <nat:3> \} & <var:j2> := <var:j2> * <var:T> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \times <var:I> \land <var:j2> = <nat:3> \times <var:I> \} \end{tabular} Stepping forward , \[ \begin{tabular} {rcl} \{ <var:T> = <var:I> \} & <var:j0> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} \\ \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \} & <var:j1> := <nat:4> & \{ <var:T> = <var:I> \land <var:j0> = <nat:4> \land <var:j1> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:T> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:T> ; <var:j2> := <var:j2> * <var:T> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:j3> := <var:j3> * <var:T> ; <var:G> := <var:j3> ; <var:G> := <var:G> + <var:j2> ; <var:G> := <var:G> + <var:j1> ; <var:G> := <var:G> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:T> = <var:I> }} <def:poly> {{ <var:G> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:j3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:j2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:G> = <nat:1> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:4> * <var:I> /\ <var:G> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:j0> = <nat:4> /\ <var:G> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:G> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 