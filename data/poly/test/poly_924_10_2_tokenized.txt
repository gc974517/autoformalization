\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <var:s> * <var:w> ; <var:s> := <nat:2> + <var:s> * <var:w> ; <var:s> := <nat:2> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> ; <var:s> := <nat:1> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> \end{verbatim} Assume that we have $ <var:w> = <var:L> $ before the evaluation of the set of instructions , it must be that $ <var:s> = <nat:1> \cdot <var:L> ^ <nat:9> + <nat:2> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is clear by Hoare logic . Honing in on the following line of code found in our list of commands , we have \verb | { <var:w> = <var:L> } <var:s> := <nat:1> { <var:w> = <var:L> \land <var:s> = <nat:1> } | . This is given through the assignment inference rule obtained from standard Hoare reasoning . Moving forward to the following statements contained in the program , we see \verb | { <var:w> = <var:L> } <var:s> := <nat:1> { <var:w> = <var:L> \land <var:s> = <nat:1> } | , \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> } <var:s> := <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> + } | , \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> + } <var:s> := <nat:2> + <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> } | , \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> } <var:s> := <nat:2> + <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> + <nat:2> } | , \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> + <nat:2> } <var:s> := <nat:4> + <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:4> } | and \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:4> } <var:s> := <nat:1> + <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:1> } | . Focusing on the subsequent statements contained in the series of instructions , we have \verb | { <var:w> = <var:L> } <var:s> := <nat:1> { <var:w> = <var:L> \land <var:s> = <nat:1> } | and \verb | { <var:w> = <var:L> \land <var:s> = <nat:1> } <var:s> := <var:s> * <var:w> { <var:w> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> + } | . Moving forward , \verb | { <var:w> = <var:L> } <var:s> := <nat:1> { <var:w> = <var:L> \land <var:s> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:w> = <var:L> }} <var:s> := <nat:1> ; <var:s> := <var:s> * <var:w> ; <var:s> := <nat:2> + <var:s> * <var:w> ; <var:s> := <nat:2> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> ; <var:s> := <nat:1> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> ; <var:s> := <nat:3> + <var:s> * <var:w> {{ <var:s> = <nat:1> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 