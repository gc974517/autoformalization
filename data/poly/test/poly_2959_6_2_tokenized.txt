\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:1> ; <var:O> := <nat:2> + <var:O> * <var:w> ; <var:O> := <var:O> * <var:w> ; <var:O> := <nat:1> + <var:O> * <var:w> ; <var:O> := <var:O> * <var:w> ; <var:O> := <nat:1> + <var:O> * <var:w> \end{verbatim} Given it to be that $ <var:w> = <var:q> $ given any positive numbers $ <var:q> $ prior to interpreting our series of commands , it must be that we have $ <var:O> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> $ when program has finished executing . \end{theorem} \begin{proof} The course of logic for the code is shown using usual Hoare techniques . Moving forward to the next step , we see \begin{verbatim} { <var:w> = <var:q> } <var:O> := <nat:1> { <var:w> = <var:q> \land <var:O> = <nat:1> } \end{verbatim} This is guaranteed by the binding inference rule given in typical Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:w> = <var:q> } <var:O> := <nat:1> { <var:w> = <var:q> \land <var:O> = <nat:1> } { <var:w> = <var:q> \land <var:O> = <nat:1> } <var:O> := <nat:2> + <var:O> * <var:w> { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> + <nat:2> } { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> + <nat:2> } <var:O> := <var:O> * <var:w> { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + } { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + } <var:O> := <nat:1> + <var:O> * <var:w> { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:1> } { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:1> } <var:O> := <var:O> * <var:w> { <var:w> = <var:q> \land <var:O> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> + } \end{verbatim} This is sound using the variable assignmet rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:w> = <var:q> }} <var:O> := <nat:1> ; <var:O> := <nat:2> + <var:O> * <var:w> ; <var:O> := <var:O> * <var:w> ; <var:O> := <nat:1> + <var:O> * <var:w> ; <var:O> := <var:O> * <var:w> ; <var:O> := <nat:1> + <var:O> * <var:w> {{ <var:O> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:q> /\ <var:O> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 