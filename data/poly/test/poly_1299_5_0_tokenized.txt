\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:j> ; <var:J> := <var:a1> ; <var:J> := <var:J> + <var:a0> \end{verbatim} Allowing , with some positive integer coefficients $ <var:e> $ , that $ <var:j> = <var:e> $ prior to executing this list of commands it holds that we have $ <var:J> = <nat:1> \times <var:e> + <nat:1> $ after code segment has exited . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:j> = <var:e> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:j> = <var:e> \land <var:a0> = <nat:1> \} \\ <var:a1> := <nat:1> ; \\ \{ <var:j> = <var:e> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \} \\ <var:a1> := <var:a1> * <var:j> ; \\ \{ <var:j> = <var:e> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \times <var:e> \} \\ <var:J> := <var:a1> ; \\ \{ <var:j> = <var:e> \land <var:a0> = <nat:1> \land <var:J> = <nat:1> \times <var:e> \} \\ <var:J> := <var:J> + <var:a0> \\ \{ <var:j> = <var:e> \land <var:J> = <nat:1> \times <var:e> + <nat:1> \} \end{eqnarray} Considering the above , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:j> = <var:e> }} <var:a0> := <nat:1> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:j> ; <var:J> := <var:a1> ; <var:J> := <var:J> + <var:a0> {{ <var:J> = <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:a0> = <nat:1> /\ <var:J> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:J> = <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 