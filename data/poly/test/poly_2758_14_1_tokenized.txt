\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:W> ; <var:p2> := <var:p1> * <var:W> ; <var:p3> := <var:p2> * <var:W> ; <var:p4> := <var:p3> * <var:W> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:6> ; <var:v> := <var:p4> <var:v> := <var:v> + <var:p3> <var:v> := <var:v> + <var:p2> <var:v> := <var:v> + <var:p1> <var:v> := <var:v> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Allowing that $ <var:W> = <var:s> $ ahead of running our series of instructions it must be that we see $ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:W> = <var:s> \} \\ <var:p1> := <var:W> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <var:s> \} \\ <var:p2> := <var:p1> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <var:s> \land <var:p2> = <var:s> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <var:s> \land <var:p2> = <var:s> ^ <nat:2> \land <var:p3> = <var:s> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <var:s> \land <var:p2> = <var:s> ^ <nat:2> \land <var:p3> = <var:s> ^ <nat:3> \land <var:p4> = <var:s> ^ <nat:4> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <var:s> \land <var:p2> = <var:s> ^ <nat:2> \land <var:p3> = <var:s> ^ <nat:3> \land <var:p4> = <var:s> ^ <nat:4> \land <var:p0> = <nat:1> \} \\ <var:p1> := <var:p1> * <nat:9> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <var:s> ^ <nat:2> \land <var:p3> = <var:s> ^ <nat:3> \land <var:p4> = <var:s> ^ <nat:4> \land <var:p0> = <nat:1> \} \\ <var:p2> := <var:p2> * <nat:3> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <nat:3> \cdot <var:s> ^ <nat:2> \land <var:p3> = <var:s> ^ <nat:3> \land <var:p4> = <var:s> ^ <nat:4> \land <var:p0> = <nat:1> \} \\ <var:p3> := <var:p3> * <nat:3> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <nat:3> \cdot <var:s> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:p4> = <var:s> ^ <nat:4> \land <var:p0> = <nat:1> \} \\ <var:p4> := <var:p4> * <nat:6> ; \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <nat:3> \cdot <var:s> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:p4> = <nat:6> \cdot <var:s> ^ <nat:4> \land <var:p0> = <nat:1> \} \\ <var:v> := <var:p4> \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <nat:3> \cdot <var:s> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:p0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:s> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:p3> \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p2> = <nat:3> \cdot <var:s> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:p2> \\ \{ <var:W> = <var:s> \land <var:p1> = <nat:9> \cdot <var:s> \land <var:p0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:p1> \\ \{ <var:W> = <var:s> \land <var:p0> = <nat:1> \land <var:v> = <nat:6> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:9> \cdot <var:s> \} \\ <var:v> := <var:v> + <var:p0> \\ \{ <var:W> = <var:s> \land <var:v> = <nat:6> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:9> \cdot <var:s> + <nat:1> \} \end{eqnarray} Given the preceding argument , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Definition <def:poly> := <var:p1> := <var:W> ; <var:p2> := <var:p1> * <var:W> ; <var:p3> := <var:p2> * <var:W> ; <var:p4> := <var:p3> * <var:W> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:6> ; <var:v> := <var:p4> <var:v> := <var:v> + <var:p3> <var:v> := <var:v> + <var:p2> <var:v> := <var:v> + <var:p1> <var:v> := <var:v> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:W> = <var:s> }} <def:poly> {{ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <var:s> /\ <var:p2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <var:s> /\ <var:p2> = <var:s> ^ <nat:2> /\ <var:p3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <var:s> /\ <var:p2> = <var:s> ^ <nat:2> /\ <var:p3> = <var:s> ^ <nat:3> /\ <var:p4> = <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <var:s> /\ <var:p2> = <var:s> ^ <nat:2> /\ <var:p3> = <var:s> ^ <nat:3> /\ <var:p4> = <var:s> ^ <nat:4> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <var:s> ^ <nat:2> /\ <var:p3> = <var:s> ^ <nat:3> /\ <var:p4> = <var:s> ^ <nat:4> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:p3> = <var:s> ^ <nat:3> /\ <var:p4> = <var:s> ^ <nat:4> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:p4> = <var:s> ^ <nat:4> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:p4> = <nat:6> * <var:s> ^ <nat:4> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:p0> = <nat:1> /\ <var:v> = <nat:6> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:p0> = <nat:1> /\ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p1> = <nat:9> * <var:s> /\ <var:p0> = <nat:1> /\ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:p0> = <nat:1> /\ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:v> = <nat:6> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 