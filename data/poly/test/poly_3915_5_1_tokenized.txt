\begin{document} \begin{theorem} Consider a code segment : \begin{verbatim} <var:K1> := <var:j> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:5> ; <var:N> := <var:K1> <var:N> := <var:N> + <var:K0> \end{verbatim} Allowing it to be that $ <var:j> = <var:v> $ , given every positive integer coefficients $ <var:v> $ , before the execution of the list of instructions then we have $ <var:N> = <nat:5> \cdot <var:v> + <nat:9> $ once series of instructions is done . \end{theorem} \begin{proof} Proving correctness for this series of commands can be shown by typical Hoare reasoning . Moving on , we see \begin{eqnarray} \{ <var:j> = <var:v> \} \, <var:K1> := <var:j> \, \{ <var:j> = <var:v> \land <var:K1> = <var:v> \} \\ \{ <var:j> = <var:v> \land <var:K1> = <var:v> \} \, <var:K0> := <nat:9> \, \{ <var:j> = <var:v> \land <var:K1> = <var:v> \land <var:K0> = <nat:9> \} \\ \{ <var:j> = <var:v> \land <var:K1> = <var:v> \land <var:K0> = <nat:9> \} \, <var:K1> := <var:K1> * <nat:5> \, \{ <var:j> = <var:v> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K0> = <nat:9> \} \\ \{ <var:j> = <var:v> \land <var:K1> = <nat:5> \cdot <var:v> \land <var:K0> = <nat:9> \} \, <var:N> := <var:K1\, \{ <var:j> = <var:v> \land <var:K0> = <nat:9> \land <var:N> = <nat:5> \cdot <var:v> \} \\ \{ <var:j> = <var:v> \land <var:K0> = <nat:9> \land <var:N> = <nat:5> \cdot <var:v> \} \, <var:N> := <var:N> + <var:K0\, \{ <var:j> = <var:v> \land <var:N> = <nat:5> \cdot <var:v> + <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:j> = <var:v> }} <var:K1> := <var:j> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:5> ; <var:N> := <var:K1> <var:N> := <var:N> + <var:K0> {{ <var:N> = <nat:5> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:K1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:K1> = <var:v> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:K1> = <nat:5> * <var:v> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:K0> = <nat:9> /\ <var:N> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:N> = <nat:5> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 