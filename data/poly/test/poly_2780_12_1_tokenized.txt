\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r4> := <var:r3> * <var:o> ; <var:r0> := <nat:5> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:5> ; <var:r4> := <var:r4> * <nat:6> ; <var:k> := <var:r4> <var:k> := <var:k> + <var:r3> <var:k> := <var:k> + <var:r2> <var:k> := <var:k> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:o> = <var:x> $ --- given every positive integers $ <var:x> $ --- ahead of the execution of our segment of code it must be that we have $ <var:k> = <nat:6> \cdot <var:x> ^ <nat:4> + <nat:5> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is evident through Hoare techniques . Stepping through , we have \begin{verbatim} { <var:o> = <var:x> } <var:r1> := <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> } { <var:o> = <var:x> \land <var:r1> = <var:x> } <var:r2> := <var:r1> * <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> } <var:r3> := <var:r2> * <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> } <var:r4> := <var:r3> * <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> } <var:r0> := <nat:5> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } <var:r2> := <var:r2> * <nat:1> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } <var:r3> := <var:r3> * <nat:5> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <nat:5> * <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <nat:5> * <var:x> ^ <nat:3> \land <var:r4> = <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } <var:r4> := <var:r4> * <nat:6> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <nat:5> * <var:x> ^ <nat:3> \land <var:r4> = <nat:6> * <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <nat:5> * <var:x> ^ <nat:3> \land <var:r4> = <nat:6> * <var:x> ^ <nat:4> \land <var:r0> = <nat:5> } <var:k> := <var:r4{ <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <nat:1> * <var:x> ^ <nat:2> \land <var:r3> = <nat:5> * <var:x> ^ <nat:3> \land <var:r0> = <nat:5> \land <var:k> = <nat:6> * <var:x> ^ <nat:4> } \end{verbatim} This is rigorously given using the scheme given in Hoare reasoning . Going to the next step , we have \begin{verbatim} { <var:o> = <var:x> } <var:r1> := <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> } { <var:o> = <var:x> \land <var:r1> = <var:x> } <var:r2> := <var:r1> * <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> \land <var:r2> = <var:x> ^ <nat:2> } \end{verbatim} This is given through the rule defined in usual Hoare techniques . Paying attention to the subsequent bit of code contained in the segment of code , we have \begin{verbatim} { <var:o> = <var:x> } <var:r1> := <var:o> { <var:o> = <var:x> \land <var:r1> = <var:x> } \end{verbatim} This is shown to be logically sound by the variable assignmet law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Definition <def:poly> := <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r4> := <var:r3> * <var:o> ; <var:r0> := <nat:5> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:5> ; <var:r4> := <var:r4> * <nat:6> ; <var:k> := <var:r4> <var:k> := <var:k> + <var:r3> <var:k> := <var:k> + <var:r2> <var:k> := <var:k> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:o> = <var:x> }} <def:poly> {{ <var:k> = <nat:6> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r3> = <var:x> ^ <nat:3> /\ <var:r4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <var:x> ^ <nat:2> /\ <var:r3> = <var:x> ^ <nat:3> /\ <var:r4> = <var:x> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:r3> = <var:x> ^ <nat:3> /\ <var:r4> = <var:x> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:r4> = <var:x> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:r4> = <nat:6> * <var:x> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:r0> = <nat:5> /\ <var:k> = <nat:6> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:r0> = <nat:5> /\ <var:k> = <nat:6> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:r1> = <var:x> /\ <var:r0> = <nat:5> /\ <var:k> = <nat:6> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:k> = <nat:6> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 