\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:N> ; <var:K2> := <var:K1> * <var:N> ; <var:K0> := <nat:9> ; <var:K2> := <var:K2> * <nat:2> ; <var:C> := <var:K2> <var:C> := <var:C> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:N> = <var:P> $ , given every whole numbers $ <var:P> $ , ahead of interpreting the list of commands , then we see $ <var:C> = <nat:2> \times <var:P> ^ <nat:2> + <nat:9> $ when set of instructions is done executing . \end{theorem} \begin{proof} The proof of the list of instructions can be seen by standard Hoare techniques . Moving forward to the subsequent statement found in the series of instructions , we have the binding statement \verb | <var:K1> := <var:N> ; | . This transfers the precondition $ \{ <var:N> = <var:P> \} $ as the condition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \} $ . Moving onward , we see the variable binding line \verb | <var:K2> := <var:K1> * <var:N> ; | . This takes the condition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \} $ into $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> \} $ . After , we have the assignment command \verb | <var:K0> := <nat:9> ; | . This statement transfers the precondition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> \} $ into $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> \land <var:K0> = <nat:9> \} $ . Following , we have the variable update line defining $ <var:K2> * <nat:2> $ as $ <var:K2>$ . This forwards the condition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <var:P> ^ <nat:2> \land <var:K0> = <nat:9> \} $ to the condition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <nat:2> * <var:P> ^ <nat:2> \land <var:K0> = <nat:9> \} $ . Going to the next step , we have the variable assignmet statement \verb | <var:C> := <var:K2> | . This statement advances the precondition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K2> = <nat:2> * <var:P> ^ <nat:2> \land <var:K0> = <nat:9> \} $ toward the postcondition $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K0> = <nat:9> \land <var:C> = <nat:2> * <var:P> ^ <nat:2> \} $ . Now , we have the variable update line binding $ <var:C> + <var:K0$ toward $ <var:C>$ . This takes $ \{ <var:N> = <var:P> \land <var:K1> = <var:P> \land <var:K0> = <nat:9> \land <var:C> = <nat:2> * <var:P> ^ <nat:2> \} $ to $ \{ <var:N> = <var:P> \land <var:C> = <nat:2> * <var:P> ^ <nat:2> + <nat:9> \} $ . This is deduced using the assignment law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:N> ; <var:K2> := <var:K1> * <var:N> ; <var:K0> := <nat:9> ; <var:K2> := <var:K2> * <nat:2> ; <var:C> := <var:K2> <var:C> := <var:C> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:N> = <var:P> }} <def:poly> {{ <var:C> = <nat:2> * <var:P> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:K1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:K1> = <var:P> /\ <var:K2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:K1> = <var:P> /\ <var:K2> = <var:P> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:K1> = <var:P> /\ <var:K2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:K1> = <var:P> /\ <var:K0> = <nat:9> /\ <var:C> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:C> = <nat:2> * <var:P> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 