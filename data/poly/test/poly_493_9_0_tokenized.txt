\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:a> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:a> ; <var:A2> := <var:A2> * <var:a> ; <var:E> := <var:A2> ; <var:E> := <var:E> + <var:A1> ; <var:E> := <var:E> + <var:A0> \end{verbatim} Allow that $ <var:a> = <var:D> $ ahead of evaluating our set of instructions it holds that we have $ <var:E> = <nat:5> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:2> $ once segment of code has exited . \end{theorem} \begin{proof} The argument for this list of commands can be shown with standard Hoare techniques . Moving on to the next step , we have the variable update statement letting $ <nat:2> $ as $ <var:A0>$ . This transfers $ \{ <var:a> = <var:D> \} $ toward $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \} $ . Shifting focus toward the following bit of code contained in our list of commands , we have the binding line \verb | <var:A1> := <nat:1> ; | . This line redefines $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \} $ . This is given by the assignment rule found in usual Hoare techniques . Further , we see the environment update command \verb | <var:A1> := <var:A1> * <var:a> ; | . This statement forwards the condition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \} $ to the postcondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \} $ . This is known to be sound by the assignment law found in Hoare techniques . Moving forward to the next step , the environment update code assigning $ <nat:5> $ into $ <var:A2>$ . This code forwards the condition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \} $ as the postcondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \} $ . This is ensured using the assignment inference rule of usual Hoare logic . Moving on to the upcoming step found in the set of instructions , we see the environment update code \verb | <var:A2> := <var:A2> * <var:a> ; | . This code forwards the precondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \} $ as the condition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \times <var:D> \} $ . This is known to be sound with the assignment scheme obtained from usual Hoare logic . Going to the next step , we see the variable assignmet statement defining $ <var:A2> * <var:a> $ to $ <var:A2>$ . This command transfers the precondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \times <var:D> \} $ to the condition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \times <var:D> ^ <nat:2> \} $ . This is given through the assignment rule obtained from Hoare logic . Moving onward , the binding statement \verb | <var:E> := <var:A2> ; | . This code advances the precondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:A2> = <nat:5> \times <var:D> ^ <nat:2> \} $ into $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:E> = <nat:5> \times <var:D> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment statement binding $ <var:E> + <var:A1> $ into $ <var:E>$ . This moves the precondition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \times <var:D> \land <var:E> = <nat:5> \times <var:D> ^ <nat:2> \} $ toward the condition $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:E> = <nat:5> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> \} $ . This is shown with the assignment rule of typical Hoare logic . Looking at the upcoming line seen in our set of instructions , we have the environment update code binding $ <var:E> + <var:A0$ into $ <var:E>$ . This line moves $ \{ <var:a> = <var:D> \land <var:A0> = <nat:2> \land <var:E> = <nat:5> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> \} $ into $ \{ <var:a> = <var:D> \land <var:E> = <nat:5> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:a> = <var:D> }} <var:A0> := <nat:2> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:a> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:a> ; <var:A2> := <var:A2> * <var:a> ; <var:E> := <var:A2> ; <var:E> := <var:E> + <var:A1> ; <var:E> := <var:E> + <var:A0> {{ <var:E> = <nat:5> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:D> /\ <var:A2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:D> /\ <var:A2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:D> /\ <var:A2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:D> /\ <var:E> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:A0> = <nat:2> /\ <var:E> = <nat:5> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:E> = <nat:5> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 