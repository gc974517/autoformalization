\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:G> ; <var:T2> := <var:T1> * <var:G> ; <var:T3> := <var:T2> * <var:G> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:5> ; <var:T3> := <var:T3> * <nat:6> ; <var:O> := <var:T3> <var:O> := <var:O> + <var:T2> <var:O> := <var:O> + <var:T1> <var:O> := <var:O> + <var:T0> \end{verbatim} Assume --- assuming some $ <var:n> \in \mathbb{Z}^+ $ --- that we have $ <var:G> = <var:n> $ ahead of the execution of the series of commands then $ <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:G> = <var:n> \} \\ <var:T1> := <var:G> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <var:n> \} \\ <var:T2> := <var:T1> * <var:G> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:G> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:T1> := <var:T1> * <nat:3> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <nat:3> * <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:T2> := <var:T2> * <nat:5> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <nat:3> * <var:n> \land <var:T2> = <nat:5> * <var:n> ^ <nat:2> \land <var:T3> = <var:n> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:T3> := <var:T3> * <nat:6> ; \\ \{ <var:G> = <var:n> \land <var:T1> = <nat:3> * <var:n> \land <var:T2> = <nat:5> * <var:n> ^ <nat:2> \land <var:T3> = <nat:6> * <var:n> ^ <nat:3> \land <var:T0> = <nat:9> \} \\ <var:O> := <var:T3> \\ \{ <var:G> = <var:n> \land <var:T1> = <nat:3> * <var:n> \land <var:T2> = <nat:5> * <var:n> ^ <nat:2> \land <var:T0> = <nat:9> \land <var:O> = <nat:6> * <var:n> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:T2> \\ \{ <var:G> = <var:n> \land <var:T1> = <nat:3> * <var:n> \land <var:T0> = <nat:9> \land <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:T1> \\ \{ <var:G> = <var:n> \land <var:T0> = <nat:9> \land <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> \} \\ <var:O> := <var:O> + <var:T0> \\ \{ <var:G> = <var:n> \land <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:9> \} \end{eqnarray} Hence , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:G> = <var:n> }} <var:T1> := <var:G> ; <var:T2> := <var:T1> * <var:G> ; <var:T3> := <var:T2> * <var:G> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:5> ; <var:T3> := <var:T3> * <nat:6> ; <var:O> := <var:T3> <var:O> := <var:O> + <var:T2> <var:O> := <var:O> + <var:T1> <var:O> := <var:O> + <var:T0> {{ <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:T3> = <var:n> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:n> ^ <nat:3> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <nat:5> * <var:n> ^ <nat:2> /\ <var:T0> = <nat:9> /\ <var:O> = <nat:6> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T0> = <nat:9> /\ <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:T0> = <nat:9> /\ <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:O> = <nat:6> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 