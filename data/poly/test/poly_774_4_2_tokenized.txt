\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:E> := <nat:1> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:2> + <var:E> * <var:S> \end{verbatim} Given $ <var:S> = <var:f> $ before executing this set of commands , it holds that we see $ <var:E> = <nat:1> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this series of commands can be seen with standard Hoare logic . Now , the line giving $ <nat:1> $ to $ <var:E>$ . This command takes $ \{ <var:S> = <var:f> \} $ into the postcondition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \} $ . Jumping to the proceeding command in the series of instructions , we have the line yielding $ <nat:3> + <var:E> * <var:S> $ to $ <var:E>$ . This line takes the condition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \} $ to $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \cdot <var:f> + <nat:3> \} $ . Going forward , we have the binding line \verb | <var:E> := <nat:3> + <var:E> * <var:S> ; | . This line takes the condition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \cdot <var:f> + <nat:3> \} $ to the condition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:3> \} $ . Moving onward , we have the variable update statement assigning $ <nat:2> + <var:E> * <var:S$ to $ <var:E>$ . This moves the precondition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:3> \} $ toward the condition $ \{ <var:S> = <var:f> \land <var:E> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:2> \} $ . This is shown to be logically sound through the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:S> = <var:f> }} <var:E> := <nat:1> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:2> + <var:E> * <var:S> {{ <var:E> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:E> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:E> = <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:E> = <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:E> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 