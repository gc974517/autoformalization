\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:2> ; <var:s> := <nat:4> + <var:s> * <var:p> \end{verbatim} Assume it to hold that $ <var:p> = <var:u> $ prior to interpreting this list of instructions , it must be that we see $ <var:s> = <nat:2> \times <var:u> + <nat:4> $ once series of instructions exits . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:p> = <var:u> \} \\ <var:s> := <nat:2> ; \\ \{ <var:p> = <var:u> \land <var:s> = <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:p> \\ \{ <var:p> = <var:u> \land <var:s> = <nat:2> \times <var:u> + <nat:4> \} \end{eqnarray} As a result , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:p> = <var:u> }} <var:s> := <nat:2> ; <var:s> := <nat:4> + <var:s> * <var:p> {{ <var:s> = <nat:2> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:s> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:s> = <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 