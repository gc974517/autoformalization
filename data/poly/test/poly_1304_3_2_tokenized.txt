\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:1> + <var:R> * <var:A> ; <var:R> := <nat:2> + <var:R> * <var:A> \end{verbatim} Assume that we have $ <var:A> = <var:W> $ --- for positive numbers $ <var:W> $ --- prior to the execution of our set of commands it holds that $ <var:R> = <nat:4> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions can be done with typical Hoare reasoning . Jumping to the next commands found in our program , we see \verb | { <var:A> = <var:W> } <var:R> := <nat:4> { <var:A> = <var:W> \land <var:R> = <nat:4> } | and \verb | { <var:A> = <var:W> \land <var:R> = <nat:4> } <var:R> := <nat:1> + <var:R> * <var:A> { <var:A> = <var:W> \land <var:R> = <nat:4> * <var:W> + <nat:1> } | . This is given using the variable binding rule given by Hoare techniques . Next , \verb | { <var:A> = <var:W> } <var:R> := <nat:4> { <var:A> = <var:W> \land <var:R> = <nat:4> } | . This is guaranteed through the assignment rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:A> = <var:W> }} <var:R> := <nat:4> ; <var:R> := <nat:1> + <var:R> * <var:A> ; <var:R> := <nat:2> + <var:R> * <var:A> {{ <var:R> = <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:R> = <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:R> = <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 