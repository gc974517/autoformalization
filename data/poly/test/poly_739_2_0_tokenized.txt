\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:O0> := <nat:5> ; <var:A> := <var:O0> \end{verbatim} Given that we have $ <var:V> = <var:c> $ given any natural numbers $ <var:c> $ prior to running the segment of code , it holds that $ <var:A> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:c> \} \\ <var:O0> := <nat:5> ; \\ \{ <var:V> = <var:c> \land <var:O0> = <nat:5> \} \\ <var:A> := <var:O0> \\ \{ <var:V> = <var:c> \land <var:A> = <nat:5> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:V> = <var:c> }} <var:O0> := <nat:5> ; <var:A> := <var:O0> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:c> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 