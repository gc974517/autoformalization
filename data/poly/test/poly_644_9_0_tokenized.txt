\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:v0> := <nat:8> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:r> := <var:v2> ; <var:r> := <var:r> + <var:v1> ; <var:r> := <var:r> + <var:v0> \end{verbatim} Assume it to be that $ <var:u> = <var:Z> $ before executing the list of instructions , it must be that $ <var:r> = <nat:5> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be shown with the below decorated program . \begin{eqnarray} \{ <var:u> = <var:Z> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \} \\ <var:v1> := <nat:6> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \} \\ <var:v1> := <var:v1> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \times <var:Z> \} \\ <var:v2> := <nat:5> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \times <var:Z> \land <var:v2> = <nat:5> \} \\ <var:v2> := <var:v2> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \times <var:Z> \land <var:v2> = <nat:5> \times <var:Z> \} \\ <var:v2> := <var:v2> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \times <var:Z> \land <var:v2> = <nat:5> \times <var:Z> ^ <nat:2> \} \\ <var:r> := <var:v2> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:6> \times <var:Z> \land <var:r> = <nat:5> \times <var:Z> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:v1> ; \\ \{ <var:u> = <var:Z> \land <var:v0> = <nat:8> \land <var:r> = <nat:5> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> \} \\ <var:r> := <var:r> + <var:v0> \\ \{ <var:u> = <var:Z> \land <var:r> = <nat:5> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:u> = <var:Z> }} <var:v0> := <nat:8> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:r> := <var:v2> ; <var:r> := <var:r> + <var:v1> ; <var:r> := <var:r> + <var:v0> {{ <var:r> = <nat:5> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> * <var:Z> /\ <var:v2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> * <var:Z> /\ <var:v2> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> * <var:Z> /\ <var:v2> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:6> * <var:Z> /\ <var:r> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:r> = <nat:5> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:r> = <nat:5> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 