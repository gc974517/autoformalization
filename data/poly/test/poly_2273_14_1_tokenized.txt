\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:v> ; <var:P2> := <var:P1> * <var:v> ; <var:P3> := <var:P2> * <var:v> ; <var:P4> := <var:P3> * <var:v> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:1> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:8> ; <var:P4> := <var:P4> * <nat:1> ; <var:o> := <var:P4> <var:o> := <var:o> + <var:P3> <var:o> := <var:o> + <var:P2> <var:o> := <var:o> + <var:P1> <var:o> := <var:o> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Given it to be that $ <var:v> = <var:R> $ ahead of interpreting our program then we have $ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this list of instructions can be done with Hoare reasoning . Further , we see \verb | { <var:v> = <var:R> } <var:P1> := <var:v> { <var:v> = <var:R> \land <var:P1> = <var:R> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <var:R> } <var:P2> := <var:P1> * <var:v> { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> } <var:P3> := <var:P2> * <var:v> { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> } <var:P4> := <var:P3> * <var:v> { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> } <var:P0> := <nat:3> { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } <var:P1> := <var:P1> * <nat:1> { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } <var:P2> := <var:P2> * <nat:3> { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } <var:P3> := <var:P3> * <nat:8> { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P4> = <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } <var:P4> := <var:P4> * <nat:1> { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P4> = <nat:1> \cdot <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P4> = <nat:1> \cdot <var:R> ^ <nat:4> \land <var:P0> = <nat:3> } <var:o> := <var:P4{ <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P3> = <nat:8> \cdot <var:R> ^ <nat:3> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> } <var:o> := <var:o> + <var:P3{ <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:8> \cdot <var:R> ^ <nat:3> } | , \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P2> = <nat:3> \cdot <var:R> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:8> \cdot <var:R> ^ <nat:3> } <var:o> := <var:o> + <var:P2{ <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:8> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> } | and \verb | { <var:v> = <var:R> \land <var:P1> = <nat:1> \cdot <var:R> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:8> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> } <var:o> := <var:o> + <var:P1{ <var:v> = <var:R> \land <var:P0> = <nat:3> \land <var:o> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:8> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> } | . This is sound with the variable assignmet scheme defined by typical Hoare logic . Moving forward , we have \verb | { <var:v> = <var:R> } <var:P1> := <var:v> { <var:v> = <var:R> \land <var:P1> = <var:R> } | . This is shown with the variable assignmet inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <def:poly> := <var:P1> := <var:v> ; <var:P2> := <var:P1> * <var:v> ; <var:P3> := <var:P2> * <var:v> ; <var:P4> := <var:P3> * <var:v> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:1> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:8> ; <var:P4> := <var:P4> * <nat:1> ; <var:o> := <var:P4> <var:o> := <var:o> + <var:P3> <var:o> := <var:o> + <var:P2> <var:o> := <var:o> + <var:P1> <var:o> := <var:o> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:v> = <var:R> }} <def:poly> {{ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <var:R> /\ <var:P2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <var:R> /\ <var:P2> = <var:R> ^ <nat:2> /\ <var:P3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <var:R> /\ <var:P2> = <var:R> ^ <nat:2> /\ <var:P3> = <var:R> ^ <nat:3> /\ <var:P4> = <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <var:R> /\ <var:P2> = <var:R> ^ <nat:2> /\ <var:P3> = <var:R> ^ <nat:3> /\ <var:P4> = <var:R> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <var:R> ^ <nat:2> /\ <var:P3> = <var:R> ^ <nat:3> /\ <var:P4> = <var:R> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:P3> = <var:R> ^ <nat:3> /\ <var:P4> = <var:R> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:R> ^ <nat:3> /\ <var:P4> = <var:R> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:R> ^ <nat:3> /\ <var:P4> = <nat:1> * <var:R> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:8> * <var:R> ^ <nat:3> /\ <var:P0> = <nat:3> /\ <var:o> = <nat:1> * <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P2> = <nat:3> * <var:R> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P1> = <nat:1> * <var:R> /\ <var:P0> = <nat:3> /\ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:P0> = <nat:3> /\ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:o> = <nat:1> * <var:R> ^ <nat:4> + <nat:8> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 