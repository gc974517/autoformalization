\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:E> ; <var:Z2> := <var:Z1> * <var:E> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:j> := <var:Z2> <var:j> := <var:j> + <var:Z1> <var:j> := <var:j> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> . Given $ <var:E> = <var:Q> $ before evaluating the list of commands , it follows that $ <var:j> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:7> $ once code has finished executing . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:E> = <var:Q> \} \\ <var:Z1> := <var:E> ; \\ \{ <var:E> = <var:Q> \land <var:Z1> = <var:Q> \} \\ <var:Z2> := <var:Z1> * <var:E> ; \\ \{ <var:E> = <var:Q> \land <var:Z1> = <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:E> = <var:Q> \land <var:Z1> = <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <var:Z1> * <nat:6> ; \\ \{ <var:E> = <var:Q> \land <var:Z1> = <nat:6> \times <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:Z2> := <var:Z2> * <nat:4> ; \\ \{ <var:E> = <var:Q> \land <var:Z1> = <nat:6> \times <var:Q> \land <var:Z2> = <nat:4> \times <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:j> := <var:Z2> \\ \{ <var:E> = <var:Q> \land <var:Z1> = <nat:6> \times <var:Q> \land <var:Z0> = <nat:7> \land <var:j> = <nat:4> \times <var:Q> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:Z1> \\ \{ <var:E> = <var:Q> \land <var:Z0> = <nat:7> \land <var:j> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:6> \times <var:Q> \} \\ <var:j> := <var:j> + <var:Z0> \\ \{ <var:E> = <var:Q> \land <var:j> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:6> \times <var:Q> + <nat:7> \} \end{eqnarray} Given the above , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z1> := <var:E> ; <var:Z2> := <var:Z1> * <var:E> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:j> := <var:Z2> <var:j> := <var:j> + <var:Z1> <var:j> := <var:j> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:E> = <var:Q> }} <def:poly> {{ <var:j> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <nat:6> * <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <nat:6> * <var:Q> /\ <var:Z2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z1> = <nat:6> * <var:Q> /\ <var:Z0> = <nat:7> /\ <var:j> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:Z0> = <nat:7> /\ <var:j> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:j> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 