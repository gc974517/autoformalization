\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:5> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:Y> ; <var:W2> := <var:W2> * <var:Y> ; <var:B> := <var:W2> ; <var:B> := <var:B> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Given it to hold that $ <var:Y> = <var:H> $ ( letting natural numbers $ <var:H> $ ) ahead of executing our set of commands , it follows that we have $ <var:B> = <nat:6> \times <var:H> ^ <nat:2> + <nat:5> $ when code has finished . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is demonstrated with Hoare reasoning . Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:H> \} & <var:W0> := <nat:5> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \} \\ \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \} & <var:W2> := <nat:6> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \} \\ \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \} & <var:W2> := <var:W2> * <var:Y> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \cdot <var:H> \} \\ \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \cdot <var:H> \} & <var:W2> := <var:W2> * <var:Y> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \cdot <var:H> ^ <nat:2> \} \end{tabular} This is deduced using the inference rule found in Hoare techniques . Honing in on the upcoming pieces of code found in the code , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:H> \} & <var:W0> := <nat:5> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \} \\ \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \} & <var:W2> := <nat:6> & \{ <var:Y> = <var:H> \land <var:W0> = <nat:5> \land <var:W2> = <nat:6> \} \end{tabular} This is ensured with the binding rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:5> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:Y> ; <var:W2> := <var:W2> * <var:Y> ; <var:B> := <var:W2> ; <var:B> := <var:B> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <def:poly> {{ <var:B> = <nat:6> * <var:H> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:W0> = <nat:5> /\ <var:B> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:B> = <nat:6> * <var:H> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 