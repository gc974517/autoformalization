\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:9> ; <var:i> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:x> = <var:J> $ ahead of interpreting our series of commands , it holds that we have $ <var:i> = <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:x> = <var:J> \} \\ <var:h0> := <nat:9> ; \\ \{ <var:x> = <var:J> \land <var:h0> = <nat:9> \} \\ <var:i> := <var:h0> \\ \{ <var:x> = <var:J> \land <var:i> = <nat:9> \} \end{eqnarray} As a consequence , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:9> ; <var:i> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:x> = <var:J> }} <def:poly> {{ <var:i> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:i> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 