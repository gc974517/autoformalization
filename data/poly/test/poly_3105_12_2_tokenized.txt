\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:X> := <nat:2> ; <var:X> := <nat:3> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:2> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:3> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <var:X> * <var:O> ; <var:X> := <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> \end{verbatim} Allowing that $ <var:O> = <var:J> $ ( with some integers $ <var:J> $ ) before running this set of instructions , it must be that $ <var:X> = <nat:2> \times <var:J> ^ <nat:11> + <nat:3> \times <var:J> ^ <nat:10> + <nat:1> \times <var:J> ^ <nat:9> + <nat:1> \times <var:J> ^ <nat:8> + <nat:1> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:3> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this program can be demonstrated through usual Hoare techniques . Observing the proceeding lines seen in our series of instructions , we see \begin{verbatim} { <var:O> = <var:J> } <var:X> := <nat:2> { <var:O> = <var:J> \land <var:X> = <nat:2> } { <var:O> = <var:J> \land <var:X> = <nat:2> } <var:X> := <nat:3> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> + <nat:3> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> + <nat:3> } <var:X> := <nat:1> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:1> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:1> } <var:X> := <nat:1> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> } <var:X> := <nat:1> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:1> } <var:X> := <nat:2> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:5> + <nat:3> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:5> + <nat:3> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> } <var:X> := <nat:1> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:6> + <nat:3> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> } { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:6> + <nat:3> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> } <var:X> := <nat:3> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> ^ <nat:7> + <nat:3> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:3> } \end{verbatim} This is rigorously given through the assignment inference rule from Hoare logic . Following , \begin{verbatim} { <var:O> = <var:J> } <var:X> := <nat:2> { <var:O> = <var:J> \land <var:X> = <nat:2> } { <var:O> = <var:J> \land <var:X> = <nat:2> } <var:X> := <nat:3> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> + <nat:3> } \end{verbatim} Going to the next step , \begin{verbatim} { <var:O> = <var:J> } <var:X> := <nat:2> { <var:O> = <var:J> \land <var:X> = <nat:2> } { <var:O> = <var:J> \land <var:X> = <nat:2> } <var:X> := <nat:3> + <var:X> * <var:O> { <var:O> = <var:J> \land <var:X> = <nat:2> \times <var:J> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:O> = <var:J> }} <var:X> := <nat:2> ; <var:X> := <nat:3> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:2> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <nat:3> + <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> ; <var:X> := <var:X> * <var:O> ; <var:X> := <var:X> * <var:O> ; <var:X> := <nat:1> + <var:X> * <var:O> {{ <var:X> = <nat:2> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:10> + <nat:3> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:11> + <nat:3> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 