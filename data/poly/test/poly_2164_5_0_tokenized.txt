\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:G> ; <var:Q> := <var:X1> ; <var:Q> := <var:Q> + <var:X0> \end{verbatim} Assuming that we have $ <var:G> = <var:z> $ before executing this list of instructions it follows that we see $ <var:Q> = <nat:5> \times <var:z> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be accomplished by Hoare techniques . Observing the proceeding line of code seen in the segment of code , we have the environment update code \verb | <var:X0> := <nat:3> ; | . This line takes the precondition $ \{ <var:G> = <var:z> \} $ to $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \} $ . This is sound with the assignment rule from standard Hoare logic . Moving forward to the subsequent statement in our code , we have the variable binding line \verb | <var:X1> := <nat:5> ; | . This takes the precondition $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \} $ toward $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:5> \} $ . Advancing to the next line of code seen in the list of instructions , we have the variable binding line \verb | <var:X1> := <var:X1> * <var:G> ; | . This command forwards $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:5> \} $ to the postcondition $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:5> * <var:z> \} $ . This is shown using the assignment scheme given by typical Hoare techniques . Paying attention to the following line contained in our set of instructions , we see the variable binding statement assigning $ <var:X1> $ to $ <var:Q>$ . This advances the condition $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:X1> = <nat:5> * <var:z> \} $ toward the postcondition $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:Q> = <nat:5> * <var:z> \} $ . This is rigorously given with the assignment rule defined in standard Hoare reasoning . Focusing on the proceeding step contained in the code , we have the variable update command letting $ <var:Q> + <var:X0$ into $ <var:Q>$ . This statement advances the condition $ \{ <var:G> = <var:z> \land <var:X0> = <nat:3> \land <var:Q> = <nat:5> * <var:z> \} $ into $ \{ <var:G> = <var:z> \land <var:Q> = <nat:5> * <var:z> + <nat:3> \} $ . This is sound through the assignment law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:G> = <var:z> }} <var:X0> := <nat:3> ; <var:X1> := <nat:5> ; <var:X1> := <var:X1> * <var:G> ; <var:Q> := <var:X1> ; <var:Q> := <var:Q> + <var:X0> {{ <var:Q> = <nat:5> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:X0> = <nat:3> /\ <var:Q> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:z> /\ <var:Q> = <nat:5> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 