\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:y> ; <var:r> := <var:I1> ; <var:r> := <var:r> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Assume it to be that $ <var:y> = <var:G> $ before interpreting the segment of code , it must be that we see $ <var:r> = <nat:4> * <var:G> + <nat:3> $ after set of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:G> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:y> = <var:G> \land <var:I0> = <nat:3> \} \\ <var:I1> := <nat:4> ; \\ \{ <var:y> = <var:G> \land <var:I0> = <nat:3> \land <var:I1> = <nat:4> \} \\ <var:I1> := <var:I1> * <var:y> ; \\ \{ <var:y> = <var:G> \land <var:I0> = <nat:3> \land <var:I1> = <nat:4> \times <var:G> \} \\ <var:r> := <var:I1> ; \\ \{ <var:y> = <var:G> \land <var:I0> = <nat:3> \land <var:r> = <nat:4> \times <var:G> \} \\ <var:r> := <var:r> + <var:I0> \\ \{ <var:y> = <var:G> \land <var:r> = <nat:4> \times <var:G> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:3> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:y> ; <var:r> := <var:I1> ; <var:r> := <var:r> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:y> = <var:G> }} <def:poly> {{ <var:r> = <nat:4> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:I0> = <nat:3> /\ <var:r> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:r> = <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 