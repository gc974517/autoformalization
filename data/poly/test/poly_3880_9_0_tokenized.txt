\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:v> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:v> ; <var:G2> := <var:G2> * <var:v> ; <var:t> := <var:G2> ; <var:t> := <var:t> + <var:G1> ; <var:t> := <var:t> + <var:G0> \end{verbatim} Allow that $ <var:v> = <var:y> $ ahead of the execution of the code segment , it must be that we see $ <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:4> $ after segment of code executes . \end{theorem} \begin{proof} The argument for the list of instructions can be accomplished by usual Hoare techniques . Further , \[ \begin{tabular} {rcl} \{ <var:v> = <var:y> \} & <var:G0> := <nat:4> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \} & <var:G1> := <nat:8> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} & <var:G1> := <var:G1> * <var:v> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \} & <var:G2> := <nat:4> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \land <var:G2> = <nat:4> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \land <var:G2> = <nat:4> \} & <var:G2> := <var:G2> * <var:v> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \land <var:G2> = <nat:4> * <var:y> \} \end{tabular} This is shown to be logically sound with the binding rule defined in typical Hoare techniques . Observing the next lines contained in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:y> \} & <var:G0> := <nat:4> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \} & <var:G1> := <nat:8> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> \} & <var:G1> := <var:G1> * <var:v> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \} \\ \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \} & <var:G2> := <nat:4> & \{ <var:v> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:8> * <var:y> \land <var:G2> = <nat:4> \} \end{tabular} This is known to be sound with the environment update rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:v> = <var:y> }} <var:G0> := <nat:4> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:v> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:v> ; <var:G2> := <var:G2> * <var:v> ; <var:t> := <var:G2> ; <var:t> := <var:t> + <var:G1> ; <var:t> := <var:t> + <var:G0> {{ <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:y> /\ <var:G2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:y> /\ <var:G2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:y> /\ <var:G2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:8> * <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G0> = <nat:4> /\ <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 