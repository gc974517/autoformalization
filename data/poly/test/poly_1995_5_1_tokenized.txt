\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:g1> := <var:y> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:c> := <var:g1> <var:c> := <var:c> + <var:g0> \end{verbatim} Assuming that we have $ <var:y> = <var:Z> $ prior to the execution of our list of instructions , it must be that we have $ <var:c> = <nat:2> \cdot <var:Z> + <nat:1> $ when series of commands has finished . \end{theorem} \begin{proof} The flow of logic for our set of commands is clear by usual Hoare reasoning . Advancing to the next step , \begin{eqnarray} \{ <var:y> = <var:Z> \} \, <var:g1> := <var:y> \, \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \} \end{eqnarray} This is known to be sound with the variable update inference rule given by Hoare techniques . Looking at the proceeding commands found in the list of instructions , \begin{eqnarray} \{ <var:y> = <var:Z> \} \, <var:g1> := <var:y> \, \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \} \\ \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \} \, <var:g0> := <nat:1> \, \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \land <var:g0> = <nat:1> \} \end{eqnarray} This is guaranteed by the assignment rule from standard Hoare techniques . Looking at the next step found in the series of commands , \begin{eqnarray} \{ <var:y> = <var:Z> \} \, <var:g1> := <var:y> \, \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \} \end{eqnarray} This is rigorously given using the variable assignmet scheme given by Hoare techniques . Looking at the following line of code seen in our code segment , we have \begin{eqnarray} \{ <var:y> = <var:Z> \} \, <var:g1> := <var:y> \, \{ <var:y> = <var:Z> \land <var:g1> = <var:Z> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:y> = <var:Z> }} <var:g1> := <var:y> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:c> := <var:g1> <var:c> := <var:c> + <var:g0> {{ <var:c> = <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:g1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:g1> = <nat:2> * <var:Z> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:g0> = <nat:1> /\ <var:c> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:c> = <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 