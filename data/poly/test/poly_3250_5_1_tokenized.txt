\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:Z> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:2> ; <var:O> := <var:P1> <var:O> := <var:O> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Assuming that $ <var:Z> = <var:o> $ prior to interpreting this set of instructions then $ <var:O> = <nat:2> \cdot <var:o> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be done by Hoare logic . Taking another step toward the following command in the set of instructions , we have the variable assignmet command \verb | <var:P1> := <var:Z> ; | . This moves the precondition $ \{ <var:Z> = <var:o> \} $ into the postcondition $ \{ <var:Z> = <var:o> \land <var:P1> = <var:o> \} $ . Immediately following , the binding statement \verb | <var:P0> := <nat:7> ; | . This line takes $ \{ <var:Z> = <var:o> \land <var:P1> = <var:o> \} $ to $ \{ <var:Z> = <var:o> \land <var:P1> = <var:o> \land <var:P0> = <nat:7> \} $ . Next , the code \verb | <var:P1> := <var:P1> * <nat:2> ; | . This statement moves the precondition $ \{ <var:Z> = <var:o> \land <var:P1> = <var:o> \land <var:P0> = <nat:7> \} $ as $ \{ <var:Z> = <var:o> \land <var:P1> = <nat:2> \cdot <var:o> \land <var:P0> = <nat:7> \} $ . This is rigorously given with the assignment inference rule given in Hoare reasoning . Taking a look at the proceeding line found in the set of commands , the binding command \verb | <var:O> := <var:P1> | . This forwards $ \{ <var:Z> = <var:o> \land <var:P1> = <nat:2> \cdot <var:o> \land <var:P0> = <nat:7> \} $ to $ \{ <var:Z> = <var:o> \land <var:P0> = <nat:7> \land <var:O> = <nat:2> \cdot <var:o> \} $ . This is rigorously given using the assignment scheme obtained from usual Hoare reasoning . Advancing on , we have the variable update code \verb | <var:O> := <var:O> + <var:P0> | . This command transfers the precondition $ \{ <var:Z> = <var:o> \land <var:P0> = <nat:7> \land <var:O> = <nat:2> \cdot <var:o> \} $ into the condition $ \{ <var:Z> = <var:o> \land <var:O> = <nat:2> \cdot <var:o> + <nat:7> \} $ . This is known to be sound through the assignment rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:Z> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:2> ; <var:O> := <var:P1> <var:O> := <var:O> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Z> = <var:o> }} <def:poly> {{ <var:O> = <nat:2> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:P1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:P1> = <var:o> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:P1> = <nat:2> * <var:o> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:P0> = <nat:7> /\ <var:O> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:O> = <nat:2> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 