\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:8> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:o> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:o> ; <var:i2> := <var:i2> * <var:o> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> \end{verbatim} Assume that we have $ <var:o> = <var:L> $ prior to interpreting the segment of code , it holds that we have $ <var:j> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:8> $ after set of commands is done . \end{theorem} \begin{proof} The method of proof for our code segment can be given by standard Hoare reasoning . After , we have the assignment code assigning $ <nat:8> $ as $ <var:i0>$ . This transfers $ \{ <var:o> = <var:L> \} $ into $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \} $ . Paying attention to the proceeding step seen in our code segment , we have the binding command \verb | <var:i1> := <nat:3> ; | . This statement moves the precondition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \} $ into $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \} $ . This is ensured by the assignment rule defined in standard Hoare logic . Moving on to the subsequent bit of code in our program , the assignment statement giving $ <var:i1> * <var:o> $ as $ <var:i1>$ . This code transfers the condition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \} $ into $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \} $ . Now , we see the binding command yielding $ <nat:1> $ into $ <var:i2>$ . This takes the condition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \} $ to the postcondition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \} $ . Shifting focus toward the upcoming step in our set of instructions , we see the assignment code \verb | <var:i2> := <var:i2> * <var:o> ; | . This code forwards the condition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \} $ into $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \times <var:L> \} $ . This is shown using the assignment rule defined in Hoare reasoning . Moving on to the subsequent step contained in our list of commands , the variable assignmet statement \verb | <var:i2> := <var:i2> * <var:o> ; | . This forwards the precondition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \times <var:L> \} $ toward $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \times <var:L> ^ <nat:2> \} $ . Taking a look at the upcoming command contained in the list of instructions , the binding statement \verb | <var:j> := <var:i2> ; | . This moves the precondition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:i2> = <nat:1> \times <var:L> ^ <nat:2> \} $ as the postcondition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:j> = <nat:1> \times <var:L> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule found in standard Hoare logic . Looking at the subsequent line of code contained in the code , the assignment command assigning $ <var:j> + <var:i1> $ into $ <var:j>$ . This redefines the condition $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:i1> = <nat:3> \times <var:L> \land <var:j> = <nat:1> \times <var:L> ^ <nat:2> \} $ to $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:j> = <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> \} $ . This is shown using the assignment inference rule in usual Hoare techniques . Moving on to the proceeding bit of code in our code segment , we have the assignment command \verb | <var:j> := <var:j> + <var:i0> | . This takes $ \{ <var:o> = <var:L> \land <var:i0> = <nat:8> \land <var:j> = <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> \} $ as the condition $ \{ <var:o> = <var:L> \land <var:j> = <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <var:i0> := <nat:8> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:o> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:o> ; <var:i2> := <var:i2> * <var:o> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> {{ <var:j> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> * <var:L> /\ <var:i2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> * <var:L> /\ <var:i2> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> * <var:L> /\ <var:i2> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:i1> = <nat:3> * <var:L> /\ <var:j> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:i0> = <nat:8> /\ <var:j> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:j> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 