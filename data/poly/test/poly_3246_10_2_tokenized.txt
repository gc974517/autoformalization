\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:3> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:3> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> \end{verbatim} Allow , for all natural numbers $ <var:I> $ , it to hold that $ <var:n> = <var:I> $ before the evaluation of this program , it holds that $ <var:B> = <nat:2> \cdot <var:I> ^ <nat:9> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:4> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:2> $ after set of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare logic gives : \begin{eqnarray} \{ <var:n> = <var:I> \} \\ <var:B> := <nat:2> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \} \\ <var:B> := <nat:1> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> + <nat:1> \} \\ <var:B> := <nat:4> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:4> \} \\ <var:B> := <nat:4> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:4> \} \\ <var:B> := <nat:3> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:3> \} \\ <var:B> := <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + \} \\ <var:B> := <nat:3> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:3> \} \\ <var:B> := <nat:2> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:4> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> + <nat:2> \} \\ <var:B> := <nat:1> + <var:B> * <var:n> ; \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:4> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> \} \\ <var:B> := <nat:2> + <var:B> * <var:n> \\ \{ <var:n> = <var:I> \land <var:B> = <nat:2> \cdot <var:I> ^ <nat:9> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:4> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:2> \} \end{eqnarray} Thus , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <var:B> := <nat:2> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:4> + <var:B> * <var:n> ; <var:B> := <nat:3> + <var:B> * <var:n> ; <var:B> := <var:B> * <var:n> ; <var:B> := <nat:3> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> ; <var:B> := <nat:1> + <var:B> * <var:n> ; <var:B> := <nat:2> + <var:B> * <var:n> {{ <var:B> = <nat:2> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:B> = <nat:2> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 