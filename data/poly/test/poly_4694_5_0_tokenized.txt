\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:n> ; <var:H> := <var:D1> ; <var:H> := <var:H> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Allow ( given positive integers $ <var:Z> $ ) that we have $ <var:n> = <var:Z> $ before the evaluation of the code segment then $ <var:H> = <nat:4> \cdot <var:Z> + <nat:8> $ . \end{theorem} \begin{proof} Notice the following decorated segment of code . \begin{eqnarray} \{ <var:n> = <var:Z> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:8> \} \\ <var:D1> := <nat:4> ; \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> \} \\ <var:D1> := <var:D1> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:8> \land <var:D1> = <nat:4> * <var:Z> \} \\ <var:H> := <var:D1> ; \\ \{ <var:n> = <var:Z> \land <var:D0> = <nat:8> \land <var:H> = <nat:4> * <var:Z> \} \\ <var:H> := <var:H> + <var:D0> \\ \{ <var:n> = <var:Z> \land <var:H> = <nat:4> * <var:Z> + <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:8> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:n> ; <var:H> := <var:D1> ; <var:H> := <var:H> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <def:poly> {{ <var:H> = <nat:4> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:D0> = <nat:8> /\ <var:H> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:H> = <nat:4> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 