\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:1> ; <var:P> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Assume , given any positive numbers $ <var:w> $ , it to be that $ <var:C> = <var:w> $ prior to executing our set of instructions then we have $ <var:P> = <nat:1> $ when set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:w> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:C> = <var:w> \land <var:V0> = <nat:1> \} \\ <var:P> := <var:V0> \\ \{ <var:C> = <var:w> \land <var:P> = <nat:1> \} \end{eqnarray} Applying typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:P> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:C> = <var:w> }} <def:poly> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 