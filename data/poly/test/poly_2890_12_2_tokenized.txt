\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:p> := <nat:2> ; <var:p> := <nat:4> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:2> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:4> + <var:p> * <var:J> \end{verbatim} Given $ <var:J> = <var:c> $ before interpreting the segment of code then we see $ <var:p> = <nat:2> \times <var:c> ^ <nat:11> + <nat:4> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:3> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:3> \times <var:c> ^ <nat:5> + <nat:3> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> + <nat:4> $ when list of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be accomplished by the following decorated list of commands . \begin{eqnarray} \{ <var:J> = <var:c> \} \\ <var:p> := <nat:2> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \} \\ <var:p> := <nat:4> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> + <nat:4> \} \\ <var:p> := <nat:3> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> \} \\ <var:p> := <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + \} \\ <var:p> := <nat:3> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \} \\ <var:p> := <nat:2> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> + <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:3> \} \\ <var:p> := <nat:3> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:3> \} \\ <var:p> := <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:8> + <nat:4> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + \} \\ <var:p> := <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:9> + <nat:4> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + \} \\ <var:p> := <nat:3> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:10> + <nat:4> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:3> \} \\ <var:p> := <nat:4> + <var:p> * <var:J> \\ \{ <var:J> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> ^ <nat:11> + <nat:4> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> + <nat:4> \} \end{eqnarray} Furthering evaluating our series of commands gives us : \begin{eqnarray} \end{eqnarray} Using Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:J> = <var:c> }} <var:p> := <nat:2> ; <var:p> := <nat:4> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:2> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <var:p> * <var:J> ; <var:p> := <nat:3> + <var:p> * <var:J> ; <var:p> := <nat:4> + <var:p> * <var:J> {{ <var:p> = <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:9> + <nat:4> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:10> + <nat:4> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:p> = <nat:2> * <var:c> ^ <nat:11> + <nat:4> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 