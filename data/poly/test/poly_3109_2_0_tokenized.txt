\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:P0> := <nat:1> ; <var:T> := <var:P0> \end{verbatim} Allowing , given all $ <var:E> \in \mathbb{Z}^+ $ , that $ <var:r> = <var:E> $ ahead of running our series of instructions , it follows that we see $ <var:T> = <nat:1> $ after program has executed . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:r> = <var:E> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:r> = <var:E> \land <var:P0> = <nat:1> \} \\ <var:T> := <var:P0> \\ \{ <var:r> = <var:E> \land <var:T> = <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:r> = <var:E> }} <var:P0> := <nat:1> ; <var:T> := <var:P0> {{ <var:T> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:T> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 