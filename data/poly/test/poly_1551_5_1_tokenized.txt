\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:u> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:x> := <var:R1> <var:x> := <var:x> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:u> = <var:n> $ given positive coefficients $ <var:n> $ ahead of evaluating the code , it holds that we see $ <var:x> = <nat:1> * <var:n> + <nat:4> $ after code segment is done executing . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:u> = <var:n> \} \\ <var:R1> := <var:u> ; \\ \{ <var:u> = <var:n> \land <var:R1> = <var:n> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:u> = <var:n> \land <var:R1> = <var:n> \land <var:R0> = <nat:4> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:u> = <var:n> \land <var:R1> = <nat:1> * <var:n> \land <var:R0> = <nat:4> \} \\ <var:x> := <var:R1> \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:4> \land <var:x> = <nat:1> * <var:n> \} \\ <var:x> := <var:x> + <var:R0> \\ \{ <var:u> = <var:n> \land <var:x> = <nat:1> * <var:n> + <nat:4> \} \end{eqnarray} Given the above , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:u> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:x> := <var:R1> <var:x> := <var:x> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:u> = <var:n> }} <def:poly> {{ <var:x> = <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R1> = <var:n> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R1> = <nat:1> * <var:n> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:4> /\ <var:x> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:x> = <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 