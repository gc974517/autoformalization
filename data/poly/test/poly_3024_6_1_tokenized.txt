\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:A1> := <var:l> ; <var:A2> := <var:A1> * <var:l> ; <var:A0> := <nat:2> ; <var:A2> := <var:A2> * <nat:3> ; <var:H> := <var:A2> <var:H> := <var:H> + <var:A0> \end{verbatim} Given $ <var:l> = <var:i> $ ahead of executing our code segment then $ <var:H> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:2> $ when series of commands terminates . \end{theorem} \begin{proof} The argument for this program can be accomplished by typical Hoare logic . Moving forward to the next statements in our code segment , we see \begin{verbatim} { <var:l> = <var:i> } <var:A1> := <var:l> { <var:l> = <var:i> \land <var:A1> = <var:i> } { <var:l> = <var:i> \land <var:A1> = <var:i> } <var:A2> := <var:A1> * <var:l> { <var:l> = <var:i> \land <var:A1> = <var:i> \land <var:A2> = <var:i> ^ <nat:2> } \end{verbatim} Advancing on , \begin{verbatim} { <var:l> = <var:i> } <var:A1> := <var:l> { <var:l> = <var:i> \land <var:A1> = <var:i> } { <var:l> = <var:i> \land <var:A1> = <var:i> } <var:A2> := <var:A1> * <var:l> { <var:l> = <var:i> \land <var:A1> = <var:i> \land <var:A2> = <var:i> ^ <nat:2> } { <var:l> = <var:i> \land <var:A1> = <var:i> \land <var:A2> = <var:i> ^ <nat:2> } <var:A0> := <nat:2> { <var:l> = <var:i> \land <var:A1> = <var:i> \land <var:A2> = <var:i> ^ <nat:2> \land <var:A0> = <nat:2> } \end{verbatim} Advancing , we see \begin{verbatim} { <var:l> = <var:i> } <var:A1> := <var:l> { <var:l> = <var:i> \land <var:A1> = <var:i> } \end{verbatim} This is ensured with the variable assignmet law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:l> = <var:i> }} <var:A1> := <var:l> ; <var:A2> := <var:A1> * <var:l> ; <var:A0> := <nat:2> ; <var:A2> := <var:A2> * <nat:3> ; <var:H> := <var:A2> <var:H> := <var:H> + <var:A0> {{ <var:H> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:A1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:A1> = <var:i> /\ <var:A2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:A1> = <var:i> /\ <var:A2> = <var:i> ^ <nat:2> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:A1> = <var:i> /\ <var:A2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:A1> = <var:i> /\ <var:A0> = <nat:2> /\ <var:H> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:H> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 