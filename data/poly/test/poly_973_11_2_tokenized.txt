\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y> := <nat:2> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> ; <var:y> := <nat:4> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:T> = <var:P> $ ahead of evaluating the program , it must be that $ <var:y> = <nat:2> \times <var:P> ^ <nat:10> + <nat:1> \times <var:P> ^ <nat:9> + <nat:1> \times <var:P> ^ <nat:8> + <nat:3> \times <var:P> ^ <nat:7> + <nat:3> \times <var:P> ^ <nat:6> + <nat:1> \times <var:P> ^ <nat:5> + <nat:2> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated series of instructions . \begin{eqnarray} \{ <var:T> = <var:P> \} \\ <var:y> := <nat:2> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> \} \\ <var:y> := <nat:1> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> \} \\ <var:y> := <nat:3> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> \} \\ <var:y> := <nat:3> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> \} \\ <var:y> := <nat:1> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> \} \\ <var:y> := <nat:2> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> \} \\ <var:y> := <nat:4> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:4> \} \\ <var:y> := <nat:1> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:9> + <nat:1> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> \} \\ <var:y> := <nat:3> + <var:y> * <var:T> \\ \{ <var:T> = <var:P> \land <var:y> = <nat:2> * <var:P> ^ <nat:10> + <nat:1> * <var:P> ^ <nat:9> + <nat:1> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:2> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:2> + <var:y> * <var:T> ; <var:y> := <nat:4> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:1> + <var:y> * <var:T> ; <var:y> := <nat:3> + <var:y> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <def:poly> {{ <var:y> = <nat:2> * <var:P> ^ <nat:10> + <nat:1> * <var:P> ^ <nat:9> + <nat:1> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:9> + <nat:1> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:y> = <nat:2> * <var:P> ^ <nat:10> + <nat:1> * <var:P> ^ <nat:9> + <nat:1> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 