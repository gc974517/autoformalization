\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> \end{verbatim} Assuming letting $ <var:N> \in \mathbb{Z}^+ $ $ <var:o> = <var:N> $ before the execution of this series of instructions , it holds that we have $ <var:Y> = <nat:4> \times <var:N> ^ <nat:13> + <nat:2> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:10> + <nat:1> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> $ after code segment is done . \end{theorem} \begin{proof} We can see that the following decorated program . \begin{eqnarray} \{ <var:o> = <var:N> \} \\ <var:Y> := <nat:4> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \} \end{eqnarray} Advancing executing the list of instructions returns : \begin{eqnarray} <var:Y> := <nat:2> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> + <nat:2> \} \\ <var:Y> := <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + \} \\ <var:Y> := <nat:3> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:3> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> + <nat:1> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:1> \} \end{eqnarray} Allowing running our code gives : \begin{eqnarray} <var:Y> := <nat:1> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:1> \} \end{eqnarray} Allowing running our code segment results in : \begin{eqnarray} <var:Y> := <nat:1> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:1> \} \\ <var:Y> := <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:3> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + \} \\ <var:Y> := <nat:4> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:3> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:4> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:10> + <nat:2> \cdot <var:N> ^ <nat:9> + <nat:3> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> + <nat:1> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:11> + <nat:2> \cdot <var:N> ^ <nat:10> + <nat:3> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:o> ; \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:12> + <nat:2> \cdot <var:N> ^ <nat:11> + <nat:3> \cdot <var:N> ^ <nat:9> + <nat:1> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:3> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:o> \\ \{ <var:o> = <var:N> \land <var:Y> = <nat:4> \cdot <var:N> ^ <nat:13> + <nat:2> \cdot <var:N> ^ <nat:12> + <nat:3> \cdot <var:N> ^ <nat:10> + <nat:1> \cdot <var:N> ^ <nat:9> + <nat:1> \cdot <var:N> ^ <nat:8> + <nat:1> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:o> = <var:N> }} <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> {{ <var:Y> = <nat:4> * <var:N> ^ <nat:13> + <nat:2> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:11> + <nat:2> * <var:N> ^ <nat:10> + <nat:3> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:12> + <nat:2> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:N> /\ <var:Y> = <nat:4> * <var:N> ^ <nat:13> + <nat:2> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 