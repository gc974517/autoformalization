\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:1> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:h> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:h> ; <var:g2> := <var:g2> * <var:h> ; <var:g3> := <nat:2> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:p> := <var:g3> ; <var:p> := <var:p> + <var:g2> ; <var:p> := <var:p> + <var:g1> ; <var:p> := <var:p> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:h> = <var:x> $ before executing the code segment then we see $ <var:p> = <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:x> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \} \\ <var:g1> := <nat:1> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \} \\ <var:g1> := <var:g1> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \} \\ <var:g2> := <nat:3> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \} \\ <var:g2> := <var:g2> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> \} \\ <var:g2> := <var:g2> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \} \\ <var:g3> := <nat:2> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:g3> = <nat:2> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:x> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:x> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:g3> = <nat:2> \cdot <var:x> ^ <nat:3> \} \\ <var:p> := <var:g3> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:g2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:p> = <nat:2> \cdot <var:x> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:g2> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:g1> = <nat:1> \cdot <var:x> \land <var:p> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:g1> ; \\ \{ <var:h> = <var:x> \land <var:g0> = <nat:1> \land <var:p> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:p> := <var:p> + <var:g0> \\ \{ <var:h> = <var:x> \land <var:p> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:1> \} \end{eqnarray} As a result , the list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:h> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:h> ; <var:g2> := <var:g2> * <var:h> ; <var:g3> := <nat:2> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:p> := <var:g3> ; <var:p> := <var:p> + <var:g2> ; <var:p> := <var:p> + <var:g1> ; <var:p> := <var:p> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:p> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:g3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:g2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:p> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:1> * <var:x> /\ <var:p> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g0> = <nat:1> /\ <var:p> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:p> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 