\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:1> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:z> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for natural coefficients $ <var:q> $ , it to hold that $ <var:z> = <var:q> $ prior to evaluating the program , then we have $ <var:m> = <nat:4> * <var:q> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:q> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \} \\ <var:G1> := <nat:4> ; \\ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \} \\ <var:G1> := <var:G1> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> * <var:q> \} \\ <var:m> := <var:G1> ; \\ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \land <var:m> = <nat:4> * <var:q> \} \\ <var:m> := <var:m> + <var:G0> \\ \{ <var:z> = <var:q> \land <var:m> = <nat:4> * <var:q> + <nat:1> \} \end{eqnarray} Given the above , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:z> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <def:poly> {{ <var:m> = <nat:4> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:G0> = <nat:1> /\ <var:m> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:m> = <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 