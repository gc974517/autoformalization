\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:W> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> \end{verbatim} Assuming it to hold that $ <var:W> = <var:r> $ ahead of running this series of commands then we have $ <var:n> = <nat:3> * <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be done with typical Hoare techniques . Advancing to the next statement found in our code segment , we see the environment update code defining $ <nat:1> $ into $ <var:F0>$ . This code transfers the condition $ \{ <var:W> = <var:r> \} $ as $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \} $ . Advancing , the command \verb | <var:F1> := <nat:3> ; | . This code transfers the precondition $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \} $ into $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> \} $ . Stepping through , we see the statement yielding $ <var:F1> * <var:W> $ to $ <var:F1>$ . This forwards the precondition $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> \} $ to the postcondition $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> * <var:r> \} $ . This is ensured using the assignment rule given by usual Hoare logic . Going to the next step , the environment update line \verb | <var:n> := <var:F1> ; | . This statement takes $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> * <var:r> \} $ into the postcondition $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:n> = <nat:3> * <var:r> \} $ . This is deduced with the assignment inference rule from typical Hoare techniques . Following , we see the variable update statement \verb | <var:n> := <var:n> + <var:F0> | . This transfers the precondition $ \{ <var:W> = <var:r> \land <var:F0> = <nat:1> \land <var:n> = <nat:3> * <var:r> \} $ to the condition $ \{ <var:W> = <var:r> \land <var:n> = <nat:3> * <var:r> + <nat:1> \} $ . This is sound by the assignment rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:W> = <var:r> }} <var:F0> := <nat:1> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:W> ; <var:n> := <var:F1> ; <var:n> := <var:n> + <var:F0> {{ <var:n> = <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:F0> = <nat:1> /\ <var:n> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:n> = <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 