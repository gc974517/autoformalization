\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:k> ; <var:C> := <nat:2> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <var:C> * <var:k> ; <var:C> := <nat:3> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:1> + <var:C> * <var:k> ; <var:C> := <nat:1> + <var:C> * <var:k> \end{verbatim} Allowing ( for every $ <var:c> \in \mathbb{N} $ ) it to hold that $ <var:k> = <var:c> $ before evaluating our set of commands , it holds that we have $ <var:C> = <nat:2> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> $ when list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:c> \} \\ <var:C> := <nat:2> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \} \\ <var:C> := <nat:3> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> + <nat:3> \} \\ <var:C> := <nat:2> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:4> \} \\ <var:C> := <nat:4> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:4> \} \\ <var:C> := <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + \} \\ <var:C> := <nat:3> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:3> \} \\ <var:C> := <nat:4> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> + <nat:4> \} \\ <var:C> := <nat:4> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:4> \} \\ <var:C> := <nat:1> + <var:C> * <var:k> ; \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:1> \} \\ <var:C> := <nat:1> + <var:C> * <var:k> \\ \{ <var:k> = <var:c> \land <var:C> = <nat:2> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:4> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:k> = <var:c> }} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:k> ; <var:C> := <nat:2> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <var:C> * <var:k> ; <var:C> := <nat:3> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:4> + <var:C> * <var:k> ; <var:C> := <nat:1> + <var:C> * <var:k> ; <var:C> := <nat:1> + <var:C> * <var:k> {{ <var:C> = <nat:2> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:C> = <nat:2> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 