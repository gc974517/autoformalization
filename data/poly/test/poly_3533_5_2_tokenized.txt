\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:n> ; <var:N> := <nat:1> + <var:N> * <var:n> ; <var:N> := <nat:3> + <var:N> * <var:n> ; <var:N> := <nat:1> + <var:N> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:n> = <var:l> $ before interpreting the code segment it follows that we see $ <var:N> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be shown through usual Hoare logic . Moving forward , we have \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:N> := <nat:2> \, \{ <var:n> = <var:l> \land <var:N> = <nat:2> \} \\ \{ <var:n> = <var:l> \land <var:N> = <nat:2> \} \, <var:N> := <nat:1> + <var:N> * <var:n> \, \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> + <nat:1> \} \\ \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> + <nat:1> \} \, <var:N> := <nat:1> + <var:N> * <var:n> \, \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:1> \} \\ \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:1> \} \, <var:N> := <nat:3> + <var:N> * <var:n> \, \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:3> \} \\ \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:3> \} \, <var:N> := <nat:1> + <var:N> * <var:n\, \{ <var:n> = <var:l> \land <var:N> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:n> ; <var:N> := <nat:1> + <var:N> * <var:n> ; <var:N> := <nat:3> + <var:N> * <var:n> ; <var:N> := <nat:1> + <var:N> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <def:poly> {{ <var:N> = <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:N> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:N> = <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:N> = <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:N> = <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 