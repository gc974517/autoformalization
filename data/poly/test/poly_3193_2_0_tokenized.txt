\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:4> ; <var:A> := <var:s0> \end{verbatim} Allowing it to be that $ <var:X> = <var:j> $ prior to running this set of instructions , it holds that we see $ <var:A> = <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:X> = <var:j> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:X> = <var:j> \land <var:s0> = <nat:4> \} \\ <var:A> := <var:s0> \\ \{ <var:X> = <var:j> \land <var:A> = <nat:4> \} \end{eqnarray} As a consequence , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:X> = <var:j> }} <var:s0> := <nat:4> ; <var:A> := <var:s0> {{ <var:A> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:j> /\ <var:A> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 