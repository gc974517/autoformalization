\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:5> ; <var:a> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allowing that we have $ <var:g> = <var:E> $ --- taking whole numbers $ <var:E> $ --- before executing our set of commands then we have $ <var:a> = <nat:5> $ once program is done . \end{theorem} \begin{proof} The way to prove correctness for the program can be shown with typical Hoare logic . Shifting focus toward the proceeding piece of code found in the set of commands , we have the variable binding code yielding $ <nat:5> $ toward $ <var:B0>$ . This forwards the condition $ \{ <var:g> = <var:E> \} $ to $ \{ <var:g> = <var:E> \land <var:B0> = <nat:5> \} $ . Moving on to the next statement in our series of commands , we have the statement \verb | <var:a> := <var:B0> | . This transfers $ \{ <var:g> = <var:E> \land <var:B0> = <nat:5> \} $ as $ \{ <var:g> = <var:E> \land <var:a> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:5> ; <var:a> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:g> = <var:E> }} <def:poly> {{ <var:a> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:a> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 