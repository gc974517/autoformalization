\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:1> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:3> + <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <nat:1> + <var:w> * <var:s> \end{verbatim} Allow it to be that $ <var:s> = <var:K> $ --- with some positive numbers $ <var:K> $ --- ahead of running the list of instructions , then we have $ <var:w> = <nat:2> \cdot <var:K> ^ <nat:11> + <nat:1> \cdot <var:K> ^ <nat:10> + <nat:2> \cdot <var:K> ^ <nat:9> + <nat:2> \cdot <var:K> ^ <nat:8> + <nat:2> \cdot <var:K> ^ <nat:7> + <nat:2> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:1> $ after series of commands is done . \end{theorem} \begin{proof} Let the below decorated code . \begin{eqnarray} \{ <var:s> = <var:K> \} \\ <var:w> := <nat:2> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> + <nat:1> \} \\ <var:w> := <nat:2> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:2> \} \\ <var:w> := <nat:2> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:2> \} \\ <var:w> := <nat:2> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:4> + <nat:1> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:2> \} \\ <var:w> := <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:5> + <nat:1> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + \} \\ <var:w> := <nat:2> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:6> + <nat:1> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:7> + <nat:1> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> + <nat:3> \} \\ <var:w> := <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:8> + <nat:1> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + \} \\ <var:w> := <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:9> + <nat:1> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + \} \\ <var:w> := <var:w> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:10> + <nat:1> \times <var:K> ^ <nat:9> + <nat:2> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:2> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + \} \\ <var:w> := <nat:1> + <var:w> * <var:s> \\ \{ <var:s> = <var:K> \land <var:w> = <nat:2> \times <var:K> ^ <nat:11> + <nat:1> \times <var:K> ^ <nat:10> + <nat:2> \times <var:K> ^ <nat:9> + <nat:2> \times <var:K> ^ <nat:8> + <nat:2> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:s> = <var:K> }} <var:w> := <nat:2> ; <var:w> := <nat:1> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <nat:2> + <var:w> * <var:s> ; <var:w> := <nat:3> + <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <var:w> * <var:s> ; <var:w> := <nat:1> + <var:w> * <var:s> {{ <var:w> = <nat:2> * <var:K> ^ <nat:11> + <nat:1> * <var:K> ^ <nat:10> + <nat:2> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:8> + <nat:1> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:9> + <nat:1> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:10> + <nat:1> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:11> + <nat:1> * <var:K> ^ <nat:10> + <nat:2> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 