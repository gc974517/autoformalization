\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:s> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:s> ; <var:k2> := <var:k2> * <var:s> ; <var:k3> := <nat:1> ; <var:k3> := <var:k3> * <var:s> ; <var:k3> := <var:k3> * <var:s> ; <var:k3> := <var:k3> * <var:s> ; <var:f> := <var:k3> ; <var:f> := <var:f> + <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> \end{verbatim} Assuming that $ <var:s> = <var:I> $ ahead of the evaluation of the program it must be that we see $ <var:f> = <nat:1> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:3> $ after series of commands has finished . \end{theorem} \begin{proof} Observe the following decorated set of commands . \begin{eqnarray} \{ <var:s> = <var:I> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \} \\ <var:k1> := <nat:8> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \} \\ <var:k1> := <var:k1> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \} \\ <var:k2> := <nat:2> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \} \\ <var:k2> := <var:k2> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> \} \end{eqnarray} Advancing the evaluation of this code segment produces : \begin{eqnarray} <var:k2> := <var:k2> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \} \\ <var:k3> := <nat:1> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \land <var:k3> = <nat:1> \} \\ <var:k3> := <var:k3> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \land <var:k3> = <nat:1> \times <var:I> \} \\ <var:k3> := <var:k3> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \land <var:k3> = <nat:1> \times <var:I> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:s> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \land <var:k3> = <nat:1> \times <var:I> ^ <nat:3> \} \\ <var:f> := <var:k3> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:k2> = <nat:2> \times <var:I> ^ <nat:2> \land <var:f> = <nat:1> \times <var:I> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:k2> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:k1> = <nat:8> \times <var:I> \land <var:f> = <nat:1> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:k1> ; \\ \{ <var:s> = <var:I> \land <var:k0> = <nat:3> \land <var:f> = <nat:1> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} \\ <var:f> := <var:f> + <var:k0> \\ \{ <var:s> = <var:I> \land <var:f> = <nat:1> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:s> = <var:I> }} <var:k0> := <nat:3> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:s> ; <var:k2> := <nat:2> ; <var:k2> := <var:k2> * <var:s> ; <var:k2> := <var:k2> * <var:s> ; <var:k3> := <nat:1> ; <var:k3> := <var:k3> * <var:s> ; <var:k3> := <var:k3> * <var:s> ; <var:k3> := <var:k3> * <var:s> ; <var:f> := <var:k3> ; <var:f> := <var:f> + <var:k2> ; <var:f> := <var:f> + <var:k1> ; <var:f> := <var:f> + <var:k0> {{ <var:f> = <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:k3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:k2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:f> = <nat:1> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:8> * <var:I> /\ <var:f> = <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:k0> = <nat:3> /\ <var:f> = <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:f> = <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 