\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:1> ; <var:t> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for natural numbers $ <var:I> $ --- $ <var:K> = <var:I> $ ahead of executing our list of commands then we see $ <var:t> = <nat:1> $ once code executes . \end{theorem} \begin{proof} The flow of logic for our series of instructions is done through standard Hoare logic . Advancing on , we see \begin{verbatim} { <var:K> = <var:I> } <var:M0> := <nat:1> { <var:K> = <var:I> \land <var:M0> = <nat:1> } \end{verbatim} Moving on to the next step , we have \begin{verbatim} { <var:K> = <var:I> } <var:M0> := <nat:1> { <var:K> = <var:I> \land <var:M0> = <nat:1> } \end{verbatim} This is shown to be logically sound with the binding scheme from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:t> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:t> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:t> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 