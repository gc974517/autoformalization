\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:9> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:f> ; <var:m2> := <nat:5> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:m3> := <nat:9> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:T> := <var:m3> ; <var:T> := <var:T> + <var:m2> ; <var:T> := <var:T> + <var:m1> ; <var:T> := <var:T> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:f> = <var:h> $ before interpreting this code segment then we have $ <var:T> = <nat:9> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:9> $ once set of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of the code can be accomplished through usual Hoare techniques . Stepping through , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:m0> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \, <var:m1> := <nat:1> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> \} \, <var:m1> := <var:m1> * <var:f> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \} \, <var:m2> := <nat:5> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> \} \, <var:m2> := <var:m2> * <var:f> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> \} \, <var:m2> := <var:m2> * <var:f> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> ^ <nat:2> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> ^ <nat:2> \} \, <var:m3> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> ^ <nat:2> \land <var:m3> = <nat:9> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> ^ <nat:2> \land <var:m3> = <nat:9> \} \, <var:m3> := <var:m3> * <var:f> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> * <var:h> \land <var:m2> = <nat:5> * <var:h> ^ <nat:2> \land <var:m3> = <nat:9> * <var:h> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:m0> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \, <var:m1> := <nat:1> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> \} \end{eqnarray} This is shown through the variable update inference rule given by Hoare reasoning . Now , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:m0> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \\ \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \, <var:m1> := <nat:1> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \land <var:m1> = <nat:1> \} \end{eqnarray} Immediately after , \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:m0> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \end{eqnarray} This is shown with the variable update inference rule obtained from usual Hoare techniques . Jumping to the subsequent line of code found in the set of commands , we see \begin{eqnarray} \{ <var:f> = <var:h> \} \, <var:m0> := <nat:9> \, \{ <var:f> = <var:h> \land <var:m0> = <nat:9> \} \end{eqnarray} This is shown through the variable binding scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:9> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:f> ; <var:m2> := <nat:5> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:m3> := <nat:9> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:m3> := <var:m3> * <var:f> ; <var:T> := <var:m3> ; <var:T> := <var:T> + <var:m2> ; <var:T> := <var:T> + <var:m1> ; <var:T> := <var:T> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <def:poly> {{ <var:T> = <nat:9> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:m3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:m2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:T> = <nat:9> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:1> * <var:h> /\ <var:T> = <nat:9> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:m0> = <nat:9> /\ <var:T> = <nat:9> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:T> = <nat:9> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 