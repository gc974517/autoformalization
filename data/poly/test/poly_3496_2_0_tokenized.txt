\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:3> ; <var:I> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:V> = <var:x> $ prior to evaluating the set of commands it follows that $ <var:I> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is demonstrated through standard Hoare logic . After , the binding code giving $ <nat:3> $ toward $ <var:M0>$ . This transfers the condition $ \{ <var:V> = <var:x> \} $ to the postcondition $ \{ <var:V> = <var:x> \land <var:M0> = <nat:3> \} $ . Considering the proceeding piece of code contained in our code , we see the environment update line letting $ <var:M0$ into $ <var:I>$ . This redefines the precondition $ \{ <var:V> = <var:x> \land <var:M0> = <nat:3> \} $ into the condition $ \{ <var:V> = <var:x> \land <var:I> = <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:3> ; <var:I> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <def:poly> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 