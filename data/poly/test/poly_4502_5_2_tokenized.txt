\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:4> + <var:P> * <var:B> ; <var:P> := <nat:4> + <var:P> * <var:B> ; <var:P> := <nat:2> + <var:P> * <var:B> ; <var:P> := <nat:2> + <var:P> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:B> = <var:L> $ prior to the execution of this series of instructions , it must be that $ <var:P> = <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> $ after series of instructions exits . \end{theorem} \begin{proof} The course of logic for the code is done by the below decorated code segment . \begin{eqnarray} \{ <var:B> = <var:L> \} \\ <var:P> := <nat:3> ; \\ \{ <var:B> = <var:L> \land <var:P> = <nat:3> \} \\ <var:P> := <nat:4> + <var:P> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:P> = <nat:3> \times <var:L> + <nat:4> \} \\ <var:P> := <nat:4> + <var:P> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:P> = <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:B> ; \\ \{ <var:B> = <var:L> \land <var:P> = <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:2> \} \\ <var:P> := <nat:2> + <var:P> * <var:B> \\ \{ <var:B> = <var:L> \land <var:P> = <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:3> ; <var:P> := <nat:4> + <var:P> * <var:B> ; <var:P> := <nat:4> + <var:P> * <var:B> ; <var:P> := <nat:2> + <var:P> * <var:B> ; <var:P> := <nat:2> + <var:P> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:B> = <var:L> }} <def:poly> {{ <var:P> = <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:P> = <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:P> = <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:P> = <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:L> /\ <var:P> = <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 