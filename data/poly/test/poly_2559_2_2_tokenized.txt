\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:1> + <var:u> * <var:G> \end{verbatim} Given that $ <var:G> = <var:q> $ with some positive coefficients $ <var:q> $ before executing our segment of code , it holds that $ <var:u> = <nat:4> \times <var:q> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions can be accomplished with Hoare reasoning . Immediately following , we have the environment update command \verb | <var:u> := <nat:4> ; | . This takes the precondition $ \{ <var:G> = <var:q> \} $ into the postcondition $ \{ <var:G> = <var:q> \land <var:u> = <nat:4> \} $ . Now , the variable assignmet code yielding $ <nat:1> + <var:u> * <var:G$ to $ <var:u>$ . This command moves the condition $ \{ <var:G> = <var:q> \land <var:u> = <nat:4> \} $ as $ \{ <var:G> = <var:q> \land <var:u> = <nat:4> \cdot <var:q> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:G> = <var:q> }} <var:u> := <nat:4> ; <var:u> := <nat:1> + <var:u> * <var:G> {{ <var:u> = <nat:4> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:u> = <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 