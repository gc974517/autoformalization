\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:3> ; <var:S> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:L> = <var:t> $ ahead of the execution of the code then we have $ <var:S> = <nat:3> $ when set of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this code can be seen by typical Hoare reasoning . Paying attention to the upcoming lines found in our code , we have \verb | { <var:L> = <var:t> } <var:y0> := <nat:3> { <var:L> = <var:t> \land <var:y0> = <nat:3> } | and \verb | { <var:L> = <var:t> \land <var:y0> = <nat:3> } <var:S> := <var:y0{ <var:L> = <var:t> \land <var:S> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:S> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:L> = <var:t> }} <def:poly> {{ <var:S> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:S> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 