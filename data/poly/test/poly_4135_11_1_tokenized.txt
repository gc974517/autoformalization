\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:x> ; <var:a2> := <var:a1> * <var:x> ; <var:a3> := <var:a2> * <var:x> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:5> ; <var:a2> := <var:a2> * <nat:1> ; <var:a3> := <var:a3> * <nat:6> ; <var:J> := <var:a3> <var:J> := <var:J> + <var:a2> <var:J> := <var:J> + <var:a1> <var:J> := <var:J> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:x> = <var:H> $ ahead of interpreting our set of instructions it holds that we have $ <var:J> = <nat:6> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be seen through usual Hoare reasoning . Further , \begin{eqnarray} \{ <var:x> = <var:H> \} \, <var:a1> := <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \, <var:a2> := <var:a1> * <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \} \, <var:a3> := <var:a2> * <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \} \, <var:a0> := <nat:1> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \land <var:a0> = <nat:1> \} \end{eqnarray} After , we have \begin{eqnarray} \{ <var:x> = <var:H> \} \, <var:a1> := <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \, <var:a2> := <var:a1> * <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \} \, <var:a3> := <var:a2> * <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \} \, <var:a0> := <nat:1> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \land <var:a3> = <var:H> ^ <nat:3> \land <var:a0> = <nat:1> \} \end{eqnarray} Stepping through , \begin{eqnarray} \{ <var:x> = <var:H> \} \, <var:a1> := <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \end{eqnarray} Paying attention to the upcoming lines of codefound in our series of instructions , we have \begin{eqnarray} \{ <var:x> = <var:H> \} \, <var:a1> := <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \\ \{ <var:x> = <var:H> \land <var:a1> = <var:H> \} \, <var:a2> := <var:a1> * <var:x> \, \{ <var:x> = <var:H> \land <var:a1> = <var:H> \land <var:a2> = <var:H> ^ <nat:2> \} \end{eqnarray} This is guaranteed with the inference rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:x> ; <var:a2> := <var:a1> * <var:x> ; <var:a3> := <var:a2> * <var:x> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:5> ; <var:a2> := <var:a2> * <nat:1> ; <var:a3> := <var:a3> * <nat:6> ; <var:J> := <var:a3> <var:J> := <var:J> + <var:a2> <var:J> := <var:J> + <var:a1> <var:J> := <var:J> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <def:poly> {{ <var:J> = <nat:6> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <var:H> /\ <var:a2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <var:H> /\ <var:a2> = <var:H> ^ <nat:2> /\ <var:a3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <var:H> /\ <var:a2> = <var:H> ^ <nat:2> /\ <var:a3> = <var:H> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <nat:5> * <var:H> /\ <var:a2> = <var:H> ^ <nat:2> /\ <var:a3> = <var:H> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <nat:5> * <var:H> /\ <var:a2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:a3> = <var:H> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <nat:5> * <var:H> /\ <var:a2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:H> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <nat:5> * <var:H> /\ <var:a2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:a0> = <nat:1> /\ <var:J> = <nat:6> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a1> = <nat:5> * <var:H> /\ <var:a0> = <nat:1> /\ <var:J> = <nat:6> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:a0> = <nat:1> /\ <var:J> = <nat:6> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:J> = <nat:6> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 