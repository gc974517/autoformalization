\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:V> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:V> ; <var:t2> := <var:t2> * <var:V> ; <var:i> := <var:t2> ; <var:i> := <var:i> + <var:t1> ; <var:i> := <var:i> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:V> = <var:H> $ before interpreting this series of instructions , it follows that we see $ <var:i> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:9> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is clear by usual Hoare reasoning . Observing the following statements found in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:t0> := <nat:3> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \} & <var:t1> := <nat:9> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \} & <var:t1> := <var:t1> * <var:V> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \} & <var:t2> := <nat:2> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \} & <var:t2> := <var:t2> * <var:V> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \cdot <var:H> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \cdot <var:H> \} & <var:t2> := <var:t2> * <var:V> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \cdot <var:H> ^ <nat:2> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:t2> = <nat:2> \cdot <var:H> ^ <nat:2> \} & <var:i> := <var:t2> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \cdot <var:H> \land <var:i> = <nat:2> \cdot <var:H> ^ <nat:2> \} \end{tabular} This is ensured using the variable update inference rule obtained from typical Hoare logic . Paying attention to the following steps found in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:t0> := <nat:3> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \} & <var:t1> := <nat:9> & \{ <var:V> = <var:H> \land <var:t0> = <nat:3> \land <var:t1> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:V> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:V> ; <var:t2> := <var:t2> * <var:V> ; <var:i> := <var:t2> ; <var:i> := <var:i> + <var:t1> ; <var:i> := <var:i> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:V> = <var:H> }} <def:poly> {{ <var:i> = <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> * <var:H> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> * <var:H> /\ <var:t2> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> * <var:H> /\ <var:t2> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:9> * <var:H> /\ <var:i> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:3> /\ <var:i> = <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:i> = <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 