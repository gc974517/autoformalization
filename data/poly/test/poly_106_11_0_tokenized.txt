\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:8> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:U> ; <var:n2> := <var:n2> * <var:U> ; <var:n3> := <nat:6> ; <var:n3> := <var:n3> * <var:U> ; <var:n3> := <var:n3> * <var:U> ; <var:n3> := <var:n3> * <var:U> ; <var:J> := <var:n3> ; <var:J> := <var:J> + <var:n2> ; <var:J> := <var:J> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Allowing $ <var:U> = <var:v> $ ( assuming some positive numbers $ <var:v> $ ) prior to evaluating this series of commands it holds that we have $ <var:J> = <nat:6> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:8> $ after list of instructions terminates . \end{theorem} \begin{proof} The proof of the code is shown with usual Hoare techniques . Advancing on , we see \verb | { <var:U> = <var:v> } <var:n0> := <nat:8> { <var:U> = <var:v> \land <var:n0> = <nat:8> } | , \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> } <var:n2> := <nat:4> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } | and \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } <var:n2> := <var:n2> * <var:U> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> \times <var:v> } | . This is deduced using the binding rule obtained from Hoare reasoning . Looking at the next lines contained in the program , \verb | { <var:U> = <var:v> } <var:n0> := <nat:8> { <var:U> = <var:v> \land <var:n0> = <nat:8> } | and \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> } <var:n2> := <nat:4> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } | . This is given through the variable binding rule in usual Hoare reasoning . Shifting focus toward the next lines in the code , we have \verb | { <var:U> = <var:v> } <var:n0> := <nat:8> { <var:U> = <var:v> \land <var:n0> = <nat:8> } | , \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> } <var:n2> := <nat:4> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } | , \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } <var:n2> := <var:n2> * <var:U> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> \times <var:v> } | and \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> \times <var:v> } <var:n2> := <var:n2> * <var:U> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> \times <var:v> ^ <nat:2> } | . Keeping momentum , we have \verb | { <var:U> = <var:v> } <var:n0> := <nat:8> { <var:U> = <var:v> \land <var:n0> = <nat:8> } | and \verb | { <var:U> = <var:v> \land <var:n0> = <nat:8> } <var:n2> := <nat:4> { <var:U> = <var:v> \land <var:n0> = <nat:8> \land <var:n2> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:8> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:U> ; <var:n2> := <var:n2> * <var:U> ; <var:n3> := <nat:6> ; <var:n3> := <var:n3> * <var:U> ; <var:n3> := <var:n3> * <var:U> ; <var:n3> := <var:n3> * <var:U> ; <var:J> := <var:n3> ; <var:J> := <var:J> + <var:n2> ; <var:J> := <var:J> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:J> = <nat:6> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:n3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:n2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:J> = <nat:6> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:n0> = <nat:8> /\ <var:J> = <nat:6> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:J> = <nat:6> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 