\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:O> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:2> ; <var:f> := <var:P1> <var:f> := <var:f> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:O> = <var:Y> $ ahead of the execution of this series of instructions it must be that we have $ <var:f> = <nat:2> \times <var:Y> + <nat:8> $ once list of commands has finished . \end{theorem} \begin{proof} The method of proof for the set of instructions is clear with Hoare techniques . Paying attention to the proceeding step in our series of commands , we see the environment update line \verb | <var:P1> := <var:O> ; | . This line transfers $ \{ <var:O> = <var:Y> \} $ as the postcondition $ \{ <var:O> = <var:Y> \land <var:P1> = <var:Y> \} $ . This is given through the assignment rule defined in Hoare reasoning . After , we have the variable assignmet command \verb | <var:P0> := <nat:8> ; | . This transfers $ \{ <var:O> = <var:Y> \land <var:P1> = <var:Y> \} $ as the postcondition $ \{ <var:O> = <var:Y> \land <var:P1> = <var:Y> \land <var:P0> = <nat:8> \} $ . This is shown to be logically sound through the assignment law defined by typical Hoare reasoning . Immediately after , we have the assignment statement giving $ <var:P1> * <nat:2> $ as $ <var:P1>$ . This line takes the condition $ \{ <var:O> = <var:Y> \land <var:P1> = <var:Y> \land <var:P0> = <nat:8> \} $ to the condition $ \{ <var:O> = <var:Y> \land <var:P1> = <nat:2> \times <var:Y> \land <var:P0> = <nat:8> \} $ . Paying attention to the next bit of code found in our set of commands , we have the binding code assigning $ <var:P1$ toward $ <var:f>$ . This moves $ \{ <var:O> = <var:Y> \land <var:P1> = <nat:2> \times <var:Y> \land <var:P0> = <nat:8> \} $ toward the condition $ \{ <var:O> = <var:Y> \land <var:P0> = <nat:8> \land <var:f> = <nat:2> \times <var:Y> \} $ . This is guaranteed using the assignment inference rule defined by standard Hoare techniques . Going forward , the variable update line letting $ <var:f> + <var:P0$ toward $ <var:f>$ . This code forwards the condition $ \{ <var:O> = <var:Y> \land <var:P0> = <nat:8> \land <var:f> = <nat:2> \times <var:Y> \} $ as the condition $ \{ <var:O> = <var:Y> \land <var:f> = <nat:2> \times <var:Y> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:O> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:2> ; <var:f> := <var:P1> <var:f> := <var:f> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:O> = <var:Y> }} <def:poly> {{ <var:f> = <nat:2> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:P1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:P1> = <var:Y> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:P1> = <nat:2> * <var:Y> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:P0> = <nat:8> /\ <var:f> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Y> /\ <var:f> = <nat:2> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 