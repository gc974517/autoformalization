\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:l> ; <var:Y2> := <var:Y1> * <var:l> ; <var:Y3> := <var:Y2> * <var:l> ; <var:Y4> := <var:Y3> * <var:l> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y4> := <var:Y4> * <nat:6> ; <var:x> := <var:Y4> <var:x> := <var:x> + <var:Y2> <var:x> := <var:x> + <var:Y1> <var:x> := <var:x> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:l> = <var:o> $ prior to running our code segment , it follows that we have $ <var:x> = <nat:6> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:8> $ after set of instructions is done executing . \end{theorem} \begin{proof} The proof of our list of commands can be seen by typical Hoare logic . Immediately after , we have \begin{eqnarray} \{ <var:l> = <var:o> \} \, <var:Y1> := <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \, <var:Y2> := <var:Y1> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \end{eqnarray} Paying attention to the following lines found in the code segment , we see \begin{eqnarray} \{ <var:l> = <var:o> \} \, <var:Y1> := <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \, <var:Y2> := <var:Y1> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \, <var:Y3> := <var:Y2> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \} \, <var:Y4> := <var:Y3> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \} \, <var:Y0> := <nat:8> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \end{eqnarray} This is sound through the variable assignmet rule given by Hoare reasoning . Moving forward to the subsequent statements in the list of commands , we see \begin{eqnarray} \{ <var:l> = <var:o> \} \, <var:Y1> := <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \, <var:Y2> := <var:Y1> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \, <var:Y3> := <var:Y2> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \} \\ \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \} \, <var:Y4> := <var:Y3> * <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \} \end{eqnarray} After , \begin{eqnarray} \{ <var:l> = <var:o> \} \, <var:Y1> := <var:l> \, \{ <var:l> = <var:o> \land <var:Y1> = <var:o> \} \end{eqnarray} This is deduced by the variable binding inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <var:Y4> : string := " <var:Y4> " . Definition <def:poly> := <var:Y1> := <var:l> ; <var:Y2> := <var:Y1> * <var:l> ; <var:Y3> := <var:Y2> * <var:l> ; <var:Y4> := <var:Y3> * <var:l> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y4> := <var:Y4> * <nat:6> ; <var:x> := <var:Y4> <var:x> := <var:x> + <var:Y2> <var:x> := <var:x> + <var:Y1> <var:x> := <var:x> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <def:poly> {{ <var:x> = <nat:6> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <nat:9> * <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <nat:9> * <var:o> /\ <var:Y2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <nat:9> * <var:o> /\ <var:Y2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <nat:6> * <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <nat:9> * <var:o> /\ <var:Y2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y0> = <nat:8> /\ <var:x> = <nat:6> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y1> = <nat:9> * <var:o> /\ <var:Y0> = <nat:8> /\ <var:x> = <nat:6> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Y0> = <nat:8> /\ <var:x> = <nat:6> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:x> = <nat:6> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 