\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:l> ; <var:p2> := <var:p1> * <var:l> ; <var:p3> := <var:p2> * <var:l> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:1> ; <var:D> := <var:p3> <var:D> := <var:D> + <var:p2> <var:D> := <var:D> + <var:p1> <var:D> := <var:D> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Allowing that $ <var:l> = <var:u> $ , given every natural coefficients $ <var:u> $ , prior to interpreting this set of commands , it follows that $ <var:D> = <nat:1> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:3> \times <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be demonstrated with standard Hoare techniques . Considering the proceeding step found in our set of commands , the assignment line letting $ <var:l> $ into $ <var:p1>$ . This forwards the condition $ \{ <var:l> = <var:u> \} $ as the condition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \} $ . This is shown to be logically sound through the assignment scheme in standard Hoare techniques . Immediately following , we have the statement binding $ <var:p1> * <var:l> $ as $ <var:p2>$ . This takes the condition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \} $ toward $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \} $ . Advancing on , we have the variable assignmet code \verb | <var:p3> := <var:p2> * <var:l> ; | . This command forwards the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \} $ into the postcondition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \} $ . Further , we have the variable update statement \verb | <var:p0> := <nat:3> ; | . This code redefines the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . This is ensured with the assignment scheme found in usual Hoare reasoning . Going to the next step , we have the binding command defining $ <var:p1> * <nat:3> $ toward $ <var:p1>$ . This code takes the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ as the condition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . Jumping to the proceeding statement found in the code segment , the binding code yielding $ <var:p2> * <nat:3> $ as $ <var:p2>$ . This statement takes the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . Moving onward , we see the variable assignmet command \verb | <var:p3> := <var:p3> * <nat:1> ; | . This command takes the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p3> = <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ to the condition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . This is shown to be logically sound by the assignment scheme in usual Hoare techniques . Focusing on the following line of code found in the list of commands , we see the variable assignmet statement \verb | <var:D> := <var:p3> | . This takes $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:p0> = <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> \} $ . This is known to be sound using the assignment scheme defined by typical Hoare techniques . Focusing on the proceeding step found in our series of instructions , we have the variable assignmet statement \verb | <var:D> := <var:D> + <var:p2> | . This advances the precondition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> \} $ toward the condition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} $ . This is shown through the assignment scheme of standard Hoare reasoning . Honing in on the upcoming command found in the program , we see the assignment code giving $ <var:D> + <var:p1$ to $ <var:D>$ . This transfers the condition $ \{ <var:l> = <var:u> \land <var:p1> = <nat:3> \cdot <var:u> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} $ as $ \{ <var:l> = <var:u> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> \} $ . This is guaranteed by the assignment scheme defined by usual Hoare techniques . Taking another step toward the upcoming line contained in our series of commands , the environment update statement binding $ <var:D> + <var:p0$ into $ <var:D>$ . This forwards the condition $ \{ <var:l> = <var:u> \land <var:p0> = <nat:3> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> \} $ toward $ \{ <var:l> = <var:u> \land <var:D> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:l> ; <var:p2> := <var:p1> * <var:l> ; <var:p3> := <var:p2> * <var:l> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:3> ; <var:p3> := <var:p3> * <nat:1> ; <var:D> := <var:p3> <var:D> := <var:D> + <var:p2> <var:D> := <var:D> + <var:p1> <var:D> := <var:D> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:l> = <var:u> }} <def:poly> {{ <var:D> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <var:u> /\ <var:p2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <var:u> /\ <var:p2> = <var:u> ^ <nat:2> /\ <var:p3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <var:u> /\ <var:p2> = <var:u> ^ <nat:2> /\ <var:p3> = <var:u> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <nat:3> * <var:u> /\ <var:p2> = <var:u> ^ <nat:2> /\ <var:p3> = <var:u> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <nat:3> * <var:u> /\ <var:p2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:p3> = <var:u> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <nat:3> * <var:u> /\ <var:p2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:p3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <nat:3> * <var:u> /\ <var:p2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:p0> = <nat:3> /\ <var:D> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p1> = <nat:3> * <var:u> /\ <var:p0> = <nat:3> /\ <var:D> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:p0> = <nat:3> /\ <var:D> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:D> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 