\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:l> ; <var:Y> := <var:U1> ; <var:Y> := <var:Y> + <var:U0> \end{verbatim} Allowing --- for any positive integer coefficients $ <var:e> $ --- it to hold that $ <var:l> = <var:e> $ prior to running the series of instructions it follows that $ <var:Y> = <nat:8> \times <var:e> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:l> = <var:e> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:l> = <var:e> \land <var:U0> = <nat:4> \} \\ <var:U1> := <nat:8> ; \\ \{ <var:l> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:8> \} \\ <var:U1> := <var:U1> * <var:l> ; \\ \{ <var:l> = <var:e> \land <var:U0> = <nat:4> \land <var:U1> = <nat:8> * <var:e> \} \\ <var:Y> := <var:U1> ; \\ \{ <var:l> = <var:e> \land <var:U0> = <nat:4> \land <var:Y> = <nat:8> * <var:e> \} \\ <var:Y> := <var:Y> + <var:U0> \\ \{ <var:l> = <var:e> \land <var:Y> = <nat:8> * <var:e> + <nat:4> \} \end{eqnarray} As a result , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:l> = <var:e> }} <var:U0> := <nat:4> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:l> ; <var:Y> := <var:U1> ; <var:Y> := <var:Y> + <var:U0> {{ <var:Y> = <nat:8> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:U0> = <nat:4> /\ <var:Y> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:Y> = <nat:8> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 