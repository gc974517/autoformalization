\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:f> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:3> ; <var:Y> := <var:d1> <var:Y> := <var:Y> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:f> = <var:b> $ --- for some whole numbers $ <var:b> $ --- before running our series of instructions it follows that we have $ <var:Y> = <nat:3> \times <var:b> + <nat:1> $ after list of instructions finishes . \end{theorem} \begin{proof} Applying Hoare techniques produces : \begin{eqnarray} \{ <var:f> = <var:b> \} \\ <var:d1> := <var:f> ; \\ \{ <var:f> = <var:b> \land <var:d1> = <var:b> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:f> = <var:b> \land <var:d1> = <var:b> \land <var:d0> = <nat:1> \} \\ <var:d1> := <var:d1> * <nat:3> ; \\ \{ <var:f> = <var:b> \land <var:d1> = <nat:3> \cdot <var:b> \land <var:d0> = <nat:1> \} \\ <var:Y> := <var:d1> \\ \{ <var:f> = <var:b> \land <var:d0> = <nat:1> \land <var:Y> = <nat:3> \cdot <var:b> \} \\ <var:Y> := <var:Y> + <var:d0> \\ \{ <var:f> = <var:b> \land <var:Y> = <nat:3> \cdot <var:b> + <nat:1> \} \end{eqnarray} Therefore , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:f> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:3> ; <var:Y> := <var:d1> <var:Y> := <var:Y> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:f> = <var:b> }} <def:poly> {{ <var:Y> = <nat:3> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:d1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:d1> = <var:b> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:d1> = <nat:3> * <var:b> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:d0> = <nat:1> /\ <var:Y> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:Y> = <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 