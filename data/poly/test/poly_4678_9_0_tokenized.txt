\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:e> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:e> ; <var:G2> := <var:G2> * <var:e> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:e> = <var:p> $ ( for all positive coefficients $ <var:p> $ ) before evaluating this series of instructions it follows that we see $ <var:i> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be seen using typical Hoare logic . Now , we have \begin{verbatim} { <var:e> = <var:p> } <var:G0> := <nat:8> { <var:e> = <var:p> \land <var:G0> = <nat:8> } { <var:e> = <var:p> \land <var:G0> = <nat:8> } <var:G1> := <nat:1> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> } { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> } <var:G1> := <var:G1> * <var:e> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> } { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> } <var:G2> := <nat:3> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> } { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> } <var:G2> := <var:G2> * <var:e> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> \times <var:p> } { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> \times <var:p> } <var:G2> := <var:G2> * <var:e> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> \times <var:p> ^ <nat:2> } { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:G2> = <nat:3> \times <var:p> ^ <nat:2> } <var:i> := <var:G2> { <var:e> = <var:p> \land <var:G0> = <nat:8> \land <var:G1> = <nat:1> \times <var:p> \land <var:i> = <nat:3> \times <var:p> ^ <nat:2> } \end{verbatim} This is shown by the environment update law from usual Hoare reasoning . Immediately after , we see \begin{verbatim} { <var:e> = <var:p> } <var:G0> := <nat:8> { <var:e> = <var:p> \land <var:G0> = <nat:8> } \end{verbatim} Next , \begin{verbatim} { <var:e> = <var:p> } <var:G0> := <nat:8> { <var:e> = <var:p> \land <var:G0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:e> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:e> ; <var:G2> := <var:G2> * <var:e> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:e> = <var:p> }} <def:poly> {{ <var:i> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> * <var:p> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> * <var:p> /\ <var:G2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> * <var:p> /\ <var:G2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:1> * <var:p> /\ <var:i> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:G0> = <nat:8> /\ <var:i> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:i> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 