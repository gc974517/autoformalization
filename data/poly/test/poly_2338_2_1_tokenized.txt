\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:3> ; <var:t> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:D> = <var:q> $ given positive numbers $ <var:q> $ prior to evaluating our series of instructions , then we see $ <var:t> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our code segment is done with standard Hoare techniques . Following , we have the line binding $ <nat:3> $ into $ <var:y0>$ . This command takes the precondition $ \{ <var:D> = <var:q> \} $ toward the postcondition $ \{ <var:D> = <var:q> \land <var:y0> = <nat:3> \} $ . This is shown using the assignment inference rule of standard Hoare logic . Further , the variable update line yielding $ <var:y0$ as $ <var:t>$ . This statement moves the precondition $ \{ <var:D> = <var:q> \land <var:y0> = <nat:3> \} $ to $ \{ <var:D> = <var:q> \land <var:t> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:t> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:D> = <var:q> }} <def:poly> {{ <var:t> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:t> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 