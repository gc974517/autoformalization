\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:y> ; <var:C> := <var:J1> ; <var:C> := <var:C> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assume --- letting natural coefficients $ <var:Y> $ --- that we have $ <var:y> = <var:Y> $ ahead of interpreting the list of instructions , it follows that $ <var:C> = <nat:2> * <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our code is clear with typical Hoare techniques . Jumping to the proceeding statement in the set of instructions , we see the variable assignmet command \verb | <var:J0> := <nat:4> ; | . This forwards the condition $ \{ <var:y> = <var:Y> \} $ toward the condition $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \} $ . Immediately following , we have the environment update code \verb | <var:J1> := <nat:2> ; | . This line takes the precondition $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \} $ to the postcondition $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \} $ . Going forward , the variable update code defining $ <var:J1> * <var:y> $ into $ <var:J1>$ . This command redefines $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:Y> \} $ . Stepping through , the assignment line \verb | <var:C> := <var:J1> ; | . This code redefines $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:Y> \} $ toward $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:C> = <nat:2> \cdot <var:Y> \} $ . This is shown through the assignment law given by usual Hoare logic . Observing the next line of code seen in the set of instructions , we see the environment update statement \verb | <var:C> := <var:C> + <var:J0> | . This transfers the precondition $ \{ <var:y> = <var:Y> \land <var:J0> = <nat:4> \land <var:C> = <nat:2> \cdot <var:Y> \} $ as the postcondition $ \{ <var:y> = <var:Y> \land <var:C> = <nat:2> \cdot <var:Y> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:y> ; <var:C> := <var:J1> ; <var:C> := <var:C> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:y> = <var:Y> }} <def:poly> {{ <var:C> = <nat:2> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:J0> = <nat:4> /\ <var:C> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 