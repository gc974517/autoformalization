\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:U> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:5> ; <var:Q> := <var:D1> <var:Q> := <var:Q> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:U> = <var:L> $ ahead of executing our segment of code , it holds that we have $ <var:Q> = <nat:5> * <var:L> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:U> = <var:L> \} \\ <var:D1> := <var:U> ; \\ \{ <var:U> = <var:L> \land <var:D1> = <var:L> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:U> = <var:L> \land <var:D1> = <var:L> \land <var:D0> = <nat:8> \} \\ <var:D1> := <var:D1> * <nat:5> ; \\ \{ <var:U> = <var:L> \land <var:D1> = <nat:5> * <var:L> \land <var:D0> = <nat:8> \} \\ <var:Q> := <var:D1> \\ \{ <var:U> = <var:L> \land <var:D0> = <nat:8> \land <var:Q> = <nat:5> * <var:L> \} \\ <var:Q> := <var:Q> + <var:D0> \\ \{ <var:U> = <var:L> \land <var:Q> = <nat:5> * <var:L> + <nat:8> \} \end{eqnarray} Hence , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:U> ; <var:D0> := <nat:8> ; <var:D1> := <var:D1> * <nat:5> ; <var:Q> := <var:D1> <var:Q> := <var:Q> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:U> = <var:L> }} <def:poly> {{ <var:Q> = <nat:5> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:D1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:D1> = <var:L> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:D1> = <nat:5> * <var:L> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:D0> = <nat:8> /\ <var:Q> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:Q> = <nat:5> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 