\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:w> ; <var:q2> := <var:q1> * <var:w> ; <var:q3> := <var:q2> * <var:w> ; <var:q4> := <var:q3> * <var:w> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:4> ; <var:q3> := <var:q3> * <nat:2> ; <var:q4> := <var:q4> * <nat:2> ; <var:f> := <var:q4> <var:f> := <var:f> + <var:q3> <var:f> := <var:f> + <var:q1> <var:f> := <var:f> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Allow $ <var:w> = <var:T> $ prior to evaluating the set of instructions it follows that $ <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> + <nat:4> $ after set of commands has exited . \end{theorem} \begin{proof} The argument for the segment of code is evident with standard Hoare reasoning . Stepping forward , we have the variable assignmet command \verb | <var:q1> := <var:w> ; | . This moves the condition $ \{ <var:w> = <var:T> \} $ as the postcondition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \} $ . This is guaranteed with the assignment law defined by standard Hoare reasoning . Going to the next step , we see the environment update command yielding $ <var:q1> * <var:w> $ as $ <var:q2>$ . This moves the condition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \} $ toward the postcondition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \} $ . Advancing , we see the binding statement defining $ <var:q2> * <var:w> $ into $ <var:q3>$ . This forwards the condition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \} $ to the postcondition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \} $ . This is ensured by the assignment scheme in Hoare logic . Taking a look at the following piece of code found in the code , we see the variable binding code \verb | <var:q4> := <var:q3> * <var:w> ; | . This statement forwards the precondition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \} $ as the condition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \} $ . This is deduced by the assignment rule from Hoare techniques . Honing in on the upcoming statement in the series of instructions , the variable assignmet command yielding $ <nat:4> $ as $ <var:q0>$ . This moves $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \} $ into the condition $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ . This is shown to be logically sound with the assignment law found in typical Hoare techniques . Advancing , the code defining $ <var:q1> * <nat:4> $ toward $ <var:q1>$ . This statement moves $ \{ <var:w> = <var:T> \land <var:q1> = <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ as the condition $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ . Paying attention to the next statement seen in our series of instructions , the code letting $ <var:q3> * <nat:2> $ as $ <var:q3>$ . This code forwards $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ to the condition $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ . This is deduced by the assignment scheme from Hoare logic . Jumping to the upcoming line of code found in our list of instructions , the environment update command assigning $ <var:q4> * <nat:2> $ as $ <var:q4>$ . This advances the precondition $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q4> = <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ as $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q4> = <nat:2> \times <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ . Taking another step toward the following statement seen in our series of commands , the variable binding statement \verb | <var:f> := <var:q4> | . This statement takes $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q4> = <nat:2> \times <var:T> ^ <nat:4> \land <var:q0> = <nat:4> \} $ as the condition $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> \} $ . Jumping to the proceeding line of code in the program , we have the assignment command giving $ <var:f> + <var:q3$ toward $ <var:f>$ . This statement advances the precondition $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> \} $ toward $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> \} $ . Moving onward , the assignment code giving $ <var:f> + <var:q1$ toward $ <var:f>$ . This statement forwards $ \{ <var:w> = <var:T> \land <var:q1> = <nat:4> \times <var:T> \land <var:q2> = <var:T> ^ <nat:2> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> \} $ as the condition $ \{ <var:w> = <var:T> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> \} $ . This is ensured by the assignment rule of usual Hoare reasoning . Moving on to the next step , the code defining $ <var:f> + <var:q0$ to $ <var:f>$ . This statement redefines $ \{ <var:w> = <var:T> \land <var:q0> = <nat:4> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> \} $ into the postcondition $ \{ <var:w> = <var:T> \land <var:f> = <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Definition <def:poly> := <var:q1> := <var:w> ; <var:q2> := <var:q1> * <var:w> ; <var:q3> := <var:q2> * <var:w> ; <var:q4> := <var:q3> * <var:w> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:4> ; <var:q3> := <var:q3> * <nat:2> ; <var:q4> := <var:q4> * <nat:2> ; <var:f> := <var:q4> <var:f> := <var:f> + <var:q3> <var:f> := <var:f> + <var:q1> <var:f> := <var:f> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:w> = <var:T> }} <def:poly> {{ <var:f> = <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <var:T> /\ <var:q2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <var:T> ^ <nat:3> /\ <var:q4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <var:T> ^ <nat:3> /\ <var:q4> = <var:T> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <nat:4> * <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <var:T> ^ <nat:3> /\ <var:q4> = <var:T> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <nat:4> * <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:q4> = <var:T> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <nat:4> * <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:q4> = <nat:2> * <var:T> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <nat:4> * <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:q0> = <nat:4> /\ <var:f> = <nat:2> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q1> = <nat:4> * <var:T> /\ <var:q2> = <var:T> ^ <nat:2> /\ <var:q0> = <nat:4> /\ <var:f> = <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:q0> = <nat:4> /\ <var:f> = <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:f> = <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 