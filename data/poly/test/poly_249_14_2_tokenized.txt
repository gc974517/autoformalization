\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:P> = <var:E> $ prior to evaluating this segment of code , then we see $ <var:W> = <nat:2> \cdot <var:E> ^ <nat:13> + <nat:3> \cdot <var:E> ^ <nat:11> + <nat:2> \cdot <var:E> ^ <nat:10> + <nat:2> \cdot <var:E> ^ <nat:9> + <nat:1> \cdot <var:E> ^ <nat:8> + <nat:3> \cdot <var:E> ^ <nat:6> + <nat:1> \cdot <var:E> ^ <nat:5> + <nat:4> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:2> $ when program is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:E> \} \\ <var:W> := <nat:2> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \} \end{eqnarray} Furthering the execution of this program returns : \begin{eqnarray} <var:W> := <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> + \} \\ <var:W> := <nat:3> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \} \\ <var:W> := <nat:2> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> \} \\ <var:W> := <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + \} \\ <var:W> := <nat:3> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:7> + <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:8> + <nat:3> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> + <nat:1> \} \end{eqnarray} Advancing the evaluation of our set of instructions yields : \begin{eqnarray} <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:9> + <nat:3> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:10> + <nat:3> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:1> \} \\ <var:W> := <nat:2> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:11> + <nat:3> \times <var:E> ^ <nat:9> + <nat:2> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:12> + <nat:3> \times <var:E> ^ <nat:10> + <nat:2> \times <var:E> ^ <nat:9> + <nat:2> \times <var:E> ^ <nat:8> + <nat:1> \times <var:E> ^ <nat:7> + <nat:3> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:P> \\ \{ <var:P> = <var:E> \land <var:W> = <nat:2> \times <var:E> ^ <nat:13> + <nat:3> \times <var:E> ^ <nat:11> + <nat:2> \times <var:E> ^ <nat:10> + <nat:2> \times <var:E> ^ <nat:9> + <nat:1> \times <var:E> ^ <nat:8> + <nat:3> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> \} \end{eqnarray} Using Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> ; <var:W> := <nat:2> + <var:W> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <def:poly> {{ <var:W> = <nat:2> * <var:E> ^ <nat:13> + <nat:3> * <var:E> ^ <nat:11> + <nat:2> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:12> + <nat:3> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:W> = <nat:2> * <var:E> ^ <nat:13> + <nat:3> * <var:E> ^ <nat:11> + <nat:2> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 