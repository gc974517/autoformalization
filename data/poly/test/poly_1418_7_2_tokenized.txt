\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:T> := <nat:2> ; <var:T> := <nat:3> + <var:T> * <var:u> ; <var:T> := <nat:2> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> ; <var:T> := <nat:2> + <var:T> * <var:u> ; <var:T> := <nat:3> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> \end{verbatim} Assume it to be that $ <var:u> = <var:I> $ prior to executing our code segment , it holds that $ <var:T> = <nat:2> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be done by this decorated program . \begin{eqnarray} \{ <var:u> = <var:I> \} \\ <var:T> := <nat:2> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \} \\ <var:T> := <nat:3> + <var:T> * <var:u> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> + <nat:3> \} \\ <var:T> := <nat:2> + <var:T> * <var:u> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:2> \} \\ <var:T> := <nat:4> + <var:T> * <var:u> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> \} \\ <var:T> := <nat:2> + <var:T> * <var:u> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} \\ <var:T> := <nat:3> + <var:T> * <var:u> ; \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> \} \\ <var:T> := <nat:4> + <var:T> * <var:u> \\ \{ <var:u> = <var:I> \land <var:T> = <nat:2> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:u> = <var:I> }} <var:T> := <nat:2> ; <var:T> := <nat:3> + <var:T> * <var:u> ; <var:T> := <nat:2> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> ; <var:T> := <nat:2> + <var:T> * <var:u> ; <var:T> := <nat:3> + <var:T> * <var:u> ; <var:T> := <nat:4> + <var:T> * <var:u> {{ <var:T> = <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:I> /\ <var:T> = <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 