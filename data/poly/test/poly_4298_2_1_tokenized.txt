\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:H0> := <nat:5> ; <var:N> := <var:H0> \end{verbatim} Allow $ <var:a> = <var:I> $ given some whole numbers $ <var:I> $ before evaluating our list of instructions , it holds that we have $ <var:N> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:I> \} \\ <var:H0> := <nat:5> ; \\ \{ <var:a> = <var:I> \land <var:H0> = <nat:5> \} \\ <var:N> := <var:H0> \\ \{ <var:a> = <var:I> \land <var:N> = <nat:5> \} \end{eqnarray} The application of usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:a> = <var:I> }} <var:H0> := <nat:5> ; <var:N> := <var:H0> {{ <var:N> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:N> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 