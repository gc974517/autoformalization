\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:e1> := <var:t> ; <var:e2> := <var:e1> * <var:t> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:h> := <var:e2> <var:h> := <var:h> + <var:e1> <var:h> := <var:h> + <var:e0> \end{verbatim} Assuming , with some $ <var:b> $ , that we have $ <var:t> = <var:b> $ before executing the series of commands then we see $ <var:h> = <nat:2> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:3> $ once code segment terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:b> \} \\ <var:e1> := <var:t> ; \\ \{ <var:t> = <var:b> \land <var:e1> = <var:b> \} \\ <var:e2> := <var:e1> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:t> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:e1> := <var:e1> * <nat:2> ; \\ \{ <var:t> = <var:b> \land <var:e1> = <nat:2> \cdot <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:e2> := <var:e2> * <nat:2> ; \\ \{ <var:t> = <var:b> \land <var:e1> = <nat:2> \cdot <var:b> \land <var:e2> = <nat:2> \cdot <var:b> ^ <nat:2> \land <var:e0> = <nat:3> \} \\ <var:h> := <var:e2> \\ \{ <var:t> = <var:b> \land <var:e1> = <nat:2> \cdot <var:b> \land <var:e0> = <nat:3> \land <var:h> = <nat:2> \cdot <var:b> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:e1> \\ \{ <var:t> = <var:b> \land <var:e0> = <nat:3> \land <var:h> = <nat:2> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} \\ <var:h> := <var:h> + <var:e0> \\ \{ <var:t> = <var:b> \land <var:h> = <nat:2> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:t> = <var:b> }} <var:e1> := <var:t> ; <var:e2> := <var:e1> * <var:t> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:h> := <var:e2> <var:h> := <var:h> + <var:e1> <var:h> := <var:h> + <var:e0> {{ <var:h> = <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <var:b> /\ <var:e2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <var:b> /\ <var:e2> = <var:b> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <nat:2> * <var:b> /\ <var:e2> = <var:b> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <nat:2> * <var:b> /\ <var:e2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e1> = <nat:2> * <var:b> /\ <var:e0> = <nat:3> /\ <var:h> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:e0> = <nat:3> /\ <var:h> = <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:h> = <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 