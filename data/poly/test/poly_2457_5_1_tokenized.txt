\begin{document} \begin{theorem} Define the following program in \emph{Imp} as \begin{verbatim} <var:y1> := <var:X> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> \end{verbatim} Allow it to be that $ <var:X> = <var:E> $ ( for all positive integer coefficients $ <var:E> $ ) before executing this list of commands it holds that $ <var:l> = <nat:8> \times <var:E> + <nat:1> $ after series of instructions has executed . \end{theorem} \begin{proof} The course of logic for our set of commands is evident by typical Hoare techniques . Looking at the subsequent steps in the list of commands , we have \verb | { <var:X> = <var:E> } <var:y1> := <var:X> { <var:X> = <var:E> \land <var:y1> = <var:E> } | and \verb | { <var:X> = <var:E> \land <var:y1> = <var:E> } <var:y0> := <nat:1> { <var:X> = <var:E> \land <var:y1> = <var:E> \land <var:y0> = <nat:1> } | . This is sound with the variable binding law given by standard Hoare techniques . Advancing on , we see \verb | { <var:X> = <var:E> } <var:y1> := <var:X> { <var:X> = <var:E> \land <var:y1> = <var:E> } | and \verb | { <var:X> = <var:E> \land <var:y1> = <var:E> } <var:y0> := <nat:1> { <var:X> = <var:E> \land <var:y1> = <var:E> \land <var:y0> = <nat:1> } | . Observing the subsequent statement found in our series of commands , \verb | { <var:X> = <var:E> } <var:y1> := <var:X> { <var:X> = <var:E> \land <var:y1> = <var:E> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:X> = <var:E> }} <var:y1> := <var:X> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> {{ <var:l> = <nat:8> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:y1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:y1> = <var:E> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:y1> = <nat:8> * <var:E> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:y0> = <nat:1> /\ <var:l> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:l> = <nat:8> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 