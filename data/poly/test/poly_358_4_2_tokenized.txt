\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <nat:3> + <var:A> * <var:v> ; <var:A> := <var:A> * <var:v> ; <var:A> := <nat:2> + <var:A> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assuming $ <var:v> = <var:K> $ prior to the evaluation of our set of instructions , it follows that we have $ <var:A> = <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> $ once set of commands terminates . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be shown by usual Hoare techniques . Moving on , the variable assignmet command \verb | <var:A> := <nat:3> ; | . This forwards $ \{ <var:v> = <var:K> \} $ into $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \} $ . This is deduced using the assignment inference rule defined in Hoare logic . Stepping forward , we see the variable update command \verb | <var:A> := <nat:3> + <var:A> * <var:v> ; | . This forwards $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \} $ to the postcondition $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \cdot <var:K> + <nat:3> \} $ . Moving onward , we see the environment update command letting $ <var:A> * <var:v> $ toward $ <var:A>$ . This takes the condition $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \cdot <var:K> + <nat:3> \} $ into the condition $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + \} $ . This is ensured with the assignment scheme in Hoare logic . After , we see the variable update code \verb | <var:A> := <nat:2> + <var:A> * <var:v> | . This code forwards the condition $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + \} $ into the condition $ \{ <var:v> = <var:K> \land <var:A> = <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \} $ . This is shown to be logically sound with the assignment law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:3> ; <var:A> := <nat:3> + <var:A> * <var:v> ; <var:A> := <var:A> * <var:v> ; <var:A> := <nat:2> + <var:A> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:v> = <var:K> }} <def:poly> {{ <var:A> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:A> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:A> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:A> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 