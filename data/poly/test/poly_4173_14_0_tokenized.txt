\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:4> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:i> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:i> ; <var:r2> := <var:r2> * <var:i> ; <var:r3> := <nat:6> ; <var:r3> := <var:r3> * <var:i> ; <var:r3> := <var:r3> * <var:i> ; <var:r3> := <var:r3> * <var:i> ; <var:m> := <var:r3> ; <var:m> := <var:m> + <var:r2> ; <var:m> := <var:m> + <var:r1> ; <var:m> := <var:m> + <var:r0> \end{verbatim} Allow it to hold that $ <var:i> = <var:c> $ ahead of running this series of commands it follows that we have $ <var:m> = <nat:6> \cdot <var:c> ^ <nat:3> + <nat:6> \cdot <var:c> ^ <nat:2> + <nat:6> \cdot <var:c> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be accomplished by standard Hoare techniques . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:c> \} & <var:r0> := <nat:4> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} & <var:r1> := <nat:6> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \} & <var:r1> := <var:r1> * <var:i> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \} & <var:r2> := <nat:6> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \} & <var:r2> := <var:r2> * <var:i> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \times <var:c> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \times <var:c> \} & <var:r2> := <var:r2> * <var:i> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \times <var:c> ^ <nat:2> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \times <var:c> ^ <nat:2> \} & <var:r3> := <nat:6> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \land <var:r2> = <nat:6> \times <var:c> ^ <nat:2> \land <var:r3> = <nat:6> \} \end{tabular} Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:c> \} & <var:r0> := <nat:4> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} & <var:r1> := <nat:6> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \} & <var:r1> := <var:r1> * <var:i> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \times <var:c> \} \end{tabular} This is sound with the environment update scheme obtained from standard Hoare techniques . Considering the next command contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:i> = <var:c> \} & <var:r0> := <nat:4> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} \end{tabular} Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:i> = <var:c> \} & <var:r0> := <nat:4> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} \\ \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} & <var:r1> := <nat:6> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \land <var:r1> = <nat:6> \} \end{tabular} This is guaranteed by the variable binding rule from typical Hoare techniques . Further , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:c> \} & <var:r0> := <nat:4> & \{ <var:i> = <var:c> \land <var:r0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:i> = <var:c> }} <var:r0> := <nat:4> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:i> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:i> ; <var:r2> := <var:r2> * <var:i> ; <var:r3> := <nat:6> ; <var:r3> := <var:r3> * <var:i> ; <var:r3> := <var:r3> * <var:i> ; <var:r3> := <var:r3> * <var:i> ; <var:m> := <var:r3> ; <var:m> := <var:m> + <var:r2> ; <var:m> := <var:m> + <var:r1> ; <var:m> := <var:m> + <var:r0> {{ <var:m> = <nat:6> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:r3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:r2> = <nat:6> * <var:c> ^ <nat:2> /\ <var:m> = <nat:6> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:6> * <var:c> /\ <var:m> = <nat:6> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:r0> = <nat:4> /\ <var:m> = <nat:6> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:m> = <nat:6> * <var:c> ^ <nat:3> + <nat:6> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 