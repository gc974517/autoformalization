\begin{document} \begin{theorem} Define a program in \emph{Imp} : \begin{verbatim} <var:k1> := <var:A> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:t> := <var:k1> <var:t> := <var:t> + <var:k0> \end{verbatim} Allow --- given positive integer coefficients $ <var:J> $ --- it to hold that $ <var:A> = <var:J> $ ahead of interpreting the set of instructions it must be that $ <var:t> = <nat:2> * <var:J> + <nat:2> $ once code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:J> \} \\ <var:k1> := <var:A> ; \\ \{ <var:A> = <var:J> \land <var:k1> = <var:J> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:A> = <var:J> \land <var:k1> = <var:J> \land <var:k0> = <nat:2> \} \\ <var:k1> := <var:k1> * <nat:2> ; \\ \{ <var:A> = <var:J> \land <var:k1> = <nat:2> \cdot <var:J> \land <var:k0> = <nat:2> \} \end{eqnarray} Furthering the evaluation of this code returns : \begin{eqnarray} <var:t> := <var:k1> \\ \{ <var:A> = <var:J> \land <var:k0> = <nat:2> \land <var:t> = <nat:2> \cdot <var:J> \} \\ <var:t> := <var:t> + <var:k0> \\ \{ <var:A> = <var:J> \land <var:t> = <nat:2> \cdot <var:J> + <nat:2> \} \end{eqnarray} Using typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:A> = <var:J> }} <var:k1> := <var:A> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:t> := <var:k1> <var:t> := <var:t> + <var:k0> {{ <var:t> = <nat:2> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:k1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:k1> = <var:J> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:k1> = <nat:2> * <var:J> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:k0> = <nat:2> /\ <var:t> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:t> = <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 