\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:3> ; <var:C> := <nat:4> + <var:C> * <var:H> ; <var:C> := <nat:2> + <var:C> * <var:H> ; <var:C> := <nat:4> + <var:C> * <var:H> ; <var:C> := <nat:1> + <var:C> * <var:H> ; <var:C> := <nat:3> + <var:C> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:H> = <var:b> $ before running our list of commands it follows that $ <var:C> = <nat:3> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands can be done using standard Hoare reasoning . Focusing on the next piece of code found in the list of instructions , the environment update code \verb | <var:C> := <nat:3> ; | . This takes $ \{ <var:H> = <var:b> \} $ toward $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \} $ . This is known to be sound with the assignment scheme given by Hoare reasoning . Taking a look at the proceeding bit of code seen in the code , we have the variable assignmet statement giving $ <nat:4> + <var:C> * <var:H> $ as $ <var:C>$ . This code advances the condition $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \} $ into the postcondition $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> + <nat:4> \} $ . Going forward , we see the environment update code assigning $ <nat:2> + <var:C> * <var:H> $ as $ <var:C>$ . This code takes the precondition $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> + <nat:4> \} $ into the postcondition $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:2> \} $ . This is guaranteed with the assignment law from typical Hoare reasoning . Immediately following , we see the variable binding command \verb | <var:C> := <nat:4> + <var:C> * <var:H> ; | . This transfers $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:2> \} $ toward $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:4> \} $ . Moving on to the next step , the binding command \verb | <var:C> := <nat:1> + <var:C> * <var:H> ; | . This forwards $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:4> \} $ toward $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:4> + <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:1> \} $ . This is sound with the assignment law defined in typical Hoare techniques . Stepping through , we see the line \verb | <var:C> := <nat:3> + <var:C> * <var:H> | . This moves the precondition $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:4> + <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:1> \} $ toward $ \{ <var:H> = <var:b> \land <var:C> = <nat:3> \times <var:b> ^ <nat:5> + <nat:4> \times <var:b> ^ <nat:4> + <nat:2> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:3> \} $ . This is shown to be logically sound by the assignment law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:3> ; <var:C> := <nat:4> + <var:C> * <var:H> ; <var:C> := <nat:2> + <var:C> * <var:H> ; <var:C> := <nat:4> + <var:C> * <var:H> ; <var:C> := <nat:1> + <var:C> * <var:H> ; <var:C> := <nat:3> + <var:C> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:H> = <var:b> }} <def:poly> {{ <var:C> = <nat:3> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:C> = <nat:3> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 