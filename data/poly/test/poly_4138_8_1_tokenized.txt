\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:K> ; <var:Y2> := <var:Y1> * <var:K> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:e> := <var:Y2> <var:e> := <var:e> + <var:Y1> <var:e> := <var:e> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allowing ( given all positive integer coefficients $ <var:I> $ ) it to hold that $ <var:K> = <var:I> $ before the evaluation of our code segment it holds that we see $ <var:e> = <nat:5> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:9> $ once set of commands exits . \end{theorem} \begin{proof} Applying standard Hoare techniques produces : \begin{eqnarray} \{ <var:K> = <var:I> \} \\ <var:Y1> := <var:K> ; \\ \{ <var:K> = <var:I> \land <var:Y1> = <var:I> \} \\ <var:Y2> := <var:Y1> * <var:K> ; \\ \{ <var:K> = <var:I> \land <var:Y1> = <var:I> \land <var:Y2> = <var:I> ^ <nat:2> \} \\ <var:Y0> := <nat:9> ; \\ \{ <var:K> = <var:I> \land <var:Y1> = <var:I> \land <var:Y2> = <var:I> ^ <nat:2> \land <var:Y0> = <nat:9> \} \\ <var:Y1> := <var:Y1> * <nat:9> ; \\ \{ <var:K> = <var:I> \land <var:Y1> = <nat:9> \cdot <var:I> \land <var:Y2> = <var:I> ^ <nat:2> \land <var:Y0> = <nat:9> \} \\ <var:Y2> := <var:Y2> * <nat:5> ; \\ \{ <var:K> = <var:I> \land <var:Y1> = <nat:9> \cdot <var:I> \land <var:Y2> = <nat:5> \cdot <var:I> ^ <nat:2> \land <var:Y0> = <nat:9> \} \\ <var:e> := <var:Y2> \\ \{ <var:K> = <var:I> \land <var:Y1> = <nat:9> \cdot <var:I> \land <var:Y0> = <nat:9> \land <var:e> = <nat:5> \cdot <var:I> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:Y1> \\ \{ <var:K> = <var:I> \land <var:Y0> = <nat:9> \land <var:e> = <nat:5> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} \\ <var:e> := <var:e> + <var:Y0> \\ \{ <var:K> = <var:I> \land <var:e> = <nat:5> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:9> \} \end{eqnarray} Thus , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:K> ; <var:Y2> := <var:Y1> * <var:K> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:e> := <var:Y2> <var:e> := <var:e> + <var:Y1> <var:e> := <var:e> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:e> = <nat:5> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <var:I> /\ <var:Y2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <var:I> /\ <var:Y2> = <var:I> ^ <nat:2> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <nat:9> * <var:I> /\ <var:Y2> = <var:I> ^ <nat:2> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <nat:9> * <var:I> /\ <var:Y2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y1> = <nat:9> * <var:I> /\ <var:Y0> = <nat:9> /\ <var:e> = <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:Y0> = <nat:9> /\ <var:e> = <nat:5> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:e> = <nat:5> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 