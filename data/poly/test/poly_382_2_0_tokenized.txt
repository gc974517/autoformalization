\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:R0> := <nat:3> ; <var:W> := <var:R0> \end{verbatim} Allowing it to hold that $ <var:P> = <var:o> $ before running the set of instructions it must be that $ <var:W> = <nat:3> $ once list of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:o> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:P> = <var:o> \land <var:R0> = <nat:3> \} \\ <var:W> := <var:R0> \\ \{ <var:P> = <var:o> \land <var:W> = <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <var:R0> := <nat:3> ; <var:W> := <var:R0> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 