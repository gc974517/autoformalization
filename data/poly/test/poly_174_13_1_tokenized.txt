\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:Q> ; <var:K2> := <var:K1> * <var:Q> ; <var:K3> := <var:K2> * <var:Q> ; <var:K4> := <var:K3> * <var:Q> ; <var:K5> := <var:K4> * <var:Q> ; <var:K0> := <nat:6> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:3> ; <var:K5> := <var:K5> * <nat:4> ; <var:J> := <var:K5> <var:J> := <var:J> + <var:K4> <var:J> := <var:J> + <var:K3> <var:J> := <var:J> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Assume it to hold that $ <var:Q> = <var:d> $ ahead of running our code , it must be that we have $ <var:J> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:Q> = <var:d> \} \\ <var:K1> := <var:Q> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \} \\ <var:K2> := <var:K1> * <var:Q> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:Q> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <var:d> ^ <nat:3> \} \\ <var:K4> := <var:K3> * <var:Q> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <var:d> ^ <nat:3> \land <var:K4> = <var:d> ^ <nat:4> \} \\ <var:K5> := <var:K4> * <var:Q> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <var:d> ^ <nat:3> \land <var:K4> = <var:d> ^ <nat:4> \land <var:K5> = <var:d> ^ <nat:5> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <var:d> ^ <nat:3> \land <var:K4> = <var:d> ^ <nat:4> \land <var:K5> = <var:d> ^ <nat:5> \land <var:K0> = <nat:6> \} \\ <var:K3> := <var:K3> * <nat:4> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <nat:4> * <var:d> ^ <nat:3> \land <var:K4> = <var:d> ^ <nat:4> \land <var:K5> = <var:d> ^ <nat:5> \land <var:K0> = <nat:6> \} \\ <var:K4> := <var:K4> * <nat:3> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <nat:4> * <var:d> ^ <nat:3> \land <var:K4> = <nat:3> * <var:d> ^ <nat:4> \land <var:K5> = <var:d> ^ <nat:5> \land <var:K0> = <nat:6> \} \\ <var:K5> := <var:K5> * <nat:4> ; \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <nat:4> * <var:d> ^ <nat:3> \land <var:K4> = <nat:3> * <var:d> ^ <nat:4> \land <var:K5> = <nat:4> * <var:d> ^ <nat:5> \land <var:K0> = <nat:6> \} \\ <var:J> := <var:K5> \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <nat:4> * <var:d> ^ <nat:3> \land <var:K4> = <nat:3> * <var:d> ^ <nat:4> \land <var:K0> = <nat:6> \land <var:J> = <nat:4> * <var:d> ^ <nat:5> \} \\ <var:J> := <var:J> + <var:K4> \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K3> = <nat:4> * <var:d> ^ <nat:3> \land <var:K0> = <nat:6> \land <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> \} \\ <var:J> := <var:J> + <var:K3> \\ \{ <var:Q> = <var:d> \land <var:K1> = <var:d> \land <var:K2> = <var:d> ^ <nat:2> \land <var:K0> = <nat:6> \land <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:K0> \\ \{ <var:Q> = <var:d> \land <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:6> \} \end{eqnarray} Given the above , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Definition <var:K5> : string := " <var:K5> " . Definition <def:poly> := <var:K1> := <var:Q> ; <var:K2> := <var:K1> * <var:Q> ; <var:K3> := <var:K2> * <var:Q> ; <var:K4> := <var:K3> * <var:Q> ; <var:K5> := <var:K4> * <var:Q> ; <var:K0> := <nat:6> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:3> ; <var:K5> := <var:K5> * <nat:4> ; <var:J> := <var:K5> <var:J> := <var:J> + <var:K4> <var:J> := <var:J> + <var:K3> <var:J> := <var:J> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Q> = <var:d> }} <def:poly> {{ <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <var:d> ^ <nat:3> /\ <var:K4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <var:d> ^ <nat:3> /\ <var:K4> = <var:d> ^ <nat:4> /\ <var:K5> = <var:d> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <var:d> ^ <nat:3> /\ <var:K4> = <var:d> ^ <nat:4> /\ <var:K5> = <var:d> ^ <nat:5> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:K4> = <var:d> ^ <nat:4> /\ <var:K5> = <var:d> ^ <nat:5> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:K4> = <nat:3> * <var:d> ^ <nat:4> /\ <var:K5> = <var:d> ^ <nat:5> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:K4> = <nat:3> * <var:d> ^ <nat:4> /\ <var:K5> = <nat:4> * <var:d> ^ <nat:5> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:K4> = <nat:3> * <var:d> ^ <nat:4> /\ <var:K0> = <nat:6> /\ <var:J> = <nat:4> * <var:d> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:d> ^ <nat:3> /\ <var:K0> = <nat:6> /\ <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:K1> = <var:d> /\ <var:K2> = <var:d> ^ <nat:2> /\ <var:K0> = <nat:6> /\ <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:J> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 