\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:z> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Allowing assuming some whole numbers $ <var:m> $ it to hold that $ <var:D> = <var:m> $ before the execution of our list of instructions it holds that we see $ <var:z> = <nat:1> $ when series of instructions finishes . \end{theorem} \begin{proof} Utilizing Hoare logic yields : \begin{eqnarray} \{ <var:D> = <var:m> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:D> = <var:m> \land <var:h0> = <nat:1> \} \\ <var:z> := <var:h0> \\ \{ <var:D> = <var:m> \land <var:z> = <nat:1> \} \end{eqnarray} As a consequence , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:z> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:D> = <var:m> }} <def:poly> {{ <var:z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 