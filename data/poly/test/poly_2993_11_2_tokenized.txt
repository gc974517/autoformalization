\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:G> ; <var:w> := <var:w> * <var:G> ; <var:w> := <nat:2> + <var:w> * <var:G> ; <var:w> := <var:w> * <var:G> ; <var:w> := <nat:2> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:1> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:1> + <var:w> * <var:G> \end{verbatim} Allowing it to hold that $ <var:G> = <var:K> $ before the execution of the program , it must be that we see $ <var:w> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:K> \} \\ <var:w> := <nat:2> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> + <nat:4> \} \end{eqnarray} Advancing running the series of commands returns : \begin{eqnarray} <var:w> := <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + \} \\ <var:w> := <nat:2> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:2> \} \\ <var:w> := <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + \} \\ <var:w> := <nat:2> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + <nat:3> \} \\ <var:w> := <nat:3> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> \} \\ <var:w> := <nat:1> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> \} \end{eqnarray} Furthering executing this set of commands gives us : \begin{eqnarray} <var:w> := <nat:1> + <var:w> * <var:G> \\ \{ <var:G> = <var:K> \land <var:w> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:G> = <var:K> }} <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:G> ; <var:w> := <var:w> * <var:G> ; <var:w> := <nat:2> + <var:w> * <var:G> ; <var:w> := <var:w> * <var:G> ; <var:w> := <nat:2> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:1> + <var:w> * <var:G> ; <var:w> := <nat:3> + <var:w> * <var:G> ; <var:w> := <nat:1> + <var:w> * <var:G> {{ <var:w> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:9> + <nat:4> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:2> * <var:K> ^ <nat:10> + <nat:4> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 