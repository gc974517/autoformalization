\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:v> := <var:r0> \end{verbatim} Allowing --- assuming some positive integers $ <var:A> $ --- that $ <var:x> = <var:A> $ ahead of executing the set of commands it follows that $ <var:v> = <nat:9> $ when set of commands is done executing . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:x> = <var:A> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:x> = <var:A> \land <var:r0> = <nat:9> \} \\ <var:v> := <var:r0> \\ \{ <var:x> = <var:A> \land <var:v> = <nat:9> \} \end{eqnarray} Given the preceding argument , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:x> = <var:A> }} <var:r0> := <nat:9> ; <var:v> := <var:r0> {{ <var:v> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:A> /\ <var:v> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 