\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:N> ; <var:d2> := <var:d1> * <var:N> ; <var:d3> := <var:d2> * <var:N> ; <var:d4> := <var:d3> * <var:N> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:1> ; <var:d4> := <var:d4> * <nat:5> ; <var:b> := <var:d4> <var:b> := <var:b> + <var:d2> <var:b> := <var:b> + <var:d1> <var:b> := <var:b> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:N> = <var:T> $ before the evaluation of our series of commands it holds that we have $ <var:b> = <nat:5> \cdot <var:T> ^ <nat:4> + <nat:1> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:6> $ after series of instructions has terminated . \end{theorem} \begin{proof} The proof of our series of commands can be shown with standard Hoare reasoning . Now , we have \begin{eqnarray} \{ <var:N> = <var:T> \} \, <var:d1> := <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \} \, <var:d2> := <var:d1> * <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \} \, <var:d3> := <var:d2> * <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \} \, <var:d4> := <var:d3> * <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \} \, <var:d0> := <nat:6> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \, <var:d1> := <var:d1> * <nat:3> \, \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \, <var:d2> := <var:d2> * <nat:1> \, \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \, <var:d4> := <var:d4> * <nat:5> \, \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <nat:5> \times <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d4> = <nat:5> \times <var:T> ^ <nat:4> \land <var:d0> = <nat:6> \} \, <var:b> := <var:d4\, \{ <var:N> = <var:T> \land <var:d1> = <nat:3> \times <var:T> \land <var:d2> = <nat:1> \times <var:T> ^ <nat:2> \land <var:d3> = <var:T> ^ <nat:3> \land <var:d0> = <nat:6> \land <var:b> = <nat:5> \times <var:T> ^ <nat:4> \} \end{eqnarray} This is sound with the assignment inference rule given in usual Hoare logic . Going forward , \begin{eqnarray} \{ <var:N> = <var:T> \} \, <var:d1> := <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \} \end{eqnarray} This is shown using the binding inference rule from typical Hoare logic . Focusing on the subsequent pieces of code contained in our set of commands , \begin{eqnarray} \{ <var:N> = <var:T> \} \, <var:d1> := <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \} \\ \{ <var:N> = <var:T> \land <var:d1> = <var:T> \} \, <var:d2> := <var:d1> * <var:N> \, \{ <var:N> = <var:T> \land <var:d1> = <var:T> \land <var:d2> = <var:T> ^ <nat:2> \} \end{eqnarray} This is ensured using the variable binding rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:N> ; <var:d2> := <var:d1> * <var:N> ; <var:d3> := <var:d2> * <var:N> ; <var:d4> := <var:d3> * <var:N> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:1> ; <var:d4> := <var:d4> * <nat:5> ; <var:b> := <var:d4> <var:b> := <var:b> + <var:d2> <var:b> := <var:b> + <var:d1> <var:b> := <var:b> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:N> = <var:T> }} <def:poly> {{ <var:b> = <nat:5> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <var:T> /\ <var:d2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <var:T> /\ <var:d2> = <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <var:T> /\ <var:d2> = <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <var:T> /\ <var:d2> = <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d4> = <var:T> ^ <nat:4> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <nat:3> * <var:T> /\ <var:d2> = <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d4> = <var:T> ^ <nat:4> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <nat:3> * <var:T> /\ <var:d2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d4> = <var:T> ^ <nat:4> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <nat:3> * <var:T> /\ <var:d2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d4> = <nat:5> * <var:T> ^ <nat:4> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <nat:3> * <var:T> /\ <var:d2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:d3> = <var:T> ^ <nat:3> /\ <var:d0> = <nat:6> /\ <var:b> = <nat:5> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d1> = <nat:3> * <var:T> /\ <var:d0> = <nat:6> /\ <var:b> = <nat:5> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:d0> = <nat:6> /\ <var:b> = <nat:5> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:b> = <nat:5> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 