\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:7> ; <var:Q> := <var:m0> \end{verbatim} Allow that $ <var:h> = <var:V> $ before the execution of the set of commands , it follows that we have $ <var:Q> = <nat:7> $ when code segment has terminated . \end{theorem} \begin{proof} The flow of logic for this code segment is shown with Hoare techniques . Now , \verb | { <var:h> = <var:V> } <var:m0> := <nat:7> { <var:h> = <var:V> \land <var:m0> = <nat:7> } | . This is given by the variable assignmet inference rule given by standard Hoare techniques . Following , we see \verb | { <var:h> = <var:V> } <var:m0> := <nat:7> { <var:h> = <var:V> \land <var:m0> = <nat:7> } | . This is rigorously given using the environment update law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:m0> := <nat:7> ; <var:Q> := <var:m0> {{ <var:Q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:Q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 