\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:n> ; <var:B2> := <var:B1> * <var:n> ; <var:B3> := <var:B2> * <var:n> ; <var:B0> := <nat:7> ; <var:B2> := <var:B2> * <nat:7> ; <var:B3> := <var:B3> * <nat:5> ; <var:R> := <var:B3> <var:R> := <var:R> + <var:B2> <var:R> := <var:R> + <var:B0> \end{verbatim} Given $ <var:n> = <var:x> $ before executing the code segment , then we see $ <var:R> = <nat:5> * <var:x> ^ <nat:3> + <nat:7> * <var:x> ^ <nat:2> + <nat:7> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for our program can be shown using Hoare logic . Observing the following step found in the series of instructions , the assignment statement binding $ <var:n> $ as $ <var:B1>$ . This forwards the condition $ \{ <var:n> = <var:x> \} $ to the postcondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \} $ . This is rigorously given with the assignment inference rule given in Hoare techniques . Moving onward , the variable update line binding $ <var:B1> * <var:n> $ into $ <var:B2>$ . This command moves $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \} $ into $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \} $ . Moving on to the following bit of code in our set of commands , we see the line \verb | <var:B3> := <var:B2> * <var:n> ; | . This advances the precondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \} $ as the postcondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \} $ . This is deduced with the assignment rule given in standard Hoare reasoning . Moving on to the next step , we see the assignment line binding $ <nat:7> $ into $ <var:B0>$ . This statement redefines $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \} $ toward $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ . This is guaranteed using the assignment rule of Hoare logic . Focusing on the next line of code contained in the series of instructions , the binding code \verb | <var:B2> := <var:B2> * <nat:7> ; | . This line transfers the condition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ to the condition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ . This is sound with the assignment inference rule defined in Hoare reasoning . Shifting focus toward the following statement seen in our set of commands , we have the variable update line binding $ <var:B3> * <nat:5> $ to $ <var:B3>$ . This forwards the condition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ into the postcondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B3> = <nat:5> \times <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ . Advancing to the upcoming bit of code contained in our program , we have the assignment code \verb | <var:R> := <var:B3> | . This forwards $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B3> = <nat:5> \times <var:x> ^ <nat:3> \land <var:B0> = <nat:7> \} $ to the condition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B0> = <nat:7> \land <var:R> = <nat:5> \times <var:x> ^ <nat:3> \} $ . This is deduced with the assignment scheme given by usual Hoare techniques . Advancing , we see the command \verb | <var:R> := <var:R> + <var:B2> | . This moves $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <nat:7> \times <var:x> ^ <nat:2> \land <var:B0> = <nat:7> \land <var:R> = <nat:5> \times <var:x> ^ <nat:3> \} $ as the postcondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B0> = <nat:7> \land <var:R> = <nat:5> \times <var:x> ^ <nat:3> + <nat:7> \times <var:x> ^ <nat:2> \} $ . Now , we have the variable binding command yielding $ <var:R> + <var:B0$ to $ <var:R>$ . This moves the precondition $ \{ <var:n> = <var:x> \land <var:B1> = <var:x> \land <var:B0> = <nat:7> \land <var:R> = <nat:5> \times <var:x> ^ <nat:3> + <nat:7> \times <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:n> = <var:x> \land <var:R> = <nat:5> \times <var:x> ^ <nat:3> + <nat:7> \times <var:x> ^ <nat:2> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:n> = <var:x> }} <var:B1> := <var:n> ; <var:B2> := <var:B1> * <var:n> ; <var:B3> := <var:B2> * <var:n> ; <var:B0> := <nat:7> ; <var:B2> := <var:B2> * <nat:7> ; <var:B3> := <var:B3> * <nat:5> ; <var:R> := <var:B3> <var:R> := <var:R> + <var:B2> <var:R> := <var:R> + <var:B0> {{ <var:R> = <nat:5> * <var:x> ^ <nat:3> + <nat:7> * <var:x> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <nat:7> * <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <nat:7> * <var:x> ^ <nat:2> /\ <var:B3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <nat:7> * <var:x> ^ <nat:2> /\ <var:B0> = <nat:7> /\ <var:R> = <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:B1> = <var:x> /\ <var:B0> = <nat:7> /\ <var:R> = <nat:5> * <var:x> ^ <nat:3> + <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:x> /\ <var:R> = <nat:5> * <var:x> ^ <nat:3> + <nat:7> * <var:x> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 