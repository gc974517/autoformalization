\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <nat:1> + <var:C> * <var:a> ; <var:C> := <nat:2> + <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <var:C> * <var:a> ; <var:C> := <nat:2> + <var:C> * <var:a> ; <var:C> := <nat:1> + <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> \end{verbatim} Assume that we have $ <var:a> = <var:Y> $ for any positive integers $ <var:Y> $ prior to running the code , it must be that we have $ <var:C> = <nat:2> \cdot <var:Y> ^ <nat:10> + <nat:3> \cdot <var:Y> ^ <nat:9> + <nat:1> \cdot <var:Y> ^ <nat:8> + <nat:2> \cdot <var:Y> ^ <nat:7> + <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands is clear with standard Hoare techniques . After , we have \verb | { <var:a> = <var:Y> } <var:C> := <nat:2> { <var:a> = <var:Y> \land <var:C> = <nat:2> } | , \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> } <var:C> := <nat:3> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> + <nat:3> } | , \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> + <nat:3> } <var:C> := <nat:1> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> } | and \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> } <var:C> := <nat:2> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> } | . This is sound by the law defined in usual Hoare techniques . Honing in on the proceeding statement seen in our set of instructions , we see \verb | { <var:a> = <var:Y> } <var:C> := <nat:2> { <var:a> = <var:Y> \land <var:C> = <nat:2> } | . This is sound with the variable update law defined in usual Hoare reasoning . Going forward , \verb | { <var:a> = <var:Y> } <var:C> := <nat:2> { <var:a> = <var:Y> \land <var:C> = <nat:2> } | , \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> } <var:C> := <nat:3> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> + <nat:3> } | , \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> + <nat:3> } <var:C> := <nat:1> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> } | and \verb | { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> } <var:C> := <nat:2> + <var:C> * <var:a> { <var:a> = <var:Y> \land <var:C> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> } | . Jumping to the upcoming line contained in our segment of code , \verb | { <var:a> = <var:Y> } <var:C> := <nat:2> { <var:a> = <var:Y> \land <var:C> = <nat:2> } | . This is sound using the variable binding law defined in Hoare logic . Moving forward , we see \verb | { <var:a> = <var:Y> } <var:C> := <nat:2> { <var:a> = <var:Y> \land <var:C> = <nat:2> } | . This is shown to be logically sound with the rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <nat:1> + <var:C> * <var:a> ; <var:C> := <nat:2> + <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> ; <var:C> := <var:C> * <var:a> ; <var:C> := <nat:2> + <var:C> * <var:a> ; <var:C> := <nat:1> + <var:C> * <var:a> ; <var:C> := <nat:3> + <var:C> * <var:a> {{ <var:C> = <nat:2> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:1> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:9> + <nat:3> * <var:Y> ^ <nat:8> + <nat:1> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:2> * <var:Y> ^ <nat:10> + <nat:3> * <var:Y> ^ <nat:9> + <nat:1> * <var:Y> ^ <nat:8> + <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 