\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:R1> := <var:C> ; <var:R2> := <var:R1> * <var:C> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:9> ; <var:o> := <var:R2> <var:o> := <var:o> + <var:R1> <var:o> := <var:o> + <var:R0> \end{verbatim} Given that we have $ <var:C> = <var:e> $ , given all positive integer coefficients $ <var:e> $ , prior to interpreting this code segment then we see $ <var:o> = <nat:9> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:3> $ when series of instructions has exited . \end{theorem} \begin{proof} The argument for the segment of code can be demonstrated with this decorated code segment . \begin{eqnarray} \{ <var:C> = <var:e> \} \\ <var:R1> := <var:C> ; \\ \{ <var:C> = <var:e> \land <var:R1> = <var:e> \} \\ <var:R2> := <var:R1> * <var:C> ; \\ \{ <var:C> = <var:e> \land <var:R1> = <var:e> \land <var:R2> = <var:e> ^ <nat:2> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:C> = <var:e> \land <var:R1> = <var:e> \land <var:R2> = <var:e> ^ <nat:2> \land <var:R0> = <nat:3> \} \\ <var:R1> := <var:R1> * <nat:2> ; \\ \{ <var:C> = <var:e> \land <var:R1> = <nat:2> \times <var:e> \land <var:R2> = <var:e> ^ <nat:2> \land <var:R0> = <nat:3> \} \\ <var:R2> := <var:R2> * <nat:9> ; \\ \{ <var:C> = <var:e> \land <var:R1> = <nat:2> \times <var:e> \land <var:R2> = <nat:9> \times <var:e> ^ <nat:2> \land <var:R0> = <nat:3> \} \\ <var:o> := <var:R2> \\ \{ <var:C> = <var:e> \land <var:R1> = <nat:2> \times <var:e> \land <var:R0> = <nat:3> \land <var:o> = <nat:9> \times <var:e> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:R1> \\ \{ <var:C> = <var:e> \land <var:R0> = <nat:3> \land <var:o> = <nat:9> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> \} \\ <var:o> := <var:o> + <var:R0> \\ \{ <var:C> = <var:e> \land <var:o> = <nat:9> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:3> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:C> = <var:e> }} <var:R1> := <var:C> ; <var:R2> := <var:R1> * <var:C> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:9> ; <var:o> := <var:R2> <var:o> := <var:o> + <var:R1> <var:o> := <var:o> + <var:R0> {{ <var:o> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <var:e> /\ <var:R2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <var:e> /\ <var:R2> = <var:e> ^ <nat:2> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <nat:2> * <var:e> /\ <var:R2> = <var:e> ^ <nat:2> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <nat:2> * <var:e> /\ <var:R2> = <nat:9> * <var:e> ^ <nat:2> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R1> = <nat:2> * <var:e> /\ <var:R0> = <nat:3> /\ <var:o> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:R0> = <nat:3> /\ <var:o> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:o> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 