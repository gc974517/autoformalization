\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:M1> := <var:e> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:X> := <var:M1> <var:X> := <var:X> + <var:M0> \end{verbatim} Allowing that $ <var:e> = <var:q> $ prior to the evaluation of our set of commands , it follows that we see $ <var:X> = <nat:1> \times <var:q> + <nat:2> $ once list of commands is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:e> = <var:q> \} \\ <var:M1> := <var:e> ; \\ \{ <var:e> = <var:q> \land <var:M1> = <var:q> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:e> = <var:q> \land <var:M1> = <var:q> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:1> ; \\ \{ <var:e> = <var:q> \land <var:M1> = <nat:1> \times <var:q> \land <var:M0> = <nat:2> \} \\ <var:X> := <var:M1> \\ \{ <var:e> = <var:q> \land <var:M0> = <nat:2> \land <var:X> = <nat:1> \times <var:q> \} \\ <var:X> := <var:X> + <var:M0> \\ \{ <var:e> = <var:q> \land <var:X> = <nat:1> \times <var:q> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:e> = <var:q> }} <var:M1> := <var:e> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:X> := <var:M1> <var:X> := <var:X> + <var:M0> {{ <var:X> = <nat:1> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:M1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:M1> = <var:q> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:M1> = <nat:1> * <var:q> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:M0> = <nat:2> /\ <var:X> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:X> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 