\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:A> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:A> ; <var:r2> := <var:r2> * <var:A> ; <var:J> := <var:r2> ; <var:J> := <var:J> + <var:r1> ; <var:J> := <var:J> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assuming that $ <var:A> = <var:g> $ prior to executing our program , it follows that $ <var:J> = <nat:2> \cdot <var:g> ^ <nat:2> + <nat:7> \cdot <var:g> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code can be done through typical Hoare logic . Moving forward to the following piece of code seen in our list of instructions , we have the assignment line assigning $ <nat:7> $ as $ <var:r0>$ . This line transfers the condition $ \{ <var:A> = <var:g> \} $ into $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \} $ . Keeping momentum , the binding line \verb | <var:r1> := <nat:7> ; | . This command forwards the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \} $ into the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \} $ . This is shown through the assignment rule defined in usual Hoare reasoning . After , we see the variable assignmet command \verb | <var:r1> := <var:r1> * <var:A> ; | . This redefines the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \} $ toward the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \} $ . This is known to be sound through the assignment inference rule defined by Hoare reasoning . Moving on to the upcoming statement contained in our set of commands , we see the command \verb | <var:r2> := <nat:2> ; | . This line transfers the precondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \} $ toward the postcondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \} $ . This is given with the assignment scheme given by standard Hoare logic . Next , we have the variable assignmet command \verb | <var:r2> := <var:r2> * <var:A> ; | . This takes the precondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \} $ toward $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \times <var:g> \} $ . Taking a look at the proceeding statement found in the code segment , we see the assignment statement \verb | <var:r2> := <var:r2> * <var:A> ; | . This advances the precondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \times <var:g> \} $ into the postcondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \times <var:g> ^ <nat:2> \} $ . Immediately after , we have the binding code \verb | <var:J> := <var:r2> ; | . This transfers the precondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:r2> = <nat:2> \times <var:g> ^ <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:J> = <nat:2> \times <var:g> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme of standard Hoare logic . Moving forward to the upcoming step in the list of commands , we have the assignment line giving $ <var:J> + <var:r1> $ as $ <var:J>$ . This transfers the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:r1> = <nat:7> \times <var:g> \land <var:J> = <nat:2> \times <var:g> ^ <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:J> = <nat:2> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> \} $ . Jumping to the next step in the set of instructions , we see the assignment line \verb | <var:J> := <var:J> + <var:r0> | . This advances the condition $ \{ <var:A> = <var:g> \land <var:r0> = <nat:7> \land <var:J> = <nat:2> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> \} $ to the postcondition $ \{ <var:A> = <var:g> \land <var:J> = <nat:2> \times <var:g> ^ <nat:2> + <nat:7> \times <var:g> + <nat:7> \} $ . This is shown by the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:A> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:A> ; <var:r2> := <var:r2> * <var:A> ; <var:J> := <var:r2> ; <var:J> := <var:J> + <var:r1> ; <var:J> := <var:J> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <def:poly> {{ <var:J> = <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> * <var:g> /\ <var:r2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> * <var:g> /\ <var:r2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> * <var:g> /\ <var:r2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:7> * <var:g> /\ <var:J> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r0> = <nat:7> /\ <var:J> = <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:J> = <nat:2> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 