\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:D1> := <var:f> ; <var:D2> := <var:D1> * <var:f> ; <var:D3> := <var:D2> * <var:f> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:2> ; <var:D3> := <var:D3> * <nat:5> ; <var:C> := <var:D3> <var:C> := <var:C> + <var:D2> <var:C> := <var:C> + <var:D1> <var:C> := <var:C> + <var:D0> \end{verbatim} Allow that $ <var:f> = <var:s> $ prior to interpreting our series of commands , it holds that we see $ <var:C> = <nat:5> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:9> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:s> \} \\ <var:D1> := <var:f> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <var:s> \} \\ <var:D2> := <var:D1> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <var:s> \land <var:D2> = <var:s> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:f> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <var:s> \land <var:D2> = <var:s> ^ <nat:2> \land <var:D3> = <var:s> ^ <nat:3> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <var:s> \land <var:D2> = <var:s> ^ <nat:2> \land <var:D3> = <var:s> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D1> := <var:D1> * <nat:9> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <nat:9> * <var:s> \land <var:D2> = <var:s> ^ <nat:2> \land <var:D3> = <var:s> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D2> := <var:D2> * <nat:2> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <nat:9> * <var:s> \land <var:D2> = <nat:2> * <var:s> ^ <nat:2> \land <var:D3> = <var:s> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D3> := <var:D3> * <nat:5> ; \\ \{ <var:f> = <var:s> \land <var:D1> = <nat:9> * <var:s> \land <var:D2> = <nat:2> * <var:s> ^ <nat:2> \land <var:D3> = <nat:5> * <var:s> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:C> := <var:D3> \\ \{ <var:f> = <var:s> \land <var:D1> = <nat:9> * <var:s> \land <var:D2> = <nat:2> * <var:s> ^ <nat:2> \land <var:D0> = <nat:3> \land <var:C> = <nat:5> * <var:s> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:D2> \\ \{ <var:f> = <var:s> \land <var:D1> = <nat:9> * <var:s> \land <var:D0> = <nat:3> \land <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:D1> \\ \{ <var:f> = <var:s> \land <var:D0> = <nat:3> \land <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:9> * <var:s> \} \\ <var:C> := <var:C> + <var:D0> \\ \{ <var:f> = <var:s> \land <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:3> \} \end{eqnarray} Hence , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:f> = <var:s> }} <var:D1> := <var:f> ; <var:D2> := <var:D1> * <var:f> ; <var:D3> := <var:D2> * <var:f> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:2> ; <var:D3> := <var:D3> * <nat:5> ; <var:C> := <var:D3> <var:C> := <var:C> + <var:D2> <var:C> := <var:C> + <var:D1> <var:C> := <var:C> + <var:D0> {{ <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <var:s> /\ <var:D2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <var:s> /\ <var:D2> = <var:s> ^ <nat:2> /\ <var:D3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <var:s> /\ <var:D2> = <var:s> ^ <nat:2> /\ <var:D3> = <var:s> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <nat:9> * <var:s> /\ <var:D2> = <var:s> ^ <nat:2> /\ <var:D3> = <var:s> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <nat:9> * <var:s> /\ <var:D2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:D3> = <var:s> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <nat:9> * <var:s> /\ <var:D2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:s> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <nat:9> * <var:s> /\ <var:D2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:C> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D1> = <nat:9> * <var:s> /\ <var:D0> = <nat:3> /\ <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:D0> = <nat:3> /\ <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:s> /\ <var:C> = <nat:5> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 