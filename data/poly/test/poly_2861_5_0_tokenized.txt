\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:d> ; <var:Q> := <var:s1> ; <var:Q> := <var:Q> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Assume with some natural numbers $ <var:u> $ it to be that $ <var:d> = <var:u> $ prior to the execution of our set of commands it must be that we see $ <var:Q> = <nat:9> \cdot <var:u> + <nat:4> $ after series of commands executes . \end{theorem} \begin{proof} The method of proof for our code is clear with Hoare logic . Considering the proceeding line of code in our list of commands , we have the assignment statement \verb | <var:s0> := <nat:4> ; | . This transfers $ \{ <var:d> = <var:u> \} $ to the postcondition $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \} $ . This is sound with the assignment rule given in standard Hoare techniques . After , we see the variable update line giving $ <nat:9> $ into $ <var:s1>$ . This statement forwards the precondition $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \} $ into the condition $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> \} $ . This is sound through the assignment rule obtained from usual Hoare logic . Keeping momentum , we have the statement \verb | <var:s1> := <var:s1> * <var:d> ; | . This statement transfers $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> \} $ as the condition $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> * <var:u> \} $ . Paying attention to the upcoming piece of code contained in our series of instructions , the assignment statement letting $ <var:s1> $ to $ <var:Q>$ . This forwards $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> * <var:u> \} $ into the postcondition $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:Q> = <nat:9> * <var:u> \} $ . Paying attention to the proceeding piece of code found in our segment of code , we have the assignment statement letting $ <var:Q> + <var:s0$ into $ <var:Q>$ . This line redefines $ \{ <var:d> = <var:u> \land <var:s0> = <nat:4> \land <var:Q> = <nat:9> * <var:u> \} $ to the condition $ \{ <var:d> = <var:u> \land <var:Q> = <nat:9> * <var:u> + <nat:4> \} $ . This is rigorously given with the assignment scheme found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:d> ; <var:Q> := <var:s1> ; <var:Q> := <var:Q> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:d> = <var:u> }} <def:poly> {{ <var:Q> = <nat:9> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:s0> = <nat:4> /\ <var:Q> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:u> /\ <var:Q> = <nat:9> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 