\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:4> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assume it to be that $ <var:Q> = <var:H> $ ahead of executing the list of instructions it must be that we see $ <var:j> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> $ once program has finished executing . \end{theorem} \begin{proof} The course of logic for this series of instructions is done with the following decorated set of instructions . \begin{eqnarray} \{ <var:Q> = <var:H> \} \\ <var:j> := <nat:3> ; \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \} \\ <var:j> := <nat:3> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \cdot <var:H> + <nat:3> \} \\ <var:j> := <nat:2> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:2> \} \\ <var:j> := <nat:4> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:4> \} \\ <var:j> := <nat:3> + <var:j> * <var:Q> ; \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:Q> \\ \{ <var:Q> = <var:H> \land <var:j> = <nat:3> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:3> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:2> + <var:j> * <var:Q> ; <var:j> := <nat:4> + <var:j> * <var:Q> ; <var:j> := <nat:3> + <var:j> * <var:Q> ; <var:j> := <nat:1> + <var:j> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Q> = <var:H> }} <def:poly> {{ <var:j> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:j> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 