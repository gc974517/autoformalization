\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:3> ; <var:E> := <var:G0> \end{verbatim} Assuming it to hold that $ <var:S> = <var:y> $ ( assuming some natural coefficients $ <var:y> $ ) prior to interpreting the code segment , it must be that we see $ <var:E> = <nat:3> $ after list of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for our segment of code is demonstrated using usual Hoare reasoning . Honing in on the next statement found in our set of commands , we see the variable binding line \verb | <var:G0> := <nat:3> ; | . This statement advances the precondition $ \{ <var:S> = <var:y> \} $ as the postcondition $ \{ <var:S> = <var:y> \land <var:G0> = <nat:3> \} $ . Stepping through , we have the binding line \verb | <var:E> := <var:G0> | . This statement redefines the precondition $ \{ <var:S> = <var:y> \land <var:G0> = <nat:3> \} $ toward $ \{ <var:S> = <var:y> \land <var:E> = <nat:3> \} $ . This is rigorously given by the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <var:G0> := <nat:3> ; <var:E> := <var:G0> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 