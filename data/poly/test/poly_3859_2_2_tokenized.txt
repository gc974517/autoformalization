\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:3> + <var:S> * <var:w> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assume it to be that $ <var:w> = <var:t> $ before executing the code , it must be that we have $ <var:S> = <nat:3> \cdot <var:t> + <nat:3> $ once code is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:w> = <var:t> \} \\ <var:S> := <nat:3> ; \\ \{ <var:w> = <var:t> \land <var:S> = <nat:3> \} \\ <var:S> := <nat:3> + <var:S> * <var:w> \\ \{ <var:w> = <var:t> \land <var:S> = <nat:3> \times <var:t> + <nat:3> \} \end{eqnarray} Thusly , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:3> ; <var:S> := <nat:3> + <var:S> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <def:poly> {{ <var:S> = <nat:3> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:S> = <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 