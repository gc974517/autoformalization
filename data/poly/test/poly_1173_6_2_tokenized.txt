\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:L> ; <var:c> := <nat:3> + <var:c> * <var:L> ; <var:c> := <nat:3> + <var:c> * <var:L> ; <var:c> := <nat:4> + <var:c> * <var:L> ; <var:c> := <nat:1> + <var:c> * <var:L> \end{verbatim} Allowing that we have $ <var:L> = <var:b> $ prior to running our set of commands it follows that we see $ <var:c> = <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be done with the below decorated code segment . \begin{eqnarray} \{ <var:L> = <var:b> \} \\ <var:c> := <nat:2> ; \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \} \\ <var:c> := <nat:4> + <var:c> * <var:L> ; \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \times <var:b> + <nat:4> \} \\ <var:c> := <nat:3> + <var:c> * <var:L> ; \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:3> \} \\ <var:c> := <nat:3> + <var:c> * <var:L> ; \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:3> \} \\ <var:c> := <nat:4> + <var:c> * <var:L> ; \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \times <var:b> ^ <nat:4> + <nat:4> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:4> \} \\ <var:c> := <nat:1> + <var:c> * <var:L> \\ \{ <var:L> = <var:b> \land <var:c> = <nat:2> \times <var:b> ^ <nat:5> + <nat:4> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:1> \} \end{eqnarray} Applying Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:L> = <var:b> }} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:L> ; <var:c> := <nat:3> + <var:c> * <var:L> ; <var:c> := <nat:3> + <var:c> * <var:L> ; <var:c> := <nat:4> + <var:c> * <var:L> ; <var:c> := <nat:1> + <var:c> * <var:L> {{ <var:c> = <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:c> = <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 