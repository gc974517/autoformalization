\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:H> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:H> ; <var:i2> := <var:i2> * <var:H> ; <var:i3> := <nat:8> ; <var:i3> := <var:i3> * <var:H> ; <var:i3> := <var:i3> * <var:H> ; <var:i3> := <var:i3> * <var:H> ; <var:J> := <var:i3> ; <var:J> := <var:J> + <var:i2> ; <var:J> := <var:J> + <var:i1> ; <var:J> := <var:J> + <var:i0> \end{verbatim} Assuming that we have $ <var:H> = <var:m> $ , for every positive integer coefficients $ <var:m> $ , ahead of executing this list of commands it must be that we see $ <var:J> = <nat:8> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:m> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \} \\ <var:i1> := <nat:1> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \} \\ <var:i1> := <var:i1> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \} \\ <var:i2> := <nat:4> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \} \\ <var:i2> := <var:i2> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> \} \\ <var:i2> := <var:i2> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \} \\ <var:i3> := <nat:8> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:i3> = <nat:8> \} \\ <var:i3> := <var:i3> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:i3> = <nat:8> \cdot <var:m> \} \\ <var:i3> := <var:i3> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:i3> = <nat:8> \cdot <var:m> ^ <nat:2> \} \\ <var:i3> := <var:i3> * <var:H> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:i3> = <nat:8> \cdot <var:m> ^ <nat:3> \} \\ <var:J> := <var:i3> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:i2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:J> = <nat:8> \cdot <var:m> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:i2> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:m> \land <var:J> = <nat:8> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:i1> ; \\ \{ <var:H> = <var:m> \land <var:i0> = <nat:2> \land <var:J> = <nat:8> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> \} \\ <var:J> := <var:J> + <var:i0> \\ \{ <var:H> = <var:m> \land <var:J> = <nat:8> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:H> = <var:m> }} <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:H> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:H> ; <var:i2> := <var:i2> * <var:H> ; <var:i3> := <nat:8> ; <var:i3> := <var:i3> * <var:H> ; <var:i3> := <var:i3> * <var:H> ; <var:i3> := <var:i3> * <var:H> ; <var:J> := <var:i3> ; <var:J> := <var:J> + <var:i2> ; <var:J> := <var:J> + <var:i1> ; <var:J> := <var:J> + <var:i0> {{ <var:J> = <nat:8> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:i3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:i3> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:i3> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:i3> = <nat:8> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:i2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:J> = <nat:8> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:m> /\ <var:J> = <nat:8> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:i0> = <nat:2> /\ <var:J> = <nat:8> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:J> = <nat:8> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 