\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:E1> := <var:O> ; <var:E2> := <var:E1> * <var:O> ; <var:E3> := <var:E2> * <var:O> ; <var:E4> := <var:E3> * <var:O> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:4> ; <var:E3> := <var:E3> * <nat:8> ; <var:E4> := <var:E4> * <nat:8> ; <var:X> := <var:E4> <var:X> := <var:X> + <var:E3> <var:X> := <var:X> + <var:E2> <var:X> := <var:X> + <var:E1> <var:X> := <var:X> + <var:E0> \end{verbatim} Assuming $ <var:O> = <var:v> $ --- given whole numbers $ <var:v> $ --- ahead of the evaluation of our series of commands it holds that we have $ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:v> \} \\ <var:E1> := <var:O> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <var:v> \} \\ <var:E2> := <var:E1> * <var:O> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:O> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \} \\ <var:E4> := <var:E3> * <var:O> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E4> = <var:v> ^ <nat:4> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E4> = <var:v> ^ <nat:4> \land <var:E0> = <nat:1> \} \\ <var:E1> := <var:E1> * <nat:1> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E4> = <var:v> ^ <nat:4> \land <var:E0> = <nat:1> \} \\ <var:E2> := <var:E2> * <nat:4> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <nat:4> * <var:v> ^ <nat:2> \land <var:E3> = <var:v> ^ <nat:3> \land <var:E4> = <var:v> ^ <nat:4> \land <var:E0> = <nat:1> \} \\ <var:E3> := <var:E3> * <nat:8> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <nat:4> * <var:v> ^ <nat:2> \land <var:E3> = <nat:8> * <var:v> ^ <nat:3> \land <var:E4> = <var:v> ^ <nat:4> \land <var:E0> = <nat:1> \} \\ <var:E4> := <var:E4> * <nat:8> ; \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <nat:4> * <var:v> ^ <nat:2> \land <var:E3> = <nat:8> * <var:v> ^ <nat:3> \land <var:E4> = <nat:8> * <var:v> ^ <nat:4> \land <var:E0> = <nat:1> \} \\ <var:X> := <var:E4> \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <nat:4> * <var:v> ^ <nat:2> \land <var:E3> = <nat:8> * <var:v> ^ <nat:3> \land <var:E0> = <nat:1> \land <var:X> = <nat:8> * <var:v> ^ <nat:4> \} \\ <var:X> := <var:X> + <var:E3> \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E2> = <nat:4> * <var:v> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:E2> \\ \{ <var:O> = <var:v> \land <var:E1> = <nat:1> * <var:v> \land <var:E0> = <nat:1> \land <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:E1> \\ \{ <var:O> = <var:v> \land <var:E0> = <nat:1> \land <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} \\ <var:X> := <var:X> + <var:E0> \\ \{ <var:O> = <var:v> \land <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:O> = <var:v> }} <var:E1> := <var:O> ; <var:E2> := <var:E1> * <var:O> ; <var:E3> := <var:E2> * <var:O> ; <var:E4> := <var:E3> * <var:O> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:4> ; <var:E3> := <var:E3> * <nat:8> ; <var:E4> := <var:E4> * <nat:8> ; <var:X> := <var:E4> <var:X> := <var:X> + <var:E3> <var:X> := <var:X> + <var:E2> <var:X> := <var:X> + <var:E1> <var:X> := <var:X> + <var:E0> {{ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E4> = <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E4> = <var:v> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E4> = <var:v> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:E3> = <var:v> ^ <nat:3> /\ <var:E4> = <var:v> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:v> ^ <nat:3> /\ <var:E4> = <var:v> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:v> ^ <nat:3> /\ <var:E4> = <nat:8> * <var:v> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:E3> = <nat:8> * <var:v> ^ <nat:3> /\ <var:E0> = <nat:1> /\ <var:X> = <nat:8> * <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E1> = <nat:1> * <var:v> /\ <var:E0> = <nat:1> /\ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:E0> = <nat:1> /\ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:X> = <nat:8> * <var:v> ^ <nat:4> + <nat:8> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 