\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:7> ; <var:q> := <var:s0> \end{verbatim} Assume it to hold that $ <var:a> = <var:i> $ ahead of the execution of our segment of code it must be that we have $ <var:q> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:a> = <var:i> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:a> = <var:i> \land <var:s0> = <nat:7> \} \\ <var:q> := <var:s0> \\ \{ <var:a> = <var:i> \land <var:q> = <nat:7> \} \end{eqnarray} Therefore , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:a> = <var:i> }} <var:s0> := <nat:7> ; <var:q> := <var:s0> {{ <var:q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:i> /\ <var:q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 