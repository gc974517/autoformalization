\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:b1> := <var:j> ; <var:b2> := <var:b1> * <var:j> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:4> ; <var:c> := <var:b2> <var:c> := <var:c> + <var:b1> <var:c> := <var:c> + <var:b0> \end{verbatim} Assume that $ <var:j> = <var:Q> $ ( given every positive integer coefficients $ <var:Q> $ ) ahead of interpreting the code it must be that $ <var:c> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> $ once code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:Q> \} \\ <var:b1> := <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:b1> = <var:Q> \} \\ <var:b2> := <var:b1> * <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:b1> = <var:Q> \land <var:b2> = <var:Q> ^ <nat:2> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:j> = <var:Q> \land <var:b1> = <var:Q> \land <var:b2> = <var:Q> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:j> = <var:Q> \land <var:b1> = <nat:4> \cdot <var:Q> \land <var:b2> = <var:Q> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:b2> := <var:b2> * <nat:4> ; \\ \{ <var:j> = <var:Q> \land <var:b1> = <nat:4> \cdot <var:Q> \land <var:b2> = <nat:4> \cdot <var:Q> ^ <nat:2> \land <var:b0> = <nat:4> \} \\ <var:c> := <var:b2> \\ \{ <var:j> = <var:Q> \land <var:b1> = <nat:4> \cdot <var:Q> \land <var:b0> = <nat:4> \land <var:c> = <nat:4> \cdot <var:Q> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:b1> \\ \{ <var:j> = <var:Q> \land <var:b0> = <nat:4> \land <var:c> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> \} \\ <var:c> := <var:c> + <var:b0> \\ \{ <var:j> = <var:Q> \land <var:c> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <var:b1> := <var:j> ; <var:b2> := <var:b1> * <var:j> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:4> ; <var:c> := <var:b2> <var:c> := <var:c> + <var:b1> <var:c> := <var:c> + <var:b0> {{ <var:c> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <var:Q> /\ <var:b2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <var:Q> /\ <var:b2> = <var:Q> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <nat:4> * <var:Q> /\ <var:b2> = <var:Q> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <nat:4> * <var:Q> /\ <var:b2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b1> = <nat:4> * <var:Q> /\ <var:b0> = <nat:4> /\ <var:c> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:b0> = <nat:4> /\ <var:c> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:c> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 