\begin{document} \begin{theorem} Define the following program in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:1> ; <var:V> := <var:b0> \end{verbatim} Assume that we have $ <var:t> = <var:K> $ assuming some integers $ <var:K> $ prior to executing this program , then $ <var:V> = <nat:1> $ when series of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of this code segment is evident by typical Hoare reasoning . Shifting focus toward the subsequent line of code contained in the set of instructions , the variable assignmet line binding $ <nat:1> $ into $ <var:b0>$ . This advances $ \{ <var:t> = <var:K> \} $ into the condition $ \{ <var:t> = <var:K> \land <var:b0> = <nat:1> \} $ . Immediately following , the binding statement giving $ <var:b0$ into $ <var:V>$ . This transfers the condition $ \{ <var:t> = <var:K> \land <var:b0> = <nat:1> \} $ to the condition $ \{ <var:t> = <var:K> \land <var:V> = <nat:1> \} $ . This is shown using the assignment scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:t> = <var:K> }} <var:b0> := <nat:1> ; <var:V> := <var:b0> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:K> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 