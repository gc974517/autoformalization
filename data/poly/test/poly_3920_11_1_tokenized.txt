\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:O1> := <var:g> ; <var:O2> := <var:O1> * <var:g> ; <var:O3> := <var:O2> * <var:g> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:7> ; <var:Z> := <var:O3> <var:Z> := <var:Z> + <var:O2> <var:Z> := <var:Z> + <var:O1> <var:Z> := <var:Z> + <var:O0> \end{verbatim} Given ( for any natural numbers $ <var:F> $ ) that we have $ <var:g> = <var:F> $ ahead of the evaluation of our series of instructions , then we see $ <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this set of instructions can be demonstrated through Hoare logic . Shifting focus toward the subsequent statement seen in the code , we have the binding line giving $ <var:g> $ as $ <var:O1>$ . This code advances $ \{ <var:g> = <var:F> \} $ to the condition $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \} $ . This is known to be sound with the assignment inference rule given by standard Hoare logic . After , the assignment code \verb | <var:O2> := <var:O1> * <var:g> ; | . This code transfers the precondition $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \} $ into $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \} $ . Taking another step toward the subsequent piece of code contained in the program , the code letting $ <var:O2> * <var:g> $ as $ <var:O3>$ . This line takes $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \} $ to $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \} $ . Going forward , we have the variable binding line \verb | <var:O0> := <nat:3> ; | . This takes the precondition $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . Looking at the upcoming command seen in the code , we see the variable binding statement letting $ <var:O1> * <nat:5> $ to $ <var:O1>$ . This transfers the precondition $ \{ <var:g> = <var:F> \land <var:O1> = <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ to the postcondition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . Going to the next step , we see the variable binding command \verb | <var:O2> := <var:O2> * <nat:9> ; | . This moves the precondition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . This is deduced through the assignment inference rule defined in Hoare techniques . Taking another step toward the proceeding command contained in our set of instructions , the environment update statement yielding $ <var:O3> * <nat:7> $ as $ <var:O3>$ . This code redefines $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O3> = <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ into the condition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O3> = <nat:7> \cdot <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ . Advancing to the next step , the command assigning $ <var:O3$ toward $ <var:Z>$ . This command transfers the condition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O3> = <nat:7> \cdot <var:F> ^ <nat:3> \land <var:O0> = <nat:3> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> \} $ . This is guaranteed with the assignment scheme given by typical Hoare reasoning . Jumping to the upcoming bit of code contained in our list of instructions , we have the variable update line assigning $ <var:Z> + <var:O2$ as $ <var:Z>$ . This moves $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> \} $ . Stepping through , we see the environment update statement \verb | <var:Z> := <var:Z> + <var:O1> | . This takes the condition $ \{ <var:g> = <var:F> \land <var:O1> = <nat:5> \cdot <var:F> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:F> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> \} $ . Taking another step toward the next command in the list of commands , the binding statement \verb | <var:Z> := <var:Z> + <var:O0> | . This code advances the precondition $ \{ <var:g> = <var:F> \land <var:O0> = <nat:3> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:Z> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:g> = <var:F> }} <var:O1> := <var:g> ; <var:O2> := <var:O1> * <var:g> ; <var:O3> := <var:O2> * <var:g> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:7> ; <var:Z> := <var:O3> <var:Z> := <var:Z> + <var:O2> <var:Z> := <var:Z> + <var:O1> <var:Z> := <var:Z> + <var:O0> {{ <var:Z> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <var:F> /\ <var:O2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <var:F> /\ <var:O2> = <var:F> ^ <nat:2> /\ <var:O3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <var:F> /\ <var:O2> = <var:F> ^ <nat:2> /\ <var:O3> = <var:F> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <nat:5> * <var:F> /\ <var:O2> = <var:F> ^ <nat:2> /\ <var:O3> = <var:F> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <nat:5> * <var:F> /\ <var:O2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:O3> = <var:F> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <nat:5> * <var:F> /\ <var:O2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <nat:5> * <var:F> /\ <var:O2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:O0> = <nat:3> /\ <var:Z> = <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O1> = <nat:5> * <var:F> /\ <var:O0> = <nat:3> /\ <var:Z> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O0> = <nat:3> /\ <var:Z> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:Z> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 