\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <nat:2> + <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:4> + <var:W> * <var:U> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <nat:2> + <var:W> * <var:U> \end{verbatim} Assuming it to be that $ <var:U> = <var:m> $ , with some positive integers $ <var:m> $ , ahead of interpreting the series of commands , then we see $ <var:W> = <nat:1> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:7> + <nat:2> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of instructions is accomplished with Hoare logic . Immediately after , \verb | { <var:U> = <var:m> } <var:W> := <nat:1> { <var:U> = <var:m> \land <var:W> = <nat:1> } | and \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> } <var:W> := <nat:1> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> + <nat:1> } | . Immediately following , \verb | { <var:U> = <var:m> } <var:W> := <nat:1> { <var:U> = <var:m> \land <var:W> = <nat:1> } | , \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> } <var:W> := <nat:1> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> + <nat:1> } | , \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> + <nat:1> } <var:W> := <nat:2> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> } | and \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> } <var:W> := <nat:1> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:1> } | . This is shown to be logically sound by the variable assignmet scheme found in Hoare techniques . After , \verb | { <var:U> = <var:m> } <var:W> := <nat:1> { <var:U> = <var:m> \land <var:W> = <nat:1> } | , \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> } <var:W> := <nat:1> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> + <nat:1> } | and \verb | { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> + <nat:1> } <var:W> := <nat:2> + <var:W> * <var:U> { <var:U> = <var:m> \land <var:W> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:U> = <var:m> }} <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <nat:2> + <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:4> + <var:W> * <var:U> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> ; <var:W> := <nat:2> + <var:W> * <var:U> {{ <var:W> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:W> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 