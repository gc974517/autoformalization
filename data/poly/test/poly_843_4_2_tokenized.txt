\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <nat:3> + <var:S> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:J> = <var:v> $ ahead of executing our code segment , it holds that we have $ <var:S> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> $ once code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:v> \} \\ <var:S> := <nat:1> ; \\ \{ <var:J> = <var:v> \land <var:S> = <nat:1> \} \\ <var:S> := <var:S> * <var:J> ; \\ \{ <var:J> = <var:v> \land <var:S> = <nat:1> \times <var:v> + \} \end{eqnarray} Continuing running this code segment gives us : \begin{eqnarray} <var:S> := <nat:4> + <var:S> * <var:J> ; \\ \{ <var:J> = <var:v> \land <var:S> = <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \} \\ <var:S> := <nat:3> + <var:S> * <var:J> \\ \{ <var:J> = <var:v> \land <var:S> = <nat:1> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:1> ; <var:S> := <var:S> * <var:J> ; <var:S> := <nat:4> + <var:S> * <var:J> ; <var:S> := <nat:3> + <var:S> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:J> = <var:v> }} <def:poly> {{ <var:S> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:S> = <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:S> = <nat:1> * <var:v> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:S> = <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 