\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:R> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:R> ; <var:h2> := <var:h2> * <var:R> ; <var:h3> := <nat:1> ; <var:h3> := <var:h3> * <var:R> ; <var:h3> := <var:h3> * <var:R> ; <var:h3> := <var:h3> * <var:R> ; <var:u> := <var:h3> ; <var:u> := <var:u> + <var:h2> ; <var:u> := <var:u> + <var:h1> ; <var:u> := <var:u> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Allow $ <var:R> = <var:v> $ --- for every $ <var:v> $ --- prior to running our segment of code then $ <var:u> = <nat:1> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:1> $ after code segment terminates . \end{theorem} \begin{proof} The argument for the segment of code can be demonstrated by standard Hoare logic . Immediately following , \begin{verbatim} { <var:R> = <var:v> } <var:h0> := <nat:1> { <var:R> = <var:v> \land <var:h0> = <nat:1> } { <var:R> = <var:v> \land <var:h0> = <nat:1> } <var:h1> := <nat:9> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> } \end{verbatim} Advancing to the next lines of codein our set of commands , \begin{verbatim} { <var:R> = <var:v> } <var:h0> := <nat:1> { <var:R> = <var:v> \land <var:h0> = <nat:1> } { <var:R> = <var:v> \land <var:h0> = <nat:1> } <var:h1> := <nat:9> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> } <var:h1> := <var:h1> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> } <var:h2> := <nat:7> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> } <var:h2> := <var:h2> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> } <var:h2> := <var:h2> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> } <var:h3> := <nat:1> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> } <var:h3> := <var:h3> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> } <var:h3> := <var:h3> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> ^ <nat:2> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> ^ <nat:2> } <var:h3> := <var:h3> * <var:R> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> ^ <nat:3> } { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:v> ^ <nat:3> } <var:u> := <var:h3> { <var:R> = <var:v> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \times <var:v> \land <var:h2> = <nat:7> \times <var:v> ^ <nat:2> \land <var:u> = <nat:1> \times <var:v> ^ <nat:3> } \end{verbatim} Going to the next step , we have \begin{verbatim} { <var:R> = <var:v> } <var:h0> := <nat:1> { <var:R> = <var:v> \land <var:h0> = <nat:1> } \end{verbatim} This is shown by the variable assignmet inference rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:R> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:R> ; <var:h2> := <var:h2> * <var:R> ; <var:h3> := <nat:1> ; <var:h3> := <var:h3> * <var:R> ; <var:h3> := <var:h3> * <var:R> ; <var:h3> := <var:h3> * <var:R> ; <var:u> := <var:h3> ; <var:u> := <var:u> + <var:h2> ; <var:u> := <var:u> + <var:h1> ; <var:u> := <var:u> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:R> = <var:v> }} <def:poly> {{ <var:u> = <nat:1> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:h3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:h2> = <nat:7> * <var:v> ^ <nat:2> /\ <var:u> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:v> /\ <var:u> = <nat:1> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:h0> = <nat:1> /\ <var:u> = <nat:1> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:u> = <nat:1> * <var:v> ^ <nat:3> + <nat:7> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 