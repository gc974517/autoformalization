\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:P> ; <var:X2> := <var:X1> * <var:P> ; <var:X3> := <var:X2> * <var:P> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:3> ; <var:F> := <var:X3> <var:F> := <var:F> + <var:X2> <var:F> := <var:F> + <var:X1> <var:F> := <var:F> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:P> = <var:T> $ ahead of the evaluation of our list of instructions then we have $ <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> + <nat:7> $ . \end{theorem} \begin{proof} The argument for this list of instructions can be seen using usual Hoare techniques . Jumping to the upcoming line of code found in the list of instructions , we see the binding code \verb | <var:X1> := <var:P> ; | . This forwards the precondition $ \{ <var:P> = <var:T> \} $ to the condition $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \} $ . This is guaranteed through the assignment scheme of usual Hoare techniques . Considering the following line of code contained in the segment of code , we have the assignment line \verb | <var:X2> := <var:X1> * <var:P> ; | . This forwards the condition $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \} $ toward $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \} $ . This is shown with the assignment law obtained from Hoare logic . Shifting focus toward the upcoming line of code contained in the set of instructions , we have the binding command yielding $ <var:X2> * <var:P> $ into $ <var:X3>$ . This code moves $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \} $ . Focusing on the following line contained in our list of instructions , the assignment command binding $ <nat:7> $ into $ <var:X0>$ . This transfers the precondition $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \} $ to $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Further , the environment update code \verb | <var:X1> := <var:X1> * <nat:8> ; | . This statement moves the condition $ \{ <var:P> = <var:T> \land <var:X1> = <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ as the condition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . This is sound using the assignment rule found in standard Hoare logic . Taking another step toward the next line of code contained in our set of instructions , we see the environment update code assigning $ <var:X2> * <nat:6> $ toward $ <var:X2>$ . This redefines $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ into the condition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Moving forward to the next step , we have the assignment line \verb | <var:X3> := <var:X3> * <nat:3> ; | . This advances the precondition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X3> = <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ to $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X3> = <nat:3> \times <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . This is known to be sound using the assignment rule of usual Hoare reasoning . Observing the upcoming line contained in our series of instructions , we see the variable assignmet command \verb | <var:F> := <var:X3> | . This line moves $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X3> = <nat:3> \times <var:T> ^ <nat:3> \land <var:X0> = <nat:7> \} $ to the postcondition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> \} $ . This is guaranteed by the assignment inference rule of standard Hoare reasoning . Considering the upcoming line seen in the set of commands , we have the variable binding code defining $ <var:F> + <var:X2$ as $ <var:F>$ . This transfers $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X2> = <nat:6> \times <var:T> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> \} $ as the condition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> \} $ . Moving on , the variable assignmet code assigning $ <var:F> + <var:X1$ to $ <var:F>$ . This statement forwards the condition $ \{ <var:P> = <var:T> \land <var:X1> = <nat:8> \times <var:T> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> \} $ into $ \{ <var:P> = <var:T> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> \} $ . This is guaranteed with the assignment law defined by usual Hoare reasoning . Moving forward , the variable assignmet code letting $ <var:F> + <var:X0$ to $ <var:F>$ . This advances $ \{ <var:P> = <var:T> \land <var:X0> = <nat:7> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> \} $ into the postcondition $ \{ <var:P> = <var:T> \land <var:F> = <nat:3> \times <var:T> ^ <nat:3> + <nat:6> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> + <nat:7> \} $ . This is ensured by the assignment law in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:P> ; <var:X2> := <var:X1> * <var:P> ; <var:X3> := <var:X2> * <var:P> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:6> ; <var:X3> := <var:X3> * <nat:3> ; <var:F> := <var:X3> <var:F> := <var:F> + <var:X2> <var:F> := <var:F> + <var:X1> <var:F> := <var:F> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:P> = <var:T> }} <def:poly> {{ <var:F> = <nat:3> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <nat:8> * <var:T> /\ <var:X2> = <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <nat:8> * <var:T> /\ <var:X2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:X3> = <var:T> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <nat:8> * <var:T> /\ <var:X2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:X3> = <nat:3> * <var:T> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <nat:8> * <var:T> /\ <var:X2> = <nat:6> * <var:T> ^ <nat:2> /\ <var:X0> = <nat:7> /\ <var:F> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X1> = <nat:8> * <var:T> /\ <var:X0> = <nat:7> /\ <var:F> = <nat:3> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:X0> = <nat:7> /\ <var:F> = <nat:3> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:T> /\ <var:F> = <nat:3> * <var:T> ^ <nat:3> + <nat:6> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 