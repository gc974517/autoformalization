\begin{document} \begin{theorem} Let the following code in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:6> ; <var:w> := <var:W0> \end{verbatim} Allow that $ <var:N> = <var:o> $ ahead of running our code it must be that $ <var:w> = <nat:6> $ . \end{theorem} \begin{proof} We can see that the below decorated list of instructions . \begin{eqnarray} \{ <var:N> = <var:o> \} \\ <var:W0> := <nat:6> ; \\ \{ <var:N> = <var:o> \land <var:W0> = <nat:6> \} \\ <var:w> := <var:W0> \\ \{ <var:N> = <var:o> \land <var:w> = <nat:6> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:N> = <var:o> }} <var:W0> := <nat:6> ; <var:w> := <var:W0> {{ <var:w> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:w> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 