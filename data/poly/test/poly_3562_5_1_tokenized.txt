\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:U> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:1> ; <var:z> := <var:F1> <var:z> := <var:z> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assume --- for all whole numbers $ <var:m> $ --- it to be that $ <var:U> = <var:m> $ prior to evaluating our list of instructions it follows that we see $ <var:z> = <nat:1> \times <var:m> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:U> = <var:m> \} \\ <var:F1> := <var:U> ; \\ \{ <var:U> = <var:m> \land <var:F1> = <var:m> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:U> = <var:m> \land <var:F1> = <var:m> \land <var:F0> = <nat:1> \} \\ <var:F1> := <var:F1> * <nat:1> ; \\ \{ <var:U> = <var:m> \land <var:F1> = <nat:1> \cdot <var:m> \land <var:F0> = <nat:1> \} \\ <var:z> := <var:F1> \\ \{ <var:U> = <var:m> \land <var:F0> = <nat:1> \land <var:z> = <nat:1> \cdot <var:m> \} \\ <var:z> := <var:z> + <var:F0> \\ \{ <var:U> = <var:m> \land <var:z> = <nat:1> \cdot <var:m> + <nat:1> \} \end{eqnarray} As a result , our segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:U> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:1> ; <var:z> := <var:F1> <var:z> := <var:z> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:U> = <var:m> }} <def:poly> {{ <var:z> = <nat:1> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:F1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:F1> = <var:m> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:F1> = <nat:1> * <var:m> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:F0> = <nat:1> /\ <var:z> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:z> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 