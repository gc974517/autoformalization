\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:X> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:X> ; <var:y2> := <var:y2> * <var:X> ; <var:Q> := <var:y2> ; <var:Q> := <var:Q> + <var:y1> ; <var:Q> := <var:Q> + <var:y0> \end{verbatim} Assuming that $ <var:X> = <var:B> $ prior to evaluating this list of commands then we see $ <var:Q> = <nat:8> \times <var:B> ^ <nat:2> + <nat:8> \times <var:B> + <nat:2> $ once segment of code has terminated . \end{theorem} \begin{proof} Observe that this decorated series of instructions . \begin{eqnarray} \{ <var:X> = <var:B> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \} \\ <var:y1> := <nat:8> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> \} \\ <var:y1> := <var:y1> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> * <var:B> \} \\ <var:y2> := <nat:8> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> * <var:B> \land <var:y2> = <nat:8> \} \\ <var:y2> := <var:y2> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> * <var:B> \land <var:y2> = <nat:8> * <var:B> \} \\ <var:y2> := <var:y2> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> * <var:B> \land <var:y2> = <nat:8> * <var:B> ^ <nat:2> \} \\ <var:Q> := <var:y2> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:y1> = <nat:8> * <var:B> \land <var:Q> = <nat:8> * <var:B> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:y1> ; \\ \{ <var:X> = <var:B> \land <var:y0> = <nat:2> \land <var:Q> = <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} \\ <var:Q> := <var:Q> + <var:y0> \\ \{ <var:X> = <var:B> \land <var:Q> = <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <var:y0> := <nat:2> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:X> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:X> ; <var:y2> := <var:y2> * <var:X> ; <var:Q> := <var:y2> ; <var:Q> := <var:Q> + <var:y1> ; <var:Q> := <var:Q> + <var:y0> {{ <var:Q> = <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> * <var:B> /\ <var:y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> * <var:B> /\ <var:y2> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> * <var:B> /\ <var:y2> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:8> * <var:B> /\ <var:Q> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:y0> = <nat:2> /\ <var:Q> = <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:Q> = <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 