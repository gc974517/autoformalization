\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:I> ; <var:q> := <var:X1> ; <var:q> := <var:q> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming letting integers $ <var:l> $ it to be that $ <var:I> = <var:l> $ before executing this set of instructions it holds that we have $ <var:q> = <nat:8> \cdot <var:l> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be demonstrated by standard Hoare techniques . Considering the next command in our list of commands , we see the variable assignmet code assigning $ <nat:9> $ toward $ <var:X0>$ . This line moves the condition $ \{ <var:I> = <var:l> \} $ toward the condition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \} $ . Advancing to the next step , the variable binding statement \verb | <var:X1> := <nat:8> ; | . This advances the condition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \} $ to the postcondition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> \} $ . This is ensured using the assignment law given in typical Hoare reasoning . Moving forward , we have the variable assignmet line yielding $ <var:X1> * <var:I> $ to $ <var:X1>$ . This advances $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> \} $ as the postcondition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> \cdot <var:l> \} $ . This is rigorously given by the assignment scheme given by typical Hoare reasoning . Honing in on the upcoming statement in the set of instructions , we see the statement \verb | <var:q> := <var:X1> ; | . This transfers the condition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:X1> = <nat:8> \cdot <var:l> \} $ toward the condition $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:q> = <nat:8> \cdot <var:l> \} $ . This is guaranteed through the assignment law given by typical Hoare logic . Looking at the subsequent command in the series of instructions , we see the assignment statement defining $ <var:q> + <var:X0$ to $ <var:q>$ . This code transfers $ \{ <var:I> = <var:l> \land <var:X0> = <nat:9> \land <var:q> = <nat:8> \cdot <var:l> \} $ into $ \{ <var:I> = <var:l> \land <var:q> = <nat:8> \cdot <var:l> + <nat:9> \} $ . This is guaranteed using the assignment law in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:9> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:I> ; <var:q> := <var:X1> ; <var:q> := <var:q> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:I> = <var:l> }} <def:poly> {{ <var:q> = <nat:8> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:X0> = <nat:9> /\ <var:q> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:q> = <nat:8> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 