\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:F> ; <var:f> := <nat:2> + <var:f> * <var:F> ; <var:f> := <nat:2> + <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> ; <var:f> := <nat:4> + <var:f> * <var:F> ; <var:f> := <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:F> = <var:d> $ before interpreting the code segment it follows that we have $ <var:f> = <nat:3> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the segment of code is evident through usual Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:d> \} & <var:f> := <nat:3> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} \end{tabular} Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:d> \} & <var:f> := <nat:3> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} \\ \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} & <var:f> := <nat:4> + <var:f> * <var:F> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> + <nat:4> \} \end{tabular} Taking another step toward the next steps seen in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:d> \} & <var:f> := <nat:3> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} \\ \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} & <var:f> := <nat:4> + <var:f> * <var:F> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> + <nat:4> \} \\ \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> + <nat:4> \} & <var:f> := <nat:2> + <var:f> * <var:F> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:2> \} \\ \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:2> \} & <var:f> := <nat:2> + <var:f> * <var:F> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:2> \} \\ \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:2> \} & <var:f> := <nat:1> + <var:f> * <var:F> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:1> \} \end{tabular} Jumping to the following bit of code in our set of commands , \[ \begin{tabular} {rcl} \{ <var:F> = <var:d> \} & <var:f> := <nat:3> & \{ <var:F> = <var:d> \land <var:f> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:F> ; <var:f> := <nat:2> + <var:f> * <var:F> ; <var:f> := <nat:2> + <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> ; <var:f> := <nat:4> + <var:f> * <var:F> ; <var:f> := <var:f> * <var:F> ; <var:f> := <nat:1> + <var:f> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:F> = <var:d> }} <def:poly> {{ <var:f> = <nat:3> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:f> = <nat:3> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 