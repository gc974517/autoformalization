\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:9> ; <var:n1> := <nat:4> ; <var:n1> := <var:n1> * <var:W> ; <var:G> := <var:n1> ; <var:G> := <var:G> + <var:n0> \end{verbatim} Allow , letting natural coefficients $ <var:y> $ , that $ <var:W> = <var:y> $ prior to running the set of commands it must be that $ <var:G> = <nat:4> * <var:y> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:W> = <var:y> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:W> = <var:y> \land <var:n0> = <nat:9> \} \\ <var:n1> := <nat:4> ; \\ \{ <var:W> = <var:y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:4> \} \\ <var:n1> := <var:n1> * <var:W> ; \\ \{ <var:W> = <var:y> \land <var:n0> = <nat:9> \land <var:n1> = <nat:4> \cdot <var:y> \} \\ <var:G> := <var:n1> ; \\ \{ <var:W> = <var:y> \land <var:n0> = <nat:9> \land <var:G> = <nat:4> \cdot <var:y> \} \\ <var:G> := <var:G> + <var:n0> \\ \{ <var:W> = <var:y> \land <var:G> = <nat:4> \cdot <var:y> + <nat:9> \} \end{eqnarray} Given the preceding argument , our code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:W> = <var:y> }} <var:n0> := <nat:9> ; <var:n1> := <nat:4> ; <var:n1> := <var:n1> * <var:W> ; <var:G> := <var:n1> ; <var:G> := <var:G> + <var:n0> {{ <var:G> = <nat:4> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:n0> = <nat:9> /\ <var:n1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:n0> = <nat:9> /\ <var:G> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:y> /\ <var:G> = <nat:4> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 