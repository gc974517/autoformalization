\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:8> ; <var:o> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:P> = <var:W> $ ahead of the evaluation of our series of instructions then we see $ <var:o> = <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:P> = <var:W> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:P> = <var:W> \land <var:g0> = <nat:8> \} \\ <var:o> := <var:g0> \\ \{ <var:P> = <var:W> \land <var:o> = <nat:8> \} \end{eqnarray} Given the above , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:8> ; <var:o> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:P> = <var:W> }} <def:poly> {{ <var:o> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:o> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 