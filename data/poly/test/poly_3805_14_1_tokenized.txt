\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u4> := <var:u3> * <var:v> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:4> ; <var:u4> := <var:u4> * <nat:4> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u3> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u1> <var:H> := <var:H> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given ( given any $ <var:e> $ ) that we have $ <var:v> = <var:e> $ before evaluating this series of commands it follows that we see $ <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is given through standard Hoare techniques . Moving on to the upcoming command contained in the segment of code , the variable binding code \verb | <var:u1> := <var:v> ; | . This advances the precondition $ \{ <var:v> = <var:e> \} $ as $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \} $ . This is guaranteed with the assignment scheme found in usual Hoare techniques . Considering the subsequent command found in the set of instructions , we see the variable binding statement defining $ <var:u1> * <var:v> $ into $ <var:u2>$ . This code advances the condition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \} $ to $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \} $ . Advancing to the next piece of code seen in the code segment , the variable update line binding $ <var:u2> * <var:v> $ to $ <var:u3>$ . This line moves the precondition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \} $ . Going forward , we see the variable binding statement \verb | <var:u4> := <var:u3> * <var:v> ; | . This transfers $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \} $ as the postcondition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \} $ . Immediately after , we have the environment update code \verb | <var:u0> := <nat:2> ; | . This moves the precondition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \} $ into $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ . Moving on to the upcoming step contained in the series of commands , we see the command assigning $ <var:u1> * <nat:6> $ as $ <var:u1>$ . This line forwards the condition $ \{ <var:v> = <var:e> \land <var:u1> = <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ . After , the variable assignmet code yielding $ <var:u2> * <nat:6> $ into $ <var:u2>$ . This code transfers the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ as the postcondition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ . This is shown through the assignment scheme defined in standard Hoare logic . Jumping to the next line of code found in our set of commands , we see the environment update command \verb | <var:u3> := <var:u3> * <nat:4> ; | . This line advances the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ to the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ . This is shown to be logically sound by the assignment law defined by Hoare techniques . Moving forward , we see the environment update statement yielding $ <var:u4> * <nat:4> $ as $ <var:u4>$ . This advances the precondition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u4> = <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ into the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u4> = <nat:4> \times <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ . This is rigorously given by the assignment law given by usual Hoare reasoning . Going to the next step , we see the variable assignmet command \verb | <var:H> := <var:u4> | . This code transfers $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u4> = <nat:4> \times <var:e> ^ <nat:4> \land <var:u0> = <nat:2> \} $ to $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> \} $ . This is deduced through the assignment rule given by standard Hoare reasoning . Shifting focus toward the next line found in the series of commands , we have the binding code \verb | <var:H> := <var:H> + <var:u3> | . This takes the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u3> = <nat:4> \times <var:e> ^ <nat:3> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> \} $ to the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> \} $ . This is shown through the assignment rule given in usual Hoare techniques . Looking at the next line seen in the set of commands , we see the variable update statement \verb | <var:H> := <var:H> + <var:u2> | . This command moves $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> \} $ toward $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> \} $ . This is given through the assignment scheme in usual Hoare logic . Looking at the following step contained in our segment of code , we see the environment update code \verb | <var:H> := <var:H> + <var:u1> | . This advances the condition $ \{ <var:v> = <var:e> \land <var:u1> = <nat:6> \times <var:e> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:e> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> \} $ . This is rigorously given with the assignment law given by typical Hoare reasoning . Stepping through , we have the assignment code \verb | <var:H> := <var:H> + <var:u0> | . This command takes $ \{ <var:v> = <var:e> \land <var:u0> = <nat:2> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> \} $ into the postcondition $ \{ <var:v> = <var:e> \land <var:H> = <nat:4> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <def:poly> := <var:u1> := <var:v> ; <var:u2> := <var:u1> * <var:v> ; <var:u3> := <var:u2> * <var:v> ; <var:u4> := <var:u3> * <var:v> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:6> ; <var:u3> := <var:u3> * <nat:4> ; <var:u4> := <var:u4> * <nat:4> ; <var:H> := <var:u4> <var:H> := <var:H> + <var:u3> <var:H> := <var:H> + <var:u2> <var:H> := <var:H> + <var:u1> <var:H> := <var:H> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <def:poly> {{ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <var:e> /\ <var:u2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <var:e> /\ <var:u2> = <var:e> ^ <nat:2> /\ <var:u3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <var:e> /\ <var:u2> = <var:e> ^ <nat:2> /\ <var:u3> = <var:e> ^ <nat:3> /\ <var:u4> = <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <var:e> /\ <var:u2> = <var:e> ^ <nat:2> /\ <var:u3> = <var:e> ^ <nat:3> /\ <var:u4> = <var:e> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <var:e> ^ <nat:2> /\ <var:u3> = <var:e> ^ <nat:3> /\ <var:u4> = <var:e> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <var:e> ^ <nat:3> /\ <var:u4> = <var:e> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:u4> = <var:e> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:u4> = <nat:4> * <var:e> ^ <nat:4> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:u0> = <nat:2> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u1> = <nat:6> * <var:e> /\ <var:u0> = <nat:2> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:u0> = <nat:2> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 