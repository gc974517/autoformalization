\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r4> := <var:r3> * <var:o> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:6> ; <var:r4> := <var:r4> * <nat:3> ; <var:y> := <var:r4> <var:y> := <var:y> + <var:r3> <var:y> := <var:y> + <var:r2> <var:y> := <var:y> + <var:r1> <var:y> := <var:y> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for every positive integer coefficients $ <var:h> $ ) that $ <var:o> = <var:h> $ ahead of evaluating the program , it must be that we see $ <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:5> $ once series of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the set of commands is done using Hoare reasoning . Honing in on the upcoming step found in the code , we see the command yielding $ <var:o> $ to $ <var:r1>$ . This redefines the condition $ \{ <var:o> = <var:h> \} $ into the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \} $ . This is ensured by the assignment inference rule obtained from usual Hoare techniques . After , we see the code letting $ <var:r1> * <var:o> $ as $ <var:r2>$ . This redefines the condition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \} $ as $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \} $ . Considering the proceeding statement in our list of instructions , we see the variable binding statement \verb | <var:r3> := <var:r2> * <var:o> ; | . This advances the condition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \} $ toward $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule given in usual Hoare reasoning . Moving onward , we have the assignment command \verb | <var:r4> := <var:r3> * <var:o> ; | . This statement moves the condition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \} $ into the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \} $ . Looking at the following command found in the list of instructions , we see the code \verb | <var:r0> := <nat:5> ; | . This redefines $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \} $ to the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ . Taking another step toward the subsequent statement contained in our program , we have the variable assignmet line \verb | <var:r1> := <var:r1> * <nat:3> ; | . This advances the condition $ \{ <var:o> = <var:h> \land <var:r1> = <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ toward $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ . This is given through the assignment scheme given by Hoare techniques . Shifting focus toward the next line of code contained in the list of instructions , the binding command \verb | <var:r2> := <var:r2> * <nat:9> ; | . This code moves $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ to the condition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ . Advancing to the next step , we see the variable assignmet statement binding $ <var:r3> * <nat:6> $ toward $ <var:r3>$ . This advances the condition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ to the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ . Advancing on , the variable assignmet code defining $ <var:r4> * <nat:3> $ into $ <var:r4>$ . This command forwards the condition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r4> = <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ to $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ . This is rigorously given using the assignment law defined in usual Hoare techniques . Advancing to the following bit of code contained in our list of commands , we have the variable assignmet code \verb | <var:y> := <var:r4> | . This code forwards the precondition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r4> = <nat:3> \times <var:h> ^ <nat:4> \land <var:r0> = <nat:5> \} $ as the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> \} $ . This is rigorously given by the assignment scheme from standard Hoare techniques . Moving on to the next step , we have the variable update line giving $ <var:y> + <var:r3$ as $ <var:y>$ . This line takes $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> \} $ as the postcondition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> \} $ . This is deduced by the assignment inference rule in typical Hoare logic . After , the assignment code defining $ <var:y> + <var:r2$ toward $ <var:y>$ . This statement redefines $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r2> = <nat:9> \times <var:h> ^ <nat:2> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> \} $ to the condition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment scheme of usual Hoare techniques . Advancing to the next statement in our program , we see the binding code \verb | <var:y> := <var:y> + <var:r1> | . This redefines the precondition $ \{ <var:o> = <var:h> \land <var:r1> = <nat:3> \times <var:h> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> \} $ as the postcondition $ \{ <var:o> = <var:h> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} $ . Taking another step toward the following piece of code found in our list of commands , the environment update code \verb | <var:y> := <var:y> + <var:r0> | . This line forwards the precondition $ \{ <var:o> = <var:h> \land <var:r0> = <nat:5> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} $ as the condition $ \{ <var:o> = <var:h> \land <var:y> = <nat:3> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Definition <def:poly> := <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r4> := <var:r3> * <var:o> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:6> ; <var:r4> := <var:r4> * <nat:3> ; <var:y> := <var:r4> <var:y> := <var:y> + <var:r3> <var:y> := <var:y> + <var:r2> <var:y> := <var:y> + <var:r1> <var:y> := <var:y> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:o> = <var:h> }} <def:poly> {{ <var:y> = <nat:3> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r3> = <var:h> ^ <nat:3> /\ <var:r4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r3> = <var:h> ^ <nat:3> /\ <var:r4> = <var:h> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <var:h> ^ <nat:2> /\ <var:r3> = <var:h> ^ <nat:3> /\ <var:r4> = <var:h> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:r3> = <var:h> ^ <nat:3> /\ <var:r4> = <var:h> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:r4> = <var:h> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:r4> = <nat:3> * <var:h> ^ <nat:4> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:r0> = <nat:5> /\ <var:y> = <nat:3> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:r0> = <nat:5> /\ <var:y> = <nat:3> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r1> = <nat:3> * <var:h> /\ <var:r0> = <nat:5> /\ <var:y> = <nat:3> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:r0> = <nat:5> /\ <var:y> = <nat:3> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:y> = <nat:3> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 