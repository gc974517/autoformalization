\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:A> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:A> ; <var:p2> := <var:p2> * <var:A> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:A> ; <var:p3> := <var:p3> * <var:A> ; <var:p3> := <var:p3> * <var:A> ; <var:K> := <var:p3> ; <var:K> := <var:K> + <var:p2> ; <var:K> := <var:K> + <var:p1> ; <var:K> := <var:K> + <var:p0> \end{verbatim} Allowing it to be that $ <var:A> = <var:v> $ , for all $ <var:v> $ , ahead of evaluating our list of instructions , it must be that we see $ <var:K> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:7> $ after series of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands is accomplished using Hoare techniques . Honing in on the proceeding statement contained in the segment of code , we see the statement \verb | <var:p0> := <nat:7> ; | . This statement advances the condition $ \{ <var:A> = <var:v> \} $ as the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \} $ . Shifting focus toward the following line contained in the set of instructions , the variable assignmet line \verb | <var:p1> := <nat:6> ; | . This line forwards the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \} $ to the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \} $ . This is deduced by the assignment law defined by typical Hoare logic . Moving forward to the subsequent step seen in our list of instructions , the environment update statement \verb | <var:p1> := <var:p1> * <var:A> ; | . This command advances the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \} $ as $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \} $ . Moving forward to the next command found in our series of commands , the variable update code letting $ <nat:1> $ toward $ <var:p2>$ . This line forwards the precondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \} $ toward the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \} $ . This is given through the assignment scheme obtained from standard Hoare techniques . Advancing on , the environment update statement \verb | <var:p2> := <var:p2> * <var:A> ; | . This command advances the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \} $ toward the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> \} $ . Moving on , the statement binding $ <var:p2> * <var:A> $ to $ <var:p2>$ . This code forwards $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> \} $ to the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \} $ . This is deduced by the assignment scheme given in standard Hoare techniques . Taking another step toward the subsequent bit of code seen in the segment of code , the variable update line defining $ <nat:2> $ to $ <var:p3>$ . This line forwards $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \} $ toward the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \} $ . Advancing to the next step , we see the assignment command defining $ <var:p3> * <var:A> $ to $ <var:p3>$ . This moves the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> \} $ . Advancing to the following line contained in our set of instructions , the variable binding statement yielding $ <var:p3> * <var:A> $ to $ <var:p3>$ . This moves $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> \} $ to the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> ^ <nat:2> \} $ . This is shown with the assignment law in Hoare logic . Moving on to the next step , the variable binding line letting $ <var:p3> * <var:A> $ toward $ <var:p3>$ . This transfers the precondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> ^ <nat:2> \} $ into the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> ^ <nat:3> \} $ . This is shown using the assignment law defined in usual Hoare techniques . Going forward , we have the environment update command giving $ <var:p3> $ as $ <var:K>$ . This line advances the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:2> \times <var:v> ^ <nat:3> \} $ toward $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> \} $ . Taking another step toward the subsequent statement in our list of instructions , we see the binding statement yielding $ <var:K> + <var:p2> $ as $ <var:K>$ . This moves $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:p2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> \} $ . Advancing to the proceeding bit of code contained in our code segment , the environment update code yielding $ <var:K> + <var:p1> $ toward $ <var:K>$ . This advances the condition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:p1> = <nat:6> \times <var:v> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> \} $ as $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> \} $ . This is deduced with the assignment law given by Hoare techniques . Looking at the next piece of code in the code segment , the line \verb | <var:K> := <var:K> + <var:p0> | . This takes the precondition $ \{ <var:A> = <var:v> \land <var:p0> = <nat:7> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> \} $ toward $ \{ <var:A> = <var:v> \land <var:K> = <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:A> = <var:v> }} <var:p0> := <nat:7> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:A> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:A> ; <var:p2> := <var:p2> * <var:A> ; <var:p3> := <nat:2> ; <var:p3> := <var:p3> * <var:A> ; <var:p3> := <var:p3> * <var:A> ; <var:p3> := <var:p3> * <var:A> ; <var:K> := <var:p3> ; <var:K> := <var:K> + <var:p2> ; <var:K> := <var:K> + <var:p1> ; <var:K> := <var:K> + <var:p0> {{ <var:K> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:p2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:K> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:6> * <var:v> /\ <var:K> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:p0> = <nat:7> /\ <var:K> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:K> = <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 