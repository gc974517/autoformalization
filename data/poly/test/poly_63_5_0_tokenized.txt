\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:5> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:e> ; <var:J> := <var:D1> ; <var:J> := <var:J> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Given that we have $ <var:e> = <var:A> $ --- assuming some positive integers $ <var:A> $ --- prior to the evaluation of our segment of code then we see $ <var:J> = <nat:2> \times <var:A> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is given by Hoare reasoning . Moving on to the upcoming line of code seen in our code , we have the variable update statement letting $ <nat:5> $ into $ <var:D0>$ . This advances the precondition $ \{ <var:e> = <var:A> \} $ into $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \} $ . This is deduced by the assignment inference rule of usual Hoare reasoning . Further , we see the variable binding code \verb | <var:D1> := <nat:2> ; | . This takes the precondition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \} $ to the postcondition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:D1> = <nat:2> \} $ . Immediately after , we see the variable update command defining $ <var:D1> * <var:e> $ as $ <var:D1>$ . This statement takes the precondition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:D1> = <nat:2> \} $ to $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:D1> = <nat:2> * <var:A> \} $ . Looking at the following command contained in the set of commands , we have the line \verb | <var:J> := <var:D1> ; | . This redefines the precondition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:D1> = <nat:2> * <var:A> \} $ toward the condition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:J> = <nat:2> * <var:A> \} $ . Following , we have the variable update line assigning $ <var:J> + <var:D0$ toward $ <var:J>$ . This redefines the precondition $ \{ <var:e> = <var:A> \land <var:D0> = <nat:5> \land <var:J> = <nat:2> * <var:A> \} $ into the postcondition $ \{ <var:e> = <var:A> \land <var:J> = <nat:2> * <var:A> + <nat:5> \} $ . This is sound using the assignment scheme of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:5> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:e> ; <var:J> := <var:D1> ; <var:J> := <var:J> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:e> = <var:A> }} <def:poly> {{ <var:J> = <nat:2> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:D0> = <nat:5> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:D0> = <nat:5> /\ <var:D1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:D0> = <nat:5> /\ <var:J> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:A> /\ <var:J> = <nat:2> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 