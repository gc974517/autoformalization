\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:6> ; <var:y> := <var:c0> \end{verbatim} Allow that we have $ <var:q> = <var:w> $ ahead of executing our list of instructions it must be that $ <var:y> = <nat:6> $ . \end{theorem} \begin{proof} The argument for this set of commands is accomplished by typical Hoare techniques . Moving forward to the next step , we see the variable update line letting $ <nat:6> $ into $ <var:c0>$ . This statement takes the condition $ \{ <var:q> = <var:w> \} $ toward $ \{ <var:q> = <var:w> \land <var:c0> = <nat:6> \} $ . This is guaranteed with the assignment scheme from Hoare techniques . Focusing on the proceeding piece of code contained in the series of commands , we have the variable binding command defining $ <var:c0$ into $ <var:y>$ . This advances the precondition $ \{ <var:q> = <var:w> \land <var:c0> = <nat:6> \} $ to the condition $ \{ <var:q> = <var:w> \land <var:y> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:q> = <var:w> }} <var:c0> := <nat:6> ; <var:y> := <var:c0> {{ <var:y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 