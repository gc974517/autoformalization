\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:G0> := <nat:6> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:k> ; <var:Z> := <var:G1> ; <var:Z> := <var:Z> + <var:G0> \end{verbatim} Allowing that we have $ <var:k> = <var:g> $ given integers $ <var:g> $ prior to the execution of the list of instructions it follows that we see $ <var:Z> = <nat:7> * <var:g> + <nat:6> $ after series of commands has executed . \end{theorem} \begin{proof} Proving correctness for the series of instructions is demonstrated by typical Hoare reasoning . Looking at the subsequent lines of codein our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:g> \} & <var:G0> := <nat:6> & \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \} \\ \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \} & <var:G1> := <nat:7> & \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \land <var:G1> = <nat:7> \} \\ \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \land <var:G1> = <nat:7> \} & <var:G1> := <var:G1> * <var:k> & \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \land <var:G1> = <nat:7> * <var:g> \} \end{tabular} This is known to be sound with the assignment inference rule of typical Hoare reasoning . Jumping to the next statements in our list of commands , \[ \begin{tabular} {rcl} \{ <var:k> = <var:g> \} & <var:G0> := <nat:6> & \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \} \\ \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \} & <var:G1> := <nat:7> & \{ <var:k> = <var:g> \land <var:G0> = <nat:6> \land <var:G1> = <nat:7> \} \end{tabular} This is ensured using the binding rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:k> = <var:g> }} <var:G0> := <nat:6> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:k> ; <var:Z> := <var:G1> ; <var:Z> := <var:Z> + <var:G0> {{ <var:Z> = <nat:7> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:G0> = <nat:6> /\ <var:Z> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:Z> = <nat:7> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 