\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:u> ; <var:J3> := <nat:7> ; <var:J3> := <var:J3> * <var:u> ; <var:J3> := <var:J3> * <var:u> ; <var:J3> := <var:J3> * <var:u> ; <var:x> := <var:J3> ; <var:x> := <var:x> + <var:J1> ; <var:x> := <var:x> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:u> = <var:m> $ --- for all integers $ <var:m> $ --- ahead of executing this series of instructions , then $ <var:x> = <nat:7> * <var:m> ^ <nat:3> + <nat:6> * <var:m> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be done using usual Hoare techniques . Moving onward , \begin{verbatim} { <var:u> = <var:m> } <var:J0> := <nat:1> { <var:u> = <var:m> \land <var:J0> = <nat:1> } { <var:u> = <var:m> \land <var:J0> = <nat:1> } <var:J1> := <nat:6> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> } { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> } <var:J1> := <var:J1> * <var:u> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> } { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> } <var:J3> := <nat:7> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> \land <var:J3> = <nat:7> } { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> \land <var:J3> = <nat:7> } <var:J3> := <var:J3> * <var:u> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> \land <var:J3> = <nat:7> \cdot <var:m> } \end{verbatim} Jumping to the subsequent line in our series of commands , we have \begin{verbatim} { <var:u> = <var:m> } <var:J0> := <nat:1> { <var:u> = <var:m> \land <var:J0> = <nat:1> } \end{verbatim} Moving forward to the following statements seen in our code segment , \begin{verbatim} { <var:u> = <var:m> } <var:J0> := <nat:1> { <var:u> = <var:m> \land <var:J0> = <nat:1> } { <var:u> = <var:m> \land <var:J0> = <nat:1> } <var:J1> := <nat:6> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> } { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> } <var:J1> := <var:J1> * <var:u> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> } { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> } <var:J3> := <nat:7> { <var:u> = <var:m> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \cdot <var:m> \land <var:J3> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:u> ; <var:J3> := <nat:7> ; <var:J3> := <var:J3> * <var:u> ; <var:J3> := <var:J3> * <var:u> ; <var:J3> := <var:J3> * <var:u> ; <var:x> := <var:J3> ; <var:x> := <var:x> + <var:J1> ; <var:x> := <var:x> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:u> = <var:m> }} <def:poly> {{ <var:x> = <nat:7> * <var:m> ^ <nat:3> + <nat:6> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> /\ <var:J3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> /\ <var:J3> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> /\ <var:J3> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> /\ <var:J3> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:m> /\ <var:x> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:J0> = <nat:1> /\ <var:x> = <nat:7> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:x> = <nat:7> * <var:m> ^ <nat:3> + <nat:6> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 