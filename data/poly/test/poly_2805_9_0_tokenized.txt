\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:f> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:f> ; <var:n2> := <var:n2> * <var:f> ; <var:H> := <var:n2> ; <var:H> := <var:H> + <var:n1> ; <var:H> := <var:H> + <var:n0> \end{verbatim} Assuming it to be that $ <var:f> = <var:B> $ ahead of the execution of the series of instructions , it holds that we see $ <var:H> = <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be demonstrated through usual Hoare reasoning . After , \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:n0> := <nat:1> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} & <var:n1> := <nat:2> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} \end{tabular} Jumping to the following statements in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:n0> := <nat:1> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} & <var:n1> := <nat:2> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} & <var:n1> := <var:n1> * <var:f> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> * <var:B> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> * <var:B> \} & <var:n2> := <nat:3> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> * <var:B> \land <var:n2> = <nat:3> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> * <var:B> \land <var:n2> = <nat:3> \} & <var:n2> := <var:n2> * <var:f> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> * <var:B> \land <var:n2> = <nat:3> * <var:B> \} \end{tabular} This is sound with the variable update inference rule defined in usual Hoare techniques . Taking a look at the proceeding lines in our series of commands , \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:n0> := <nat:1> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} \\ \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \} & <var:n1> := <nat:2> & \{ <var:f> = <var:B> \land <var:n0> = <nat:1> \land <var:n1> = <nat:2> \} \end{tabular} This is known to be sound through the environment update law given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:f> = <var:B> }} <var:n0> := <nat:1> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:f> ; <var:n2> := <nat:3> ; <var:n2> := <var:n2> * <var:f> ; <var:n2> := <var:n2> * <var:f> ; <var:H> := <var:n2> ; <var:H> := <var:H> + <var:n1> ; <var:H> := <var:H> + <var:n0> {{ <var:H> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:B> /\ <var:n2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:B> /\ <var:n2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:B> /\ <var:n2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:2> * <var:B> /\ <var:H> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:n0> = <nat:1> /\ <var:H> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:H> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 