\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:K> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:K> ; <var:o2> := <var:o2> * <var:K> ; <var:X> := <var:o2> ; <var:X> := <var:X> + <var:o1> ; <var:X> := <var:X> + <var:o0> \end{verbatim} Allowing , taking $ <var:v> \in \mathbb{Z}^+ $ , $ <var:K> = <var:v> $ before executing the program then we see $ <var:X> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is clear with standard Hoare logic . Taking a look at the following bit of code seen in our set of instructions , we see the binding statement binding $ <nat:6> $ as $ <var:o0>$ . This transfers $ \{ <var:K> = <var:v> \} $ into $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \} $ . This is guaranteed by the assignment law given by typical Hoare reasoning . Jumping to the following line of code seen in our series of commands , we see the variable update line \verb | <var:o1> := <nat:1> ; | . This statement forwards $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \} $ as the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} $ . This is guaranteed through the assignment law given in usual Hoare logic . Moving on to the next step , the environment update statement defining $ <var:o1> * <var:K> $ toward $ <var:o1>$ . This statement transfers the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} $ as the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \} $ . This is known to be sound using the assignment scheme obtained from Hoare techniques . Going to the next step , we see the line \verb | <var:o2> := <nat:1> ; | . This transfers $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \} $ into $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \} $ . This is deduced with the assignment law obtained from standard Hoare techniques . Going forward , we see the environment update statement \verb | <var:o2> := <var:o2> * <var:K> ; | . This code forwards the precondition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \} $ toward the postcondition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \times <var:v> \} $ . This is rigorously given by the assignment inference rule defined by standard Hoare logic . Moving forward , the binding line binding $ <var:o2> * <var:K> $ into $ <var:o2>$ . This forwards the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \times <var:v> \} $ toward the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \times <var:v> ^ <nat:2> \} $ . This is guaranteed by the assignment inference rule of standard Hoare techniques . Honing in on the proceeding statement contained in our series of commands , the line binding $ <var:o2> $ into $ <var:X>$ . This code transfers the precondition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:o2> = <nat:1> \times <var:v> ^ <nat:2> \} $ toward the postcondition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:X> = <nat:1> \times <var:v> ^ <nat:2> \} $ . This is given by the assignment law of typical Hoare reasoning . Focusing on the subsequent line of code contained in the list of instructions , we see the line assigning $ <var:X> + <var:o1> $ toward $ <var:X>$ . This takes the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \times <var:v> \land <var:X> = <nat:1> \times <var:v> ^ <nat:2> \} $ into the condition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:X> = <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> \} $ . This is ensured through the assignment rule given by Hoare reasoning . Stepping forward , the variable assignmet code \verb | <var:X> := <var:X> + <var:o0> | . This line takes the precondition $ \{ <var:K> = <var:v> \land <var:o0> = <nat:6> \land <var:X> = <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> \} $ toward the condition $ \{ <var:K> = <var:v> \land <var:X> = <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:K> = <var:v> }} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:K> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:K> ; <var:o2> := <var:o2> * <var:K> ; <var:X> := <var:o2> ; <var:X> := <var:X> + <var:o1> ; <var:X> := <var:X> + <var:o0> {{ <var:X> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:o0> = <nat:6> /\ <var:X> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:v> /\ <var:X> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 