\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> \end{verbatim} Allow --- letting natural coefficients $ <var:F> $ --- that $ <var:n> = <var:F> $ before executing the series of commands then $ <var:I> = <nat:2> \cdot <var:F> ^ <nat:12> + <nat:1> \cdot <var:F> ^ <nat:11> + <nat:2> \cdot <var:F> ^ <nat:10> + <nat:3> \cdot <var:F> ^ <nat:8> + <nat:2> \cdot <var:F> ^ <nat:7> + <nat:3> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:3> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the series of commands is accomplished with typical Hoare techniques . Advancing , \verb | { <var:n> = <var:F> } <var:I> := <nat:2> { <var:n> = <var:F> \land <var:I> = <nat:2> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> + <nat:1> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> + <nat:1> } <var:I> := <nat:2> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:2> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:2> } <var:I> := <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + } <var:I> := <nat:3> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:3> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:3> } <var:I> := <nat:2> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> + <nat:2> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> + <nat:2> } <var:I> := <nat:3> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:2> \cdot <var:F> ^ <nat:4> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:3> } | , \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:2> \cdot <var:F> ^ <nat:4> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:3> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:7> + <nat:1> \cdot <var:F> ^ <nat:6> + <nat:2> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:1> } | and \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:7> + <nat:1> \cdot <var:F> ^ <nat:6> + <nat:2> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:1> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> ^ <nat:8> + <nat:1> \cdot <var:F> ^ <nat:7> + <nat:2> \cdot <var:F> ^ <nat:6> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:1> } | . This is guaranteed by the variable assignmet law obtained from standard Hoare reasoning . Considering the next bit of code found in the program , \verb | { <var:n> = <var:F> } <var:I> := <nat:2> { <var:n> = <var:F> \land <var:I> = <nat:2> } | . This is known to be sound by the binding law given by typical Hoare techniques . Going forward , we have \verb | { <var:n> = <var:F> } <var:I> := <nat:2> { <var:n> = <var:F> \land <var:I> = <nat:2> } | and \verb | { <var:n> = <var:F> \land <var:I> = <nat:2> } <var:I> := <nat:1> + <var:I> * <var:n> { <var:n> = <var:F> \land <var:I> = <nat:2> \cdot <var:F> + <nat:1> } | . This is given using the variable binding scheme found in Hoare reasoning . Moving forward to the subsequent line of code contained in our program , \verb | { <var:n> = <var:F> } <var:I> := <nat:2> { <var:n> = <var:F> \land <var:I> = <nat:2> } | . This is sound by the variable update law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <var:I> := <nat:2> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:2> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <nat:3> + <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> ; <var:I> := <var:I> * <var:n> ; <var:I> := <nat:1> + <var:I> * <var:n> {{ <var:I> = <nat:2> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:3> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:3> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:3> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:I> = <nat:2> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:2> * <var:F> ^ <nat:10> + <nat:3> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 