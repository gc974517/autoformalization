\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:4> + <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> ; <var:l> := <nat:3> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Assuming , for some $ <var:J> $ , that $ <var:z> = <var:J> $ ahead of the execution of the set of instructions then we see $ <var:l> = <nat:2> \cdot <var:J> ^ <nat:10> + <nat:2> \cdot <var:J> ^ <nat:9> + <nat:4> \cdot <var:J> ^ <nat:8> + <nat:1> \cdot <var:J> ^ <nat:7> + <nat:3> \cdot <var:J> ^ <nat:6> + <nat:2> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:1> $ when series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for this code can be done through Hoare techniques . Immediately following , we have \verb | { <var:z> = <var:J> } <var:l> := <nat:2> { <var:z> = <var:J> \land <var:l> = <nat:2> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> } <var:l> := <nat:2> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> + <nat:2> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> + <nat:2> } <var:l> := <nat:4> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:4> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:4> } <var:l> := <nat:1> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> } <var:l> := <nat:3> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> } <var:l> := <nat:2> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:2> } | and \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:2> } <var:l> := <nat:2> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:6> + <nat:2> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:2> } | . This is ensured with the environment update inference rule from Hoare techniques . Advancing to the upcoming commands in the list of instructions , \verb | { <var:z> = <var:J> } <var:l> := <nat:2> { <var:z> = <var:J> \land <var:l> = <nat:2> } | , \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> } <var:l> := <nat:2> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> + <nat:2> } | and \verb | { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> + <nat:2> } <var:l> := <nat:4> + <var:l> * <var:z> { <var:z> = <var:J> \land <var:l> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:4> } | . After , we have \verb | { <var:z> = <var:J> } <var:l> := <nat:2> { <var:z> = <var:J> \land <var:l> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:2> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:4> + <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> ; <var:l> := <nat:3> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> ; <var:l> := <nat:2> + <var:l> * <var:z> ; <var:l> := <var:l> * <var:z> ; <var:l> := <nat:1> + <var:l> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:l> = <nat:2> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:l> = <nat:2> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 