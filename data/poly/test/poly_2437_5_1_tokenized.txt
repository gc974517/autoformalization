\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:H> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:4> ; <var:c> := <var:W1> <var:c> := <var:c> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing for any positive integer coefficients $ <var:e> $ it to hold that $ <var:H> = <var:e> $ ahead of evaluating the set of instructions it holds that we see $ <var:c> = <nat:4> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is accomplished through typical Hoare techniques . Focusing on the upcoming statement seen in the set of instructions , we have \begin{verbatim} { <var:H> = <var:e> } <var:W1> := <var:H> { <var:H> = <var:e> \land <var:W1> = <var:e> } \end{verbatim} This is guaranteed using the environment update rule given in usual Hoare techniques . Moving onward , we have \begin{verbatim} { <var:H> = <var:e> } <var:W1> := <var:H> { <var:H> = <var:e> \land <var:W1> = <var:e> } { <var:H> = <var:e> \land <var:W1> = <var:e> } <var:W0> := <nat:2> { <var:H> = <var:e> \land <var:W1> = <var:e> \land <var:W0> = <nat:2> } \end{verbatim} This is known to be sound with the variable update scheme defined in Hoare reasoning . Going forward , \begin{verbatim} { <var:H> = <var:e> } <var:W1> := <var:H> { <var:H> = <var:e> \land <var:W1> = <var:e> } \end{verbatim} This is ensured using the rule in typical Hoare techniques . Advancing to the following line in the code segment , \begin{verbatim} { <var:H> = <var:e> } <var:W1> := <var:H> { <var:H> = <var:e> \land <var:W1> = <var:e> } \end{verbatim} This is shown to be logically sound using the variable binding scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:H> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:4> ; <var:c> := <var:W1> <var:c> := <var:c> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:H> = <var:e> }} <def:poly> {{ <var:c> = <nat:4> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:W1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:W1> = <var:e> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:W1> = <nat:4> * <var:e> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:W0> = <nat:2> /\ <var:c> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:e> /\ <var:c> = <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 