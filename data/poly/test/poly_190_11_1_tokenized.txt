\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:M> ; <var:t2> := <var:t1> * <var:M> ; <var:t3> := <var:t2> * <var:M> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:1> ; <var:r> := <var:t3> <var:r> := <var:r> + <var:t2> <var:r> := <var:r> + <var:t1> <var:r> := <var:r> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:M> = <var:R> $ ahead of interpreting our list of instructions it must be that we have $ <var:r> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:R> \} \\ <var:t1> := <var:M> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <var:R> \} \\ <var:t2> := <var:t1> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <var:R> \land <var:t2> = <var:R> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:M> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <var:R> \land <var:t2> = <var:R> ^ <nat:2> \land <var:t3> = <var:R> ^ <nat:3> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <var:R> \land <var:t2> = <var:R> ^ <nat:2> \land <var:t3> = <var:R> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:1> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <nat:1> \cdot <var:R> \land <var:t2> = <var:R> ^ <nat:2> \land <var:t3> = <var:R> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:4> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <nat:1> \cdot <var:R> \land <var:t2> = <nat:4> \cdot <var:R> ^ <nat:2> \land <var:t3> = <var:R> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:t3> := <var:t3> * <nat:1> ; \\ \{ <var:M> = <var:R> \land <var:t1> = <nat:1> \cdot <var:R> \land <var:t2> = <nat:4> \cdot <var:R> ^ <nat:2> \land <var:t3> = <nat:1> \cdot <var:R> ^ <nat:3> \land <var:t0> = <nat:3> \} \\ <var:r> := <var:t3> \\ \{ <var:M> = <var:R> \land <var:t1> = <nat:1> \cdot <var:R> \land <var:t2> = <nat:4> \cdot <var:R> ^ <nat:2> \land <var:t0> = <nat:3> \land <var:r> = <nat:1> \cdot <var:R> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:t2> \\ \{ <var:M> = <var:R> \land <var:t1> = <nat:1> \cdot <var:R> \land <var:t0> = <nat:3> \land <var:r> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:t1> \\ \{ <var:M> = <var:R> \land <var:t0> = <nat:3> \land <var:r> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> \} \\ <var:r> := <var:r> + <var:t0> \\ \{ <var:M> = <var:R> \land <var:r> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:M> ; <var:t2> := <var:t1> * <var:M> ; <var:t3> := <var:t2> * <var:M> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:1> ; <var:r> := <var:t3> <var:r> := <var:r> + <var:t2> <var:r> := <var:r> + <var:t1> <var:r> := <var:r> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <def:poly> {{ <var:r> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <var:R> /\ <var:t2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <var:R> /\ <var:t2> = <var:R> ^ <nat:2> /\ <var:t3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <var:R> /\ <var:t2> = <var:R> ^ <nat:2> /\ <var:t3> = <var:R> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <nat:1> * <var:R> /\ <var:t2> = <var:R> ^ <nat:2> /\ <var:t3> = <var:R> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <nat:1> * <var:R> /\ <var:t2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:t3> = <var:R> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <nat:1> * <var:R> /\ <var:t2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:t3> = <nat:1> * <var:R> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <nat:1> * <var:R> /\ <var:t2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:t0> = <nat:3> /\ <var:r> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t1> = <nat:1> * <var:R> /\ <var:t0> = <nat:3> /\ <var:r> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:t0> = <nat:3> /\ <var:r> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:r> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 