\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} : \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:d> ; <var:o> := <nat:4> + <var:o> * <var:d> ; <var:o> := <nat:2> + <var:o> * <var:d> ; <var:o> := <nat:4> + <var:o> * <var:d> \end{verbatim} Assuming that $ <var:d> = <var:O> $ ahead of executing the set of instructions , it holds that we have $ <var:o> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:4> $ once list of instructions has executed . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:d> = <var:O> \} \\ <var:o> := <nat:4> ; \\ \{ <var:d> = <var:O> \land <var:o> = <nat:4> \} \\ <var:o> := <nat:1> + <var:o> * <var:d> ; \\ \{ <var:d> = <var:O> \land <var:o> = <nat:4> \cdot <var:O> + <nat:1> \} \\ <var:o> := <nat:4> + <var:o> * <var:d> ; \\ \{ <var:d> = <var:O> \land <var:o> = <nat:4> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:d> ; \\ \{ <var:d> = <var:O> \land <var:o> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> \} \\ <var:o> := <nat:4> + <var:o> * <var:d> \\ \{ <var:d> = <var:O> \land <var:o> = <nat:4> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:4> \} \end{eqnarray} As a result , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:d> = <var:O> }} <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:d> ; <var:o> := <nat:4> + <var:o> * <var:d> ; <var:o> := <nat:2> + <var:o> * <var:d> ; <var:o> := <nat:4> + <var:o> * <var:d> {{ <var:o> = <nat:4> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:o> = <nat:4> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:o> = <nat:4> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:o> = <nat:4> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:O> /\ <var:o> = <nat:4> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 