\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:J> ; <var:n2> := <nat:6> ; <var:n2> := <var:n2> * <var:J> ; <var:n2> := <var:n2> * <var:J> ; <var:n3> := <nat:2> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:i> := <var:n3> ; <var:i> := <var:i> + <var:n2> ; <var:i> := <var:i> + <var:n1> ; <var:i> := <var:i> + <var:n0> \end{verbatim} Given it to hold that $ <var:J> = <var:U> $ ahead of executing our list of commands it must be that we have $ <var:i> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:1> $ once list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:U> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \} \\ <var:n2> := <nat:6> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \} \\ <var:n2> := <var:n2> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> \} \\ <var:n2> := <var:n2> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \} \\ <var:n3> := <nat:2> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:n3> = <nat:2> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:n3> = <nat:2> \cdot <var:U> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:n3> = <nat:2> \cdot <var:U> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:n3> = <nat:2> \cdot <var:U> ^ <nat:3> \} \\ <var:i> := <var:n3> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:n2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:i> = <nat:2> \cdot <var:U> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:n2> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:3> \cdot <var:U> \land <var:i> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:n1> ; \\ \{ <var:J> = <var:U> \land <var:n0> = <nat:1> \land <var:i> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> \} \\ <var:i> := <var:i> + <var:n0> \\ \{ <var:J> = <var:U> \land <var:i> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:1> \} \end{eqnarray} Applying Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:J> = <var:U> }} <var:n0> := <nat:1> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:J> ; <var:n2> := <nat:6> ; <var:n2> := <var:n2> * <var:J> ; <var:n2> := <var:n2> * <var:J> ; <var:n3> := <nat:2> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:n3> := <var:n3> * <var:J> ; <var:i> := <var:n3> ; <var:i> := <var:i> + <var:n2> ; <var:i> := <var:i> + <var:n1> ; <var:i> := <var:i> + <var:n0> {{ <var:i> = <nat:2> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:n3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:n2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:i> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:3> * <var:U> /\ <var:i> = <nat:2> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:n0> = <nat:1> /\ <var:i> = <nat:2> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:i> = <nat:2> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 