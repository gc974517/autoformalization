\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:i> ; <var:K> := <nat:4> + <var:K> * <var:i> ; <var:K> := <nat:3> + <var:K> * <var:i> ; <var:K> := <nat:2> + <var:K> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Given that $ <var:i> = <var:f> $ prior to executing our segment of code then we see $ <var:K> = <nat:1> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + <nat:2> $ after series of instructions executes . \end{theorem} \begin{proof} Proving correctness for this program can be done by typical Hoare techniques . Moving onward , the statement letting $ <nat:1> $ toward $ <var:K>$ . This redefines the precondition $ \{ <var:i> = <var:f> \} $ into the condition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \} $ . This is deduced with the assignment law given in usual Hoare techniques . Moving on to the proceeding command contained in the list of instructions , we have the assignment code \verb | <var:K> := <nat:1> + <var:K> * <var:i> ; | . This redefines the precondition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \} $ as $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> + <nat:1> \} $ . This is ensured with the assignment scheme from usual Hoare reasoning . Advancing on , we have the variable assignmet command \verb | <var:K> := <nat:4> + <var:K> * <var:i> ; | . This line transfers the precondition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> + <nat:1> \} $ toward the condition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:4> \} $ . This is sound using the assignment scheme of Hoare reasoning . Taking another step toward the proceeding step found in the program , we see the command \verb | <var:K> := <nat:3> + <var:K> * <var:i> ; | . This transfers the condition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:4> \} $ as $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:3> \} $ . This is known to be sound with the assignment rule found in Hoare techniques . Paying attention to the upcoming piece of code contained in the code , the binding command \verb | <var:K> := <nat:2> + <var:K> * <var:i> | . This line redefines the condition $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:3> \} $ toward $ \{ <var:i> = <var:f> \land <var:K> = <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:i> ; <var:K> := <nat:4> + <var:K> * <var:i> ; <var:K> := <nat:3> + <var:K> * <var:i> ; <var:K> := <nat:2> + <var:K> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:i> = <var:f> }} <def:poly> {{ <var:K> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:K> = <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:K> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:K> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:f> /\ <var:K> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 