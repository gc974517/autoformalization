\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:2> ; <var:r> := <var:q0> \end{verbatim} Assume it to hold that $ <var:z> = <var:b> $ ( given positive coefficients $ <var:b> $ ) prior to the execution of our list of commands , it holds that we see $ <var:r> = <nat:2> $ when series of commands is done executing . \end{theorem} \begin{proof} The course of logic for our list of commands can be seen with standard Hoare reasoning . Jumping to the following steps contained in our code segment , we have \begin{eqnarray} \{ <var:z> = <var:b> \} \, <var:q0> := <nat:2> \, \{ <var:z> = <var:b> \land <var:q0> = <nat:2> \} \\ \{ <var:z> = <var:b> \land <var:q0> = <nat:2> \} \, <var:r> := <var:q0\, \{ <var:z> = <var:b> \land <var:r> = <nat:2> \} \end{eqnarray} This is given with the inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:z> = <var:b> }} <var:q0> := <nat:2> ; <var:r> := <var:q0> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 