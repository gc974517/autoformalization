\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:z> := <var:P0> \end{verbatim} Allow it to be that $ <var:m> = <var:T> $ given any $ <var:T> $ ahead of running the series of instructions then we have $ <var:z> = <nat:2> $ once set of instructions terminates . \end{theorem} \begin{proof} The flow of logic for our segment of code is accomplished using standard Hoare techniques . Advancing , we have the environment update line letting $ <nat:2> $ into $ <var:P0>$ . This forwards the precondition $ \{ <var:m> = <var:T> \} $ toward $ \{ <var:m> = <var:T> \land <var:P0> = <nat:2> \} $ . Honing in on the upcoming line of code seen in the code , the environment update line \verb | <var:z> := <var:P0> | . This moves the precondition $ \{ <var:m> = <var:T> \land <var:P0> = <nat:2> \} $ as $ \{ <var:m> = <var:T> \land <var:z> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:m> = <var:T> }} <var:P0> := <nat:2> ; <var:z> := <var:P0> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:T> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 