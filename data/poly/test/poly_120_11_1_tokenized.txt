\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:4> ; <var:k> := <var:C3> <var:k> := <var:k> + <var:C2> <var:k> := <var:k> + <var:C1> <var:k> := <var:k> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assume for integers $ <var:W> $ that we have $ <var:i> = <var:W> $ before executing the series of commands then $ <var:k> = <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> $ after code has exited . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:C1> := <var:i> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <var:W> \} \\ <var:C2> := <var:C1> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:i> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ <var:C1> := <var:C1> * <nat:4> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <nat:4> \times <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ <var:C2> := <var:C2> * <nat:1> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <nat:4> \times <var:W> \land <var:C2> = <nat:1> \times <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ <var:C3> := <var:C3> * <nat:4> ; \\ \{ <var:i> = <var:W> \land <var:C1> = <nat:4> \times <var:W> \land <var:C2> = <nat:1> \times <var:W> ^ <nat:2> \land <var:C3> = <nat:4> \times <var:W> ^ <nat:3> \land <var:C0> = <nat:4> \} \\ <var:k> := <var:C3> \\ \{ <var:i> = <var:W> \land <var:C1> = <nat:4> \times <var:W> \land <var:C2> = <nat:1> \times <var:W> ^ <nat:2> \land <var:C0> = <nat:4> \land <var:k> = <nat:4> \times <var:W> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:C2> \\ \{ <var:i> = <var:W> \land <var:C1> = <nat:4> \times <var:W> \land <var:C0> = <nat:4> \land <var:k> = <nat:4> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:C1> \\ \{ <var:i> = <var:W> \land <var:C0> = <nat:4> \land <var:k> = <nat:4> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> \} \\ <var:k> := <var:k> + <var:C0> \\ \{ <var:i> = <var:W> \land <var:k> = <nat:4> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:4> \} \end{eqnarray} Considering the above , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:i> ; <var:C2> := <var:C1> * <var:i> ; <var:C3> := <var:C2> * <var:i> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:1> ; <var:C3> := <var:C3> * <nat:4> ; <var:k> := <var:C3> <var:k> := <var:k> + <var:C2> <var:k> := <var:k> + <var:C1> <var:k> := <var:k> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <def:poly> {{ <var:k> = <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <nat:4> * <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <nat:4> * <var:W> /\ <var:C2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <nat:4> * <var:W> /\ <var:C2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:W> ^ <nat:3> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <nat:4> * <var:W> /\ <var:C2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:C0> = <nat:4> /\ <var:k> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C1> = <nat:4> * <var:W> /\ <var:C0> = <nat:4> /\ <var:k> = <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:C0> = <nat:4> /\ <var:k> = <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:k> = <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 