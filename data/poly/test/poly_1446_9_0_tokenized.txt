\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:a0> := <nat:5> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:M> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:M> ; <var:a2> := <var:a2> * <var:M> ; <var:x> := <var:a2> ; <var:x> := <var:x> + <var:a1> ; <var:x> := <var:x> + <var:a0> \end{verbatim} Given it to be that $ <var:M> = <var:b> $ before running this code segment it must be that $ <var:x> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is given by this decorated segment of code . \begin{eqnarray} \{ <var:M> = <var:b> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \times <var:b> \} \\ <var:a2> := <nat:8> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \times <var:b> \land <var:a2> = <nat:8> \} \\ <var:a2> := <var:a2> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \times <var:b> \land <var:a2> = <nat:8> \times <var:b> \} \\ <var:a2> := <var:a2> * <var:M> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \times <var:b> \land <var:a2> = <nat:8> \times <var:b> ^ <nat:2> \} \\ <var:x> := <var:a2> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:a1> = <nat:2> \times <var:b> \land <var:x> = <nat:8> \times <var:b> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:a1> ; \\ \{ <var:M> = <var:b> \land <var:a0> = <nat:5> \land <var:x> = <nat:8> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> \} \\ <var:x> := <var:x> + <var:a0> \\ \{ <var:M> = <var:b> \land <var:x> = <nat:8> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:5> \} \end{eqnarray} The application of typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:M> = <var:b> }} <var:a0> := <nat:5> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:M> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:M> ; <var:a2> := <var:a2> * <var:M> ; <var:x> := <var:a2> ; <var:x> := <var:x> + <var:a1> ; <var:x> := <var:x> + <var:a0> {{ <var:x> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:b> /\ <var:a2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:b> /\ <var:a2> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:b> /\ <var:a2> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:2> * <var:b> /\ <var:x> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:a0> = <nat:5> /\ <var:x> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:x> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 