\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:A> ; <var:n2> := <var:n1> * <var:A> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:3> ; <var:e> := <var:n2> <var:e> := <var:e> + <var:n1> <var:e> := <var:e> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Allowing that we have $ <var:A> = <var:u> $ before running the code it holds that $ <var:e> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:u> \} \\ <var:n1> := <var:A> ; \\ \{ <var:A> = <var:u> \land <var:n1> = <var:u> \} \\ <var:n2> := <var:n1> * <var:A> ; \\ \{ <var:A> = <var:u> \land <var:n1> = <var:u> \land <var:n2> = <var:u> ^ <nat:2> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:A> = <var:u> \land <var:n1> = <var:u> \land <var:n2> = <var:u> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:A> = <var:u> \land <var:n1> = <nat:3> \cdot <var:u> \land <var:n2> = <var:u> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:n2> := <var:n2> * <nat:3> ; \\ \{ <var:A> = <var:u> \land <var:n1> = <nat:3> \cdot <var:u> \land <var:n2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:n0> = <nat:9> \} \\ <var:e> := <var:n2> \\ \{ <var:A> = <var:u> \land <var:n1> = <nat:3> \cdot <var:u> \land <var:n0> = <nat:9> \land <var:e> = <nat:3> \cdot <var:u> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:n1> \\ \{ <var:A> = <var:u> \land <var:n0> = <nat:9> \land <var:e> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> \} \\ <var:e> := <var:e> + <var:n0> \\ \{ <var:A> = <var:u> \land <var:e> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:9> \} \end{eqnarray} As a result , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:A> ; <var:n2> := <var:n1> * <var:A> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:3> ; <var:e> := <var:n2> <var:e> := <var:e> + <var:n1> <var:e> := <var:e> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:A> = <var:u> }} <def:poly> {{ <var:e> = <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <var:u> /\ <var:n2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <var:u> /\ <var:n2> = <var:u> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <nat:3> * <var:u> /\ <var:n2> = <var:u> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <nat:3> * <var:u> /\ <var:n2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n1> = <nat:3> * <var:u> /\ <var:n0> = <nat:9> /\ <var:e> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:n0> = <nat:9> /\ <var:e> = <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:e> = <nat:3> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 