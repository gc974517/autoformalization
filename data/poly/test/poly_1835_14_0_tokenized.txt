\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:A0> := <nat:8> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:j> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:j> ; <var:A2> := <var:A2> * <var:j> ; <var:A3> := <nat:1> ; <var:A3> := <var:A3> * <var:j> ; <var:A3> := <var:A3> * <var:j> ; <var:A3> := <var:A3> * <var:j> ; <var:y> := <var:A3> ; <var:y> := <var:y> + <var:A2> ; <var:y> := <var:y> + <var:A1> ; <var:y> := <var:y> + <var:A0> \end{verbatim} Allowing ( given positive numbers $ <var:u> $ ) $ <var:j> = <var:u> $ ahead of the evaluation of the set of commands then we have $ <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> + <nat:8> $ when program has executed . \end{theorem} \begin{proof} Proving correctness for our code segment can be shown with typical Hoare techniques . Considering the next line found in our set of commands , the variable update statement defining $ <nat:8> $ to $ <var:A0>$ . This moves the condition $ \{ <var:j> = <var:u> \} $ to the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \} $ . This is deduced by the assignment law from standard Hoare reasoning . Now , the line \verb | <var:A1> := <nat:5> ; | . This statement redefines $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \} $ into the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \} $ . This is sound with the assignment rule obtained from Hoare techniques . Observing the proceeding step in the series of instructions , the binding code yielding $ <var:A1> * <var:j> $ toward $ <var:A1>$ . This command moves the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \} $ into the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \} $ . Shifting focus toward the next piece of code found in our series of instructions , the assignment line \verb | <var:A2> := <nat:2> ; | . This advances $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \} $ toward the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \} $ . This is given through the assignment rule defined by Hoare techniques . Moving forward to the next line in the program , the variable assignmet statement yielding $ <var:A2> * <var:j> $ to $ <var:A2>$ . This code moves the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \} $ as the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> \} $ . Honing in on the next piece of code contained in the segment of code , the variable binding statement \verb | <var:A2> := <var:A2> * <var:j> ; | . This statement takes the precondition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> \} $ to the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \} $ . Observing the following command contained in the code , we have the binding command yielding $ <nat:1> $ into $ <var:A3>$ . This redefines $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \} $ into the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \} $ . Stepping through , we see the code defining $ <var:A3> * <var:j> $ to $ <var:A3>$ . This command takes the precondition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \} $ to $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> \} $ . Considering the subsequent piece of code seen in the set of commands , the variable update command \verb | <var:A3> := <var:A3> * <var:j> ; | . This moves $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> \} $ to $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> ^ <nat:2> \} $ . This is sound with the assignment rule defined in typical Hoare reasoning . Considering the subsequent piece of code seen in our series of instructions , the assignment command \verb | <var:A3> := <var:A3> * <var:j> ; | . This line takes the precondition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> ^ <nat:2> \} $ into $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> ^ <nat:3> \} $ . Stepping forward , the variable binding statement giving $ <var:A3> $ toward $ <var:y>$ . This statement takes the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:A3> = <nat:1> \times <var:u> ^ <nat:3> \} $ toward $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> \} $ . Stepping forward , the variable binding code \verb | <var:y> := <var:y> + <var:A2> ; | . This statement advances the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:A2> = <nat:2> \times <var:u> ^ <nat:2> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule defined in standard Hoare techniques . Immediately after , we see the statement \verb | <var:y> := <var:y> + <var:A1> ; | . This advances $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:A1> = <nat:5> \times <var:u> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> \} $ . Advancing to the upcoming step found in the set of instructions , we see the code \verb | <var:y> := <var:y> + <var:A0> | . This command takes the precondition $ \{ <var:j> = <var:u> \land <var:A0> = <nat:8> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> \} $ as $ \{ <var:j> = <var:u> \land <var:y> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> + <nat:8> \} $ . This is shown by the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:j> = <var:u> }} <var:A0> := <nat:8> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:j> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:j> ; <var:A2> := <var:A2> * <var:j> ; <var:A3> := <nat:1> ; <var:A3> := <var:A3> * <var:j> ; <var:A3> := <var:A3> * <var:j> ; <var:A3> := <var:A3> * <var:j> ; <var:y> := <var:A3> ; <var:y> := <var:y> + <var:A2> ; <var:y> := <var:y> + <var:A1> ; <var:y> := <var:y> + <var:A0> {{ <var:y> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:A3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:A2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:y> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:A1> = <nat:5> * <var:u> /\ <var:y> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A0> = <nat:8> /\ <var:y> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:y> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 