\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:s1> := <var:v> ; <var:s2> := <var:s1> * <var:v> ; <var:s3> := <var:s2> * <var:v> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:8> ; <var:s3> := <var:s3> * <nat:3> ; <var:W> := <var:s3> <var:W> := <var:W> + <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> \end{verbatim} Assuming it to hold that $ <var:v> = <var:a> $ prior to the evaluation of the list of commands it follows that we have $ <var:W> = <nat:3> \times <var:a> ^ <nat:3> + <nat:8> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:2> $ once list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:a> \} \\ <var:s1> := <var:v> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <var:a> \} \\ <var:s2> := <var:s1> * <var:v> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:v> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s1> := <var:s1> * <nat:2> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <nat:2> * <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s2> := <var:s2> * <nat:8> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <nat:2> * <var:a> \land <var:s2> = <nat:8> * <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:v> = <var:a> \land <var:s1> = <nat:2> * <var:a> \land <var:s2> = <nat:8> * <var:a> ^ <nat:2> \land <var:s3> = <nat:3> * <var:a> ^ <nat:3> \land <var:s0> = <nat:2> \} \\ <var:W> := <var:s3> \\ \{ <var:v> = <var:a> \land <var:s1> = <nat:2> * <var:a> \land <var:s2> = <nat:8> * <var:a> ^ <nat:2> \land <var:s0> = <nat:2> \land <var:W> = <nat:3> * <var:a> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:s2> \\ \{ <var:v> = <var:a> \land <var:s1> = <nat:2> * <var:a> \land <var:s0> = <nat:2> \land <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:s1> \\ \{ <var:v> = <var:a> \land <var:s0> = <nat:2> \land <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:2> * <var:a> \} \\ <var:W> := <var:W> + <var:s0> \\ \{ <var:v> = <var:a> \land <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:v> = <var:a> }} <var:s1> := <var:v> ; <var:s2> := <var:s1> * <var:v> ; <var:s3> := <var:s2> * <var:v> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:8> ; <var:s3> := <var:s3> * <nat:3> ; <var:W> := <var:s3> <var:W> := <var:W> + <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> {{ <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <nat:2> * <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <nat:2> * <var:a> /\ <var:s2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <nat:2> * <var:a> /\ <var:s2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:a> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <nat:2> * <var:a> /\ <var:s2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s1> = <nat:2> * <var:a> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:a> /\ <var:W> = <nat:3> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 