\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:5> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:q3> := <nat:9> ; <var:q3> := <var:q3> * <var:s> ; <var:q3> := <var:q3> * <var:s> ; <var:q3> := <var:q3> * <var:s> ; <var:h> := <var:q3> ; <var:h> := <var:h> + <var:q2> ; <var:h> := <var:h> + <var:q1> ; <var:h> := <var:h> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allow that we have $ <var:s> = <var:U> $ ahead of evaluating the program , then $ <var:h> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be done by Hoare techniques . Taking a look at the proceeding steps found in the code , \verb | { <var:s> = <var:U> } <var:q0> := <nat:5> { <var:s> = <var:U> \land <var:q0> = <nat:5> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> } <var:q1> := <nat:5> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> } <var:q1> := <var:q1> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> } <var:q2> := <nat:6> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> } | and \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> } <var:q2> := <var:q2> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> } | . After , we have \verb | { <var:s> = <var:U> } <var:q0> := <nat:5> { <var:s> = <var:U> \land <var:q0> = <nat:5> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> } <var:q1> := <nat:5> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> } <var:q1> := <var:q1> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> } <var:q2> := <nat:6> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> } <var:q2> := <var:q2> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> } <var:q2> := <var:q2> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> } <var:q3> := <nat:9> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:9> } | , \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:9> } <var:q3> := <var:q3> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:9> \times <var:U> } | and \verb | { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:9> \times <var:U> } <var:q3> := <var:q3> * <var:s> { <var:s> = <var:U> \land <var:q0> = <nat:5> \land <var:q1> = <nat:5> \times <var:U> \land <var:q2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:9> \times <var:U> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:q3> := <nat:9> ; <var:q3> := <var:q3> * <var:s> ; <var:q3> := <var:q3> * <var:s> ; <var:q3> := <var:q3> * <var:s> ; <var:h> := <var:q3> ; <var:h> := <var:h> + <var:q2> ; <var:h> := <var:h> + <var:q1> ; <var:h> := <var:h> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:s> = <var:U> }} <def:poly> {{ <var:h> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:9> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:9> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:q2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:h> = <nat:9> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:5> * <var:U> /\ <var:h> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:q0> = <nat:5> /\ <var:h> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:h> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 