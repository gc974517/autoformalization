\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:R> ; <var:Y> := <nat:3> + <var:Y> * <var:R> ; <var:Y> := <nat:1> + <var:Y> * <var:R> ; <var:Y> := <nat:1> + <var:Y> * <var:R> ; <var:Y> := <nat:2> + <var:Y> * <var:R> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming that $ <var:R> = <var:Q> $ , for some $ <var:Q> $ , ahead of interpreting our code segment then $ <var:Y> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be accomplished by standard Hoare logic . Looking at the proceeding statement seen in the list of commands , the binding statement \verb | <var:Y> := <nat:4> ; | . This transfers $ \{ <var:R> = <var:Q> \} $ to the condition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \} $ . This is shown to be logically sound with the assignment law given in usual Hoare techniques . Stepping through , we see the variable binding code \verb | <var:Y> := <var:Y> * <var:R> ; | . This redefines the condition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \} $ as the postcondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> + \} $ . Stepping through , the variable assignmet statement yielding $ <nat:3> + <var:Y> * <var:R> $ to $ <var:Y>$ . This statement forwards $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> + \} $ to $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:3> \} $ . Taking another step toward the upcoming line of code contained in our code segment , we have the variable update statement letting $ <nat:1> + <var:Y> * <var:R> $ to $ <var:Y>$ . This takes the precondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> + <nat:1> \} $ . Looking at the proceeding line seen in the list of commands , we have the code \verb | <var:Y> := <nat:1> + <var:Y> * <var:R> ; | . This code takes the condition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> + <nat:1> \} $ as the postcondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:1> \} $ . Observing the upcoming step in the code segment , we see the variable binding command \verb | <var:Y> := <nat:2> + <var:Y> * <var:R> | . This forwards the precondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:1> \} $ to the postcondition $ \{ <var:R> = <var:Q> \land <var:Y> = <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:4> ; <var:Y> := <var:Y> * <var:R> ; <var:Y> := <nat:3> + <var:Y> * <var:R> ; <var:Y> := <nat:1> + <var:Y> * <var:R> ; <var:Y> := <nat:1> + <var:Y> * <var:R> ; <var:Y> := <nat:2> + <var:Y> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:R> = <var:Q> }} <def:poly> {{ <var:Y> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Y> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 