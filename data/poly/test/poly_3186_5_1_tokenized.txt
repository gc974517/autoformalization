\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:J> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:6> ; <var:y> := <var:o1> <var:y> := <var:y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:J> = <var:W> $ ahead of executing the segment of code then $ <var:y> = <nat:6> \times <var:W> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:J> = <var:W> \} \\ <var:o1> := <var:J> ; \\ \{ <var:J> = <var:W> \land <var:o1> = <var:W> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:J> = <var:W> \land <var:o1> = <var:W> \land <var:o0> = <nat:2> \} \\ <var:o1> := <var:o1> * <nat:6> ; \\ \{ <var:J> = <var:W> \land <var:o1> = <nat:6> \times <var:W> \land <var:o0> = <nat:2> \} \\ <var:y> := <var:o1> \\ \{ <var:J> = <var:W> \land <var:o0> = <nat:2> \land <var:y> = <nat:6> \times <var:W> \} \\ <var:y> := <var:y> + <var:o0> \\ \{ <var:J> = <var:W> \land <var:y> = <nat:6> \times <var:W> + <nat:2> \} \end{eqnarray} As a result , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:J> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:6> ; <var:y> := <var:o1> <var:y> := <var:y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <def:poly> {{ <var:y> = <nat:6> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o1> = <var:W> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o1> = <nat:6> * <var:W> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:2> /\ <var:y> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:y> = <nat:6> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 