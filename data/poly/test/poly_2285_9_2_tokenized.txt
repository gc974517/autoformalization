\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:3> + <var:O> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Given it to hold that $ <var:N> = <var:x> $ ahead of evaluating this segment of code , then we see $ <var:O> = <nat:4> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:6> + <nat:2> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:3> $ once series of commands executes . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:N> = <var:x> \} \\ <var:O> := <nat:4> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:4> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> + <nat:4> \} \\ <var:O> := <nat:4> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} \end{eqnarray} Advancing running this list of commands yields : \begin{eqnarray} <var:O> := <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + \} \\ <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> \} \end{eqnarray} Allowing the execution of our segment of code produces : \begin{eqnarray} <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} \\ <var:O> := <nat:3> + <var:O> * <var:N> \\ \{ <var:N> = <var:x> \land <var:O> = <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> \} \end{eqnarray} Given the preceding argument , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:3> + <var:O> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <def:poly> {{ <var:O> = <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 