\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:d0> := <nat:7> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:j> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:j> ; <var:d2> := <var:d2> * <var:j> ; <var:R> := <var:d2> ; <var:R> := <var:R> + <var:d1> ; <var:R> := <var:R> + <var:d0> \end{verbatim} Assuming that we have $ <var:j> = <var:i> $ , for positive integers $ <var:i> $ , ahead of evaluating the list of commands , then $ <var:R> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:6> \cdot <var:i> + <nat:7> $ when program exits . \end{theorem} \begin{proof} Proving correctness for this list of commands is accomplished using Hoare logic . Advancing to the next step , we have the environment update code defining $ <nat:7> $ toward $ <var:d0>$ . This takes the condition $ \{ <var:j> = <var:i> \} $ as $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \} $ . This is known to be sound through the assignment scheme of typical Hoare logic . Looking at the upcoming command seen in our series of instructions , we see the variable binding command letting $ <nat:6> $ toward $ <var:d1>$ . This code redefines $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \} $ toward $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> \} $ . Moving onward , we see the variable assignmet statement binding $ <var:d1> * <var:j> $ to $ <var:d1>$ . This statement moves the precondition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> \} $ to the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \} $ . Taking another step toward the proceeding piece of code seen in our program , we see the binding line defining $ <nat:3> $ into $ <var:d2>$ . This command advances the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \} $ toward the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> \} $ . This is known to be sound through the assignment law of typical Hoare techniques . Moving on to the proceeding line seen in the code , we see the variable update code \verb | <var:d2> := <var:d2> * <var:j> ; | . This transfers $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> * <var:i> \} $ . This is ensured using the assignment rule given in usual Hoare reasoning . Further , we have the assignment statement assigning $ <var:d2> * <var:j> $ into $ <var:d2>$ . This forwards the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> * <var:i> \} $ toward the postcondition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> * <var:i> ^ <nat:2> \} $ . Going forward , we see the variable update statement yielding $ <var:d2> $ into $ <var:R>$ . This takes $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:d2> = <nat:3> * <var:i> ^ <nat:2> \} $ to $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:R> = <nat:3> * <var:i> ^ <nat:2> \} $ . This is known to be sound with the assignment scheme in Hoare techniques . Moving on to the subsequent bit of code in the series of instructions , we see the command \verb | <var:R> := <var:R> + <var:d1> ; | . This statement redefines the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:d1> = <nat:6> * <var:i> \land <var:R> = <nat:3> * <var:i> ^ <nat:2> \} $ to the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ . Honing in on the subsequent bit of code contained in our series of instructions , the environment update code giving $ <var:R> + <var:d0$ to $ <var:R>$ . This redefines the condition $ \{ <var:j> = <var:i> \land <var:d0> = <nat:7> \land <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ to the postcondition $ \{ <var:j> = <var:i> \land <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:7> \} $ . This is shown to be logically sound by the assignment inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:j> = <var:i> }} <var:d0> := <nat:7> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:j> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:j> ; <var:d2> := <var:d2> * <var:j> ; <var:R> := <var:d2> ; <var:R> := <var:R> + <var:d1> ; <var:R> := <var:R> + <var:d0> {{ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> * <var:i> /\ <var:d2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> * <var:i> /\ <var:d2> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> * <var:i> /\ <var:d2> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:6> * <var:i> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:d0> = <nat:7> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 