\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:1> ; <var:M> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume that $ <var:O> = <var:J> $ ahead of executing this series of instructions then we have $ <var:M> = <nat:1> $ once code has exited . \end{theorem} \begin{proof} The proof of the list of commands can be demonstrated with standard Hoare logic . Going forward , \begin{verbatim} { <var:O> = <var:J> } <var:x0> := <nat:1> { <var:O> = <var:J> \land <var:x0> = <nat:1> } { <var:O> = <var:J> \land <var:x0> = <nat:1> } <var:M> := <var:x0{ <var:O> = <var:J> \land <var:M> = <nat:1> } \end{verbatim} This is ensured using the assignment inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:M> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:O> = <var:J> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:J> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 