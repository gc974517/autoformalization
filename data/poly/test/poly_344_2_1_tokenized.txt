\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:9> ; <var:s> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:P> = <var:r> $ prior to executing our list of commands then we see $ <var:s> = <nat:9> $ once series of commands exits . \end{theorem} \begin{proof} The method of proof for our code segment can be shown with standard Hoare logic . Moving onward , we have \begin{verbatim} { <var:P> = <var:r> } <var:l0> := <nat:9> { <var:P> = <var:r> \land <var:l0> = <nat:9> } \end{verbatim} Following , we have \begin{verbatim} { <var:P> = <var:r> } <var:l0> := <nat:9> { <var:P> = <var:r> \land <var:l0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:9> ; <var:s> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:P> = <var:r> }} <def:poly> {{ <var:s> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:s> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 