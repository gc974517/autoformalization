\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:4> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Z> ; <var:G> := <var:N1> ; <var:G> := <var:G> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allowing that we have $ <var:Z> = <var:w> $ before evaluating the code then we see $ <var:G> = <nat:1> \cdot <var:w> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program can be done through usual Hoare logic . Considering the following piece of code in the series of instructions , we have the variable binding line yielding $ <nat:4> $ toward $ <var:N0>$ . This takes the condition $ \{ <var:Z> = <var:w> \} $ toward the condition $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \} $ . Following , we see the environment update line \verb | <var:N1> := <nat:1> ; | . This line takes the condition $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \} $ to the condition $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:N1> = <nat:1> \} $ . This is deduced with the assignment rule in usual Hoare logic . Advancing to the upcoming step in the set of commands , we see the variable assignmet statement \verb | <var:N1> := <var:N1> * <var:Z> ; | . This moves the condition $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:N1> = <nat:1> \} $ to $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:N1> = <nat:1> * <var:w> \} $ . Advancing to the upcoming line of code contained in our set of commands , we have the assignment command \verb | <var:G> := <var:N1> ; | . This command transfers $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:N1> = <nat:1> * <var:w> \} $ toward the condition $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:G> = <nat:1> * <var:w> \} $ . This is known to be sound by the assignment rule in usual Hoare reasoning . Observing the following step found in our set of commands , the assignment statement \verb | <var:G> := <var:G> + <var:N0> | . This transfers $ \{ <var:Z> = <var:w> \land <var:N0> = <nat:4> \land <var:G> = <nat:1> * <var:w> \} $ toward the postcondition $ \{ <var:Z> = <var:w> \land <var:G> = <nat:1> * <var:w> + <nat:4> \} $ . This is sound through the assignment law of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:Z> ; <var:G> := <var:N1> ; <var:G> := <var:G> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <def:poly> {{ <var:G> = <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:N0> = <nat:4> /\ <var:G> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:G> = <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 