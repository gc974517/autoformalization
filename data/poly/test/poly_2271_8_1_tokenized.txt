\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:d1> := <var:R> ; <var:d2> := <var:d1> * <var:R> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:6> ; <var:h> := <var:d2> <var:h> := <var:h> + <var:d1> <var:h> := <var:h> + <var:d0> \end{verbatim} Allow , letting positive integer coefficients $ <var:F> $ , it to hold that $ <var:R> = <var:F> $ prior to the evaluation of the set of instructions then we have $ <var:h> = <nat:6> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> + <nat:4> $ when code segment executes . \end{theorem} \begin{proof} The way to prove correctness for our program is clear through typical Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:F> \} & <var:d1> := <var:R> & \{ <var:R> = <var:F> \land <var:d1> = <var:F> \} \\ \{ <var:R> = <var:F> \land <var:d1> = <var:F> \} & <var:d2> := <var:d1> * <var:R> & \{ <var:R> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \} \\ \{ <var:R> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \} & <var:d0> := <nat:4> & \{ <var:R> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} \\ \{ <var:R> = <var:F> \land <var:d1> = <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} & <var:d1> := <var:d1> * <nat:8> & \{ <var:R> = <var:F> \land <var:d1> = <nat:8> \cdot <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} \\ \{ <var:R> = <var:F> \land <var:d1> = <nat:8> \cdot <var:F> \land <var:d2> = <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} & <var:d2> := <var:d2> * <nat:6> & \{ <var:R> = <var:F> \land <var:d1> = <nat:8> \cdot <var:F> \land <var:d2> = <nat:6> \cdot <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} \\ \{ <var:R> = <var:F> \land <var:d1> = <nat:8> \cdot <var:F> \land <var:d2> = <nat:6> \cdot <var:F> ^ <nat:2> \land <var:d0> = <nat:4> \} & <var:h> := <var:d2& \{ <var:R> = <var:F> \land <var:d1> = <nat:8> \cdot <var:F> \land <var:d0> = <nat:4> \land <var:h> = <nat:6> \cdot <var:F> ^ <nat:2> \} \end{tabular} This is rigorously given by the variable binding scheme defined in usual Hoare logic . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:R> = <var:F> \} & <var:d1> := <var:R> & \{ <var:R> = <var:F> \land <var:d1> = <var:F> \} \end{tabular} Moving on to the following bit of code seen in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:F> \} & <var:d1> := <var:R> & \{ <var:R> = <var:F> \land <var:d1> = <var:F> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:R> = <var:F> }} <var:d1> := <var:R> ; <var:d2> := <var:d1> * <var:R> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:6> ; <var:h> := <var:d2> <var:h> := <var:h> + <var:d1> <var:h> := <var:h> + <var:d0> {{ <var:h> = <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <var:F> /\ <var:d2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <var:F> /\ <var:d2> = <var:F> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <nat:8> * <var:F> /\ <var:d2> = <var:F> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <nat:8> * <var:F> /\ <var:d2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d1> = <nat:8> * <var:F> /\ <var:d0> = <nat:4> /\ <var:h> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:d0> = <nat:4> /\ <var:h> = <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:h> = <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 