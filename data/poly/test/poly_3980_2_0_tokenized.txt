\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:p0> := <nat:7> ; <var:o> := <var:p0> \end{verbatim} Assuming that $ <var:H> = <var:h> $ ( with some natural numbers $ <var:h> $ ) ahead of the execution of our series of commands then $ <var:o> = <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be seen through usual Hoare techniques . Stepping forward , the assignment statement binding $ <nat:7> $ to $ <var:p0>$ . This command forwards the condition $ \{ <var:H> = <var:h> \} $ into the condition $ \{ <var:H> = <var:h> \land <var:p0> = <nat:7> \} $ . Considering the upcoming line of code contained in the program , the code \verb | <var:o> := <var:p0> | . This statement advances $ \{ <var:H> = <var:h> \land <var:p0> = <nat:7> \} $ toward $ \{ <var:H> = <var:h> \land <var:o> = <nat:7> \} $ . This is ensured through the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:H> = <var:h> }} <var:p0> := <nat:7> ; <var:o> := <var:p0> {{ <var:o> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:o> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 