\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:7> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:E> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:E> ; <var:n2> := <var:n2> * <var:E> ; <var:n3> := <nat:4> ; <var:n3> := <var:n3> * <var:E> ; <var:n3> := <var:n3> * <var:E> ; <var:n3> := <var:n3> * <var:E> ; <var:e> := <var:n3> ; <var:e> := <var:e> + <var:n2> ; <var:e> := <var:e> + <var:n1> ; <var:e> := <var:e> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given ( given all positive integer coefficients $ <var:B> $ ) that $ <var:E> = <var:B> $ ahead of interpreting our series of instructions then we have $ <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> + <nat:7> $ when list of instructions is done . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:E> = <var:B> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \} \\ <var:n1> := <nat:6> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \} \\ <var:n1> := <var:n1> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \} \\ <var:n2> := <nat:8> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \} \\ <var:n2> := <var:n2> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> \} \\ <var:n2> := <var:n2> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \} \\ <var:n3> := <nat:4> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \land <var:n3> = <nat:4> \} \\ <var:n3> := <var:n3> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:B> \} \\ <var:n3> := <var:n3> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:n3> := <var:n3> * <var:E> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:B> ^ <nat:3> \} \\ <var:e> := <var:n3> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:n2> = <nat:8> \cdot <var:B> ^ <nat:2> \land <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:n2> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:n1> = <nat:6> \cdot <var:B> \land <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:n1> ; \\ \{ <var:E> = <var:B> \land <var:n0> = <nat:7> \land <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> \} \\ <var:e> := <var:e> + <var:n0> \\ \{ <var:E> = <var:B> \land <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> + <nat:7> \} \end{eqnarray} Considering the above , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:7> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:E> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:E> ; <var:n2> := <var:n2> * <var:E> ; <var:n3> := <nat:4> ; <var:n3> := <var:n3> * <var:E> ; <var:n3> := <var:n3> * <var:E> ; <var:n3> := <var:n3> * <var:E> ; <var:e> := <var:n3> ; <var:e> := <var:e> + <var:n2> ; <var:e> := <var:e> + <var:n1> ; <var:e> := <var:e> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:E> = <var:B> }} <def:poly> {{ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:n2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:6> * <var:B> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:n0> = <nat:7> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 