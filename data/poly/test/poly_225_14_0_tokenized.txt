\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:L> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:L> ; <var:s2> := <var:s2> * <var:L> ; <var:s3> := <nat:3> ; <var:s3> := <var:s3> * <var:L> ; <var:s3> := <var:s3> * <var:L> ; <var:s3> := <var:s3> * <var:L> ; <var:z> := <var:s3> ; <var:z> := <var:z> + <var:s2> ; <var:z> := <var:z> + <var:s1> ; <var:z> := <var:z> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:L> = <var:r> $ --- given every $ <var:r> $ --- before the execution of our set of commands it must be that we see $ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> $ after set of instructions has exited . \end{theorem} \begin{proof} The flow of logic for the set of commands is evident with usual Hoare logic . Stepping forward , we have the binding line binding $ <nat:3> $ to $ <var:s0>$ . This forwards the condition $ \{ <var:L> = <var:r> \} $ toward $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \} $ . After , the variable binding statement \verb | <var:s1> := <nat:3> ; | . This moves the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \} $ to $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \} $ . Keeping momentum , we see the variable binding line \verb | <var:s1> := <var:s1> * <var:L> ; | . This redefines the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \} $ to the postcondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \} $ . Taking another step toward the proceeding step found in the set of commands , the variable assignmet line letting $ <nat:3> $ toward $ <var:s2>$ . This code forwards the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \} $ into $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \} $ . Keeping momentum , we have the variable assignmet line \verb | <var:s2> := <var:s2> * <var:L> ; | . This statement advances $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \} $ into $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> \} $ . Focusing on the following step contained in our series of commands , we see the code \verb | <var:s2> := <var:s2> * <var:L> ; | . This takes $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> \} $ to the postcondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \} $ . Observing the following bit of code in our segment of code , we have the binding statement yielding $ <nat:3> $ into $ <var:s3>$ . This command advances the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \} $ to the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \} $ . This is known to be sound through the assignment law defined by usual Hoare logic . Stepping through , the variable binding command giving $ <var:s3> * <var:L> $ as $ <var:s3>$ . This redefines the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \} $ toward the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> \} $ . This is sound by the assignment inference rule obtained from standard Hoare reasoning . Jumping to the following step seen in the code segment , we have the assignment line binding $ <var:s3> * <var:L> $ toward $ <var:s3>$ . This command moves the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> \} $ as the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> ^ <nat:2> \} $ . Advancing to the next step , we see the variable assignmet command \verb | <var:s3> := <var:s3> * <var:L> ; | . This statement moves the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> ^ <nat:3> \} $ . Looking at the upcoming bit of code found in our code , we have the environment update statement \verb | <var:z> := <var:s3> ; | . This code redefines $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:s3> = <nat:3> \times <var:r> ^ <nat:3> \} $ toward the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> \} $ . This is guaranteed with the assignment law obtained from Hoare logic . Observing the upcoming bit of code seen in the list of instructions , we see the assignment statement giving $ <var:z> + <var:s2> $ into $ <var:z>$ . This transfers the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:s2> = <nat:3> \times <var:r> ^ <nat:2> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> \} $ to the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> \} $ . This is given through the assignment scheme defined by Hoare techniques . Honing in on the following bit of code in our series of instructions , the variable binding line binding $ <var:z> + <var:s1> $ toward $ <var:z>$ . This moves the precondition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:3> \times <var:r> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> \} $ into the condition $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} $ . This is ensured by the assignment law from typical Hoare techniques . Focusing on the upcoming bit of code in our series of commands , we have the variable assignmet statement \verb | <var:z> := <var:z> + <var:s0> | . This redefines $ \{ <var:L> = <var:r> \land <var:s0> = <nat:3> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} $ into the condition $ \{ <var:L> = <var:r> \land <var:z> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:3> \} $ . This is deduced using the assignment inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:L> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:L> ; <var:s2> := <var:s2> * <var:L> ; <var:s3> := <nat:3> ; <var:s3> := <var:s3> * <var:L> ; <var:s3> := <var:s3> * <var:L> ; <var:s3> := <var:s3> * <var:L> ; <var:z> := <var:s3> ; <var:z> := <var:z> + <var:s2> ; <var:z> := <var:z> + <var:s1> ; <var:z> := <var:z> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:L> = <var:r> }} <def:poly> {{ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:s3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:s2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:z> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:3> * <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:s0> = <nat:3> /\ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:z> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 