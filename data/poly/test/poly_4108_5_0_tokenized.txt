\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:p> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:p> = <var:l> $ ahead of evaluating our code it holds that $ <var:G> = <nat:2> * <var:l> + <nat:1> $ when program has finished . \end{theorem} \begin{proof} The method of proof for the series of commands can be done through the below decorated segment of code . \begin{eqnarray} \{ <var:p> = <var:l> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:p> = <var:l> \land <var:h0> = <nat:1> \} \\ <var:h1> := <nat:2> ; \\ \{ <var:p> = <var:l> \land <var:h0> = <nat:1> \land <var:h1> = <nat:2> \} \\ <var:h1> := <var:h1> * <var:p> ; \\ \{ <var:p> = <var:l> \land <var:h0> = <nat:1> \land <var:h1> = <nat:2> * <var:l> \} \\ <var:G> := <var:h1> ; \\ \{ <var:p> = <var:l> \land <var:h0> = <nat:1> \land <var:G> = <nat:2> * <var:l> \} \\ <var:G> := <var:G> + <var:h0> \\ \{ <var:p> = <var:l> \land <var:G> = <nat:2> * <var:l> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:p> ; <var:G> := <var:h1> ; <var:G> := <var:G> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:p> = <var:l> }} <def:poly> {{ <var:G> = <nat:2> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:h0> = <nat:1> /\ <var:G> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:l> /\ <var:G> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 