\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:L> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:L> ; <var:w2> := <var:w2> * <var:L> ; <var:c> := <var:w2> ; <var:c> := <var:c> + <var:w1> ; <var:c> := <var:c> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assuming ( with some integers $ <var:s> $ ) $ <var:L> = <var:s> $ before the execution of the code it must be that we have $ <var:c> = <nat:3> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is evident through standard Hoare reasoning . Honing in on the proceeding line of code in the list of instructions , \verb | { <var:L> = <var:s> } <var:w0> := <nat:3> { <var:L> = <var:s> \land <var:w0> = <nat:3> } | . Honing in on the upcoming bits of codeseen in the series of commands , we have \verb | { <var:L> = <var:s> } <var:w0> := <nat:3> { <var:L> = <var:s> \land <var:w0> = <nat:3> } | , \verb | { <var:L> = <var:s> \land <var:w0> = <nat:3> } <var:w1> := <nat:1> { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> } | , \verb | { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> } <var:w1> := <var:w1> * <var:L> { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> * <var:s> } | and \verb | { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> * <var:s> } <var:w2> := <nat:3> { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> * <var:s> \land <var:w2> = <nat:3> } | . Focusing on the next lines in our list of instructions , we see \verb | { <var:L> = <var:s> } <var:w0> := <nat:3> { <var:L> = <var:s> \land <var:w0> = <nat:3> } | , \verb | { <var:L> = <var:s> \land <var:w0> = <nat:3> } <var:w1> := <nat:1> { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> } | and \verb | { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> } <var:w1> := <var:w1> * <var:L> { <var:L> = <var:s> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> * <var:s> } | . Going to the next step , we see \verb | { <var:L> = <var:s> } <var:w0> := <nat:3> { <var:L> = <var:s> \land <var:w0> = <nat:3> } | . This is deduced using the scheme of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:L> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:L> ; <var:w2> := <var:w2> * <var:L> ; <var:c> := <var:w2> ; <var:c> := <var:c> + <var:w1> ; <var:c> := <var:c> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:c> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:s> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:s> /\ <var:w2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:s> /\ <var:w2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:s> /\ <var:c> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:w0> = <nat:3> /\ <var:c> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:c> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 