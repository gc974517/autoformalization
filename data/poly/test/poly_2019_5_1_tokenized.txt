\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:L> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:6> ; <var:r> := <var:J1> <var:r> := <var:r> + <var:J0> \end{verbatim} Allow $ <var:L> = <var:Q> $ letting $ <var:Q> \in \mathbb{Z}^+ $ prior to the execution of this set of commands it holds that we see $ <var:r> = <nat:6> \cdot <var:Q> + <nat:7> $ once set of instructions has finished . \end{theorem} \begin{proof} The course of logic for this series of instructions is clear by usual Hoare reasoning . Looking at the subsequent statement found in the program , we have the assignment statement giving $ <var:L> $ toward $ <var:J1>$ . This advances the condition $ \{ <var:L> = <var:Q> \} $ as the condition $ \{ <var:L> = <var:Q> \land <var:J1> = <var:Q> \} $ . Advancing to the next step , we see the assignment command yielding $ <nat:7> $ to $ <var:J0>$ . This takes the precondition $ \{ <var:L> = <var:Q> \land <var:J1> = <var:Q> \} $ toward $ \{ <var:L> = <var:Q> \land <var:J1> = <var:Q> \land <var:J0> = <nat:7> \} $ . Honing in on the following command seen in the series of commands , the statement \verb | <var:J1> := <var:J1> * <nat:6> ; | . This moves the condition $ \{ <var:L> = <var:Q> \land <var:J1> = <var:Q> \land <var:J0> = <nat:7> \} $ as the condition $ \{ <var:L> = <var:Q> \land <var:J1> = <nat:6> \times <var:Q> \land <var:J0> = <nat:7> \} $ . Moving forward , we see the line \verb | <var:r> := <var:J1> | . This statement moves the precondition $ \{ <var:L> = <var:Q> \land <var:J1> = <nat:6> \times <var:Q> \land <var:J0> = <nat:7> \} $ to the postcondition $ \{ <var:L> = <var:Q> \land <var:J0> = <nat:7> \land <var:r> = <nat:6> \times <var:Q> \} $ . Further , the environment update code \verb | <var:r> := <var:r> + <var:J0> | . This transfers the condition $ \{ <var:L> = <var:Q> \land <var:J0> = <nat:7> \land <var:r> = <nat:6> \times <var:Q> \} $ as the condition $ \{ <var:L> = <var:Q> \land <var:r> = <nat:6> \times <var:Q> + <nat:7> \} $ . This is shown to be logically sound with the assignment law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:L> = <var:Q> }} <var:J1> := <var:L> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:6> ; <var:r> := <var:J1> <var:r> := <var:r> + <var:J0> {{ <var:r> = <nat:6> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:J1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:J1> = <var:Q> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:J1> = <nat:6> * <var:Q> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:J0> = <nat:7> /\ <var:r> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:r> = <nat:6> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 