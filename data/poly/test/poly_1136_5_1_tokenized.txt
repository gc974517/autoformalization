\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:C> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:5> ; <var:Q> := <var:P1> <var:Q> := <var:Q> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:C> = <var:H> $ , given any $ <var:H> $ , ahead of executing our segment of code then $ <var:Q> = <nat:5> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:C> = <var:H> \} \\ <var:P1> := <var:C> ; \\ \{ <var:C> = <var:H> \land <var:P1> = <var:H> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:C> = <var:H> \land <var:P1> = <var:H> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:5> ; \\ \{ <var:C> = <var:H> \land <var:P1> = <nat:5> \times <var:H> \land <var:P0> = <nat:3> \} \\ <var:Q> := <var:P1> \\ \{ <var:C> = <var:H> \land <var:P0> = <nat:3> \land <var:Q> = <nat:5> \times <var:H> \} \\ <var:Q> := <var:Q> + <var:P0> \\ \{ <var:C> = <var:H> \land <var:Q> = <nat:5> \times <var:H> + <nat:3> \} \end{eqnarray} Given the preceding argument , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:C> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:5> ; <var:Q> := <var:P1> <var:Q> := <var:Q> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:C> = <var:H> }} <def:poly> {{ <var:Q> = <nat:5> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:P1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:P1> = <var:H> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:P1> = <nat:5> * <var:H> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:P0> = <nat:3> /\ <var:Q> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:H> /\ <var:Q> = <nat:5> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 