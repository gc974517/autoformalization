\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:f1> := <var:K> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:6> ; <var:e> := <var:f1> <var:e> := <var:e> + <var:f0> \end{verbatim} Allow --- given some $ <var:E> $ --- it to hold that $ <var:K> = <var:E> $ ahead of executing our code segment , it must be that we have $ <var:e> = <nat:6> \times <var:E> + <nat:4> $ when series of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is accomplished through usual Hoare logic . Considering the subsequent bit of code seen in the set of commands , we see the binding command letting $ <var:K> $ toward $ <var:f1>$ . This takes $ \{ <var:K> = <var:E> \} $ toward the postcondition $ \{ <var:K> = <var:E> \land <var:f1> = <var:E> \} $ . Moving on to the following line seen in our series of instructions , the variable update code \verb | <var:f0> := <nat:4> ; | . This line forwards $ \{ <var:K> = <var:E> \land <var:f1> = <var:E> \} $ into $ \{ <var:K> = <var:E> \land <var:f1> = <var:E> \land <var:f0> = <nat:4> \} $ . Shifting focus toward the next piece of code contained in our list of instructions , we have the assignment command \verb | <var:f1> := <var:f1> * <nat:6> ; | . This statement redefines the precondition $ \{ <var:K> = <var:E> \land <var:f1> = <var:E> \land <var:f0> = <nat:4> \} $ as the postcondition $ \{ <var:K> = <var:E> \land <var:f1> = <nat:6> \cdot <var:E> \land <var:f0> = <nat:4> \} $ . This is given with the assignment inference rule found in Hoare logic . After , the command \verb | <var:e> := <var:f1> | . This statement transfers the precondition $ \{ <var:K> = <var:E> \land <var:f1> = <nat:6> \cdot <var:E> \land <var:f0> = <nat:4> \} $ as the condition $ \{ <var:K> = <var:E> \land <var:f0> = <nat:4> \land <var:e> = <nat:6> \cdot <var:E> \} $ . Moving forward to the next step , the code \verb | <var:e> := <var:e> + <var:f0> | . This takes $ \{ <var:K> = <var:E> \land <var:f0> = <nat:4> \land <var:e> = <nat:6> \cdot <var:E> \} $ to the postcondition $ \{ <var:K> = <var:E> \land <var:e> = <nat:6> \cdot <var:E> + <nat:4> \} $ . This is shown to be logically sound through the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:K> = <var:E> }} <var:f1> := <var:K> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:6> ; <var:e> := <var:f1> <var:e> := <var:e> + <var:f0> {{ <var:e> = <nat:6> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:f1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:f1> = <var:E> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:f1> = <nat:6> * <var:E> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:f0> = <nat:4> /\ <var:e> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:e> = <nat:6> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 