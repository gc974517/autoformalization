\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:2> ; <var:v> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume that we have $ <var:s> = <var:l> $ --- for all positive integer coefficients $ <var:l> $ --- ahead of the evaluation of the series of commands , it must be that we have $ <var:v> = <nat:2> $ after code segment has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our program is accomplished through typical Hoare reasoning . Moving on to the following statements seen in our series of instructions , \begin{eqnarray} \{ <var:s> = <var:l> \} \, <var:k0> := <nat:2> \, \{ <var:s> = <var:l> \land <var:k0> = <nat:2> \} \\ \{ <var:s> = <var:l> \land <var:k0> = <nat:2> \} \, <var:v> := <var:k0\, \{ <var:s> = <var:l> \land <var:v> = <nat:2> \} \end{eqnarray} This is rigorously given with the environment update law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:v> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <def:poly> {{ <var:v> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:v> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 