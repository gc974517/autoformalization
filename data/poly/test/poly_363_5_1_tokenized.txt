\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:H> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:9> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:H> = <var:y> $ ( for some $ <var:y> $ ) before the execution of the list of instructions it holds that $ <var:h> = <nat:9> \times <var:y> + <nat:3> $ once list of commands has finished executing . \end{theorem} \begin{proof} The course of logic for the list of instructions is evident using typical Hoare reasoning . Moving on to the next step , we have the variable assignmet code letting $ <var:H> $ to $ <var:V1>$ . This transfers the condition $ \{ <var:H> = <var:y> \} $ toward the postcondition $ \{ <var:H> = <var:y> \land <var:V1> = <var:y> \} $ . This is rigorously given by the assignment law obtained from usual Hoare techniques . Moving forward to the next step , we see the environment update statement \verb | <var:V0> := <nat:3> ; | . This redefines the condition $ \{ <var:H> = <var:y> \land <var:V1> = <var:y> \} $ toward the condition $ \{ <var:H> = <var:y> \land <var:V1> = <var:y> \land <var:V0> = <nat:3> \} $ . This is ensured with the assignment law of usual Hoare reasoning . Following , the variable assignmet statement giving $ <var:V1> * <nat:9> $ toward $ <var:V1>$ . This code forwards $ \{ <var:H> = <var:y> \land <var:V1> = <var:y> \land <var:V0> = <nat:3> \} $ to $ \{ <var:H> = <var:y> \land <var:V1> = <nat:9> \times <var:y> \land <var:V0> = <nat:3> \} $ . Keeping momentum , the assignment command defining $ <var:V1$ toward $ <var:h>$ . This takes the condition $ \{ <var:H> = <var:y> \land <var:V1> = <nat:9> \times <var:y> \land <var:V0> = <nat:3> \} $ toward the postcondition $ \{ <var:H> = <var:y> \land <var:V0> = <nat:3> \land <var:h> = <nat:9> \times <var:y> \} $ . Advancing to the next step , we have the assignment command defining $ <var:h> + <var:V0$ to $ <var:h>$ . This line advances the condition $ \{ <var:H> = <var:y> \land <var:V0> = <nat:3> \land <var:h> = <nat:9> \times <var:y> \} $ as $ \{ <var:H> = <var:y> \land <var:h> = <nat:9> \times <var:y> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:H> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:9> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:H> = <var:y> }} <def:poly> {{ <var:h> = <nat:9> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:V1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:V1> = <var:y> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:V1> = <nat:9> * <var:y> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:V0> = <nat:3> /\ <var:h> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:h> = <nat:9> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 