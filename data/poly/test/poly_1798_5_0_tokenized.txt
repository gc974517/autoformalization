\begin{document} \begin{theorem} Take a segment of code such that \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:K> ; <var:C> := <var:w1> ; <var:C> := <var:C> + <var:w0> \end{verbatim} Allowing , for some natural coefficients $ <var:F> $ , that $ <var:K> = <var:F> $ ahead of the evaluation of our list of commands , it must be that $ <var:C> = <nat:8> * <var:F> + <nat:1> $ after code segment has terminated . \end{theorem} \begin{proof} The course of logic for the code can be shown through usual Hoare techniques . Honing in on the proceeding lines seen in our list of commands , we see \begin{eqnarray} \{ <var:K> = <var:F> \} \, <var:w0> := <nat:1> \, \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \} \\ \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \} \, <var:w1> := <nat:8> \, \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:K> = <var:F> \} \, <var:w0> := <nat:1> \, \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \} \\ \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \} \, <var:w1> := <nat:8> \, \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \land <var:w1> = <nat:8> \} \end{eqnarray} Focusing on the next step in our set of commands , \begin{eqnarray} \{ <var:K> = <var:F> \} \, <var:w0> := <nat:1> \, \{ <var:K> = <var:F> \land <var:w0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:K> = <var:F> }} <var:w0> := <nat:1> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:K> ; <var:C> := <var:w1> ; <var:C> := <var:C> + <var:w0> {{ <var:C> = <nat:8> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:w0> = <nat:1> /\ <var:C> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:C> = <nat:8> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 