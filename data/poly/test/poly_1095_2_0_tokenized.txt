\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:6> ; <var:O> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Assuming ( given $ <var:v> \in \mathbb{Z}^+ $ ) it to hold that $ <var:x> = <var:v> $ prior to interpreting this series of commands it follows that $ <var:O> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is clear with typical Hoare techniques . Looking at the upcoming pieces of code in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:x> = <var:v> \} & <var:c0> := <nat:6> & \{ <var:x> = <var:v> \land <var:c0> = <nat:6> \} \\ \{ <var:x> = <var:v> \land <var:c0> = <nat:6> \} & <var:O> := <var:c0& \{ <var:x> = <var:v> \land <var:O> = <nat:6> \} \end{tabular} This is known to be sound with the environment update rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:6> ; <var:O> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:x> = <var:v> }} <def:poly> {{ <var:O> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:O> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 