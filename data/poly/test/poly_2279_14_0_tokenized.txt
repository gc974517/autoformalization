\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:S> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:S> ; <var:p2> := <var:p2> * <var:S> ; <var:p3> := <nat:6> ; <var:p3> := <var:p3> * <var:S> ; <var:p3> := <var:p3> * <var:S> ; <var:p3> := <var:p3> * <var:S> ; <var:N> := <var:p3> ; <var:N> := <var:N> + <var:p2> ; <var:N> := <var:N> + <var:p1> ; <var:N> := <var:N> + <var:p0> \end{verbatim} Assume $ <var:S> = <var:x> $ before interpreting our code segment , it must be that $ <var:N> = <nat:6> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> $ once set of commands has finished . \end{theorem} \begin{proof} The proof of this series of commands is done with Hoare logic . Advancing , we have the environment update statement \verb | <var:p0> := <nat:3> ; | . This statement takes the condition $ \{ <var:S> = <var:x> \} $ to $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \} $ . This is shown to be logically sound using the assignment scheme in usual Hoare logic . Jumping to the proceeding command found in the series of commands , the variable update statement yielding $ <nat:3> $ to $ <var:p1>$ . This forwards the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \} $ as the postcondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \} $ . Moving forward to the proceeding step in our segment of code , we have the variable update statement binding $ <var:p1> * <var:S> $ into $ <var:p1>$ . This moves the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \} $ as the postcondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \} $ . Observing the next command seen in the program , the assignment statement \verb | <var:p2> := <nat:6> ; | . This code takes the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \} $ toward the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \} $ . Immediately following , we have the command binding $ <var:p2> * <var:S> $ into $ <var:p2>$ . This command takes the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \} $ to the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> \} $ . This is ensured using the assignment rule from standard Hoare techniques . Moving on to the next step , we have the variable update code \verb | <var:p2> := <var:p2> * <var:S> ; | . This transfers the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> \} $ into $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme from Hoare techniques . Jumping to the following bit of code found in the code , the environment update command defining $ <nat:6> $ as $ <var:p3>$ . This line moves $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \} $ to $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \} $ . This is given using the assignment rule in Hoare reasoning . After , we see the command defining $ <var:p3> * <var:S> $ to $ <var:p3>$ . This code takes the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \} $ toward the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> \} $ . After , we see the variable assignmet command \verb | <var:p3> := <var:p3> * <var:S> ; | . This transfers the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> \} $ to the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> ^ <nat:2> \} $ . Moving on , the binding statement defining $ <var:p3> * <var:S> $ into $ <var:p3>$ . This moves the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> ^ <nat:2> \} $ to $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> ^ <nat:3> \} $ . This is shown using the assignment inference rule in Hoare logic . Taking another step toward the following line found in the set of commands , the variable update command \verb | <var:N> := <var:p3> ; | . This redefines the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:p3> = <nat:6> \cdot <var:x> ^ <nat:3> \} $ as the postcondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> \} $ . Paying attention to the subsequent bit of code contained in the code , we have the assignment line \verb | <var:N> := <var:N> + <var:p2> ; | . This advances the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:p2> = <nat:6> \cdot <var:x> ^ <nat:2> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> \} $ to the condition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> \} $ . Moving onward , we have the assignment code \verb | <var:N> := <var:N> + <var:p1> ; | . This transfers the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \cdot <var:x> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> \} $ as the postcondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> \} $ . Further , we see the variable binding command \verb | <var:N> := <var:N> + <var:p0> | . This moves the precondition $ \{ <var:S> = <var:x> \land <var:p0> = <nat:3> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> \} $ as the condition $ \{ <var:S> = <var:x> \land <var:N> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:3> \} $ . This is rigorously given by the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:S> = <var:x> }} <var:p0> := <nat:3> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:S> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:S> ; <var:p2> := <var:p2> * <var:S> ; <var:p3> := <nat:6> ; <var:p3> := <var:p3> * <var:S> ; <var:p3> := <var:p3> * <var:S> ; <var:p3> := <var:p3> * <var:S> ; <var:N> := <var:p3> ; <var:N> := <var:N> + <var:p2> ; <var:N> := <var:N> + <var:p1> ; <var:N> := <var:N> + <var:p0> {{ <var:N> = <nat:6> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:p3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:p3> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:p2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:N> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:x> /\ <var:N> = <nat:6> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:p0> = <nat:3> /\ <var:N> = <nat:6> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:x> /\ <var:N> = <nat:6> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 