\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g> := <nat:2> ; <var:g> := <nat:4> + <var:g> * <var:B> ; <var:g> := <var:g> * <var:B> ; <var:g> := <nat:4> + <var:g> * <var:B> ; <var:g> := <nat:1> + <var:g> * <var:B> ; <var:g> := <nat:2> + <var:g> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing that we have $ <var:B> = <var:Z> $ ahead of executing this set of instructions it holds that we have $ <var:g> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:2> $ once set of instructions has exited . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:B> = <var:Z> \} \\ <var:g> := <nat:2> ; \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \} \\ <var:g> := <nat:4> + <var:g> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \cdot <var:Z> + <nat:4> \} \end{eqnarray} Furthering running the series of commands returns : \begin{eqnarray} <var:g> := <var:g> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + \} \\ <var:g> := <nat:4> + <var:g> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:4> \} \\ <var:g> := <nat:1> + <var:g> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> + <nat:1> \} \\ <var:g> := <nat:2> + <var:g> * <var:B> \\ \{ <var:B> = <var:Z> \land <var:g> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:2> \} \end{eqnarray} Given the preceding argument , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:2> ; <var:g> := <nat:4> + <var:g> * <var:B> ; <var:g> := <var:g> * <var:B> ; <var:g> := <nat:4> + <var:g> * <var:B> ; <var:g> := <nat:1> + <var:g> * <var:B> ; <var:g> := <nat:2> + <var:g> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <def:poly> {{ <var:g> = <nat:2> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:g> = <nat:2> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 