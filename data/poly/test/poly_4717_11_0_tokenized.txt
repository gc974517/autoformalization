\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:4> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:y> ; <var:E2> := <var:E2> * <var:y> ; <var:E3> := <nat:5> ; <var:E3> := <var:E3> * <var:y> ; <var:E3> := <var:E3> * <var:y> ; <var:E3> := <var:E3> * <var:y> ; <var:u> := <var:E3> ; <var:u> := <var:u> + <var:E2> ; <var:u> := <var:u> + <var:E0> \end{verbatim} Allowing that $ <var:y> = <var:x> $ before the execution of our series of instructions , it must be that $ <var:u> = <nat:5> \times <var:x> ^ <nat:3> + <nat:9> \times <var:x> ^ <nat:2> + <nat:4> $ after list of instructions has finished . \end{theorem} \begin{proof} The argument for the set of commands is accomplished through Hoare reasoning . Keeping momentum , we have \begin{verbatim} { <var:y> = <var:x> } <var:E0> := <nat:4> { <var:y> = <var:x> \land <var:E0> = <nat:4> } { <var:y> = <var:x> \land <var:E0> = <nat:4> } <var:E2> := <nat:9> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> } { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> } <var:E2> := <var:E2> * <var:y> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> } { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> } <var:E2> := <var:E2> * <var:y> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> } { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> } <var:E3> := <nat:5> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> \land <var:E3> = <nat:5> } { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> \land <var:E3> = <nat:5> } <var:E3> := <var:E3> * <var:y> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> \land <var:E3> = <nat:5> \times <var:x> } { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> \land <var:E3> = <nat:5> \times <var:x> } <var:E3> := <var:E3> * <var:y> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> \times <var:x> ^ <nat:2> \land <var:E3> = <nat:5> \times <var:x> ^ <nat:2> } \end{verbatim} This is ensured through the variable binding scheme given in Hoare techniques . Stepping forward , we see \begin{verbatim} { <var:y> = <var:x> } <var:E0> := <nat:4> { <var:y> = <var:x> \land <var:E0> = <nat:4> } { <var:y> = <var:x> \land <var:E0> = <nat:4> } <var:E2> := <nat:9> { <var:y> = <var:x> \land <var:E0> = <nat:4> \land <var:E2> = <nat:9> } \end{verbatim} Observing the upcoming statement contained in our set of instructions , we see \begin{verbatim} { <var:y> = <var:x> } <var:E0> := <nat:4> { <var:y> = <var:x> \land <var:E0> = <nat:4> } \end{verbatim} This is deduced by the environment update scheme given by typical Hoare reasoning . Considering the following statement contained in the list of commands , \begin{verbatim} { <var:y> = <var:x> } <var:E0> := <nat:4> { <var:y> = <var:x> \land <var:E0> = <nat:4> } \end{verbatim} This is shown to be logically sound with the variable binding inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:y> = <var:x> }} <var:E0> := <nat:4> ; <var:E2> := <nat:9> ; <var:E2> := <var:E2> * <var:y> ; <var:E2> := <var:E2> * <var:y> ; <var:E3> := <nat:5> ; <var:E3> := <var:E3> * <var:y> ; <var:E3> := <var:E3> * <var:y> ; <var:E3> := <var:E3> * <var:y> ; <var:u> := <var:E3> ; <var:u> := <var:u> + <var:E2> ; <var:u> := <var:u> + <var:E0> {{ <var:u> = <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:E3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:E3> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:E3> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:E3> = <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:E2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:u> = <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:E0> = <nat:4> /\ <var:u> = <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:u> = <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 