\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:9> ; <var:O> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:E> = <var:B> $ prior to interpreting our series of commands , it holds that we see $ <var:O> = <nat:9> $ . \end{theorem} \begin{proof} The argument for our list of commands can be seen using typical Hoare reasoning . Now , we see \begin{verbatim} { <var:E> = <var:B> } <var:V0> := <nat:9> { <var:E> = <var:B> \land <var:V0> = <nat:9> } \end{verbatim} This is shown to be logically sound by the binding rule defined by usual Hoare techniques . After , we see \begin{verbatim} { <var:E> = <var:B> } <var:V0> := <nat:9> { <var:E> = <var:B> \land <var:V0> = <nat:9> } \end{verbatim} This is guaranteed with the environment update scheme defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:9> ; <var:O> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:E> = <var:B> }} <def:poly> {{ <var:O> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:O> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 