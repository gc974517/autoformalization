\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:S> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:S> ; <var:u2> := <var:u2> * <var:S> ; <var:U> := <var:u2> ; <var:U> := <var:U> + <var:u1> ; <var:U> := <var:U> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for every natural numbers $ <var:d> $ ) $ <var:S> = <var:d> $ ahead of evaluating this series of commands , it must be that we see $ <var:U> = <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:5> $ once code segment exits . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be accomplished through standard Hoare logic . Shifting focus toward the following commands contained in our code , we have \begin{eqnarray} \{ <var:S> = <var:d> \} \, <var:u0> := <nat:5> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \} \, <var:u1> := <nat:7> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \} \, <var:u1> := <var:u1> * <var:S> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \} \, <var:u2> := <nat:9> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \land <var:u2> = <nat:9> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \land <var:u2> = <nat:9> \} \, <var:u2> := <var:u2> * <var:S> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \land <var:u2> = <nat:9> * <var:d> \} \end{eqnarray} This is given through the variable assignmet rule found in Hoare reasoning . Advancing to the upcoming lines seen in our code , we see \begin{eqnarray} \{ <var:S> = <var:d> \} \, <var:u0> := <nat:5> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \} \, <var:u1> := <nat:7> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \} \, <var:u1> := <var:u1> * <var:S> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \} \\ \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \} \, <var:u2> := <nat:9> \, \{ <var:S> = <var:d> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> * <var:d> \land <var:u2> = <nat:9> \} \end{eqnarray} This is ensured through the variable assignmet rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:S> ; <var:u2> := <nat:9> ; <var:u2> := <var:u2> * <var:S> ; <var:u2> := <var:u2> * <var:S> ; <var:U> := <var:u2> ; <var:U> := <var:U> + <var:u1> ; <var:U> := <var:U> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:S> = <var:d> }} <def:poly> {{ <var:U> = <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:d> /\ <var:u2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:d> /\ <var:u2> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:d> /\ <var:u2> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:d> /\ <var:U> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:u0> = <nat:5> /\ <var:U> = <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:U> = <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 