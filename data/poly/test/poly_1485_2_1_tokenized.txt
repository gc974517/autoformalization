\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:W0> := <nat:1> ; <var:t> := <var:W0> \end{verbatim} Given that we have $ <var:T> = <var:M> $ ahead of evaluating the set of commands then $ <var:t> = <nat:1> $ once list of instructions terminates . \end{theorem} \begin{proof} The flow of logic for our series of commands can be done using the following decorated set of commands . \begin{eqnarray} \{ <var:T> = <var:M> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:T> = <var:M> \land <var:W0> = <nat:1> \} \\ <var:t> := <var:W0> \\ \{ <var:T> = <var:M> \land <var:t> = <nat:1> \} \end{eqnarray} Using standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:T> = <var:M> }} <var:W0> := <nat:1> ; <var:t> := <var:W0> {{ <var:t> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:t> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 