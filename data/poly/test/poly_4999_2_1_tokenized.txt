\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:1> ; <var:k> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:Q> = <var:z> $ ( given any natural numbers $ <var:z> $ ) prior to the execution of our segment of code it follows that $ <var:k> = <nat:1> $ once segment of code finishes . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be done using Hoare logic . Moving on to the proceeding command contained in our code segment , we see the variable binding code \verb | <var:B0> := <nat:1> ; | . This forwards the precondition $ \{ <var:Q> = <var:z> \} $ toward the condition $ \{ <var:Q> = <var:z> \land <var:B0> = <nat:1> \} $ . This is guaranteed using the assignment rule in standard Hoare logic . Going forward , we have the variable assignmet line binding $ <var:B0$ into $ <var:k>$ . This statement takes the condition $ \{ <var:Q> = <var:z> \land <var:B0> = <nat:1> \} $ toward the postcondition $ \{ <var:Q> = <var:z> \land <var:k> = <nat:1> \} $ . This is sound with the assignment scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:1> ; <var:k> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Q> = <var:z> }} <def:poly> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 