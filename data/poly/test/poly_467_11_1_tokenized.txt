\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:N1> := <var:z> ; <var:N2> := <var:N1> * <var:z> ; <var:N3> := <var:N2> * <var:z> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:6> ; <var:b> := <var:N3> <var:b> := <var:b> + <var:N2> <var:b> := <var:b> + <var:N1> <var:b> := <var:b> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:z> = <var:n> $ ( with some natural coefficients $ <var:n> $ ) ahead of interpreting this list of commands , it follows that $ <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:2> $ when program has executed . \end{theorem} \begin{proof} The proof of our series of instructions can be accomplished by usual Hoare logic . Paying attention to the proceeding line of code seen in our series of instructions , the assignment code defining $ <var:z> $ toward $ <var:N1>$ . This takes $ \{ <var:z> = <var:n> \} $ into the condition $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \} $ . This is guaranteed through the assignment law defined by standard Hoare reasoning . Now , the command \verb | <var:N2> := <var:N1> * <var:z> ; | . This code redefines $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \} $ into $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \} $ . This is shown using the assignment rule found in usual Hoare reasoning . Moving on to the subsequent step in our list of instructions , the statement giving $ <var:N2> * <var:z> $ as $ <var:N3>$ . This forwards $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \} $ as $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment scheme defined by typical Hoare techniques . Considering the next line seen in our code , we have the binding code \verb | <var:N0> := <nat:2> ; | . This takes $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \} $ as the condition $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . This is deduced by the assignment scheme of usual Hoare techniques . Honing in on the subsequent bit of code contained in our series of commands , the environment update code assigning $ <var:N1> * <nat:4> $ to $ <var:N1>$ . This transfers $ \{ <var:z> = <var:n> \land <var:N1> = <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . Keeping momentum , we have the variable update code \verb | <var:N2> := <var:N2> * <nat:2> ; | . This statement transfers the condition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ as $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . Advancing to the following line of code contained in the set of instructions , the variable assignmet command yielding $ <var:N3> * <nat:6> $ into $ <var:N3>$ . This forwards the condition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N3> = <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N3> = <nat:6> \cdot <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . Immediately after , the assignment statement assigning $ <var:N3$ into $ <var:b>$ . This transfers the precondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N3> = <nat:6> \cdot <var:n> ^ <nat:3> \land <var:N0> = <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> \} $ . This is given through the assignment law of typical Hoare techniques . Taking a look at the upcoming line of code in our set of commands , we have the code \verb | <var:b> := <var:b> + <var:N2> | . This code moves the precondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N2> = <nat:2> \cdot <var:n> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> \} $ . This is guaranteed using the assignment rule defined by standard Hoare logic . Moving onward , we have the binding code \verb | <var:b> := <var:b> + <var:N1> | . This takes $ \{ <var:z> = <var:n> \land <var:N1> = <nat:4> \cdot <var:n> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> \} $ toward $ \{ <var:z> = <var:n> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} $ . This is guaranteed through the assignment law found in Hoare techniques . Honing in on the subsequent step found in the program , we have the command \verb | <var:b> := <var:b> + <var:N0> | . This command takes the condition $ \{ <var:z> = <var:n> \land <var:N0> = <nat:2> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} $ as the postcondition $ \{ <var:z> = <var:n> \land <var:b> = <nat:6> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:z> ; <var:N2> := <var:N1> * <var:z> ; <var:N3> := <var:N2> * <var:z> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:6> ; <var:b> := <var:N3> <var:b> := <var:b> + <var:N2> <var:b> := <var:b> + <var:N1> <var:b> := <var:b> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:b> = <nat:6> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <nat:4> * <var:n> /\ <var:N2> = <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <nat:4> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N3> = <var:n> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <nat:4> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N3> = <nat:6> * <var:n> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <nat:4> * <var:n> /\ <var:N2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:N0> = <nat:2> /\ <var:b> = <nat:6> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N1> = <nat:4> * <var:n> /\ <var:N0> = <nat:2> /\ <var:b> = <nat:6> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:N0> = <nat:2> /\ <var:b> = <nat:6> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:b> = <nat:6> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 