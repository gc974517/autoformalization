\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:E1> := <var:R> ; <var:E2> := <var:E1> * <var:R> ; <var:E3> := <var:E2> * <var:R> ; <var:E0> := <nat:2> ; <var:E3> := <var:E3> * <nat:1> ; <var:Q> := <var:E3> <var:Q> := <var:Q> + <var:E0> \end{verbatim} Assuming , for $ <var:f> \in \mathbb{N} $ , that we have $ <var:R> = <var:f> $ before interpreting the program it follows that $ <var:Q> = <nat:1> \cdot <var:f> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our program can be done using standard Hoare reasoning . Going to the next step , we have \verb | { <var:R> = <var:f> } <var:E1> := <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> } | . Paying attention to the proceeding statements in our code , \verb | { <var:R> = <var:f> } <var:E1> := <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> } | , \verb | { <var:R> = <var:f> \land <var:E1> = <var:f> } <var:E2> := <var:E1> * <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> } | and \verb | { <var:R> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> } <var:E3> := <var:E2> * <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> } | . This is given with the variable update scheme from typical Hoare techniques . Paying attention to the next piece of code found in the list of commands , we have \verb | { <var:R> = <var:f> } <var:E1> := <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> } | . Observing the proceeding bit of code contained in the segment of code , \verb | { <var:R> = <var:f> } <var:E1> := <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> } | . This is deduced using the variable binding scheme found in Hoare logic . Moving on , \verb | { <var:R> = <var:f> } <var:E1> := <var:R> { <var:R> = <var:f> \land <var:E1> = <var:f> } | . This is shown by the variable assignmet inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:R> = <var:f> }} <var:E1> := <var:R> ; <var:E2> := <var:E1> * <var:R> ; <var:E3> := <var:E2> * <var:R> ; <var:E0> := <nat:2> ; <var:E3> := <var:E3> * <nat:1> ; <var:Q> := <var:E3> <var:Q> := <var:Q> + <var:E0> {{ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E0> = <nat:2> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:Q> = <nat:1> * <var:f> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 