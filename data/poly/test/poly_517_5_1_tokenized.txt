\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:J1> := <var:z> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:9> ; <var:G> := <var:J1> <var:G> := <var:G> + <var:J0> \end{verbatim} Given it to be that $ <var:z> = <var:w> $ before running our list of commands , then we have $ <var:G> = <nat:9> * <var:w> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be done using typical Hoare reasoning . Shifting focus toward the following steps found in the code segment , we see \begin{eqnarray} \{ <var:z> = <var:w> \} \, <var:J1> := <var:z> \, \{ <var:z> = <var:w> \land <var:J1> = <var:w> \} \\ \{ <var:z> = <var:w> \land <var:J1> = <var:w> \} \, <var:J0> := <nat:4> \, \{ <var:z> = <var:w> \land <var:J1> = <var:w> \land <var:J0> = <nat:4> \} \\ \{ <var:z> = <var:w> \land <var:J1> = <var:w> \land <var:J0> = <nat:4> \} \, <var:J1> := <var:J1> * <nat:9> \, \{ <var:z> = <var:w> \land <var:J1> = <nat:9> * <var:w> \land <var:J0> = <nat:4> \} \end{eqnarray} This is ensured with the binding inference rule in Hoare logic . Focusing on the proceeding line of code found in the program , \begin{eqnarray} \{ <var:z> = <var:w> \} \, <var:J1> := <var:z> \, \{ <var:z> = <var:w> \land <var:J1> = <var:w> \} \end{eqnarray} Taking another step toward the following step contained in our set of instructions , we see \begin{eqnarray} \{ <var:z> = <var:w> \} \, <var:J1> := <var:z> \, \{ <var:z> = <var:w> \land <var:J1> = <var:w> \} \end{eqnarray} This is ensured using the assignment scheme obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:z> = <var:w> }} <var:J1> := <var:z> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:9> ; <var:G> := <var:J1> <var:G> := <var:G> + <var:J0> {{ <var:G> = <nat:9> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:J1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:J1> = <var:w> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:J1> = <nat:9> * <var:w> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:J0> = <nat:4> /\ <var:G> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:w> /\ <var:G> = <nat:9> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 