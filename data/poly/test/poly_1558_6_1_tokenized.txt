\begin{document} \begin{theorem} Consider the following segment of code as follows \begin{verbatim} <var:b1> := <var:o> ; <var:b2> := <var:b1> * <var:o> ; <var:b0> := <nat:8> ; <var:b2> := <var:b2> * <nat:6> ; <var:m> := <var:b2> <var:m> := <var:m> + <var:b0> \end{verbatim} Assuming $ <var:o> = <var:L> $ prior to running the set of commands , it holds that $ <var:m> = <nat:6> \times <var:L> ^ <nat:2> + <nat:8> $ when series of commands has finished executing . \end{theorem} \begin{proof} The argument for our program can be seen with typical Hoare techniques . Advancing on , the environment update command \verb | <var:b1> := <var:o> ; | . This transfers the precondition $ \{ <var:o> = <var:L> \} $ toward $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \} $ . This is ensured using the assignment scheme found in usual Hoare techniques . Moving forward to the subsequent step in the set of commands , we see the variable assignmet code defining $ <var:b1> * <var:o> $ toward $ <var:b2>$ . This code redefines the precondition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \} $ toward the condition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \} $ . Considering the next line of code contained in our segment of code , the command \verb | <var:b0> := <nat:8> ; | . This code advances $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \} $ to the condition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:8> \} $ . Taking a look at the next command seen in our list of instructions , we have the variable binding line binding $ <var:b2> * <nat:6> $ toward $ <var:b2>$ . This forwards the condition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <var:L> ^ <nat:2> \land <var:b0> = <nat:8> \} $ as the postcondition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <nat:6> \times <var:L> ^ <nat:2> \land <var:b0> = <nat:8> \} $ . Keeping momentum , the code \verb | <var:m> := <var:b2> | . This takes the precondition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b2> = <nat:6> \times <var:L> ^ <nat:2> \land <var:b0> = <nat:8> \} $ to the postcondition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b0> = <nat:8> \land <var:m> = <nat:6> \times <var:L> ^ <nat:2> \} $ . This is deduced with the assignment law in standard Hoare techniques . Shifting focus toward the following bit of code in our program , we see the environment update line \verb | <var:m> := <var:m> + <var:b0> | . This forwards the condition $ \{ <var:o> = <var:L> \land <var:b1> = <var:L> \land <var:b0> = <nat:8> \land <var:m> = <nat:6> \times <var:L> ^ <nat:2> \} $ toward $ \{ <var:o> = <var:L> \land <var:m> = <nat:6> \times <var:L> ^ <nat:2> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <var:b1> := <var:o> ; <var:b2> := <var:b1> * <var:o> ; <var:b0> := <nat:8> ; <var:b2> := <var:b2> * <nat:6> ; <var:m> := <var:b2> <var:m> := <var:m> + <var:b0> {{ <var:m> = <nat:6> * <var:L> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:b1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <var:L> ^ <nat:2> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:b1> = <var:L> /\ <var:b2> = <nat:6> * <var:L> ^ <nat:2> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:b1> = <var:L> /\ <var:b0> = <nat:8> /\ <var:m> = <nat:6> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:m> = <nat:6> * <var:L> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 