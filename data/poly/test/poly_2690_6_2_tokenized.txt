\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <var:P> * <var:O> ; <var:P> := <nat:1> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:O> = <var:L> $ ahead of evaluating the list of commands it must be that $ <var:P> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this program is demonstrated through standard Hoare logic . Jumping to the proceeding statement in our list of commands , we see the variable binding command defining $ <nat:4> $ to $ <var:P>$ . This takes the precondition $ \{ <var:O> = <var:L> \} $ as the postcondition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \} $ . Stepping forward , the variable assignmet line letting $ <var:P> * <var:O> $ as $ <var:P>$ . This statement moves $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \} $ toward the condition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> + \} $ . This is given through the assignment scheme defined in standard Hoare reasoning . Taking another step toward the following line found in our code segment , the variable binding command letting $ <nat:1> + <var:P> * <var:O> $ toward $ <var:P>$ . This line moves $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> + \} $ to the condition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \} $ . Advancing to the following command contained in our set of commands , the binding line \verb | <var:P> := <nat:4> + <var:P> * <var:O> ; | . This transfers the condition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \} $ as $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> + <nat:4> \} $ . This is rigorously given using the assignment rule from typical Hoare logic . Honing in on the proceeding bit of code in the set of commands , we have the environment update command yielding $ <nat:2> + <var:P> * <var:O> $ into $ <var:P>$ . This command transfers $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> + <nat:4> \} $ into $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> \} $ . This is shown using the assignment inference rule in usual Hoare logic . Moving on to the next command found in our list of commands , we have the variable update code defining $ <nat:2> + <var:P> * <var:O$ as $ <var:P>$ . This moves the condition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> \} $ into the postcondition $ \{ <var:O> = <var:L> \land <var:P> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <var:P> * <var:O> ; <var:P> := <nat:1> + <var:P> * <var:O> ; <var:P> := <nat:4> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> ; <var:P> := <nat:2> + <var:P> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:O> = <var:L> }} <def:poly> {{ <var:P> = <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:P> = <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 