\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:1> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:x> ; <var:v> := <var:f1> ; <var:v> := <var:v> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:x> = <var:W> $ prior to running this code then we have $ <var:v> = <nat:3> \cdot <var:W> + <nat:1> $ once list of commands is done executing . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be demonstrated using Hoare logic . Shifting focus toward the next lines of codeseen in the list of instructions , we have \begin{verbatim} { <var:x> = <var:W> } <var:f0> := <nat:1> { <var:x> = <var:W> \land <var:f0> = <nat:1> } { <var:x> = <var:W> \land <var:f0> = <nat:1> } <var:f1> := <nat:3> { <var:x> = <var:W> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> } \end{verbatim} Jumping to the following bit of code in our list of instructions , we have \begin{verbatim} { <var:x> = <var:W> } <var:f0> := <nat:1> { <var:x> = <var:W> \land <var:f0> = <nat:1> } \end{verbatim} This is guaranteed using the variable update law in usual Hoare logic . Going forward , we see \begin{verbatim} { <var:x> = <var:W> } <var:f0> := <nat:1> { <var:x> = <var:W> \land <var:f0> = <nat:1> } { <var:x> = <var:W> \land <var:f0> = <nat:1> } <var:f1> := <nat:3> { <var:x> = <var:W> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:1> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:x> ; <var:v> := <var:f1> ; <var:v> := <var:v> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:x> = <var:W> }} <def:poly> {{ <var:v> = <nat:3> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:f0> = <nat:1> /\ <var:v> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:v> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 