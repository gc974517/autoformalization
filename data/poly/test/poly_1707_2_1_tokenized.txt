\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:9> ; <var:y> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:D> = <var:M> $ before running this segment of code it must be that $ <var:y> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is given with typical Hoare reasoning . Looking at the next piece of code in our list of commands , we have the code \verb | <var:b0> := <nat:9> ; | . This moves the precondition $ \{ <var:D> = <var:M> \} $ toward the condition $ \{ <var:D> = <var:M> \land <var:b0> = <nat:9> \} $ . This is rigorously given through the assignment inference rule found in typical Hoare logic . Considering the upcoming piece of code seen in our series of commands , we have the variable binding line letting $ <var:b0$ toward $ <var:y>$ . This transfers the condition $ \{ <var:D> = <var:M> \land <var:b0> = <nat:9> \} $ into $ \{ <var:D> = <var:M> \land <var:y> = <nat:9> \} $ . This is shown to be logically sound using the assignment law found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:y> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <def:poly> {{ <var:y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 