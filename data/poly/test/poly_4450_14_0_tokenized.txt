\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:9> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:z> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:z> ; <var:W2> := <var:W2> * <var:z> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:z> ; <var:W3> := <var:W3> * <var:z> ; <var:W3> := <var:W3> * <var:z> ; <var:S> := <var:W3> ; <var:S> := <var:S> + <var:W2> ; <var:S> := <var:S> + <var:W1> ; <var:S> := <var:S> + <var:W0> \end{verbatim} Allow that we have $ <var:z> = <var:B> $ ( given some whole numbers $ <var:B> $ ) prior to interpreting the set of commands it must be that $ <var:S> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:9> $ after list of commands has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:B> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \} \\ <var:W1> := <nat:3> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \} \\ <var:W1> := <var:W1> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \} \\ <var:W2> := <nat:8> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \} \\ <var:W2> := <var:W2> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> \} \\ <var:W2> := <var:W2> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \} \\ <var:W3> := <nat:3> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:W3> = <nat:3> \} \\ <var:W3> := <var:W3> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:W3> = <nat:3> \times <var:B> \} \\ <var:W3> := <var:W3> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:W3> = <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:W3> = <nat:3> \times <var:B> ^ <nat:3> \} \\ <var:S> := <var:W3> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:W2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:S> = <nat:3> \times <var:B> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:W2> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:W1> = <nat:3> \times <var:B> \land <var:S> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:W1> ; \\ \{ <var:z> = <var:B> \land <var:W0> = <nat:9> \land <var:S> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:S> := <var:S> + <var:W0> \\ \{ <var:z> = <var:B> \land <var:S> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:9> \} \end{eqnarray} Thusly , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:z> = <var:B> }} <var:W0> := <nat:9> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:z> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:z> ; <var:W2> := <var:W2> * <var:z> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:z> ; <var:W3> := <var:W3> * <var:z> ; <var:W3> := <var:W3> * <var:z> ; <var:S> := <var:W3> ; <var:S> := <var:S> + <var:W2> ; <var:S> := <var:S> + <var:W1> ; <var:S> := <var:S> + <var:W0> {{ <var:S> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:W3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:W2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:S> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:W1> = <nat:3> * <var:B> /\ <var:S> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:W0> = <nat:9> /\ <var:S> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:S> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 