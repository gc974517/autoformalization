\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:e> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:e> ; <var:k2> := <var:k2> * <var:e> ; <var:k3> := <nat:5> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:Y> := <var:k3> ; <var:Y> := <var:Y> + <var:k2> ; <var:Y> := <var:Y> + <var:k1> ; <var:Y> := <var:Y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:e> = <var:K> $ before running our code it holds that $ <var:Y> = <nat:5> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:8> \cdot <var:K> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands can be shown with usual Hoare logic . Moving forward to the proceeding bit of code in our series of instructions , the binding line \verb | <var:k0> := <nat:7> ; | . This transfers the precondition $ \{ <var:e> = <var:K> \} $ as the postcondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \} $ . This is shown through the assignment scheme found in Hoare logic . Honing in on the subsequent line of code seen in the segment of code , we see the statement binding $ <nat:8> $ into $ <var:k1>$ . This transfers the precondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> \} $ . Looking at the upcoming command in our code segment , the variable update command \verb | <var:k1> := <var:k1> * <var:e> ; | . This forwards $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> \} $ into $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \} $ . Looking at the subsequent piece of code found in our set of commands , the environment update command assigning $ <nat:1> $ toward $ <var:k2>$ . This line transfers $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \} $ into $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> \} $ . This is shown by the assignment rule given in usual Hoare techniques . Taking a look at the next step contained in the code , we have the command assigning $ <var:k2> * <var:e> $ toward $ <var:k2>$ . This redefines $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> \} $ as $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> \} $ . This is deduced by the assignment law obtained from typical Hoare logic . Looking at the subsequent line of code in our series of commands , we see the variable update statement \verb | <var:k2> := <var:k2> * <var:e> ; | . This advances the precondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> \} $ as $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \} $ . Moving forward to the proceeding statement seen in our program , we have the binding code letting $ <nat:5> $ to $ <var:k3>$ . This command forwards $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \} $ into the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> \} $ . This is rigorously given through the assignment law defined in standard Hoare logic . Stepping through , we have the binding command \verb | <var:k3> := <var:k3> * <var:e> ; | . This statement redefines the precondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> \} $ . Following , we have the variable binding line defining $ <var:k3> * <var:e> $ into $ <var:k3>$ . This statement redefines $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> \} $ into the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> ^ <nat:2> \} $ . This is shown by the assignment scheme in usual Hoare reasoning . Shifting focus toward the following command in our series of instructions , we have the code assigning $ <var:k3> * <var:e> $ into $ <var:k3>$ . This statement takes $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> ^ <nat:2> \} $ into $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> ^ <nat:3> \} $ . This is shown using the assignment rule of usual Hoare techniques . Moving onward , the binding code \verb | <var:Y> := <var:k3> ; | . This code redefines the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:k3> = <nat:5> * <var:K> ^ <nat:3> \} $ into the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> \} $ . Advancing on , we see the statement \verb | <var:Y> := <var:Y> + <var:k2> ; | . This line moves $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:k2> = <nat:1> * <var:K> ^ <nat:2> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> \} $ to $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> \} $ . Advancing to the next step , we have the binding code \verb | <var:Y> := <var:Y> + <var:k1> ; | . This command transfers the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:k1> = <nat:8> * <var:K> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> \} $ toward the condition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> \} $ . This is known to be sound with the assignment scheme defined in standard Hoare reasoning . Moving forward to the next line of code in our list of commands , we see the binding statement assigning $ <var:Y> + <var:k0$ toward $ <var:Y>$ . This takes the precondition $ \{ <var:e> = <var:K> \land <var:k0> = <nat:7> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:e> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:e> ; <var:k2> := <var:k2> * <var:e> ; <var:k3> := <nat:5> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:k3> := <var:k3> * <var:e> ; <var:Y> := <var:k3> ; <var:Y> := <var:Y> + <var:k2> ; <var:Y> := <var:Y> + <var:k1> ; <var:Y> := <var:Y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <def:poly> {{ <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:k2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:Y> = <nat:5> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:8> * <var:K> /\ <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:k0> = <nat:7> /\ <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:Y> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 