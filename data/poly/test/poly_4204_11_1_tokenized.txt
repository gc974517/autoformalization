\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:D> ; <var:I2> := <var:I1> * <var:D> ; <var:I3> := <var:I2> * <var:D> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:4> ; <var:V> := <var:I3> <var:V> := <var:V> + <var:I2> <var:V> := <var:V> + <var:I1> <var:V> := <var:V> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:D> = <var:Z> $ prior to evaluating our series of instructions it holds that we have $ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> $ once segment of code terminates . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be demonstrated through the following decorated program . \begin{eqnarray} \{ <var:D> = <var:Z> \} \\ <var:I1> := <var:D> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <var:Z> \} \\ <var:I2> := <var:I1> * <var:D> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:D> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:I1> := <var:I1> * <nat:3> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <nat:3> \times <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:I2> := <var:I2> * <nat:4> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <nat:3> \times <var:Z> \land <var:I2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:I3> := <var:I3> * <nat:4> ; \\ \{ <var:D> = <var:Z> \land <var:I1> = <nat:3> \times <var:Z> \land <var:I2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:I3> = <nat:4> \times <var:Z> ^ <nat:3> \land <var:I0> = <nat:4> \} \\ <var:V> := <var:I3> \\ \{ <var:D> = <var:Z> \land <var:I1> = <nat:3> \times <var:Z> \land <var:I2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:I0> = <nat:4> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:I2> \\ \{ <var:D> = <var:Z> \land <var:I1> = <nat:3> \times <var:Z> \land <var:I0> = <nat:4> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:I1> \\ \{ <var:D> = <var:Z> \land <var:I0> = <nat:4> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} \\ <var:V> := <var:V> + <var:I0> \\ \{ <var:D> = <var:Z> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:D> ; <var:I2> := <var:I1> * <var:D> ; <var:I3> := <var:I2> * <var:D> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:4> ; <var:V> := <var:I3> <var:V> := <var:V> + <var:I2> <var:V> := <var:V> + <var:I1> <var:V> := <var:V> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:D> = <var:Z> }} <def:poly> {{ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <nat:3> * <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <nat:3> * <var:Z> /\ <var:I2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <nat:3> * <var:Z> /\ <var:I2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:I3> = <nat:4> * <var:Z> ^ <nat:3> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <nat:3> * <var:Z> /\ <var:I2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:I0> = <nat:4> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I1> = <nat:3> * <var:Z> /\ <var:I0> = <nat:4> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:I0> = <nat:4> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 