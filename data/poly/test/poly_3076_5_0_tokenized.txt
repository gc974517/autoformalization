\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:M> ; <var:F> := <var:o1> ; <var:F> := <var:F> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:M> = <var:l> $ prior to the evaluation of the set of commands it follows that $ <var:F> = <nat:4> \cdot <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be accomplished by this decorated program . \begin{eqnarray} \{ <var:M> = <var:l> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:M> = <var:l> \land <var:o0> = <nat:8> \} \\ <var:o1> := <nat:4> ; \\ \{ <var:M> = <var:l> \land <var:o0> = <nat:8> \land <var:o1> = <nat:4> \} \\ <var:o1> := <var:o1> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:o0> = <nat:8> \land <var:o1> = <nat:4> \cdot <var:l> \} \\ <var:F> := <var:o1> ; \\ \{ <var:M> = <var:l> \land <var:o0> = <nat:8> \land <var:F> = <nat:4> \cdot <var:l> \} \\ <var:F> := <var:F> + <var:o0> \\ \{ <var:M> = <var:l> \land <var:F> = <nat:4> \cdot <var:l> + <nat:8> \} \end{eqnarray} Using usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:8> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:M> ; <var:F> := <var:o1> ; <var:F> := <var:F> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:M> = <var:l> }} <def:poly> {{ <var:F> = <nat:4> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:o0> = <nat:8> /\ <var:F> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:F> = <nat:4> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 