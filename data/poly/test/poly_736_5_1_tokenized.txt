\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:T1> := <var:C> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:4> ; <var:e> := <var:T1> <var:e> := <var:e> + <var:T0> \end{verbatim} Assume for some $ <var:f> $ that $ <var:C> = <var:f> $ ahead of interpreting this set of commands then we have $ <var:e> = <nat:4> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands can be done with the following decorated list of commands . \begin{eqnarray} \{ <var:C> = <var:f> \} \\ <var:T1> := <var:C> ; \\ \{ <var:C> = <var:f> \land <var:T1> = <var:f> \} \\ <var:T0> := <nat:3> ; \\ \{ <var:C> = <var:f> \land <var:T1> = <var:f> \land <var:T0> = <nat:3> \} \\ <var:T1> := <var:T1> * <nat:4> ; \\ \{ <var:C> = <var:f> \land <var:T1> = <nat:4> \cdot <var:f> \land <var:T0> = <nat:3> \} \\ <var:e> := <var:T1> \\ \{ <var:C> = <var:f> \land <var:T0> = <nat:3> \land <var:e> = <nat:4> \cdot <var:f> \} \\ <var:e> := <var:e> + <var:T0> \\ \{ <var:C> = <var:f> \land <var:e> = <nat:4> \cdot <var:f> + <nat:3> \} \end{eqnarray} Using Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:C> = <var:f> }} <var:T1> := <var:C> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:4> ; <var:e> := <var:T1> <var:e> := <var:e> + <var:T0> {{ <var:e> = <nat:4> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:T1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:T1> = <var:f> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:T1> = <nat:4> * <var:f> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:T0> = <nat:3> /\ <var:e> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:f> /\ <var:e> = <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 