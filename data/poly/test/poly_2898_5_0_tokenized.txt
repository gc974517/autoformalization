\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:1> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:J> ; <var:m> := <var:P1> ; <var:m> := <var:m> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allow that $ <var:J> = <var:Z> $ prior to the execution of our segment of code then we see $ <var:m> = <nat:2> \cdot <var:Z> + <nat:1> $ when series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is clear using this decorated series of commands . \begin{eqnarray} \{ <var:J> = <var:Z> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:J> = <var:Z> \land <var:P0> = <nat:1> \} \\ <var:P1> := <nat:2> ; \\ \{ <var:J> = <var:Z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> \} \\ <var:P1> := <var:P1> * <var:J> ; \\ \{ <var:J> = <var:Z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:2> * <var:Z> \} \\ <var:m> := <var:P1> ; \\ \{ <var:J> = <var:Z> \land <var:P0> = <nat:1> \land <var:m> = <nat:2> * <var:Z> \} \\ <var:m> := <var:m> + <var:P0> \\ \{ <var:J> = <var:Z> \land <var:m> = <nat:2> * <var:Z> + <nat:1> \} \end{eqnarray} Using Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:J> ; <var:m> := <var:P1> ; <var:m> := <var:m> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:J> = <var:Z> }} <def:poly> {{ <var:m> = <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:P0> = <nat:1> /\ <var:m> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Z> /\ <var:m> = <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 