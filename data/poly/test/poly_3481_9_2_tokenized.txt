\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <var:s> * <var:D> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <nat:3> + <var:s> * <var:D> ; <var:s> := <var:s> * <var:D> ; <var:s> := <nat:3> + <var:s> * <var:D> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <nat:1> + <var:s> * <var:D> \end{verbatim} Allow it to hold that $ <var:D> = <var:Q> $ for some integers $ <var:Q> $ prior to running our set of commands then we have $ <var:s> = <nat:3> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> $ when code is done executing . \end{theorem} \begin{proof} The flow of logic for the series of commands is evident with Hoare logic . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:s> := <nat:3> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} \\ \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} & <var:s> := <nat:4> + <var:s> * <var:D> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> + <nat:4> \} \\ \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> + <nat:4> \} & <var:s> := <var:s> * <var:D> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + \} \\ \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + \} & <var:s> := <nat:4> + <var:s> * <var:D> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:4> \} \\ \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:4> \} & <var:s> := <nat:3> + <var:s> * <var:D> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> + <nat:3> \} \end{tabular} This is rigorously given by the scheme given by standard Hoare techniques . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:s> := <nat:3> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} \\ \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} & <var:s> := <nat:4> + <var:s> * <var:D> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \times <var:Q> + <nat:4> \} \end{tabular} This is guaranteed by the variable binding law found in standard Hoare reasoning . Shifting focus toward the upcoming line of code found in the code segment , \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:s> := <nat:3> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} \end{tabular} Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:D> = <var:Q> \} & <var:s> := <nat:3> & \{ <var:D> = <var:Q> \land <var:s> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:D> = <var:Q> }} <var:s> := <nat:3> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <var:s> * <var:D> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <nat:3> + <var:s> * <var:D> ; <var:s> := <var:s> * <var:D> ; <var:s> := <nat:3> + <var:s> * <var:D> ; <var:s> := <nat:4> + <var:s> * <var:D> ; <var:s> := <nat:1> + <var:s> * <var:D> {{ <var:s> = <nat:3> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:s> = <nat:3> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 