\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:u> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:N> := <var:t1> <var:N> := <var:N> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:u> = <var:B> $ before interpreting this series of commands then we have $ <var:N> = <nat:3> \cdot <var:B> + <nat:2> $ when list of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be given by Hoare reasoning . Going forward , the binding statement letting $ <var:u> $ toward $ <var:t1>$ . This line forwards the precondition $ \{ <var:u> = <var:B> \} $ to the postcondition $ \{ <var:u> = <var:B> \land <var:t1> = <var:B> \} $ . Observing the proceeding statement seen in our list of instructions , the binding command \verb | <var:t0> := <nat:2> ; | . This statement forwards the precondition $ \{ <var:u> = <var:B> \land <var:t1> = <var:B> \} $ toward $ \{ <var:u> = <var:B> \land <var:t1> = <var:B> \land <var:t0> = <nat:2> \} $ . This is guaranteed through the assignment scheme found in Hoare logic . Moving on to the following step contained in our list of commands , we see the variable binding line \verb | <var:t1> := <var:t1> * <nat:3> ; | . This statement advances $ \{ <var:u> = <var:B> \land <var:t1> = <var:B> \land <var:t0> = <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:B> \land <var:t1> = <nat:3> * <var:B> \land <var:t0> = <nat:2> \} $ . This is known to be sound with the assignment scheme obtained from typical Hoare reasoning . Advancing , we have the variable assignmet command \verb | <var:N> := <var:t1> | . This moves $ \{ <var:u> = <var:B> \land <var:t1> = <nat:3> * <var:B> \land <var:t0> = <nat:2> \} $ to the condition $ \{ <var:u> = <var:B> \land <var:t0> = <nat:2> \land <var:N> = <nat:3> * <var:B> \} $ . Moving forward to the next bit of code contained in our list of commands , we have the code \verb | <var:N> := <var:N> + <var:t0> | . This statement transfers $ \{ <var:u> = <var:B> \land <var:t0> = <nat:2> \land <var:N> = <nat:3> * <var:B> \} $ to the postcondition $ \{ <var:u> = <var:B> \land <var:N> = <nat:3> * <var:B> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:u> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:N> := <var:t1> <var:N> := <var:N> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:u> = <var:B> }} <def:poly> {{ <var:N> = <nat:3> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:t1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:t1> = <var:B> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:t1> = <nat:3> * <var:B> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:t0> = <nat:2> /\ <var:N> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:B> /\ <var:N> = <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 