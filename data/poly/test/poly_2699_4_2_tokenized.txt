\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:n> ; <var:o> := <nat:3> + <var:o> * <var:n> ; <var:o> := <nat:2> + <var:o> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:n> = <var:Q> $ ahead of running our segment of code , it holds that we see $ <var:o> = <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> $ once series of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for this code can be done through usual Hoare reasoning . Considering the upcoming step found in our code , we see \verb | { <var:n> = <var:Q> } <var:o> := <nat:4> { <var:n> = <var:Q> \land <var:o> = <nat:4> } | . This is deduced by the variable binding rule obtained from typical Hoare reasoning . Now , \verb | { <var:n> = <var:Q> } <var:o> := <nat:4> { <var:n> = <var:Q> \land <var:o> = <nat:4> } | , \verb | { <var:n> = <var:Q> \land <var:o> = <nat:4> } <var:o> := <nat:1> + <var:o> * <var:n> { <var:n> = <var:Q> \land <var:o> = <nat:4> \times <var:Q> + <nat:1> } | and \verb | { <var:n> = <var:Q> \land <var:o> = <nat:4> \times <var:Q> + <nat:1> } <var:o> := <nat:3> + <var:o> * <var:n> { <var:n> = <var:Q> \land <var:o> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:n> ; <var:o> := <nat:3> + <var:o> * <var:n> ; <var:o> := <nat:2> + <var:o> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:n> = <var:Q> }} <def:poly> {{ <var:o> = <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:o> = <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:o> = <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Q> /\ <var:o> = <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 