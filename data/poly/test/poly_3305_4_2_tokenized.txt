\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:2> + <var:z> * <var:n> ; <var:z> := <var:z> * <var:n> ; <var:z> := <nat:1> + <var:z> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:n> = <var:S> $ , given $ <var:S> \in \mathbb{N} $ , ahead of executing the segment of code it must be that we have $ <var:z> = <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:S> \} \\ <var:z> := <nat:3> ; \\ \{ <var:n> = <var:S> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:2> + <var:z> * <var:n> ; \\ \{ <var:n> = <var:S> \land <var:z> = <nat:3> * <var:S> + <nat:2> \} \\ <var:z> := <var:z> * <var:n> ; \\ \{ <var:n> = <var:S> \land <var:z> = <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + \} \\ <var:z> := <nat:1> + <var:z> * <var:n> \\ \{ <var:n> = <var:S> \land <var:z> = <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:3> ; <var:z> := <nat:2> + <var:z> * <var:n> ; <var:z> := <var:z> * <var:n> ; <var:z> := <nat:1> + <var:z> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <def:poly> {{ <var:z> = <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:z> = <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:z> = <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:z> = <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 