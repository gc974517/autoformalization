\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:3> ; <var:q> := <var:s0> \end{verbatim} Assume $ <var:D> = <var:H> $ --- given some integers $ <var:H> $ --- before the evaluation of the set of commands , it must be that we see $ <var:q> = <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:D> = <var:H> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:D> = <var:H> \land <var:s0> = <nat:3> \} \\ <var:q> := <var:s0> \\ \{ <var:D> = <var:H> \land <var:q> = <nat:3> \} \end{eqnarray} Thusly , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:D> = <var:H> }} <var:s0> := <nat:3> ; <var:q> := <var:s0> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 