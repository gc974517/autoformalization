\begin{document} \begin{theorem} Take the following list of instructions as follows \begin{verbatim} <var:B0> := <nat:7> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:n> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:n> ; <var:B2> := <var:B2> * <var:n> ; <var:j> := <var:B2> ; <var:j> := <var:j> + <var:B1> ; <var:j> := <var:j> + <var:B0> \end{verbatim} Assuming that $ <var:n> = <var:R> $ ahead of running this code segment , then $ <var:j> = <nat:8> \times <var:R> ^ <nat:2> + <nat:7> \times <var:R> + <nat:7> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:R> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \} \\ <var:B1> := <nat:7> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> \} \\ <var:B1> := <var:B1> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> * <var:R> \} \\ <var:B2> := <nat:8> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> * <var:R> \land <var:B2> = <nat:8> \} \\ <var:B2> := <var:B2> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> * <var:R> \land <var:B2> = <nat:8> * <var:R> \} \\ <var:B2> := <var:B2> * <var:n> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> * <var:R> \land <var:B2> = <nat:8> * <var:R> ^ <nat:2> \} \\ <var:j> := <var:B2> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:B1> = <nat:7> * <var:R> \land <var:j> = <nat:8> * <var:R> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:B1> ; \\ \{ <var:n> = <var:R> \land <var:B0> = <nat:7> \land <var:j> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> \} \\ <var:j> := <var:j> + <var:B0> \\ \{ <var:n> = <var:R> \land <var:j> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:7> \} \end{eqnarray} Given the preceding argument , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <var:B0> := <nat:7> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:n> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:n> ; <var:B2> := <var:B2> * <var:n> ; <var:j> := <var:B2> ; <var:j> := <var:j> + <var:B1> ; <var:j> := <var:j> + <var:B0> {{ <var:j> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:R> /\ <var:B2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:R> /\ <var:B2> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:R> /\ <var:B2> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:B1> = <nat:7> * <var:R> /\ <var:j> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:B0> = <nat:7> /\ <var:j> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:j> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 