\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:9> ; <var:R> := <var:j0> \end{verbatim} Assuming that $ <var:a> = <var:c> $ ahead of the evaluation of this segment of code it must be that we see $ <var:R> = <nat:9> $ once code has terminated . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is done with usual Hoare reasoning . Moving forward to the upcoming line in our list of commands , the variable binding statement \verb | <var:j0> := <nat:9> ; | . This redefines $ \{ <var:a> = <var:c> \} $ toward $ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \} $ . Moving on , the assignment line letting $ <var:j0$ as $ <var:R>$ . This transfers the precondition $ \{ <var:a> = <var:c> \land <var:j0> = <nat:9> \} $ as the postcondition $ \{ <var:a> = <var:c> \land <var:R> = <nat:9> \} $ . This is sound with the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <var:j0> := <nat:9> ; <var:R> := <var:j0> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 