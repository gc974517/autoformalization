\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:4> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:H> ; <var:M2> := <var:M2> * <var:H> ; <var:K> := <var:M2> ; <var:K> := <var:K> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow $ <var:H> = <var:u> $ --- given $ <var:u> \in \mathbb{N} $ --- prior to running this code segment then $ <var:K> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> $ once series of commands terminates . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:u> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:H> = <var:u> \land <var:M0> = <nat:4> \} \\ <var:M2> := <nat:2> ; \\ \{ <var:H> = <var:u> \land <var:M0> = <nat:4> \land <var:M2> = <nat:2> \} \\ <var:M2> := <var:M2> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:M0> = <nat:4> \land <var:M2> = <nat:2> \times <var:u> \} \\ <var:M2> := <var:M2> * <var:H> ; \\ \{ <var:H> = <var:u> \land <var:M0> = <nat:4> \land <var:M2> = <nat:2> \times <var:u> ^ <nat:2> \} \\ <var:K> := <var:M2> ; \\ \{ <var:H> = <var:u> \land <var:M0> = <nat:4> \land <var:K> = <nat:2> \times <var:u> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:M0> \\ \{ <var:H> = <var:u> \land <var:K> = <nat:2> \times <var:u> ^ <nat:2> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:H> ; <var:M2> := <var:M2> * <var:H> ; <var:K> := <var:M2> ; <var:K> := <var:K> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:H> = <var:u> }} <def:poly> {{ <var:K> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:M0> = <nat:4> /\ <var:M2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:M0> = <nat:4> /\ <var:M2> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:M0> = <nat:4> /\ <var:M2> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:M0> = <nat:4> /\ <var:K> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:u> /\ <var:K> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 