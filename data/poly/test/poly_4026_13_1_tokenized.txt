\begin{document} \begin{theorem} Take a code in \emph{Imp} : \begin{verbatim} <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i4> := <var:i3> * <var:r> ; <var:i5> := <var:i4> * <var:r> ; <var:i0> := <nat:2> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:3> ; <var:i5> := <var:i5> * <nat:8> ; <var:L> := <var:i5> <var:L> := <var:L> + <var:i3> <var:L> := <var:L> + <var:i2> <var:L> := <var:L> + <var:i0> \end{verbatim} Assume --- given every $ <var:b> \in \mathbb{Z}^+ $ --- it to be that $ <var:r> = <var:b> $ prior to evaluating this set of instructions it must be that we have $ <var:L> = <nat:8> \times <var:b> ^ <nat:5> + <nat:3> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:2> $ after set of commands has finished . \end{theorem} \begin{proof} The proof of our set of commands can be demonstrated with usual Hoare reasoning . Honing in on the proceeding lines of codecontained in the series of commands , we have \verb | { <var:r> = <var:b> } <var:i1> := <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> } <var:i2> := <var:i1> * <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> } <var:i3> := <var:i2> * <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> } <var:i4> := <var:i3> * <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> } <var:i5> := <var:i4> * <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> } <var:i0> := <nat:2> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } <var:i2> := <var:i2> * <nat:2> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } <var:i3> := <var:i3> * <nat:3> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } | , \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } <var:i5> := <var:i5> * <nat:8> { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <nat:8> \times <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } | and \verb | { <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i5> = <nat:8> \times <var:b> ^ <nat:5> \land <var:i0> = <nat:2> } <var:L> := <var:i5{ <var:r> = <var:b> \land <var:i1> = <var:b> \land <var:i2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:i3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:i4> = <var:b> ^ <nat:4> \land <var:i0> = <nat:2> \land <var:L> = <nat:8> \times <var:b> ^ <nat:5> } | . Moving onward , we see \verb | { <var:r> = <var:b> } <var:i1> := <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> } | . Moving forward to the following statement seen in the set of instructions , \verb | { <var:r> = <var:b> } <var:i1> := <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> } | . Honing in on the next step contained in our set of commands , we have \verb | { <var:r> = <var:b> } <var:i1> := <var:r> { <var:r> = <var:b> \land <var:i1> = <var:b> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Definition <var:i5> : string := " <var:i5> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i4> := <var:i3> * <var:r> ; <var:i5> := <var:i4> * <var:r> ; <var:i0> := <nat:2> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:3> ; <var:i5> := <var:i5> * <nat:8> ; <var:L> := <var:i5> <var:L> := <var:L> + <var:i3> <var:L> := <var:L> + <var:i2> <var:L> := <var:L> + <var:i0> {{ <var:L> = <nat:8> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <var:b> ^ <nat:2> /\ <var:i3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <var:b> ^ <nat:2> /\ <var:i3> = <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <var:b> ^ <nat:2> /\ <var:i3> = <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i5> = <var:b> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <var:b> ^ <nat:2> /\ <var:i3> = <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i5> = <var:b> ^ <nat:5> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:i3> = <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i5> = <var:b> ^ <nat:5> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i5> = <var:b> ^ <nat:5> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i5> = <nat:8> * <var:b> ^ <nat:5> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:i3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:i4> = <var:b> ^ <nat:4> /\ <var:i0> = <nat:2> /\ <var:L> = <nat:8> * <var:b> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:i0> = <nat:2> /\ <var:L> = <nat:8> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:i1> = <var:b> /\ <var:i0> = <nat:2> /\ <var:L> = <nat:8> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:L> = <nat:8> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 