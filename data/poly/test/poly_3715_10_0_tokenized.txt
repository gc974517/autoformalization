\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:9> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:N> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:N> ; <var:u3> := <var:u3> * <var:N> ; <var:u3> := <var:u3> * <var:N> ; <var:p> := <var:u3> ; <var:p> := <var:p> + <var:u1> ; <var:p> := <var:p> + <var:u0> \end{verbatim} Given --- given all positive coefficients $ <var:C> $ --- that $ <var:N> = <var:C> $ before interpreting this list of commands it must be that we have $ <var:p> = <nat:7> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:C> \} \\ <var:u0> := <nat:9> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \} \\ <var:u1> := <nat:2> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> \} \\ <var:u1> := <var:u1> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \} \\ <var:u3> := <nat:7> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \land <var:u3> = <nat:7> \} \\ <var:u3> := <var:u3> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \land <var:u3> = <nat:7> * <var:C> \} \\ <var:u3> := <var:u3> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \land <var:u3> = <nat:7> * <var:C> ^ <nat:2> \} \\ <var:u3> := <var:u3> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \land <var:u3> = <nat:7> * <var:C> ^ <nat:3> \} \\ <var:p> := <var:u3> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:u1> = <nat:2> * <var:C> \land <var:p> = <nat:7> * <var:C> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:u1> ; \\ \{ <var:N> = <var:C> \land <var:u0> = <nat:9> \land <var:p> = <nat:7> * <var:C> ^ <nat:3> + <nat:2> * <var:C> \} \\ <var:p> := <var:p> + <var:u0> \\ \{ <var:N> = <var:C> \land <var:p> = <nat:7> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:N> = <var:C> }} <var:u0> := <nat:9> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:N> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:N> ; <var:u3> := <var:u3> * <var:N> ; <var:u3> := <var:u3> * <var:N> ; <var:p> := <var:u3> ; <var:p> := <var:p> + <var:u1> ; <var:p> := <var:p> + <var:u0> {{ <var:p> = <nat:7> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> /\ <var:u3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> /\ <var:u3> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> /\ <var:u3> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> /\ <var:u3> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:2> * <var:C> /\ <var:p> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:u0> = <nat:9> /\ <var:p> = <nat:7> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p> = <nat:7> * <var:C> ^ <nat:3> + <nat:2> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 