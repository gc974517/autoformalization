\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:V> ; <var:n> := <var:K1> ; <var:n> := <var:n> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:V> = <var:L> $ prior to the evaluation of our series of commands , it holds that we have $ <var:n> = <nat:6> \cdot <var:L> + <nat:4> $ once set of commands has executed . \end{theorem} \begin{proof} Proving correctness for our set of commands is done with usual Hoare logic . Advancing , we see \begin{verbatim} { <var:V> = <var:L> } <var:K0> := <nat:4> { <var:V> = <var:L> \land <var:K0> = <nat:4> } { <var:V> = <var:L> \land <var:K0> = <nat:4> } <var:K1> := <nat:6> { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:K1> = <nat:6> } { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:K1> = <nat:6> } <var:K1> := <var:K1> * <var:V> { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:K1> = <nat:6> * <var:L> } { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:K1> = <nat:6> * <var:L> } <var:n> := <var:K1> { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:n> = <nat:6> * <var:L> } { <var:V> = <var:L> \land <var:K0> = <nat:4> \land <var:n> = <nat:6> * <var:L> } <var:n> := <var:n> + <var:K0{ <var:V> = <var:L> \land <var:n> = <nat:6> * <var:L> + <nat:4> } \end{verbatim} This is shown to be logically sound using the binding inference rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:V> ; <var:n> := <var:K1> ; <var:n> := <var:n> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:V> = <var:L> }} <def:poly> {{ <var:n> = <nat:6> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:K0> = <nat:4> /\ <var:n> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:n> = <nat:6> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 