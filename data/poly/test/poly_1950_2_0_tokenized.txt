\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:W> := <var:G0> \end{verbatim} Allow ( for any positive integer coefficients $ <var:N> $ ) $ <var:Z> = <var:N> $ prior to evaluating the series of instructions , it must be that we see $ <var:W> = <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the set of commands can be accomplished through standard Hoare reasoning . Advancing to the subsequent bits of codeseen in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:N> \} & <var:G0> := <nat:8> & \{ <var:Z> = <var:N> \land <var:G0> = <nat:8> \} \\ \{ <var:Z> = <var:N> \land <var:G0> = <nat:8> \} & <var:W> := <var:G0& \{ <var:Z> = <var:N> \land <var:W> = <nat:8> \} \end{tabular} This is shown through the law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <var:G0> := <nat:8> ; <var:W> := <var:G0> {{ <var:W> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:W> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 