\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:v> ; <var:j2> := <var:j1> * <var:v> ; <var:j3> := <var:j2> * <var:v> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:4> ; <var:W> := <var:j3> <var:W> := <var:W> + <var:j2> <var:W> := <var:W> + <var:j1> <var:W> := <var:W> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:v> = <var:I> $ before interpreting our series of instructions , it follows that we see $ <var:W> = <nat:4> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:7> $ once list of commands has finished . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:v> = <var:I> \} \\ <var:j1> := <var:v> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <var:I> \} \\ <var:j2> := <var:j1> * <var:v> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <var:I> \land <var:j2> = <var:I> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:v> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <var:I> \land <var:j2> = <var:I> ^ <nat:2> \land <var:j3> = <var:I> ^ <nat:3> \} \\ <var:j0> := <nat:7> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <var:I> \land <var:j2> = <var:I> ^ <nat:2> \land <var:j3> = <var:I> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j1> := <var:j1> * <nat:3> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <nat:3> \times <var:I> \land <var:j2> = <var:I> ^ <nat:2> \land <var:j3> = <var:I> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j2> := <var:j2> * <nat:5> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <nat:3> \times <var:I> \land <var:j2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:j3> = <var:I> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j3> := <var:j3> * <nat:4> ; \\ \{ <var:v> = <var:I> \land <var:j1> = <nat:3> \times <var:I> \land <var:j2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:j3> = <nat:4> \times <var:I> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:W> := <var:j3> \\ \{ <var:v> = <var:I> \land <var:j1> = <nat:3> \times <var:I> \land <var:j2> = <nat:5> \times <var:I> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:W> = <nat:4> \times <var:I> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:j2> \\ \{ <var:v> = <var:I> \land <var:j1> = <nat:3> \times <var:I> \land <var:j0> = <nat:7> \land <var:W> = <nat:4> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:j1> \\ \{ <var:v> = <var:I> \land <var:j0> = <nat:7> \land <var:W> = <nat:4> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> \} \\ <var:W> := <var:W> + <var:j0> \\ \{ <var:v> = <var:I> \land <var:W> = <nat:4> \times <var:I> ^ <nat:3> + <nat:5> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:7> \} \end{eqnarray} Considering the above , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j1> := <var:v> ; <var:j2> := <var:j1> * <var:v> ; <var:j3> := <var:j2> * <var:v> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:4> ; <var:W> := <var:j3> <var:W> := <var:W> + <var:j2> <var:W> := <var:W> + <var:j1> <var:W> := <var:W> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:v> = <var:I> }} <def:poly> {{ <var:W> = <nat:4> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <var:I> /\ <var:j2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <var:I> /\ <var:j2> = <var:I> ^ <nat:2> /\ <var:j3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <var:I> /\ <var:j2> = <var:I> ^ <nat:2> /\ <var:j3> = <var:I> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <nat:3> * <var:I> /\ <var:j2> = <var:I> ^ <nat:2> /\ <var:j3> = <var:I> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <nat:3> * <var:I> /\ <var:j2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:j3> = <var:I> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <nat:3> * <var:I> /\ <var:j2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:I> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <nat:3> * <var:I> /\ <var:j2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:j0> = <nat:7> /\ <var:W> = <nat:4> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j1> = <nat:3> * <var:I> /\ <var:j0> = <nat:7> /\ <var:W> = <nat:4> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:j0> = <nat:7> /\ <var:W> = <nat:4> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:W> = <nat:4> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 