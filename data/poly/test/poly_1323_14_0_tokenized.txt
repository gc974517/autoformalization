\begin{document} \begin{theorem} Define the following list of commands : \begin{verbatim} <var:E0> := <nat:1> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:B> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:B> ; <var:E2> := <var:E2> * <var:B> ; <var:E3> := <nat:2> ; <var:E3> := <var:E3> * <var:B> ; <var:E3> := <var:E3> * <var:B> ; <var:E3> := <var:E3> * <var:B> ; <var:V> := <var:E3> ; <var:V> := <var:V> + <var:E2> ; <var:V> := <var:V> + <var:E1> ; <var:V> := <var:V> + <var:E0> \end{verbatim} Given that we have $ <var:B> = <var:l> $ , for some natural coefficients $ <var:l> $ , ahead of executing our set of instructions it must be that $ <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our list of instructions can be accomplished using typical Hoare reasoning . Stepping through , we see the binding code \verb | <var:E0> := <nat:1> ; | . This command advances the condition $ \{ <var:B> = <var:l> \} $ to the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \} $ . Next , the variable update command \verb | <var:E1> := <nat:4> ; | . This takes the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \} $ toward the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \} $ . Paying attention to the proceeding piece of code in the code segment , the binding code \verb | <var:E1> := <var:E1> * <var:B> ; | . This transfers $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \} $ to the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \} $ . This is known to be sound with the assignment law in typical Hoare logic . Advancing , we have the variable assignmet line \verb | <var:E2> := <nat:6> ; | . This redefines $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \} $ to the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \} $ . This is ensured through the assignment inference rule of usual Hoare logic . Focusing on the following step contained in our set of commands , the environment update code \verb | <var:E2> := <var:E2> * <var:B> ; | . This command takes the precondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \} $ toward the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> \} $ . This is rigorously given with the assignment law given in usual Hoare techniques . Moving on to the next step , we have the binding command \verb | <var:E2> := <var:E2> * <var:B> ; | . This forwards $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> \} $ toward $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \} $ . Moving on to the subsequent line found in the list of instructions , we see the variable assignmet code letting $ <nat:2> $ as $ <var:E3>$ . This takes the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \} $ to $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \} $ . This is sound using the assignment scheme obtained from standard Hoare techniques . Considering the next command in our code segment , the variable assignmet statement \verb | <var:E3> := <var:E3> * <var:B> ; | . This statement transfers $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \} $ as $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> \} $ . Next , we have the binding code \verb | <var:E3> := <var:E3> * <var:B> ; | . This takes $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> \} $ as the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment scheme given in typical Hoare logic . Moving forward to the next step , we have the variable update code \verb | <var:E3> := <var:E3> * <var:B> ; | . This code moves the precondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> ^ <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> ^ <nat:3> \} $ . Immediately after , we see the binding line assigning $ <var:E3> $ to $ <var:V>$ . This command forwards the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:E3> = <nat:2> \times <var:l> ^ <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment rule defined by typical Hoare logic . Going to the next step , we see the assignment statement \verb | <var:V> := <var:V> + <var:E2> ; | . This moves the precondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:E2> = <nat:6> \times <var:l> ^ <nat:2> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> \} $ as the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> \} $ . Focusing on the proceeding command contained in the program , the assignment code \verb | <var:V> := <var:V> + <var:E1> ; | . This moves the condition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:E1> = <nat:4> \times <var:l> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> \} $ . This is guaranteed using the assignment rule in standard Hoare logic . Observing the subsequent step found in our series of commands , we see the environment update line defining $ <var:V> + <var:E0$ as $ <var:V>$ . This moves the precondition $ \{ <var:B> = <var:l> \land <var:E0> = <nat:1> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> \} $ into $ \{ <var:B> = <var:l> \land <var:V> = <nat:2> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> \} $ . This is sound through the assignment rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:B> = <var:l> }} <var:E0> := <nat:1> ; <var:E1> := <nat:4> ; <var:E1> := <var:E1> * <var:B> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:B> ; <var:E2> := <var:E2> * <var:B> ; <var:E3> := <nat:2> ; <var:E3> := <var:E3> * <var:B> ; <var:E3> := <var:E3> * <var:B> ; <var:E3> := <var:E3> * <var:B> ; <var:V> := <var:E3> ; <var:V> := <var:V> + <var:E2> ; <var:V> := <var:V> + <var:E1> ; <var:V> := <var:V> + <var:E0> {{ <var:V> = <nat:2> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:E3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:E2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:V> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:4> * <var:l> /\ <var:V> = <nat:2> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:E0> = <nat:1> /\ <var:V> = <nat:2> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:l> /\ <var:V> = <nat:2> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 