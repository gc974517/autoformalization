\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:5> ; <var:N1> := <nat:8> ; <var:N1> := <var:N1> * <var:e> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:e> ; <var:N2> := <var:N2> * <var:e> ; <var:N3> := <nat:9> ; <var:N3> := <var:N3> * <var:e> ; <var:N3> := <var:N3> * <var:e> ; <var:N3> := <var:N3> * <var:e> ; <var:V> := <var:N3> ; <var:V> := <var:V> + <var:N2> ; <var:V> := <var:V> + <var:N1> ; <var:V> := <var:V> + <var:N0> \end{verbatim} Given ( letting natural numbers $ <var:F> $ ) it to hold that $ <var:e> = <var:F> $ prior to the evaluation of the segment of code , it follows that we see $ <var:V> = <nat:9> \cdot <var:F> ^ <nat:3> + <nat:6> \cdot <var:F> ^ <nat:2> + <nat:8> \cdot <var:F> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is accomplished through Hoare logic . Moving forward to the next step , we see \begin{eqnarray} \{ <var:e> = <var:F> \} \, <var:N0> := <nat:5> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \, <var:N1> := <nat:8> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \} \, <var:N1> := <var:N1> * <var:e> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \} \, <var:N2> := <nat:6> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \} \end{eqnarray} This is ensured with the variable assignmet scheme defined in Hoare reasoning . Moving on to the proceeding statement contained in the series of commands , \begin{eqnarray} \{ <var:e> = <var:F> \} \, <var:N0> := <nat:5> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound with the variable update inference rule defined in typical Hoare techniques . Focusing on the upcoming pieces of code seen in our series of instructions , we see \begin{eqnarray} \{ <var:e> = <var:F> \} \, <var:N0> := <nat:5> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \, <var:N1> := <nat:8> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \} \, <var:N1> := <var:N1> * <var:e> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \} \, <var:N2> := <nat:6> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \} \, <var:N2> := <var:N2> * <var:e> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \cdot <var:F> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \cdot <var:F> \} \, <var:N2> := <var:N2> * <var:e> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \cdot <var:F> \land <var:N2> = <nat:6> \cdot <var:F> ^ <nat:2> \} \end{eqnarray} Paying attention to the following command contained in the program , we have \begin{eqnarray} \{ <var:e> = <var:F> \} \, <var:N0> := <nat:5> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \end{eqnarray} This is guaranteed using the inference rule of usual Hoare techniques . Now , we see \begin{eqnarray} \{ <var:e> = <var:F> \} \, <var:N0> := <nat:5> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \\ \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \} \, <var:N1> := <nat:8> \, \{ <var:e> = <var:F> \land <var:N0> = <nat:5> \land <var:N1> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:e> = <var:F> }} <var:N0> := <nat:5> ; <var:N1> := <nat:8> ; <var:N1> := <var:N1> * <var:e> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:e> ; <var:N2> := <var:N2> * <var:e> ; <var:N3> := <nat:9> ; <var:N3> := <var:N3> * <var:e> ; <var:N3> := <var:N3> * <var:e> ; <var:N3> := <var:N3> * <var:e> ; <var:V> := <var:N3> ; <var:V> := <var:V> + <var:N2> ; <var:V> := <var:V> + <var:N1> ; <var:V> := <var:V> + <var:N0> {{ <var:V> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:N2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:V> = <nat:9> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:N1> = <nat:8> * <var:F> /\ <var:V> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:N0> = <nat:5> /\ <var:V> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:V> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 