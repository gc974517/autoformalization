\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:s> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:2> ; <var:x> := <var:F1> <var:x> := <var:x> + <var:F0> \end{verbatim} Assume that $ <var:s> = <var:R> $ before the evaluation of the series of commands then we see $ <var:x> = <nat:2> \times <var:R> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:R> \} \\ <var:F1> := <var:s> ; \\ \{ <var:s> = <var:R> \land <var:F1> = <var:R> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:s> = <var:R> \land <var:F1> = <var:R> \land <var:F0> = <nat:1> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:s> = <var:R> \land <var:F1> = <nat:2> \cdot <var:R> \land <var:F0> = <nat:1> \} \\ <var:x> := <var:F1> \\ \{ <var:s> = <var:R> \land <var:F0> = <nat:1> \land <var:x> = <nat:2> \cdot <var:R> \} \\ <var:x> := <var:x> + <var:F0> \\ \{ <var:s> = <var:R> \land <var:x> = <nat:2> \cdot <var:R> + <nat:1> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:s> = <var:R> }} <var:F1> := <var:s> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:2> ; <var:x> := <var:F1> <var:x> := <var:x> + <var:F0> {{ <var:x> = <nat:2> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:F1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:F1> = <var:R> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:F1> = <nat:2> * <var:R> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:F0> = <nat:1> /\ <var:x> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:x> = <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 