\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:S0> := <nat:7> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:m> ; <var:y> := <var:S1> ; <var:y> := <var:y> + <var:S0> \end{verbatim} Assume that we have $ <var:m> = <var:O> $ ahead of interpreting our set of instructions it holds that we have $ <var:y> = <nat:1> \cdot <var:O> + <nat:7> $ once series of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is evident through typical Hoare techniques . Focusing on the proceeding commands contained in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:O> \} & <var:S0> := <nat:7> & \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \} \\ \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \} & <var:S1> := <nat:1> & \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \} \\ \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \} & <var:S1> := <var:S1> * <var:m> & \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \cdot <var:O> \} \\ \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:S1> = <nat:1> \cdot <var:O> \} & <var:y> := <var:S1> & \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:y> = <nat:1> \cdot <var:O> \} \\ \{ <var:m> = <var:O> \land <var:S0> = <nat:7> \land <var:y> = <nat:1> \cdot <var:O> \} & <var:y> := <var:y> + <var:S0& \{ <var:m> = <var:O> \land <var:y> = <nat:1> \cdot <var:O> + <nat:7> \} \end{tabular} This is sound by the variable assignmet scheme defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:m> = <var:O> }} <var:S0> := <nat:7> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:m> ; <var:y> := <var:S1> ; <var:y> := <var:y> + <var:S0> {{ <var:y> = <nat:1> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:S0> = <nat:7> /\ <var:y> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:y> = <nat:1> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 