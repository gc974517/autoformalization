\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:J> ; <var:G2> := <var:G1> * <var:J> ; <var:G3> := <var:G2> * <var:J> ; <var:G4> := <var:G3> * <var:J> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:2> ; <var:C> := <var:G4> <var:C> := <var:C> + <var:G3> <var:C> := <var:C> + <var:G2> <var:C> := <var:C> + <var:G1> <var:C> := <var:C> + <var:G0> \end{verbatim} Assuming ( for some positive numbers $ <var:y> $ ) $ <var:J> = <var:y> $ ahead of executing this segment of code then we see $ <var:C> = <nat:2> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions can be accomplished through standard Hoare logic . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} & <var:G2> := <var:G1> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} & <var:G3> := <var:G2> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \} \end{tabular} This is rigorously given through the variable assignmet scheme given by standard Hoare techniques . Moving forward to the following bits of codefound in the segment of code , \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} & <var:G2> := <var:G1> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} & <var:G3> := <var:G2> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \} & <var:G4> := <var:G3> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \} & <var:G0> := <nat:1> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G4> = <var:y> ^ <nat:4> \land <var:G0> = <nat:1> \} \end{tabular} This is shown to be logically sound using the environment update law found in usual Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \end{tabular} This is given using the environment update law defined by usual Hoare logic . Considering the proceeding lines of codecontained in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \\ \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} & <var:G2> := <var:G1> * <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} \end{tabular} Looking at the subsequent line of code contained in the program , \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \end{tabular} Moving on to the following piece of code contained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \end{tabular} Jumping to the proceeding command found in our code , \[ \begin{tabular} {rcl} \{ <var:J> = <var:y> \} & <var:G1> := <var:J> & \{ <var:J> = <var:y> \land <var:G1> = <var:y> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:J> = <var:y> }} <var:G1> := <var:J> ; <var:G2> := <var:G1> * <var:J> ; <var:G3> := <var:G2> * <var:J> ; <var:G4> := <var:G3> * <var:J> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:2> ; <var:G4> := <var:G4> * <nat:2> ; <var:C> := <var:G4> <var:C> := <var:C> + <var:G3> <var:C> := <var:C> + <var:G2> <var:C> := <var:C> + <var:G1> <var:C> := <var:C> + <var:G0> {{ <var:C> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:G4> = <var:y> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:G4> = <nat:2> * <var:y> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:G3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:G0> = <nat:1> /\ <var:C> = <nat:2> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:G0> = <nat:1> /\ <var:C> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G1> = <nat:2> * <var:y> /\ <var:G0> = <nat:1> /\ <var:C> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:G0> = <nat:1> /\ <var:C> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:y> /\ <var:C> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 