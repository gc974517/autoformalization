\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:I0> := <nat:6> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:p> ; <var:I2> := <var:I2> * <var:p> ; <var:I3> := <nat:6> ; <var:I3> := <var:I3> * <var:p> ; <var:I3> := <var:I3> * <var:p> ; <var:I3> := <var:I3> * <var:p> ; <var:K> := <var:I3> ; <var:K> := <var:K> + <var:I2> ; <var:K> := <var:K> + <var:I0> \end{verbatim} Given $ <var:p> = <var:J> $ ahead of the execution of the list of commands , it follows that we have $ <var:K> = <nat:6> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:p> = <var:J> \} \\ <var:I0> := <nat:6> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \} \\ <var:I2> := <nat:7> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \} \\ <var:I2> := <var:I2> * <var:p> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> \} \\ <var:I2> := <var:I2> * <var:p> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \} \\ <var:I3> := <nat:6> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:I3> = <nat:6> \} \\ <var:I3> := <var:I3> * <var:p> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:I3> = <nat:6> \cdot <var:J> \} \\ <var:I3> := <var:I3> * <var:p> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:I3> = <nat:6> \cdot <var:J> ^ <nat:2> \} \\ <var:I3> := <var:I3> * <var:p> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:I3> = <nat:6> \cdot <var:J> ^ <nat:3> \} \\ <var:K> := <var:I3> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:I2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:K> = <nat:6> \cdot <var:J> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:I2> ; \\ \{ <var:p> = <var:J> \land <var:I0> = <nat:6> \land <var:K> = <nat:6> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:I0> \\ \{ <var:p> = <var:J> \land <var:K> = <nat:6> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:6> \} \end{eqnarray} Given the preceding argument , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:p> = <var:J> }} <var:I0> := <nat:6> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:p> ; <var:I2> := <var:I2> * <var:p> ; <var:I3> := <nat:6> ; <var:I3> := <var:I3> * <var:p> ; <var:I3> := <var:I3> * <var:p> ; <var:I3> := <var:I3> * <var:p> ; <var:K> := <var:I3> ; <var:K> := <var:K> + <var:I2> ; <var:K> := <var:K> + <var:I0> {{ <var:K> = <nat:6> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:I3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:I2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:K> = <nat:6> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:I0> = <nat:6> /\ <var:K> = <nat:6> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:K> = <nat:6> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 