\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:D0> := <nat:1> ; <var:c> := <var:D0> \end{verbatim} Given , given every positive integer coefficients $ <var:e> $ , that $ <var:o> = <var:e> $ before running this list of commands it must be that $ <var:c> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the code is clear by the following decorated list of instructions . \begin{eqnarray} \{ <var:o> = <var:e> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:o> = <var:e> \land <var:D0> = <nat:1> \} \\ <var:c> := <var:D0> \\ \{ <var:o> = <var:e> \land <var:c> = <nat:1> \} \end{eqnarray} Utilizing Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:o> = <var:e> }} <var:D0> := <nat:1> ; <var:c> := <var:D0> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 