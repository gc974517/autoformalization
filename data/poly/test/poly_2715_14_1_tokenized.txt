\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:y> ; <var:l2> := <var:l1> * <var:y> ; <var:l3> := <var:l2> * <var:y> ; <var:l4> := <var:l3> * <var:y> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:2> ; <var:l4> := <var:l4> * <nat:5> ; <var:S> := <var:l4> <var:S> := <var:S> + <var:l3> <var:S> := <var:S> + <var:l2> <var:S> := <var:S> + <var:l1> <var:S> := <var:S> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting positive coefficients $ <var:Y> $ --- that $ <var:y> = <var:Y> $ before executing our set of instructions it follows that we have $ <var:S> = <nat:5> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:7> $ once code has exited . \end{theorem} \begin{proof} The proof of our list of commands is given by typical Hoare logic . After , \begin{eqnarray} \{ <var:y> = <var:Y> \} \, <var:l1> := <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \end{eqnarray} This is known to be sound with the binding law given in typical Hoare logic . Stepping through , we have \begin{eqnarray} \{ <var:y> = <var:Y> \} \, <var:l1> := <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \, <var:l2> := <var:l1> * <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \} \end{eqnarray} This is shown to be logically sound using the variable binding rule obtained from typical Hoare techniques . Moving on , \begin{eqnarray} \{ <var:y> = <var:Y> \} \, <var:l1> := <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \, <var:l2> := <var:l1> * <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \} \, <var:l3> := <var:l2> * <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \} \, <var:l4> := <var:l3> * <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \} \, <var:l0> := <nat:7> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \, <var:l1> := <var:l1> * <nat:3> \, \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \, <var:l2> := <var:l2> * <nat:9> \, \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \, <var:l3> := <var:l3> * <nat:2> \, \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:l4> = <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \, <var:l4> := <var:l4> * <nat:5> \, \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:l4> = <nat:5> \cdot <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \\ \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:l4> = <nat:5> \cdot <var:Y> ^ <nat:4> \land <var:l0> = <nat:7> \} \, <var:S> := <var:l4\, \{ <var:y> = <var:Y> \land <var:l1> = <nat:3> \cdot <var:Y> \land <var:l2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:l3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:l0> = <nat:7> \land <var:S> = <nat:5> \cdot <var:Y> ^ <nat:4> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:y> = <var:Y> \} \, <var:l1> := <var:y> \, \{ <var:y> = <var:Y> \land <var:l1> = <var:Y> \} \end{eqnarray} This is rigorously given with the binding law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <var:l4> : string := " <var:l4> " . Definition <def:poly> := <var:l1> := <var:y> ; <var:l2> := <var:l1> * <var:y> ; <var:l3> := <var:l2> * <var:y> ; <var:l4> := <var:l3> * <var:y> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:2> ; <var:l4> := <var:l4> * <nat:5> ; <var:S> := <var:l4> <var:S> := <var:S> + <var:l3> <var:S> := <var:S> + <var:l2> <var:S> := <var:S> + <var:l1> <var:S> := <var:S> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:y> = <var:Y> }} <def:poly> {{ <var:S> = <nat:5> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l3> = <var:Y> ^ <nat:3> /\ <var:l4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l3> = <var:Y> ^ <nat:3> /\ <var:l4> = <var:Y> ^ <nat:4> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <var:Y> ^ <nat:2> /\ <var:l3> = <var:Y> ^ <nat:3> /\ <var:l4> = <var:Y> ^ <nat:4> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:l3> = <var:Y> ^ <nat:3> /\ <var:l4> = <var:Y> ^ <nat:4> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:l4> = <var:Y> ^ <nat:4> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:l4> = <nat:5> * <var:Y> ^ <nat:4> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:l0> = <nat:7> /\ <var:S> = <nat:5> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:l0> = <nat:7> /\ <var:S> = <nat:5> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l1> = <nat:3> * <var:Y> /\ <var:l0> = <nat:7> /\ <var:S> = <nat:5> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:l0> = <nat:7> /\ <var:S> = <nat:5> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Y> /\ <var:S> = <nat:5> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 