\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:A> ; <var:I2> := <var:I1> * <var:A> ; <var:I0> := <nat:7> ; <var:I1> := <var:I1> * <nat:2> ; <var:I2> := <var:I2> * <nat:3> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I1> <var:B> := <var:B> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Assuming , given any positive coefficients $ <var:C> $ , $ <var:A> = <var:C> $ before executing our segment of code it holds that $ <var:B> = <nat:3> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the list of commands is accomplished with Hoare logic . Moving on , we see the variable update line \verb | <var:I1> := <var:A> ; | . This advances the condition $ \{ <var:A> = <var:C> \} $ as $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \} $ . Stepping through , the variable update code \verb | <var:I2> := <var:I1> * <var:A> ; | . This transfers the precondition $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \} $ into $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \land <var:I2> = <var:C> ^ <nat:2> \} $ . Observing the following bit of code seen in our program , the variable update command letting $ <nat:7> $ to $ <var:I0>$ . This statement redefines the precondition $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \land <var:I2> = <var:C> ^ <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \land <var:I2> = <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ . This is guaranteed through the assignment inference rule defined in Hoare techniques . Stepping through , we see the environment update command \verb | <var:I1> := <var:I1> * <nat:2> ; | . This line transfers the condition $ \{ <var:A> = <var:C> \land <var:I1> = <var:C> \land <var:I2> = <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ to the postcondition $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I2> = <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ . This is shown to be logically sound through the assignment rule in typical Hoare techniques . After , we see the assignment command letting $ <var:I2> * <nat:3> $ as $ <var:I2>$ . This takes $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I2> = <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ to $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I2> = <nat:3> * <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ . This is ensured by the assignment rule defined in typical Hoare reasoning . Advancing , we see the variable binding command yielding $ <var:I2$ toward $ <var:B>$ . This code advances $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I2> = <nat:3> * <var:C> ^ <nat:2> \land <var:I0> = <nat:7> \} $ as $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I0> = <nat:7> \land <var:B> = <nat:3> * <var:C> ^ <nat:2> \} $ . After , we have the command assigning $ <var:B> + <var:I1$ as $ <var:B>$ . This moves $ \{ <var:A> = <var:C> \land <var:I1> = <nat:2> * <var:C> \land <var:I0> = <nat:7> \land <var:B> = <nat:3> * <var:C> ^ <nat:2> \} $ toward $ \{ <var:A> = <var:C> \land <var:I0> = <nat:7> \land <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} $ . Considering the subsequent line of code contained in the series of instructions , the environment update statement letting $ <var:B> + <var:I0$ to $ <var:B>$ . This line advances the condition $ \{ <var:A> = <var:C> \land <var:I0> = <nat:7> \land <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} $ to $ \{ <var:A> = <var:C> \land <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> \} $ . This is shown by the assignment law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I1> := <var:A> ; <var:I2> := <var:I1> * <var:A> ; <var:I0> := <nat:7> ; <var:I1> := <var:I1> * <nat:2> ; <var:I2> := <var:I2> * <nat:3> ; <var:B> := <var:I2> <var:B> := <var:B> + <var:I1> <var:B> := <var:B> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <def:poly> {{ <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <var:C> /\ <var:I2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <var:C> /\ <var:I2> = <var:C> ^ <nat:2> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <nat:2> * <var:C> /\ <var:I2> = <var:C> ^ <nat:2> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <nat:2> * <var:C> /\ <var:I2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I1> = <nat:2> * <var:C> /\ <var:I0> = <nat:7> /\ <var:B> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:I0> = <nat:7> /\ <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:B> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 