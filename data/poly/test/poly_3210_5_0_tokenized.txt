\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:a0> := <nat:6> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:j> ; <var:E> := <var:a1> ; <var:E> := <var:E> + <var:a0> \end{verbatim} Assume it to hold that $ <var:j> = <var:X> $ before running this set of instructions , it must be that we have $ <var:E> = <nat:9> \cdot <var:X> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be done with standard Hoare reasoning . Immediately after , we see the statement giving $ <nat:6> $ to $ <var:a0>$ . This statement takes the condition $ \{ <var:j> = <var:X> \} $ to the condition $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \} $ . Now , the assignment code defining $ <nat:9> $ toward $ <var:a1>$ . This advances $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \} $ as $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> \} $ . Going to the next step , we have the variable binding code \verb | <var:a1> := <var:a1> * <var:j> ; | . This code transfers $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> \} $ to $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> \times <var:X> \} $ . This is ensured using the assignment rule given in Hoare logic . Considering the proceeding command seen in the set of commands , we see the variable update statement binding $ <var:a1> $ toward $ <var:E>$ . This forwards the condition $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:a1> = <nat:9> \times <var:X> \} $ as $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:E> = <nat:9> \times <var:X> \} $ . Immediately following , the variable update command binding $ <var:E> + <var:a0$ to $ <var:E>$ . This moves the condition $ \{ <var:j> = <var:X> \land <var:a0> = <nat:6> \land <var:E> = <nat:9> \times <var:X> \} $ as the condition $ \{ <var:j> = <var:X> \land <var:E> = <nat:9> \times <var:X> + <nat:6> \} $ . This is sound using the assignment inference rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:j> = <var:X> }} <var:a0> := <nat:6> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:j> ; <var:E> := <var:a1> ; <var:E> := <var:E> + <var:a0> {{ <var:E> = <nat:9> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:a0> = <nat:6> /\ <var:E> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:E> = <nat:9> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 