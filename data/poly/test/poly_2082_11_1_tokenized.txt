\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:C> ; <var:L2> := <var:L1> * <var:C> ; <var:L3> := <var:L2> * <var:C> ; <var:L4> := <var:L3> * <var:C> ; <var:L5> := <var:L4> * <var:C> ; <var:L0> := <nat:3> ; <var:L2> := <var:L2> * <nat:2> ; <var:L5> := <var:L5> * <nat:4> ; <var:v> := <var:L5> <var:v> := <var:v> + <var:L2> <var:v> := <var:v> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given positive coefficients $ <var:B> $ , it to hold that $ <var:C> = <var:B> $ ahead of executing our program , then $ <var:v> = <nat:4> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> $ once series of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:B> \} \\ <var:L1> := <var:C> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \} \\ <var:L2> := <var:L1> * <var:C> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:C> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \} \\ <var:L4> := <var:L3> * <var:C> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \} \\ <var:L5> := <var:L4> * <var:C> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \land <var:L5> = <var:B> ^ <nat:5> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \land <var:L5> = <var:B> ^ <nat:5> \land <var:L0> = <nat:3> \} \\ <var:L2> := <var:L2> * <nat:2> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \land <var:L5> = <var:B> ^ <nat:5> \land <var:L0> = <nat:3> \} \\ <var:L5> := <var:L5> * <nat:4> ; \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \land <var:L5> = <nat:4> \times <var:B> ^ <nat:5> \land <var:L0> = <nat:3> \} \\ <var:v> := <var:L5> \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L4> = <var:B> ^ <nat:4> \land <var:L0> = <nat:3> \land <var:v> = <nat:4> \times <var:B> ^ <nat:5> \} \\ <var:v> := <var:v> + <var:L2> \\ \{ <var:C> = <var:B> \land <var:L1> = <var:B> \land <var:L0> = <nat:3> \land <var:v> = <nat:4> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:L0> \\ \{ <var:C> = <var:B> \land <var:v> = <nat:4> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Definition <var:L5> : string := " <var:L5> " . Definition <def:poly> := <var:L1> := <var:C> ; <var:L2> := <var:L1> * <var:C> ; <var:L3> := <var:L2> * <var:C> ; <var:L4> := <var:L3> * <var:C> ; <var:L5> := <var:L4> * <var:C> ; <var:L0> := <nat:3> ; <var:L2> := <var:L2> * <nat:2> ; <var:L5> := <var:L5> * <nat:4> ; <var:v> := <var:L5> <var:v> := <var:v> + <var:L2> <var:v> := <var:v> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:C> = <var:B> }} <def:poly> {{ <var:v> = <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> /\ <var:L5> = <var:B> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> /\ <var:L5> = <var:B> ^ <nat:5> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> /\ <var:L5> = <var:B> ^ <nat:5> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> /\ <var:L5> = <nat:4> * <var:B> ^ <nat:5> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L4> = <var:B> ^ <nat:4> /\ <var:L0> = <nat:3> /\ <var:v> = <nat:4> * <var:B> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:L1> = <var:B> /\ <var:L0> = <nat:3> /\ <var:v> = <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:v> = <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 