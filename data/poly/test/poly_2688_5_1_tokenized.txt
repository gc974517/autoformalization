\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:A> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:b> := <var:F1> <var:b> := <var:b> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Allowing that $ <var:A> = <var:m> $ prior to the evaluation of the set of commands , it follows that we have $ <var:b> = <nat:3> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the list of commands is demonstrated through usual Hoare logic . Immediately after , we have the variable binding command assigning $ <var:A> $ to $ <var:F1>$ . This redefines the condition $ \{ <var:A> = <var:m> \} $ toward the postcondition $ \{ <var:A> = <var:m> \land <var:F1> = <var:m> \} $ . Advancing , we have the assignment statement \verb | <var:F0> := <nat:3> ; | . This transfers the condition $ \{ <var:A> = <var:m> \land <var:F1> = <var:m> \} $ to the condition $ \{ <var:A> = <var:m> \land <var:F1> = <var:m> \land <var:F0> = <nat:3> \} $ . Going forward , we have the assignment code \verb | <var:F1> := <var:F1> * <nat:3> ; | . This statement forwards the condition $ \{ <var:A> = <var:m> \land <var:F1> = <var:m> \land <var:F0> = <nat:3> \} $ to the postcondition $ \{ <var:A> = <var:m> \land <var:F1> = <nat:3> \times <var:m> \land <var:F0> = <nat:3> \} $ . Stepping through , we have the assignment code \verb | <var:b> := <var:F1> | . This moves the condition $ \{ <var:A> = <var:m> \land <var:F1> = <nat:3> \times <var:m> \land <var:F0> = <nat:3> \} $ into the condition $ \{ <var:A> = <var:m> \land <var:F0> = <nat:3> \land <var:b> = <nat:3> \times <var:m> \} $ . This is sound with the assignment law found in usual Hoare techniques . After , the variable update command yielding $ <var:b> + <var:F0$ to $ <var:b>$ . This transfers the condition $ \{ <var:A> = <var:m> \land <var:F0> = <nat:3> \land <var:b> = <nat:3> \times <var:m> \} $ to the postcondition $ \{ <var:A> = <var:m> \land <var:b> = <nat:3> \times <var:m> + <nat:3> \} $ . This is shown with the assignment inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:A> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:b> := <var:F1> <var:b> := <var:b> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:A> = <var:m> }} <def:poly> {{ <var:b> = <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:F1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:F1> = <var:m> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:F1> = <nat:3> * <var:m> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:F0> = <nat:3> /\ <var:b> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:b> = <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 