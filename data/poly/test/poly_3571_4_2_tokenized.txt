\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:3> + <var:r> * <var:G> ; <var:r> := <nat:3> + <var:r> * <var:G> ; <var:r> := <nat:1> + <var:r> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allow ( given some $ <var:V> $ ) that $ <var:G> = <var:V> $ before interpreting our list of commands , it follows that $ <var:r> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code is demonstrated with Hoare reasoning . Looking at the subsequent line seen in our code , the variable assignmet code letting $ <nat:2> $ into $ <var:r>$ . This takes $ \{ <var:G> = <var:V> \} $ toward the condition $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> \} $ . Moving onward , the environment update command \verb | <var:r> := <nat:3> + <var:r> * <var:G> ; | . This command redefines the precondition $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> \} $ toward $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> * <var:V> + <nat:3> \} $ . Advancing to the subsequent step found in the code , we see the variable update command \verb | <var:r> := <nat:3> + <var:r> * <var:G> ; | . This code advances the condition $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> * <var:V> + <nat:3> \} $ to the postcondition $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> \} $ . Moving forward to the next step , we see the assignment statement assigning $ <nat:1> + <var:r> * <var:G$ toward $ <var:r>$ . This line forwards the precondition $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> \} $ into $ \{ <var:G> = <var:V> \land <var:r> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:2> ; <var:r> := <nat:3> + <var:r> * <var:G> ; <var:r> := <nat:3> + <var:r> * <var:G> ; <var:r> := <nat:1> + <var:r> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:G> = <var:V> }} <def:poly> {{ <var:r> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:r> = <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:r> = <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:r> = <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 