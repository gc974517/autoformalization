\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:c> = <var:V> $ ahead of the execution of our set of instructions it follows that we have $ <var:D> = <nat:4> \cdot <var:V> ^ <nat:8> + <nat:1> \cdot <var:V> ^ <nat:7> + <nat:3> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:V> \} \\ <var:D> := <nat:4> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \} \\ <var:D> := <nat:1> + <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> + <nat:1> \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:2> + <nat:1> \cdot <var:V> + \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> + \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:4> + <nat:1> \cdot <var:V> ^ <nat:3> + \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:5> + <nat:1> \cdot <var:V> ^ <nat:4> + \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:6> + <nat:1> \cdot <var:V> ^ <nat:5> + \} \\ <var:D> := <var:D> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:7> + <nat:1> \cdot <var:V> ^ <nat:6> + \} \\ <var:D> := <nat:3> + <var:D> * <var:c> \\ \{ <var:c> = <var:V> \land <var:D> = <nat:4> \cdot <var:V> ^ <nat:8> + <nat:1> \cdot <var:V> ^ <nat:7> + <nat:3> \} \end{eqnarray} As a result , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <var:D> * <var:c> ; <var:D> := <nat:3> + <var:D> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:c> = <var:V> }} <def:poly> {{ <var:D> = <nat:4> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:D> = <nat:4> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 