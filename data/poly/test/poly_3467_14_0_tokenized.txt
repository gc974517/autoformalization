\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:9> ; <var:i1> := <var:i1> * <var:D> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:D> ; <var:i2> := <var:i2> * <var:D> ; <var:i3> := <nat:6> ; <var:i3> := <var:i3> * <var:D> ; <var:i3> := <var:i3> * <var:D> ; <var:i3> := <var:i3> * <var:D> ; <var:r> := <var:i3> ; <var:r> := <var:r> + <var:i2> ; <var:r> := <var:r> + <var:i1> ; <var:r> := <var:r> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:D> = <var:I> $ before the evaluation of our code it holds that we have $ <var:r> = <nat:6> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is accomplished through typical Hoare logic . Now , we have the variable update code yielding $ <nat:2> $ into $ <var:i0>$ . This advances the condition $ \{ <var:D> = <var:I> \} $ to the postcondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \} $ . This is sound using the assignment rule given by usual Hoare logic . Shifting focus toward the subsequent command found in the program , the assignment line giving $ <nat:9> $ to $ <var:i1>$ . This moves $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \} $ as the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \} $ . Shifting focus toward the next step in our set of instructions , the binding statement \verb | <var:i1> := <var:i1> * <var:D> ; | . This takes the precondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \} $ to the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \} $ . Taking another step toward the upcoming line contained in our series of commands , we have the environment update line binding $ <nat:3> $ into $ <var:i2>$ . This transfers $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \} $ into $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \} $ . This is known to be sound through the assignment scheme obtained from Hoare techniques . Moving forward to the next step , we see the variable update line \verb | <var:i2> := <var:i2> * <var:D> ; | . This statement advances the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \} $ as the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> \} $ . This is deduced through the assignment scheme from typical Hoare logic . After , we have the variable assignmet statement \verb | <var:i2> := <var:i2> * <var:D> ; | . This command advances the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> \} $ as the postcondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \} $ . Moving on to the next step , the variable binding code letting $ <nat:6> $ toward $ <var:i3>$ . This command forwards $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \} $ as $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \} $ . Focusing on the upcoming line of code contained in the series of commands , we have the line defining $ <var:i3> * <var:D> $ toward $ <var:i3>$ . This advances $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \} $ to the postcondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> \} $ . This is known to be sound with the assignment rule of Hoare techniques . Honing in on the proceeding line contained in our list of instructions , we see the assignment code \verb | <var:i3> := <var:i3> * <var:D> ; | . This code takes the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> \} $ as the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> ^ <nat:2> \} $ . This is ensured using the assignment scheme given in typical Hoare reasoning . Next , we see the binding command letting $ <var:i3> * <var:D> $ toward $ <var:i3>$ . This transfers the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> ^ <nat:2> \} $ as the postcondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> ^ <nat:3> \} $ . This is shown by the assignment inference rule from typical Hoare techniques . Moving forward to the upcoming line of code found in the code segment , we have the variable assignmet code binding $ <var:i3> $ to $ <var:r>$ . This line advances the condition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:I> ^ <nat:3> \} $ toward the postcondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> \} $ . Moving onward , the binding statement defining $ <var:r> + <var:i2> $ as $ <var:r>$ . This command takes $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:i2> = <nat:3> \times <var:I> ^ <nat:2> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> \} $ toward $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment law defined in Hoare reasoning . Honing in on the subsequent piece of code contained in the list of commands , the variable assignmet code binding $ <var:r> + <var:i1> $ as $ <var:r>$ . This moves the precondition $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:i1> = <nat:9> \times <var:I> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> \} $ toward $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} $ . Moving forward to the following command found in the code , we have the environment update line letting $ <var:r> + <var:i0$ as $ <var:r>$ . This command forwards $ \{ <var:D> = <var:I> \land <var:i0> = <nat:2> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} $ as the postcondition $ \{ <var:D> = <var:I> \land <var:r> = <nat:6> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:9> ; <var:i1> := <var:i1> * <var:D> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:D> ; <var:i2> := <var:i2> * <var:D> ; <var:i3> := <nat:6> ; <var:i3> := <var:i3> * <var:D> ; <var:i3> := <var:i3> * <var:D> ; <var:i3> := <var:i3> * <var:D> ; <var:r> := <var:i3> ; <var:r> := <var:r> + <var:i2> ; <var:r> := <var:r> + <var:i1> ; <var:r> := <var:r> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:D> = <var:I> }} <def:poly> {{ <var:r> = <nat:6> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:i3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:i3> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:i3> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:i3> = <nat:6> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:i2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:r> = <nat:6> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:9> * <var:I> /\ <var:r> = <nat:6> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:i0> = <nat:2> /\ <var:r> = <nat:6> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:r> = <nat:6> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 