\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:2> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:i> ; <var:O> := <var:M1> ; <var:O> := <var:O> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:i> = <var:v> $ , assuming some whole numbers $ <var:v> $ , ahead of the execution of our series of instructions , it follows that we have $ <var:O> = <nat:4> * <var:v> + <nat:2> $ after series of commands has finished executing . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:i> = <var:v> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:i> = <var:v> \land <var:M0> = <nat:2> \} \\ <var:M1> := <nat:4> ; \\ \{ <var:i> = <var:v> \land <var:M0> = <nat:2> \land <var:M1> = <nat:4> \} \\ <var:M1> := <var:M1> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:M0> = <nat:2> \land <var:M1> = <nat:4> \cdot <var:v> \} \\ <var:O> := <var:M1> ; \\ \{ <var:i> = <var:v> \land <var:M0> = <nat:2> \land <var:O> = <nat:4> \cdot <var:v> \} \\ <var:O> := <var:O> + <var:M0> \\ \{ <var:i> = <var:v> \land <var:O> = <nat:4> \cdot <var:v> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:2> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:i> ; <var:O> := <var:M1> ; <var:O> := <var:O> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:i> = <var:v> }} <def:poly> {{ <var:O> = <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:M0> = <nat:2> /\ <var:O> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:O> = <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 