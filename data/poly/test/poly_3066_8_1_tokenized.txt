\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:a> ; <var:j2> := <var:j1> * <var:a> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:9> ; <var:D> := <var:j2> <var:D> := <var:D> + <var:j1> <var:D> := <var:D> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:a> = <var:S> $ with some whole numbers $ <var:S> $ prior to interpreting this code segment it must be that $ <var:D> = <nat:9> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:6> $ after set of commands has executed . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:a> = <var:S> \} \\ <var:j1> := <var:a> ; \\ \{ <var:a> = <var:S> \land <var:j1> = <var:S> \} \\ <var:j2> := <var:j1> * <var:a> ; \\ \{ <var:a> = <var:S> \land <var:j1> = <var:S> \land <var:j2> = <var:S> ^ <nat:2> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:a> = <var:S> \land <var:j1> = <var:S> \land <var:j2> = <var:S> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:j1> := <var:j1> * <nat:4> ; \\ \{ <var:a> = <var:S> \land <var:j1> = <nat:4> \times <var:S> \land <var:j2> = <var:S> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:j2> := <var:j2> * <nat:9> ; \\ \{ <var:a> = <var:S> \land <var:j1> = <nat:4> \times <var:S> \land <var:j2> = <nat:9> \times <var:S> ^ <nat:2> \land <var:j0> = <nat:6> \} \\ <var:D> := <var:j2> \\ \{ <var:a> = <var:S> \land <var:j1> = <nat:4> \times <var:S> \land <var:j0> = <nat:6> \land <var:D> = <nat:9> \times <var:S> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:j1> \\ \{ <var:a> = <var:S> \land <var:j0> = <nat:6> \land <var:D> = <nat:9> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> \} \\ <var:D> := <var:D> + <var:j0> \\ \{ <var:a> = <var:S> \land <var:D> = <nat:9> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:6> \} \end{eqnarray} Hence , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j1> := <var:a> ; <var:j2> := <var:j1> * <var:a> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:9> ; <var:D> := <var:j2> <var:D> := <var:D> + <var:j1> <var:D> := <var:D> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:a> = <var:S> }} <def:poly> {{ <var:D> = <nat:9> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <var:S> /\ <var:j2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <var:S> /\ <var:j2> = <var:S> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <nat:4> * <var:S> /\ <var:j2> = <var:S> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <nat:4> * <var:S> /\ <var:j2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j1> = <nat:4> * <var:S> /\ <var:j0> = <nat:6> /\ <var:D> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:j0> = <nat:6> /\ <var:D> = <nat:9> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:D> = <nat:9> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 