\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:b> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:b> ; <var:D2> := <var:D2> * <var:b> ; <var:V> := <var:D2> ; <var:V> := <var:V> + <var:D1> ; <var:V> := <var:V> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assume $ <var:b> = <var:m> $ ahead of executing our segment of code , it must be that we see $ <var:V> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> $ when set of instructions has finished . \end{theorem} \begin{proof} The proof of this program is demonstrated using Hoare logic . Shifting focus toward the following line in our series of commands , we have the variable update line giving $ <nat:6> $ as $ <var:D0>$ . This takes $ \{ <var:b> = <var:m> \} $ toward the postcondition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \} $ . Advancing to the next step , we have the assignment line \verb | <var:D1> := <nat:9> ; | . This advances the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \} $ to the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \} $ . Honing in on the upcoming command contained in the code , we see the environment update code \verb | <var:D1> := <var:D1> * <var:b> ; | . This statement redefines the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \} $ toward the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \} $ . Going forward , we see the variable update command \verb | <var:D2> := <nat:6> ; | . This line redefines $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \} $ as the postcondition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \} $ . Further , we have the assignment command \verb | <var:D2> := <var:D2> * <var:b> ; | . This forwards the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \} $ toward $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \cdot <var:m> \} $ . This is shown through the assignment inference rule obtained from Hoare techniques . Focusing on the upcoming command contained in our list of commands , we have the variable binding command yielding $ <var:D2> * <var:b> $ as $ <var:D2>$ . This statement transfers the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \cdot <var:m> \} $ to the postcondition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \cdot <var:m> ^ <nat:2> \} $ . This is rigorously given with the assignment inference rule in typical Hoare logic . Moving on to the next step , we see the environment update command \verb | <var:V> := <var:D2> ; | . This command forwards the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:D2> = <nat:6> \cdot <var:m> ^ <nat:2> \} $ to the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:V> = <nat:6> \cdot <var:m> ^ <nat:2> \} $ . This is deduced through the assignment law in Hoare techniques . Advancing to the next command found in the segment of code , we see the line yielding $ <var:V> + <var:D1> $ into $ <var:V>$ . This transfers $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:D1> = <nat:9> \cdot <var:m> \land <var:V> = <nat:6> \cdot <var:m> ^ <nat:2> \} $ as the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:V> = <nat:6> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> \} $ . Observing the subsequent step found in the series of instructions , the binding code \verb | <var:V> := <var:V> + <var:D0> | . This takes the condition $ \{ <var:b> = <var:m> \land <var:D0> = <nat:6> \land <var:V> = <nat:6> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> \} $ into the postcondition $ \{ <var:b> = <var:m> \land <var:V> = <nat:6> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:6> ; <var:D1> := <nat:9> ; <var:D1> := <var:D1> * <var:b> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:b> ; <var:D2> := <var:D2> * <var:b> ; <var:V> := <var:D2> ; <var:V> := <var:V> + <var:D1> ; <var:V> := <var:V> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:b> = <var:m> }} <def:poly> {{ <var:V> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:m> /\ <var:D2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:m> /\ <var:D2> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:m> /\ <var:D2> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:9> * <var:m> /\ <var:V> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:D0> = <nat:6> /\ <var:V> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:V> = <nat:6> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 