\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:4> ; <var:m> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Assume it to hold that $ <var:M> = <var:Z> $ --- given all integers $ <var:Z> $ --- ahead of the evaluation of this program then we have $ <var:m> = <nat:4> $ once set of instructions has finished . \end{theorem} \begin{proof} See that this decorated code . \begin{eqnarray} \{ <var:M> = <var:Z> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:M> = <var:Z> \land <var:B0> = <nat:4> \} \\ <var:m> := <var:B0> \\ \{ <var:M> = <var:Z> \land <var:m> = <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:m> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:M> = <var:Z> }} <def:poly> {{ <var:m> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:m> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 