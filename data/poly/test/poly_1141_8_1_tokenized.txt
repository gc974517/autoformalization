\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:E1> := <var:l> ; <var:E2> := <var:E1> * <var:l> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:2> ; <var:G> := <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> \end{verbatim} Allowing --- given $ <var:w> $ --- $ <var:l> = <var:w> $ before interpreting the list of commands , then $ <var:G> = <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:3> $ once list of instructions is done . \end{theorem} \begin{proof} The argument for our series of instructions can be shown using typical Hoare logic . Looking at the next piece of code contained in the code segment , the variable binding statement yielding $ <var:l> $ to $ <var:E1>$ . This line takes the precondition $ \{ <var:l> = <var:w> \} $ to the condition $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \} $ . This is known to be sound by the assignment inference rule defined in typical Hoare techniques . Observing the upcoming bit of code contained in our series of commands , we have the environment update statement defining $ <var:E1> * <var:l> $ into $ <var:E2>$ . This statement moves the precondition $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \} $ as the condition $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \land <var:E2> = <var:w> ^ <nat:2> \} $ . Moving on to the next step , we see the environment update line assigning $ <nat:3> $ into $ <var:E0>$ . This statement advances $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \land <var:E2> = <var:w> ^ <nat:2> \} $ into $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \land <var:E2> = <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ . Looking at the subsequent line of code found in our series of commands , we have the binding line \verb | <var:E1> := <var:E1> * <nat:1> ; | . This redefines the condition $ \{ <var:l> = <var:w> \land <var:E1> = <var:w> \land <var:E2> = <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ into $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E2> = <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ . Moving on to the next step , we have the variable update statement \verb | <var:E2> := <var:E2> * <nat:2> ; | . This transfers $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E2> = <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E2> = <nat:2> \times <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ . Moving forward to the next step , we have the binding statement giving $ <var:E2$ to $ <var:G>$ . This code transfers the precondition $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E2> = <nat:2> \times <var:w> ^ <nat:2> \land <var:E0> = <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:w> ^ <nat:2> \} $ . Looking at the subsequent piece of code seen in our set of instructions , we see the variable assignmet code \verb | <var:G> := <var:G> + <var:E1> | . This takes the precondition $ \{ <var:l> = <var:w> \land <var:E1> = <nat:1> \times <var:w> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:w> ^ <nat:2> \} $ into the postcondition $ \{ <var:l> = <var:w> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> \} $ . Taking a look at the proceeding line seen in our series of commands , we see the environment update line assigning $ <var:G> + <var:E0$ to $ <var:G>$ . This command redefines $ \{ <var:l> = <var:w> \land <var:E0> = <nat:3> \land <var:G> = <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> \} $ into the condition $ \{ <var:l> = <var:w> \land <var:G> = <nat:2> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:l> = <var:w> }} <var:E1> := <var:l> ; <var:E2> := <var:E1> * <var:l> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:2> ; <var:G> := <var:E2> <var:G> := <var:G> + <var:E1> <var:G> := <var:G> + <var:E0> {{ <var:G> = <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <var:w> /\ <var:E2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <var:w> /\ <var:E2> = <var:w> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <nat:1> * <var:w> /\ <var:E2> = <var:w> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <nat:1> * <var:w> /\ <var:E2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E1> = <nat:1> * <var:w> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:E0> = <nat:3> /\ <var:G> = <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:w> /\ <var:G> = <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 