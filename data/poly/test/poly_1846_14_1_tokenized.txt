\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:g1> := <var:P> ; <var:g2> := <var:g1> * <var:P> ; <var:g3> := <var:g2> * <var:P> ; <var:g4> := <var:g3> * <var:P> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:5> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:9> ; <var:g4> := <var:g4> * <nat:7> ; <var:O> := <var:g4> <var:O> := <var:O> + <var:g3> <var:O> := <var:O> + <var:g2> <var:O> := <var:O> + <var:g1> <var:O> := <var:O> + <var:g0> \end{verbatim} Allowing , for any $ <var:n> \in \mathbb{Z}^+ $ , that $ <var:P> = <var:n> $ ahead of evaluating the code it must be that $ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:5> $ when series of commands exits . \end{theorem} \begin{proof} The argument for the code segment can be demonstrated through usual Hoare techniques . Observing the next step seen in our code , we have the assignment line \verb | <var:g1> := <var:P> ; | . This redefines the condition $ \{ <var:P> = <var:n> \} $ as the condition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \} $ . This is deduced through the assignment inference rule of Hoare reasoning . Shifting focus toward the proceeding statement seen in our code segment , we see the variable update command \verb | <var:g2> := <var:g1> * <var:P> ; | . This transfers $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \} $ to the postcondition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \} $ . This is deduced through the assignment law defined by standard Hoare reasoning . Moving on , we have the variable assignmet code \verb | <var:g3> := <var:g2> * <var:P> ; | . This takes the condition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \} $ as $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \} $ . This is shown using the assignment rule given in Hoare logic . Observing the upcoming piece of code found in the set of instructions , we have the line assigning $ <var:g3> * <var:P> $ to $ <var:g4>$ . This line moves $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \} $ toward $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \} $ . Moving forward to the upcoming line of code found in our code segment , we have the binding code binding $ <nat:5> $ into $ <var:g0>$ . This line takes the condition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \} $ toward the postcondition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ . Advancing to the next step , we have the variable assignmet statement \verb | <var:g1> := <var:g1> * <nat:5> ; | . This line moves the condition $ \{ <var:P> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ to $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ . This is shown to be logically sound using the assignment rule given by typical Hoare reasoning . Immediately after , the variable update command \verb | <var:g2> := <var:g2> * <nat:4> ; | . This line forwards the precondition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ toward the condition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ . This is sound through the assignment inference rule obtained from usual Hoare techniques . Moving on , we see the variable binding command letting $ <var:g3> * <nat:9> $ into $ <var:g3>$ . This advances $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ into $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ . This is given through the assignment law from usual Hoare reasoning . Following , the variable update statement letting $ <var:g4> * <nat:7> $ into $ <var:g4>$ . This code moves the precondition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g4> = <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ toward the condition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g4> = <nat:7> \times <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ . This is given through the assignment law defined by standard Hoare reasoning . Moving on to the subsequent piece of code seen in our list of instructions , we have the line \verb | <var:O> := <var:g4> | . This transfers the precondition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g4> = <nat:7> \times <var:n> ^ <nat:4> \land <var:g0> = <nat:5> \} $ toward the postcondition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> \} $ . This is rigorously given by the assignment inference rule defined by Hoare reasoning . Going to the next step , we see the variable update statement \verb | <var:O> := <var:O> + <var:g3> | . This code takes the condition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g3> = <nat:9> \times <var:n> ^ <nat:3> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> \} $ toward $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> \} $ . Moving on to the next step , the variable binding command \verb | <var:O> := <var:O> + <var:g2> | . This line takes $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> \} $ into the condition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> \} $ . This is guaranteed with the assignment law of usual Hoare reasoning . Going to the next step , we see the environment update statement defining $ <var:O> + <var:g1$ into $ <var:O>$ . This redefines the condition $ \{ <var:P> = <var:n> \land <var:g1> = <nat:5> \times <var:n> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> \} $ toward the condition $ \{ <var:P> = <var:n> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:5> \times <var:n> \} $ . This is known to be sound using the assignment scheme from standard Hoare logic . Moving forward to the next piece of code seen in the list of commands , the variable assignmet statement yielding $ <var:O> + <var:g0$ into $ <var:O>$ . This transfers the condition $ \{ <var:P> = <var:n> \land <var:g0> = <nat:5> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:5> \times <var:n> \} $ toward $ \{ <var:P> = <var:n> \land <var:O> = <nat:7> \times <var:n> ^ <nat:4> + <nat:9> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:5> \times <var:n> + <nat:5> \} $ . This is given by the assignment scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:P> = <var:n> }} <var:g1> := <var:P> ; <var:g2> := <var:g1> * <var:P> ; <var:g3> := <var:g2> * <var:P> ; <var:g4> := <var:g3> * <var:P> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:5> ; <var:g2> := <var:g2> * <nat:4> ; <var:g3> := <var:g3> * <nat:9> ; <var:g4> := <var:g4> * <nat:7> ; <var:O> := <var:g4> <var:O> := <var:O> + <var:g3> <var:O> := <var:O> + <var:g2> <var:O> := <var:O> + <var:g1> <var:O> := <var:O> + <var:g0> {{ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g4> = <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g4> = <var:n> ^ <nat:4> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g4> = <var:n> ^ <nat:4> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g4> = <var:n> ^ <nat:4> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:n> ^ <nat:3> /\ <var:g4> = <var:n> ^ <nat:4> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:n> ^ <nat:3> /\ <var:g4> = <nat:7> * <var:n> ^ <nat:4> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:n> ^ <nat:3> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:7> * <var:n> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:O> = <nat:7> * <var:n> ^ <nat:4> + <nat:9> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 