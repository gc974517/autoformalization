\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} : \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> \end{verbatim} Allowing that we have $ <var:s> = <var:x> $ , letting $ <var:x> $ , prior to the evaluation of our program , it must be that we have $ <var:i> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:2> $ after series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:i> := <nat:2> ; \\ \{ <var:s> = <var:x> \land <var:i> = <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:i> = <nat:2> * <var:x> + <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:i> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:s> \\ \{ <var:s> = <var:x> \land <var:i> = <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} \end{eqnarray} Furthering executing our program yields : \begin{eqnarray} \end{eqnarray} The application of standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> ; <var:i> := <nat:2> + <var:i> * <var:s> {{ <var:i> = <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:i> = <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:i> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:i> = <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 