\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:P1> := <var:K> ; <var:P2> := <var:P1> * <var:K> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:4> ; <var:m> := <var:P2> <var:m> := <var:m> + <var:P1> <var:m> := <var:m> + <var:P0> \end{verbatim} Given it to hold that $ <var:K> = <var:q> $ for some integers $ <var:q> $ before the execution of this list of instructions , then we see $ <var:m> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> $ once series of instructions finishes . \end{theorem} \begin{proof} The method of proof for this list of commands can be seen through Hoare techniques . Advancing to the upcoming bit of code contained in our program , we see the code \verb | <var:P1> := <var:K> ; | . This line transfers $ \{ <var:K> = <var:q> \} $ into the postcondition $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare techniques . Taking another step toward the subsequent piece of code contained in the list of instructions , we have the variable assignmet command \verb | <var:P2> := <var:P1> * <var:K> ; | . This statement transfers $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \} $ into the condition $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \land <var:P2> = <var:q> ^ <nat:2> \} $ . This is known to be sound using the assignment rule found in typical Hoare logic . Moving on to the next statement contained in the program , we see the environment update statement \verb | <var:P0> := <nat:2> ; | . This code forwards $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \land <var:P2> = <var:q> ^ <nat:2> \} $ to the condition $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \land <var:P2> = <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . Moving forward to the next step , the variable binding command \verb | <var:P1> := <var:P1> * <nat:4> ; | . This advances the precondition $ \{ <var:K> = <var:q> \land <var:P1> = <var:q> \land <var:P2> = <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ into $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P2> = <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . Moving on to the next step , we have the environment update line \verb | <var:P2> := <var:P2> * <nat:4> ; | . This command transfers the condition $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P2> = <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ toward the postcondition $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P2> = <nat:4> * <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ . Taking another step toward the next line found in the code , we see the assignment statement \verb | <var:m> := <var:P2> | . This takes the precondition $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P2> = <nat:4> * <var:q> ^ <nat:2> \land <var:P0> = <nat:2> \} $ toward the condition $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P0> = <nat:2> \land <var:m> = <nat:4> * <var:q> ^ <nat:2> \} $ . Taking a look at the next command contained in the program , the environment update statement assigning $ <var:m> + <var:P1$ as $ <var:m>$ . This forwards the condition $ \{ <var:K> = <var:q> \land <var:P1> = <nat:4> * <var:q> \land <var:P0> = <nat:2> \land <var:m> = <nat:4> * <var:q> ^ <nat:2> \} $ to the condition $ \{ <var:K> = <var:q> \land <var:P0> = <nat:2> \land <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> \} $ . This is known to be sound through the assignment scheme given in typical Hoare reasoning . Taking a look at the upcoming bit of code in the set of commands , we have the environment update command \verb | <var:m> := <var:m> + <var:P0> | . This command moves the condition $ \{ <var:K> = <var:q> \land <var:P0> = <nat:2> \land <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> \} $ toward $ \{ <var:K> = <var:q> \land <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <var:P1> := <var:K> ; <var:P2> := <var:P1> * <var:K> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:4> ; <var:m> := <var:P2> <var:m> := <var:m> + <var:P1> <var:m> := <var:m> + <var:P0> {{ <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <var:q> /\ <var:P2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <var:q> /\ <var:P2> = <var:q> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <nat:4> * <var:q> /\ <var:P2> = <var:q> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <nat:4> * <var:q> /\ <var:P2> = <nat:4> * <var:q> ^ <nat:2> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P1> = <nat:4> * <var:q> /\ <var:P0> = <nat:2> /\ <var:m> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:P0> = <nat:2> /\ <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:m> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 