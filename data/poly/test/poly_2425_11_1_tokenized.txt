\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z1> := <var:T> ; <var:z2> := <var:z1> * <var:T> ; <var:z3> := <var:z2> * <var:T> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:7> ; <var:q> := <var:z3> <var:q> := <var:q> + <var:z2> <var:q> := <var:q> + <var:z1> <var:q> := <var:q> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assume , taking integers $ <var:k> $ , that $ <var:T> = <var:k> $ ahead of evaluating our series of instructions , it holds that we see $ <var:q> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:z1> := <var:T> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <var:k> \} \\ <var:z2> := <var:z1> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z1> := <var:z1> * <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <nat:9> \times <var:k> \land <var:z2> = <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z2> := <var:z2> * <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <nat:9> \times <var:k> \land <var:z2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:z3> = <var:k> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z3> := <var:z3> * <nat:7> ; \\ \{ <var:T> = <var:k> \land <var:z1> = <nat:9> \times <var:k> \land <var:z2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:z3> = <nat:7> \times <var:k> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:q> := <var:z3> \\ \{ <var:T> = <var:k> \land <var:z1> = <nat:9> \times <var:k> \land <var:z2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:z0> = <nat:9> \land <var:q> = <nat:7> \times <var:k> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:z2> \\ \{ <var:T> = <var:k> \land <var:z1> = <nat:9> \times <var:k> \land <var:z0> = <nat:9> \land <var:q> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:z1> \\ \{ <var:T> = <var:k> \land <var:z0> = <nat:9> \land <var:q> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> \} \\ <var:q> := <var:q> + <var:z0> \\ \{ <var:T> = <var:k> \land <var:q> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:9> \times <var:k> + <nat:9> \} \end{eqnarray} Thusly , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z1> := <var:T> ; <var:z2> := <var:z1> * <var:T> ; <var:z3> := <var:z2> * <var:T> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:z3> := <var:z3> * <nat:7> ; <var:q> := <var:z3> <var:q> := <var:q> + <var:z2> <var:q> := <var:q> + <var:z1> <var:q> := <var:q> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <def:poly> {{ <var:q> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <var:k> /\ <var:z2> = <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <nat:9> * <var:k> /\ <var:z2> = <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <nat:9> * <var:k> /\ <var:z2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:z3> = <var:k> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <nat:9> * <var:k> /\ <var:z2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:z3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <nat:9> * <var:k> /\ <var:z2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:z0> = <nat:9> /\ <var:q> = <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z1> = <nat:9> * <var:k> /\ <var:z0> = <nat:9> /\ <var:q> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:z0> = <nat:9> /\ <var:q> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:q> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 