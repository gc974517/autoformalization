\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:f> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:l> := <var:c1> <var:l> := <var:l> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Given that $ <var:f> = <var:W> $ prior to evaluating our program then $ <var:l> = <nat:4> \cdot <var:W> + <nat:3> $ when list of commands finishes . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:f> = <var:W> \} \\ <var:c1> := <var:f> ; \\ \{ <var:f> = <var:W> \land <var:c1> = <var:W> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:f> = <var:W> \land <var:c1> = <var:W> \land <var:c0> = <nat:3> \} \\ <var:c1> := <var:c1> * <nat:4> ; \\ \{ <var:f> = <var:W> \land <var:c1> = <nat:4> \cdot <var:W> \land <var:c0> = <nat:3> \} \\ <var:l> := <var:c1> \\ \{ <var:f> = <var:W> \land <var:c0> = <nat:3> \land <var:l> = <nat:4> \cdot <var:W> \} \\ <var:l> := <var:l> + <var:c0> \\ \{ <var:f> = <var:W> \land <var:l> = <nat:4> \cdot <var:W> + <nat:3> \} \end{eqnarray} Thus , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:f> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:4> ; <var:l> := <var:c1> <var:l> := <var:l> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:f> = <var:W> }} <def:poly> {{ <var:l> = <nat:4> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:c1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:c1> = <var:W> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:c1> = <nat:4> * <var:W> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:c0> = <nat:3> /\ <var:l> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:l> = <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 