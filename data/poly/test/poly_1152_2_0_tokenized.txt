\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:z0> := <nat:4> ; <var:Q> := <var:z0> \end{verbatim} Assume $ <var:W> = <var:j> $ --- given any $ <var:j> \in \mathbb{Z}^+ $ --- before interpreting the set of instructions , then we see $ <var:Q> = <nat:4> $ once code has finished . \end{theorem} \begin{proof} Proving correctness for our list of commands is shown by the following decorated code . \begin{eqnarray} \{ <var:W> = <var:j> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:W> = <var:j> \land <var:z0> = <nat:4> \} \\ <var:Q> := <var:z0> \\ \{ <var:W> = <var:j> \land <var:Q> = <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:W> = <var:j> }} <var:z0> := <nat:4> ; <var:Q> := <var:z0> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:j> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 