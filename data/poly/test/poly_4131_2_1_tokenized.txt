\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:V0> := <nat:2> ; <var:K> := <var:V0> \end{verbatim} Allow given integers $ <var:a> $ $ <var:b> = <var:a> $ before the execution of the program it follows that $ <var:K> = <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:a> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:b> = <var:a> \land <var:V0> = <nat:2> \} \\ <var:K> := <var:V0> \\ \{ <var:b> = <var:a> \land <var:K> = <nat:2> \} \end{eqnarray} As a result , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:b> = <var:a> }} <var:V0> := <nat:2> ; <var:K> := <var:V0> {{ <var:K> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:K> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 