\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:3> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:4> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:4> + <var:D> * <var:S> \end{verbatim} Allow taking positive integer coefficients $ <var:n> $ it to be that $ <var:S> = <var:n> $ before the evaluation of our program , it must be that we see $ <var:D> = <nat:2> \cdot <var:n> ^ <nat:8> + <nat:1> \cdot <var:n> ^ <nat:7> + <nat:2> \cdot <var:n> ^ <nat:6> + <nat:2> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:4> $ after list of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is accomplished by Hoare reasoning . Moving on , we see \verb | { <var:S> = <var:n> } <var:D> := <nat:2> { <var:S> = <var:n> \land <var:D> = <nat:2> } | , \verb | { <var:S> = <var:n> \land <var:D> = <nat:2> } <var:D> := <nat:1> + <var:D> * <var:S> { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> + <nat:1> } | , \verb | { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> + <nat:1> } <var:D> := <nat:2> + <var:D> * <var:S> { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:2> } | , \verb | { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:2> } <var:D> := <nat:2> + <var:D> * <var:S> { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:2> } | , \verb | { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:2> } <var:D> := <nat:3> + <var:D> * <var:S> { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:3> } | and \verb | { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:3> } <var:D> := <nat:2> + <var:D> * <var:S> { <var:S> = <var:n> \land <var:D> = <nat:2> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:2> } | . Advancing to the next step , \verb | { <var:S> = <var:n> } <var:D> := <nat:2> { <var:S> = <var:n> \land <var:D> = <nat:2> } | . After , we see \verb | { <var:S> = <var:n> } <var:D> := <nat:2> { <var:S> = <var:n> \land <var:D> = <nat:2> } | . Going to the next step , we see \verb | { <var:S> = <var:n> } <var:D> := <nat:2> { <var:S> = <var:n> \land <var:D> = <nat:2> } | . This is guaranteed through the environment update rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:S> = <var:n> }} <var:D> := <nat:2> ; <var:D> := <nat:1> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:3> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:4> + <var:D> * <var:S> ; <var:D> := <nat:2> + <var:D> * <var:S> ; <var:D> := <nat:4> + <var:D> * <var:S> {{ <var:D> = <nat:2> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:D> = <nat:2> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 