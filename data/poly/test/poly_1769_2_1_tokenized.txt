\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:7> ; <var:f> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:J> = <var:n> $ before interpreting the program it follows that we see $ <var:f> = <nat:7> $ when list of instructions terminates . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:J> = <var:n> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:J> = <var:n> \land <var:A0> = <nat:7> \} \\ <var:f> := <var:A0> \\ \{ <var:J> = <var:n> \land <var:f> = <nat:7> \} \end{eqnarray} Considering the preceding argument , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:7> ; <var:f> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:J> = <var:n> }} <def:poly> {{ <var:f> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:f> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 