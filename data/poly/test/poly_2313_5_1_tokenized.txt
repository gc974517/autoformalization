\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:V1> := <var:o> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:E> := <var:V1> <var:E> := <var:E> + <var:V0> \end{verbatim} Assume that we have $ <var:o> = <var:x> $ prior to running our set of instructions , it must be that $ <var:E> = <nat:1> * <var:x> + <nat:2> $ once code segment has finished . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be shown by typical Hoare techniques . Next , we have the environment update statement \verb | <var:V1> := <var:o> ; | . This statement transfers $ \{ <var:o> = <var:x> \} $ toward $ \{ <var:o> = <var:x> \land <var:V1> = <var:x> \} $ . Going forward , we have the variable assignmet line defining $ <nat:2> $ into $ <var:V0>$ . This transfers the condition $ \{ <var:o> = <var:x> \land <var:V1> = <var:x> \} $ as the postcondition $ \{ <var:o> = <var:x> \land <var:V1> = <var:x> \land <var:V0> = <nat:2> \} $ . This is given by the assignment inference rule given by standard Hoare reasoning . Jumping to the proceeding step contained in the list of commands , the environment update command letting $ <var:V1> * <nat:1> $ into $ <var:V1>$ . This line takes the precondition $ \{ <var:o> = <var:x> \land <var:V1> = <var:x> \land <var:V0> = <nat:2> \} $ into the condition $ \{ <var:o> = <var:x> \land <var:V1> = <nat:1> * <var:x> \land <var:V0> = <nat:2> \} $ . Considering the proceeding line in the set of instructions , we have the variable update line \verb | <var:E> := <var:V1> | . This statement moves $ \{ <var:o> = <var:x> \land <var:V1> = <nat:1> * <var:x> \land <var:V0> = <nat:2> \} $ into the condition $ \{ <var:o> = <var:x> \land <var:V0> = <nat:2> \land <var:E> = <nat:1> * <var:x> \} $ . This is ensured by the assignment inference rule obtained from typical Hoare reasoning . Moving forward to the subsequent line contained in our program , we see the assignment command binding $ <var:E> + <var:V0$ toward $ <var:E>$ . This line forwards $ \{ <var:o> = <var:x> \land <var:V0> = <nat:2> \land <var:E> = <nat:1> * <var:x> \} $ as the condition $ \{ <var:o> = <var:x> \land <var:E> = <nat:1> * <var:x> + <nat:2> \} $ . This is given with the assignment law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:o> = <var:x> }} <var:V1> := <var:o> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:E> := <var:V1> <var:E> := <var:E> + <var:V0> {{ <var:E> = <nat:1> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:V1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:V1> = <var:x> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:V1> = <nat:1> * <var:x> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:V0> = <nat:2> /\ <var:E> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:E> = <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 