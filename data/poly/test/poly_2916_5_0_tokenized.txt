\begin{document} \begin{theorem} We define the following segment of code : \begin{verbatim} <var:O0> := <nat:9> ; <var:O1> := <nat:5> ; <var:O1> := <var:O1> * <var:L> ; <var:h> := <var:O1> ; <var:h> := <var:h> + <var:O0> \end{verbatim} Allow that we have $ <var:L> = <var:u> $ prior to the execution of the series of instructions then we see $ <var:h> = <nat:5> \cdot <var:u> + <nat:9> $ when code segment is done executing . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be done by usual Hoare logic . Honing in on the proceeding step contained in the program , the environment update command assigning $ <nat:9> $ to $ <var:O0>$ . This statement advances $ \{ <var:L> = <var:u> \} $ into $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \} $ . This is deduced by the assignment rule given in Hoare reasoning . Going forward , we have the variable binding command \verb | <var:O1> := <nat:5> ; | . This code forwards the precondition $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \} $ as the condition $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:O1> = <nat:5> \} $ . This is given through the assignment law defined in standard Hoare reasoning . Observing the proceeding bit of code in the segment of code , we see the assignment command binding $ <var:O1> * <var:L> $ toward $ <var:O1>$ . This statement advances $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:O1> = <nat:5> \} $ toward the condition $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:O1> = <nat:5> * <var:u> \} $ . Jumping to the next step found in our list of commands , we see the variable assignmet command \verb | <var:h> := <var:O1> ; | . This command redefines the precondition $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:O1> = <nat:5> * <var:u> \} $ as the condition $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:h> = <nat:5> * <var:u> \} $ . This is given with the assignment inference rule obtained from typical Hoare logic . Keeping momentum , the environment update code assigning $ <var:h> + <var:O0$ into $ <var:h>$ . This line takes $ \{ <var:L> = <var:u> \land <var:O0> = <nat:9> \land <var:h> = <nat:5> * <var:u> \} $ into the condition $ \{ <var:L> = <var:u> \land <var:h> = <nat:5> * <var:u> + <nat:9> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:L> = <var:u> }} <var:O0> := <nat:9> ; <var:O1> := <nat:5> ; <var:O1> := <var:O1> * <var:L> ; <var:h> := <var:O1> ; <var:h> := <var:h> + <var:O0> {{ <var:h> = <nat:5> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:O0> = <nat:9> /\ <var:O1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:O0> = <nat:9> /\ <var:h> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:h> = <nat:5> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 