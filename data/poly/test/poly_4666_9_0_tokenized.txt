\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:Z0> := <nat:6> ; <var:Z1> := <nat:7> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:P> := <var:Z2> ; <var:P> := <var:P> + <var:Z1> ; <var:P> := <var:P> + <var:Z0> \end{verbatim} Allowing letting $ <var:O> $ that we have $ <var:U> = <var:O> $ ahead of the evaluation of the set of instructions , it holds that $ <var:P> = <nat:9> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:6> $ once program has terminated . \end{theorem} \begin{proof} The method of proof for the code is given using Hoare techniques . Following , the variable assignmet line giving $ <nat:6> $ into $ <var:Z0>$ . This command forwards the condition $ \{ <var:U> = <var:O> \} $ as $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare logic . Moving on to the upcoming line of code contained in the list of commands , we see the variable assignmet statement giving $ <nat:7> $ as $ <var:Z1>$ . This redefines the condition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \} $ toward $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \} $ . Advancing to the next step , the variable update line \verb | <var:Z1> := <var:Z1> * <var:U> ; | . This transfers the condition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \} $ as the postcondition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \} $ . Paying attention to the following statement seen in our segment of code , we have the command \verb | <var:Z2> := <nat:9> ; | . This statement redefines $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \} $ as the postcondition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \} $ . After , we have the binding line yielding $ <var:Z2> * <var:U> $ to $ <var:Z2>$ . This command transfers the condition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \} $ as $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> \} $ . This is guaranteed through the assignment rule defined in usual Hoare logic . Shifting focus toward the upcoming statement seen in our program , we see the binding statement \verb | <var:Z2> := <var:Z2> * <var:U> ; | . This command moves the condition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> \} $ to $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> ^ <nat:2> \} $ . Considering the next statement seen in our series of instructions , the assignment code yielding $ <var:Z2> $ to $ <var:P>$ . This code moves the precondition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:P> = <nat:9> \times <var:O> ^ <nat:2> \} $ . Considering the subsequent bit of code contained in our series of instructions , we see the assignment statement \verb | <var:P> := <var:P> + <var:Z1> ; | . This forwards $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:7> \times <var:O> \land <var:P> = <nat:9> \times <var:O> ^ <nat:2> \} $ as $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:P> = <nat:9> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} $ . This is shown by the assignment inference rule given by standard Hoare techniques . Shifting focus toward the subsequent statement seen in the code segment , we have the assignment statement binding $ <var:P> + <var:Z0$ into $ <var:P>$ . This advances the condition $ \{ <var:U> = <var:O> \land <var:Z0> = <nat:6> \land <var:P> = <nat:9> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} $ as the condition $ \{ <var:U> = <var:O> \land <var:P> = <nat:9> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:6> \} $ . This is sound through the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:U> = <var:O> }} <var:Z0> := <nat:6> ; <var:Z1> := <nat:7> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:9> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:P> := <var:Z2> ; <var:P> := <var:P> + <var:Z1> ; <var:P> := <var:P> + <var:Z0> {{ <var:P> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> * <var:O> /\ <var:Z2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> * <var:O> /\ <var:Z2> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> * <var:O> /\ <var:Z2> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:7> * <var:O> /\ <var:P> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Z0> = <nat:6> /\ <var:P> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:P> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 