\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:4> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:2> + <var:T> * <var:N> ; <var:T> := <var:T> * <var:N> ; <var:T> := <nat:2> + <var:T> * <var:N> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assume that $ <var:N> = <var:u> $ ( for some natural numbers $ <var:u> $ ) prior to interpreting the list of commands it must be that $ <var:T> = <nat:4> \cdot <var:u> ^ <nat:8> + <nat:1> \cdot <var:u> ^ <nat:7> + <nat:2> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare logic gives : \begin{eqnarray} \{ <var:N> = <var:u> \} \\ <var:T> := <nat:4> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> \} \\ <var:T> := <nat:1> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> + <nat:1> \} \\ <var:T> := <nat:2> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> \} \\ <var:T> := <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + \} \\ <var:T> := <nat:2> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> \} \\ <var:T> := <nat:1> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:1> \} \\ <var:T> := <nat:4> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> \} \\ <var:T> := <nat:1> + <var:T> * <var:N> ; \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> \} \\ <var:T> := <nat:4> + <var:T> * <var:N> \\ \{ <var:N> = <var:u> \land <var:T> = <nat:4> * <var:u> ^ <nat:8> + <nat:1> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> \} \end{eqnarray} Thusly , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:4> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:2> + <var:T> * <var:N> ; <var:T> := <var:T> * <var:N> ; <var:T> := <nat:2> + <var:T> * <var:N> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> ; <var:T> := <nat:1> + <var:T> * <var:N> ; <var:T> := <nat:4> + <var:T> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:N> = <var:u> }} <def:poly> {{ <var:T> = <nat:4> * <var:u> ^ <nat:8> + <nat:1> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:u> /\ <var:T> = <nat:4> * <var:u> ^ <nat:8> + <nat:1> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 