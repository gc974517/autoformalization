\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:E> ; <var:S2> := <var:S1> * <var:E> ; <var:S3> := <var:S2> * <var:E> ; <var:S4> := <var:S3> * <var:E> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:9> ; <var:S4> := <var:S4> * <nat:6> ; <var:Z> := <var:S4> <var:Z> := <var:Z> + <var:S2> <var:Z> := <var:Z> + <var:S1> <var:Z> := <var:Z> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allowing $ <var:E> = <var:L> $ --- for whole numbers $ <var:L> $ --- ahead of executing this set of commands it holds that $ <var:Z> = <nat:6> * <var:L> ^ <nat:4> + <nat:9> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> $ when series of commands executes . \end{theorem} \begin{proof} The argument for this list of instructions can be shown using Hoare logic . Looking at the subsequent lines in the set of instructions , we see \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:S1> := <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \} \, <var:S2> := <var:S1> * <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \} \, <var:S3> := <var:S2> * <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \} \, <var:S4> := <var:S3> * <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \} \, <var:S0> := <nat:2> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \, <var:S1> := <var:S1> * <nat:2> \, \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \, <var:S2> := <var:S2> * <nat:9> \, \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <nat:9> \times <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <nat:9> \times <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \, <var:S4> := <var:S4> * <nat:6> \, \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <nat:9> \times <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <nat:6> \times <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <nat:9> \times <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S4> = <nat:6> \times <var:L> ^ <nat:4> \land <var:S0> = <nat:2> \} \, <var:Z> := <var:S4\, \{ <var:E> = <var:L> \land <var:S1> = <nat:2> \times <var:L> \land <var:S2> = <nat:9> \times <var:L> ^ <nat:2> \land <var:S3> = <var:L> ^ <nat:3> \land <var:S0> = <nat:2> \land <var:Z> = <nat:6> \times <var:L> ^ <nat:4> \} \end{eqnarray} This is sound by the inference rule obtained from usual Hoare techniques . Following , we have \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:S1> := <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \} \end{eqnarray} Advancing , we see \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:S1> := <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \} \\ \{ <var:E> = <var:L> \land <var:S1> = <var:L> \} \, <var:S2> := <var:S1> * <var:E> \, \{ <var:E> = <var:L> \land <var:S1> = <var:L> \land <var:S2> = <var:L> ^ <nat:2> \} \end{eqnarray} This is known to be sound through the environment update scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:E> ; <var:S2> := <var:S1> * <var:E> ; <var:S3> := <var:S2> * <var:E> ; <var:S4> := <var:S3> * <var:E> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:9> ; <var:S4> := <var:S4> * <nat:6> ; <var:Z> := <var:S4> <var:Z> := <var:Z> + <var:S2> <var:Z> := <var:Z> + <var:S1> <var:Z> := <var:Z> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:E> = <var:L> }} <def:poly> {{ <var:Z> = <nat:6> * <var:L> ^ <nat:4> + <nat:9> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S4> = <var:L> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S4> = <var:L> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S4> = <var:L> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S4> = <nat:6> * <var:L> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:S3> = <var:L> ^ <nat:3> /\ <var:S0> = <nat:2> /\ <var:Z> = <nat:6> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S1> = <nat:2> * <var:L> /\ <var:S0> = <nat:2> /\ <var:Z> = <nat:6> * <var:L> ^ <nat:4> + <nat:9> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:S0> = <nat:2> /\ <var:Z> = <nat:6> * <var:L> ^ <nat:4> + <nat:9> * <var:L> ^ <nat:2> + <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:Z> = <nat:6> * <var:L> ^ <nat:4> + <nat:9> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 