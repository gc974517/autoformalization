\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:d> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:9> ; <var:I> := <var:J1> <var:I> := <var:I> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow given positive integer coefficients $ <var:Y> $ that $ <var:d> = <var:Y> $ ahead of interpreting this series of commands then we see $ <var:I> = <nat:9> * <var:Y> + <nat:5> $ when list of instructions has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:d> = <var:Y> \} \\ <var:J1> := <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:J1> = <var:Y> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:d> = <var:Y> \land <var:J1> = <var:Y> \land <var:J0> = <nat:5> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:d> = <var:Y> \land <var:J1> = <nat:9> \cdot <var:Y> \land <var:J0> = <nat:5> \} \\ <var:I> := <var:J1> \\ \{ <var:d> = <var:Y> \land <var:J0> = <nat:5> \land <var:I> = <nat:9> \cdot <var:Y> \} \\ <var:I> := <var:I> + <var:J0> \\ \{ <var:d> = <var:Y> \land <var:I> = <nat:9> \cdot <var:Y> + <nat:5> \} \end{eqnarray} Advancing interpreting the code segment produces : \begin{eqnarray} \end{eqnarray} Hence , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:d> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:9> ; <var:I> := <var:J1> <var:I> := <var:I> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:d> = <var:Y> }} <def:poly> {{ <var:I> = <nat:9> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:J1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:J1> = <nat:9> * <var:Y> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:J0> = <nat:5> /\ <var:I> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:I> = <nat:9> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 