\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:3> ; <var:l> := <nat:2> + <var:l> * <var:U> ; <var:l> := <nat:3> + <var:l> * <var:U> ; <var:l> := <var:l> * <var:U> ; <var:l> := <nat:4> + <var:l> * <var:U> ; <var:l> := <nat:4> + <var:l> * <var:U> ; <var:l> := <nat:3> + <var:l> * <var:U> ; <var:l> := <var:l> * <var:U> ; <var:l> := <nat:2> + <var:l> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allow it to hold that $ <var:U> = <var:G> $ before the execution of our program , it must be that we see $ <var:l> = <nat:3> \cdot <var:G> ^ <nat:8> + <nat:2> \cdot <var:G> ^ <nat:7> + <nat:3> \cdot <var:G> ^ <nat:6> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:2> $ when series of commands terminates . \end{theorem} \begin{proof} The flow of logic for the program can be seen with standard Hoare logic . Taking a look at the proceeding step in the segment of code , we have \verb | { <var:U> = <var:G> } <var:l> := <nat:3> { <var:U> = <var:G> \land <var:l> = <nat:3> } | . This is shown with the variable update scheme from Hoare reasoning . Paying attention to the proceeding steps found in our code , we have \verb | { <var:U> = <var:G> } <var:l> := <nat:3> { <var:U> = <var:G> \land <var:l> = <nat:3> } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> } <var:l> := <nat:2> + <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> + <nat:2> } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> + <nat:2> } <var:l> := <nat:3> + <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> } <var:l> := <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + } <var:l> := <nat:4> + <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> } <var:l> := <nat:4> + <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:4> } | , \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:4> } <var:l> := <nat:3> + <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> } | and \verb | { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> } <var:l> := <var:l> * <var:U> { <var:U> = <var:G> \land <var:l> = <nat:3> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:3> ; <var:l> := <nat:2> + <var:l> * <var:U> ; <var:l> := <nat:3> + <var:l> * <var:U> ; <var:l> := <var:l> * <var:U> ; <var:l> := <nat:4> + <var:l> * <var:U> ; <var:l> := <nat:4> + <var:l> * <var:U> ; <var:l> := <nat:3> + <var:l> * <var:U> ; <var:l> := <var:l> * <var:U> ; <var:l> := <nat:2> + <var:l> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:U> = <var:G> }} <def:poly> {{ <var:l> = <nat:3> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:6> + <nat:2> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:7> + <nat:2> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l> = <nat:3> * <var:G> ^ <nat:8> + <nat:2> * <var:G> ^ <nat:7> + <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 