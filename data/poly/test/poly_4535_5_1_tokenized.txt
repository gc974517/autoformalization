\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:p1> := <var:f> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:u> := <var:p1> <var:u> := <var:u> + <var:p0> \end{verbatim} Allow $ <var:f> = <var:M> $ ( given positive coefficients $ <var:M> $ ) ahead of executing the list of instructions then $ <var:u> = <nat:5> \times <var:M> + <nat:5> $ after list of commands has executed . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:M> \} \\ <var:p1> := <var:f> ; \\ \{ <var:f> = <var:M> \land <var:p1> = <var:M> \} \\ <var:p0> := <nat:5> ; \\ \{ <var:f> = <var:M> \land <var:p1> = <var:M> \land <var:p0> = <nat:5> \} \\ <var:p1> := <var:p1> * <nat:5> ; \\ \{ <var:f> = <var:M> \land <var:p1> = <nat:5> \cdot <var:M> \land <var:p0> = <nat:5> \} \\ <var:u> := <var:p1> \\ \{ <var:f> = <var:M> \land <var:p0> = <nat:5> \land <var:u> = <nat:5> \cdot <var:M> \} \\ <var:u> := <var:u> + <var:p0> \\ \{ <var:f> = <var:M> \land <var:u> = <nat:5> \cdot <var:M> + <nat:5> \} \end{eqnarray} As a consequence , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <var:p1> := <var:f> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:u> := <var:p1> <var:u> := <var:u> + <var:p0> {{ <var:u> = <nat:5> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:p1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:p1> = <var:M> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:p1> = <nat:5> * <var:M> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:p0> = <nat:5> /\ <var:u> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:u> = <nat:5> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 