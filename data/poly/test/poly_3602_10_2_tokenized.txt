\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J> := <nat:2> ; <var:J> := <var:J> * <var:M> ; <var:J> := <nat:2> + <var:J> * <var:M> ; <var:J> := <var:J> * <var:M> ; <var:J> := <nat:3> + <var:J> * <var:M> ; <var:J> := <nat:2> + <var:J> * <var:M> ; <var:J> := <nat:3> + <var:J> * <var:M> ; <var:J> := <nat:1> + <var:J> * <var:M> ; <var:J> := <nat:1> + <var:J> * <var:M> ; <var:J> := <nat:4> + <var:J> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:M> = <var:x> $ for positive integer coefficients $ <var:x> $ prior to interpreting this series of commands it holds that we see $ <var:J> = <nat:2> \cdot <var:x> ^ <nat:9> + <nat:2> \cdot <var:x> ^ <nat:7> + <nat:3> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:M> = <var:x> \} \\ <var:J> := <nat:2> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> \} \\ <var:J> := <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> + \} \\ <var:J> := <nat:2> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> \} \\ <var:J> := <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + \} \\ <var:J> := <nat:3> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> \} \\ <var:J> := <nat:2> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:2> \} \\ <var:J> := <nat:3> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> \} \\ <var:J> := <nat:1> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:1> \} \\ <var:J> := <nat:1> + <var:J> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> \} \\ <var:J> := <nat:4> + <var:J> * <var:M> \\ \{ <var:M> = <var:x> \land <var:J> = <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> \} \end{eqnarray} Therefore , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:2> ; <var:J> := <var:J> * <var:M> ; <var:J> := <nat:2> + <var:J> * <var:M> ; <var:J> := <var:J> * <var:M> ; <var:J> := <nat:3> + <var:J> * <var:M> ; <var:J> := <nat:2> + <var:J> * <var:M> ; <var:J> := <nat:3> + <var:J> * <var:M> ; <var:J> := <nat:1> + <var:J> * <var:M> ; <var:J> := <nat:1> + <var:J> * <var:M> ; <var:J> := <nat:4> + <var:J> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:M> = <var:x> }} <def:poly> {{ <var:J> = <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:J> = <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 