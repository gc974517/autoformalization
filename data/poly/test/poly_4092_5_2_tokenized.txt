\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <var:s> * <var:S> ; <var:s> := <nat:2> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> \end{verbatim} Given that $ <var:S> = <var:J> $ , for all positive numbers $ <var:J> $ , ahead of the evaluation of our segment of code it holds that we have $ <var:s> = <nat:3> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is shown using usual Hoare logic . Moving forward , we have \begin{verbatim} { <var:S> = <var:J> } <var:s> := <nat:3> { <var:S> = <var:J> \land <var:s> = <nat:3> } { <var:S> = <var:J> \land <var:s> = <nat:3> } <var:s> := <var:s> * <var:S> { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> + } { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> + } <var:s> := <nat:2> + <var:s> * <var:S> { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> ^ <nat:2> + <nat:2> } { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> ^ <nat:2> + <nat:2> } <var:s> := <nat:4> + <var:s> * <var:S> { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:4> } { <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:4> } <var:s> := <nat:4> + <var:s> * <var:S{ <var:S> = <var:J> \land <var:s> = <nat:3> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:S> = <var:J> }} <var:s> := <nat:3> ; <var:s> := <var:s> * <var:S> ; <var:s> := <nat:2> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> ; <var:s> := <nat:4> + <var:s> * <var:S> {{ <var:s> = <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:s> = <nat:3> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:s> = <nat:3> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:s> = <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:s> = <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 