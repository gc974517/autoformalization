\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:g> ; <var:j2> := <var:j1> * <var:g> ; <var:j3> := <var:j2> * <var:g> ; <var:j4> := <var:j3> * <var:g> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:2> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:2> ; <var:b> := <var:j4> <var:b> := <var:b> + <var:j3> <var:b> := <var:b> + <var:j2> <var:b> := <var:b> + <var:j1> <var:b> := <var:b> + <var:j0> \end{verbatim} Assume $ <var:g> = <var:h> $ ahead of evaluating this list of instructions , it must be that $ <var:b> = <nat:2> \cdot <var:h> ^ <nat:4> + <nat:6> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} The course of logic for the code segment can be given through typical Hoare reasoning . Jumping to the upcoming line of code in the series of instructions , the assignment statement giving $ <var:g> $ as $ <var:j1>$ . This statement moves the precondition $ \{ <var:g> = <var:h> \} $ as $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \} $ . Paying attention to the following bit of code contained in our list of instructions , we have the variable binding code \verb | <var:j2> := <var:j1> * <var:g> ; | . This code moves the condition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \} $ . This is shown with the assignment law given by standard Hoare logic . Shifting focus toward the upcoming step contained in the set of instructions , we have the assignment command \verb | <var:j3> := <var:j2> * <var:g> ; | . This line moves the condition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment scheme defined in standard Hoare techniques . Stepping forward , we have the statement \verb | <var:j4> := <var:j3> * <var:g> ; | . This statement forwards the condition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \} $ . Advancing , the assignment statement binding $ <nat:1> $ toward $ <var:j0>$ . This code forwards the precondition $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \} $ toward $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Moving onward , we see the variable update command assigning $ <var:j1> * <nat:4> $ toward $ <var:j1>$ . This statement takes $ \{ <var:g> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ to $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . This is sound using the assignment rule in Hoare logic . Moving on to the next step , the variable binding line yielding $ <var:j2> * <nat:2> $ into $ <var:j2>$ . This forwards the condition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ into the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . This is shown to be logically sound by the assignment law given by typical Hoare techniques . Now , we have the line letting $ <var:j3> * <nat:6> $ as $ <var:j3>$ . This moves $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Moving on to the following command found in our series of instructions , we have the assignment code giving $ <var:j4> * <nat:2> $ as $ <var:j4>$ . This code takes the condition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j4> = <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ toward the condition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j4> = <nat:2> \times <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ . Moving onward , we see the binding command yielding $ <var:j4$ toward $ <var:b>$ . This statement moves $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j4> = <nat:2> \times <var:h> ^ <nat:4> \land <var:j0> = <nat:1> \} $ to the condition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> \} $ . This is guaranteed with the assignment scheme in standard Hoare reasoning . Moving on to the following statement found in the program , we have the binding line \verb | <var:b> := <var:b> + <var:j3> | . This statement moves the precondition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> \} $ to the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> \} $ . This is guaranteed using the assignment inference rule of standard Hoare techniques . Looking at the subsequent command contained in our series of commands , the assignment line letting $ <var:b> + <var:j2$ into $ <var:b>$ . This takes the condition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j2> = <nat:2> \times <var:h> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> \} $ . This is known to be sound by the assignment law found in typical Hoare reasoning . Jumping to the next line of code found in our series of commands , the variable update code letting $ <var:b> + <var:j1$ as $ <var:b>$ . This code moves $ \{ <var:g> = <var:h> \land <var:j1> = <nat:4> \times <var:h> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:h> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> \} $ . This is given through the assignment inference rule of usual Hoare reasoning . Considering the proceeding line contained in the list of instructions , we see the line \verb | <var:b> := <var:b> + <var:j0> | . This statement moves $ \{ <var:g> = <var:h> \land <var:j0> = <nat:1> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> \} $ as the postcondition $ \{ <var:g> = <var:h> \land <var:b> = <nat:2> \times <var:h> ^ <nat:4> + <nat:6> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <var:j4> : string := " <var:j4> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <var:j1> := <var:g> ; <var:j2> := <var:j1> * <var:g> ; <var:j3> := <var:j2> * <var:g> ; <var:j4> := <var:j3> * <var:g> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:2> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:2> ; <var:b> := <var:j4> <var:b> := <var:b> + <var:j3> <var:b> := <var:b> + <var:j2> <var:b> := <var:b> + <var:j1> <var:b> := <var:b> + <var:j0> {{ <var:b> = <nat:2> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j4> = <var:h> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j4> = <var:h> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j4> = <var:h> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:j4> = <var:h> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:j4> = <nat:2> * <var:h> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:j0> = <nat:1> /\ <var:b> = <nat:2> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:b> = <nat:2> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j1> = <nat:4> * <var:h> /\ <var:j0> = <nat:1> /\ <var:b> = <nat:2> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:j0> = <nat:1> /\ <var:b> = <nat:2> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:b> = <nat:2> * <var:h> ^ <nat:4> + <nat:6> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 