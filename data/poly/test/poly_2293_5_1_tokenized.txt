\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:V> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:5> ; <var:w> := <var:e1> <var:w> := <var:w> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assuming ( given every whole numbers $ <var:n> $ ) $ <var:V> = <var:n> $ before evaluating the code , it follows that we have $ <var:w> = <nat:5> \times <var:n> + <nat:2> $ after series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:n> \} \\ <var:e1> := <var:V> ; \\ \{ <var:V> = <var:n> \land <var:e1> = <var:n> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:V> = <var:n> \land <var:e1> = <var:n> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:V> = <var:n> \land <var:e1> = <nat:5> * <var:n> \land <var:e0> = <nat:2> \} \\ <var:w> := <var:e1> \\ \{ <var:V> = <var:n> \land <var:e0> = <nat:2> \land <var:w> = <nat:5> * <var:n> \} \\ <var:w> := <var:w> + <var:e0> \\ \{ <var:V> = <var:n> \land <var:w> = <nat:5> * <var:n> + <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:V> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:5> ; <var:w> := <var:e1> <var:w> := <var:w> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:w> = <nat:5> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:e1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:e1> = <var:n> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:e1> = <nat:5> * <var:n> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:e0> = <nat:2> /\ <var:w> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:w> = <nat:5> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 