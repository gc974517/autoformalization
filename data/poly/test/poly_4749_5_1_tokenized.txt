\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:C1> := <var:K> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:N> := <var:C1> <var:N> := <var:N> + <var:C0> \end{verbatim} Assume it to be that $ <var:K> = <var:q> $ ( with some $ <var:q> \in \mathbb{N} $ ) prior to evaluating the set of instructions , then $ <var:N> = <nat:1> \times <var:q> + <nat:1> $ after program has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is accomplished using usual Hoare techniques . Moving forward to the next step , we have the variable update code \verb | <var:C1> := <var:K> ; | . This transfers the condition $ \{ <var:K> = <var:q> \} $ to the postcondition $ \{ <var:K> = <var:q> \land <var:C1> = <var:q> \} $ . Stepping through , we see the variable assignmet code giving $ <nat:1> $ as $ <var:C0>$ . This line transfers $ \{ <var:K> = <var:q> \land <var:C1> = <var:q> \} $ to $ \{ <var:K> = <var:q> \land <var:C1> = <var:q> \land <var:C0> = <nat:1> \} $ . This is guaranteed using the assignment law given in standard Hoare techniques . Observing the subsequent statement in the code segment , we have the variable binding code \verb | <var:C1> := <var:C1> * <nat:1> ; | . This statement redefines the condition $ \{ <var:K> = <var:q> \land <var:C1> = <var:q> \land <var:C0> = <nat:1> \} $ toward $ \{ <var:K> = <var:q> \land <var:C1> = <nat:1> \cdot <var:q> \land <var:C0> = <nat:1> \} $ . This is rigorously given through the assignment scheme given in standard Hoare reasoning . Taking a look at the next step in our program , we have the statement yielding $ <var:C1$ into $ <var:N>$ . This code moves $ \{ <var:K> = <var:q> \land <var:C1> = <nat:1> \cdot <var:q> \land <var:C0> = <nat:1> \} $ into the condition $ \{ <var:K> = <var:q> \land <var:C0> = <nat:1> \land <var:N> = <nat:1> \cdot <var:q> \} $ . This is given through the assignment rule defined in typical Hoare logic . Going to the next step , we see the environment update line \verb | <var:N> := <var:N> + <var:C0> | . This code redefines $ \{ <var:K> = <var:q> \land <var:C0> = <nat:1> \land <var:N> = <nat:1> \cdot <var:q> \} $ toward $ \{ <var:K> = <var:q> \land <var:N> = <nat:1> \cdot <var:q> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <var:C1> := <var:K> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:N> := <var:C1> <var:N> := <var:N> + <var:C0> {{ <var:N> = <nat:1> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:C1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:C1> = <var:q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:C1> = <nat:1> * <var:q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:C0> = <nat:1> /\ <var:N> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:N> = <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 