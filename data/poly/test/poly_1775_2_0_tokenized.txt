\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:6> ; <var:s> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:o> = <var:Q> $ taking $ <var:Q> $ ahead of interpreting this code segment , then we have $ <var:s> = <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be demonstrated with typical Hoare techniques . Immediately following , the variable assignmet command giving $ <nat:6> $ as $ <var:i0>$ . This moves the precondition $ \{ <var:o> = <var:Q> \} $ as $ \{ <var:o> = <var:Q> \land <var:i0> = <nat:6> \} $ . Paying attention to the following piece of code contained in our list of commands , we see the binding line \verb | <var:s> := <var:i0> | . This code advances the condition $ \{ <var:o> = <var:Q> \land <var:i0> = <nat:6> \} $ as the condition $ \{ <var:o> = <var:Q> \land <var:s> = <nat:6> \} $ . This is known to be sound by the assignment rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:6> ; <var:s> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:o> = <var:Q> }} <def:poly> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Q> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Q> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 