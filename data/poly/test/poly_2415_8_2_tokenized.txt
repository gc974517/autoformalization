\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <var:H> * <var:D> ; <var:H> := <nat:4> + <var:H> * <var:D> ; <var:H> := <nat:1> + <var:H> * <var:D> ; <var:H> := <nat:3> + <var:H> * <var:D> ; <var:H> := <nat:1> + <var:H> * <var:D> ; <var:H> := <nat:3> + <var:H> * <var:D> ; <var:H> := <nat:2> + <var:H> * <var:D> \end{verbatim} Allowing that we have $ <var:D> = <var:p> $ ahead of the evaluation of this segment of code , it follows that $ <var:H> = <nat:1> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our program is demonstrated with typical Hoare techniques . Following , the statement \verb | <var:H> := <nat:1> ; | . This forwards $ \{ <var:D> = <var:p> \} $ into the postcondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \} $ . Next , we have the assignment statement letting $ <var:H> * <var:D> $ to $ <var:H>$ . This transfers the condition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \} $ into $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> + \} $ . Taking another step toward the upcoming bit of code seen in our code , we see the variable binding code defining $ <nat:4> + <var:H> * <var:D> $ to $ <var:H>$ . This forwards the precondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> + \} $ into the postcondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \} $ . This is deduced through the assignment inference rule found in usual Hoare logic . Immediately after , we see the variable update command \verb | <var:H> := <nat:1> + <var:H> * <var:D> ; | . This statement takes the precondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \} $ toward $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> + <nat:1> \} $ . After , the variable binding statement assigning $ <nat:3> + <var:H> * <var:D> $ to $ <var:H>$ . This command transfers $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> + <nat:1> \} $ toward the postcondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ . Stepping forward , we have the variable binding line yielding $ <nat:1> + <var:H> * <var:D> $ toward $ <var:H>$ . This forwards the precondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} $ . Honing in on the next statement seen in our code segment , we have the variable assignmet command \verb | <var:H> := <nat:3> + <var:H> * <var:D> ; | . This command transfers the precondition $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} $ into $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ . This is sound with the assignment scheme defined in standard Hoare techniques . Now , we see the statement \verb | <var:H> := <nat:2> + <var:H> * <var:D> | . This line redefines $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ toward $ \{ <var:D> = <var:p> \land <var:H> = <nat:1> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:2> \} $ . This is shown with the assignment inference rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:D> = <var:p> }} <var:H> := <nat:1> ; <var:H> := <var:H> * <var:D> ; <var:H> := <nat:4> + <var:H> * <var:D> ; <var:H> := <nat:1> + <var:H> * <var:D> ; <var:H> := <nat:3> + <var:H> * <var:D> ; <var:H> := <nat:1> + <var:H> * <var:D> ; <var:H> := <nat:3> + <var:H> * <var:D> ; <var:H> := <nat:2> + <var:H> * <var:D> {{ <var:H> = <nat:1> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:p> /\ <var:H> = <nat:1> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 