\begin{document} \begin{theorem} Define the following set of instructions as \begin{verbatim} <var:V1> := <var:W> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:7> ; <var:z> := <var:V1> <var:z> := <var:z> + <var:V0> \end{verbatim} Allow it to hold that $ <var:W> = <var:Q> $ prior to the evaluation of the series of commands it must be that we see $ <var:z> = <nat:7> \cdot <var:Q> + <nat:4> $ when code segment has executed . \end{theorem} \begin{proof} The course of logic for this set of instructions can be demonstrated through Hoare logic . Shifting focus toward the proceeding bit of code found in our series of commands , we see the variable assignmet line letting $ <var:W> $ into $ <var:V1>$ . This command forwards the precondition $ \{ <var:W> = <var:Q> \} $ as the postcondition $ \{ <var:W> = <var:Q> \land <var:V1> = <var:Q> \} $ . This is given using the assignment scheme defined by typical Hoare techniques . Moving forward , we see the environment update command assigning $ <nat:4> $ as $ <var:V0>$ . This redefines the precondition $ \{ <var:W> = <var:Q> \land <var:V1> = <var:Q> \} $ toward the condition $ \{ <var:W> = <var:Q> \land <var:V1> = <var:Q> \land <var:V0> = <nat:4> \} $ . Shifting focus toward the proceeding bit of code contained in our code , we have the variable binding code \verb | <var:V1> := <var:V1> * <nat:7> ; | . This takes the condition $ \{ <var:W> = <var:Q> \land <var:V1> = <var:Q> \land <var:V0> = <nat:4> \} $ toward the postcondition $ \{ <var:W> = <var:Q> \land <var:V1> = <nat:7> * <var:Q> \land <var:V0> = <nat:4> \} $ . This is deduced through the assignment scheme defined by standard Hoare logic . Following , we have the binding code \verb | <var:z> := <var:V1> | . This moves $ \{ <var:W> = <var:Q> \land <var:V1> = <nat:7> * <var:Q> \land <var:V0> = <nat:4> \} $ into the condition $ \{ <var:W> = <var:Q> \land <var:V0> = <nat:4> \land <var:z> = <nat:7> * <var:Q> \} $ . This is rigorously given with the assignment inference rule defined by usual Hoare logic . Further , we have the code binding $ <var:z> + <var:V0$ toward $ <var:z>$ . This moves the precondition $ \{ <var:W> = <var:Q> \land <var:V0> = <nat:4> \land <var:z> = <nat:7> * <var:Q> \} $ as the condition $ \{ <var:W> = <var:Q> \land <var:z> = <nat:7> * <var:Q> + <nat:4> \} $ . This is known to be sound with the assignment scheme found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:W> = <var:Q> }} <var:V1> := <var:W> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:7> ; <var:z> := <var:V1> <var:z> := <var:z> + <var:V0> {{ <var:z> = <nat:7> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:V1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:V1> = <var:Q> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:V1> = <nat:7> * <var:Q> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:V0> = <nat:4> /\ <var:z> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:z> = <nat:7> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 