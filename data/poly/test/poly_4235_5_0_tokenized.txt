\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:G> ; <var:k> := <var:V1> ; <var:k> := <var:k> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:G> = <var:W> $ ahead of running our segment of code it follows that $ <var:k> = <nat:2> * <var:W> + <nat:1> $ once series of commands has executed . \end{theorem} \begin{proof} Applying standard Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:W> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:G> = <var:W> \land <var:V0> = <nat:1> \} \\ <var:V1> := <nat:2> ; \\ \{ <var:G> = <var:W> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \} \\ <var:V1> := <var:V1> * <var:G> ; \\ \{ <var:G> = <var:W> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \times <var:W> \} \\ <var:k> := <var:V1> ; \\ \{ <var:G> = <var:W> \land <var:V0> = <nat:1> \land <var:k> = <nat:2> \times <var:W> \} \\ <var:k> := <var:k> + <var:V0> \\ \{ <var:G> = <var:W> \land <var:k> = <nat:2> \times <var:W> + <nat:1> \} \end{eqnarray} Therefore , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:G> ; <var:k> := <var:V1> ; <var:k> := <var:k> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:G> = <var:W> }} <def:poly> {{ <var:k> = <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:V0> = <nat:1> /\ <var:k> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:k> = <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 