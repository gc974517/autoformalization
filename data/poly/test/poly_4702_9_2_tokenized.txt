\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Allow --- given every whole numbers $ <var:G> $ --- $ <var:Y> = <var:G> $ ahead of interpreting our program it holds that $ <var:u> = <nat:2> \cdot <var:G> ^ <nat:8> + <nat:4> \cdot <var:G> ^ <nat:7> + <nat:1> \cdot <var:G> ^ <nat:6> + <nat:3> \cdot <var:G> ^ <nat:5> + <nat:2> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be seen with the following decorated list of commands . \begin{eqnarray} \{ <var:Y> = <var:G> \} \\ <var:u> := <nat:2> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \} \end{eqnarray} Allowing running our program gives us : \begin{eqnarray} <var:u> := <nat:4> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> + <nat:4> \} \\ <var:u> := <nat:1> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:5> + <nat:4> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:6> + <nat:4> \cdot <var:G> ^ <nat:5> + <nat:1> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:Y> ; \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:7> + <nat:4> \cdot <var:G> ^ <nat:6> + <nat:1> \cdot <var:G> ^ <nat:5> + <nat:3> \cdot <var:G> ^ <nat:4> + <nat:2> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:2> \} \\ <var:u> := <nat:2> + <var:u> * <var:Y> \\ \{ <var:Y> = <var:G> \land <var:u> = <nat:2> \cdot <var:G> ^ <nat:8> + <nat:4> \cdot <var:G> ^ <nat:7> + <nat:1> \cdot <var:G> ^ <nat:6> + <nat:3> \cdot <var:G> ^ <nat:5> + <nat:2> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:2> \} \end{eqnarray} Applying usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <def:poly> {{ <var:u> = <nat:2> * <var:G> ^ <nat:8> + <nat:4> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:5> + <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:u> = <nat:2> * <var:G> ^ <nat:8> + <nat:4> * <var:G> ^ <nat:7> + <nat:1> * <var:G> ^ <nat:6> + <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 