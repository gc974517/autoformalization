\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <nat:1> + <var:K> * <var:I> ; <var:K> := <nat:2> + <var:K> * <var:I> ; <var:K> := <nat:3> + <var:K> * <var:I> ; <var:K> := <nat:4> + <var:K> * <var:I> \end{verbatim} Assume , for every whole numbers $ <var:u> $ , that we have $ <var:I> = <var:u> $ prior to executing this series of commands it must be that we see $ <var:K> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be accomplished through Hoare reasoning . Taking a look at the next statements in our list of instructions , \verb | { <var:I> = <var:u> } <var:K> := <nat:3> { <var:I> = <var:u> \land <var:K> = <nat:3> } | and \verb | { <var:I> = <var:u> \land <var:K> = <nat:3> } <var:K> := <nat:1> + <var:K> * <var:I> { <var:I> = <var:u> \land <var:K> = <nat:3> \times <var:u> + <nat:1> } | . This is guaranteed through the law given in standard Hoare reasoning . Focusing on the proceeding bits of codecontained in the code , we have \verb | { <var:I> = <var:u> } <var:K> := <nat:3> { <var:I> = <var:u> \land <var:K> = <nat:3> } | , \verb | { <var:I> = <var:u> \land <var:K> = <nat:3> } <var:K> := <nat:1> + <var:K> * <var:I> { <var:I> = <var:u> \land <var:K> = <nat:3> \times <var:u> + <nat:1> } | and \verb | { <var:I> = <var:u> \land <var:K> = <nat:3> \times <var:u> + <nat:1> } <var:K> := <nat:2> + <var:K> * <var:I> { <var:I> = <var:u> \land <var:K> = <nat:3> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:I> = <var:u> }} <var:K> := <nat:3> ; <var:K> := <nat:1> + <var:K> * <var:I> ; <var:K> := <nat:2> + <var:K> * <var:I> ; <var:K> := <nat:3> + <var:K> * <var:I> ; <var:K> := <nat:4> + <var:K> * <var:I> {{ <var:K> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:K> = <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:K> = <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:K> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:u> /\ <var:K> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 