\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:3> ; <var:O> := <var:l2> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assume that $ <var:R> = <var:G> $ --- given every $ <var:G> \in \mathbb{N} $ --- before interpreting this series of commands it must be that $ <var:O> = <nat:3> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for the program can be accomplished with Hoare techniques . Moving on to the next step , we see the variable binding command \verb | <var:l1> := <var:R> ; | . This advances $ \{ <var:R> = <var:G> \} $ to the postcondition $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \} $ . Paying attention to the subsequent step in the code , the variable update statement \verb | <var:l2> := <var:l1> * <var:R> ; | . This code advances the precondition $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \} $ to the condition $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \land <var:l2> = <var:G> ^ <nat:2> \} $ . After , we have the environment update statement letting $ <nat:6> $ to $ <var:l0>$ . This statement forwards the precondition $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \land <var:l2> = <var:G> ^ <nat:2> \} $ toward $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \land <var:l2> = <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ . This is ensured using the assignment law in typical Hoare reasoning . Stepping through , the variable binding line binding $ <var:l1> * <nat:3> $ as $ <var:l1>$ . This statement advances the precondition $ \{ <var:R> = <var:G> \land <var:l1> = <var:G> \land <var:l2> = <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ as the postcondition $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l2> = <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ . This is deduced with the assignment law in standard Hoare reasoning . Taking another step toward the proceeding command contained in the program , we have the assignment command yielding $ <var:l2> * <nat:3> $ into $ <var:l2>$ . This forwards $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l2> = <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ into the postcondition $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l2> = <nat:3> \cdot <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ . Now , we see the variable assignmet statement \verb | <var:O> := <var:l2> | . This takes the precondition $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l2> = <nat:3> \cdot <var:G> ^ <nat:2> \land <var:l0> = <nat:6> \} $ as $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l0> = <nat:6> \land <var:O> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ . This is given through the assignment law defined by typical Hoare techniques . Moving forward , we see the environment update line binding $ <var:O> + <var:l1$ into $ <var:O>$ . This line moves the precondition $ \{ <var:R> = <var:G> \land <var:l1> = <nat:3> \cdot <var:G> \land <var:l0> = <nat:6> \land <var:O> = <nat:3> \cdot <var:G> ^ <nat:2> \} $ into $ \{ <var:R> = <var:G> \land <var:l0> = <nat:6> \land <var:O> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> \} $ . This is ensured with the assignment scheme in standard Hoare reasoning . Stepping through , we have the assignment line \verb | <var:O> := <var:O> + <var:l0> | . This command forwards $ \{ <var:R> = <var:G> \land <var:l0> = <nat:6> \land <var:O> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> \} $ as the condition $ \{ <var:R> = <var:G> \land <var:O> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:3> ; <var:l2> := <var:l2> * <nat:3> ; <var:O> := <var:l2> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:R> = <var:G> }} <def:poly> {{ <var:O> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <var:G> /\ <var:l2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <var:G> /\ <var:l2> = <var:G> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <nat:3> * <var:G> /\ <var:l2> = <var:G> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <nat:3> * <var:G> /\ <var:l2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l1> = <nat:3> * <var:G> /\ <var:l0> = <nat:6> /\ <var:O> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:l0> = <nat:6> /\ <var:O> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:O> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 