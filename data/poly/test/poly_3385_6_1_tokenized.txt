\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:J> ; <var:Q2> := <var:Q1> * <var:J> ; <var:Q0> := <nat:4> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:u> := <var:Q2> <var:u> := <var:u> + <var:Q0> \end{verbatim} Assume $ <var:J> = <var:w> $ ahead of the evaluation of this set of commands , it holds that $ <var:u> = <nat:4> * <var:w> ^ <nat:2> + <nat:4> $ after series of commands has finished . \end{theorem} \begin{proof} The course of logic for our list of commands is accomplished with typical Hoare reasoning . Shifting focus toward the upcoming lines contained in our code segment , \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:Q1> := <var:J> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \} \\ \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \} & <var:Q2> := <var:Q1> * <var:J> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \land <var:Q2> = <var:w> ^ <nat:2> \} \\ \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \land <var:Q2> = <var:w> ^ <nat:2> \} & <var:Q0> := <nat:4> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \land <var:Q2> = <var:w> ^ <nat:2> \land <var:Q0> = <nat:4> \} \\ \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \land <var:Q2> = <var:w> ^ <nat:2> \land <var:Q0> = <nat:4> \} & <var:Q2> := <var:Q2> * <nat:4> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \land <var:Q2> = <nat:4> * <var:w> ^ <nat:2> \land <var:Q0> = <nat:4> \} \end{tabular} This is ensured by the variable binding law defined in typical Hoare techniques . Next , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:Q1> := <var:J> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \} \end{tabular} Next , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:w> \} & <var:Q1> := <var:J> & \{ <var:J> = <var:w> \land <var:Q1> = <var:w> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <var:Q1> := <var:J> ; <var:Q2> := <var:Q1> * <var:J> ; <var:Q0> := <nat:4> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:u> := <var:Q2> <var:u> := <var:u> + <var:Q0> {{ <var:u> = <nat:4> * <var:w> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q1> = <var:w> /\ <var:Q2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q1> = <var:w> /\ <var:Q2> = <var:w> ^ <nat:2> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q1> = <var:w> /\ <var:Q2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q1> = <var:w> /\ <var:Q0> = <nat:4> /\ <var:u> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:u> = <nat:4> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 