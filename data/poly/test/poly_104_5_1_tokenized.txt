\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:p> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:4> ; <var:f> := <var:x1> <var:f> := <var:f> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assuming --- letting $ <var:c> \in \mathbb{Z}^+ $ --- it to be that $ <var:p> = <var:c> $ prior to running the series of instructions it must be that $ <var:f> = <nat:4> * <var:c> + <nat:1> $ after series of instructions is done . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:p> = <var:c> \} \\ <var:x1> := <var:p> ; \\ \{ <var:p> = <var:c> \land <var:x1> = <var:c> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:p> = <var:c> \land <var:x1> = <var:c> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:4> ; \\ \{ <var:p> = <var:c> \land <var:x1> = <nat:4> \times <var:c> \land <var:x0> = <nat:1> \} \\ <var:f> := <var:x1> \\ \{ <var:p> = <var:c> \land <var:x0> = <nat:1> \land <var:f> = <nat:4> \times <var:c> \} \\ <var:f> := <var:f> + <var:x0> \\ \{ <var:p> = <var:c> \land <var:f> = <nat:4> \times <var:c> + <nat:1> \} \end{eqnarray} Given the above , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:p> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:4> ; <var:f> := <var:x1> <var:f> := <var:f> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <def:poly> {{ <var:f> = <nat:4> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:x1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:x1> = <var:c> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:x1> = <nat:4> * <var:c> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:x0> = <nat:1> /\ <var:f> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:f> = <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 