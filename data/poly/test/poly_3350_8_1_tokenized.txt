\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:N> ; <var:Z2> := <var:Z1> * <var:N> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:Z2> := <var:Z2> * <nat:2> ; <var:r> := <var:Z2> <var:r> := <var:r> + <var:Z1> <var:r> := <var:r> + <var:Z0> \end{verbatim} Allowing it to be that $ <var:N> = <var:Q> $ ahead of executing the code , it must be that we see $ <var:r> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this list of instructions is done through the below decorated set of commands . \begin{eqnarray} \{ <var:N> = <var:Q> \} \\ <var:Z1> := <var:N> ; \\ \{ <var:N> = <var:Q> \land <var:Z1> = <var:Q> \} \\ <var:Z2> := <var:Z1> * <var:N> ; \\ \{ <var:N> = <var:Q> \land <var:Z1> = <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:N> = <var:Q> \land <var:Z1> = <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <var:Z1> * <nat:8> ; \\ \{ <var:N> = <var:Q> \land <var:Z1> = <nat:8> * <var:Q> \land <var:Z2> = <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:Z2> := <var:Z2> * <nat:2> ; \\ \{ <var:N> = <var:Q> \land <var:Z1> = <nat:8> * <var:Q> \land <var:Z2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:Z0> = <nat:7> \} \\ <var:r> := <var:Z2> \\ \{ <var:N> = <var:Q> \land <var:Z1> = <nat:8> * <var:Q> \land <var:Z0> = <nat:7> \land <var:r> = <nat:2> * <var:Q> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:Z1> \\ \{ <var:N> = <var:Q> \land <var:Z0> = <nat:7> \land <var:r> = <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} \\ <var:r> := <var:r> + <var:Z0> \\ \{ <var:N> = <var:Q> \land <var:r> = <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> \} \end{eqnarray} Using typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:N> = <var:Q> }} <var:Z1> := <var:N> ; <var:Z2> := <var:Z1> * <var:N> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:8> ; <var:Z2> := <var:Z2> * <nat:2> ; <var:r> := <var:Z2> <var:r> := <var:r> + <var:Z1> <var:r> := <var:r> + <var:Z0> {{ <var:r> = <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <nat:8> * <var:Q> /\ <var:Z2> = <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <nat:8> * <var:Q> /\ <var:Z2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z1> = <nat:8> * <var:Q> /\ <var:Z0> = <nat:7> /\ <var:r> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:Z0> = <nat:7> /\ <var:r> = <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:r> = <nat:2> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 