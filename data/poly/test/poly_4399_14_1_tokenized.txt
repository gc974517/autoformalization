\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:X> ; <var:n2> := <var:n1> * <var:X> ; <var:n3> := <var:n2> * <var:X> ; <var:n4> := <var:n3> * <var:X> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:7> ; <var:n2> := <var:n2> * <nat:5> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:6> ; <var:m> := <var:n4> <var:m> := <var:m> + <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n1> <var:m> := <var:m> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:X> = <var:T> $ before executing the code segment , it follows that we have $ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:X> = <var:T> \} \\ <var:n1> := <var:X> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <var:T> \} \\ <var:n2> := <var:n1> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <var:T> \land <var:n2> = <var:T> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <var:T> \land <var:n2> = <var:T> ^ <nat:2> \land <var:n3> = <var:T> ^ <nat:3> \} \\ <var:n4> := <var:n3> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <var:T> \land <var:n2> = <var:T> ^ <nat:2> \land <var:n3> = <var:T> ^ <nat:3> \land <var:n4> = <var:T> ^ <nat:4> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <var:T> \land <var:n2> = <var:T> ^ <nat:2> \land <var:n3> = <var:T> ^ <nat:3> \land <var:n4> = <var:T> ^ <nat:4> \land <var:n0> = <nat:8> \} \\ <var:n1> := <var:n1> * <nat:7> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <var:T> ^ <nat:2> \land <var:n3> = <var:T> ^ <nat:3> \land <var:n4> = <var:T> ^ <nat:4> \land <var:n0> = <nat:8> \} \\ <var:n2> := <var:n2> * <nat:5> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:n3> = <var:T> ^ <nat:3> \land <var:n4> = <var:T> ^ <nat:4> \land <var:n0> = <nat:8> \} \\ <var:n3> := <var:n3> * <nat:4> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:n4> = <var:T> ^ <nat:4> \land <var:n0> = <nat:8> \} \\ <var:n4> := <var:n4> * <nat:6> ; \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:n4> = <nat:6> \cdot <var:T> ^ <nat:4> \land <var:n0> = <nat:8> \} \\ <var:m> := <var:n4> \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:T> ^ <nat:3> \land <var:n0> = <nat:8> \land <var:m> = <nat:6> \cdot <var:T> ^ <nat:4> \} \\ <var:m> := <var:m> + <var:n3> \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n2> = <nat:5> \cdot <var:T> ^ <nat:2> \land <var:n0> = <nat:8> \land <var:m> = <nat:6> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:n2> \\ \{ <var:X> = <var:T> \land <var:n1> = <nat:7> \cdot <var:T> \land <var:n0> = <nat:8> \land <var:m> = <nat:6> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> \} \end{eqnarray} Furthering running our program results in : \begin{eqnarray} <var:m> := <var:m> + <var:n1> \\ \{ <var:X> = <var:T> \land <var:n0> = <nat:8> \land <var:m> = <nat:6> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:7> \cdot <var:T> \} \\ <var:m> := <var:m> + <var:n0> \\ \{ <var:X> = <var:T> \land <var:m> = <nat:6> \cdot <var:T> ^ <nat:4> + <nat:4> \cdot <var:T> ^ <nat:3> + <nat:5> \cdot <var:T> ^ <nat:2> + <nat:7> \cdot <var:T> + <nat:8> \} \end{eqnarray} Therefore , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Definition <def:poly> := <var:n1> := <var:X> ; <var:n2> := <var:n1> * <var:X> ; <var:n3> := <var:n2> * <var:X> ; <var:n4> := <var:n3> * <var:X> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:7> ; <var:n2> := <var:n2> * <nat:5> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:6> ; <var:m> := <var:n4> <var:m> := <var:m> + <var:n3> <var:m> := <var:m> + <var:n2> <var:m> := <var:m> + <var:n1> <var:m> := <var:m> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <def:poly> {{ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <var:T> /\ <var:n2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <var:T> /\ <var:n2> = <var:T> ^ <nat:2> /\ <var:n3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <var:T> /\ <var:n2> = <var:T> ^ <nat:2> /\ <var:n3> = <var:T> ^ <nat:3> /\ <var:n4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <var:T> /\ <var:n2> = <var:T> ^ <nat:2> /\ <var:n3> = <var:T> ^ <nat:3> /\ <var:n4> = <var:T> ^ <nat:4> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <var:T> ^ <nat:2> /\ <var:n3> = <var:T> ^ <nat:3> /\ <var:n4> = <var:T> ^ <nat:4> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:n3> = <var:T> ^ <nat:3> /\ <var:n4> = <var:T> ^ <nat:4> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:n4> = <var:T> ^ <nat:4> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:n4> = <nat:6> * <var:T> ^ <nat:4> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:n0> = <nat:8> /\ <var:m> = <nat:6> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n2> = <nat:5> * <var:T> ^ <nat:2> /\ <var:n0> = <nat:8> /\ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n1> = <nat:7> * <var:T> /\ <var:n0> = <nat:8> /\ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:n0> = <nat:8> /\ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:m> = <nat:6> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:5> * <var:T> ^ <nat:2> + <nat:7> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 