\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:h> ; <var:N> := <var:T1> ; <var:N> := <var:N> + <var:T0> \end{verbatim} Given $ <var:h> = <var:G> $ taking positive coefficients $ <var:G> $ ahead of the evaluation of this list of instructions , it holds that $ <var:N> = <nat:2> * <var:G> + <nat:9> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:G> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:h> = <var:G> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:2> ; \\ \{ <var:h> = <var:G> \land <var:T0> = <nat:9> \land <var:T1> = <nat:2> \} \\ <var:T1> := <var:T1> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:T0> = <nat:9> \land <var:T1> = <nat:2> \times <var:G> \} \\ <var:N> := <var:T1> ; \\ \{ <var:h> = <var:G> \land <var:T0> = <nat:9> \land <var:N> = <nat:2> \times <var:G> \} \\ <var:N> := <var:N> + <var:T0> \\ \{ <var:h> = <var:G> \land <var:N> = <nat:2> \times <var:G> + <nat:9> \} \end{eqnarray} As a consequence , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:T0> := <nat:9> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:h> ; <var:N> := <var:T1> ; <var:N> := <var:N> + <var:T0> {{ <var:N> = <nat:2> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:T0> = <nat:9> /\ <var:N> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:N> = <nat:2> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 