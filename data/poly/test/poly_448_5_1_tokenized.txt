\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:E1> := <var:V> ; <var:E0> := <nat:2> ; <var:E1> := <var:E1> * <nat:2> ; <var:t> := <var:E1> <var:t> := <var:t> + <var:E0> \end{verbatim} Assume that $ <var:V> = <var:w> $ before the execution of our program it holds that $ <var:t> = <nat:2> \times <var:w> + <nat:2> $ after list of instructions has terminated . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:V> = <var:w> \} \\ <var:E1> := <var:V> ; \\ \{ <var:V> = <var:w> \land <var:E1> = <var:w> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:V> = <var:w> \land <var:E1> = <var:w> \land <var:E0> = <nat:2> \} \\ <var:E1> := <var:E1> * <nat:2> ; \\ \{ <var:V> = <var:w> \land <var:E1> = <nat:2> \cdot <var:w> \land <var:E0> = <nat:2> \} \\ <var:t> := <var:E1> \\ \{ <var:V> = <var:w> \land <var:E0> = <nat:2> \land <var:t> = <nat:2> \cdot <var:w> \} \\ <var:t> := <var:t> + <var:E0> \\ \{ <var:V> = <var:w> \land <var:t> = <nat:2> \cdot <var:w> + <nat:2> \} \end{eqnarray} Considering the above , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:V> = <var:w> }} <var:E1> := <var:V> ; <var:E0> := <nat:2> ; <var:E1> := <var:E1> * <nat:2> ; <var:t> := <var:E1> <var:t> := <var:t> + <var:E0> {{ <var:t> = <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:E1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:E1> = <var:w> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:E1> = <nat:2> * <var:w> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:E0> = <nat:2> /\ <var:t> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:w> /\ <var:t> = <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 