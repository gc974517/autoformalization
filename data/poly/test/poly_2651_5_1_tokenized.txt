\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:y> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:h> := <var:M1> <var:h> := <var:h> + <var:M0> \end{verbatim} Allow that we have $ <var:y> = <var:T> $ ahead of the evaluation of this program , it follows that we have $ <var:h> = <nat:1> * <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this set of instructions is done using usual Hoare reasoning . Observing the next piece of code in the set of instructions , we see the variable assignmet line \verb | <var:M1> := <var:y> ; | . This statement redefines $ \{ <var:y> = <var:T> \} $ as $ \{ <var:y> = <var:T> \land <var:M1> = <var:T> \} $ . Immediately following , we see the code giving $ <nat:2> $ to $ <var:M0>$ . This command moves the precondition $ \{ <var:y> = <var:T> \land <var:M1> = <var:T> \} $ as the condition $ \{ <var:y> = <var:T> \land <var:M1> = <var:T> \land <var:M0> = <nat:2> \} $ . Next , we have the binding code \verb | <var:M1> := <var:M1> * <nat:1> ; | . This moves the condition $ \{ <var:y> = <var:T> \land <var:M1> = <var:T> \land <var:M0> = <nat:2> \} $ into $ \{ <var:y> = <var:T> \land <var:M1> = <nat:1> \cdot <var:T> \land <var:M0> = <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule given in Hoare techniques . Going forward , the variable update line \verb | <var:h> := <var:M1> | . This redefines $ \{ <var:y> = <var:T> \land <var:M1> = <nat:1> \cdot <var:T> \land <var:M0> = <nat:2> \} $ to the condition $ \{ <var:y> = <var:T> \land <var:M0> = <nat:2> \land <var:h> = <nat:1> \cdot <var:T> \} $ . Advancing to the upcoming line seen in the code , the variable binding command letting $ <var:h> + <var:M0$ toward $ <var:h>$ . This redefines the precondition $ \{ <var:y> = <var:T> \land <var:M0> = <nat:2> \land <var:h> = <nat:1> \cdot <var:T> \} $ into $ \{ <var:y> = <var:T> \land <var:h> = <nat:1> \cdot <var:T> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <var:M1> := <var:y> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:h> := <var:M1> <var:h> := <var:h> + <var:M0> {{ <var:h> = <nat:1> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:M1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:M1> = <var:T> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:M1> = <nat:1> * <var:T> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:M0> = <nat:2> /\ <var:h> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:h> = <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 