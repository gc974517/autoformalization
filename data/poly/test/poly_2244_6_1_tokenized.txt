\begin{document} \begin{theorem} We define a code segment in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:S> ; <var:N2> := <var:N1> * <var:S> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:2> ; <var:l> := <var:N2> <var:l> := <var:l> + <var:N0> \end{verbatim} Allowing that we have $ <var:S> = <var:y> $ --- taking positive integers $ <var:y> $ --- prior to interpreting our series of instructions it follows that we see $ <var:l> = <nat:2> \times <var:y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is evident using typical Hoare logic . Taking another step toward the next line of code in our code segment , we see the binding statement \verb | <var:N1> := <var:S> ; | . This command moves the precondition $ \{ <var:S> = <var:y> \} $ into the postcondition $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \} $ . This is shown with the assignment rule given by typical Hoare techniques . Looking at the proceeding command found in the list of instructions , we have the code giving $ <var:N1> * <var:S> $ as $ <var:N2>$ . This redefines the precondition $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \} $ toward $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <var:y> ^ <nat:2> \} $ . This is sound with the assignment inference rule of standard Hoare techniques . Stepping through , we have the code assigning $ <nat:2> $ into $ <var:N0>$ . This moves the precondition $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <var:y> ^ <nat:2> \} $ as the condition $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <var:y> ^ <nat:2> \land <var:N0> = <nat:2> \} $ . Taking another step toward the upcoming step in the series of instructions , we have the assignment line \verb | <var:N2> := <var:N2> * <nat:2> ; | . This code moves the precondition $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <var:y> ^ <nat:2> \land <var:N0> = <nat:2> \} $ as $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <nat:2> \cdot <var:y> ^ <nat:2> \land <var:N0> = <nat:2> \} $ . This is sound by the assignment scheme defined by standard Hoare logic . Taking a look at the proceeding statement found in the list of instructions , we see the variable update line defining $ <var:N2$ toward $ <var:l>$ . This command forwards $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N2> = <nat:2> \cdot <var:y> ^ <nat:2> \land <var:N0> = <nat:2> \} $ into $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N0> = <nat:2> \land <var:l> = <nat:2> \cdot <var:y> ^ <nat:2> \} $ . This is rigorously given using the assignment law obtained from Hoare reasoning . Keeping momentum , the variable binding statement \verb | <var:l> := <var:l> + <var:N0> | . This statement moves $ \{ <var:S> = <var:y> \land <var:N1> = <var:y> \land <var:N0> = <nat:2> \land <var:l> = <nat:2> \cdot <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:S> = <var:y> \land <var:l> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:2> \} $ . This is guaranteed through the assignment scheme defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <var:N1> := <var:S> ; <var:N2> := <var:N1> * <var:S> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:2> ; <var:l> := <var:N2> <var:l> := <var:l> + <var:N0> {{ <var:l> = <nat:2> * <var:y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:N1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:N1> = <var:y> /\ <var:N2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:N1> = <var:y> /\ <var:N2> = <var:y> ^ <nat:2> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:N1> = <var:y> /\ <var:N2> = <nat:2> * <var:y> ^ <nat:2> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:N1> = <var:y> /\ <var:N0> = <nat:2> /\ <var:l> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:l> = <nat:2> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 