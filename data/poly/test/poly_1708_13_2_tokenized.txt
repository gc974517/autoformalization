\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing , for every positive numbers $ <var:X> $ , $ <var:a> = <var:X> $ ahead of the evaluation of our set of instructions , it holds that we see $ <var:o> = <nat:3> * <var:X> ^ <nat:12> + <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> $ once code segment executes . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:a> = <var:X> \} \\ <var:o> := <nat:3> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \} \\ <var:o> := <nat:4> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> + <nat:4> \} \\ <var:o> := <nat:1> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:1> \} \\ <var:o> := <nat:3> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} \\ <var:o> := <nat:3> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:3> \} \\ <var:o> := <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + \} \\ <var:o> := <nat:3> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \} \\ <var:o> := <nat:4> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:8> + <nat:4> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:4> \} \\ <var:o> := <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:9> + <nat:4> \times <var:X> ^ <nat:8> + <nat:1> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + \} \\ <var:o> := <nat:4> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:10> + <nat:4> \times <var:X> ^ <nat:9> + <nat:1> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \} \\ <var:o> := <nat:3> + <var:o> * <var:a> ; \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:11> + <nat:4> \times <var:X> ^ <nat:10> + <nat:1> \times <var:X> ^ <nat:9> + <nat:3> \times <var:X> ^ <nat:8> + <nat:1> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:a> \\ \{ <var:a> = <var:X> \land <var:o> = <nat:3> \times <var:X> ^ <nat:12> + <nat:4> \times <var:X> ^ <nat:11> + <nat:1> \times <var:X> ^ <nat:10> + <nat:3> \times <var:X> ^ <nat:9> + <nat:1> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} \end{eqnarray} Hence , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:3> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:a> = <var:X> }} <def:poly> {{ <var:o> = <nat:3> * <var:X> ^ <nat:12> + <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:11> + <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:3> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:o> = <nat:3> * <var:X> ^ <nat:12> + <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 