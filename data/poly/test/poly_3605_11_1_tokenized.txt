\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:G> ; <var:T2> := <var:T1> * <var:G> ; <var:T3> := <var:T2> * <var:G> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:1> ; <var:B> := <var:T3> <var:B> := <var:B> + <var:T2> <var:B> := <var:B> + <var:T1> <var:B> := <var:B> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:G> = <var:u> $ prior to executing our series of instructions it follows that we see $ <var:B> = <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be demonstrated through standard Hoare logic . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:G> = <var:u> \} & <var:T1> := <var:G> & \{ <var:G> = <var:u> \land <var:T1> = <var:u> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <var:u> \} & <var:T2> := <var:T1> * <var:G> & \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \} & <var:T3> := <var:T2> * <var:G> & \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \} & <var:T0> := <nat:3> & \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} & <var:T1> := <var:T1> * <nat:2> & \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} & <var:T2> := <var:T2> * <nat:2> & \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T3> = <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} & <var:T3> := <var:T3> * <nat:1> & \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T3> = <nat:1> * <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T3> = <nat:1> * <var:u> ^ <nat:3> \land <var:T0> = <nat:3> \} & <var:B> := <var:T3& \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:B> = <nat:1> * <var:u> ^ <nat:3> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T2> = <nat:2> * <var:u> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:B> = <nat:1> * <var:u> ^ <nat:3> \} & <var:B> := <var:B> + <var:T2& \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T0> = <nat:3> \land <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> \} \\ \{ <var:G> = <var:u> \land <var:T1> = <nat:2> * <var:u> \land <var:T0> = <nat:3> \land <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> \} & <var:B> := <var:B> + <var:T1& \{ <var:G> = <var:u> \land <var:T0> = <nat:3> \land <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> \} \end{tabular} Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:u> \} & <var:T1> := <var:G> & \{ <var:G> = <var:u> \land <var:T1> = <var:u> \} \end{tabular} This is ensured using the binding scheme found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:G> ; <var:T2> := <var:T1> * <var:G> ; <var:T3> := <var:T2> * <var:G> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:1> ; <var:B> := <var:T3> <var:B> := <var:B> + <var:T2> <var:B> := <var:B> + <var:T1> <var:B> := <var:B> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:G> = <var:u> }} <def:poly> {{ <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <var:u> /\ <var:T2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <var:u> /\ <var:T2> = <var:u> ^ <nat:2> /\ <var:T3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <var:u> /\ <var:T2> = <var:u> ^ <nat:2> /\ <var:T3> = <var:u> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <nat:2> * <var:u> /\ <var:T2> = <var:u> ^ <nat:2> /\ <var:T3> = <var:u> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <nat:2> * <var:u> /\ <var:T2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:T3> = <var:u> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <nat:2> * <var:u> /\ <var:T2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <nat:2> * <var:u> /\ <var:T2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:T0> = <nat:3> /\ <var:B> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T1> = <nat:2> * <var:u> /\ <var:T0> = <nat:3> /\ <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:T0> = <nat:3> /\ <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:u> /\ <var:B> = <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 