\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:j> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:u> := <var:Y1> <var:u> := <var:u> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:j> = <var:N> $ ahead of executing the code it must be that we see $ <var:u> = <nat:8> * <var:N> + <nat:8> $ after code segment terminates . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be done using typical Hoare reasoning . Considering the following command in the code segment , we see the line \verb | <var:Y1> := <var:j> ; | . This takes the precondition $ \{ <var:j> = <var:N> \} $ toward the postcondition $ \{ <var:j> = <var:N> \land <var:Y1> = <var:N> \} $ . Advancing , we have the variable binding line \verb | <var:Y0> := <nat:8> ; | . This line moves the precondition $ \{ <var:j> = <var:N> \land <var:Y1> = <var:N> \} $ to the postcondition $ \{ <var:j> = <var:N> \land <var:Y1> = <var:N> \land <var:Y0> = <nat:8> \} $ . Moving forward , we see the assignment line defining $ <var:Y1> * <nat:8> $ to $ <var:Y1>$ . This takes $ \{ <var:j> = <var:N> \land <var:Y1> = <var:N> \land <var:Y0> = <nat:8> \} $ into the postcondition $ \{ <var:j> = <var:N> \land <var:Y1> = <nat:8> \times <var:N> \land <var:Y0> = <nat:8> \} $ . Shifting focus toward the proceeding line of code contained in the list of instructions , we have the assignment line letting $ <var:Y1$ into $ <var:u>$ . This code takes $ \{ <var:j> = <var:N> \land <var:Y1> = <nat:8> \times <var:N> \land <var:Y0> = <nat:8> \} $ into $ \{ <var:j> = <var:N> \land <var:Y0> = <nat:8> \land <var:u> = <nat:8> \times <var:N> \} $ . Moving on to the subsequent step in our code segment , we have the line binding $ <var:u> + <var:Y0$ as $ <var:u>$ . This advances $ \{ <var:j> = <var:N> \land <var:Y0> = <nat:8> \land <var:u> = <nat:8> \times <var:N> \} $ into the postcondition $ \{ <var:j> = <var:N> \land <var:u> = <nat:8> \times <var:N> + <nat:8> \} $ . This is ensured through the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:j> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:u> := <var:Y1> <var:u> := <var:u> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:j> = <var:N> }} <def:poly> {{ <var:u> = <nat:8> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Y1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Y1> = <var:N> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Y1> = <nat:8> * <var:N> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Y0> = <nat:8> /\ <var:u> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:u> = <nat:8> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 