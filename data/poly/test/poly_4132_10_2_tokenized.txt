\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:E> := <nat:1> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> \end{verbatim} Allow it to be that $ <var:C> = <var:z> $ ( letting $ <var:z> $ ) before the evaluation of our list of commands it must be that $ <var:E> = <nat:1> \cdot <var:z> ^ <nat:9> + <nat:2> \cdot <var:z> ^ <nat:7> + <nat:2> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> + <nat:4> $ after set of instructions finishes . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:C> = <var:z> \} \\ <var:E> := <nat:1> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> \} \\ <var:E> := <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> + \} \\ <var:E> := <nat:2> + <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:2> \} \\ <var:E> := <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} \\ <var:E> := <nat:2> + <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:2> \} \\ <var:E> := <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} \\ <var:E> := <nat:1> + <var:E> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> \} \\ <var:E> := <nat:4> + <var:E> * <var:C> \\ \{ <var:C> = <var:z> \land <var:E> = <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> \} \end{eqnarray} Considering the above , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:C> = <var:z> }} <var:E> := <nat:1> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <nat:2> + <var:E> * <var:C> ; <var:E> := <var:E> * <var:C> ; <var:E> := <nat:1> + <var:E> * <var:C> ; <var:E> := <nat:4> + <var:E> * <var:C> {{ <var:E> = <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:E> = <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 