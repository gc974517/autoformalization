\begin{document} \begin{theorem} Let the following set of instructions such that \begin{verbatim} <var:V1> := <var:p> ; <var:V2> := <var:V1> * <var:p> ; <var:V3> := <var:V2> * <var:p> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:3> ; <var:V3> := <var:V3> * <nat:2> ; <var:L> := <var:V3> <var:L> := <var:L> + <var:V2> <var:L> := <var:L> + <var:V1> <var:L> := <var:L> + <var:V0> \end{verbatim} Assuming it to be that $ <var:p> = <var:E> $ before executing the code segment it follows that we have $ <var:L> = <nat:2> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions can be shown through usual Hoare reasoning . Moving on to the next step , the variable update line \verb | <var:V1> := <var:p> ; | . This statement forwards $ \{ <var:p> = <var:E> \} $ to the postcondition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \} $ . This is shown with the assignment rule defined in Hoare techniques . Immediately after , we see the environment update command yielding $ <var:V1> * <var:p> $ as $ <var:V2>$ . This statement takes $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \} $ as the condition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \} $ . This is sound using the assignment scheme from Hoare reasoning . Moving onward , the variable binding code \verb | <var:V3> := <var:V2> * <var:p> ; | . This statement forwards the precondition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \} $ . This is rigorously given using the assignment inference rule obtained from typical Hoare techniques . Jumping to the subsequent bit of code seen in the segment of code , we see the binding code giving $ <nat:2> $ as $ <var:V0>$ . This redefines the precondition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \} $ toward the condition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . Looking at the next line found in our set of commands , we see the variable binding code \verb | <var:V1> := <var:V1> * <nat:1> ; | . This statement advances the precondition $ \{ <var:p> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ as $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . This is shown with the assignment rule of typical Hoare logic . Focusing on the subsequent line of code seen in the set of commands , the variable update command \verb | <var:V2> := <var:V2> * <nat:3> ; | . This line moves the precondition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ to $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . This is guaranteed using the assignment rule from Hoare techniques . Further , we see the variable update line \verb | <var:V3> := <var:V3> * <nat:2> ; | . This redefines the condition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V3> = <nat:2> \times <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . Advancing , the variable assignmet command \verb | <var:L> := <var:V3> | . This code forwards the condition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V3> = <nat:2> \times <var:E> ^ <nat:3> \land <var:V0> = <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> \} $ . Taking another step toward the subsequent statement in the list of commands , we see the assignment code defining $ <var:L> + <var:V2$ to $ <var:L>$ . This command transfers $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> \} $ . This is deduced by the assignment rule defined in Hoare techniques . Moving forward to the next step , we have the environment update statement assigning $ <var:L> + <var:V1$ toward $ <var:L>$ . This moves the condition $ \{ <var:p> = <var:E> \land <var:V1> = <nat:1> \times <var:E> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:p> = <var:E> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> \} $ . Honing in on the following line of code seen in our list of instructions , we see the variable binding command \verb | <var:L> := <var:L> + <var:V0> | . This advances $ \{ <var:p> = <var:E> \land <var:V0> = <nat:2> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> \} $ into $ \{ <var:p> = <var:E> \land <var:L> = <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:V1> := <var:p> ; <var:V2> := <var:V1> * <var:p> ; <var:V3> := <var:V2> * <var:p> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:3> ; <var:V3> := <var:V3> * <nat:2> ; <var:L> := <var:V3> <var:L> := <var:L> + <var:V2> <var:L> := <var:L> + <var:V1> <var:L> := <var:L> + <var:V0> {{ <var:L> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:V3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 