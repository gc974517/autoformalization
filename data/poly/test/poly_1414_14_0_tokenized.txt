\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:6> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:g> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:g> ; <var:F2> := <var:F2> * <var:g> ; <var:F3> := <nat:4> ; <var:F3> := <var:F3> * <var:g> ; <var:F3> := <var:F3> * <var:g> ; <var:F3> := <var:F3> * <var:g> ; <var:w> := <var:F3> ; <var:w> := <var:w> + <var:F2> ; <var:w> := <var:w> + <var:F1> ; <var:w> := <var:w> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:g> = <var:I> $ ( for any positive integers $ <var:I> $ ) ahead of interpreting this list of commands , it must be that $ <var:w> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:6> $ once code is done executing . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be done using usual Hoare reasoning . After , we have the environment update line \verb | <var:F0> := <nat:6> ; | . This line moves the precondition $ \{ <var:g> = <var:I> \} $ into $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \} $ . Jumping to the following command found in our series of commands , the variable binding line \verb | <var:F1> := <nat:9> ; | . This transfers the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \} $ as the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \} $ . This is ensured by the assignment inference rule defined in usual Hoare techniques . Going forward , we have the environment update code \verb | <var:F1> := <var:F1> * <var:g> ; | . This takes the precondition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \} $ toward the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \} $ . This is ensured by the assignment inference rule found in standard Hoare reasoning . Moving on , we have the assignment statement \verb | <var:F2> := <nat:1> ; | . This redefines $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \} $ as the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \} $ . This is ensured using the assignment scheme found in Hoare reasoning . Shifting focus toward the proceeding step contained in the series of commands , we see the variable binding line \verb | <var:F2> := <var:F2> * <var:g> ; | . This code moves $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \} $ toward the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> \} $ . This is rigorously given through the assignment law of standard Hoare reasoning . Stepping forward , the command binding $ <var:F2> * <var:g> $ as $ <var:F2>$ . This takes the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> \} $ as $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \} $ . Advancing to the next command seen in our set of commands , the command \verb | <var:F3> := <nat:4> ; | . This command redefines $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \} $ . Paying attention to the subsequent statement seen in the segment of code , we have the assignment statement \verb | <var:F3> := <var:F3> * <var:g> ; | . This transfers the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \} $ to $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> \} $ . Advancing to the subsequent step in the series of commands , we have the binding code assigning $ <var:F3> * <var:g> $ toward $ <var:F3>$ . This statement forwards the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> \} $ to $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> ^ <nat:2> \} $ . Immediately after , we have the assignment statement \verb | <var:F3> := <var:F3> * <var:g> ; | . This moves $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> ^ <nat:3> \} $ . Observing the proceeding line in the series of instructions , we see the binding statement assigning $ <var:F3> $ to $ <var:w>$ . This forwards the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:I> ^ <nat:3> \} $ as the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> \} $ . This is given with the assignment law in Hoare reasoning . Stepping forward , the line \verb | <var:w> := <var:w> + <var:F2> ; | . This takes the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> \} $ toward $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> \} $ . Observing the following command found in the program , we have the line letting $ <var:w> + <var:F1> $ to $ <var:w>$ . This command advances the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:F1> = <nat:9> \cdot <var:I> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> \} $ toward the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ . Going forward , we see the line \verb | <var:w> := <var:w> + <var:F0> | . This moves the condition $ \{ <var:g> = <var:I> \land <var:F0> = <nat:6> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> \} $ to $ \{ <var:g> = <var:I> \land <var:w> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:6> \} $ . This is shown with the assignment rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F0> := <nat:6> ; <var:F1> := <nat:9> ; <var:F1> := <var:F1> * <var:g> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:g> ; <var:F2> := <var:F2> * <var:g> ; <var:F3> := <nat:4> ; <var:F3> := <var:F3> * <var:g> ; <var:F3> := <var:F3> * <var:g> ; <var:F3> := <var:F3> * <var:g> ; <var:w> := <var:F3> ; <var:w> := <var:w> + <var:F2> ; <var:w> := <var:w> + <var:F1> ; <var:w> := <var:w> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:g> = <var:I> }} <def:poly> {{ <var:w> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:F3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:w> = <nat:4> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:9> * <var:I> /\ <var:w> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:F0> = <nat:6> /\ <var:w> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:w> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 