\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:u0> := <nat:4> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:p> ; <var:u2> := <var:u2> * <var:p> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:r> := <var:u3> ; <var:r> := <var:r> + <var:u2> ; <var:r> := <var:r> + <var:u0> \end{verbatim} Given --- given positive numbers $ <var:o> $ --- that $ <var:p> = <var:o> $ prior to running the code segment , it must be that we see $ <var:r> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:p> = <var:o> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \} \\ <var:u2> := <nat:4> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \} \\ <var:u2> := <var:u2> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> \} \\ <var:u2> := <var:u2> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:u3> := <nat:7> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \land <var:u3> = <nat:7> \} \\ <var:u3> := <var:u3> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \land <var:u3> = <nat:7> \cdot <var:o> \} \\ <var:u3> := <var:u3> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \land <var:u3> = <nat:7> \cdot <var:o> ^ <nat:2> \} \\ <var:u3> := <var:u3> * <var:p> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \land <var:u3> = <nat:7> \cdot <var:o> ^ <nat:3> \} \\ <var:r> := <var:u3> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:u2> = <nat:4> \cdot <var:o> ^ <nat:2> \land <var:r> = <nat:7> \cdot <var:o> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:u2> ; \\ \{ <var:p> = <var:o> \land <var:u0> = <nat:4> \land <var:r> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:u0> \\ \{ <var:p> = <var:o> \land <var:r> = <nat:7> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \} \end{eqnarray} Therefore , the set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:p> = <var:o> }} <var:u0> := <nat:4> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:p> ; <var:u2> := <var:u2> * <var:p> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:u3> := <var:u3> * <var:p> ; <var:r> := <var:u3> ; <var:r> := <var:r> + <var:u2> ; <var:r> := <var:r> + <var:u0> {{ <var:r> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:u3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> /\ <var:r> = <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:u0> = <nat:4> /\ <var:r> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:r> = <nat:7> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 