\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:C> ; <var:k> := <var:I1> ; <var:k> := <var:k> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:C> = <var:P> $ ahead of running this set of commands , it follows that we have $ <var:k> = <nat:9> \cdot <var:P> + <nat:3> $ once code is done . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:C> = <var:P> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:C> = <var:P> \land <var:I0> = <nat:3> \} \\ <var:I1> := <nat:9> ; \\ \{ <var:C> = <var:P> \land <var:I0> = <nat:3> \land <var:I1> = <nat:9> \} \\ <var:I1> := <var:I1> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:I0> = <nat:3> \land <var:I1> = <nat:9> \times <var:P> \} \\ <var:k> := <var:I1> ; \\ \{ <var:C> = <var:P> \land <var:I0> = <nat:3> \land <var:k> = <nat:9> \times <var:P> \} \\ <var:k> := <var:k> + <var:I0> \\ \{ <var:C> = <var:P> \land <var:k> = <nat:9> \times <var:P> + <nat:3> \} \end{eqnarray} Hence , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:3> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:C> ; <var:k> := <var:I1> ; <var:k> := <var:k> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <def:poly> {{ <var:k> = <nat:9> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:I0> = <nat:3> /\ <var:k> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:k> = <nat:9> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 