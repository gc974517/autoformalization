\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:X1> := <var:i> ; <var:X2> := <var:X1> * <var:i> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:7> ; <var:L> := <var:X2> <var:L> := <var:L> + <var:X1> <var:L> := <var:L> + <var:X0> \end{verbatim} Assuming $ <var:i> = <var:r> $ given all natural numbers $ <var:r> $ prior to the execution of this code it follows that $ <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:7> $ after series of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is clear with this decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:X1> := <var:i> ; \\ \{ <var:i> = <var:r> \land <var:X1> = <var:r> \} \\ <var:X2> := <var:X1> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:X1> = <var:r> \land <var:X2> = <var:r> ^ <nat:2> \} \\ <var:X0> := <nat:7> ; \\ \{ <var:i> = <var:r> \land <var:X1> = <var:r> \land <var:X2> = <var:r> ^ <nat:2> \land <var:X0> = <nat:7> \} \\ <var:X1> := <var:X1> * <nat:6> ; \\ \{ <var:i> = <var:r> \land <var:X1> = <nat:6> * <var:r> \land <var:X2> = <var:r> ^ <nat:2> \land <var:X0> = <nat:7> \} \\ <var:X2> := <var:X2> * <nat:7> ; \\ \{ <var:i> = <var:r> \land <var:X1> = <nat:6> * <var:r> \land <var:X2> = <nat:7> * <var:r> ^ <nat:2> \land <var:X0> = <nat:7> \} \\ <var:L> := <var:X2> \\ \{ <var:i> = <var:r> \land <var:X1> = <nat:6> * <var:r> \land <var:X0> = <nat:7> \land <var:L> = <nat:7> * <var:r> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:X1> \\ \{ <var:i> = <var:r> \land <var:X0> = <nat:7> \land <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> \} \\ <var:L> := <var:L> + <var:X0> \\ \{ <var:i> = <var:r> \land <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <var:X1> := <var:i> ; <var:X2> := <var:X1> * <var:i> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:6> ; <var:X2> := <var:X2> * <nat:7> ; <var:L> := <var:X2> <var:L> := <var:L> + <var:X1> <var:L> := <var:L> + <var:X0> {{ <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <var:r> /\ <var:X2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <var:r> /\ <var:X2> = <var:r> ^ <nat:2> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <nat:6> * <var:r> /\ <var:X2> = <var:r> ^ <nat:2> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <nat:6> * <var:r> /\ <var:X2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X1> = <nat:6> * <var:r> /\ <var:X0> = <nat:7> /\ <var:L> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:X0> = <nat:7> /\ <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:L> = <nat:7> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 