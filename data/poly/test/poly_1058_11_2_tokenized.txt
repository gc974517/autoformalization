\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Allowing that we have $ <var:b> = <var:V> $ prior to running our set of commands it follows that we have $ <var:U> = <nat:4> \times <var:V> ^ <nat:10> + <nat:4> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} The argument for the series of commands can be seen using Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:b> = <var:V> \} \, <var:U> := <nat:4> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \, <var:U> := <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> + \} \end{eqnarray} This is rigorously given using the variable assignmet rule obtained from usual Hoare reasoning . Keeping momentum , \begin{eqnarray} \{ <var:b> = <var:V> \} \, <var:U> := <nat:4> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \, <var:U> := <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> + \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> + \} \, <var:U> := <nat:4> + <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> \} \, <var:U> := <nat:4> + <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:4> \} \end{eqnarray} This is shown to be logically sound with the environment update rule obtained from usual Hoare reasoning . Taking another step toward the upcoming lines of codefound in our segment of code , we have \begin{eqnarray} \{ <var:b> = <var:V> \} \, <var:U> := <nat:4> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> \} \, <var:U> := <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> + \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> + \} \, <var:U> := <nat:4> + <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> \} \, <var:U> := <nat:4> + <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:4> \} \\ \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:4> \} \, <var:U> := <nat:1> + <var:U> * <var:b> \, \{ <var:b> = <var:V> \land <var:U> = <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> \} \end{eqnarray} This is shown to be logically sound using the rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:4> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <nat:1> + <var:U> * <var:b> ; <var:U> := <nat:4> + <var:U> * <var:b> ; <var:U> := <var:U> * <var:b> ; <var:U> := <nat:3> + <var:U> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <def:poly> {{ <var:U> = <nat:4> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:U> = <nat:4> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 