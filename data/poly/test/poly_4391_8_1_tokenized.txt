\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:f> ; <var:Q2> := <var:Q1> * <var:f> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:K> := <var:Q2> <var:K> := <var:K> + <var:Q1> <var:K> := <var:K> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:f> = <var:V> $ , for all positive integers $ <var:V> $ , before running our list of commands it holds that we have $ <var:K> = <nat:6> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our code can be accomplished by the following decorated list of commands . \begin{eqnarray} \{ <var:f> = <var:V> \} \\ <var:Q1> := <var:f> ; \\ \{ <var:f> = <var:V> \land <var:Q1> = <var:V> \} \\ <var:Q2> := <var:Q1> * <var:f> ; \\ \{ <var:f> = <var:V> \land <var:Q1> = <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:f> = <var:V> \land <var:Q1> = <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:2> ; \\ \{ <var:f> = <var:V> \land <var:Q1> = <nat:2> \cdot <var:V> \land <var:Q2> = <var:V> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <nat:6> ; \\ \{ <var:f> = <var:V> \land <var:Q1> = <nat:2> \cdot <var:V> \land <var:Q2> = <nat:6> \cdot <var:V> ^ <nat:2> \land <var:Q0> = <nat:1> \} \\ <var:K> := <var:Q2> \\ \{ <var:f> = <var:V> \land <var:Q1> = <nat:2> \cdot <var:V> \land <var:Q0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:V> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:Q1> \\ \{ <var:f> = <var:V> \land <var:Q0> = <nat:1> \land <var:K> = <nat:6> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> \} \\ <var:K> := <var:K> + <var:Q0> \\ \{ <var:f> = <var:V> \land <var:K> = <nat:6> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q1> := <var:f> ; <var:Q2> := <var:Q1> * <var:f> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:K> := <var:Q2> <var:K> := <var:K> + <var:Q1> <var:K> := <var:K> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:f> = <var:V> }} <def:poly> {{ <var:K> = <nat:6> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <nat:2> * <var:V> /\ <var:Q2> = <var:V> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <nat:2> * <var:V> /\ <var:Q2> = <nat:6> * <var:V> ^ <nat:2> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q1> = <nat:2> * <var:V> /\ <var:Q0> = <nat:1> /\ <var:K> = <nat:6> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:Q0> = <nat:1> /\ <var:K> = <nat:6> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:K> = <nat:6> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 