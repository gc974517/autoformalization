\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:7> ; <var:e> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assume , with some positive integers $ <var:p> $ , $ <var:d> = <var:p> $ before running the code segment , then $ <var:e> = <nat:7> $ when series of instructions is done executing . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:p> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:d> = <var:p> \land <var:M0> = <nat:7> \} \\ <var:e> := <var:M0> \\ \{ <var:d> = <var:p> \land <var:e> = <nat:7> \} \end{eqnarray} Considering the above , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:7> ; <var:e> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:d> = <var:p> }} <def:poly> {{ <var:e> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 