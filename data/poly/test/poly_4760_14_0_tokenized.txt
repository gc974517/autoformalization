\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:4> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:H> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:H> ; <var:f2> := <var:f2> * <var:H> ; <var:f3> := <nat:2> ; <var:f3> := <var:f3> * <var:H> ; <var:f3> := <var:f3> * <var:H> ; <var:f3> := <var:f3> * <var:H> ; <var:I> := <var:f3> ; <var:I> := <var:I> + <var:f2> ; <var:I> := <var:I> + <var:f1> ; <var:I> := <var:I> + <var:f0> \end{verbatim} Given that we have $ <var:H> = <var:o> $ before executing our segment of code then we have $ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:H> = <var:o> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \} \\ <var:f1> := <nat:3> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \} \\ <var:f1> := <var:f1> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \} \\ <var:f2> := <nat:6> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \} \\ <var:f2> := <var:f2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> \} \\ <var:f2> := <var:f2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \} \\ <var:f3> := <nat:2> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:f3> = <nat:2> \} \end{eqnarray} Continuing executing our series of instructions yields : \begin{eqnarray} <var:f3> := <var:f3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:o> \} \\ <var:f3> := <var:f3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:o> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:o> ^ <nat:3> \} \\ <var:I> := <var:f3> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:f2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:I> = <nat:2> \cdot <var:o> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:f2> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:f1> = <nat:3> \cdot <var:o> \land <var:I> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:f1> ; \\ \{ <var:H> = <var:o> \land <var:f0> = <nat:4> \land <var:I> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> \} \\ <var:I> := <var:I> + <var:f0> \\ \{ <var:H> = <var:o> \land <var:I> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:4> \} \end{eqnarray} As a consequence , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <var:f0> := <nat:4> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:H> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:H> ; <var:f2> := <var:f2> * <var:H> ; <var:f3> := <nat:2> ; <var:f3> := <var:f3> * <var:H> ; <var:f3> := <var:f3> * <var:H> ; <var:f3> := <var:f3> * <var:H> ; <var:I> := <var:f3> ; <var:I> := <var:I> + <var:f2> ; <var:I> := <var:I> + <var:f1> ; <var:I> := <var:I> + <var:f0> {{ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:f3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:f2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:3> * <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:f0> = <nat:4> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 