\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:7> ; <var:Q1> := <nat:6> ; <var:Q1> := <var:Q1> * <var:W> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:W> ; <var:Q2> := <var:Q2> * <var:W> ; <var:I> := <var:Q2> ; <var:I> := <var:I> + <var:Q1> ; <var:I> := <var:I> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:W> = <var:U> $ prior to running the series of commands , then we see $ <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> $ when set of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:U> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <nat:6> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> \} \\ <var:Q1> := <var:Q1> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> * <var:U> \} \\ <var:Q2> := <nat:1> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> * <var:U> \land <var:Q2> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> * <var:U> \land <var:Q2> = <nat:1> * <var:U> \} \\ <var:Q2> := <var:Q2> * <var:W> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> * <var:U> \land <var:Q2> = <nat:1> * <var:U> ^ <nat:2> \} \\ <var:I> := <var:Q2> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:6> * <var:U> \land <var:I> = <nat:1> * <var:U> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:Q1> ; \\ \{ <var:W> = <var:U> \land <var:Q0> = <nat:7> \land <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> \} \\ <var:I> := <var:I> + <var:Q0> \\ \{ <var:W> = <var:U> \land <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q0> := <nat:7> ; <var:Q1> := <nat:6> ; <var:Q1> := <var:Q1> * <var:W> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:W> ; <var:Q2> := <var:Q2> * <var:W> ; <var:I> := <var:Q2> ; <var:I> := <var:I> + <var:Q1> ; <var:I> := <var:I> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:W> = <var:U> }} <def:poly> {{ <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> * <var:U> /\ <var:Q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> * <var:U> /\ <var:Q2> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> * <var:U> /\ <var:Q2> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:6> * <var:U> /\ <var:I> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:Q0> = <nat:7> /\ <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:I> = <nat:1> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 