\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:b0> := <nat:9> ; <var:F> := <var:b0> \end{verbatim} Allowing that we have $ <var:a> = <var:J> $ before executing our program then $ <var:F> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:J> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:a> = <var:J> \land <var:b0> = <nat:9> \} \\ <var:F> := <var:b0> \\ \{ <var:a> = <var:J> \land <var:F> = <nat:9> \} \end{eqnarray} Utilizing standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <var:b0> := <nat:9> ; <var:F> := <var:b0> {{ <var:F> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:F> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 