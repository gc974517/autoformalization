\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D> := <nat:3> ; <var:D> := <nat:3> + <var:D> * <var:J> ; <var:D> := <var:D> * <var:J> ; <var:D> := <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:3> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Given --- for whole numbers $ <var:c> $ --- it to hold that $ <var:J> = <var:c> $ before interpreting the segment of code , it must be that $ <var:D> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> $ when set of commands terminates . \end{theorem} \begin{proof} The method of proof for this series of commands is evident by Hoare logic . Moving forward to the following bit of code found in the code segment , we have the variable update statement \verb | <var:D> := <nat:3> ; | . This takes $ \{ <var:J> = <var:c> \} $ into the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> \} $ . This is rigorously given through the assignment scheme from usual Hoare techniques . Focusing on the upcoming statement found in our code segment , the binding statement \verb | <var:D> := <nat:3> + <var:D> * <var:J> ; | . This statement forwards $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> \} $ to the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> + <nat:3> \} $ . Advancing , the assignment line \verb | <var:D> := <var:D> * <var:J> ; | . This takes the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> + <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + \} $ . This is shown using the assignment inference rule given by Hoare techniques . Taking a look at the proceeding line in the set of instructions , we see the variable binding code yielding $ <var:D> * <var:J> $ into $ <var:D>$ . This advances the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + \} $ into $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + \} $ . This is guaranteed through the assignment scheme in usual Hoare reasoning . Moving on to the next step , we see the variable binding command giving $ <nat:1> + <var:D> * <var:J> $ as $ <var:D>$ . This code takes the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> \} $ . This is guaranteed through the assignment inference rule in Hoare logic . Honing in on the upcoming line of code found in our code , the code yielding $ <nat:3> + <var:D> * <var:J> $ into $ <var:D>$ . This line transfers the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> \} $ as $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:3> \} $ . Paying attention to the proceeding command seen in our program , we have the statement \verb | <var:D> := <nat:1> + <var:D> * <var:J> ; | . This line redefines the precondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:3> \} $ into $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> \} $ . Shifting focus toward the subsequent statement contained in our code segment , the variable binding statement defining $ <nat:4> + <var:D> * <var:J> $ to $ <var:D>$ . This takes the precondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> \} $ to $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ . This is sound through the assignment rule found in typical Hoare reasoning . Immediately following , the code yielding $ <nat:1> + <var:D> * <var:J> $ as $ <var:D>$ . This forwards $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ into the postcondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> \} $ . This is shown to be logically sound using the assignment scheme obtained from standard Hoare reasoning . Looking at the following line of code in the list of commands , we see the variable update code defining $ <nat:1> + <var:D> * <var:J> $ toward $ <var:D>$ . This takes the precondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> \} $ into the postcondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> \} $ . This is given with the assignment rule found in usual Hoare logic . Paying attention to the proceeding piece of code seen in the code , the statement \verb | <var:D> := <nat:4> + <var:D> * <var:J> ; | . This line redefines the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> \} $ into the condition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ . Considering the subsequent step found in the segment of code , we see the variable update statement \verb | <var:D> := <nat:4> + <var:D> * <var:J> | . This moves the precondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ into the postcondition $ \{ <var:J> = <var:c> \land <var:D> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:3> ; <var:D> := <nat:3> + <var:D> * <var:J> ; <var:D> := <var:D> * <var:J> ; <var:D> := <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:3> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:1> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> ; <var:D> := <nat:4> + <var:D> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:J> = <var:c> }} <def:poly> {{ <var:D> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:1> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:1> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:D> = <nat:3> * <var:c> ^ <nat:11> + <nat:3> * <var:c> ^ <nat:10> + <nat:1> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 