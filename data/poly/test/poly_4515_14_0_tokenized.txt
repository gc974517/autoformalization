\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:u> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:u> ; <var:O2> := <var:O2> * <var:u> ; <var:O3> := <nat:3> ; <var:O3> := <var:O3> * <var:u> ; <var:O3> := <var:O3> * <var:u> ; <var:O3> := <var:O3> * <var:u> ; <var:Q> := <var:O3> ; <var:Q> := <var:Q> + <var:O2> ; <var:Q> := <var:Q> + <var:O1> ; <var:Q> := <var:Q> + <var:O0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:a> $ ahead of interpreting the set of commands , it must be that we see $ <var:Q> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code is clear with standard Hoare techniques . Moving forward to the next step , we have \verb | { <var:u> = <var:a> } <var:O0> := <nat:8> { <var:u> = <var:a> \land <var:O0> = <nat:8> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> } <var:O1> := <nat:2> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> } <var:O1> := <var:O1> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> } <var:O2> := <nat:2> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> } <var:O2> := <var:O2> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> } <var:O2> := <var:O2> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> } <var:O3> := <nat:3> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> } <var:O3> := <var:O3> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> } <var:O3> := <var:O3> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> ^ <nat:2> } | , \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> ^ <nat:2> } <var:O3> := <var:O3> * <var:u> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> ^ <nat:3> } | and \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:O3> = <nat:3> \cdot <var:a> ^ <nat:3> } <var:Q> := <var:O3> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:a> \land <var:O2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:Q> = <nat:3> \cdot <var:a> ^ <nat:3> } | . This is known to be sound with the assignment scheme defined in typical Hoare techniques . Shifting focus toward the proceeding steps in our list of commands , we see \verb | { <var:u> = <var:a> } <var:O0> := <nat:8> { <var:u> = <var:a> \land <var:O0> = <nat:8> } | and \verb | { <var:u> = <var:a> \land <var:O0> = <nat:8> } <var:O1> := <nat:2> { <var:u> = <var:a> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> } | . Advancing to the subsequent command in the list of commands , we see \verb | { <var:u> = <var:a> } <var:O0> := <nat:8> { <var:u> = <var:a> \land <var:O0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <var:O0> := <nat:8> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:u> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:u> ; <var:O2> := <var:O2> * <var:u> ; <var:O3> := <nat:3> ; <var:O3> := <var:O3> * <var:u> ; <var:O3> := <var:O3> * <var:u> ; <var:O3> := <var:O3> * <var:u> ; <var:Q> := <var:O3> ; <var:Q> := <var:Q> + <var:O2> ; <var:Q> := <var:Q> + <var:O1> ; <var:Q> := <var:Q> + <var:O0> {{ <var:Q> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:O3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:O2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:Q> = <nat:3> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:a> /\ <var:Q> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:O0> = <nat:8> /\ <var:Q> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:Q> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 