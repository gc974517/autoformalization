\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:N> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:N> ; <var:F2> := <var:F2> * <var:N> ; <var:R> := <var:F2> ; <var:R> := <var:R> + <var:F1> ; <var:R> := <var:R> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Assuming it to hold that $ <var:N> = <var:b> $ , given all $ <var:b> \in \mathbb{N} $ , before executing this set of commands it holds that $ <var:R> = <nat:9> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:4> $ when code segment is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:b> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:1> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \} \\ <var:F1> := <var:F1> * <var:N> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \times <var:b> \} \\ <var:F2> := <nat:9> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \times <var:b> \land <var:F2> = <nat:9> \} \\ <var:F2> := <var:F2> * <var:N> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \times <var:b> \land <var:F2> = <nat:9> \times <var:b> \} \\ <var:F2> := <var:F2> * <var:N> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \times <var:b> \land <var:F2> = <nat:9> \times <var:b> ^ <nat:2> \} \\ <var:R> := <var:F2> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:F1> = <nat:1> \times <var:b> \land <var:R> = <nat:9> \times <var:b> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:F1> ; \\ \{ <var:N> = <var:b> \land <var:F0> = <nat:4> \land <var:R> = <nat:9> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> \} \\ <var:R> := <var:R> + <var:F0> \\ \{ <var:N> = <var:b> \land <var:R> = <nat:9> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:N> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:N> ; <var:F2> := <var:F2> * <var:N> ; <var:R> := <var:F2> ; <var:R> := <var:R> + <var:F1> ; <var:R> := <var:R> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:N> = <var:b> }} <def:poly> {{ <var:R> = <nat:9> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> * <var:b> /\ <var:F2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> * <var:b> /\ <var:F2> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> * <var:b> /\ <var:F2> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:1> * <var:b> /\ <var:R> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:F0> = <nat:4> /\ <var:R> = <nat:9> * <var:b> ^ <nat:2> + <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R> = <nat:9> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 