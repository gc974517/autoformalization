\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:v> ; <var:T2> := <var:T1> * <var:v> ; <var:T3> := <var:T2> * <var:v> ; <var:T4> := <var:T3> * <var:v> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:5> ; <var:T4> := <var:T4> * <nat:2> ; <var:q> := <var:T4> <var:q> := <var:q> + <var:T3> <var:q> := <var:q> + <var:T2> <var:q> := <var:q> + <var:T1> <var:q> := <var:q> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:v> = <var:P> $ prior to running the series of commands it holds that we see $ <var:q> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:5> \cdot <var:P> ^ <nat:3> + <nat:6> \cdot <var:P> ^ <nat:2> + <nat:7> \cdot <var:P> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:P> \} \\ <var:T1> := <var:v> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <var:P> \} \\ <var:T2> := <var:T1> * <var:v> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <var:P> \land <var:T2> = <var:P> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:v> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <var:P> \land <var:T2> = <var:P> ^ <nat:2> \land <var:T3> = <var:P> ^ <nat:3> \} \\ <var:T4> := <var:T3> * <var:v> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <var:P> \land <var:T2> = <var:P> ^ <nat:2> \land <var:T3> = <var:P> ^ <nat:3> \land <var:T4> = <var:P> ^ <nat:4> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <var:P> \land <var:T2> = <var:P> ^ <nat:2> \land <var:T3> = <var:P> ^ <nat:3> \land <var:T4> = <var:P> ^ <nat:4> \land <var:T0> = <nat:8> \} \\ <var:T1> := <var:T1> * <nat:7> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <var:P> ^ <nat:2> \land <var:T3> = <var:P> ^ <nat:3> \land <var:T4> = <var:P> ^ <nat:4> \land <var:T0> = <nat:8> \} \\ <var:T2> := <var:T2> * <nat:6> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <nat:6> \times <var:P> ^ <nat:2> \land <var:T3> = <var:P> ^ <nat:3> \land <var:T4> = <var:P> ^ <nat:4> \land <var:T0> = <nat:8> \} \\ <var:T3> := <var:T3> * <nat:5> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <nat:6> \times <var:P> ^ <nat:2> \land <var:T3> = <nat:5> \times <var:P> ^ <nat:3> \land <var:T4> = <var:P> ^ <nat:4> \land <var:T0> = <nat:8> \} \\ <var:T4> := <var:T4> * <nat:2> ; \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <nat:6> \times <var:P> ^ <nat:2> \land <var:T3> = <nat:5> \times <var:P> ^ <nat:3> \land <var:T4> = <nat:2> \times <var:P> ^ <nat:4> \land <var:T0> = <nat:8> \} \\ <var:q> := <var:T4> \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <nat:6> \times <var:P> ^ <nat:2> \land <var:T3> = <nat:5> \times <var:P> ^ <nat:3> \land <var:T0> = <nat:8> \land <var:q> = <nat:2> \times <var:P> ^ <nat:4> \} \\ <var:q> := <var:q> + <var:T3> \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T2> = <nat:6> \times <var:P> ^ <nat:2> \land <var:T0> = <nat:8> \land <var:q> = <nat:2> \times <var:P> ^ <nat:4> + <nat:5> \times <var:P> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:T2> \\ \{ <var:v> = <var:P> \land <var:T1> = <nat:7> \times <var:P> \land <var:T0> = <nat:8> \land <var:q> = <nat:2> \times <var:P> ^ <nat:4> + <nat:5> \times <var:P> ^ <nat:3> + <nat:6> \times <var:P> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:T1> \\ \{ <var:v> = <var:P> \land <var:T0> = <nat:8> \land <var:q> = <nat:2> \times <var:P> ^ <nat:4> + <nat:5> \times <var:P> ^ <nat:3> + <nat:6> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> \} \\ <var:q> := <var:q> + <var:T0> \\ \{ <var:v> = <var:P> \land <var:q> = <nat:2> \times <var:P> ^ <nat:4> + <nat:5> \times <var:P> ^ <nat:3> + <nat:6> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> + <nat:8> \} \end{eqnarray} Applying usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Definition <def:poly> := <var:T1> := <var:v> ; <var:T2> := <var:T1> * <var:v> ; <var:T3> := <var:T2> * <var:v> ; <var:T4> := <var:T3> * <var:v> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:6> ; <var:T3> := <var:T3> * <nat:5> ; <var:T4> := <var:T4> * <nat:2> ; <var:q> := <var:T4> <var:q> := <var:q> + <var:T3> <var:q> := <var:q> + <var:T2> <var:q> := <var:q> + <var:T1> <var:q> := <var:q> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:v> = <var:P> }} <def:poly> {{ <var:q> = <nat:2> * <var:P> ^ <nat:4> + <nat:5> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <var:P> /\ <var:T2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <var:P> /\ <var:T2> = <var:P> ^ <nat:2> /\ <var:T3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <var:P> /\ <var:T2> = <var:P> ^ <nat:2> /\ <var:T3> = <var:P> ^ <nat:3> /\ <var:T4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <var:P> /\ <var:T2> = <var:P> ^ <nat:2> /\ <var:T3> = <var:P> ^ <nat:3> /\ <var:T4> = <var:P> ^ <nat:4> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <var:P> ^ <nat:2> /\ <var:T3> = <var:P> ^ <nat:3> /\ <var:T4> = <var:P> ^ <nat:4> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:T3> = <var:P> ^ <nat:3> /\ <var:T4> = <var:P> ^ <nat:4> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:T3> = <nat:5> * <var:P> ^ <nat:3> /\ <var:T4> = <var:P> ^ <nat:4> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:T3> = <nat:5> * <var:P> ^ <nat:3> /\ <var:T4> = <nat:2> * <var:P> ^ <nat:4> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:T3> = <nat:5> * <var:P> ^ <nat:3> /\ <var:T0> = <nat:8> /\ <var:q> = <nat:2> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:T0> = <nat:8> /\ <var:q> = <nat:2> * <var:P> ^ <nat:4> + <nat:5> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T0> = <nat:8> /\ <var:q> = <nat:2> * <var:P> ^ <nat:4> + <nat:5> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:T0> = <nat:8> /\ <var:q> = <nat:2> * <var:P> ^ <nat:4> + <nat:5> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:q> = <nat:2> * <var:P> ^ <nat:4> + <nat:5> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 