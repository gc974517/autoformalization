\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:U> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:U> ; <var:M2> := <var:M2> * <var:U> ; <var:M3> := <nat:6> ; <var:M3> := <var:M3> * <var:U> ; <var:M3> := <var:M3> * <var:U> ; <var:M3> := <var:M3> * <var:U> ; <var:i> := <var:M3> ; <var:i> := <var:i> + <var:M2> ; <var:i> := <var:i> + <var:M1> ; <var:i> := <var:i> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow --- letting positive coefficients $ <var:N> $ --- $ <var:U> = <var:N> $ prior to the evaluation of the code , it must be that we see $ <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> $ when series of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be accomplished through Hoare techniques . Keeping momentum , the variable assignmet code \verb | <var:M0> := <nat:4> ; | . This code transfers the condition $ \{ <var:U> = <var:N> \} $ as the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \} $ . Now , we see the variable binding line binding $ <nat:3> $ as $ <var:M1>$ . This advances $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \} $ toward the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \} $ . This is given with the assignment law in standard Hoare logic . Advancing to the following command seen in our series of instructions , the environment update code binding $ <var:M1> * <var:U> $ to $ <var:M1>$ . This redefines $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \} $ toward $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \} $ . Jumping to the following statement contained in the series of commands , the variable binding line giving $ <nat:4> $ to $ <var:M2>$ . This advances the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \} $ to $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \} $ . Advancing to the upcoming step contained in our set of commands , we see the environment update command \verb | <var:M2> := <var:M2> * <var:U> ; | . This redefines the precondition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \} $ toward the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> \} $ . This is rigorously given using the assignment rule defined in usual Hoare logic . Shifting focus toward the subsequent bit of code contained in the code , the code assigning $ <var:M2> * <var:U> $ toward $ <var:M2>$ . This code takes $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> \} $ toward the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \} $ . This is shown using the assignment rule of Hoare reasoning . Advancing to the upcoming step contained in the series of instructions , we see the variable assignmet line binding $ <nat:6> $ to $ <var:M3>$ . This advances $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \} $ into the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \} $ . Taking another step toward the upcoming step in our set of commands , the code \verb | <var:M3> := <var:M3> * <var:U> ; | . This statement forwards the precondition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \} $ to the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> \} $ . Advancing to the next step , we have the variable binding command \verb | <var:M3> := <var:M3> * <var:U> ; | . This statement transfers the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> \} $ toward $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> ^ <nat:2> \} $ . Advancing to the upcoming line found in the set of commands , we have the variable assignmet command \verb | <var:M3> := <var:M3> * <var:U> ; | . This code transfers the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> ^ <nat:3> \} $ . This is sound using the assignment law found in typical Hoare techniques . Further , the assignment command binding $ <var:M3> $ toward $ <var:i>$ . This line transfers $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:M3> = <nat:6> \times <var:N> ^ <nat:3> \} $ as $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> \} $ . This is rigorously given by the assignment scheme from Hoare techniques . Moving onward , we see the variable update line assigning $ <var:i> + <var:M2> $ to $ <var:i>$ . This line forwards $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:M2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> \} $ into the condition $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} $ . Following , we have the binding statement assigning $ <var:i> + <var:M1> $ to $ <var:i>$ . This transfers $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:M1> = <nat:3> \times <var:N> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} $ toward $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> \} $ . This is sound using the assignment law from usual Hoare techniques . Moving onward , we see the binding statement \verb | <var:i> := <var:i> + <var:M0> | . This line takes $ \{ <var:U> = <var:N> \land <var:M0> = <nat:4> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> \} $ as the postcondition $ \{ <var:U> = <var:N> \land <var:i> = <nat:6> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:U> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:U> ; <var:M2> := <var:M2> * <var:U> ; <var:M3> := <nat:6> ; <var:M3> := <var:M3> * <var:U> ; <var:M3> := <var:M3> * <var:U> ; <var:M3> := <var:M3> * <var:U> ; <var:i> := <var:M3> ; <var:i> := <var:i> + <var:M2> ; <var:i> := <var:i> + <var:M1> ; <var:i> := <var:i> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:U> = <var:N> }} <def:poly> {{ <var:i> = <nat:6> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:M3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:M2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:i> = <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:3> * <var:N> /\ <var:i> = <nat:6> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:M0> = <nat:4> /\ <var:i> = <nat:6> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:i> = <nat:6> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 