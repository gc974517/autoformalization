\begin{document} \begin{theorem} Take a set of commands as follows \begin{verbatim} <var:t> := <nat:4> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:4> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:4> + <var:t> * <var:I> \end{verbatim} Given letting positive integer coefficients $ <var:y> $ that $ <var:I> = <var:y> $ before executing our series of commands then we see $ <var:t> = <nat:4> * <var:y> ^ <nat:12> + <nat:3> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> $ . \end{theorem} \begin{proof} We can see that the below decorated series of commands . \begin{eqnarray} \{ <var:I> = <var:y> \} \\ <var:t> := <nat:4> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> \} \\ <var:t> := <nat:3> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> + <nat:3> \} \\ <var:t> := <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + \} \\ <var:t> := <nat:3> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> \} \\ <var:t> := <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + \} \\ <var:t> := <nat:2> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> \} \\ <var:t> := <nat:1> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:1> \} \\ <var:t> := <nat:2> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> \} \\ <var:t> := <nat:3> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \\ <var:t> := <nat:1> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> \} \\ <var:t> := <nat:1> + <var:t> * <var:I> ; \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:I> \\ \{ <var:I> = <var:y> \land <var:t> = <nat:4> * <var:y> ^ <nat:12> + <nat:3> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> \} \end{eqnarray} Using Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:I> = <var:y> }} <var:t> := <nat:4> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <nat:3> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:4> + <var:t> * <var:I> ; <var:t> := <nat:1> + <var:t> * <var:I> ; <var:t> := <nat:4> + <var:t> * <var:I> {{ <var:t> = <nat:4> * <var:y> ^ <nat:12> + <nat:3> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:10> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:y> /\ <var:t> = <nat:4> * <var:y> ^ <nat:12> + <nat:3> * <var:y> ^ <nat:11> + <nat:3> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 