\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:8> ; <var:Y> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming for any $ <var:v> $ that $ <var:U> = <var:v> $ prior to running this series of instructions , it follows that we see $ <var:Y> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:v> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:U> = <var:v> \land <var:m0> = <nat:8> \} \\ <var:Y> := <var:m0> \\ \{ <var:U> = <var:v> \land <var:Y> = <nat:8> \} \end{eqnarray} Using usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:8> ; <var:Y> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:Y> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:Y> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 