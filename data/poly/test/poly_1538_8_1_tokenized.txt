\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:E1> := <var:k> ; <var:E2> := <var:E1> * <var:k> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:1> ; <var:U> := <var:E2> <var:U> := <var:U> + <var:E1> <var:U> := <var:U> + <var:E0> \end{verbatim} Assuming $ <var:k> = <var:y> $ ahead of interpreting our program , it must be that we have $ <var:U> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> $ after code segment has finished . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be demonstrated using Hoare techniques . Moving on , we see \verb | { <var:k> = <var:y> } <var:E1> := <var:k> { <var:k> = <var:y> \land <var:E1> = <var:y> } | , \verb | { <var:k> = <var:y> \land <var:E1> = <var:y> } <var:E2> := <var:E1> * <var:k> { <var:k> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> } | , \verb | { <var:k> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> } <var:E0> := <nat:4> { <var:k> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } | , \verb | { <var:k> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } <var:E1> := <var:E1> * <nat:4> { <var:k> = <var:y> \land <var:E1> = <nat:4> * <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } | , \verb | { <var:k> = <var:y> \land <var:E1> = <nat:4> * <var:y> \land <var:E2> = <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } <var:E2> := <var:E2> * <nat:1> { <var:k> = <var:y> \land <var:E1> = <nat:4> * <var:y> \land <var:E2> = <nat:1> * <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } | and \verb | { <var:k> = <var:y> \land <var:E1> = <nat:4> * <var:y> \land <var:E2> = <nat:1> * <var:y> ^ <nat:2> \land <var:E0> = <nat:4> } <var:U> := <var:E2{ <var:k> = <var:y> \land <var:E1> = <nat:4> * <var:y> \land <var:E0> = <nat:4> \land <var:U> = <nat:1> * <var:y> ^ <nat:2> } | . This is rigorously given by the rule given by standard Hoare techniques . Observing the subsequent statements found in our set of instructions , \verb | { <var:k> = <var:y> } <var:E1> := <var:k> { <var:k> = <var:y> \land <var:E1> = <var:y> } | and \verb | { <var:k> = <var:y> \land <var:E1> = <var:y> } <var:E2> := <var:E1> * <var:k> { <var:k> = <var:y> \land <var:E1> = <var:y> \land <var:E2> = <var:y> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:k> = <var:y> }} <var:E1> := <var:k> ; <var:E2> := <var:E1> * <var:k> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:1> ; <var:U> := <var:E2> <var:U> := <var:U> + <var:E1> <var:U> := <var:U> + <var:E0> {{ <var:U> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <var:y> /\ <var:E2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <var:y> /\ <var:E2> = <var:y> ^ <nat:2> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <nat:4> * <var:y> /\ <var:E2> = <var:y> ^ <nat:2> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <nat:4> * <var:y> /\ <var:E2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E1> = <nat:4> * <var:y> /\ <var:E0> = <nat:4> /\ <var:U> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:E0> = <nat:4> /\ <var:U> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:U> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 