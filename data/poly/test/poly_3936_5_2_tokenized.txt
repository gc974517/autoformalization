\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:4> + <var:F> * <var:N> ; <var:F> := <var:F> * <var:N> ; <var:F> := <nat:1> + <var:F> * <var:N> ; <var:F> := <nat:1> + <var:F> * <var:N> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allow given any natural numbers $ <var:G> $ it to be that $ <var:N> = <var:G> $ before interpreting the set of instructions , it follows that we have $ <var:F> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> $ once code is done executing . \end{theorem} \begin{proof} The course of logic for this program can be seen by this decorated series of commands . \begin{eqnarray} \{ <var:N> = <var:G> \} \\ <var:F> := <nat:3> ; \\ \{ <var:N> = <var:G> \land <var:F> = <nat:3> \} \\ <var:F> := <nat:4> + <var:F> * <var:N> ; \\ \{ <var:N> = <var:G> \land <var:F> = <nat:3> * <var:G> + <nat:4> \} \\ <var:F> := <var:F> * <var:N> ; \\ \{ <var:N> = <var:G> \land <var:F> = <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + \} \\ <var:F> := <nat:1> + <var:F> * <var:N> ; \\ \{ <var:N> = <var:G> \land <var:F> = <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> \} \\ <var:F> := <nat:1> + <var:F> * <var:N> \\ \{ <var:N> = <var:G> \land <var:F> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:3> ; <var:F> := <nat:4> + <var:F> * <var:N> ; <var:F> := <var:F> * <var:N> ; <var:F> := <nat:1> + <var:F> * <var:N> ; <var:F> := <nat:1> + <var:F> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:N> = <var:G> }} <def:poly> {{ <var:F> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:F> = <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:F> = <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:F> = <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:F> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 