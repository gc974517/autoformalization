\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:U> ; <var:i2> := <var:i1> * <var:U> ; <var:i3> := <var:i2> * <var:U> ; <var:i0> := <nat:6> ; <var:i2> := <var:i2> * <nat:8> ; <var:i3> := <var:i3> * <nat:6> ; <var:b> := <var:i3> <var:b> := <var:b> + <var:i2> <var:b> := <var:b> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:U> = <var:M> $ prior to the execution of this set of instructions , then $ <var:b> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:6> $ once code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:M> \} \\ <var:i1> := <var:U> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \} \\ <var:i2> := <var:i1> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \land <var:i0> = <nat:6> \} \\ <var:i2> := <var:i2> * <nat:8> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \land <var:i0> = <nat:6> \} \\ <var:i3> := <var:i3> * <nat:6> ; \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:i3> = <nat:6> \times <var:M> ^ <nat:3> \land <var:i0> = <nat:6> \} \\ <var:b> := <var:i3> \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <nat:8> \times <var:M> ^ <nat:2> \land <var:i0> = <nat:6> \land <var:b> = <nat:6> \times <var:M> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:i2> \\ \{ <var:U> = <var:M> \land <var:i1> = <var:M> \land <var:i0> = <nat:6> \land <var:b> = <nat:6> \times <var:M> ^ <nat:3> + <nat:8> \times <var:M> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:i0> \\ \{ <var:U> = <var:M> \land <var:b> = <nat:6> \times <var:M> ^ <nat:3> + <nat:8> \times <var:M> ^ <nat:2> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:U> ; <var:i2> := <var:i1> * <var:U> ; <var:i3> := <var:i2> * <var:U> ; <var:i0> := <nat:6> ; <var:i2> := <var:i2> * <nat:8> ; <var:i3> := <var:i3> * <nat:6> ; <var:b> := <var:i3> <var:b> := <var:b> + <var:i2> <var:b> := <var:b> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:U> = <var:M> }} <def:poly> {{ <var:b> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:i3> = <nat:6> * <var:M> ^ <nat:3> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:i0> = <nat:6> /\ <var:b> = <nat:6> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:i1> = <var:M> /\ <var:i0> = <nat:6> /\ <var:b> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:b> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 