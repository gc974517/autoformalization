\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <var:z> * <var:E> ; <var:z> := <nat:2> + <var:z> * <var:E> ; <var:z> := <nat:4> + <var:z> * <var:E> ; <var:z> := <var:z> * <var:E> ; <var:z> := <nat:3> + <var:z> * <var:E> ; <var:z> := <nat:2> + <var:z> * <var:E> ; <var:z> := <nat:3> + <var:z> * <var:E> ; <var:z> := <nat:4> + <var:z> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:E> = <var:p> $ ahead of the evaluation of the code segment it follows that $ <var:z> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> $ after set of commands exits . \end{theorem} \begin{proof} Proving correctness for the set of commands is shown by standard Hoare logic . Now , the line \verb | <var:z> := <nat:2> ; | . This moves the condition $ \{ <var:E> = <var:p> \} $ as $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \} $ . This is ensured by the assignment rule defined by standard Hoare reasoning . Honing in on the following command seen in our series of commands , we have the variable update command \verb | <var:z> := <var:z> * <var:E> ; | . This line transfers $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \} $ toward the postcondition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> + \} $ . This is shown to be logically sound using the assignment inference rule given by usual Hoare techniques . Stepping through , the assignment line giving $ <nat:2> + <var:z> * <var:E> $ to $ <var:z>$ . This line moves the precondition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> + \} $ to $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \} $ . Advancing , we see the variable update code yielding $ <nat:4> + <var:z> * <var:E> $ into $ <var:z>$ . This code transfers the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \} $ into the postcondition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> + <nat:4> \} $ . Advancing , we have the variable assignmet code letting $ <var:z> * <var:E> $ toward $ <var:z>$ . This moves the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> + <nat:4> \} $ toward the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ . Shifting focus toward the next line seen in our series of instructions , we see the binding line assigning $ <nat:3> + <var:z> * <var:E> $ toward $ <var:z>$ . This forwards the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + \} $ to the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:3> \} $ . This is given by the assignment scheme found in usual Hoare reasoning . Looking at the following line seen in the code segment , we have the binding code \verb | <var:z> := <nat:2> + <var:z> * <var:E> ; | . This takes the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:3> \} $ as $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> + <nat:2> \} $ . Moving forward to the subsequent line of code contained in the segment of code , we have the assignment line defining $ <nat:3> + <var:z> * <var:E> $ toward $ <var:z>$ . This moves $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> + <nat:2> \} $ into the condition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} $ . Following , we see the binding line defining $ <nat:4> + <var:z> * <var:E$ toward $ <var:z>$ . This command redefines $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} $ to the postcondition $ \{ <var:E> = <var:p> \land <var:z> = <nat:2> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:4> \} $ . This is guaranteed through the assignment rule obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:2> ; <var:z> := <var:z> * <var:E> ; <var:z> := <nat:2> + <var:z> * <var:E> ; <var:z> := <nat:4> + <var:z> * <var:E> ; <var:z> := <var:z> * <var:E> ; <var:z> := <nat:3> + <var:z> * <var:E> ; <var:z> := <nat:2> + <var:z> * <var:E> ; <var:z> := <nat:3> + <var:z> * <var:E> ; <var:z> := <nat:4> + <var:z> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:E> = <var:p> }} <def:poly> {{ <var:z> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:z> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 