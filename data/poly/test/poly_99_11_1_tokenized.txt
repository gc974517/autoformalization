\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:C> ; <var:E2> := <var:E1> * <var:C> ; <var:E3> := <var:E2> * <var:C> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:9> ; <var:E3> := <var:E3> * <nat:5> ; <var:j> := <var:E3> <var:j> := <var:j> + <var:E2> <var:j> := <var:j> + <var:E1> <var:j> := <var:j> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Allow $ <var:C> = <var:V> $ prior to running the code it must be that we have $ <var:j> = <nat:5> \times <var:V> ^ <nat:3> + <nat:9> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives : \begin{eqnarray} \{ <var:C> = <var:V> \} \\ <var:E1> := <var:C> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <var:V> \} \\ <var:E2> := <var:E1> * <var:C> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <var:V> \land <var:E2> = <var:V> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:C> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <var:V> \land <var:E2> = <var:V> ^ <nat:2> \land <var:E3> = <var:V> ^ <nat:3> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <var:V> \land <var:E2> = <var:V> ^ <nat:2> \land <var:E3> = <var:V> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:8> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <nat:8> * <var:V> \land <var:E2> = <var:V> ^ <nat:2> \land <var:E3> = <var:V> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:9> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <nat:8> * <var:V> \land <var:E2> = <nat:9> * <var:V> ^ <nat:2> \land <var:E3> = <var:V> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E3> := <var:E3> * <nat:5> ; \\ \{ <var:C> = <var:V> \land <var:E1> = <nat:8> * <var:V> \land <var:E2> = <nat:9> * <var:V> ^ <nat:2> \land <var:E3> = <nat:5> * <var:V> ^ <nat:3> \land <var:E0> = <nat:9> \} \end{eqnarray} Furthering running the series of instructions gives us : \begin{eqnarray} <var:j> := <var:E3> \\ \{ <var:C> = <var:V> \land <var:E1> = <nat:8> * <var:V> \land <var:E2> = <nat:9> * <var:V> ^ <nat:2> \land <var:E0> = <nat:9> \land <var:j> = <nat:5> * <var:V> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:E2> \\ \{ <var:C> = <var:V> \land <var:E1> = <nat:8> * <var:V> \land <var:E0> = <nat:9> \land <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:E1> \\ \{ <var:C> = <var:V> \land <var:E0> = <nat:9> \land <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> \} \\ <var:j> := <var:j> + <var:E0> \\ \{ <var:C> = <var:V> \land <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> \} \end{eqnarray} Thusly , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:C> ; <var:E2> := <var:E1> * <var:C> ; <var:E3> := <var:E2> * <var:C> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:9> ; <var:E3> := <var:E3> * <nat:5> ; <var:j> := <var:E3> <var:j> := <var:j> + <var:E2> <var:j> := <var:j> + <var:E1> <var:j> := <var:j> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <def:poly> {{ <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <var:V> /\ <var:E2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <var:V> /\ <var:E2> = <var:V> ^ <nat:2> /\ <var:E3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <var:V> /\ <var:E2> = <var:V> ^ <nat:2> /\ <var:E3> = <var:V> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <nat:8> * <var:V> /\ <var:E2> = <var:V> ^ <nat:2> /\ <var:E3> = <var:V> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <nat:8> * <var:V> /\ <var:E2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:E3> = <var:V> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <nat:8> * <var:V> /\ <var:E2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:E3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <nat:8> * <var:V> /\ <var:E2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:E0> = <nat:9> /\ <var:j> = <nat:5> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E1> = <nat:8> * <var:V> /\ <var:E0> = <nat:9> /\ <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:E0> = <nat:9> /\ <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:j> = <nat:5> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 