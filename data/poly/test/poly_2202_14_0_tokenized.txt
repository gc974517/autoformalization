\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:1> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:g> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:g> ; <var:c2> := <var:c2> * <var:g> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:g> ; <var:c3> := <var:c3> * <var:g> ; <var:c3> := <var:c3> * <var:g> ; <var:X> := <var:c3> ; <var:X> := <var:X> + <var:c2> ; <var:X> := <var:X> + <var:c1> ; <var:X> := <var:X> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for natural numbers $ <var:D> $ --- it to hold that $ <var:g> = <var:D> $ prior to the execution of our set of instructions , then we see $ <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the code segment is done through usual Hoare logic . Immediately after , we see the environment update command assigning $ <nat:1> $ into $ <var:c0>$ . This code transfers $ \{ <var:g> = <var:D> \} $ toward the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \} $ . Advancing to the upcoming line found in the segment of code , the binding line \verb | <var:c1> := <nat:1> ; | . This code takes the precondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \} $ to the postcondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \} $ . Moving on to the upcoming piece of code seen in our series of commands , the variable update code yielding $ <var:c1> * <var:g> $ into $ <var:c1>$ . This statement transfers the precondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \} $ to the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \} $ . This is rigorously given by the assignment scheme given in standard Hoare techniques . Advancing on , we have the binding line \verb | <var:c2> := <nat:4> ; | . This statement transfers $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \} $ toward $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \} $ . Observing the following bit of code contained in our code , we see the code \verb | <var:c2> := <var:c2> * <var:g> ; | . This takes the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \} $ toward the postcondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> \} $ . This is shown through the assignment rule defined by Hoare reasoning . Following , we have the environment update line defining $ <var:c2> * <var:g> $ toward $ <var:c2>$ . This statement redefines $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> \} $ toward the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \} $ . This is ensured through the assignment rule from usual Hoare logic . Moving forward , we have the environment update code \verb | <var:c3> := <nat:1> ; | . This command moves $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \} $ . Further , we have the variable binding command \verb | <var:c3> := <var:c3> * <var:g> ; | . This statement redefines $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \} $ into the postcondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> \} $ . This is sound through the assignment scheme from usual Hoare techniques . Moving forward , we have the line \verb | <var:c3> := <var:c3> * <var:g> ; | . This statement advances the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> \} $ to the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> ^ <nat:2> \} $ . Following , we see the binding code giving $ <var:c3> * <var:g> $ to $ <var:c3>$ . This takes the precondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> ^ <nat:2> \} $ as $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> ^ <nat:3> \} $ . Keeping momentum , we see the assignment code giving $ <var:c3> $ as $ <var:X>$ . This moves $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:D> ^ <nat:3> \} $ into the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> \} $ . Moving on , the variable binding statement \verb | <var:X> := <var:X> + <var:c2> ; | . This command moves the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:c2> = <nat:4> \times <var:D> ^ <nat:2> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> \} $ . Moving on to the following command seen in our code segment , we have the variable update command \verb | <var:X> := <var:X> + <var:c1> ; | . This command advances the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:c1> = <nat:1> \times <var:D> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> \} $ as the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> \} $ . Moving forward , we have the statement \verb | <var:X> := <var:X> + <var:c0> | . This code forwards the condition $ \{ <var:g> = <var:D> \land <var:c0> = <nat:1> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> \} $ to the condition $ \{ <var:g> = <var:D> \land <var:X> = <nat:1> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:1> \} $ . This is rigorously given with the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:1> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:g> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:g> ; <var:c2> := <var:c2> * <var:g> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:g> ; <var:c3> := <var:c3> * <var:g> ; <var:c3> := <var:c3> * <var:g> ; <var:X> := <var:c3> ; <var:X> := <var:X> + <var:c2> ; <var:X> := <var:X> + <var:c1> ; <var:X> := <var:X> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:g> = <var:D> }} <def:poly> {{ <var:X> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:c3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:c2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:X> = <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:1> * <var:D> /\ <var:X> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:c0> = <nat:1> /\ <var:X> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:X> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 