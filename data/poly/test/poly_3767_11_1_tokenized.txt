\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:x1> := <var:j> ; <var:x2> := <var:x1> * <var:j> ; <var:x3> := <var:x2> * <var:j> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:7> ; <var:x3> := <var:x3> * <nat:1> ; <var:c> := <var:x3> <var:c> := <var:c> + <var:x2> <var:c> := <var:c> + <var:x1> <var:c> := <var:c> + <var:x0> \end{verbatim} Assume it to hold that $ <var:j> = <var:W> $ --- given some $ <var:W> \in \mathbb{Z}^+ $ --- prior to the execution of this series of commands , then $ <var:c> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> + <nat:2> $ after set of commands has finished executing . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:j> = <var:W> \} \\ <var:x1> := <var:j> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <var:W> \} \\ <var:x2> := <var:x1> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:j> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:9> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <nat:9> \cdot <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x2> := <var:x2> * <nat:7> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <nat:9> \cdot <var:W> \land <var:x2> = <nat:7> \cdot <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:x3> := <var:x3> * <nat:1> ; \\ \{ <var:j> = <var:W> \land <var:x1> = <nat:9> \cdot <var:W> \land <var:x2> = <nat:7> \cdot <var:W> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ <var:c> := <var:x3> \\ \{ <var:j> = <var:W> \land <var:x1> = <nat:9> \cdot <var:W> \land <var:x2> = <nat:7> \cdot <var:W> ^ <nat:2> \land <var:x0> = <nat:2> \land <var:c> = <nat:1> \cdot <var:W> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:x2> \\ \{ <var:j> = <var:W> \land <var:x1> = <nat:9> \cdot <var:W> \land <var:x0> = <nat:2> \land <var:c> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:7> \cdot <var:W> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:x1> \\ \{ <var:j> = <var:W> \land <var:x0> = <nat:2> \land <var:c> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> \} \\ <var:c> := <var:c> + <var:x0> \\ \{ <var:j> = <var:W> \land <var:c> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:7> \cdot <var:W> ^ <nat:2> + <nat:9> \cdot <var:W> + <nat:2> \} \end{eqnarray} Thus , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:j> = <var:W> }} <var:x1> := <var:j> ; <var:x2> := <var:x1> * <var:j> ; <var:x3> := <var:x2> * <var:j> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:7> ; <var:x3> := <var:x3> * <nat:1> ; <var:c> := <var:x3> <var:c> := <var:c> + <var:x2> <var:c> := <var:c> + <var:x1> <var:c> := <var:c> + <var:x0> {{ <var:c> = <nat:1> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <nat:9> * <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <nat:9> * <var:W> /\ <var:x2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <nat:9> * <var:W> /\ <var:x2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:W> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <nat:9> * <var:W> /\ <var:x2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:x0> = <nat:2> /\ <var:c> = <nat:1> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x1> = <nat:9> * <var:W> /\ <var:x0> = <nat:2> /\ <var:c> = <nat:1> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:x0> = <nat:2> /\ <var:c> = <nat:1> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:W> /\ <var:c> = <nat:1> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:9> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 