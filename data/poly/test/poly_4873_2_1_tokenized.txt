\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:7> ; <var:U> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming , letting integers $ <var:d> $ , it to be that $ <var:e> = <var:d> $ ahead of the evaluation of this series of instructions , it follows that we have $ <var:U> = <nat:7> $ . \end{theorem} \begin{proof} The proof of our program can be seen through typical Hoare techniques . Moving forward to the next step , we see the binding statement giving $ <nat:7> $ toward $ <var:G0>$ . This line redefines the condition $ \{ <var:e> = <var:d> \} $ as $ \{ <var:e> = <var:d> \land <var:G0> = <nat:7> \} $ . This is shown with the assignment law from Hoare techniques . Moving forward , the line assigning $ <var:G0$ into $ <var:U>$ . This line transfers $ \{ <var:e> = <var:d> \land <var:G0> = <nat:7> \} $ toward $ \{ <var:e> = <var:d> \land <var:U> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:U> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:e> = <var:d> }} <def:poly> {{ <var:U> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:U> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 