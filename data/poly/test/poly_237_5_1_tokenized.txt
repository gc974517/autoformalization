\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:a1> := <var:U> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:1> ; <var:F> := <var:a1> <var:F> := <var:F> + <var:a0> \end{verbatim} Assuming it to be that $ <var:U> = <var:C> $ prior to evaluating the code , it follows that we see $ <var:F> = <nat:1> \times <var:C> + <nat:3> $ once code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:C> \} \\ <var:a1> := <var:U> ; \\ \{ <var:U> = <var:C> \land <var:a1> = <var:C> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:U> = <var:C> \land <var:a1> = <var:C> \land <var:a0> = <nat:3> \} \\ <var:a1> := <var:a1> * <nat:1> ; \\ \{ <var:U> = <var:C> \land <var:a1> = <nat:1> \cdot <var:C> \land <var:a0> = <nat:3> \} \\ <var:F> := <var:a1> \\ \{ <var:U> = <var:C> \land <var:a0> = <nat:3> \land <var:F> = <nat:1> \cdot <var:C> \} \\ <var:F> := <var:F> + <var:a0> \\ \{ <var:U> = <var:C> \land <var:F> = <nat:1> \cdot <var:C> + <nat:3> \} \end{eqnarray} Applying Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:U> = <var:C> }} <var:a1> := <var:U> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:1> ; <var:F> := <var:a1> <var:F> := <var:F> + <var:a0> {{ <var:F> = <nat:1> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:a1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:a1> = <var:C> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:a1> = <nat:1> * <var:C> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:a0> = <nat:3> /\ <var:F> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:F> = <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 