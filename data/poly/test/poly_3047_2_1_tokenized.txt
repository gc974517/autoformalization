\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:z0> := <nat:8> ; <var:i> := <var:z0> \end{verbatim} Assume , assuming some $ <var:L> \in \mathbb{N} $ , that $ <var:V> = <var:L> $ before executing our list of instructions , it must be that we have $ <var:i> = <nat:8> $ after set of commands has finished . \end{theorem} \begin{proof} The proof of this code segment is accomplished using typical Hoare logic . Shifting focus toward the next command seen in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:L> \} & <var:z0> := <nat:8> & \{ <var:V> = <var:L> \land <var:z0> = <nat:8> \} \end{tabular} This is sound through the inference rule from usual Hoare logic . Now , \[ \begin{tabular} {rcl} \{ <var:V> = <var:L> \} & <var:z0> := <nat:8> & \{ <var:V> = <var:L> \land <var:z0> = <nat:8> \} \end{tabular} This is ensured using the variable assignmet inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:V> = <var:L> }} <var:z0> := <nat:8> ; <var:i> := <var:z0> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 