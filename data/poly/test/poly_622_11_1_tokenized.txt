\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:n1> := <var:m> ; <var:n2> := <var:n1> * <var:m> ; <var:n3> := <var:n2> * <var:m> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:5> ; <var:b> := <var:n3> <var:b> := <var:b> + <var:n2> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> \end{verbatim} Assuming it to hold that $ <var:m> = <var:W> $ ahead of running our code segment , then $ <var:b> = <nat:5> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is done using usual Hoare reasoning . Looking at the upcoming line of code contained in our code segment , the variable binding code \verb | <var:n1> := <var:m> ; | . This command transfers the precondition $ \{ <var:m> = <var:W> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \} $ . This is guaranteed by the assignment scheme found in Hoare reasoning . Focusing on the upcoming command contained in the series of instructions , we see the binding code \verb | <var:n2> := <var:n1> * <var:m> ; | . This advances the precondition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \} $ as the condition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \} $ . Immediately following , we have the environment update command \verb | <var:n3> := <var:n2> * <var:m> ; | . This redefines the condition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \} $ as the condition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \} $ . After , the variable update code \verb | <var:n0> := <nat:3> ; | . This advances the condition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \} $ to $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Taking a look at the following line seen in our program , we see the variable binding line giving $ <var:n1> * <nat:6> $ into $ <var:n1>$ . This statement redefines the precondition $ \{ <var:m> = <var:W> \land <var:n1> = <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ as the condition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is deduced using the assignment inference rule of Hoare logic . Moving forward to the next step , the variable binding command \verb | <var:n2> := <var:n2> * <nat:2> ; | . This line advances the precondition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . This is given using the assignment inference rule found in usual Hoare techniques . Now , we see the binding command \verb | <var:n3> := <var:n3> * <nat:5> ; | . This redefines the condition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n3> = <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ toward the condition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n3> = <nat:5> * <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ . Further , the environment update command yielding $ <var:n3$ toward $ <var:b>$ . This redefines $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n3> = <nat:5> * <var:W> ^ <nat:3> \land <var:n0> = <nat:3> \} $ toward $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> \} $ . Taking another step toward the proceeding line seen in our series of instructions , the variable update command \verb | <var:b> := <var:b> + <var:n2> | . This takes $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n2> = <nat:2> * <var:W> ^ <nat:2> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme given by typical Hoare logic . Observing the following bit of code seen in the code segment , the assignment statement giving $ <var:b> + <var:n1$ to $ <var:b>$ . This moves the precondition $ \{ <var:m> = <var:W> \land <var:n1> = <nat:6> * <var:W> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> \} $ into $ \{ <var:m> = <var:W> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> \} $ . Honing in on the upcoming command found in the segment of code , we have the variable binding statement giving $ <var:b> + <var:n0$ to $ <var:b>$ . This advances the condition $ \{ <var:m> = <var:W> \land <var:n0> = <nat:3> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> \} $ toward the postcondition $ \{ <var:m> = <var:W> \land <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:m> = <var:W> }} <var:n1> := <var:m> ; <var:n2> := <var:n1> * <var:m> ; <var:n3> := <var:n2> * <var:m> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:5> ; <var:b> := <var:n3> <var:b> := <var:b> + <var:n2> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> {{ <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <var:W> /\ <var:n2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <var:W> /\ <var:n2> = <var:W> ^ <nat:2> /\ <var:n3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <var:W> /\ <var:n2> = <var:W> ^ <nat:2> /\ <var:n3> = <var:W> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <nat:6> * <var:W> /\ <var:n2> = <var:W> ^ <nat:2> /\ <var:n3> = <var:W> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <nat:6> * <var:W> /\ <var:n2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:n3> = <var:W> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <nat:6> * <var:W> /\ <var:n2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:W> ^ <nat:3> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <nat:6> * <var:W> /\ <var:n2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:n0> = <nat:3> /\ <var:b> = <nat:5> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n1> = <nat:6> * <var:W> /\ <var:n0> = <nat:3> /\ <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:n0> = <nat:3> /\ <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:b> = <nat:5> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 