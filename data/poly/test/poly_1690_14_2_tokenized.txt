\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> \end{verbatim} Assuming it to hold that $ <var:W> = <var:a> $ before the evaluation of our program then we have $ <var:i> = <nat:2> \times <var:a> ^ <nat:13> + <nat:3> \times <var:a> ^ <nat:12> + <nat:3> \times <var:a> ^ <nat:10> + <nat:4> \times <var:a> ^ <nat:9> + <nat:2> \times <var:a> ^ <nat:8> + <nat:3> \times <var:a> ^ <nat:7> + <nat:2> \times <var:a> ^ <nat:6> + <nat:3> \times <var:a> ^ <nat:5> + <nat:2> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} The course of logic for our series of commands is evident through typical Hoare reasoning . Moving on to the subsequent lines in the list of instructions , \verb | { <var:W> = <var:a> } <var:i> := <nat:2> { <var:W> = <var:a> \land <var:i> = <nat:2> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> } <var:i> := <nat:3> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } <var:i> := <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + } | and \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + } <var:i> := <nat:3> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> } | . This is shown using the environment update scheme obtained from Hoare reasoning . Jumping to the upcoming bits of codecontained in our code , we see \verb | { <var:W> = <var:a> } <var:i> := <nat:2> { <var:W> = <var:a> \land <var:i> = <nat:2> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> } <var:i> := <nat:3> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } <var:i> := <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + } <var:i> := <nat:3> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> } <var:i> := <nat:4> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> + <nat:4> } | and \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> + <nat:4> } <var:i> := <nat:2> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:2> } | . Immediately following , \verb | { <var:W> = <var:a> } <var:i> := <nat:2> { <var:W> = <var:a> \land <var:i> = <nat:2> } | , \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> } <var:i> := <nat:3> + <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } | and \verb | { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> + <nat:3> } <var:i> := <var:i> * <var:W> { <var:W> = <var:a> \land <var:i> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + } | . Advancing on , we see \verb | { <var:W> = <var:a> } <var:i> := <nat:2> { <var:W> = <var:a> \land <var:i> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:W> = <var:a> }} <var:i> := <nat:2> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:4> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> ; <var:i> := <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:1> + <var:i> * <var:W> ; <var:i> := <nat:2> + <var:i> * <var:W> ; <var:i> := <nat:3> + <var:i> * <var:W> {{ <var:i> = <nat:2> * <var:a> ^ <nat:13> + <nat:3> * <var:a> ^ <nat:12> + <nat:3> * <var:a> ^ <nat:10> + <nat:4> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:11> + <nat:3> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:8> + <nat:4> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:12> + <nat:3> * <var:a> ^ <nat:11> + <nat:3> * <var:a> ^ <nat:9> + <nat:4> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:a> /\ <var:i> = <nat:2> * <var:a> ^ <nat:13> + <nat:3> * <var:a> ^ <nat:12> + <nat:3> * <var:a> ^ <nat:10> + <nat:4> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 