\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:8> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:c> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:c> ; <var:x2> := <var:x2> * <var:c> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:f> := <var:x3> ; <var:f> := <var:f> + <var:x2> ; <var:f> := <var:f> + <var:x1> ; <var:f> := <var:f> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:c> = <var:D> $ prior to running our set of instructions then we have $ <var:f> = <nat:2> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:D> \} \\ <var:x0> := <nat:8> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \} \\ <var:x1> := <nat:7> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \} \\ <var:x1> := <var:x1> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \} \\ <var:x2> := <nat:5> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \} \\ <var:x2> := <var:x2> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> \} \\ <var:x2> := <var:x2> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \} \\ <var:x3> := <nat:2> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \cdot <var:D> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \cdot <var:D> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \land <var:x3> = <nat:2> \cdot <var:D> ^ <nat:3> \} \\ <var:f> := <var:x3> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:x2> = <nat:5> \cdot <var:D> ^ <nat:2> \land <var:f> = <nat:2> \cdot <var:D> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:x2> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:x1> = <nat:7> \cdot <var:D> \land <var:f> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:5> \cdot <var:D> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:x1> ; \\ \{ <var:c> = <var:D> \land <var:x0> = <nat:8> \land <var:f> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:5> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> \} \\ <var:f> := <var:f> + <var:x0> \\ \{ <var:c> = <var:D> \land <var:f> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:5> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:8> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:c> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:c> ; <var:x2> := <var:x2> * <var:c> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:f> := <var:x3> ; <var:f> := <var:f> + <var:x2> ; <var:f> := <var:f> + <var:x1> ; <var:f> := <var:f> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:c> = <var:D> }} <def:poly> {{ <var:f> = <nat:2> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:f> = <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:7> * <var:D> /\ <var:f> = <nat:2> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:x0> = <nat:8> /\ <var:f> = <nat:2> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:D> /\ <var:f> = <nat:2> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 