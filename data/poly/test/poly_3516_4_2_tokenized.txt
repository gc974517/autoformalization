\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V> := <nat:1> ; <var:V> := <nat:3> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:1> + <var:V> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Given that we have $ <var:Z> = <var:n> $ given all $ <var:n> $ prior to running our series of commands , then $ <var:V> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:n> \} \\ <var:V> := <nat:1> ; \\ \{ <var:Z> = <var:n> \land <var:V> = <nat:1> \} \\ <var:V> := <nat:3> + <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:V> = <nat:1> \times <var:n> + <nat:3> \} \\ <var:V> := <var:V> * <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:V> = <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ <var:V> := <nat:1> + <var:V> * <var:Z> \\ \{ <var:Z> = <var:n> \land <var:V> = <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:1> ; <var:V> := <nat:3> + <var:V> * <var:Z> ; <var:V> := <var:V> * <var:Z> ; <var:V> := <nat:1> + <var:V> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <def:poly> {{ <var:V> = <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:V> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:V> = <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:V> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:V> = <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 