\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:D1> := <var:F> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:1> ; <var:d> := <var:D1> <var:d> := <var:d> + <var:D0> \end{verbatim} Allowing $ <var:F> = <var:Y> $ --- given all whole numbers $ <var:Y> $ --- before the execution of this series of commands , it holds that we have $ <var:d> = <nat:1> * <var:Y> + <nat:2> $ when list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:Y> \} \\ <var:D1> := <var:F> ; \\ \{ <var:F> = <var:Y> \land <var:D1> = <var:Y> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:F> = <var:Y> \land <var:D1> = <var:Y> \land <var:D0> = <nat:2> \} \\ <var:D1> := <var:D1> * <nat:1> ; \\ \{ <var:F> = <var:Y> \land <var:D1> = <nat:1> * <var:Y> \land <var:D0> = <nat:2> \} \\ <var:d> := <var:D1> \\ \{ <var:F> = <var:Y> \land <var:D0> = <nat:2> \land <var:d> = <nat:1> * <var:Y> \} \\ <var:d> := <var:d> + <var:D0> \\ \{ <var:F> = <var:Y> \land <var:d> = <nat:1> * <var:Y> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:F> = <var:Y> }} <var:D1> := <var:F> ; <var:D0> := <nat:2> ; <var:D1> := <var:D1> * <nat:1> ; <var:d> := <var:D1> <var:d> := <var:d> + <var:D0> {{ <var:d> = <nat:1> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:D1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:D1> = <nat:1> * <var:Y> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:D0> = <nat:2> /\ <var:d> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:d> = <nat:1> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 