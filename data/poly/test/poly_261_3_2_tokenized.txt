\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:M> = <var:O> $ ahead of the evaluation of our series of commands then we have $ <var:f> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code can be done with the following decorated segment of code . \begin{eqnarray} \{ <var:M> = <var:O> \} \\ <var:f> := <nat:1> ; \\ \{ <var:M> = <var:O> \land <var:f> = <nat:1> \} \\ <var:f> := <var:f> * <var:M> ; \\ \{ <var:M> = <var:O> \land <var:f> = <nat:1> \times <var:O> + \} \\ <var:f> := <nat:2> + <var:f> * <var:M> \\ \{ <var:M> = <var:O> \land <var:f> = <nat:1> \times <var:O> ^ <nat:2> + <nat:2> \} \end{eqnarray} Applying Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <var:f> * <var:M> ; <var:f> := <nat:2> + <var:f> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:M> = <var:O> }} <def:poly> {{ <var:f> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:f> = <nat:1> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:f> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 