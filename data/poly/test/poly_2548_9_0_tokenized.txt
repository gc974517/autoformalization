\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:Q> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:Q> ; <var:w2> := <var:w2> * <var:Q> ; <var:X> := <var:w2> ; <var:X> := <var:X> + <var:w1> ; <var:X> := <var:X> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assuming it to be that $ <var:Q> = <var:V> $ prior to the execution of the list of instructions , it must be that $ <var:X> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:Q> = <var:V> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \} \\ <var:w1> := <nat:1> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \} \\ <var:w1> := <var:w1> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:V> \} \\ <var:w2> := <nat:3> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:V> \land <var:w2> = <nat:3> \} \\ <var:w2> := <var:w2> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:V> \land <var:w2> = <nat:3> \times <var:V> \} \\ <var:w2> := <var:w2> * <var:Q> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:V> \land <var:w2> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:X> := <var:w2> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:V> \land <var:X> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:w1> ; \\ \{ <var:Q> = <var:V> \land <var:w0> = <nat:3> \land <var:X> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> \} \\ <var:X> := <var:X> + <var:w0> \\ \{ <var:Q> = <var:V> \land <var:X> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:3> \} \end{eqnarray} Thusly , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:Q> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:Q> ; <var:w2> := <var:w2> * <var:Q> ; <var:X> := <var:w2> ; <var:X> := <var:X> + <var:w1> ; <var:X> := <var:X> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:Q> = <var:V> }} <def:poly> {{ <var:X> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:V> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:V> /\ <var:w2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:V> /\ <var:w2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:V> /\ <var:X> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:w0> = <nat:3> /\ <var:X> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:V> /\ <var:X> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 