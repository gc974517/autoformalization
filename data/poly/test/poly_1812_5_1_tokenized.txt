\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:R> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:9> ; <var:G> := <var:V1> <var:G> := <var:G> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:R> = <var:a> $ --- given all positive numbers $ <var:a> $ --- ahead of executing our list of commands , it follows that $ <var:G> = <nat:9> \cdot <var:a> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be accomplished by this decorated series of commands . \begin{eqnarray} \{ <var:R> = <var:a> \} \\ <var:V1> := <var:R> ; \\ \{ <var:R> = <var:a> \land <var:V1> = <var:a> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:R> = <var:a> \land <var:V1> = <var:a> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:9> ; \\ \{ <var:R> = <var:a> \land <var:V1> = <nat:9> \times <var:a> \land <var:V0> = <nat:1> \} \\ <var:G> := <var:V1> \\ \{ <var:R> = <var:a> \land <var:V0> = <nat:1> \land <var:G> = <nat:9> \times <var:a> \} \\ <var:G> := <var:G> + <var:V0> \\ \{ <var:R> = <var:a> \land <var:G> = <nat:9> \times <var:a> + <nat:1> \} \end{eqnarray} Applying Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:R> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:9> ; <var:G> := <var:V1> <var:G> := <var:G> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:R> = <var:a> }} <def:poly> {{ <var:G> = <nat:9> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:V1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:V1> = <var:a> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:V1> = <nat:9> * <var:a> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:V0> = <nat:1> /\ <var:G> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:G> = <nat:9> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 