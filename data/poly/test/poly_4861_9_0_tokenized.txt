\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:g> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:g> ; <var:J2> := <var:J2> * <var:g> ; <var:Z> := <var:J2> ; <var:Z> := <var:Z> + <var:J1> ; <var:Z> := <var:Z> + <var:J0> \end{verbatim} Assuming , given any positive integer coefficients $ <var:o> $ , $ <var:g> = <var:o> $ prior to executing this set of commands then we have $ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be demonstrated by typical Hoare reasoning . Advancing on , we have \begin{eqnarray} \{ <var:g> = <var:o> \} \, <var:J0> := <nat:4> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:9> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \} \, <var:J1> := <var:J1> * <var:g> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \} \, <var:J2> := <nat:4> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \land <var:J2> = <nat:4> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \land <var:J2> = <nat:4> \} \, <var:J2> := <var:J2> * <var:g> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \land <var:J2> = <nat:4> \times <var:o> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:g> = <var:o> \} \, <var:J0> := <nat:4> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \} \, <var:J1> := <nat:9> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \} \\ \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \} \, <var:J1> := <var:J1> * <var:g> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \land <var:J1> = <nat:9> \times <var:o> \} \end{eqnarray} Moving on to the next step , we see \begin{eqnarray} \{ <var:g> = <var:o> \} \, <var:J0> := <nat:4> \, \{ <var:g> = <var:o> \land <var:J0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:g> = <var:o> }} <var:J0> := <nat:4> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:g> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:g> ; <var:J2> := <var:J2> * <var:g> ; <var:Z> := <var:J2> ; <var:Z> := <var:Z> + <var:J1> ; <var:Z> := <var:Z> + <var:J0> {{ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> * <var:o> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> * <var:o> /\ <var:J2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> * <var:o> /\ <var:J2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:9> * <var:o> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:J0> = <nat:4> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:Z> = <nat:4> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 