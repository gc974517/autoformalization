\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:2> ; <var:V> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Allowing that $ <var:z> = <var:s> $ ( taking $ <var:s> \in \mathbb{Z}^+ $ ) before evaluating our list of instructions , it follows that we have $ <var:V> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:s> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:z> = <var:s> \land <var:W0> = <nat:2> \} \\ <var:V> := <var:W0> \\ \{ <var:z> = <var:s> \land <var:V> = <nat:2> \} \end{eqnarray} Using standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:V> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <def:poly> {{ <var:V> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:V> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 