\begin{document} \begin{theorem} Take a code in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:9> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:r> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:r> ; <var:V2> := <var:V2> * <var:r> ; <var:V3> := <nat:6> ; <var:V3> := <var:V3> * <var:r> ; <var:V3> := <var:V3> * <var:r> ; <var:V3> := <var:V3> * <var:r> ; <var:a> := <var:V3> ; <var:a> := <var:a> + <var:V2> ; <var:a> := <var:a> + <var:V1> ; <var:a> := <var:a> + <var:V0> \end{verbatim} Assuming it to be that $ <var:r> = <var:k> $ ahead of the evaluation of this code segment , then we see $ <var:a> = <nat:6> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:9> $ once code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be accomplished with standard Hoare techniques . Taking a look at the upcoming statement found in our code segment , we have the variable binding line \verb | <var:V0> := <nat:9> ; | . This code transfers $ \{ <var:r> = <var:k> \} $ into the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \} $ . After , we have the variable binding line \verb | <var:V1> := <nat:4> ; | . This moves $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \} $ toward $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \} $ . Moving on to the next step contained in our code segment , we have the environment update code yielding $ <var:V1> * <var:r> $ into $ <var:V1>$ . This forwards $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \} $ to the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \} $ . Moving forward to the following statement contained in our set of commands , we see the code assigning $ <nat:9> $ to $ <var:V2>$ . This command redefines $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \} $ into the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \} $ . This is shown to be logically sound with the assignment rule obtained from usual Hoare logic . Stepping forward , the variable assignmet line \verb | <var:V2> := <var:V2> * <var:r> ; | . This moves $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \} $ as the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> \} $ . This is given with the assignment rule given by standard Hoare logic . Observing the next line contained in our segment of code , we see the variable update line binding $ <var:V2> * <var:r> $ into $ <var:V2>$ . This code takes the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> \} $ toward $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \} $ . Shifting focus toward the upcoming line of code seen in our series of instructions , we see the variable binding command \verb | <var:V3> := <nat:6> ; | . This transfers $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \} $ into $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \} $ . This is guaranteed by the assignment rule from typical Hoare reasoning . Immediately following , we see the variable update line \verb | <var:V3> := <var:V3> * <var:r> ; | . This statement takes the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \} $ into the postcondition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> \} $ . Moving forward , we have the binding command giving $ <var:V3> * <var:r> $ to $ <var:V3>$ . This takes $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> \} $ toward the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> ^ <nat:2> \} $ . Further , the binding code defining $ <var:V3> * <var:r> $ toward $ <var:V3>$ . This advances $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> ^ <nat:2> \} $ toward $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> ^ <nat:3> \} $ . Advancing on , the variable binding line \verb | <var:a> := <var:V3> ; | . This forwards $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:V3> = <nat:6> \times <var:k> ^ <nat:3> \} $ to the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law from typical Hoare logic . Going forward , we see the binding statement giving $ <var:a> + <var:V2> $ to $ <var:a>$ . This line advances the precondition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:V2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> \} $ to the condition $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> \} $ . Considering the following statement in the program , we see the environment update code \verb | <var:a> := <var:a> + <var:V1> ; | . This redefines $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:V1> = <nat:4> \times <var:k> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> \} $ as $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> \} $ . This is deduced with the assignment inference rule given in usual Hoare reasoning . Immediately after , we have the line giving $ <var:a> + <var:V0$ as $ <var:a>$ . This line forwards $ \{ <var:r> = <var:k> \land <var:V0> = <nat:9> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> \} $ toward $ \{ <var:r> = <var:k> \land <var:a> = <nat:6> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:9> \} $ . This is ensured using the assignment inference rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <var:V0> := <nat:9> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:r> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:r> ; <var:V2> := <var:V2> * <var:r> ; <var:V3> := <nat:6> ; <var:V3> := <var:V3> * <var:r> ; <var:V3> := <var:V3> * <var:r> ; <var:V3> := <var:V3> * <var:r> ; <var:a> := <var:V3> ; <var:a> := <var:a> + <var:V2> ; <var:a> := <var:a> + <var:V1> ; <var:a> := <var:a> + <var:V0> {{ <var:a> = <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:V3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:V2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:a> = <nat:6> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:4> * <var:k> /\ <var:a> = <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:V0> = <nat:9> /\ <var:a> = <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:a> = <nat:6> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 