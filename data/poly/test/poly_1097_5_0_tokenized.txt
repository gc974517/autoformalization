\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:6> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:h> ; <var:O> := <var:T1> ; <var:O> := <var:O> + <var:T0> \end{verbatim} Allowing that $ <var:h> = <var:I> $ , given positive numbers $ <var:I> $ , prior to the execution of the set of instructions it follows that $ <var:O> = <nat:2> \times <var:I> + <nat:6> $ when program has terminated . \end{theorem} \begin{proof} Proving correctness for our program is evident using typical Hoare reasoning . Immediately following , the statement \verb | <var:T0> := <nat:6> ; | . This line moves the precondition $ \{ <var:h> = <var:I> \} $ as the condition $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \} $ . This is shown with the assignment law obtained from typical Hoare techniques . Advancing on , we see the variable binding command yielding $ <nat:2> $ to $ <var:T1>$ . This redefines the precondition $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \} $ toward $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> \} $ . This is shown through the assignment law in typical Hoare logic . Stepping forward , we see the assignment code yielding $ <var:T1> * <var:h> $ toward $ <var:T1>$ . This code takes $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> \} $ into $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> \times <var:I> \} $ . Focusing on the next line of code found in the series of commands , we have the variable binding line \verb | <var:O> := <var:T1> ; | . This code moves the condition $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> \times <var:I> \} $ toward $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:O> = <nat:2> \times <var:I> \} $ . This is given with the assignment law found in standard Hoare techniques . Observing the proceeding statement contained in the code , we see the variable update code letting $ <var:O> + <var:T0$ to $ <var:O>$ . This command moves the condition $ \{ <var:h> = <var:I> \land <var:T0> = <nat:6> \land <var:O> = <nat:2> \times <var:I> \} $ toward the postcondition $ \{ <var:h> = <var:I> \land <var:O> = <nat:2> \times <var:I> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:h> = <var:I> }} <var:T0> := <nat:6> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:h> ; <var:O> := <var:T1> ; <var:O> := <var:O> + <var:T0> {{ <var:O> = <nat:2> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:T0> = <nat:6> /\ <var:O> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:O> = <nat:2> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 