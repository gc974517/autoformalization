\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:7> ; <var:Z2> := <nat:2> ; <var:Z2> := <var:Z2> * <var:n> ; <var:Z2> := <var:Z2> * <var:n> ; <var:M> := <var:Z2> ; <var:M> := <var:M> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:n> = <var:o> $ prior to running this series of instructions then $ <var:M> = <nat:2> \cdot <var:o> ^ <nat:2> + <nat:7> $ once code has executed . \end{theorem} \begin{proof} Observe that the following decorated list of commands . \begin{eqnarray} \{ <var:n> = <var:o> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:n> = <var:o> \land <var:Z0> = <nat:7> \} \\ <var:Z2> := <nat:2> ; \\ \{ <var:n> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z2> = <nat:2> \} \\ <var:Z2> := <var:Z2> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z2> = <nat:2> * <var:o> \} \\ <var:Z2> := <var:Z2> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:Z0> = <nat:7> \land <var:Z2> = <nat:2> * <var:o> ^ <nat:2> \} \\ <var:M> := <var:Z2> ; \\ \{ <var:n> = <var:o> \land <var:Z0> = <nat:7> \land <var:M> = <nat:2> * <var:o> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:Z0> \\ \{ <var:n> = <var:o> \land <var:M> = <nat:2> * <var:o> ^ <nat:2> + <nat:7> \} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:Z2> := <nat:2> ; <var:Z2> := <var:Z2> * <var:n> ; <var:Z2> := <var:Z2> * <var:n> ; <var:M> := <var:Z2> ; <var:M> := <var:M> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:n> = <var:o> }} <def:poly> {{ <var:M> = <nat:2> * <var:o> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z2> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:Z2> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:Z0> = <nat:7> /\ <var:M> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:M> = <nat:2> * <var:o> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 