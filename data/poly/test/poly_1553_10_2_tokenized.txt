\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n> := <nat:3> ; <var:n> := <var:n> * <var:l> ; <var:n> := <nat:3> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:1> + <var:n> * <var:l> ; <var:n> := <var:n> * <var:l> ; <var:n> := <nat:3> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:2> + <var:n> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:l> = <var:m> $ ahead of executing our list of commands it must be that we have $ <var:n> = <nat:3> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:2> $ once set of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is clear using typical Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:l> = <var:m> \} & <var:n> := <nat:3> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> \} & <var:n> := <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> + \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> + \} & <var:n> := <nat:3> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:2> + <nat:3> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:2> + <nat:3> \} & <var:n> := <nat:4> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> \} & <var:n> := <nat:4> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} & <var:n> := <nat:1> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} & <var:n> := <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + \} & <var:n> := <nat:3> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> \} & <var:n> := <nat:4> + <var:n> * <var:l> & \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> \} \\ \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> \} & <var:n> := <nat:2> + <var:n> * <var:l& \{ <var:l> = <var:m> \land <var:n> = <nat:3> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> \} \end{tabular} This is deduced by the assignment rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:3> ; <var:n> := <var:n> * <var:l> ; <var:n> := <nat:3> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:1> + <var:n> * <var:l> ; <var:n> := <var:n> * <var:l> ; <var:n> := <nat:3> + <var:n> * <var:l> ; <var:n> := <nat:4> + <var:n> * <var:l> ; <var:n> := <nat:2> + <var:n> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:l> = <var:m> }} <def:poly> {{ <var:n> = <nat:3> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:n> = <nat:3> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 