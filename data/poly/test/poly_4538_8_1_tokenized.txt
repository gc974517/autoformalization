\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:w1> := <var:g> ; <var:w2> := <var:w1> * <var:g> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:b> := <var:w2> <var:b> := <var:b> + <var:w1> <var:b> := <var:b> + <var:w0> \end{verbatim} Assume that we have $ <var:g> = <var:D> $ for any natural coefficients $ <var:D> $ ahead of evaluating this set of instructions , it follows that we see $ <var:b> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:D> \} \\ <var:w1> := <var:g> ; \\ \{ <var:g> = <var:D> \land <var:w1> = <var:D> \} \\ <var:w2> := <var:w1> * <var:g> ; \\ \{ <var:g> = <var:D> \land <var:w1> = <var:D> \land <var:w2> = <var:D> ^ <nat:2> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:g> = <var:D> \land <var:w1> = <var:D> \land <var:w2> = <var:D> ^ <nat:2> \land <var:w0> = <nat:3> \} \\ <var:w1> := <var:w1> * <nat:2> ; \\ \{ <var:g> = <var:D> \land <var:w1> = <nat:2> * <var:D> \land <var:w2> = <var:D> ^ <nat:2> \land <var:w0> = <nat:3> \} \\ <var:w2> := <var:w2> * <nat:3> ; \\ \{ <var:g> = <var:D> \land <var:w1> = <nat:2> * <var:D> \land <var:w2> = <nat:3> * <var:D> ^ <nat:2> \land <var:w0> = <nat:3> \} \\ <var:b> := <var:w2> \\ \{ <var:g> = <var:D> \land <var:w1> = <nat:2> * <var:D> \land <var:w0> = <nat:3> \land <var:b> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:w1> \\ \{ <var:g> = <var:D> \land <var:w0> = <nat:3> \land <var:b> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> \} \\ <var:b> := <var:b> + <var:w0> \\ \{ <var:g> = <var:D> \land <var:b> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:3> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:g> = <var:D> }} <var:w1> := <var:g> ; <var:w2> := <var:w1> * <var:g> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:b> := <var:w2> <var:b> := <var:b> + <var:w1> <var:b> := <var:b> + <var:w0> {{ <var:b> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <var:D> /\ <var:w2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <var:D> /\ <var:w2> = <var:D> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <nat:2> * <var:D> /\ <var:w2> = <var:D> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <nat:2> * <var:D> /\ <var:w2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w1> = <nat:2> * <var:D> /\ <var:w0> = <nat:3> /\ <var:b> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:w0> = <nat:3> /\ <var:b> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:b> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 