\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} : \begin{verbatim} <var:K> := <nat:2> ; <var:K> := <var:K> * <var:L> ; <var:K> := <nat:1> + <var:K> * <var:L> ; <var:K> := <var:K> * <var:L> ; <var:K> := <nat:4> + <var:K> * <var:L> ; <var:K> := <nat:3> + <var:K> * <var:L> ; <var:K> := <nat:1> + <var:K> * <var:L> ; <var:K> := <nat:4> + <var:K> * <var:L> ; <var:K> := <nat:2> + <var:K> * <var:L> \end{verbatim} Allowing it to hold that $ <var:L> = <var:A> $ prior to executing this series of commands then $ <var:K> = <nat:2> \cdot <var:A> ^ <nat:8> + <nat:1> \cdot <var:A> ^ <nat:6> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:1> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code can be accomplished through typical Hoare logic . Honing in on the upcoming lines of codein the list of commands , \verb | { <var:L> = <var:A> } <var:K> := <nat:2> { <var:L> = <var:A> \land <var:K> = <nat:2> } | , \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> } <var:K> := <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> + } | , \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> + } <var:K> := <nat:1> + <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> } | , \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> } <var:K> := <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + } | , \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + } <var:K> := <nat:4> + <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> } | and \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> } <var:K> := <nat:3> + <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:3> } | . Stepping forward , we have \verb | { <var:L> = <var:A> } <var:K> := <nat:2> { <var:L> = <var:A> \land <var:K> = <nat:2> } | . Moving onward , we see \verb | { <var:L> = <var:A> } <var:K> := <nat:2> { <var:L> = <var:A> \land <var:K> = <nat:2> } | and \verb | { <var:L> = <var:A> \land <var:K> = <nat:2> } <var:K> := <var:K> * <var:L> { <var:L> = <var:A> \land <var:K> = <nat:2> * <var:A> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:L> = <var:A> }} <var:K> := <nat:2> ; <var:K> := <var:K> * <var:L> ; <var:K> := <nat:1> + <var:K> * <var:L> ; <var:K> := <var:K> * <var:L> ; <var:K> := <nat:4> + <var:K> * <var:L> ; <var:K> := <nat:3> + <var:K> * <var:L> ; <var:K> := <nat:1> + <var:K> * <var:L> ; <var:K> := <nat:4> + <var:K> * <var:L> ; <var:K> := <nat:2> + <var:K> * <var:L> {{ <var:K> = <nat:2> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:7> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:K> = <nat:2> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 