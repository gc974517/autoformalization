\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:G> ; <var:d> := <var:D1> ; <var:d> := <var:d> + <var:D0> \end{verbatim} Assuming , taking positive integers $ <var:C> $ , $ <var:G> = <var:C> $ before executing this segment of code , it holds that we have $ <var:d> = <nat:1> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:G> = <var:C> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:G> = <var:C> \land <var:D0> = <nat:1> \} \\ <var:D1> := <nat:1> ; \\ \{ <var:G> = <var:C> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> \} \\ <var:D1> := <var:D1> * <var:G> ; \\ \{ <var:G> = <var:C> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:C> \} \\ <var:d> := <var:D1> ; \\ \{ <var:G> = <var:C> \land <var:D0> = <nat:1> \land <var:d> = <nat:1> * <var:C> \} \\ <var:d> := <var:d> + <var:D0> \\ \{ <var:G> = <var:C> \land <var:d> = <nat:1> * <var:C> + <nat:1> \} \end{eqnarray} Thusly , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:G> = <var:C> }} <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:G> ; <var:d> := <var:D1> ; <var:d> := <var:d> + <var:D0> {{ <var:d> = <nat:1> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:D0> = <nat:1> /\ <var:d> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:d> = <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 