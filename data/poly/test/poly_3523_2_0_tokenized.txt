\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:5> ; <var:s> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:N> = <var:G> $ given every positive integers $ <var:G> $ before running the series of instructions it follows that we have $ <var:s> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is given through standard Hoare logic . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:G> \} & <var:y0> := <nat:5> & \{ <var:N> = <var:G> \land <var:y0> = <nat:5> \} \\ \{ <var:N> = <var:G> \land <var:y0> = <nat:5> \} & <var:s> := <var:y0& \{ <var:N> = <var:G> \land <var:s> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:s> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:N> = <var:G> }} <def:poly> {{ <var:s> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:s> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 