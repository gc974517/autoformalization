\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:B> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:1> ; <var:v> := <var:d1> <var:v> := <var:v> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assume that $ <var:B> = <var:i> $ ahead of interpreting the list of commands , it follows that $ <var:v> = <nat:1> \times <var:i> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:i> \} \\ <var:d1> := <var:B> ; \\ \{ <var:B> = <var:i> \land <var:d1> = <var:i> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:B> = <var:i> \land <var:d1> = <var:i> \land <var:d0> = <nat:8> \} \\ <var:d1> := <var:d1> * <nat:1> ; \\ \{ <var:B> = <var:i> \land <var:d1> = <nat:1> * <var:i> \land <var:d0> = <nat:8> \} \\ <var:v> := <var:d1> \\ \{ <var:B> = <var:i> \land <var:d0> = <nat:8> \land <var:v> = <nat:1> * <var:i> \} \\ <var:v> := <var:v> + <var:d0> \\ \{ <var:B> = <var:i> \land <var:v> = <nat:1> * <var:i> + <nat:8> \} \end{eqnarray} The application of Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:B> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:1> ; <var:v> := <var:d1> <var:v> := <var:v> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:B> = <var:i> }} <def:poly> {{ <var:v> = <nat:1> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:d1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:d1> = <var:i> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:d1> = <nat:1> * <var:i> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:d0> = <nat:8> /\ <var:v> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:v> = <nat:1> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 