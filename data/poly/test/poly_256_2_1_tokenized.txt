\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:4> ; <var:U> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Given $ <var:P> = <var:R> $ before the execution of the code , it follows that $ <var:U> = <nat:4> $ when segment of code exits . \end{theorem} \begin{proof} We can see that this decorated series of commands . \begin{eqnarray} \{ <var:P> = <var:R> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:P> = <var:R> \land <var:w0> = <nat:4> \} \\ <var:U> := <var:w0> \\ \{ <var:P> = <var:R> \land <var:U> = <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:4> ; <var:U> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:P> = <var:R> }} <def:poly> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 