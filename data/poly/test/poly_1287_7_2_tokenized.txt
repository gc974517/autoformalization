\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:o> ; <var:U> := <nat:4> + <var:U> * <var:o> ; <var:U> := <var:U> * <var:o> ; <var:U> := <nat:1> + <var:U> * <var:o> ; <var:U> := <nat:4> + <var:U> * <var:o> ; <var:U> := <nat:2> + <var:U> * <var:o> \end{verbatim} Given it to be that $ <var:o> = <var:c> $ before the evaluation of this segment of code it follows that we see $ <var:U> = <nat:1> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:2> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:o> = <var:c> \} \\ <var:U> := <nat:1> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> + <nat:2> \} \\ <var:U> := <nat:4> + <var:U> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> \} \\ <var:U> := <var:U> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + \} \\ <var:U> := <nat:1> + <var:U> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \} \\ <var:U> := <nat:4> + <var:U> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> + <nat:4> \} \\ <var:U> := <nat:2> + <var:U> * <var:o> \\ \{ <var:o> = <var:c> \land <var:U> = <nat:1> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:2> \} \end{eqnarray} Thusly , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:o> = <var:c> }} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:o> ; <var:U> := <nat:4> + <var:U> * <var:o> ; <var:U> := <var:U> * <var:o> ; <var:U> := <nat:1> + <var:U> * <var:o> ; <var:U> := <nat:4> + <var:U> * <var:o> ; <var:U> := <nat:2> + <var:U> * <var:o> {{ <var:U> = <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 