\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:1> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:u> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:u> ; <var:b2> := <var:b2> * <var:u> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:u> ; <var:b3> := <var:b3> * <var:u> ; <var:b3> := <var:b3> * <var:u> ; <var:L> := <var:b3> ; <var:L> := <var:L> + <var:b2> ; <var:L> := <var:L> + <var:b1> ; <var:L> := <var:L> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given positive integers $ <var:U> $ --- it to be that $ <var:u> = <var:U> $ prior to executing our set of commands , it follows that we see $ <var:L> = <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment is demonstrated with usual Hoare logic . Moving forward to the following piece of code in our code segment , we have the assignment line \verb | <var:b0> := <nat:1> ; | . This line takes the precondition $ \{ <var:u> = <var:U> \} $ as $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \} $ . This is known to be sound by the assignment law found in usual Hoare logic . Advancing to the next step , the variable update code binding $ <nat:2> $ as $ <var:b1>$ . This line takes the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \} $ into the postcondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> \} $ . Advancing on , the assignment code \verb | <var:b1> := <var:b1> * <var:u> ; | . This line advances the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> \} $ as the postcondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \} $ . This is given using the assignment inference rule given by Hoare techniques . Next , we see the variable binding command \verb | <var:b2> := <nat:2> ; | . This code transfers $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \} $ as the postcondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> \} $ . This is known to be sound with the assignment scheme from usual Hoare reasoning . Moving on to the next step , we have the variable update command \verb | <var:b2> := <var:b2> * <var:u> ; | . This code transfers $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> \} $ as the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> \} $ . Considering the following command contained in the set of commands , we have the assignment command \verb | <var:b2> := <var:b2> * <var:u> ; | . This command redefines the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> \} $ into $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \} $ . Keeping momentum , we have the statement yielding $ <nat:4> $ as $ <var:b3>$ . This statement advances the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \} $ as the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> \} $ . Honing in on the upcoming piece of code contained in our series of instructions , the variable binding code \verb | <var:b3> := <var:b3> * <var:u> ; | . This takes the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> \} $ toward $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> \} $ . Next , we have the variable update code defining $ <var:b3> * <var:u> $ as $ <var:b3>$ . This statement moves the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> \} $ to $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> ^ <nat:2> \} $ . Taking a look at the proceeding bit of code contained in the set of instructions , we have the line \verb | <var:b3> := <var:b3> * <var:u> ; | . This takes the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> ^ <nat:2> \} $ toward the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> ^ <nat:3> \} $ . This is sound by the assignment inference rule from Hoare reasoning . Following , we see the variable assignmet statement \verb | <var:L> := <var:b3> ; | . This line takes the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:b3> = <nat:4> * <var:U> ^ <nat:3> \} $ toward $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> \} $ . This is given by the assignment rule in usual Hoare logic . Honing in on the subsequent command in the series of instructions , we see the assignment command \verb | <var:L> := <var:L> + <var:b2> ; | . This line transfers the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:b2> = <nat:2> * <var:U> ^ <nat:2> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> \} $ into the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined by Hoare techniques . Moving onward , we have the line assigning $ <var:L> + <var:b1> $ to $ <var:L>$ . This statement forwards the precondition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:b1> = <nat:2> * <var:U> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> \} $ to $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> \} $ . Moving forward , the assignment code \verb | <var:L> := <var:L> + <var:b0> | . This redefines the condition $ \{ <var:u> = <var:U> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> \} $ toward the condition $ \{ <var:u> = <var:U> \land <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:u> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:u> ; <var:b2> := <var:b2> * <var:u> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:u> ; <var:b3> := <var:b3> * <var:u> ; <var:b3> := <var:b3> * <var:u> ; <var:L> := <var:b3> ; <var:L> := <var:L> + <var:b2> ; <var:L> := <var:L> + <var:b1> ; <var:L> := <var:L> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:u> = <var:U> }} <def:poly> {{ <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:b3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:b2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:L> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:b1> = <nat:2> * <var:U> /\ <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:b0> = <nat:1> /\ <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:L> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 