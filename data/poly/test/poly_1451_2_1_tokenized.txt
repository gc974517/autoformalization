\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:G0> := <nat:9> ; <var:h> := <var:G0> \end{verbatim} Allowing with some $ <var:V> \in \mathbb{N} $ $ <var:p> = <var:V> $ prior to running the code , it follows that $ <var:h> = <nat:9> $ once series of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our code is shown using typical Hoare techniques . Keeping momentum , we see the environment update command letting $ <nat:9> $ to $ <var:G0>$ . This line takes the precondition $ \{ <var:p> = <var:V> \} $ toward $ \{ <var:p> = <var:V> \land <var:G0> = <nat:9> \} $ . This is deduced through the assignment rule from typical Hoare reasoning . Immediately following , the statement \verb | <var:h> := <var:G0> | . This moves $ \{ <var:p> = <var:V> \land <var:G0> = <nat:9> \} $ as the condition $ \{ <var:p> = <var:V> \land <var:h> = <nat:9> \} $ . This is known to be sound with the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:p> = <var:V> }} <var:G0> := <nat:9> ; <var:h> := <var:G0> {{ <var:h> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:h> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 