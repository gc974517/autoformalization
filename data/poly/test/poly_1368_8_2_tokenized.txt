\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:u> ; <var:z> := <var:z> * <var:u> ; <var:z> := <var:z> * <var:u> ; <var:z> := <nat:3> + <var:z> * <var:u> ; <var:z> := <nat:4> + <var:z> * <var:u> ; <var:z> := <nat:2> + <var:z> * <var:u> ; <var:z> := <nat:2> + <var:z> * <var:u> \end{verbatim} Allowing that we have $ <var:u> = <var:U> $ --- for every positive integers $ <var:U> $ --- ahead of running this segment of code , it holds that $ <var:z> = <nat:2> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:U> \} \\ <var:z> := <nat:2> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \} \\ <var:z> := <nat:4> + <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> + <nat:4> \} \\ <var:z> := <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + \} \\ <var:z> := <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + \} \\ <var:z> := <nat:3> + <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> + <nat:4> \} \\ <var:z> := <nat:2> + <var:z> * <var:u> ; \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:u> \\ \{ <var:u> = <var:U> \land <var:z> = <nat:2> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:u> = <var:U> }} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:u> ; <var:z> := <var:z> * <var:u> ; <var:z> := <var:z> * <var:u> ; <var:z> := <nat:3> + <var:z> * <var:u> ; <var:z> := <nat:4> + <var:z> * <var:u> ; <var:z> := <nat:2> + <var:z> * <var:u> ; <var:z> := <nat:2> + <var:z> * <var:u> {{ <var:z> = <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:U> /\ <var:z> = <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 