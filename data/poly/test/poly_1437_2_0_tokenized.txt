\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:5> ; <var:G> := <var:O0> \end{verbatim} Allowing $ <var:h> = <var:m> $ --- with some $ <var:m> $ --- prior to evaluating this list of commands , it follows that we have $ <var:G> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions is evident with usual Hoare reasoning . Advancing , we see the assignment code yielding $ <nat:5> $ to $ <var:O0>$ . This forwards the condition $ \{ <var:h> = <var:m> \} $ toward the condition $ \{ <var:h> = <var:m> \land <var:O0> = <nat:5> \} $ . Jumping to the subsequent step seen in the series of commands , we see the variable binding code giving $ <var:O0$ to $ <var:G>$ . This code moves the condition $ \{ <var:h> = <var:m> \land <var:O0> = <nat:5> \} $ as the postcondition $ \{ <var:h> = <var:m> \land <var:G> = <nat:5> \} $ . This is deduced with the assignment inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <var:O0> := <nat:5> ; <var:G> := <var:O0> {{ <var:G> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:G> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 