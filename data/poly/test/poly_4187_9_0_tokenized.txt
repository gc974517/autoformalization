\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:9> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:D> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:D> ; <var:s2> := <var:s2> * <var:D> ; <var:x> := <var:s2> ; <var:x> := <var:x> + <var:s1> ; <var:x> := <var:x> + <var:s0> \end{verbatim} Allow $ <var:D> = <var:u> $ before running this series of commands it holds that we see $ <var:x> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:9> $ once program terminates . \end{theorem} \begin{proof} Arguing the correctness of this program is accomplished using the following decorated set of instructions . \begin{eqnarray} \{ <var:D> = <var:u> \} \\ <var:s0> := <nat:9> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \} \\ <var:s1> := <nat:2> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \} \\ <var:s1> := <var:s1> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \times <var:u> \} \\ <var:s2> := <nat:3> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \times <var:u> \land <var:s2> = <nat:3> \} \\ <var:s2> := <var:s2> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \times <var:u> \land <var:s2> = <nat:3> \times <var:u> \} \\ <var:s2> := <var:s2> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \times <var:u> \land <var:s2> = <nat:3> \times <var:u> ^ <nat:2> \} \\ <var:x> := <var:s2> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:s1> = <nat:2> \times <var:u> \land <var:x> = <nat:3> \times <var:u> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:s1> ; \\ \{ <var:D> = <var:u> \land <var:s0> = <nat:9> \land <var:x> = <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> \} \\ <var:x> := <var:x> + <var:s0> \\ \{ <var:D> = <var:u> \land <var:x> = <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:9> \} \end{eqnarray} The application of typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <var:s0> := <nat:9> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:D> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:D> ; <var:s2> := <var:s2> * <var:D> ; <var:x> := <var:s2> ; <var:x> := <var:x> + <var:s1> ; <var:x> := <var:x> + <var:s0> {{ <var:x> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> * <var:u> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> * <var:u> /\ <var:s2> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> * <var:u> /\ <var:s2> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:s1> = <nat:2> * <var:u> /\ <var:x> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:s0> = <nat:9> /\ <var:x> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:x> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 