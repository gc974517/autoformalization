\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:w> ; <var:O> := <var:V1> ; <var:O> := <var:O> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for every positive coefficients $ <var:t> $ --- that we have $ <var:w> = <var:t> $ before interpreting our list of commands , then $ <var:O> = <nat:5> * <var:t> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the segment of code can be demonstrated through usual Hoare techniques . Following , \verb | { <var:w> = <var:t> } <var:V0> := <nat:4> { <var:w> = <var:t> \land <var:V0> = <nat:4> } | and \verb | { <var:w> = <var:t> \land <var:V0> = <nat:4> } <var:V1> := <nat:5> { <var:w> = <var:t> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> } | . This is rigorously given by the variable binding inference rule given in usual Hoare techniques . Going forward , \verb | { <var:w> = <var:t> } <var:V0> := <nat:4> { <var:w> = <var:t> \land <var:V0> = <nat:4> } | and \verb | { <var:w> = <var:t> \land <var:V0> = <nat:4> } <var:V1> := <nat:5> { <var:w> = <var:t> \land <var:V0> = <nat:4> \land <var:V1> = <nat:5> } | . Now , we have \verb | { <var:w> = <var:t> } <var:V0> := <nat:4> { <var:w> = <var:t> \land <var:V0> = <nat:4> } | . This is sound by the variable update law from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:w> ; <var:O> := <var:V1> ; <var:O> := <var:O> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:w> = <var:t> }} <def:poly> {{ <var:O> = <nat:5> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:V0> = <nat:4> /\ <var:O> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:t> /\ <var:O> = <nat:5> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 