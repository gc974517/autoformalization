\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:1> ; <var:Z> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given --- with some natural numbers $ <var:e> $ --- it to hold that $ <var:E> = <var:e> $ before evaluating this list of commands it must be that we have $ <var:Z> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:E> = <var:e> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:E> = <var:e> \land <var:r0> = <nat:1> \} \\ <var:Z> := <var:r0> \\ \{ <var:E> = <var:e> \land <var:Z> = <nat:1> \} \end{eqnarray} As a consequence , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:1> ; <var:Z> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:E> = <var:e> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 