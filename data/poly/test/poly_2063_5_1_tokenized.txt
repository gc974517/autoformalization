\begin{document} \begin{theorem} Consider the following set of commands such that \begin{verbatim} <var:d1> := <var:w> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:f> := <var:d1> <var:f> := <var:f> + <var:d0> \end{verbatim} Given it to hold that $ <var:w> = <var:o> $ , letting positive integer coefficients $ <var:o> $ , prior to the evaluation of our code segment it must be that we have $ <var:f> = <nat:7> \cdot <var:o> + <nat:8> $ . \end{theorem} \begin{proof} See that this decorated code segment . \begin{eqnarray} \{ <var:w> = <var:o> \} \\ <var:d1> := <var:w> ; \\ \{ <var:w> = <var:o> \land <var:d1> = <var:o> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:w> = <var:o> \land <var:d1> = <var:o> \land <var:d0> = <nat:8> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:w> = <var:o> \land <var:d1> = <nat:7> \cdot <var:o> \land <var:d0> = <nat:8> \} \\ <var:f> := <var:d1> \\ \{ <var:w> = <var:o> \land <var:d0> = <nat:8> \land <var:f> = <nat:7> \cdot <var:o> \} \\ <var:f> := <var:f> + <var:d0> \\ \{ <var:w> = <var:o> \land <var:f> = <nat:7> \cdot <var:o> + <nat:8> \} \end{eqnarray} The application of standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <var:d1> := <var:w> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:f> := <var:d1> <var:f> := <var:f> + <var:d0> {{ <var:f> = <nat:7> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:d1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:d1> = <var:o> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:d1> = <nat:7> * <var:o> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:d0> = <nat:8> /\ <var:f> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:f> = <nat:7> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 