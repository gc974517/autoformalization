\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:4> ; <var:S> := <var:p0> \end{verbatim} Assuming it to hold that $ <var:i> = <var:w> $ before the evaluation of the code segment , then we see $ <var:S> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the code can be shown by typical Hoare logic . Focusing on the upcoming bits of codecontained in the program , we see \begin{verbatim} { <var:i> = <var:w> } <var:p0> := <nat:4> { <var:i> = <var:w> \land <var:p0> = <nat:4> } { <var:i> = <var:w> \land <var:p0> = <nat:4> } <var:S> := <var:p0{ <var:i> = <var:w> \land <var:S> = <nat:4> } \end{verbatim} This is given through the variable assignmet scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:i> = <var:w> }} <var:p0> := <nat:4> ; <var:S> := <var:p0> {{ <var:S> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:S> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 