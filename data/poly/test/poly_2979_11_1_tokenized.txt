\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:j1> := <var:y> ; <var:j2> := <var:j1> * <var:y> ; <var:j3> := <var:j2> * <var:y> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:4> ; <var:A> := <var:j3> <var:A> := <var:A> + <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> \end{verbatim} Assume it to hold that $ <var:y> = <var:m> $ prior to the execution of the code , it must be that we see $ <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our series of instructions is evident through usual Hoare techniques . Focusing on the following step contained in the code segment , we have the binding line defining $ <var:y> $ into $ <var:j1>$ . This advances the precondition $ \{ <var:y> = <var:m> \} $ as $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \} $ . This is deduced with the assignment scheme in typical Hoare techniques . Moving forward to the upcoming bit of code in the list of commands , we see the environment update command binding $ <var:j1> * <var:y> $ as $ <var:j2>$ . This advances the precondition $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \} $ as $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \} $ . This is sound using the assignment inference rule from standard Hoare reasoning . Moving forward to the next step , the variable update line giving $ <var:j2> * <var:y> $ to $ <var:j3>$ . This statement takes the precondition $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \} $ as the condition $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \} $ . Advancing on , the variable binding code \verb | <var:j0> := <nat:2> ; | . This statement takes the precondition $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \} $ to the condition $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ . Moving forward to the next step , we have the environment update line \verb | <var:j1> := <var:j1> * <nat:2> ; | . This command forwards $ \{ <var:y> = <var:m> \land <var:j1> = <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ as $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ . This is deduced by the assignment inference rule obtained from usual Hoare logic . Moving on to the next step , the binding command letting $ <var:j2> * <nat:5> $ into $ <var:j2>$ . This forwards $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ to $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ . Honing in on the subsequent piece of code seen in our series of commands , we see the variable update code letting $ <var:j3> * <nat:4> $ as $ <var:j3>$ . This redefines $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j3> = <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ into the condition $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j3> = <nat:4> \cdot <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ . This is shown to be logically sound using the assignment law from Hoare techniques . Paying attention to the subsequent statement contained in our set of instructions , we see the assignment line \verb | <var:A> := <var:j3> | . This advances $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j3> = <nat:4> \cdot <var:m> ^ <nat:3> \land <var:j0> = <nat:2> \} $ toward the condition $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> \} $ . This is guaranteed with the assignment law of typical Hoare reasoning . Keeping momentum , the binding command yielding $ <var:A> + <var:j2$ toward $ <var:A>$ . This code forwards the condition $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> \} $ toward $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> \} $ . This is sound with the assignment law in usual Hoare reasoning . Focusing on the next line seen in our series of commands , we see the variable update command giving $ <var:A> + <var:j1$ as $ <var:A>$ . This transfers the precondition $ \{ <var:y> = <var:m> \land <var:j1> = <nat:2> \cdot <var:m> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> \} $ to $ \{ <var:y> = <var:m> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} $ . This is shown to be logically sound by the assignment law given by standard Hoare techniques . Taking another step toward the next step seen in our series of instructions , we see the variable update command \verb | <var:A> := <var:A> + <var:j0> | . This forwards $ \{ <var:y> = <var:m> \land <var:j0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} $ to the postcondition $ \{ <var:y> = <var:m> \land <var:A> = <nat:4> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <var:j1> := <var:y> ; <var:j2> := <var:j1> * <var:y> ; <var:j3> := <var:j2> * <var:y> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:4> ; <var:A> := <var:j3> <var:A> := <var:A> + <var:j2> <var:A> := <var:A> + <var:j1> <var:A> := <var:A> + <var:j0> {{ <var:A> = <nat:4> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <nat:2> * <var:m> /\ <var:j2> = <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <nat:2> * <var:m> /\ <var:j2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:j3> = <var:m> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <nat:2> * <var:m> /\ <var:j2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:m> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <nat:2> * <var:m> /\ <var:j2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:j0> = <nat:2> /\ <var:A> = <nat:4> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j1> = <nat:2> * <var:m> /\ <var:j0> = <nat:2> /\ <var:A> = <nat:4> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:j0> = <nat:2> /\ <var:A> = <nat:4> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:A> = <nat:4> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 