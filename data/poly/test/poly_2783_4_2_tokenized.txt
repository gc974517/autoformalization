\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <var:W> * <var:G> ; <var:W> := <nat:1> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> \end{verbatim} Given it to be that $ <var:G> = <var:k> $ ahead of the execution of the set of commands it follows that $ <var:W> = <nat:4> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> $ after set of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is done by Hoare techniques . After , \begin{verbatim} { <var:G> = <var:k> } <var:W> := <nat:4> { <var:G> = <var:k> \land <var:W> = <nat:4> } \end{verbatim} Moving forward to the upcoming line of code contained in our series of commands , \begin{verbatim} { <var:G> = <var:k> } <var:W> := <nat:4> { <var:G> = <var:k> \land <var:W> = <nat:4> } \end{verbatim} This is given using the variable assignmet rule found in typical Hoare techniques . Advancing on , we have \begin{verbatim} { <var:G> = <var:k> } <var:W> := <nat:4> { <var:G> = <var:k> \land <var:W> = <nat:4> } { <var:G> = <var:k> \land <var:W> = <nat:4> } <var:W> := <var:W> * <var:G> { <var:G> = <var:k> \land <var:W> = <nat:4> \times <var:k> + } \end{verbatim} This is guaranteed with the binding law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:G> = <var:k> }} <var:W> := <nat:4> ; <var:W> := <var:W> * <var:G> ; <var:W> := <nat:1> + <var:W> * <var:G> ; <var:W> := <nat:4> + <var:W> * <var:G> {{ <var:W> = <nat:4> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:W> = <nat:4> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:W> = <nat:4> * <var:k> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:k> /\ <var:W> = <nat:4> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 