\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:P> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:P> ; <var:i2> := <var:i2> * <var:P> ; <var:o> := <var:i2> ; <var:o> := <var:o> + <var:i1> ; <var:o> := <var:o> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:P> = <var:z> $ ahead of the execution of our program , it must be that we see $ <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> $ after series of instructions has finished . \end{theorem} \begin{proof} The method of proof for the code segment is accomplished with Hoare logic . Paying attention to the next command contained in our segment of code , the environment update code defining $ <nat:3> $ as $ <var:i0>$ . This code forwards the precondition $ \{ <var:P> = <var:z> \} $ as the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \} $ . This is shown by the assignment law defined in Hoare techniques . Going forward , we see the variable update line \verb | <var:i1> := <nat:1> ; | . This command moves $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \} $ toward the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> \} $ . This is ensured by the assignment scheme defined by Hoare logic . Advancing , we have the variable update command \verb | <var:i1> := <var:i1> * <var:P> ; | . This moves $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> \} $ to the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \} $ . Looking at the next step in the series of instructions , we have the variable assignmet code giving $ <nat:9> $ toward $ <var:i2>$ . This line moves the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \} $ to the postcondition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> \} $ . This is given using the assignment inference rule in typical Hoare techniques . Taking another step toward the next step seen in the code , the command defining $ <var:i2> * <var:P> $ toward $ <var:i2>$ . This takes $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> \} $ into the postcondition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> * <var:z> \} $ . Considering the proceeding piece of code found in the set of instructions , the environment update command \verb | <var:i2> := <var:i2> * <var:P> ; | . This takes the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> * <var:z> \} $ as the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> * <var:z> ^ <nat:2> \} $ . Advancing , we have the binding code binding $ <var:i2> $ to $ <var:o>$ . This command takes the precondition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:i2> = <nat:9> * <var:z> ^ <nat:2> \} $ to the condition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:o> = <nat:9> * <var:z> ^ <nat:2> \} $ . This is rigorously given with the assignment law given by typical Hoare techniques . Observing the upcoming bit of code found in the series of commands , we have the assignment command \verb | <var:o> := <var:o> + <var:i1> ; | . This moves the precondition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:i1> = <nat:1> * <var:z> \land <var:o> = <nat:9> * <var:z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> \} $ . This is ensured through the assignment law given in Hoare techniques . Taking a look at the following command seen in our segment of code , we see the variable update line binding $ <var:o> + <var:i0$ into $ <var:o>$ . This code moves $ \{ <var:P> = <var:z> \land <var:i0> = <nat:3> \land <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> \} $ to the condition $ \{ <var:P> = <var:z> \land <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> \} $ . This is given with the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:P> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:P> ; <var:i2> := <var:i2> * <var:P> ; <var:o> := <var:i2> ; <var:o> := <var:o> + <var:i1> ; <var:o> := <var:o> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:P> = <var:z> }} <def:poly> {{ <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:z> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:z> /\ <var:i2> = <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:z> /\ <var:i2> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:1> * <var:z> /\ <var:o> = <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:i0> = <nat:3> /\ <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:o> = <nat:9> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 