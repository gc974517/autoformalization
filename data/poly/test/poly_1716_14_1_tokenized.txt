\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:H> ; <var:s2> := <var:s1> * <var:H> ; <var:s3> := <var:s2> * <var:H> ; <var:s4> := <var:s3> * <var:H> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:5> ; <var:s3> := <var:s3> * <nat:4> ; <var:s4> := <var:s4> * <nat:3> ; <var:N> := <var:s4> <var:N> := <var:N> + <var:s3> <var:N> := <var:N> + <var:s2> <var:N> := <var:N> + <var:s1> <var:N> := <var:N> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:H> = <var:b> $ ahead of executing our code , it follows that $ <var:N> = <nat:3> \times <var:b> ^ <nat:4> + <nat:4> \times <var:b> ^ <nat:3> + <nat:5> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:1> $ once code segment has finished . \end{theorem} \begin{proof} The method of proof for the set of instructions can be shown with Hoare techniques . Taking another step toward the subsequent step contained in the series of commands , the assignment code \verb | <var:s1> := <var:H> ; | . This line advances the condition $ \{ <var:H> = <var:b> \} $ toward the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \} $ . Focusing on the subsequent bit of code in the segment of code , we see the variable assignmet code binding $ <var:s1> * <var:H> $ into $ <var:s2>$ . This advances the precondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \} $ into the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \} $ . Focusing on the subsequent piece of code in our list of instructions , we see the variable update command defining $ <var:s2> * <var:H> $ toward $ <var:s3>$ . This command redefines the precondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \} $ as the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \} $ . Paying attention to the subsequent line found in our series of commands , we see the assignment command assigning $ <var:s3> * <var:H> $ into $ <var:s4>$ . This command advances the condition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \} $ . This is shown to be logically sound through the assignment rule given in Hoare reasoning . Advancing to the next step , we see the variable assignmet code yielding $ <nat:1> $ toward $ <var:s0>$ . This command redefines $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ . Honing in on the subsequent step found in our set of commands , the environment update line \verb | <var:s1> := <var:s1> * <nat:2> ; | . This takes $ \{ <var:H> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ as the condition $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ . This is given through the assignment scheme defined by Hoare reasoning . Next , we have the variable assignmet line defining $ <var:s2> * <nat:5> $ to $ <var:s2>$ . This transfers the precondition $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ into $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ . This is rigorously given using the assignment rule of standard Hoare logic . Jumping to the next line seen in the code segment , the assignment line giving $ <var:s3> * <nat:4> $ toward $ <var:s3>$ . This advances $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ to the condition $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ . Immediately following , we have the variable update code letting $ <var:s4> * <nat:3> $ to $ <var:s4>$ . This line transfers $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s4> = <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ into $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s4> = <nat:3> \cdot <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ . Going forward , we have the binding statement \verb | <var:N> := <var:s4> | . This moves $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s4> = <nat:3> \cdot <var:b> ^ <nat:4> \land <var:s0> = <nat:1> \} $ to $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> \} $ . This is deduced by the assignment inference rule given in Hoare reasoning . Moving on to the subsequent piece of code seen in our series of instructions , we have the variable update command giving $ <var:N> + <var:s3$ toward $ <var:N>$ . This forwards $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> \} $ toward the postcondition $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> \} $ . Going forward , we have the variable binding line \verb | <var:N> := <var:N> + <var:s2> | . This advances $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s2> = <nat:5> \cdot <var:b> ^ <nat:2> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> \} $ into $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule given in Hoare logic . Further , we have the line yielding $ <var:N> + <var:s1$ to $ <var:N>$ . This transfers the condition $ \{ <var:H> = <var:b> \land <var:s1> = <nat:2> \cdot <var:b> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:b> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} $ . Shifting focus toward the subsequent bit of code contained in our series of instructions , the variable update code binding $ <var:N> + <var:s0$ toward $ <var:N>$ . This moves the precondition $ \{ <var:H> = <var:b> \land <var:s0> = <nat:1> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} $ to the condition $ \{ <var:H> = <var:b> \land <var:N> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:5> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Definition <def:poly> := <var:s1> := <var:H> ; <var:s2> := <var:s1> * <var:H> ; <var:s3> := <var:s2> * <var:H> ; <var:s4> := <var:s3> * <var:H> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:s2> := <var:s2> * <nat:5> ; <var:s3> := <var:s3> * <nat:4> ; <var:s4> := <var:s4> * <nat:3> ; <var:N> := <var:s4> <var:N> := <var:N> + <var:s3> <var:N> := <var:N> + <var:s2> <var:N> := <var:N> + <var:s1> <var:N> := <var:N> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:H> = <var:b> }} <def:poly> {{ <var:N> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s4> = <var:b> ^ <nat:4> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s4> = <var:b> ^ <nat:4> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s4> = <var:b> ^ <nat:4> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:s4> = <var:b> ^ <nat:4> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:s4> = <nat:3> * <var:b> ^ <nat:4> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:s0> = <nat:1> /\ <var:N> = <nat:3> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:s0> = <nat:1> /\ <var:N> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s1> = <nat:2> * <var:b> /\ <var:s0> = <nat:1> /\ <var:N> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:s0> = <nat:1> /\ <var:N> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:N> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 