\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:1> ; <var:G> := <var:W0> \end{verbatim} Allowing that $ <var:n> = <var:S> $ prior to evaluating this list of commands , it follows that we have $ <var:G> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is shown by standard Hoare logic . After , \begin{verbatim} { <var:n> = <var:S> } <var:W0> := <nat:1> { <var:n> = <var:S> \land <var:W0> = <nat:1> } \end{verbatim} This is shown by the binding inference rule in standard Hoare reasoning . Moving forward to the proceeding command found in our segment of code , \begin{verbatim} { <var:n> = <var:S> } <var:W0> := <nat:1> { <var:n> = <var:S> \land <var:W0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <var:W0> := <nat:1> ; <var:G> := <var:W0> {{ <var:G> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:G> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 