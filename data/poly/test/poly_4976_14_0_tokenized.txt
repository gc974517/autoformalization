\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:h> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:h> ; <var:g2> := <var:g2> * <var:h> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:H> := <var:g3> ; <var:H> := <var:H> + <var:g2> ; <var:H> := <var:H> + <var:g1> ; <var:H> := <var:H> + <var:g0> \end{verbatim} Given it to hold that $ <var:h> = <var:C> $ , taking positive integers $ <var:C> $ , before executing our code , it holds that $ <var:H> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:8> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives us : \begin{eqnarray} \{ <var:h> = <var:C> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:9> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \} \\ <var:g1> := <var:g1> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \} \\ <var:g2> := <nat:8> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \} \\ <var:g2> := <var:g2> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> \} \\ <var:g2> := <var:g2> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \} \\ <var:g3> := <nat:1> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \land <var:g3> = <nat:1> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:C> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:C> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:h> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:C> ^ <nat:3> \} \\ <var:H> := <var:g3> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:g2> = <nat:8> \cdot <var:C> ^ <nat:2> \land <var:H> = <nat:1> \cdot <var:C> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:g2> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:g1> = <nat:9> \cdot <var:C> \land <var:H> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:8> \cdot <var:C> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:g1> ; \\ \{ <var:h> = <var:C> \land <var:g0> = <nat:8> \land <var:H> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:8> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> \} \\ <var:H> := <var:H> + <var:g0> \\ \{ <var:h> = <var:C> \land <var:H> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:8> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> + <nat:8> \} \end{eqnarray} As a result , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <var:g0> := <nat:8> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:h> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:h> ; <var:g2> := <var:g2> * <var:h> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:g3> := <var:g3> * <var:h> ; <var:H> := <var:g3> ; <var:H> := <var:H> + <var:g2> ; <var:H> := <var:H> + <var:g1> ; <var:H> := <var:H> + <var:g0> {{ <var:H> = <nat:1> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:g3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:g2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:H> = <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:9> * <var:C> /\ <var:H> = <nat:1> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:g0> = <nat:8> /\ <var:H> = <nat:1> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:H> = <nat:1> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 