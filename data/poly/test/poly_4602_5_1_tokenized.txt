\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:z> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:7> ; <var:q> := <var:d1> <var:q> := <var:q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allowing that $ <var:z> = <var:k> $ for some $ <var:k> \in \mathbb{Z}^+ $ before executing the segment of code it holds that we have $ <var:q> = <nat:7> * <var:k> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is done by Hoare logic . Stepping through , \begin{eqnarray} \{ <var:z> = <var:k> \} \, <var:d1> := <var:z> \, \{ <var:z> = <var:k> \land <var:d1> = <var:k> \} \\ \{ <var:z> = <var:k> \land <var:d1> = <var:k> \} \, <var:d0> := <nat:5> \, \{ <var:z> = <var:k> \land <var:d1> = <var:k> \land <var:d0> = <nat:5> \} \\ \{ <var:z> = <var:k> \land <var:d1> = <var:k> \land <var:d0> = <nat:5> \} \, <var:d1> := <var:d1> * <nat:7> \, \{ <var:z> = <var:k> \land <var:d1> = <nat:7> * <var:k> \land <var:d0> = <nat:5> \} \\ \{ <var:z> = <var:k> \land <var:d1> = <nat:7> * <var:k> \land <var:d0> = <nat:5> \} \, <var:q> := <var:d1\, \{ <var:z> = <var:k> \land <var:d0> = <nat:5> \land <var:q> = <nat:7> * <var:k> \} \end{eqnarray} Focusing on the upcoming command contained in the code , we see \begin{eqnarray} \{ <var:z> = <var:k> \} \, <var:d1> := <var:z> \, \{ <var:z> = <var:k> \land <var:d1> = <var:k> \} \end{eqnarray} This is guaranteed using the binding rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:z> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:7> ; <var:q> := <var:d1> <var:q> := <var:q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <def:poly> {{ <var:q> = <nat:7> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:d1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:d1> = <var:k> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:d0> = <nat:5> /\ <var:q> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:q> = <nat:7> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 