\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:Y1> := <var:x> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:b> := <var:Y1> <var:b> := <var:b> + <var:Y0> \end{verbatim} Assume $ <var:x> = <var:C> $ prior to the execution of this list of instructions it holds that $ <var:b> = <nat:7> \cdot <var:C> + <nat:3> $ when set of commands has finished executing . \end{theorem} \begin{proof} The proof of the list of instructions is clear using usual Hoare techniques . After , we have \begin{eqnarray} \{ <var:x> = <var:C> \} \, <var:Y1> := <var:x> \, \{ <var:x> = <var:C> \land <var:Y1> = <var:C> \} \\ \{ <var:x> = <var:C> \land <var:Y1> = <var:C> \} \, <var:Y0> := <nat:3> \, \{ <var:x> = <var:C> \land <var:Y1> = <var:C> \land <var:Y0> = <nat:3> \} \\ \{ <var:x> = <var:C> \land <var:Y1> = <var:C> \land <var:Y0> = <nat:3> \} \, <var:Y1> := <var:Y1> * <nat:7> \, \{ <var:x> = <var:C> \land <var:Y1> = <nat:7> \times <var:C> \land <var:Y0> = <nat:3> \} \\ \{ <var:x> = <var:C> \land <var:Y1> = <nat:7> \times <var:C> \land <var:Y0> = <nat:3> \} \, <var:b> := <var:Y1\, \{ <var:x> = <var:C> \land <var:Y0> = <nat:3> \land <var:b> = <nat:7> \times <var:C> \} \end{eqnarray} Stepping forward , \begin{eqnarray} \{ <var:x> = <var:C> \} \, <var:Y1> := <var:x> \, \{ <var:x> = <var:C> \land <var:Y1> = <var:C> \} \end{eqnarray} This is shown by the variable update law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:x> = <var:C> }} <var:Y1> := <var:x> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:b> := <var:Y1> <var:b> := <var:b> + <var:Y0> {{ <var:b> = <nat:7> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:Y1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:Y1> = <var:C> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:Y1> = <nat:7> * <var:C> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:b> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:b> = <nat:7> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 