\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:M> ; <var:G> := <nat:1> + <var:G> * <var:M> ; <var:G> := <nat:4> + <var:G> * <var:M> ; <var:G> := <nat:2> + <var:G> * <var:M> ; <var:G> := <nat:1> + <var:G> * <var:M> ; <var:G> := <var:G> * <var:M> ; <var:G> := <nat:2> + <var:G> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:M> = <var:o> $ --- for every integers $ <var:o> $ --- prior to the execution of the set of commands , then we see $ <var:G> = <nat:1> \times <var:o> ^ <nat:7> + <nat:2> \times <var:o> ^ <nat:6> + <nat:1> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:2> $ when program has finished . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is done through the below decorated code . \begin{eqnarray} \{ <var:M> = <var:o> \} \\ <var:G> := <nat:1> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> \} \\ <var:G> := <nat:2> + <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> \} \\ <var:G> := <nat:4> + <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> \} \\ <var:G> := <nat:2> + <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> \} \\ <var:G> := <nat:1> + <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> \} \\ <var:G> := <var:G> * <var:M> ; \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + \} \\ <var:G> := <nat:2> + <var:G> * <var:M> \\ \{ <var:M> = <var:o> \land <var:G> = <nat:1> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:M> ; <var:G> := <nat:1> + <var:G> * <var:M> ; <var:G> := <nat:4> + <var:G> * <var:M> ; <var:G> := <nat:2> + <var:G> * <var:M> ; <var:G> := <nat:1> + <var:G> * <var:M> ; <var:G> := <var:G> * <var:M> ; <var:G> := <nat:2> + <var:G> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:M> = <var:o> }} <def:poly> {{ <var:G> = <nat:1> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G> = <nat:1> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 