\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:s0> := <nat:4> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:e> ; <var:s2> := <var:s2> * <var:e> ; <var:s3> := <nat:7> ; <var:s3> := <var:s3> * <var:e> ; <var:s3> := <var:s3> * <var:e> ; <var:s3> := <var:s3> * <var:e> ; <var:m> := <var:s3> ; <var:m> := <var:m> + <var:s2> ; <var:m> := <var:m> + <var:s0> \end{verbatim} Allowing $ <var:e> = <var:G> $ ahead of executing the series of commands , then we have $ <var:m> = <nat:7> \times <var:G> ^ <nat:3> + <nat:3> \times <var:G> ^ <nat:2> + <nat:4> $ when program has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is done through standard Hoare techniques . Moving on to the upcoming statements contained in our series of instructions , we have \begin{eqnarray} \{ <var:e> = <var:G> \} \, <var:s0> := <nat:4> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \, <var:s2> := <nat:3> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> \} \end{eqnarray} This is shown to be logically sound with the environment update inference rule from usual Hoare logic . Moving on to the proceeding lines of codein the list of instructions , we have \begin{eqnarray} \{ <var:e> = <var:G> \} \, <var:s0> := <nat:4> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \, <var:s2> := <nat:3> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> \} \, <var:s2> := <var:s2> * <var:e> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> \} \, <var:s2> := <var:s2> * <var:e> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> ^ <nat:2> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> ^ <nat:2> \} \, <var:s3> := <nat:7> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> ^ <nat:2> \land <var:s3> = <nat:7> \} \end{eqnarray} This is known to be sound using the environment update inference rule in Hoare techniques . Stepping forward , we see \begin{eqnarray} \{ <var:e> = <var:G> \} \, <var:s0> := <nat:4> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \} \, <var:s2> := <nat:3> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> \} \, <var:s2> := <var:s2> * <var:e> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> \} \\ \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> \} \, <var:s2> := <var:s2> * <var:e> \, \{ <var:e> = <var:G> \land <var:s0> = <nat:4> \land <var:s2> = <nat:3> * <var:G> ^ <nat:2> \} \end{eqnarray} This is rigorously given with the scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:e> = <var:G> }} <var:s0> := <nat:4> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:e> ; <var:s2> := <var:s2> * <var:e> ; <var:s3> := <nat:7> ; <var:s3> := <var:s3> * <var:e> ; <var:s3> := <var:s3> * <var:e> ; <var:s3> := <var:s3> * <var:e> ; <var:m> := <var:s3> ; <var:m> := <var:m> + <var:s2> ; <var:m> := <var:m> + <var:s0> {{ <var:m> = <nat:7> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:s3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:s2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:m> = <nat:7> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:s0> = <nat:4> /\ <var:m> = <nat:7> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:m> = <nat:7> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 