\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:8> ; <var:n> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given that we have $ <var:I> = <var:Z> $ ahead of executing the list of commands , it must be that we see $ <var:n> = <nat:8> $ once code has finished . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is clear by Hoare techniques . Focusing on the next line in our segment of code , we have the assignment command \verb | <var:c0> := <nat:8> ; | . This line takes $ \{ <var:I> = <var:Z> \} $ as the condition $ \{ <var:I> = <var:Z> \land <var:c0> = <nat:8> \} $ . Advancing on , we see the variable assignmet command \verb | <var:n> := <var:c0> | . This moves the precondition $ \{ <var:I> = <var:Z> \land <var:c0> = <nat:8> \} $ into the postcondition $ \{ <var:I> = <var:Z> \land <var:n> = <nat:8> \} $ . This is known to be sound by the assignment scheme found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:8> ; <var:n> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 