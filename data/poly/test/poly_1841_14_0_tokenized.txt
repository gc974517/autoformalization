\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:T0> := <nat:6> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:c> ; <var:T2> := <nat:5> ; <var:T2> := <var:T2> * <var:c> ; <var:T2> := <var:T2> * <var:c> ; <var:T3> := <nat:1> ; <var:T3> := <var:T3> * <var:c> ; <var:T3> := <var:T3> * <var:c> ; <var:T3> := <var:T3> * <var:c> ; <var:e> := <var:T3> ; <var:e> := <var:e> + <var:T2> ; <var:e> := <var:e> + <var:T1> ; <var:e> := <var:e> + <var:T0> \end{verbatim} Assuming that we have $ <var:c> = <var:r> $ ( for natural numbers $ <var:r> $ ) prior to executing the set of commands , it follows that we see $ <var:e> = <nat:1> \cdot <var:r> ^ <nat:3> + <nat:5> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands can be seen with Hoare techniques . Now , we see \verb | { <var:c> = <var:r> } <var:T0> := <nat:6> { <var:c> = <var:r> \land <var:T0> = <nat:6> } | , \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> } <var:T1> := <nat:2> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } | , \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } <var:T1> := <var:T1> * <var:c> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> } | and \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> } <var:T2> := <nat:5> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> \land <var:T2> = <nat:5> } | . This is rigorously given with the variable update scheme given by standard Hoare reasoning . Taking another step toward the upcoming commands found in our list of commands , we have \verb | { <var:c> = <var:r> } <var:T0> := <nat:6> { <var:c> = <var:r> \land <var:T0> = <nat:6> } | , \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> } <var:T1> := <nat:2> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } | , \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } <var:T1> := <var:T1> * <var:c> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> } | , \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> } <var:T2> := <nat:5> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> \land <var:T2> = <nat:5> } | and \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> \land <var:T2> = <nat:5> } <var:T2> := <var:T2> * <var:c> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> * <var:r> \land <var:T2> = <nat:5> * <var:r> } | . Moving on , we have \verb | { <var:c> = <var:r> } <var:T0> := <nat:6> { <var:c> = <var:r> \land <var:T0> = <nat:6> } | and \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> } <var:T1> := <nat:2> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } | . Taking a look at the proceeding pieces of code seen in the segment of code , we see \verb | { <var:c> = <var:r> } <var:T0> := <nat:6> { <var:c> = <var:r> \land <var:T0> = <nat:6> } | and \verb | { <var:c> = <var:r> \land <var:T0> = <nat:6> } <var:T1> := <nat:2> { <var:c> = <var:r> \land <var:T0> = <nat:6> \land <var:T1> = <nat:2> } | . Paying attention to the next command seen in the list of instructions , \verb | { <var:c> = <var:r> } <var:T0> := <nat:6> { <var:c> = <var:r> \land <var:T0> = <nat:6> } | . This is deduced by the variable assignmet law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:c> = <var:r> }} <var:T0> := <nat:6> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:c> ; <var:T2> := <nat:5> ; <var:T2> := <var:T2> * <var:c> ; <var:T2> := <var:T2> * <var:c> ; <var:T3> := <nat:1> ; <var:T3> := <var:T3> * <var:c> ; <var:T3> := <var:T3> * <var:c> ; <var:T3> := <var:T3> * <var:c> ; <var:e> := <var:T3> ; <var:e> := <var:e> + <var:T2> ; <var:e> := <var:e> + <var:T1> ; <var:e> := <var:e> + <var:T0> {{ <var:e> = <nat:1> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:T3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:T2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:e> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:2> * <var:r> /\ <var:e> = <nat:1> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:T0> = <nat:6> /\ <var:e> = <nat:1> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:e> = <nat:1> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 