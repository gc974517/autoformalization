\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:g0> := <nat:1> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:W> ; <var:g2> := <var:g2> * <var:W> ; <var:g4> := <nat:4> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:Q> := <var:g4> ; <var:Q> := <var:Q> + <var:g2> ; <var:Q> := <var:Q> + <var:g0> \end{verbatim} Allow that we have $ <var:W> = <var:M> $ for every $ <var:M> \in \mathbb{Z}^+ $ prior to executing the list of instructions it follows that we see $ <var:Q> = <nat:4> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be shown using Hoare logic . Moving forward , we have \verb | { <var:W> = <var:M> } <var:g0> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> } | , \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> } <var:g2> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> } | and \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> } <var:g2> := <var:g2> * <var:W> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> } | . Moving on , \verb | { <var:W> = <var:M> } <var:g0> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> } | , \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> } <var:g2> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> } | , \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> } <var:g2> := <var:g2> * <var:W> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> } | , \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> } <var:g2> := <var:g2> * <var:W> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> ^ <nat:2> } | , \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> ^ <nat:2> } <var:g4> := <nat:4> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:g4> = <nat:4> } | and \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:g4> = <nat:4> } <var:g4> := <var:g4> * <var:W> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> \cdot <var:M> ^ <nat:2> \land <var:g4> = <nat:4> \cdot <var:M> } | . Focusing on the proceeding bit of code in the series of commands , we see \verb | { <var:W> = <var:M> } <var:g0> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> } | . This is shown to be logically sound by the binding rule from usual Hoare reasoning . Focusing on the subsequent commands seen in the set of commands , \verb | { <var:W> = <var:M> } <var:g0> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> } | and \verb | { <var:W> = <var:M> \land <var:g0> = <nat:1> } <var:g2> := <nat:1> { <var:W> = <var:M> \land <var:g0> = <nat:1> \land <var:g2> = <nat:1> } | . This is shown to be logically sound using the variable assignmet law found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:W> = <var:M> }} <var:g0> := <nat:1> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:W> ; <var:g2> := <var:g2> * <var:W> ; <var:g4> := <nat:4> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:g4> := <var:g4> * <var:W> ; <var:Q> := <var:g4> ; <var:Q> := <var:Q> + <var:g2> ; <var:Q> := <var:Q> + <var:g0> {{ <var:Q> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:g4> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:g4> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:g4> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:g4> = <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:g4> = <nat:4> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:Q> = <nat:4> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:g0> = <nat:1> /\ <var:Q> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:Q> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 