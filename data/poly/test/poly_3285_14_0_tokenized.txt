\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:f> ; <var:C2> := <nat:5> ; <var:C2> := <var:C2> * <var:f> ; <var:C2> := <var:C2> * <var:f> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:f> ; <var:C3> := <var:C3> * <var:f> ; <var:C3> := <var:C3> * <var:f> ; <var:w> := <var:C3> ; <var:w> := <var:w> + <var:C2> ; <var:w> := <var:w> + <var:C1> ; <var:w> := <var:w> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:f> = <var:d> $ taking natural numbers $ <var:d> $ before the execution of this segment of code it holds that $ <var:w> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:5> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> + <nat:5> $ after list of instructions is done . \end{theorem} \begin{proof} The flow of logic for our segment of code can be accomplished with Hoare reasoning . Taking another step toward the proceeding pieces of code in our segment of code , \verb | { <var:f> = <var:d> } <var:C0> := <nat:5> { <var:f> = <var:d> \land <var:C0> = <nat:5> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> } <var:C1> := <nat:9> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> } <var:C1> := <var:C1> * <var:f> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> } <var:C2> := <nat:5> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> } <var:C2> := <var:C2> * <var:f> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> } <var:C2> := <var:C2> * <var:f> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> ^ <nat:2> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> ^ <nat:2> } <var:C3> := <nat:4> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> ^ <nat:2> \land <var:C3> = <nat:4> } | and \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> ^ <nat:2> \land <var:C3> = <nat:4> } <var:C3> := <var:C3> * <var:f> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> \land <var:C2> = <nat:5> \times <var:d> ^ <nat:2> \land <var:C3> = <nat:4> \times <var:d> } | . This is deduced with the variable update rule in usual Hoare logic . Keeping momentum , \verb | { <var:f> = <var:d> } <var:C0> := <nat:5> { <var:f> = <var:d> \land <var:C0> = <nat:5> } | , \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> } <var:C1> := <nat:9> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> } | and \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> } <var:C1> := <var:C1> * <var:f> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> \times <var:d> } | . Moving on to the proceeding pieces of code found in our code , we have \verb | { <var:f> = <var:d> } <var:C0> := <nat:5> { <var:f> = <var:d> \land <var:C0> = <nat:5> } | and \verb | { <var:f> = <var:d> \land <var:C0> = <nat:5> } <var:C1> := <nat:9> { <var:f> = <var:d> \land <var:C0> = <nat:5> \land <var:C1> = <nat:9> } | . Going forward , we see \verb | { <var:f> = <var:d> } <var:C0> := <nat:5> { <var:f> = <var:d> \land <var:C0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C1> := <nat:9> ; <var:C1> := <var:C1> * <var:f> ; <var:C2> := <nat:5> ; <var:C2> := <var:C2> * <var:f> ; <var:C2> := <var:C2> * <var:f> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:f> ; <var:C3> := <var:C3> * <var:f> ; <var:C3> := <var:C3> * <var:f> ; <var:w> := <var:C3> ; <var:w> := <var:w> + <var:C2> ; <var:w> := <var:w> + <var:C1> ; <var:w> := <var:w> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:f> = <var:d> }} <def:poly> {{ <var:w> = <nat:4> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:C2> = <nat:5> * <var:d> ^ <nat:2> /\ <var:w> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:9> * <var:d> /\ <var:w> = <nat:4> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:C0> = <nat:5> /\ <var:w> = <nat:4> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:w> = <nat:4> * <var:d> ^ <nat:3> + <nat:5> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 