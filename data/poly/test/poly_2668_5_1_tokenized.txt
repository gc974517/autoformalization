\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:q1> := <var:h> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:8> ; <var:w> := <var:q1> <var:w> := <var:w> + <var:q0> \end{verbatim} Assume that $ <var:h> = <var:t> $ ahead of interpreting the series of instructions , it holds that we have $ <var:w> = <nat:8> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be accomplished using typical Hoare techniques . Moving on to the next steps contained in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:h> = <var:t> \} & <var:q1> := <var:h> & \{ <var:h> = <var:t> \land <var:q1> = <var:t> \} \\ \{ <var:h> = <var:t> \land <var:q1> = <var:t> \} & <var:q0> := <nat:3> & \{ <var:h> = <var:t> \land <var:q1> = <var:t> \land <var:q0> = <nat:3> \} \\ \{ <var:h> = <var:t> \land <var:q1> = <var:t> \land <var:q0> = <nat:3> \} & <var:q1> := <var:q1> * <nat:8> & \{ <var:h> = <var:t> \land <var:q1> = <nat:8> * <var:t> \land <var:q0> = <nat:3> \} \\ \{ <var:h> = <var:t> \land <var:q1> = <nat:8> * <var:t> \land <var:q0> = <nat:3> \} & <var:w> := <var:q1& \{ <var:h> = <var:t> \land <var:q0> = <nat:3> \land <var:w> = <nat:8> * <var:t> \} \\ \{ <var:h> = <var:t> \land <var:q0> = <nat:3> \land <var:w> = <nat:8> * <var:t> \} & <var:w> := <var:w> + <var:q0& \{ <var:h> = <var:t> \land <var:w> = <nat:8> * <var:t> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <var:q1> := <var:h> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:8> ; <var:w> := <var:q1> <var:w> := <var:w> + <var:q0> {{ <var:w> = <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:q1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:q1> = <var:t> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:q1> = <nat:8> * <var:t> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:q0> = <nat:3> /\ <var:w> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 