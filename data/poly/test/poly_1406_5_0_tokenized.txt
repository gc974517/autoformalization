\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:u> ; <var:f> := <var:T1> ; <var:f> := <var:f> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:u> = <var:a> $ , for positive integers $ <var:a> $ , before evaluating our code segment it must be that we have $ <var:f> = <nat:9> \times <var:a> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code can be given by Hoare techniques . Advancing on , we see the line assigning $ <nat:5> $ toward $ <var:T0>$ . This transfers the precondition $ \{ <var:u> = <var:a> \} $ as the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \} $ . This is guaranteed through the assignment scheme obtained from typical Hoare reasoning . Looking at the upcoming bit of code in the series of instructions , the variable assignmet code giving $ <nat:9> $ toward $ <var:T1>$ . This line moves the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \} $ into the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \} $ . Observing the upcoming bit of code seen in our code , we see the variable update line \verb | <var:T1> := <var:T1> * <var:u> ; | . This transfers $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \} $ into the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \times <var:a> \} $ . Immediately after , we have the code \verb | <var:f> := <var:T1> ; | . This takes the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:T1> = <nat:9> \times <var:a> \} $ toward $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:f> = <nat:9> \times <var:a> \} $ . Moving forward , the variable assignmet line giving $ <var:f> + <var:T0$ as $ <var:f>$ . This forwards the condition $ \{ <var:u> = <var:a> \land <var:T0> = <nat:5> \land <var:f> = <nat:9> \times <var:a> \} $ as the condition $ \{ <var:u> = <var:a> \land <var:f> = <nat:9> \times <var:a> + <nat:5> \} $ . This is shown with the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:u> ; <var:f> := <var:T1> ; <var:f> := <var:f> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <def:poly> {{ <var:f> = <nat:9> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:T0> = <nat:5> /\ <var:f> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:f> = <nat:9> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 