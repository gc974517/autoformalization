\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:9> ; <var:n> := <var:l2> <var:n> := <var:n> + <var:l1> <var:n> := <var:n> + <var:l0> \end{verbatim} Allowing it to be that $ <var:R> = <var:F> $ --- given some integers $ <var:F> $ --- before executing this set of instructions then we see $ <var:n> = <nat:9> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:1> $ once code segment finishes . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is clear with standard Hoare techniques . Observing the subsequent steps found in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:R> = <var:F> \} & <var:l1> := <var:R> & \{ <var:R> = <var:F> \land <var:l1> = <var:F> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <var:F> \} & <var:l2> := <var:l1> * <var:R> & \{ <var:R> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \} & <var:l0> := <nat:1> & \{ <var:R> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} & <var:l1> := <var:l1> * <nat:8> & \{ <var:R> = <var:F> \land <var:l1> = <nat:8> \times <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <nat:8> \times <var:F> \land <var:l2> = <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} & <var:l2> := <var:l2> * <nat:9> & \{ <var:R> = <var:F> \land <var:l1> = <nat:8> \times <var:F> \land <var:l2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <nat:8> \times <var:F> \land <var:l2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:l0> = <nat:1> \} & <var:n> := <var:l2& \{ <var:R> = <var:F> \land <var:l1> = <nat:8> \times <var:F> \land <var:l0> = <nat:1> \land <var:n> = <nat:9> \times <var:F> ^ <nat:2> \} \end{tabular} This is guaranteed through the variable binding inference rule defined by typical Hoare techniques . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:F> \} & <var:l1> := <var:R> & \{ <var:R> = <var:F> \land <var:l1> = <var:F> \} \\ \{ <var:R> = <var:F> \land <var:l1> = <var:F> \} & <var:l2> := <var:l1> * <var:R> & \{ <var:R> = <var:F> \land <var:l1> = <var:F> \land <var:l2> = <var:F> ^ <nat:2> \} \end{tabular} This is rigorously given using the variable assignmet scheme of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:R> = <var:F> }} <var:l1> := <var:R> ; <var:l2> := <var:l1> * <var:R> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:8> ; <var:l2> := <var:l2> * <nat:9> ; <var:n> := <var:l2> <var:n> := <var:n> + <var:l1> <var:n> := <var:n> + <var:l0> {{ <var:n> = <nat:9> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <var:F> /\ <var:l2> = <var:F> ^ <nat:2> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <nat:8> * <var:F> /\ <var:l2> = <var:F> ^ <nat:2> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <nat:8> * <var:F> /\ <var:l2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l1> = <nat:8> * <var:F> /\ <var:l0> = <nat:1> /\ <var:n> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:l0> = <nat:1> /\ <var:n> = <nat:9> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:n> = <nat:9> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 