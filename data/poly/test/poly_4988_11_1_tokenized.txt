\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:b> ; <var:N2> := <var:N1> * <var:b> ; <var:N3> := <var:N2> * <var:b> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:3> ; <var:N3> := <var:N3> * <nat:3> ; <var:y> := <var:N3> <var:y> := <var:y> + <var:N2> <var:y> := <var:y> + <var:N1> <var:y> := <var:y> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing --- for positive integers $ <var:Z> $ --- it to hold that $ <var:b> = <var:Z> $ ahead of executing the program it follows that $ <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is evident through standard Hoare techniques . Moving on , we have the line binding $ <var:b> $ to $ <var:N1>$ . This transfers $ \{ <var:b> = <var:Z> \} $ as the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \} $ . Observing the subsequent statement seen in our series of commands , the environment update command yielding $ <var:N1> * <var:b> $ toward $ <var:N2>$ . This statement advances $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \} $ to the postcondition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \} $ . This is known to be sound with the assignment law given by standard Hoare logic . Observing the upcoming line seen in the program , we have the environment update code \verb | <var:N3> := <var:N2> * <var:b> ; | . This transfers the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \} $ . This is ensured through the assignment scheme of typical Hoare techniques . Moving on , we have the binding line defining $ <nat:7> $ as $ <var:N0>$ . This line forwards the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \} $ as the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ . This is ensured with the assignment rule given in standard Hoare reasoning . Immediately following , we see the assignment command giving $ <var:N1> * <nat:4> $ toward $ <var:N1>$ . This statement transfers $ \{ <var:b> = <var:Z> \land <var:N1> = <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ as the postcondition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ . This is ensured through the assignment law from Hoare techniques . Advancing on , the variable update command \verb | <var:N2> := <var:N2> * <nat:3> ; | . This command moves the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ toward the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ . This is sound using the assignment rule defined by usual Hoare logic . Moving onward , we have the statement giving $ <var:N3> * <nat:3> $ into $ <var:N3>$ . This redefines the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N3> = <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ toward the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ . This is guaranteed using the assignment inference rule obtained from typical Hoare logic . Honing in on the next bit of code seen in the program , we have the variable assignmet command yielding $ <var:N3$ into $ <var:y>$ . This code redefines the precondition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:Z> ^ <nat:3> \land <var:N0> = <nat:7> \} $ to the postcondition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> \} $ . Immediately after , we see the environment update code letting $ <var:y> + <var:N2$ into $ <var:y>$ . This takes the precondition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N2> = <nat:3> \times <var:Z> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> \} $ . This is shown using the assignment law obtained from Hoare reasoning . Moving onward , the statement defining $ <var:y> + <var:N1$ to $ <var:y>$ . This redefines the condition $ \{ <var:b> = <var:Z> \land <var:N1> = <nat:4> \times <var:Z> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> \} $ into the postcondition $ \{ <var:b> = <var:Z> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} $ . This is deduced with the assignment rule defined in typical Hoare logic . Immediately following , the command assigning $ <var:y> + <var:N0$ as $ <var:y>$ . This forwards the condition $ \{ <var:b> = <var:Z> \land <var:N0> = <nat:7> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} $ toward $ \{ <var:b> = <var:Z> \land <var:y> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:7> \} $ . This is shown through the assignment inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:b> ; <var:N2> := <var:N1> * <var:b> ; <var:N3> := <var:N2> * <var:b> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:3> ; <var:N3> := <var:N3> * <nat:3> ; <var:y> := <var:N3> <var:y> := <var:y> + <var:N2> <var:y> := <var:y> + <var:N1> <var:y> := <var:y> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:b> = <var:Z> }} <def:poly> {{ <var:y> = <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <var:Z> /\ <var:N2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <var:Z> /\ <var:N2> = <var:Z> ^ <nat:2> /\ <var:N3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <var:Z> /\ <var:N2> = <var:Z> ^ <nat:2> /\ <var:N3> = <var:Z> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <nat:4> * <var:Z> /\ <var:N2> = <var:Z> ^ <nat:2> /\ <var:N3> = <var:Z> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <nat:4> * <var:Z> /\ <var:N2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:N3> = <var:Z> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <nat:4> * <var:Z> /\ <var:N2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <nat:4> * <var:Z> /\ <var:N2> = <nat:3> * <var:Z> ^ <nat:2> /\ <var:N0> = <nat:7> /\ <var:y> = <nat:3> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N1> = <nat:4> * <var:Z> /\ <var:N0> = <nat:7> /\ <var:y> = <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:N0> = <nat:7> /\ <var:y> = <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:y> = <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 