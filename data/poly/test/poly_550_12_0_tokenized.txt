\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:5> ; <var:l2> := <nat:9> ; <var:l2> := <var:l2> * <var:j> ; <var:l2> := <var:l2> * <var:j> ; <var:l4> := <nat:7> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:D> := <var:l4> ; <var:D> := <var:D> + <var:l2> ; <var:D> := <var:D> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allowing that we have $ <var:j> = <var:a> $ --- assuming some natural coefficients $ <var:a> $ --- before executing this code then $ <var:D> = <nat:7> \cdot <var:a> ^ <nat:4> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:5> $ after series of commands is done executing . \end{theorem} \begin{proof} The proof of the segment of code is demonstrated through Hoare logic . Going forward , \begin{verbatim} { <var:j> = <var:a> } <var:l0> := <nat:5> { <var:j> = <var:a> \land <var:l0> = <nat:5> } { <var:j> = <var:a> \land <var:l0> = <nat:5> } <var:l2> := <nat:9> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> } <var:l2> := <var:l2> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> } <var:l2> := <var:l2> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> } <var:l4> := <nat:7> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> } <var:l4> := <var:l4> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> } <var:l4> := <var:l4> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:2> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:2> } <var:l4> := <var:l4> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:3> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:3> } <var:l4> := <var:l4> * <var:j> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:4> } { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:l4> = <nat:7> * <var:a> ^ <nat:4> } <var:D> := <var:l4> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> * <var:a> ^ <nat:2> \land <var:D> = <nat:7> * <var:a> ^ <nat:4> } \end{verbatim} This is known to be sound by the variable binding scheme defined in usual Hoare techniques . Stepping through , we have \begin{verbatim} { <var:j> = <var:a> } <var:l0> := <nat:5> { <var:j> = <var:a> \land <var:l0> = <nat:5> } { <var:j> = <var:a> \land <var:l0> = <nat:5> } <var:l2> := <nat:9> { <var:j> = <var:a> \land <var:l0> = <nat:5> \land <var:l2> = <nat:9> } \end{verbatim} This is ensured through the scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l4> : string := " <var:l4> " . Definition <def:poly> := <var:l0> := <nat:5> ; <var:l2> := <nat:9> ; <var:l2> := <var:l2> * <var:j> ; <var:l2> := <var:l2> * <var:j> ; <var:l4> := <nat:7> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:l4> := <var:l4> * <var:j> ; <var:D> := <var:l4> ; <var:D> := <var:D> + <var:l2> ; <var:D> := <var:D> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:j> = <var:a> }} <def:poly> {{ <var:D> = <nat:7> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:l4> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:l4> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:l4> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:l4> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:l4> = <nat:7> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:l2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:D> = <nat:7> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:l0> = <nat:5> /\ <var:D> = <nat:7> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:D> = <nat:7> * <var:a> ^ <nat:4> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 