\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:6> ; <var:T> := <var:g3> <var:T> := <var:T> + <var:g2> <var:T> := <var:T> + <var:g1> <var:T> := <var:T> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:H> = <var:m> $ prior to the evaluation of our program , it must be that we see $ <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:9> \times <var:m> + <nat:9> $ after segment of code has finished . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be accomplished through standard Hoare techniques . Keeping momentum , we have the assignment statement \verb | <var:g1> := <var:H> ; | . This code advances the condition $ \{ <var:H> = <var:m> \} $ into $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \} $ . This is guaranteed through the assignment inference rule obtained from usual Hoare techniques . Taking a look at the subsequent step contained in the list of commands , we have the assignment statement assigning $ <var:g1> * <var:H> $ toward $ <var:g2>$ . This redefines the precondition $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \} $ as $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \} $ . This is shown by the assignment rule of typical Hoare techniques . Moving on to the subsequent statement found in the code , the environment update code yielding $ <var:g2> * <var:H> $ into $ <var:g3>$ . This redefines the precondition $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \} $ . This is rigorously given using the assignment inference rule from typical Hoare techniques . Following , we have the variable assignmet command \verb | <var:g0> := <nat:9> ; | . This advances $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \} $ to the postcondition $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . Immediately following , we see the assignment statement \verb | <var:g1> := <var:g1> * <nat:9> ; | . This redefines the precondition $ \{ <var:H> = <var:m> \land <var:g1> = <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ as the condition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . Taking another step toward the following command contained in the series of instructions , the variable assignmet statement \verb | <var:g2> := <var:g2> * <nat:3> ; | . This line redefines $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ to the postcondition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . Moving onward , we see the variable update line \verb | <var:g3> := <var:g3> * <nat:6> ; | . This takes $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g3> = <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ into the postcondition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g3> = <nat:6> \times <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . This is shown to be logically sound with the assignment law obtained from Hoare techniques . Next , we have the environment update statement \verb | <var:T> := <var:g3> | . This code forwards the condition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g3> = <nat:6> \times <var:m> ^ <nat:3> \land <var:g0> = <nat:9> \} $ as the condition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> \} $ . Observing the following statement seen in our code , the assignment line assigning $ <var:T> + <var:g2$ as $ <var:T>$ . This advances the condition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> \} $ . Immediately following , we have the variable update statement defining $ <var:T> + <var:g1$ toward $ <var:T>$ . This forwards the precondition $ \{ <var:H> = <var:m> \land <var:g1> = <nat:9> \times <var:m> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> \} $ to the condition $ \{ <var:H> = <var:m> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:9> \times <var:m> \} $ . Moving forward to the upcoming statement contained in the set of instructions , we see the variable assignmet line defining $ <var:T> + <var:g0$ as $ <var:T>$ . This statement redefines $ \{ <var:H> = <var:m> \land <var:g0> = <nat:9> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:9> \times <var:m> \} $ as $ \{ <var:H> = <var:m> \land <var:T> = <nat:6> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:9> \times <var:m> + <nat:9> \} $ . This is shown with the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:3> ; <var:g3> := <var:g3> * <nat:6> ; <var:T> := <var:g3> <var:T> := <var:T> + <var:g2> <var:T> := <var:T> + <var:g1> <var:T> := <var:T> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:H> = <var:m> }} <def:poly> {{ <var:T> = <nat:6> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <var:m> /\ <var:g2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <var:m> /\ <var:g2> = <var:m> ^ <nat:2> /\ <var:g3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <var:m> /\ <var:g2> = <var:m> ^ <nat:2> /\ <var:g3> = <var:m> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <nat:9> * <var:m> /\ <var:g2> = <var:m> ^ <nat:2> /\ <var:g3> = <var:m> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <nat:9> * <var:m> /\ <var:g2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:g3> = <var:m> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <nat:9> * <var:m> /\ <var:g2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:g3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <nat:9> * <var:m> /\ <var:g2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:g0> = <nat:9> /\ <var:T> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g1> = <nat:9> * <var:m> /\ <var:g0> = <nat:9> /\ <var:T> = <nat:6> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:g0> = <nat:9> /\ <var:T> = <nat:6> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:T> = <nat:6> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 