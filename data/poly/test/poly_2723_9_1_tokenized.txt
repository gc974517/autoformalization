\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:V1> := <var:T> ; <var:V2> := <var:V1> * <var:T> ; <var:V3> := <var:V2> * <var:T> ; <var:V0> := <nat:4> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:2> ; <var:R> := <var:V3> <var:R> := <var:R> + <var:V2> <var:R> := <var:R> + <var:V0> \end{verbatim} Allow that we have $ <var:T> = <var:D> $ ahead of the evaluation of our list of instructions , it must be that $ <var:R> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:4> $ once list of instructions is done . \end{theorem} \begin{proof} The application of usual Hoare reasoning produces : \begin{eqnarray} \{ <var:T> = <var:D> \} \\ <var:V1> := <var:T> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \} \\ <var:V2> := <var:V1> * <var:T> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <var:D> ^ <nat:2> \} \end{eqnarray} Allowing the evaluation of our series of commands gives us : \begin{eqnarray} <var:V3> := <var:V2> * <var:T> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <var:D> ^ <nat:2> \land <var:V3> = <var:D> ^ <nat:3> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <var:D> ^ <nat:2> \land <var:V3> = <var:D> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:V2> := <var:V2> * <nat:9> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:V3> = <var:D> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:V3> := <var:V3> * <nat:2> ; \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:V3> = <nat:2> \cdot <var:D> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:R> := <var:V3> \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:V0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:D> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:V2> \\ \{ <var:T> = <var:D> \land <var:V1> = <var:D> \land <var:V0> = <nat:4> \land <var:R> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:V0> \\ \{ <var:T> = <var:D> \land <var:R> = <nat:2> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a result , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:T> = <var:D> }} <var:V1> := <var:T> ; <var:V2> := <var:V1> * <var:T> ; <var:V3> := <var:V2> * <var:T> ; <var:V0> := <nat:4> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:2> ; <var:R> := <var:V3> <var:R> := <var:R> + <var:V2> <var:R> := <var:R> + <var:V0> {{ <var:R> = <nat:2> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <var:D> ^ <nat:2> /\ <var:V3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <var:D> ^ <nat:2> /\ <var:V3> = <var:D> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:V3> = <var:D> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:V3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:V0> = <nat:4> /\ <var:R> = <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:V1> = <var:D> /\ <var:V0> = <nat:4> /\ <var:R> = <nat:2> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:R> = <nat:2> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 