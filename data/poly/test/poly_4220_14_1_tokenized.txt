\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:d1> := <var:l> ; <var:d2> := <var:d1> * <var:l> ; <var:d3> := <var:d2> * <var:l> ; <var:d4> := <var:d3> * <var:l> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:6> ; <var:d3> := <var:d3> * <nat:6> ; <var:d4> := <var:d4> * <nat:4> ; <var:o> := <var:d4> <var:o> := <var:o> + <var:d3> <var:o> := <var:o> + <var:d2> <var:o> := <var:o> + <var:d1> <var:o> := <var:o> + <var:d0> \end{verbatim} Allowing that $ <var:l> = <var:W> $ ahead of running this series of instructions it follows that we have $ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:5> $ once code segment terminates . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be seen through standard Hoare reasoning . Shifting focus toward the next bit of code in our list of instructions , we have the variable binding command \verb | <var:d1> := <var:l> ; | . This forwards $ \{ <var:l> = <var:W> \} $ to $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \} $ . Stepping through , the variable update code \verb | <var:d2> := <var:d1> * <var:l> ; | . This transfers the condition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \} $ as $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} $ . This is shown using the assignment law defined by typical Hoare techniques . Stepping through , we have the environment update statement assigning $ <var:d2> * <var:l> $ into $ <var:d3>$ . This forwards $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \} $ toward the postcondition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \} $ . Paying attention to the upcoming statement seen in our list of commands , we see the environment update statement assigning $ <var:d3> * <var:l> $ toward $ <var:d4>$ . This command takes the precondition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \} $ . Moving forward to the following bit of code in our list of instructions , the variable binding command \verb | <var:d0> := <nat:5> ; | . This statement redefines the condition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \} $ toward the condition $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ . Moving forward to the subsequent step seen in our segment of code , we have the variable assignmet line giving $ <var:d1> * <nat:5> $ as $ <var:d1>$ . This takes $ \{ <var:l> = <var:W> \land <var:d1> = <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ into the condition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ . Considering the next command in our series of instructions , we see the variable update command yielding $ <var:d2> * <nat:6> $ as $ <var:d2>$ . This command transfers the condition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ toward the condition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ . This is deduced with the assignment scheme given by usual Hoare logic . Advancing on , we see the assignment line \verb | <var:d3> := <var:d3> * <nat:6> ; | . This command takes the precondition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ to $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ . This is rigorously given with the assignment law defined in standard Hoare logic . Focusing on the next command found in the list of instructions , the assignment command \verb | <var:d4> := <var:d4> * <nat:4> ; | . This redefines the precondition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d4> = <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ toward the postcondition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d4> = <nat:4> * <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ . This is guaranteed through the assignment rule from standard Hoare reasoning . Moving on to the following step in our list of commands , the binding command giving $ <var:d4$ toward $ <var:o>$ . This line redefines $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d4> = <nat:4> * <var:W> ^ <nat:4> \land <var:d0> = <nat:5> \} $ into $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> \} $ . Moving onward , we have the code yielding $ <var:o> + <var:d3$ to $ <var:o>$ . This redefines the precondition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d3> = <nat:6> * <var:W> ^ <nat:3> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> \} $ into the condition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> \} $ . This is known to be sound through the assignment inference rule defined in standard Hoare techniques . Shifting focus toward the proceeding step contained in the set of commands , we have the variable binding code giving $ <var:o> + <var:d2$ as $ <var:o>$ . This line takes $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d2> = <nat:6> * <var:W> ^ <nat:2> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> \} $ into the postcondition $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> \} $ . This is rigorously given by the assignment rule in standard Hoare reasoning . Moving on to the next step , we have the assignment command \verb | <var:o> := <var:o> + <var:d1> | . This command transfers $ \{ <var:l> = <var:W> \land <var:d1> = <nat:5> * <var:W> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> \} $ to the condition $ \{ <var:l> = <var:W> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> \} $ . This is known to be sound with the assignment law defined by Hoare reasoning . Honing in on the following bit of code found in our series of instructions , the statement defining $ <var:o> + <var:d0$ toward $ <var:o>$ . This takes the precondition $ \{ <var:l> = <var:W> \land <var:d0> = <nat:5> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> \} $ as $ \{ <var:l> = <var:W> \land <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:5> \} $ . This is deduced using the assignment inference rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <var:d1> := <var:l> ; <var:d2> := <var:d1> * <var:l> ; <var:d3> := <var:d2> * <var:l> ; <var:d4> := <var:d3> * <var:l> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:5> ; <var:d2> := <var:d2> * <nat:6> ; <var:d3> := <var:d3> * <nat:6> ; <var:d4> := <var:d4> * <nat:4> ; <var:o> := <var:d4> <var:o> := <var:o> + <var:d3> <var:o> := <var:o> + <var:d2> <var:o> := <var:o> + <var:d1> <var:o> := <var:o> + <var:d0> {{ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d3> = <var:W> ^ <nat:3> /\ <var:d4> = <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d3> = <var:W> ^ <nat:3> /\ <var:d4> = <var:W> ^ <nat:4> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <var:W> ^ <nat:2> /\ <var:d3> = <var:W> ^ <nat:3> /\ <var:d4> = <var:W> ^ <nat:4> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:d3> = <var:W> ^ <nat:3> /\ <var:d4> = <var:W> ^ <nat:4> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:d4> = <var:W> ^ <nat:4> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:d4> = <nat:4> * <var:W> ^ <nat:4> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:W> ^ <nat:3> /\ <var:d0> = <nat:5> /\ <var:o> = <nat:4> * <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:d0> = <nat:5> /\ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d1> = <nat:5> * <var:W> /\ <var:d0> = <nat:5> /\ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:d0> = <nat:5> /\ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:o> = <nat:4> * <var:W> ^ <nat:4> + <nat:6> * <var:W> ^ <nat:3> + <nat:6> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 