\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:k> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:k> ; <var:g2> := <var:g2> * <var:k> ; <var:g3> := <nat:9> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:S> := <var:g3> ; <var:S> := <var:S> + <var:g2> ; <var:S> := <var:S> + <var:g1> ; <var:S> := <var:S> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:k> = <var:s> $ ( taking positive coefficients $ <var:s> $ ) ahead of the evaluation of our segment of code , then we see $ <var:S> = <nat:9> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this code can be given through this decorated set of instructions . \begin{eqnarray} \{ <var:k> = <var:s> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:1> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> \} \\ <var:g1> := <var:g1> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \} \\ <var:g2> := <nat:1> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> \} \\ <var:g2> := <var:g2> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> \} \\ <var:g2> := <var:g2> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \} \\ <var:g3> := <nat:9> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \land <var:g3> = <nat:9> \} \\ <var:g3> := <var:g3> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \land <var:g3> = <nat:9> * <var:s> \} \\ <var:g3> := <var:g3> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \land <var:g3> = <nat:9> * <var:s> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:k> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \land <var:g3> = <nat:9> * <var:s> ^ <nat:3> \} \\ <var:S> := <var:g3> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:g2> = <nat:1> * <var:s> ^ <nat:2> \land <var:S> = <nat:9> * <var:s> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:g2> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:g1> = <nat:1> * <var:s> \land <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:g1> ; \\ \{ <var:k> = <var:s> \land <var:g0> = <nat:2> \land <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:1> * <var:s> \} \\ <var:S> := <var:S> + <var:g0> \\ \{ <var:k> = <var:s> \land <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:1> ; <var:g1> := <var:g1> * <var:k> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:k> ; <var:g2> := <var:g2> * <var:k> ; <var:g3> := <nat:9> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:g3> := <var:g3> * <var:k> ; <var:S> := <var:g3> ; <var:S> := <var:S> + <var:g2> ; <var:S> := <var:S> + <var:g1> ; <var:S> := <var:S> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:k> = <var:s> }} <def:poly> {{ <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:g3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:g2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:S> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:1> * <var:s> /\ <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:g0> = <nat:2> /\ <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:S> = <nat:9> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 