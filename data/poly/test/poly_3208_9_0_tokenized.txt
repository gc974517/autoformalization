\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:u> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:u> ; <var:j2> := <var:j2> * <var:u> ; <var:V> := <var:j2> ; <var:V> := <var:V> + <var:j1> ; <var:V> := <var:V> + <var:j0> \end{verbatim} Allowing it to be that $ <var:u> = <var:v> $ ahead of executing this list of instructions , it follows that $ <var:V> = <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:9> $ when list of instructions is done executing . \end{theorem} \begin{proof} The argument for the list of instructions is accomplished using Hoare reasoning . Moving forward to the next step , we see \begin{eqnarray} \{ <var:u> = <var:v> \} \, <var:j0> := <nat:9> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \} \, <var:j1> := <nat:8> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> \} \, <var:j1> := <var:j1> * <var:u> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \} \, <var:j2> := <nat:5> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> \} \, <var:j2> := <var:j2> * <var:u> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> * <var:v> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> * <var:v> \} \, <var:j2> := <var:j2> * <var:u> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> * <var:v> ^ <nat:2> \} \\ \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:j2> = <nat:5> * <var:v> ^ <nat:2> \} \, <var:V> := <var:j2> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \land <var:j1> = <nat:8> * <var:v> \land <var:V> = <nat:5> * <var:v> ^ <nat:2> \} \end{eqnarray} Taking another step toward the next step contained in our set of commands , we see \begin{eqnarray} \{ <var:u> = <var:v> \} \, <var:j0> := <nat:9> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:u> = <var:v> \} \, <var:j0> := <nat:9> \, \{ <var:u> = <var:v> \land <var:j0> = <nat:9> \} \end{eqnarray} This is deduced by the variable assignmet law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:u> = <var:v> }} <var:j0> := <nat:9> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:u> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:u> ; <var:j2> := <var:j2> * <var:u> ; <var:V> := <var:j2> ; <var:V> := <var:V> + <var:j1> ; <var:V> := <var:V> + <var:j0> {{ <var:V> = <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:v> /\ <var:j2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:v> /\ <var:j2> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:v> /\ <var:j2> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:8> * <var:v> /\ <var:V> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:j0> = <nat:9> /\ <var:V> = <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:v> /\ <var:V> = <nat:5> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 