\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:D> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:D> ; <var:p2> := <var:p2> * <var:D> ; <var:Y> := <var:p2> ; <var:Y> := <var:Y> + <var:p1> ; <var:Y> := <var:Y> + <var:p0> \end{verbatim} Assuming ( for all integers $ <var:E> $ ) it to be that $ <var:D> = <var:E> $ ahead of running our series of instructions it follows that we see $ <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:7> $ after series of commands has exited . \end{theorem} \begin{proof} The method of proof for our segment of code is clear with the following decorated list of instructions . \begin{eqnarray} \{ <var:D> = <var:E> \} \\ <var:p0> := <nat:7> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \} \\ <var:p1> := <nat:3> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> \} \\ <var:p1> := <var:p1> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> * <var:E> \} \\ <var:p2> := <nat:8> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> * <var:E> \land <var:p2> = <nat:8> \} \\ <var:p2> := <var:p2> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> * <var:E> \land <var:p2> = <nat:8> * <var:E> \} \\ <var:p2> := <var:p2> * <var:D> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> * <var:E> \land <var:p2> = <nat:8> * <var:E> ^ <nat:2> \} \\ <var:Y> := <var:p2> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:p1> = <nat:3> * <var:E> \land <var:Y> = <nat:8> * <var:E> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:p1> ; \\ \{ <var:D> = <var:E> \land <var:p0> = <nat:7> \land <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> \} \\ <var:Y> := <var:Y> + <var:p0> \\ \{ <var:D> = <var:E> \land <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <var:p0> := <nat:7> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:D> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:D> ; <var:p2> := <var:p2> * <var:D> ; <var:Y> := <var:p2> ; <var:Y> := <var:Y> + <var:p1> ; <var:Y> := <var:Y> + <var:p0> {{ <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> * <var:E> /\ <var:p2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> * <var:E> /\ <var:p2> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> * <var:E> /\ <var:p2> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:3> * <var:E> /\ <var:Y> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:p0> = <nat:7> /\ <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:Y> = <nat:8> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 