\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:u1> := <var:P> ; <var:u2> := <var:u1> * <var:P> ; <var:u3> := <var:u2> * <var:P> ; <var:u4> := <var:u3> * <var:P> ; <var:u5> := <var:u4> * <var:P> ; <var:u6> := <var:u5> * <var:P> ; <var:u0> := <nat:1> ; <var:u3> := <var:u3> * <nat:4> ; <var:u6> := <var:u6> * <nat:4> ; <var:w> := <var:u6> <var:w> := <var:w> + <var:u3> <var:w> := <var:w> + <var:u0> \end{verbatim} Allow $ <var:P> = <var:K> $ prior to executing this set of commands , it holds that $ <var:w> = <nat:4> \cdot <var:K> ^ <nat:6> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be accomplished using standard Hoare logic . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:K> \} & <var:u1> := <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} & <var:u2> := <var:u1> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \} & <var:u3> := <var:u2> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \} & <var:u4> := <var:u3> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \} & <var:u5> := <var:u4> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \} & <var:u6> := <var:u5> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \land <var:u6> = <var:K> ^ <nat:6> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \land <var:u6> = <var:K> ^ <nat:6> \} & <var:u0> := <nat:1> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \land <var:u6> = <var:K> ^ <nat:6> \land <var:u0> = <nat:1> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \land <var:u6> = <var:K> ^ <nat:6> \land <var:u0> = <nat:1> \} & <var:u3> := <var:u3> * <nat:4> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \land <var:u3> = <nat:4> * <var:K> ^ <nat:3> \land <var:u4> = <var:K> ^ <nat:4> \land <var:u5> = <var:K> ^ <nat:5> \land <var:u6> = <var:K> ^ <nat:6> \land <var:u0> = <nat:1> \} \end{tabular} Advancing to the upcoming bits of codeseen in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:K> \} & <var:u1> := <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} \\ \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} & <var:u2> := <var:u1> * <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \land <var:u2> = <var:K> ^ <nat:2> \} \end{tabular} This is deduced through the variable assignmet inference rule in typical Hoare reasoning . Focusing on the proceeding command in the program , \[ \begin{tabular} {rcl} \{ <var:P> = <var:K> \} & <var:u1> := <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} \end{tabular} This is known to be sound using the variable binding rule found in usual Hoare logic . Observing the following statement seen in our program , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:K> \} & <var:u1> := <var:P> & \{ <var:P> = <var:K> \land <var:u1> = <var:K> \} \end{tabular} This is known to be sound using the environment update law defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <var:u5> : string := " <var:u5> " . Definition <var:u6> : string := " <var:u6> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:P> = <var:K> }} <var:u1> := <var:P> ; <var:u2> := <var:u1> * <var:P> ; <var:u3> := <var:u2> * <var:P> ; <var:u4> := <var:u3> * <var:P> ; <var:u5> := <var:u4> * <var:P> ; <var:u6> := <var:u5> * <var:P> ; <var:u0> := <nat:1> ; <var:u3> := <var:u3> * <nat:4> ; <var:u6> := <var:u6> * <nat:4> ; <var:w> := <var:u6> <var:w> := <var:w> + <var:u3> <var:w> := <var:w> + <var:u0> {{ <var:w> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> /\ <var:u6> = <var:K> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> /\ <var:u6> = <var:K> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> /\ <var:u6> = <var:K> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> /\ <var:u6> = <nat:4> * <var:K> ^ <nat:6> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:u4> = <var:K> ^ <nat:4> /\ <var:u5> = <var:K> ^ <nat:5> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:4> * <var:K> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:u1> = <var:K> /\ <var:u2> = <var:K> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:w> = <nat:4> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 