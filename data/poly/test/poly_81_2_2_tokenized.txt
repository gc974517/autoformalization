\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} : \begin{verbatim} <var:b> := <nat:1> ; <var:b> := <nat:4> + <var:b> * <var:O> \end{verbatim} Assume --- for any $ <var:e> $ --- it to hold that $ <var:O> = <var:e> $ before evaluating the code segment , it follows that we have $ <var:b> = <nat:1> \cdot <var:e> + <nat:4> $ when code segment is done executing . \end{theorem} \begin{proof} Proving correctness for our list of commands is demonstrated through Hoare reasoning . Moving on to the proceeding statement found in the code , we see the variable update statement yielding $ <nat:1> $ as $ <var:b>$ . This forwards the precondition $ \{ <var:O> = <var:e> \} $ toward the condition $ \{ <var:O> = <var:e> \land <var:b> = <nat:1> \} $ . Further , we see the variable assignmet statement \verb | <var:b> := <nat:4> + <var:b> * <var:O> | . This redefines the condition $ \{ <var:O> = <var:e> \land <var:b> = <nat:1> \} $ as the postcondition $ \{ <var:O> = <var:e> \land <var:b> = <nat:1> * <var:e> + <nat:4> \} $ . This is known to be sound by the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:O> = <var:e> }} <var:b> := <nat:1> ; <var:b> := <nat:4> + <var:b> * <var:O> {{ <var:b> = <nat:1> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:b> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:b> = <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 