\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:1> + <var:V> * <var:K> ; <var:V> := <nat:4> + <var:V> * <var:K> ; <var:V> := <nat:1> + <var:V> * <var:K> \end{verbatim} Allow with some $ <var:r> \in \mathbb{Z}^+ $ $ <var:K> = <var:r> $ prior to the evaluation of the code segment it holds that we have $ <var:V> = <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:r> \} \\ <var:V> := <nat:4> ; \\ \{ <var:K> = <var:r> \land <var:V> = <nat:4> \} \\ <var:V> := <nat:1> + <var:V> * <var:K> ; \\ \{ <var:K> = <var:r> \land <var:V> = <nat:4> \times <var:r> + <nat:1> \} \\ <var:V> := <nat:4> + <var:V> * <var:K> ; \\ \{ <var:K> = <var:r> \land <var:V> = <nat:4> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:4> \} \\ <var:V> := <nat:1> + <var:V> * <var:K> \\ \{ <var:K> = <var:r> \land <var:V> = <nat:4> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:1> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:K> = <var:r> }} <var:V> := <nat:4> ; <var:V> := <nat:1> + <var:V> * <var:K> ; <var:V> := <nat:4> + <var:V> * <var:K> ; <var:V> := <nat:1> + <var:V> * <var:K> {{ <var:V> = <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:V> = <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:V> = <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:r> /\ <var:V> = <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 