\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:b1> := <var:v> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:9> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Assume that $ <var:v> = <var:i> $ ( for some $ <var:i> \in \mathbb{N} $ ) prior to evaluating this program , it follows that we have $ <var:V> = <nat:9> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this program can be seen using usual Hoare techniques . Moving onward , we see \begin{eqnarray} \{ <var:v> = <var:i> \} \, <var:b1> := <var:v> \, \{ <var:v> = <var:i> \land <var:b1> = <var:i> \} \\ \{ <var:v> = <var:i> \land <var:b1> = <var:i> \} \, <var:b0> := <nat:2> \, \{ <var:v> = <var:i> \land <var:b1> = <var:i> \land <var:b0> = <nat:2> \} \\ \{ <var:v> = <var:i> \land <var:b1> = <var:i> \land <var:b0> = <nat:2> \} \, <var:b1> := <var:b1> * <nat:9> \, \{ <var:v> = <var:i> \land <var:b1> = <nat:9> * <var:i> \land <var:b0> = <nat:2> \} \\ \{ <var:v> = <var:i> \land <var:b1> = <nat:9> * <var:i> \land <var:b0> = <nat:2> \} \, <var:V> := <var:b1\, \{ <var:v> = <var:i> \land <var:b0> = <nat:2> \land <var:V> = <nat:9> * <var:i> \} \end{eqnarray} Considering the proceeding line of code seen in the series of instructions , \begin{eqnarray} \{ <var:v> = <var:i> \} \, <var:b1> := <var:v> \, \{ <var:v> = <var:i> \land <var:b1> = <var:i> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:v> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:9> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:v> = <var:i> }} <def:poly> {{ <var:V> = <nat:9> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:b1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:b1> = <var:i> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:b1> = <nat:9> * <var:i> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:b0> = <nat:2> /\ <var:V> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:V> = <nat:9> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 