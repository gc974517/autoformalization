\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <var:D> * <var:P> ; <var:D> := <nat:3> + <var:D> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Assuming that $ <var:P> = <var:r> $ assuming some whole numbers $ <var:r> $ prior to interpreting this series of instructions it must be that $ <var:D> = <nat:4> \times <var:r> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:P> = <var:r> \} \\ <var:D> := <nat:4> ; \\ \{ <var:P> = <var:r> \land <var:D> = <nat:4> \} \\ <var:D> := <var:D> * <var:P> ; \\ \{ <var:P> = <var:r> \land <var:D> = <nat:4> \times <var:r> + \} \\ <var:D> := <nat:3> + <var:D> * <var:P> \\ \{ <var:P> = <var:r> \land <var:D> = <nat:4> \times <var:r> ^ <nat:2> + <nat:3> \} \end{eqnarray} Given the above , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <var:D> * <var:P> ; <var:D> := <nat:3> + <var:D> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:P> = <var:r> }} <def:poly> {{ <var:D> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:D> = <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:r> /\ <var:D> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 