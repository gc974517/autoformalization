\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:Z> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming that $ <var:z> = <var:L> $ prior to executing the program it holds that $ <var:Z> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this code can be done using typical Hoare logic . Shifting focus toward the subsequent piece of code contained in our program , we have \begin{eqnarray} \{ <var:z> = <var:L> \} \, <var:G0> := <nat:8> \, \{ <var:z> = <var:L> \land <var:G0> = <nat:8> \} \end{eqnarray} This is sound with the variable assignmet law defined in usual Hoare techniques . Moving on , \begin{eqnarray} \{ <var:z> = <var:L> \} \, <var:G0> := <nat:8> \, \{ <var:z> = <var:L> \land <var:G0> = <nat:8> \} \end{eqnarray} This is rigorously given by the variable assignmet scheme obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:Z> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <def:poly> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 