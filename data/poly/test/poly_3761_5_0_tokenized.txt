\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:t> ; <var:J> := <var:H1> ; <var:J> := <var:J> + <var:H0> \end{verbatim} Assuming it to be that $ <var:t> = <var:V> $ ( assuming some positive integers $ <var:V> $ ) before interpreting the code segment , then $ <var:J> = <nat:2> \times <var:V> + <nat:5> $ when set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:V> \} \\ <var:H0> := <nat:5> ; \\ \{ <var:t> = <var:V> \land <var:H0> = <nat:5> \} \\ <var:H1> := <nat:2> ; \\ \{ <var:t> = <var:V> \land <var:H0> = <nat:5> \land <var:H1> = <nat:2> \} \\ <var:H1> := <var:H1> * <var:t> ; \\ \{ <var:t> = <var:V> \land <var:H0> = <nat:5> \land <var:H1> = <nat:2> \cdot <var:V> \} \\ <var:J> := <var:H1> ; \\ \{ <var:t> = <var:V> \land <var:H0> = <nat:5> \land <var:J> = <nat:2> \cdot <var:V> \} \\ <var:J> := <var:J> + <var:H0> \\ \{ <var:t> = <var:V> \land <var:J> = <nat:2> \cdot <var:V> + <nat:5> \} \end{eqnarray} Applying usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:t> = <var:V> }} <var:H0> := <nat:5> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:t> ; <var:J> := <var:H1> ; <var:J> := <var:J> + <var:H0> {{ <var:J> = <nat:2> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:H0> = <nat:5> /\ <var:J> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:J> = <nat:2> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 