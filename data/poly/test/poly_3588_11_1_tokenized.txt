\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:p1> := <var:H> ; <var:p2> := <var:p1> * <var:H> ; <var:p3> := <var:p2> * <var:H> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:2> ; <var:m> := <var:p3> <var:m> := <var:m> + <var:p2> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> \end{verbatim} Given --- assuming some positive integers $ <var:N> $ --- that $ <var:H> = <var:N> $ ahead of executing this set of instructions , then we have $ <var:m> = <nat:2> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:H> = <var:N> \} \\ <var:p1> := <var:H> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <var:N> \} \\ <var:p2> := <var:p1> * <var:H> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <var:N> \land <var:p2> = <var:N> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:H> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <var:N> \land <var:p2> = <var:N> ^ <nat:2> \land <var:p3> = <var:N> ^ <nat:3> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <var:N> \land <var:p2> = <var:N> ^ <nat:2> \land <var:p3> = <var:N> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <nat:4> \cdot <var:N> \land <var:p2> = <var:N> ^ <nat:2> \land <var:p3> = <var:N> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p2> := <var:p2> * <nat:8> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <nat:4> \cdot <var:N> \land <var:p2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:p3> = <var:N> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:p3> := <var:p3> * <nat:2> ; \\ \{ <var:H> = <var:N> \land <var:p1> = <nat:4> \cdot <var:N> \land <var:p2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:p3> = <nat:2> \cdot <var:N> ^ <nat:3> \land <var:p0> = <nat:8> \} \\ <var:m> := <var:p3> \\ \{ <var:H> = <var:N> \land <var:p1> = <nat:4> \cdot <var:N> \land <var:p2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:p0> = <nat:8> \land <var:m> = <nat:2> \cdot <var:N> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:p2> \\ \{ <var:H> = <var:N> \land <var:p1> = <nat:4> \cdot <var:N> \land <var:p0> = <nat:8> \land <var:m> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:p1> \\ \{ <var:H> = <var:N> \land <var:p0> = <nat:8> \land <var:m> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> \} \\ <var:m> := <var:m> + <var:p0> \\ \{ <var:H> = <var:N> \land <var:m> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:H> = <var:N> }} <var:p1> := <var:H> ; <var:p2> := <var:p1> * <var:H> ; <var:p3> := <var:p2> * <var:H> ; <var:p0> := <nat:8> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:2> ; <var:m> := <var:p3> <var:m> := <var:m> + <var:p2> <var:m> := <var:m> + <var:p1> <var:m> := <var:m> + <var:p0> {{ <var:m> = <nat:2> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <var:N> /\ <var:p2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <var:N> /\ <var:p2> = <var:N> ^ <nat:2> /\ <var:p3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <var:N> /\ <var:p2> = <var:N> ^ <nat:2> /\ <var:p3> = <var:N> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <nat:4> * <var:N> /\ <var:p2> = <var:N> ^ <nat:2> /\ <var:p3> = <var:N> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <nat:4> * <var:N> /\ <var:p2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:p3> = <var:N> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <nat:4> * <var:N> /\ <var:p2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:p3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <nat:4> * <var:N> /\ <var:p2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:p0> = <nat:8> /\ <var:m> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p1> = <nat:4> * <var:N> /\ <var:p0> = <nat:8> /\ <var:m> = <nat:2> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:p0> = <nat:8> /\ <var:m> = <nat:2> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:N> /\ <var:m> = <nat:2> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 