\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:9> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:g> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:g> ; <var:p2> := <var:p2> * <var:g> ; <var:z> := <var:p2> ; <var:z> := <var:z> + <var:p1> ; <var:z> := <var:z> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:g> = <var:L> $ ahead of the evaluation of our series of commands , it holds that we have $ <var:z> = <nat:2> \times <var:L> ^ <nat:2> + <nat:9> \times <var:L> + <nat:9> $ once code has exited . \end{theorem} \begin{proof} Proving correctness for the code segment can be demonstrated by usual Hoare reasoning . Immediately following , we see the environment update command \verb | <var:p0> := <nat:9> ; | . This line advances the condition $ \{ <var:g> = <var:L> \} $ into $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \} $ . This is known to be sound through the assignment scheme found in usual Hoare techniques . Keeping momentum , we have the statement \verb | <var:p1> := <nat:9> ; | . This redefines $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \} $ into $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \} $ . Moving forward to the next statement contained in the program , the variable binding line \verb | <var:p1> := <var:p1> * <var:g> ; | . This line advances the precondition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \} $ toward the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \} $ . Honing in on the proceeding command seen in the list of commands , the binding statement letting $ <nat:2> $ toward $ <var:p2>$ . This code advances the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \} $ into the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \} $ . Following , we have the statement assigning $ <var:p2> * <var:g> $ as $ <var:p2>$ . This line redefines the precondition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \} $ to $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \cdot <var:L> \} $ . Moving forward to the subsequent command found in our series of instructions , we have the variable assignmet line yielding $ <var:p2> * <var:g> $ toward $ <var:p2>$ . This forwards the precondition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \cdot <var:L> \} $ toward the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \cdot <var:L> ^ <nat:2> \} $ . Going forward , we see the environment update statement binding $ <var:p2> $ toward $ <var:z>$ . This statement takes the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:p2> = <nat:2> \cdot <var:L> ^ <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:z> = <nat:2> \cdot <var:L> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule found in standard Hoare techniques . Going forward , we see the variable update command \verb | <var:z> := <var:z> + <var:p1> ; | . This forwards $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:p1> = <nat:9> \cdot <var:L> \land <var:z> = <nat:2> \cdot <var:L> ^ <nat:2> \} $ to $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:z> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> \} $ . This is ensured by the assignment rule obtained from usual Hoare logic . Next , we have the statement \verb | <var:z> := <var:z> + <var:p0> | . This command transfers the condition $ \{ <var:g> = <var:L> \land <var:p0> = <nat:9> \land <var:z> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> \} $ to the condition $ \{ <var:g> = <var:L> \land <var:z> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> + <nat:9> \} $ . This is shown to be logically sound with the assignment inference rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:9> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:g> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:g> ; <var:p2> := <var:p2> * <var:g> ; <var:z> := <var:p2> ; <var:z> := <var:z> + <var:p1> ; <var:z> := <var:z> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <def:poly> {{ <var:z> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> * <var:L> /\ <var:p2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> * <var:L> /\ <var:p2> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> * <var:L> /\ <var:p2> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:9> * <var:L> /\ <var:z> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:p0> = <nat:9> /\ <var:z> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:z> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 