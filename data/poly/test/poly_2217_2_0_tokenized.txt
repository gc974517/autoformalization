\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:d0> := <nat:4> ; <var:u> := <var:d0> \end{verbatim} Allowing with some $ <var:R> $ that we have $ <var:Q> = <var:R> $ ahead of the evaluation of our code segment it follows that we have $ <var:u> = <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:Q> = <var:R> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:Q> = <var:R> \land <var:d0> = <nat:4> \} \\ <var:u> := <var:d0> \\ \{ <var:Q> = <var:R> \land <var:u> = <nat:4> \} \end{eqnarray} Considering the above , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Q> = <var:R> }} <var:d0> := <nat:4> ; <var:u> := <var:d0> {{ <var:u> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:u> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 