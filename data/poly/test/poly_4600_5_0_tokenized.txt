\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:c> ; <var:e> := <var:M1> ; <var:e> := <var:e> + <var:M0> \end{verbatim} Assuming given natural numbers $ <var:o> $ it to hold that $ <var:c> = <var:o> $ ahead of the execution of the series of instructions , it follows that we see $ <var:e> = <nat:4> \times <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:o> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:c> = <var:o> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:4> ; \\ \{ <var:c> = <var:o> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \} \\ <var:M1> := <var:M1> * <var:c> ; \\ \{ <var:c> = <var:o> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> * <var:o> \} \\ <var:e> := <var:M1> ; \\ \{ <var:c> = <var:o> \land <var:M0> = <nat:4> \land <var:e> = <nat:4> * <var:o> \} \\ <var:e> := <var:e> + <var:M0> \\ \{ <var:c> = <var:o> \land <var:e> = <nat:4> * <var:o> + <nat:4> \} \end{eqnarray} Given the preceding argument , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:c> = <var:o> }} <var:M0> := <nat:4> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:c> ; <var:e> := <var:M1> ; <var:e> := <var:e> + <var:M0> {{ <var:e> = <nat:4> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:M0> = <nat:4> /\ <var:e> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:e> = <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 