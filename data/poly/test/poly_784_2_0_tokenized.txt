\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:4> ; <var:H> := <var:X0> \end{verbatim} Assume it to hold that $ <var:A> = <var:J> $ prior to interpreting the list of commands it holds that we see $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is given with standard Hoare reasoning . Moving on , we see the variable update line \verb | <var:X0> := <nat:4> ; | . This forwards the condition $ \{ <var:A> = <var:J> \} $ into $ \{ <var:A> = <var:J> \land <var:X0> = <nat:4> \} $ . Jumping to the upcoming line of code contained in our series of instructions , we see the environment update line \verb | <var:H> := <var:X0> | . This transfers $ \{ <var:A> = <var:J> \land <var:X0> = <nat:4> \} $ to the condition $ \{ <var:A> = <var:J> \land <var:H> = <nat:4> \} $ . This is sound using the assignment law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:A> = <var:J> }} <var:X0> := <nat:4> ; <var:H> := <var:X0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 