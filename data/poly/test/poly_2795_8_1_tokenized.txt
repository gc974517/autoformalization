\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:6> ; <var:E2> := <var:E2> * <nat:7> ; <var:A> := <var:E2> <var:A> := <var:A> + <var:E1> <var:A> := <var:A> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allow that we have $ <var:W> = <var:O> $ prior to the evaluation of our list of commands then we see $ <var:A> = <nat:7> \times <var:O> ^ <nat:2> + <nat:6> \times <var:O> + <nat:9> $ . \end{theorem} \begin{proof} Note that the following decorated program . \begin{eqnarray} \{ <var:W> = <var:O> \} \\ <var:E1> := <var:W> ; \\ \{ <var:W> = <var:O> \land <var:E1> = <var:O> \} \\ <var:E2> := <var:E1> * <var:W> ; \\ \{ <var:W> = <var:O> \land <var:E1> = <var:O> \land <var:E2> = <var:O> ^ <nat:2> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:W> = <var:O> \land <var:E1> = <var:O> \land <var:E2> = <var:O> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:6> ; \\ \{ <var:W> = <var:O> \land <var:E1> = <nat:6> \times <var:O> \land <var:E2> = <var:O> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:7> ; \\ \{ <var:W> = <var:O> \land <var:E1> = <nat:6> \times <var:O> \land <var:E2> = <nat:7> \times <var:O> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:A> := <var:E2> \\ \{ <var:W> = <var:O> \land <var:E1> = <nat:6> \times <var:O> \land <var:E0> = <nat:9> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:E1> \\ \{ <var:W> = <var:O> \land <var:E0> = <nat:9> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> + <nat:6> \times <var:O> \} \\ <var:A> := <var:A> + <var:E0> \\ \{ <var:W> = <var:O> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> + <nat:6> \times <var:O> + <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:6> ; <var:E2> := <var:E2> * <nat:7> ; <var:A> := <var:E2> <var:A> := <var:A> + <var:E1> <var:A> := <var:A> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <def:poly> {{ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <var:O> /\ <var:E2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <var:O> /\ <var:E2> = <var:O> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <nat:6> * <var:O> /\ <var:E2> = <var:O> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <nat:6> * <var:O> /\ <var:E2> = <nat:7> * <var:O> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E1> = <nat:6> * <var:O> /\ <var:E0> = <nat:9> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:E0> = <nat:9> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 