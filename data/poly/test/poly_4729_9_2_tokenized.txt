\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <nat:1> + <var:n> * <var:a> ; <var:n> := <nat:1> + <var:n> * <var:a> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <var:n> * <var:a> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <var:n> * <var:a> ; <var:n> := <nat:2> + <var:n> * <var:a> \end{verbatim} Assuming $ <var:a> = <var:q> $ assuming some natural coefficients $ <var:q> $ before running our series of commands , it must be that we have $ <var:n> = <nat:4> \cdot <var:q> ^ <nat:8> + <nat:3> \cdot <var:q> ^ <nat:7> + <nat:1> \cdot <var:q> ^ <nat:6> + <nat:1> \cdot <var:q> ^ <nat:5> + <nat:3> \cdot <var:q> ^ <nat:4> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning yields : \begin{eqnarray} \{ <var:a> = <var:q> \} \\ <var:n> := <nat:4> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> \} \\ <var:n> := <nat:3> + <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> + <nat:3> \} \\ <var:n> := <nat:1> + <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> \} \\ <var:n> := <nat:1> + <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> \} \\ <var:n> := <nat:3> + <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> \} \\ <var:n> := <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + \} \\ <var:n> := <nat:3> + <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> \} \\ <var:n> := <var:n> * <var:a> ; \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + \} \\ <var:n> := <nat:2> + <var:n> * <var:a> \\ \{ <var:a> = <var:q> \land <var:n> = <nat:4> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> \} \end{eqnarray} Hence , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:a> = <var:q> }} <var:n> := <nat:4> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <nat:1> + <var:n> * <var:a> ; <var:n> := <nat:1> + <var:n> * <var:a> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <var:n> * <var:a> ; <var:n> := <nat:3> + <var:n> * <var:a> ; <var:n> := <var:n> * <var:a> ; <var:n> := <nat:2> + <var:n> * <var:a> {{ <var:n> = <nat:4> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:n> = <nat:4> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 