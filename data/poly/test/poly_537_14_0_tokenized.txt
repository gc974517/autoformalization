\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:7> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:J> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:J> ; <var:V2> := <var:V2> * <var:J> ; <var:V3> := <nat:6> ; <var:V3> := <var:V3> * <var:J> ; <var:V3> := <var:V3> * <var:J> ; <var:V3> := <var:V3> * <var:J> ; <var:u> := <var:V3> ; <var:u> := <var:u> + <var:V2> ; <var:u> := <var:u> + <var:V1> ; <var:u> := <var:u> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Allowing that $ <var:J> = <var:g> $ prior to evaluating our set of instructions , then we have $ <var:u> = <nat:6> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:7> $ once program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:g> \} \\ <var:V0> := <nat:7> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \} \\ <var:V1> := <nat:4> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \} \\ <var:V1> := <var:V1> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \} \\ <var:V2> := <nat:5> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \} \\ <var:V2> := <var:V2> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> \} \\ <var:V2> := <var:V2> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \} \\ <var:V3> := <nat:6> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:V3> = <nat:6> \} \\ <var:V3> := <var:V3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:V3> = <nat:6> \cdot <var:g> \} \end{eqnarray} Allowing the evaluation of the series of instructions results in : \begin{eqnarray} <var:V3> := <var:V3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:V3> = <nat:6> \cdot <var:g> ^ <nat:2> \} \\ <var:V3> := <var:V3> * <var:J> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:V3> = <nat:6> \cdot <var:g> ^ <nat:3> \} \\ <var:u> := <var:V3> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:V2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:u> = <nat:6> \cdot <var:g> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:V2> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:V1> = <nat:4> \cdot <var:g> \land <var:u> = <nat:6> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> \} \end{eqnarray} Continuing executing the series of commands gives us : \begin{eqnarray} <var:u> := <var:u> + <var:V1> ; \\ \{ <var:J> = <var:g> \land <var:V0> = <nat:7> \land <var:u> = <nat:6> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> + <nat:4> \cdot <var:g> \} \\ <var:u> := <var:u> + <var:V0> \\ \{ <var:J> = <var:g> \land <var:u> = <nat:6> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> + <nat:4> \cdot <var:g> + <nat:7> \} \end{eqnarray} Applying standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:7> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:J> ; <var:V2> := <nat:5> ; <var:V2> := <var:V2> * <var:J> ; <var:V2> := <var:V2> * <var:J> ; <var:V3> := <nat:6> ; <var:V3> := <var:V3> * <var:J> ; <var:V3> := <var:V3> * <var:J> ; <var:V3> := <var:V3> * <var:J> ; <var:u> := <var:V3> ; <var:u> := <var:u> + <var:V2> ; <var:u> := <var:u> + <var:V1> ; <var:u> := <var:u> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:J> = <var:g> }} <def:poly> {{ <var:u> = <nat:6> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:V3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:V3> = <nat:6> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:V2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:u> = <nat:6> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:V1> = <nat:4> * <var:g> /\ <var:u> = <nat:6> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:V0> = <nat:7> /\ <var:u> = <nat:6> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:g> /\ <var:u> = <nat:6> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 