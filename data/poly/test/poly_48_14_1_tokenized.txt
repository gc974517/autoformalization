\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as \begin{verbatim} <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i4> := <var:i3> * <var:r> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:4> ; <var:i3> := <var:i3> * <nat:7> ; <var:i4> := <var:i4> * <nat:2> ; <var:k> := <var:i4> <var:k> := <var:k> + <var:i3> <var:k> := <var:k> + <var:i2> <var:k> := <var:k> + <var:i1> <var:k> := <var:k> + <var:i0> \end{verbatim} Given --- taking whole numbers $ <var:K> $ --- that $ <var:r> = <var:K> $ before the execution of this series of commands it holds that we see $ <var:k> = <nat:2> \times <var:K> ^ <nat:4> + <nat:7> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:6> \times <var:K> + <nat:9> $ . \end{theorem} \begin{proof} The proof of this code is clear by usual Hoare logic . Following , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:K> \} & <var:i1> := <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} & <var:i2> := <var:i1> * <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \} & <var:i3> := <var:i2> * <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \} & <var:i4> := <var:i3> * <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \} & <var:i0> := <nat:9> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} & <var:i1> := <var:i1> * <nat:6> & \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} & <var:i2> := <var:i2> * <nat:4> & \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} & <var:i3> := <var:i3> * <nat:7> & \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:K> ^ <nat:3> \land <var:i4> = <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} & <var:i4> := <var:i4> * <nat:2> & \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:K> ^ <nat:3> \land <var:i4> = <nat:2> \times <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:K> ^ <nat:3> \land <var:i4> = <nat:2> \times <var:K> ^ <nat:4> \land <var:i0> = <nat:9> \} & <var:k> := <var:i4& \{ <var:r> = <var:K> \land <var:i1> = <nat:6> \times <var:K> \land <var:i2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:i3> = <nat:7> \times <var:K> ^ <nat:3> \land <var:i0> = <nat:9> \land <var:k> = <nat:2> \times <var:K> ^ <nat:4> \} \end{tabular} This is shown to be logically sound using the variable assignmet law given by typical Hoare techniques . Moving on to the subsequent commands in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:r> = <var:K> \} & <var:i1> := <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} & <var:i2> := <var:i1> * <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \} \end{tabular} Honing in on the next pieces of code seen in our code , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:K> \} & <var:i1> := <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} \\ \{ <var:r> = <var:K> \land <var:i1> = <var:K> \} & <var:i2> := <var:i1> * <var:r> & \{ <var:r> = <var:K> \land <var:i1> = <var:K> \land <var:i2> = <var:K> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:r> = <var:K> }} <var:i1> := <var:r> ; <var:i2> := <var:i1> * <var:r> ; <var:i3> := <var:i2> * <var:r> ; <var:i4> := <var:i3> * <var:r> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:4> ; <var:i3> := <var:i3> * <nat:7> ; <var:i4> := <var:i4> * <nat:2> ; <var:k> := <var:i4> <var:k> := <var:k> + <var:i3> <var:k> := <var:k> + <var:i2> <var:k> := <var:k> + <var:i1> <var:k> := <var:k> + <var:i0> {{ <var:k> = <nat:2> * <var:K> ^ <nat:4> + <nat:7> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <var:K> /\ <var:i2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <var:K> /\ <var:i2> = <var:K> ^ <nat:2> /\ <var:i3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <var:K> /\ <var:i2> = <var:K> ^ <nat:2> /\ <var:i3> = <var:K> ^ <nat:3> /\ <var:i4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <var:K> /\ <var:i2> = <var:K> ^ <nat:2> /\ <var:i3> = <var:K> ^ <nat:3> /\ <var:i4> = <var:K> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <var:K> ^ <nat:2> /\ <var:i3> = <var:K> ^ <nat:3> /\ <var:i4> = <var:K> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:i3> = <var:K> ^ <nat:3> /\ <var:i4> = <var:K> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:i3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:i4> = <var:K> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:i3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:i4> = <nat:2> * <var:K> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:i3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:i0> = <nat:9> /\ <var:k> = <nat:2> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:i0> = <nat:9> /\ <var:k> = <nat:2> * <var:K> ^ <nat:4> + <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i1> = <nat:6> * <var:K> /\ <var:i0> = <nat:9> /\ <var:k> = <nat:2> * <var:K> ^ <nat:4> + <nat:7> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:i0> = <nat:9> /\ <var:k> = <nat:2> * <var:K> ^ <nat:4> + <nat:7> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:k> = <nat:2> * <var:K> ^ <nat:4> + <nat:7> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 