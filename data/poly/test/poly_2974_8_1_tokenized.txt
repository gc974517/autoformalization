\begin{document} \begin{theorem} We define the following list of instructions such that \begin{verbatim} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:1> ; <var:k> := <var:G2> <var:k> := <var:k> + <var:G1> <var:k> := <var:k> + <var:G0> \end{verbatim} Allowing $ <var:E> = <var:q> $ --- for any positive numbers $ <var:q> $ --- prior to executing our segment of code , it must be that we have $ <var:k> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions can be done using Hoare reasoning . Keeping momentum , the binding statement \verb | <var:G1> := <var:E> ; | . This statement redefines $ \{ <var:E> = <var:q> \} $ to the condition $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \} $ . This is sound through the assignment law from usual Hoare reasoning . After , we see the variable binding statement \verb | <var:G2> := <var:G1> * <var:E> ; | . This transfers the condition $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \} $ to the postcondition $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \land <var:G2> = <var:q> ^ <nat:2> \} $ . This is sound using the assignment inference rule from usual Hoare techniques . Looking at the upcoming bit of code in our code segment , the variable binding code binding $ <nat:2> $ into $ <var:G0>$ . This advances the precondition $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \land <var:G2> = <var:q> ^ <nat:2> \} $ as $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \land <var:G2> = <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ . This is ensured using the assignment rule given in usual Hoare reasoning . Further , we see the variable assignmet statement \verb | <var:G1> := <var:G1> * <nat:2> ; | . This advances the condition $ \{ <var:E> = <var:q> \land <var:G1> = <var:q> \land <var:G2> = <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ to the postcondition $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G2> = <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule from usual Hoare reasoning . Moving forward to the upcoming piece of code seen in the series of commands , the variable update code \verb | <var:G2> := <var:G2> * <nat:1> ; | . This redefines the condition $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G2> = <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ to the condition $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G2> = <nat:1> * <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ . Immediately following , we have the variable assignmet code \verb | <var:k> := <var:G2> | . This redefines $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G2> = <nat:1> * <var:q> ^ <nat:2> \land <var:G0> = <nat:2> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G0> = <nat:2> \land <var:k> = <nat:1> * <var:q> ^ <nat:2> \} $ . After , we see the binding code assigning $ <var:k> + <var:G1$ toward $ <var:k>$ . This statement moves the precondition $ \{ <var:E> = <var:q> \land <var:G1> = <nat:2> * <var:q> \land <var:G0> = <nat:2> \land <var:k> = <nat:1> * <var:q> ^ <nat:2> \} $ to the condition $ \{ <var:E> = <var:q> \land <var:G0> = <nat:2> \land <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> \} $ . This is ensured through the assignment law given by Hoare techniques . Taking a look at the proceeding command in our list of commands , the variable assignmet statement giving $ <var:k> + <var:G0$ into $ <var:k>$ . This advances the condition $ \{ <var:E> = <var:q> \land <var:G0> = <nat:2> \land <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> \} $ as $ \{ <var:E> = <var:q> \land <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:E> = <var:q> }} <var:G1> := <var:E> ; <var:G2> := <var:G1> * <var:E> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:1> ; <var:k> := <var:G2> <var:k> := <var:k> + <var:G1> <var:k> := <var:k> + <var:G0> {{ <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <var:q> /\ <var:G2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <var:q> /\ <var:G2> = <var:q> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <nat:2> * <var:q> /\ <var:G2> = <var:q> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <nat:2> * <var:q> /\ <var:G2> = <nat:1> * <var:q> ^ <nat:2> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G1> = <nat:2> * <var:q> /\ <var:G0> = <nat:2> /\ <var:k> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:G0> = <nat:2> /\ <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:k> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 