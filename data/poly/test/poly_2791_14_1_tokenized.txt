\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:a> ; <var:A2> := <var:A1> * <var:a> ; <var:A3> := <var:A2> * <var:a> ; <var:A4> := <var:A3> * <var:a> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:6> ; <var:A4> := <var:A4> * <nat:3> ; <var:f> := <var:A4> <var:f> := <var:f> + <var:A3> <var:f> := <var:f> + <var:A2> <var:f> := <var:f> + <var:A1> <var:f> := <var:f> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:a> = <var:Z> $ prior to executing the code , it must be that $ <var:f> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:6> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:9> $ once set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of this code is clear using usual Hoare reasoning . After , we see \begin{eqnarray} \{ <var:a> = <var:Z> \} \, <var:A1> := <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \} \end{eqnarray} Paying attention to the following commands contained in the set of commands , we have \begin{eqnarray} \{ <var:a> = <var:Z> \} \, <var:A1> := <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \} \, <var:A2> := <var:A1> * <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \} \, <var:A4> := <var:A3> * <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \} \, <var:A0> := <nat:9> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \, <var:A1> := <var:A1> * <nat:1> \, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \, <var:A2> := <var:A2> * <nat:1> \, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \, <var:A3> := <var:A3> * <nat:6> \, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A4> = <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \, <var:A4> := <var:A4> * <nat:3> \, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:Z> ^ <nat:4> \land <var:A0> = <nat:9> \} \, <var:f> := <var:A4\, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A0> = <nat:9> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:4> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:A0> = <nat:9> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:4> \} \, <var:f> := <var:f> + <var:A3\, \{ <var:a> = <var:Z> \land <var:A1> = <nat:1> \cdot <var:Z> \land <var:A2> = <nat:1> \cdot <var:Z> ^ <nat:2> \land <var:A0> = <nat:9> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:6> \cdot <var:Z> ^ <nat:3> \} \end{eqnarray} This is guaranteed using the binding law defined by Hoare logic . Moving on to the next step , we see \begin{eqnarray} \{ <var:a> = <var:Z> \} \, <var:A1> := <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \} \\ \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \} \, <var:A2> := <var:A1> * <var:a> \, \{ <var:a> = <var:Z> \land <var:A1> = <var:Z> \land <var:A2> = <var:Z> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Definition <def:poly> := <var:A1> := <var:a> ; <var:A2> := <var:A1> * <var:a> ; <var:A3> := <var:A2> * <var:a> ; <var:A4> := <var:A3> * <var:a> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:1> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:6> ; <var:A4> := <var:A4> * <nat:3> ; <var:f> := <var:A4> <var:f> := <var:f> + <var:A3> <var:f> := <var:f> + <var:A2> <var:f> := <var:f> + <var:A1> <var:f> := <var:f> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:a> = <var:Z> }} <def:poly> {{ <var:f> = <nat:3> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A4> = <var:Z> ^ <nat:4> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A4> = <var:Z> ^ <nat:4> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <var:Z> ^ <nat:3> /\ <var:A4> = <var:Z> ^ <nat:4> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:A4> = <var:Z> ^ <nat:4> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:Z> ^ <nat:4> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:A0> = <nat:9> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A0> = <nat:9> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A1> = <nat:1> * <var:Z> /\ <var:A0> = <nat:9> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:A0> = <nat:9> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 