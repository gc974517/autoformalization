\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:2> ; <var:w> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Given $ <var:j> = <var:r> $ ahead of executing the program , then we have $ <var:w> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be given with standard Hoare techniques . Advancing on , we see the variable binding code \verb | <var:M0> := <nat:2> ; | . This redefines the precondition $ \{ <var:j> = <var:r> \} $ to $ \{ <var:j> = <var:r> \land <var:M0> = <nat:2> \} $ . Paying attention to the next line found in the list of instructions , the variable assignmet command \verb | <var:w> := <var:M0> | . This transfers the precondition $ \{ <var:j> = <var:r> \land <var:M0> = <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:r> \land <var:w> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:2> ; <var:w> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <def:poly> {{ <var:w> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:w> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 