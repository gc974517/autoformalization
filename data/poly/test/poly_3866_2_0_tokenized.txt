\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:3> ; <var:o> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:t> = <var:s> $ assuming some $ <var:s> $ before running our list of commands , it follows that we see $ <var:o> = <nat:3> $ after code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is done using typical Hoare techniques . Jumping to the subsequent line contained in the code segment , the binding line \verb | <var:U0> := <nat:3> ; | . This command takes the condition $ \{ <var:t> = <var:s> \} $ as the condition $ \{ <var:t> = <var:s> \land <var:U0> = <nat:3> \} $ . Honing in on the upcoming piece of code seen in the code , we see the variable update command binding $ <var:U0$ as $ <var:o>$ . This code advances $ \{ <var:t> = <var:s> \land <var:U0> = <nat:3> \} $ into the condition $ \{ <var:t> = <var:s> \land <var:o> = <nat:3> \} $ . This is deduced using the assignment law given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:o> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <def:poly> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 