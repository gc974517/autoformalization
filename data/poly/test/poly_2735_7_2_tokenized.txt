\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:T> ; <var:b> := <nat:2> + <var:b> * <var:T> ; <var:b> := <nat:3> + <var:b> * <var:T> ; <var:b> := <nat:2> + <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> \end{verbatim} Assuming that $ <var:T> = <var:B> $ ahead of the evaluation of the series of instructions , it must be that we see $ <var:b> = <nat:3> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:4> $ when set of commands terminates . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:T> = <var:B> \} \\ <var:b> := <nat:3> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> + <nat:1> \} \\ <var:b> := <nat:2> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} \\ <var:b> := <nat:3> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} \\ <var:b> := <nat:2> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:4> \} \\ <var:b> := <nat:4> + <var:b> * <var:T> \\ \{ <var:T> = <var:B> \land <var:b> = <nat:3> \cdot <var:B> ^ <nat:6> + <nat:1> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:T> ; <var:b> := <nat:2> + <var:b> * <var:T> ; <var:b> := <nat:3> + <var:b> * <var:T> ; <var:b> := <nat:2> + <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> ; <var:b> := <nat:4> + <var:b> * <var:T> {{ <var:b> = <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:b> = <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 