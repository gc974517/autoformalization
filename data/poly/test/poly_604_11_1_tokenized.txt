\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:A1> := <var:y> ; <var:A2> := <var:A1> * <var:y> ; <var:A3> := <var:A2> * <var:y> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:2> ; <var:p> := <var:A3> <var:p> := <var:p> + <var:A2> <var:p> := <var:p> + <var:A1> <var:p> := <var:p> + <var:A0> \end{verbatim} Assuming it to hold that $ <var:y> = <var:G> $ before evaluating this set of commands it must be that we see $ <var:p> = <nat:2> \times <var:G> ^ <nat:3> + <nat:9> \times <var:G> ^ <nat:2> + <nat:5> \times <var:G> + <nat:4> $ once series of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of the code can be seen by usual Hoare techniques . Considering the subsequent bits of codecontained in the series of instructions , \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:A1> := <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \, <var:A2> := <var:A1> * <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \} \end{eqnarray} Moving onward , we have \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:A1> := <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \, <var:A2> := <var:A1> * <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \} \, <var:A3> := <var:A2> * <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \} \, <var:A0> := <nat:4> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \, <var:A1> := <var:A1> * <nat:5> \, \{ <var:y> = <var:G> \land <var:A1> = <nat:5> \cdot <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <nat:5> \cdot <var:G> \land <var:A2> = <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \, <var:A2> := <var:A2> * <nat:9> \, \{ <var:y> = <var:G> \land <var:A1> = <nat:5> \cdot <var:G> \land <var:A2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \\ \{ <var:y> = <var:G> \land <var:A1> = <nat:5> \cdot <var:G> \land <var:A2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:A3> = <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \, <var:A3> := <var:A3> * <nat:2> \, \{ <var:y> = <var:G> \land <var:A1> = <nat:5> \cdot <var:G> \land <var:A2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:A3> = <nat:2> \cdot <var:G> ^ <nat:3> \land <var:A0> = <nat:4> \} \end{eqnarray} This is sound using the variable binding inference rule defined by usual Hoare reasoning . Going to the next step , we see \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:A1> := <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \end{eqnarray} Considering the subsequent line found in the set of commands , we see \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:A1> := <var:y> \, \{ <var:y> = <var:G> \land <var:A1> = <var:G> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:y> = <var:G> }} <var:A1> := <var:y> ; <var:A2> := <var:A1> * <var:y> ; <var:A3> := <var:A2> * <var:y> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:5> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:2> ; <var:p> := <var:A3> <var:p> := <var:p> + <var:A2> <var:p> := <var:p> + <var:A1> <var:p> := <var:p> + <var:A0> {{ <var:p> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <var:G> /\ <var:A2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <var:G> /\ <var:A2> = <var:G> ^ <nat:2> /\ <var:A3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <var:G> /\ <var:A2> = <var:G> ^ <nat:2> /\ <var:A3> = <var:G> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <nat:5> * <var:G> /\ <var:A2> = <var:G> ^ <nat:2> /\ <var:A3> = <var:G> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <nat:5> * <var:G> /\ <var:A2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:A3> = <var:G> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <nat:5> * <var:G> /\ <var:A2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <nat:5> * <var:G> /\ <var:A2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:2> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A1> = <nat:5> * <var:G> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:p> = <nat:2> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 