\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} : \begin{verbatim} <var:L1> := <var:n> ; <var:L2> := <var:L1> * <var:n> ; <var:L3> := <var:L2> * <var:n> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:9> ; <var:L3> := <var:L3> * <nat:6> ; <var:T> := <var:L3> <var:T> := <var:T> + <var:L2> <var:T> := <var:T> + <var:L1> <var:T> := <var:T> + <var:L0> \end{verbatim} Allowing , letting natural numbers $ <var:P> $ , it to be that $ <var:n> = <var:P> $ ahead of executing our series of commands , it must be that we see $ <var:T> = <nat:6> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:n> = <var:P> \} \\ <var:L1> := <var:n> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <var:P> \} \\ <var:L2> := <var:L1> * <var:n> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:n> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <nat:2> \cdot <var:P> \land <var:L2> = <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ <var:L2> := <var:L2> * <nat:9> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <nat:2> \cdot <var:P> \land <var:L2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:L3> = <var:P> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ <var:L3> := <var:L3> * <nat:6> ; \\ \{ <var:n> = <var:P> \land <var:L1> = <nat:2> \cdot <var:P> \land <var:L2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:L3> = <nat:6> \cdot <var:P> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ <var:T> := <var:L3> \\ \{ <var:n> = <var:P> \land <var:L1> = <nat:2> \cdot <var:P> \land <var:L2> = <nat:9> \cdot <var:P> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> \cdot <var:P> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:L2> \\ \{ <var:n> = <var:P> \land <var:L1> = <nat:2> \cdot <var:P> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:L1> \\ \{ <var:n> = <var:P> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> \} \\ <var:T> := <var:T> + <var:L0> \\ \{ <var:n> = <var:P> \land <var:T> = <nat:6> \cdot <var:P> ^ <nat:3> + <nat:9> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:3> \} \end{eqnarray} Given the above , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:n> = <var:P> }} <var:L1> := <var:n> ; <var:L2> := <var:L1> * <var:n> ; <var:L3> := <var:L2> * <var:n> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:9> ; <var:L3> := <var:L3> * <nat:6> ; <var:T> := <var:L3> <var:T> := <var:T> + <var:L2> <var:T> := <var:T> + <var:L1> <var:T> := <var:T> + <var:L0> {{ <var:T> = <nat:6> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <nat:2> * <var:P> /\ <var:L2> = <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <nat:2> * <var:P> /\ <var:L2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:L3> = <var:P> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <nat:2> * <var:P> /\ <var:L2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:L3> = <nat:6> * <var:P> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <nat:2> * <var:P> /\ <var:L2> = <nat:9> * <var:P> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:T> = <nat:6> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L1> = <nat:2> * <var:P> /\ <var:L0> = <nat:3> /\ <var:T> = <nat:6> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:L0> = <nat:3> /\ <var:T> = <nat:6> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:T> = <nat:6> * <var:P> ^ <nat:3> + <nat:9> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 