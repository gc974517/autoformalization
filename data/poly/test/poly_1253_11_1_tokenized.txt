\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:x> ; <var:L2> := <var:L1> * <var:x> ; <var:L3> := <var:L2> * <var:x> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:6> ; <var:L3> := <var:L3> * <nat:6> ; <var:e> := <var:L3> <var:e> := <var:e> + <var:L2> <var:e> := <var:e> + <var:L1> <var:e> := <var:e> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Assuming $ <var:x> = <var:z> $ ahead of evaluating the segment of code , it follows that we have $ <var:e> = <nat:6> \times <var:z> ^ <nat:3> + <nat:6> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:z> \} \\ <var:L1> := <var:x> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <var:z> \} \\ <var:L2> := <var:L1> * <var:x> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:x> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \end{eqnarray} Allowing running this set of instructions gives : \begin{eqnarray} <var:L1> := <var:L1> * <nat:3> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <nat:3> \times <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ <var:L2> := <var:L2> * <nat:6> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <nat:3> \times <var:z> \land <var:L2> = <nat:6> \times <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ <var:L3> := <var:L3> * <nat:6> ; \\ \{ <var:x> = <var:z> \land <var:L1> = <nat:3> \times <var:z> \land <var:L2> = <nat:6> \times <var:z> ^ <nat:2> \land <var:L3> = <nat:6> \times <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ <var:e> := <var:L3> \\ \{ <var:x> = <var:z> \land <var:L1> = <nat:3> \times <var:z> \land <var:L2> = <nat:6> \times <var:z> ^ <nat:2> \land <var:L0> = <nat:7> \land <var:e> = <nat:6> \times <var:z> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:L2> \\ \{ <var:x> = <var:z> \land <var:L1> = <nat:3> \times <var:z> \land <var:L0> = <nat:7> \land <var:e> = <nat:6> \times <var:z> ^ <nat:3> + <nat:6> \times <var:z> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:L1> \\ \{ <var:x> = <var:z> \land <var:L0> = <nat:7> \land <var:e> = <nat:6> \times <var:z> ^ <nat:3> + <nat:6> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> \} \\ <var:e> := <var:e> + <var:L0> \\ \{ <var:x> = <var:z> \land <var:e> = <nat:6> \times <var:z> ^ <nat:3> + <nat:6> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:x> ; <var:L2> := <var:L1> * <var:x> ; <var:L3> := <var:L2> * <var:x> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:6> ; <var:L3> := <var:L3> * <nat:6> ; <var:e> := <var:L3> <var:e> := <var:e> + <var:L2> <var:e> := <var:e> + <var:L1> <var:e> := <var:e> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:x> = <var:z> }} <def:poly> {{ <var:e> = <nat:6> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <nat:3> * <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <nat:3> * <var:z> /\ <var:L2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <nat:3> * <var:z> /\ <var:L2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:L3> = <nat:6> * <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <nat:3> * <var:z> /\ <var:L2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:L0> = <nat:7> /\ <var:e> = <nat:6> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L1> = <nat:3> * <var:z> /\ <var:L0> = <nat:7> /\ <var:e> = <nat:6> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:L0> = <nat:7> /\ <var:e> = <nat:6> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:e> = <nat:6> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 