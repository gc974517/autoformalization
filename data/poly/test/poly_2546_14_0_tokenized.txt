\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:d0> := <nat:9> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:m> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:m> ; <var:d2> := <var:d2> * <var:m> ; <var:d3> := <nat:8> ; <var:d3> := <var:d3> * <var:m> ; <var:d3> := <var:d3> * <var:m> ; <var:d3> := <var:d3> * <var:m> ; <var:z> := <var:d3> ; <var:z> := <var:z> + <var:d2> ; <var:z> := <var:z> + <var:d1> ; <var:z> := <var:z> + <var:d0> \end{verbatim} Allowing it to hold that $ <var:m> = <var:f> $ ( assuming some natural numbers $ <var:f> $ ) ahead of evaluating our set of instructions it holds that we have $ <var:z> = <nat:8> \cdot <var:f> ^ <nat:3> + <nat:8> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> + <nat:9> $ . \end{theorem} \begin{proof} We can see that the below decorated code . \begin{eqnarray} \{ <var:m> = <var:f> \} \\ <var:d0> := <nat:9> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \} \\ <var:d1> := <nat:5> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \} \\ <var:d1> := <var:d1> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \} \\ <var:d2> := <nat:8> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \} \\ <var:d2> := <var:d2> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> \} \\ <var:d2> := <var:d2> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \} \\ <var:d3> := <nat:8> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \land <var:d3> = <nat:8> \} \\ <var:d3> := <var:d3> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:f> \} \\ <var:d3> := <var:d3> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:f> ^ <nat:2> \} \\ <var:d3> := <var:d3> * <var:m> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:f> ^ <nat:3> \} \\ <var:z> := <var:d3> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:d2> = <nat:8> \cdot <var:f> ^ <nat:2> \land <var:z> = <nat:8> \cdot <var:f> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:d2> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:d1> = <nat:5> \cdot <var:f> \land <var:z> = <nat:8> \cdot <var:f> ^ <nat:3> + <nat:8> \cdot <var:f> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:d1> ; \\ \{ <var:m> = <var:f> \land <var:d0> = <nat:9> \land <var:z> = <nat:8> \cdot <var:f> ^ <nat:3> + <nat:8> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> \} \\ <var:z> := <var:z> + <var:d0> \\ \{ <var:m> = <var:f> \land <var:z> = <nat:8> \cdot <var:f> ^ <nat:3> + <nat:8> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> + <nat:9> \} \end{eqnarray} The application of usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:m> = <var:f> }} <var:d0> := <nat:9> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:m> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:m> ; <var:d2> := <var:d2> * <var:m> ; <var:d3> := <nat:8> ; <var:d3> := <var:d3> * <var:m> ; <var:d3> := <var:d3> * <var:m> ; <var:d3> := <var:d3> * <var:m> ; <var:z> := <var:d3> ; <var:z> := <var:z> + <var:d2> ; <var:z> := <var:z> + <var:d1> ; <var:z> := <var:z> + <var:d0> {{ <var:z> = <nat:8> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:d3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:d2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:z> = <nat:8> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:d1> = <nat:5> * <var:f> /\ <var:z> = <nat:8> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:d0> = <nat:9> /\ <var:z> = <nat:8> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:f> /\ <var:z> = <nat:8> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 