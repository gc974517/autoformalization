\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:Z> ; <var:A> := <var:K1> ; <var:A> := <var:A> + <var:K0> \end{verbatim} Allow , assuming some positive integer coefficients $ <var:R> $ , that we have $ <var:Z> = <var:R> $ before evaluating the list of commands , it follows that we see $ <var:A> = <nat:7> \times <var:R> + <nat:5> $ when set of commands executes . \end{theorem} \begin{proof} Showing our claim about correctness for this code is demonstrated using standard Hoare techniques . Focusing on the proceeding commands seen in our list of commands , we see \begin{verbatim} { <var:Z> = <var:R> } <var:K0> := <nat:5> { <var:Z> = <var:R> \land <var:K0> = <nat:5> } { <var:Z> = <var:R> \land <var:K0> = <nat:5> } <var:K1> := <nat:7> { <var:Z> = <var:R> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> } { <var:Z> = <var:R> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> } <var:K1> := <var:K1> * <var:Z> { <var:Z> = <var:R> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> \times <var:R> } { <var:Z> = <var:R> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> \times <var:R> } <var:A> := <var:K1> { <var:Z> = <var:R> \land <var:K0> = <nat:5> \land <var:A> = <nat:7> \times <var:R> } \end{verbatim} Moving on to the proceeding line seen in the segment of code , we see \begin{verbatim} { <var:Z> = <var:R> } <var:K0> := <nat:5> { <var:Z> = <var:R> \land <var:K0> = <nat:5> } \end{verbatim} This is guaranteed through the variable update inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Z> = <var:R> }} <var:K0> := <nat:5> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:Z> ; <var:A> := <var:K1> ; <var:A> := <var:A> + <var:K0> {{ <var:A> = <nat:7> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:K0> = <nat:5> /\ <var:A> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:R> /\ <var:A> = <nat:7> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 