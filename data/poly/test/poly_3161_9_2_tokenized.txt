\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u> := <nat:3> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Assume it to be that $ <var:V> = <var:n> $ prior to the evaluation of this series of commands , it holds that we have $ <var:u> = <nat:3> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this set of commands is given with usual Hoare logic . Advancing to the next step , we see the assignment statement \verb | <var:u> := <nat:3> ; | . This takes $ \{ <var:V> = <var:n> \} $ to $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \} $ . This is deduced using the assignment law obtained from Hoare logic . Moving on , we have the variable binding line binding $ <var:u> * <var:V> $ to $ <var:u>$ . This moves the condition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \} $ into $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> + \} $ . This is ensured through the assignment rule from typical Hoare logic . Moving forward to the next step , we have the environment update command letting $ <nat:1> + <var:u> * <var:V> $ as $ <var:u>$ . This takes $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> + \} $ as the condition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:2> + <nat:1> \} $ . This is sound by the assignment scheme in typical Hoare logic . Advancing on , we have the variable update line assigning $ <nat:1> + <var:u> * <var:V> $ toward $ <var:u>$ . This takes $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> + <nat:1> \} $ . Immediately following , we have the variable binding command \verb | <var:u> := <nat:4> + <var:u> * <var:V> ; | . This statement advances the precondition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> + <nat:1> \} $ into $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> \} $ . Paying attention to the next step seen in our list of instructions , we have the variable update code yielding $ <nat:4> + <var:u> * <var:V> $ as $ <var:u>$ . This redefines $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> \} $ to the condition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:4> \} $ . Stepping through , we have the binding command letting $ <nat:3> + <var:u> * <var:V> $ as $ <var:u>$ . This forwards the precondition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:4> \} $ as $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:3> \} $ . This is ensured through the assignment inference rule given in standard Hoare techniques . Shifting focus toward the proceeding command found in the list of commands , we have the variable update code binding $ <nat:2> + <var:u> * <var:V> $ toward $ <var:u>$ . This forwards the condition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:2> \} $ . Going to the next step , we see the variable binding code defining $ <nat:4> + <var:u> * <var:V$ toward $ <var:u>$ . This code takes the precondition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:7> + <nat:1> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:2> \} $ to the condition $ \{ <var:V> = <var:n> \land <var:u> = <nat:3> \times <var:n> ^ <nat:8> + <nat:1> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:4> \} $ . This is deduced with the assignment scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:3> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:u> = <nat:3> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:u> = <nat:3> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 