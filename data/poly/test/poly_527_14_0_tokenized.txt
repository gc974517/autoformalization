\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:o> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:o> ; <var:W2> := <var:W2> * <var:o> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:o> ; <var:W3> := <var:W3> * <var:o> ; <var:W3> := <var:W3> * <var:o> ; <var:P> := <var:W3> ; <var:P> := <var:P> + <var:W2> ; <var:P> := <var:P> + <var:W1> ; <var:P> := <var:P> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:o> = <var:M> $ for every $ <var:M> $ before executing our set of instructions it must be that we see $ <var:P> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:o> = <var:M> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \} \\ <var:W1> := <nat:2> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> \} \\ <var:W1> := <var:W1> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \} \\ <var:W2> := <nat:4> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> \} \\ <var:W2> := <var:W2> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> \} \\ <var:W2> := <var:W2> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \} \\ <var:W3> := <nat:3> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \land <var:W3> = <nat:3> \} \\ <var:W3> := <var:W3> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \land <var:W3> = <nat:3> * <var:M> \} \\ <var:W3> := <var:W3> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \land <var:W3> = <nat:3> * <var:M> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:o> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \land <var:W3> = <nat:3> * <var:M> ^ <nat:3> \} \\ <var:P> := <var:W3> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:W2> = <nat:4> * <var:M> ^ <nat:2> \land <var:P> = <nat:3> * <var:M> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:W2> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:W1> = <nat:2> * <var:M> \land <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:W1> ; \\ \{ <var:o> = <var:M> \land <var:W0> = <nat:1> \land <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> \} \\ <var:P> := <var:P> + <var:W0> \\ \{ <var:o> = <var:M> \land <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> \} \end{eqnarray} Considering the above , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:o> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:o> ; <var:W2> := <var:W2> * <var:o> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:o> ; <var:W3> := <var:W3> * <var:o> ; <var:W3> := <var:W3> * <var:o> ; <var:P> := <var:W3> ; <var:P> := <var:P> + <var:W2> ; <var:P> := <var:P> + <var:W1> ; <var:P> := <var:P> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:o> = <var:M> }} <def:poly> {{ <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:W3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:W2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:P> = <nat:3> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:2> * <var:M> /\ <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:W0> = <nat:1> /\ <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:M> /\ <var:P> = <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 