\begin{document} \begin{theorem} Consider the following set of instructions as \begin{verbatim} <var:S1> := <var:K> ; <var:S2> := <var:S1> * <var:K> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:8> ; <var:o> := <var:S2> <var:o> := <var:o> + <var:S1> <var:o> := <var:o> + <var:S0> \end{verbatim} Allow that $ <var:K> = <var:b> $ ahead of interpreting this series of commands , it follows that we have $ <var:o> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:b> \} \\ <var:S1> := <var:K> ; \\ \{ <var:K> = <var:b> \land <var:S1> = <var:b> \} \\ <var:S2> := <var:S1> * <var:K> ; \\ \{ <var:K> = <var:b> \land <var:S1> = <var:b> \land <var:S2> = <var:b> ^ <nat:2> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:K> = <var:b> \land <var:S1> = <var:b> \land <var:S2> = <var:b> ^ <nat:2> \land <var:S0> = <nat:1> \} \\ <var:S1> := <var:S1> * <nat:2> ; \\ \{ <var:K> = <var:b> \land <var:S1> = <nat:2> * <var:b> \land <var:S2> = <var:b> ^ <nat:2> \land <var:S0> = <nat:1> \} \\ <var:S2> := <var:S2> * <nat:8> ; \\ \{ <var:K> = <var:b> \land <var:S1> = <nat:2> * <var:b> \land <var:S2> = <nat:8> * <var:b> ^ <nat:2> \land <var:S0> = <nat:1> \} \\ <var:o> := <var:S2> \\ \{ <var:K> = <var:b> \land <var:S1> = <nat:2> * <var:b> \land <var:S0> = <nat:1> \land <var:o> = <nat:8> * <var:b> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:S1> \\ \{ <var:K> = <var:b> \land <var:S0> = <nat:1> \land <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> \} \\ <var:o> := <var:o> + <var:S0> \\ \{ <var:K> = <var:b> \land <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> \} \end{eqnarray} Applying typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:K> = <var:b> }} <var:S1> := <var:K> ; <var:S2> := <var:S1> * <var:K> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:8> ; <var:o> := <var:S2> <var:o> := <var:o> + <var:S1> <var:o> := <var:o> + <var:S0> {{ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <var:b> /\ <var:S2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <var:b> /\ <var:S2> = <var:b> ^ <nat:2> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <nat:2> * <var:b> /\ <var:S2> = <var:b> ^ <nat:2> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <nat:2> * <var:b> /\ <var:S2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S1> = <nat:2> * <var:b> /\ <var:S0> = <nat:1> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:S0> = <nat:1> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:o> = <nat:8> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 