\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:K> ; <var:z2> := <var:z1> * <var:K> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:P> := <var:z2> <var:P> := <var:P> + <var:z1> <var:P> := <var:P> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:K> = <var:e> $ --- taking natural numbers $ <var:e> $ --- prior to the execution of our program it holds that $ <var:P> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:5> $ after list of commands has finished . \end{theorem} \begin{proof} The flow of logic for the code segment can be given through usual Hoare techniques . Moving on to the proceeding command found in the series of commands , we see the assignment code yielding $ <var:K> $ to $ <var:z1>$ . This statement transfers $ \{ <var:K> = <var:e> \} $ as the postcondition $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \} $ . Observing the subsequent line of code seen in our program , we see the binding line binding $ <var:z1> * <var:K> $ as $ <var:z2>$ . This statement advances the condition $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \} $ toward $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \} $ . Focusing on the next command in the set of commands , the code giving $ <nat:5> $ into $ <var:z0>$ . This forwards the condition $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \} $ toward the postcondition $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ . This is known to be sound with the assignment scheme obtained from typical Hoare reasoning . Taking a look at the next piece of code contained in the list of commands , we see the assignment line \verb | <var:z1> := <var:z1> * <nat:9> ; | . This forwards the precondition $ \{ <var:K> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ to $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ . This is ensured through the assignment rule defined in standard Hoare techniques . Going to the next step , the binding statement \verb | <var:z2> := <var:z2> * <nat:9> ; | . This advances $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ to the condition $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z2> = <nat:9> \times <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ . This is guaranteed through the assignment rule given by Hoare techniques . Jumping to the next piece of code seen in our list of commands , we have the variable update line \verb | <var:P> := <var:z2> | . This statement takes the precondition $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z2> = <nat:9> \times <var:e> ^ <nat:2> \land <var:z0> = <nat:5> \} $ as $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z0> = <nat:5> \land <var:P> = <nat:9> \times <var:e> ^ <nat:2> \} $ . Taking another step toward the proceeding command in the series of commands , we see the environment update statement \verb | <var:P> := <var:P> + <var:z1> | . This command advances the condition $ \{ <var:K> = <var:e> \land <var:z1> = <nat:9> \times <var:e> \land <var:z0> = <nat:5> \land <var:P> = <nat:9> \times <var:e> ^ <nat:2> \} $ into the condition $ \{ <var:K> = <var:e> \land <var:z0> = <nat:5> \land <var:P> = <nat:9> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> \} $ . This is ensured through the assignment scheme from usual Hoare reasoning . Honing in on the following line of code contained in the segment of code , the binding statement defining $ <var:P> + <var:z0$ as $ <var:P>$ . This line forwards $ \{ <var:K> = <var:e> \land <var:z0> = <nat:5> \land <var:P> = <nat:9> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> \} $ toward the postcondition $ \{ <var:K> = <var:e> \land <var:P> = <nat:9> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:5> \} $ . This is sound using the assignment scheme in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z1> := <var:K> ; <var:z2> := <var:z1> * <var:K> ; <var:z0> := <nat:5> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:9> ; <var:P> := <var:z2> <var:P> := <var:P> + <var:z1> <var:P> := <var:P> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:K> = <var:e> }} <def:poly> {{ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <nat:9> * <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <nat:9> * <var:e> /\ <var:z2> = <nat:9> * <var:e> ^ <nat:2> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z1> = <nat:9> * <var:e> /\ <var:z0> = <nat:5> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:z0> = <nat:5> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:e> /\ <var:P> = <nat:9> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 