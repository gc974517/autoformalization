\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:5> ; <var:L> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:t> = <var:Z> $ , for every positive integers $ <var:Z> $ , prior to the evaluation of our list of instructions , it holds that we have $ <var:L> = <nat:5> $ . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:t> = <var:Z> \} \\ <var:H0> := <nat:5> ; \\ \{ <var:t> = <var:Z> \land <var:H0> = <nat:5> \} \\ <var:L> := <var:H0> \\ \{ <var:t> = <var:Z> \land <var:L> = <nat:5> \} \end{eqnarray} Thusly , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:L> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:t> = <var:Z> }} <def:poly> {{ <var:L> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:L> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 