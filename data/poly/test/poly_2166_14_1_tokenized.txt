\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:k1> := <var:I> ; <var:k2> := <var:k1> * <var:I> ; <var:k3> := <var:k2> * <var:I> ; <var:k4> := <var:k3> * <var:I> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:8> ; <var:k4> := <var:k4> * <nat:1> ; <var:B> := <var:k4> <var:B> := <var:B> + <var:k3> <var:B> := <var:B> + <var:k2> <var:B> := <var:B> + <var:k1> <var:B> := <var:B> + <var:k0> \end{verbatim} Allowing for all $ <var:p> $ it to hold that $ <var:I> = <var:p> $ ahead of running this series of instructions then we see $ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> $ once list of commands exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:I> = <var:p> \} \\ <var:k1> := <var:I> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <var:p> \} \\ <var:k2> := <var:k1> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \} \\ <var:k4> := <var:k3> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k1> := <var:k1> * <nat:4> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:k3> = <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k3> := <var:k3> * <nat:8> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:p> ^ <nat:3> \land <var:k4> = <var:p> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:k4> := <var:k4> * <nat:1> ; \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:p> ^ <nat:3> \land <var:k4> = <nat:1> \times <var:p> ^ <nat:4> \land <var:k0> = <nat:4> \} \\ <var:B> := <var:k4> \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:k3> = <nat:8> \times <var:p> ^ <nat:3> \land <var:k0> = <nat:4> \land <var:B> = <nat:1> \times <var:p> ^ <nat:4> \} \end{eqnarray} Furthering the evaluation of this segment of code returns : \begin{eqnarray} <var:B> := <var:B> + <var:k3> \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:k0> = <nat:4> \land <var:B> = <nat:1> \times <var:p> ^ <nat:4> + <nat:8> \times <var:p> ^ <nat:3> \} \end{eqnarray} Furthering running the code segment returns : \begin{eqnarray} <var:B> := <var:B> + <var:k2> \\ \{ <var:I> = <var:p> \land <var:k1> = <nat:4> \times <var:p> \land <var:k0> = <nat:4> \land <var:B> = <nat:1> \times <var:p> ^ <nat:4> + <nat:8> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:k1> \\ \{ <var:I> = <var:p> \land <var:k0> = <nat:4> \land <var:B> = <nat:1> \times <var:p> ^ <nat:4> + <nat:8> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> \} \\ <var:B> := <var:B> + <var:k0> \\ \{ <var:I> = <var:p> \land <var:B> = <nat:1> \times <var:p> ^ <nat:4> + <nat:8> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:4> \} \end{eqnarray} Considering the above , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:I> = <var:p> }} <var:k1> := <var:I> ; <var:k2> := <var:k1> * <var:I> ; <var:k3> := <var:k2> * <var:I> ; <var:k4> := <var:k3> * <var:I> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:8> ; <var:k4> := <var:k4> * <nat:1> ; <var:B> := <var:k4> <var:B> := <var:B> + <var:k3> <var:B> := <var:B> + <var:k2> <var:B> := <var:B> + <var:k1> <var:B> := <var:B> + <var:k0> {{ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:k3> = <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:p> ^ <nat:3> /\ <var:k4> = <var:p> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:p> ^ <nat:3> /\ <var:k4> = <nat:1> * <var:p> ^ <nat:4> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:p> ^ <nat:3> /\ <var:k0> = <nat:4> /\ <var:B> = <nat:1> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:k0> = <nat:4> /\ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k1> = <nat:4> * <var:p> /\ <var:k0> = <nat:4> /\ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:k0> = <nat:4> /\ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:B> = <nat:1> * <var:p> ^ <nat:4> + <nat:8> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 