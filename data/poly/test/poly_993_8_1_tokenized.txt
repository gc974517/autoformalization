\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:d> ; <var:r2> := <var:r1> * <var:d> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:9> ; <var:r2> := <var:r2> * <nat:4> ; <var:K> := <var:r2> <var:K> := <var:K> + <var:r1> <var:K> := <var:K> + <var:r0> \end{verbatim} Assuming that we have $ <var:d> = <var:n> $ prior to evaluating our code segment it follows that we have $ <var:K> = <nat:4> \times <var:n> ^ <nat:2> + <nat:9> \times <var:n> + <nat:7> $ once program has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:r1> := <var:d> ; \\ \{ <var:d> = <var:n> \land <var:r1> = <var:n> \} \\ <var:r2> := <var:r1> * <var:d> ; \\ \{ <var:d> = <var:n> \land <var:r1> = <var:n> \land <var:r2> = <var:n> ^ <nat:2> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:d> = <var:n> \land <var:r1> = <var:n> \land <var:r2> = <var:n> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:9> ; \\ \{ <var:d> = <var:n> \land <var:r1> = <nat:9> \times <var:n> \land <var:r2> = <var:n> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:r2> := <var:r2> * <nat:4> ; \\ \{ <var:d> = <var:n> \land <var:r1> = <nat:9> \times <var:n> \land <var:r2> = <nat:4> \times <var:n> ^ <nat:2> \land <var:r0> = <nat:7> \} \\ <var:K> := <var:r2> \\ \{ <var:d> = <var:n> \land <var:r1> = <nat:9> \times <var:n> \land <var:r0> = <nat:7> \land <var:K> = <nat:4> \times <var:n> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:r1> \\ \{ <var:d> = <var:n> \land <var:r0> = <nat:7> \land <var:K> = <nat:4> \times <var:n> ^ <nat:2> + <nat:9> \times <var:n> \} \\ <var:K> := <var:K> + <var:r0> \\ \{ <var:d> = <var:n> \land <var:K> = <nat:4> \times <var:n> ^ <nat:2> + <nat:9> \times <var:n> + <nat:7> \} \end{eqnarray} Applying standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <var:r1> := <var:d> ; <var:r2> := <var:r1> * <var:d> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:9> ; <var:r2> := <var:r2> * <nat:4> ; <var:K> := <var:r2> <var:K> := <var:K> + <var:r1> <var:K> := <var:K> + <var:r0> {{ <var:K> = <nat:4> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <var:n> /\ <var:r2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <var:n> /\ <var:r2> = <var:n> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <nat:9> * <var:n> /\ <var:r2> = <var:n> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <nat:9> * <var:n> /\ <var:r2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r1> = <nat:9> * <var:n> /\ <var:r0> = <nat:7> /\ <var:K> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:r0> = <nat:7> /\ <var:K> = <nat:4> * <var:n> ^ <nat:2> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:K> = <nat:4> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 