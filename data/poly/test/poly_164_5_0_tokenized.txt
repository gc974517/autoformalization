\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:N> ; <var:W> := <var:R1> ; <var:W> := <var:W> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assuming that we have $ <var:N> = <var:f> $ , for all $ <var:f> \in \mathbb{Z}^+ $ , prior to running our code segment , it must be that $ <var:W> = <nat:8> * <var:f> + <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} The argument for the code segment is evident with usual Hoare logic . Paying attention to the proceeding steps seen in our segment of code , we have \verb | { <var:N> = <var:f> } <var:R0> := <nat:6> { <var:N> = <var:f> \land <var:R0> = <nat:6> } | , \verb | { <var:N> = <var:f> \land <var:R0> = <nat:6> } <var:R1> := <nat:8> { <var:N> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> } | , \verb | { <var:N> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> } <var:R1> := <var:R1> * <var:N> { <var:N> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> * <var:f> } | and \verb | { <var:N> = <var:f> \land <var:R0> = <nat:6> \land <var:R1> = <nat:8> * <var:f> } <var:W> := <var:R1> { <var:N> = <var:f> \land <var:R0> = <nat:6> \land <var:W> = <nat:8> * <var:f> } | . Moving on to the following command contained in our set of commands , we see \verb | { <var:N> = <var:f> } <var:R0> := <nat:6> { <var:N> = <var:f> \land <var:R0> = <nat:6> } | . This is deduced through the law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:N> ; <var:W> := <var:R1> ; <var:W> := <var:W> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <def:poly> {{ <var:W> = <nat:8> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:R0> = <nat:6> /\ <var:W> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:W> = <nat:8> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 