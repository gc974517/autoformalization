\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:C1> := <var:p> ; <var:C2> := <var:C1> * <var:p> ; <var:C3> := <var:C2> * <var:p> ; <var:C4> := <var:C3> * <var:p> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:2> ; <var:Z> := <var:C4> <var:Z> := <var:Z> + <var:C3> <var:Z> := <var:Z> + <var:C2> <var:Z> := <var:Z> + <var:C1> <var:Z> := <var:Z> + <var:C0> \end{verbatim} Assuming that $ <var:p> = <var:W> $ before evaluating our set of commands it holds that we see $ <var:Z> = <nat:2> \cdot <var:W> ^ <nat:4> + <nat:3> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:W> \} \\ <var:C1> := <var:p> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <var:W> \} \\ <var:C2> := <var:C1> * <var:p> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:p> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:p> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C4> = <var:W> ^ <nat:4> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C4> = <var:W> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:2> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C4> = <var:W> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C2> := <var:C2> * <nat:3> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C3> = <var:W> ^ <nat:3> \land <var:C4> = <var:W> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C3> := <var:C3> * <nat:3> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C3> = <nat:3> \times <var:W> ^ <nat:3> \land <var:C4> = <var:W> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:C4> := <var:C4> * <nat:2> ; \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C3> = <nat:3> \times <var:W> ^ <nat:3> \land <var:C4> = <nat:2> \times <var:W> ^ <nat:4> \land <var:C0> = <nat:1> \} \\ <var:Z> := <var:C4> \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C3> = <nat:3> \times <var:W> ^ <nat:3> \land <var:C0> = <nat:1> \land <var:Z> = <nat:2> \times <var:W> ^ <nat:4> \} \\ <var:Z> := <var:Z> + <var:C3> \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C0> = <nat:1> \land <var:Z> = <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:C2> \\ \{ <var:p> = <var:W> \land <var:C1> = <nat:2> \times <var:W> \land <var:C0> = <nat:1> \land <var:Z> = <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:C1> \\ \{ <var:p> = <var:W> \land <var:C0> = <nat:1> \land <var:Z> = <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> \} \\ <var:Z> := <var:Z> + <var:C0> \\ \{ <var:p> = <var:W> \land <var:Z> = <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:1> \} \end{eqnarray} Utilizing Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <var:C1> := <var:p> ; <var:C2> := <var:C1> * <var:p> ; <var:C3> := <var:C2> * <var:p> ; <var:C4> := <var:C3> * <var:p> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:2> ; <var:Z> := <var:C4> <var:Z> := <var:Z> + <var:C3> <var:Z> := <var:Z> + <var:C2> <var:Z> := <var:Z> + <var:C1> <var:Z> := <var:Z> + <var:C0> {{ <var:Z> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C4> = <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C4> = <var:W> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C4> = <var:W> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C3> = <var:W> ^ <nat:3> /\ <var:C4> = <var:W> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:W> ^ <nat:3> /\ <var:C4> = <var:W> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:W> ^ <nat:3> /\ <var:C4> = <nat:2> * <var:W> ^ <nat:4> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:W> ^ <nat:3> /\ <var:C0> = <nat:1> /\ <var:Z> = <nat:2> * <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C0> = <nat:1> /\ <var:Z> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C1> = <nat:2> * <var:W> /\ <var:C0> = <nat:1> /\ <var:Z> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:C0> = <nat:1> /\ <var:Z> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:Z> = <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 