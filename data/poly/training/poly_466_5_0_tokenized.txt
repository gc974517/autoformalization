\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:i> ; <var:a> := <var:z1> ; <var:a> := <var:a> + <var:z0> \end{verbatim} Assuming ( for every whole numbers $ <var:s> $ ) $ <var:i> = <var:s> $ ahead of evaluating this list of commands , it holds that $ <var:a> = <nat:1> * <var:s> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is given by usual Hoare reasoning . Shifting focus toward the proceeding line found in our code , we have the statement \verb | <var:z0> := <nat:4> ; | . This line advances the precondition $ \{ <var:i> = <var:s> \} $ toward the postcondition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \} $ . Paying attention to the following step seen in the list of instructions , the assignment line assigning $ <nat:1> $ as $ <var:z1>$ . This command moves the condition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \} $ into the condition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \} $ . Immediately following , we see the binding command binding $ <var:z1> * <var:i> $ toward $ <var:z1>$ . This line moves $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \} $ toward $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \times <var:s> \} $ . Keeping momentum , the variable assignmet code giving $ <var:z1> $ toward $ <var:a>$ . This transfers the condition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:z1> = <nat:1> \times <var:s> \} $ as the postcondition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:a> = <nat:1> \times <var:s> \} $ . Moving forward , we see the variable assignmet code \verb | <var:a> := <var:a> + <var:z0> | . This code forwards the precondition $ \{ <var:i> = <var:s> \land <var:z0> = <nat:4> \land <var:a> = <nat:1> \times <var:s> \} $ into the condition $ \{ <var:i> = <var:s> \land <var:a> = <nat:1> \times <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:i> = <var:s> }} <var:z0> := <nat:4> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:i> ; <var:a> := <var:z1> ; <var:a> := <var:a> + <var:z0> {{ <var:a> = <nat:1> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:z0> = <nat:4> /\ <var:a> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:a> = <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 