\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:P1> := <var:c> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:5> ; <var:J> := <var:P1> <var:J> := <var:J> + <var:P0> \end{verbatim} Allow $ <var:c> = <var:x> $ ( given all positive integer coefficients $ <var:x> $ ) prior to the evaluation of this code it must be that we have $ <var:J> = <nat:5> \cdot <var:x> + <nat:7> $ when code segment terminates . \end{theorem} \begin{proof} The argument for our code segment is evident with usual Hoare logic . Moving on to the subsequent statement found in the code segment , the assignment line assigning $ <var:c> $ toward $ <var:P1>$ . This command takes the precondition $ \{ <var:c> = <var:x> \} $ toward $ \{ <var:c> = <var:x> \land <var:P1> = <var:x> \} $ . Considering the upcoming statement contained in our list of instructions , the variable assignmet code \verb | <var:P0> := <nat:7> ; | . This statement moves $ \{ <var:c> = <var:x> \land <var:P1> = <var:x> \} $ toward the postcondition $ \{ <var:c> = <var:x> \land <var:P1> = <var:x> \land <var:P0> = <nat:7> \} $ . This is known to be sound by the assignment law from typical Hoare techniques . Moving on to the next step , we have the binding line \verb | <var:P1> := <var:P1> * <nat:5> ; | . This forwards $ \{ <var:c> = <var:x> \land <var:P1> = <var:x> \land <var:P0> = <nat:7> \} $ into the postcondition $ \{ <var:c> = <var:x> \land <var:P1> = <nat:5> \cdot <var:x> \land <var:P0> = <nat:7> \} $ . This is given through the assignment scheme defined by standard Hoare logic . Moving forward , we see the command \verb | <var:J> := <var:P1> | . This line redefines the condition $ \{ <var:c> = <var:x> \land <var:P1> = <nat:5> \cdot <var:x> \land <var:P0> = <nat:7> \} $ to the postcondition $ \{ <var:c> = <var:x> \land <var:P0> = <nat:7> \land <var:J> = <nat:5> \cdot <var:x> \} $ . This is known to be sound by the assignment inference rule in typical Hoare logic . Following , we have the environment update command letting $ <var:J> + <var:P0$ toward $ <var:J>$ . This moves the precondition $ \{ <var:c> = <var:x> \land <var:P0> = <nat:7> \land <var:J> = <nat:5> \cdot <var:x> \} $ into the postcondition $ \{ <var:c> = <var:x> \land <var:J> = <nat:5> \cdot <var:x> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:c> = <var:x> }} <var:P1> := <var:c> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:5> ; <var:J> := <var:P1> <var:J> := <var:J> + <var:P0> {{ <var:J> = <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:P1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:P1> = <var:x> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:P1> = <nat:5> * <var:x> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:P0> = <nat:7> /\ <var:J> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:J> = <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 