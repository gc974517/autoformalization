\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:6> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:i> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:i> ; <var:c2> := <var:c2> * <var:i> ; <var:x> := <var:c2> ; <var:x> := <var:x> + <var:c1> ; <var:x> := <var:x> + <var:c0> \end{verbatim} Assume assuming some $ <var:k> \in \mathbb{N} $ that we have $ <var:i> = <var:k> $ prior to running this list of instructions , it follows that we have $ <var:x> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:k> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \} \\ <var:c1> := <nat:7> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \} \\ <var:c1> := <var:c1> * <var:i> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \cdot <var:k> \} \\ <var:c2> := <nat:3> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \cdot <var:k> \land <var:c2> = <nat:3> \} \\ <var:c2> := <var:c2> * <var:i> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \cdot <var:k> \land <var:c2> = <nat:3> \cdot <var:k> \} \\ <var:c2> := <var:c2> * <var:i> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \cdot <var:k> \land <var:c2> = <nat:3> \cdot <var:k> ^ <nat:2> \} \\ <var:x> := <var:c2> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:c1> = <nat:7> \cdot <var:k> \land <var:x> = <nat:3> \cdot <var:k> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:c1> ; \\ \{ <var:i> = <var:k> \land <var:c0> = <nat:6> \land <var:x> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> \} \\ <var:x> := <var:x> + <var:c0> \\ \{ <var:i> = <var:k> \land <var:x> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:i> = <var:k> }} <var:c0> := <nat:6> ; <var:c1> := <nat:7> ; <var:c1> := <var:c1> * <var:i> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:i> ; <var:c2> := <var:c2> * <var:i> ; <var:x> := <var:c2> ; <var:x> := <var:x> + <var:c1> ; <var:x> := <var:x> + <var:c0> {{ <var:x> = <nat:3> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> * <var:k> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> * <var:k> /\ <var:c2> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> * <var:k> /\ <var:c2> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:7> * <var:k> /\ <var:x> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:c0> = <nat:6> /\ <var:x> = <nat:3> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:k> /\ <var:x> = <nat:3> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 