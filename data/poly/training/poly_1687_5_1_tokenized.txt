\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:Q> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:2> ; <var:w> := <var:F1> <var:w> := <var:w> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allowing that we have $ <var:Q> = <var:G> $ before the evaluation of the list of commands it must be that $ <var:w> = <nat:2> \cdot <var:G> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:Q> = <var:G> \} \\ <var:F1> := <var:Q> ; \\ \{ <var:Q> = <var:G> \land <var:F1> = <var:G> \} \end{eqnarray} Allowing the evaluation of the code segment gives us : \begin{eqnarray} <var:F0> := <nat:7> ; \\ \{ <var:Q> = <var:G> \land <var:F1> = <var:G> \land <var:F0> = <nat:7> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:Q> = <var:G> \land <var:F1> = <nat:2> \times <var:G> \land <var:F0> = <nat:7> \} \\ <var:w> := <var:F1> \\ \{ <var:Q> = <var:G> \land <var:F0> = <nat:7> \land <var:w> = <nat:2> \times <var:G> \} \\ <var:w> := <var:w> + <var:F0> \\ \{ <var:Q> = <var:G> \land <var:w> = <nat:2> \times <var:G> + <nat:7> \} \end{eqnarray} Given the above , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:Q> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:2> ; <var:w> := <var:F1> <var:w> := <var:w> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Q> = <var:G> }} <def:poly> {{ <var:w> = <nat:2> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:F1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:F1> = <var:G> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:F1> = <nat:2> * <var:G> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:F0> = <nat:7> /\ <var:w> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:w> = <nat:2> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 