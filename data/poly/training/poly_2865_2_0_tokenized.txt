\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:7> ; <var:g> := <var:L0> \end{verbatim} Given it to be that $ <var:p> = <var:Z> $ ahead of interpreting the program it must be that $ <var:g> = <nat:7> $ once program terminates . \end{theorem} \begin{proof} The proof of our set of instructions can be demonstrated through this decorated program . \begin{eqnarray} \{ <var:p> = <var:Z> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:p> = <var:Z> \land <var:L0> = <nat:7> \} \\ <var:g> := <var:L0> \\ \{ <var:p> = <var:Z> \land <var:g> = <nat:7> \} \end{eqnarray} Applying usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:p> = <var:Z> }} <var:L0> := <nat:7> ; <var:g> := <var:L0> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 