\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:h> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:h> ; <var:R2> := <var:R2> * <var:h> ; <var:f> := <var:R2> ; <var:f> := <var:f> + <var:R1> ; <var:f> := <var:f> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:h> = <var:s> $ ahead of the execution of our series of instructions , then $ <var:f> = <nat:1> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> + <nat:3> $ when segment of code terminates . \end{theorem} \begin{proof} Proving correctness for this set of commands can be given by standard Hoare techniques . Honing in on the upcoming bit of code contained in our list of instructions , we have the assignment line yielding $ <nat:3> $ as $ <var:R0>$ . This forwards $ \{ <var:h> = <var:s> \} $ to the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \} $ . Immediately following , we have the line defining $ <nat:7> $ toward $ <var:R1>$ . This moves $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \} $ . This is sound by the assignment scheme from typical Hoare techniques . Following , we see the line letting $ <var:R1> * <var:h> $ toward $ <var:R1>$ . This forwards the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \} $ toward the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \} $ . Advancing , the assignment code \verb | <var:R2> := <nat:1> ; | . This command takes $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \} $ toward $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \} $ . Moving onward , we see the variable assignmet line \verb | <var:R2> := <var:R2> * <var:h> ; | . This advances $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \} $ into $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \times <var:s> \} $ . Jumping to the subsequent line of code in the program , the command \verb | <var:R2> := <var:R2> * <var:h> ; | . This advances $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \times <var:s> \} $ into the postcondition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \times <var:s> ^ <nat:2> \} $ . This is deduced through the assignment law found in standard Hoare logic . Moving on , the environment update line \verb | <var:f> := <var:R2> ; | . This moves the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:R2> = <nat:1> \times <var:s> ^ <nat:2> \} $ as the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:f> = <nat:1> \times <var:s> ^ <nat:2> \} $ . This is deduced with the assignment law defined in Hoare reasoning . Moving on to the next step , we see the variable binding command defining $ <var:f> + <var:R1> $ as $ <var:f>$ . This command advances the precondition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:R1> = <nat:7> \times <var:s> \land <var:f> = <nat:1> \times <var:s> ^ <nat:2> \} $ into $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:f> = <nat:1> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> \} $ . This is given using the assignment law defined by standard Hoare reasoning . Advancing on , we see the environment update code giving $ <var:f> + <var:R0$ as $ <var:f>$ . This transfers the condition $ \{ <var:h> = <var:s> \land <var:R0> = <nat:3> \land <var:f> = <nat:1> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> \} $ into the condition $ \{ <var:h> = <var:s> \land <var:f> = <nat:1> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> + <nat:3> \} $ . This is shown to be logically sound using the assignment scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:3> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:h> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:h> ; <var:R2> := <var:R2> * <var:h> ; <var:f> := <var:R2> ; <var:f> := <var:f> + <var:R1> ; <var:f> := <var:f> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:h> = <var:s> }} <def:poly> {{ <var:f> = <nat:1> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:7> * <var:s> /\ <var:f> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:R0> = <nat:3> /\ <var:f> = <nat:1> * <var:s> ^ <nat:2> + <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:f> = <nat:1> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 