\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:A> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:1> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:A> = <var:a> $ given any positive integer coefficients $ <var:a> $ ahead of executing the list of commands , it follows that we have $ <var:D> = <nat:1> * <var:a> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be accomplished using standard Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:A> = <var:a> } <var:x1> := <var:A> { <var:A> = <var:a> \land <var:x1> = <var:a> } { <var:A> = <var:a> \land <var:x1> = <var:a> } <var:x0> := <nat:4> { <var:A> = <var:a> \land <var:x1> = <var:a> \land <var:x0> = <nat:4> } { <var:A> = <var:a> \land <var:x1> = <var:a> \land <var:x0> = <nat:4> } <var:x1> := <var:x1> * <nat:1> { <var:A> = <var:a> \land <var:x1> = <nat:1> * <var:a> \land <var:x0> = <nat:4> } \end{verbatim} Advancing on , we see \begin{verbatim} { <var:A> = <var:a> } <var:x1> := <var:A> { <var:A> = <var:a> \land <var:x1> = <var:a> } { <var:A> = <var:a> \land <var:x1> = <var:a> } <var:x0> := <nat:4> { <var:A> = <var:a> \land <var:x1> = <var:a> \land <var:x0> = <nat:4> } \end{verbatim} This is shown to be logically sound using the binding rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:A> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:1> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:A> = <var:a> }} <def:poly> {{ <var:D> = <nat:1> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:x1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:x1> = <var:a> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:x0> = <nat:4> /\ <var:D> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:a> /\ <var:D> = <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 