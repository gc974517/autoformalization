\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:v1> := <var:b> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:6> ; <var:q> := <var:v1> <var:q> := <var:q> + <var:v0> \end{verbatim} Allow it to hold that $ <var:b> = <var:N> $ ( for all natural numbers $ <var:N> $ ) prior to interpreting our code segment then we have $ <var:q> = <nat:6> \cdot <var:N> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be done using typical Hoare techniques . Keeping momentum , we see \begin{verbatim} { <var:b> = <var:N> } <var:v1> := <var:b> { <var:b> = <var:N> \land <var:v1> = <var:N> } { <var:b> = <var:N> \land <var:v1> = <var:N> } <var:v0> := <nat:2> { <var:b> = <var:N> \land <var:v1> = <var:N> \land <var:v0> = <nat:2> } \end{verbatim} Stepping forward , we see \begin{verbatim} { <var:b> = <var:N> } <var:v1> := <var:b> { <var:b> = <var:N> \land <var:v1> = <var:N> } { <var:b> = <var:N> \land <var:v1> = <var:N> } <var:v0> := <nat:2> { <var:b> = <var:N> \land <var:v1> = <var:N> \land <var:v0> = <nat:2> } { <var:b> = <var:N> \land <var:v1> = <var:N> \land <var:v0> = <nat:2> } <var:v1> := <var:v1> * <nat:6> { <var:b> = <var:N> \land <var:v1> = <nat:6> \cdot <var:N> \land <var:v0> = <nat:2> } \end{verbatim} This is rigorously given with the scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:b> = <var:N> }} <var:v1> := <var:b> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:6> ; <var:q> := <var:v1> <var:q> := <var:q> + <var:v0> {{ <var:q> = <nat:6> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:v1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:v1> = <var:N> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:v1> = <nat:6> * <var:N> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:v0> = <nat:2> /\ <var:q> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q> = <nat:6> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 