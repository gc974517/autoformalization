\begin{document} \begin{theorem} We define the following list of commands as \begin{verbatim} <var:k0> := <nat:1> ; <var:y> := <var:k0> \end{verbatim} Given --- taking natural coefficients $ <var:d> $ --- that we have $ <var:u> = <var:d> $ prior to interpreting the code then we see $ <var:y> = <nat:1> $ once set of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be done using Hoare techniques . Next , we see the variable binding line \verb | <var:k0> := <nat:1> ; | . This command moves the precondition $ \{ <var:u> = <var:d> \} $ into $ \{ <var:u> = <var:d> \land <var:k0> = <nat:1> \} $ . Moving on , the assignment line binding $ <var:k0$ into $ <var:y>$ . This transfers $ \{ <var:u> = <var:d> \land <var:k0> = <nat:1> \} $ into the condition $ \{ <var:u> = <var:d> \land <var:y> = <nat:1> \} $ . This is rigorously given by the assignment scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:u> = <var:d> }} <var:k0> := <nat:1> ; <var:y> := <var:k0> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 