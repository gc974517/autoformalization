\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> \end{verbatim} Allowing that we have $ <var:a> = <var:j> $ ( given all positive coefficients $ <var:j> $ ) prior to executing the list of commands it holds that we see $ <var:M> = <nat:2> \times <var:j> ^ <nat:10> + <nat:2> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:1> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:3> $ when program is done executing . \end{theorem} \begin{proof} The proof of the series of instructions is done through Hoare logic . Immediately after , the binding line \verb | <var:M> := <nat:2> ; | . This advances the precondition $ \{ <var:a> = <var:j> \} $ toward the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> \} $ . Honing in on the subsequent piece of code found in the list of commands , the assignment statement yielding $ <nat:2> + <var:M> * <var:a> $ as $ <var:M>$ . This command redefines the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> \} $ into the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> + <nat:2> \} $ . This is shown by the assignment scheme defined by typical Hoare reasoning . Moving on to the subsequent bit of code seen in the series of commands , the assignment statement defining $ <nat:4> + <var:M> * <var:a> $ to $ <var:M>$ . This redefines the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> + <nat:2> \} $ as $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ . This is shown to be logically sound with the assignment rule given by standard Hoare reasoning . Immediately following , the variable binding code giving $ <nat:1> + <var:M> * <var:a> $ to $ <var:M>$ . This redefines the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} $ as $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ . This is shown to be logically sound by the assignment rule defined by Hoare techniques . Moving on , the variable binding code \verb | <var:M> := <nat:4> + <var:M> * <var:a> ; | . This code takes the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ to the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> \} $ . This is given through the assignment rule given in standard Hoare reasoning . Jumping to the subsequent bit of code contained in the code , we have the variable binding code \verb | <var:M> := <var:M> * <var:a> ; | . This transfers the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> \} $ into the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + \} $ . This is rigorously given with the assignment inference rule found in usual Hoare logic . Moving forward to the following bit of code seen in the list of instructions , we have the variable binding statement yielding $ <nat:2> + <var:M> * <var:a> $ to $ <var:M>$ . This code moves the precondition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + \} $ toward the postcondition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by standard Hoare reasoning . Stepping forward , we have the binding line giving $ <nat:3> + <var:M> * <var:a> $ as $ <var:M>$ . This command forwards $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> \} $ to the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:3> \} $ . This is deduced with the assignment rule found in standard Hoare logic . Keeping momentum , we see the assignment code \verb | <var:M> := <nat:1> + <var:M> * <var:a> ; | . This code takes $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:3> \} $ toward the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ . This is sound through the assignment scheme obtained from standard Hoare techniques . Further , we see the variable update command letting $ <nat:3> + <var:M> * <var:a> $ into $ <var:M>$ . This code redefines $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} $ into the postcondition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} $ . This is rigorously given through the assignment rule given by standard Hoare reasoning . Moving on , the variable binding command giving $ <nat:3> + <var:M> * <var:a$ toward $ <var:M>$ . This code takes the precondition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} $ to the condition $ \{ <var:a> = <var:j> \land <var:M> = <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:a> = <var:j> }} <var:M> := <nat:2> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> {{ <var:M> = <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:M> = <nat:2> * <var:j> ^ <nat:10> + <nat:2> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 