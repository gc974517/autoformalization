\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:V> ; <var:r> := <var:b1> ; <var:r> := <var:r> + <var:b0> \end{verbatim} Given it to hold that $ <var:V> = <var:q> $ , for all whole numbers $ <var:q> $ , ahead of the execution of the program then $ <var:r> = <nat:1> \times <var:q> + <nat:9> $ once list of instructions is done executing . \end{theorem} \begin{proof} The method of proof for the series of instructions can be accomplished using usual Hoare logic . Further , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:q> \} & <var:b0> := <nat:9> & \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \} \end{tabular} Looking at the proceeding lines of codein our code segment , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:q> \} & <var:b0> := <nat:9> & \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \} \\ \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \} & <var:b1> := <nat:1> & \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \land <var:b1> = <nat:1> \} \\ \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \land <var:b1> = <nat:1> \} & <var:b1> := <var:b1> * <var:V> & \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \land <var:b1> = <nat:1> \times <var:q> \} \end{tabular} This is sound through the binding law found in typical Hoare logic . Observing the subsequent step in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:q> \} & <var:b0> := <nat:9> & \{ <var:V> = <var:q> \land <var:b0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:V> = <var:q> }} <var:b0> := <nat:9> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:V> ; <var:r> := <var:b1> ; <var:r> := <var:r> + <var:b0> {{ <var:r> = <nat:1> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:b0> = <nat:9> /\ <var:r> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:r> = <nat:1> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 