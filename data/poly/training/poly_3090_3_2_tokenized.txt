\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:a> ; <var:U> := <nat:4> + <var:U> * <var:a> \end{verbatim} Assuming that $ <var:a> = <var:J> $ ahead of executing our code segment then we see $ <var:U> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:J> \} \\ <var:U> := <nat:1> ; \\ \{ <var:a> = <var:J> \land <var:U> = <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:a> ; \\ \{ <var:a> = <var:J> \land <var:U> = <nat:1> \times <var:J> + <nat:2> \} \\ <var:U> := <nat:4> + <var:U> * <var:a> \\ \{ <var:a> = <var:J> \land <var:U> = <nat:1> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:a> ; <var:U> := <nat:4> + <var:U> * <var:a> {{ <var:U> = <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:U> = <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:U> = <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 