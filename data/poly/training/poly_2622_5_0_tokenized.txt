\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:7> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:x> ; <var:i> := <var:t1> ; <var:i> := <var:i> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:x> = <var:B> $ --- for natural coefficients $ <var:B> $ --- ahead of interpreting the series of commands it holds that $ <var:i> = <nat:2> * <var:B> + <nat:7> $ when program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is clear with Hoare logic . Focusing on the subsequent piece of code in the set of instructions , we see the variable binding code \verb | <var:t0> := <nat:7> ; | . This code redefines the precondition $ \{ <var:x> = <var:B> \} $ as the condition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \} $ . Moving forward to the upcoming step in the code segment , the variable assignmet code letting $ <nat:2> $ as $ <var:t1>$ . This command advances the condition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \} $ into the condition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \} $ . This is known to be sound using the assignment law from Hoare logic . Shifting focus toward the subsequent bit of code found in the code , the variable assignmet line \verb | <var:t1> := <var:t1> * <var:x> ; | . This statement transfers the condition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> \} $ to the condition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> * <var:B> \} $ . This is guaranteed with the assignment rule from standard Hoare logic . Jumping to the subsequent line in the code , we have the variable binding command \verb | <var:i> := <var:t1> ; | . This transfers the precondition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:t1> = <nat:2> * <var:B> \} $ toward the postcondition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:i> = <nat:2> * <var:B> \} $ . This is known to be sound by the assignment scheme found in typical Hoare logic . Following , the binding code \verb | <var:i> := <var:i> + <var:t0> | . This advances the precondition $ \{ <var:x> = <var:B> \land <var:t0> = <nat:7> \land <var:i> = <nat:2> * <var:B> \} $ into $ \{ <var:x> = <var:B> \land <var:i> = <nat:2> * <var:B> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:t1> := <nat:2> ; <var:t1> := <var:t1> * <var:x> ; <var:i> := <var:t1> ; <var:i> := <var:i> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:x> = <var:B> }} <def:poly> {{ <var:i> = <nat:2> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:t0> = <nat:7> /\ <var:i> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:B> /\ <var:i> = <nat:2> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 