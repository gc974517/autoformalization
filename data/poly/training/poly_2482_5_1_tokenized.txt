\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:R1> := <var:j> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:2> ; <var:M> := <var:R1> <var:M> := <var:M> + <var:R0> \end{verbatim} Given , given all positive integer coefficients $ <var:V> $ , it to be that $ <var:j> = <var:V> $ before interpreting this code segment it holds that we have $ <var:M> = <nat:2> * <var:V> + <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare logic gives us : \begin{eqnarray} \{ <var:j> = <var:V> \} \\ <var:R1> := <var:j> ; \\ \{ <var:j> = <var:V> \land <var:R1> = <var:V> \} \end{eqnarray} Continuing the evaluation of the set of commands gives us : \begin{eqnarray} <var:R0> := <nat:4> ; \\ \{ <var:j> = <var:V> \land <var:R1> = <var:V> \land <var:R0> = <nat:4> \} \\ <var:R1> := <var:R1> * <nat:2> ; \\ \{ <var:j> = <var:V> \land <var:R1> = <nat:2> \cdot <var:V> \land <var:R0> = <nat:4> \} \\ <var:M> := <var:R1> \\ \{ <var:j> = <var:V> \land <var:R0> = <nat:4> \land <var:M> = <nat:2> \cdot <var:V> \} \\ <var:M> := <var:M> + <var:R0> \\ \{ <var:j> = <var:V> \land <var:M> = <nat:2> \cdot <var:V> + <nat:4> \} \end{eqnarray} Hence , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:j> = <var:V> }} <var:R1> := <var:j> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:2> ; <var:M> := <var:R1> <var:M> := <var:M> + <var:R0> {{ <var:M> = <nat:2> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:R1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:R1> = <var:V> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:R1> = <nat:2> * <var:V> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:R0> = <nat:4> /\ <var:M> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:V> /\ <var:M> = <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 