\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:B0> := <nat:9> ; <var:I> := <var:B0> \end{verbatim} Assuming it to hold that $ <var:s> = <var:A> $ prior to the execution of the set of instructions then $ <var:I> = <nat:9> $ . \end{theorem} \begin{proof} See that the following decorated set of instructions . \begin{eqnarray} \{ <var:s> = <var:A> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:s> = <var:A> \land <var:B0> = <nat:9> \} \\ <var:I> := <var:B0> \\ \{ <var:s> = <var:A> \land <var:I> = <nat:9> \} \end{eqnarray} The application of usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:s> = <var:A> }} <var:B0> := <nat:9> ; <var:I> := <var:B0> {{ <var:I> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:I> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 