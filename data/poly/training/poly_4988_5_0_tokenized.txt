\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:K> ; <var:r> := <var:Z1> ; <var:r> := <var:r> + <var:Z0> \end{verbatim} Assuming it to hold that $ <var:K> = <var:G> $ before the execution of this code it follows that we have $ <var:r> = <nat:8> \times <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code is evident using typical Hoare reasoning . Now , we see the variable binding line assigning $ <nat:1> $ to $ <var:Z0>$ . This takes the precondition $ \{ <var:K> = <var:G> \} $ toward $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \} $ . Jumping to the following line of code seen in the list of commands , we have the variable update statement \verb | <var:Z1> := <nat:8> ; | . This command forwards the precondition $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \} $ as the condition $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:8> \} $ . This is guaranteed through the assignment scheme defined by usual Hoare logic . Following , we see the environment update line \verb | <var:Z1> := <var:Z1> * <var:K> ; | . This statement moves the precondition $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:8> \} $ toward $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:8> \times <var:G> \} $ . This is deduced by the assignment scheme given by usual Hoare techniques . Moving on , we have the variable assignmet statement letting $ <var:Z1> $ into $ <var:r>$ . This command advances the precondition $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:8> \times <var:G> \} $ into $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:r> = <nat:8> \times <var:G> \} $ . This is shown to be logically sound through the assignment law given in standard Hoare reasoning . Next , we have the binding code giving $ <var:r> + <var:Z0$ toward $ <var:r>$ . This command advances the condition $ \{ <var:K> = <var:G> \land <var:Z0> = <nat:1> \land <var:r> = <nat:8> \times <var:G> \} $ to $ \{ <var:K> = <var:G> \land <var:r> = <nat:8> \times <var:G> + <nat:1> \} $ . This is shown using the assignment scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <var:Z0> := <nat:1> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:K> ; <var:r> := <var:Z1> ; <var:r> := <var:r> + <var:Z0> {{ <var:r> = <nat:8> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:Z0> = <nat:1> /\ <var:r> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:r> = <nat:8> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 