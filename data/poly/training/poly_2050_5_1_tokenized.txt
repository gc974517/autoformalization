\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:s> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:S> := <var:e1> <var:S> := <var:S> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:s> = <var:H> $ before the evaluation of our segment of code it holds that $ <var:S> = <nat:4> \times <var:H> + <nat:3> $ when series of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is clear with Hoare reasoning . Honing in on the next lines contained in the segment of code , we have \begin{verbatim} { <var:s> = <var:H> } <var:e1> := <var:s> { <var:s> = <var:H> \land <var:e1> = <var:H> } { <var:s> = <var:H> \land <var:e1> = <var:H> } <var:e0> := <nat:3> { <var:s> = <var:H> \land <var:e1> = <var:H> \land <var:e0> = <nat:3> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:s> = <var:H> } <var:e1> := <var:s> { <var:s> = <var:H> \land <var:e1> = <var:H> } { <var:s> = <var:H> \land <var:e1> = <var:H> } <var:e0> := <nat:3> { <var:s> = <var:H> \land <var:e1> = <var:H> \land <var:e0> = <nat:3> } \end{verbatim} This is shown using the law in usual Hoare reasoning . Moving forward to the next step , we see \begin{verbatim} { <var:s> = <var:H> } <var:e1> := <var:s> { <var:s> = <var:H> \land <var:e1> = <var:H> } \end{verbatim} This is sound using the variable binding law defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:s> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:S> := <var:e1> <var:S> := <var:S> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:s> = <var:H> }} <def:poly> {{ <var:S> = <nat:4> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:e1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:e1> = <var:H> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:e1> = <nat:4> * <var:H> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:e0> = <nat:3> /\ <var:S> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:S> = <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 