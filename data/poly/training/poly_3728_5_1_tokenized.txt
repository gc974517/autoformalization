\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:W1> := <var:O> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:7> ; <var:r> := <var:W1> <var:r> := <var:r> + <var:W0> \end{verbatim} Assume for all positive coefficients $ <var:I> $ that we have $ <var:O> = <var:I> $ prior to the execution of the set of instructions , it must be that we have $ <var:r> = <nat:7> \cdot <var:I> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:I> \} \\ <var:W1> := <var:O> ; \\ \{ <var:O> = <var:I> \land <var:W1> = <var:I> \} \end{eqnarray} Allowing executing the set of commands gives us : \begin{eqnarray} <var:W0> := <nat:6> ; \\ \{ <var:O> = <var:I> \land <var:W1> = <var:I> \land <var:W0> = <nat:6> \} \\ <var:W1> := <var:W1> * <nat:7> ; \\ \{ <var:O> = <var:I> \land <var:W1> = <nat:7> * <var:I> \land <var:W0> = <nat:6> \} \\ <var:r> := <var:W1> \\ \{ <var:O> = <var:I> \land <var:W0> = <nat:6> \land <var:r> = <nat:7> * <var:I> \} \\ <var:r> := <var:r> + <var:W0> \\ \{ <var:O> = <var:I> \land <var:r> = <nat:7> * <var:I> + <nat:6> \} \end{eqnarray} Therefore , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <var:W1> := <var:O> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:7> ; <var:r> := <var:W1> <var:r> := <var:r> + <var:W0> {{ <var:r> = <nat:7> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:W1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:W1> = <var:I> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:W1> = <nat:7> * <var:I> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:W0> = <nat:6> /\ <var:r> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:r> = <nat:7> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 