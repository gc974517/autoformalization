\begin{document} \begin{theorem} We define a program as follows \begin{verbatim} <var:a1> := <var:N> ; <var:a2> := <var:a1> * <var:N> ; <var:a3> := <var:a2> * <var:N> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:6> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:1> ; <var:s> := <var:a3> <var:s> := <var:s> + <var:a2> <var:s> := <var:s> + <var:a1> <var:s> := <var:s> + <var:a0> \end{verbatim} Given it to be that $ <var:N> = <var:v> $ ahead of running the code then $ <var:s> = <nat:1> \cdot <var:v> ^ <nat:3> + <nat:8> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be given using Hoare techniques . Now , we see the variable binding line assigning $ <var:N> $ as $ <var:a1>$ . This redefines $ \{ <var:N> = <var:v> \} $ toward $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \} $ . Shifting focus toward the proceeding command seen in our code , we see the environment update line \verb | <var:a2> := <var:a1> * <var:N> ; | . This redefines the precondition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \} $ to the postcondition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \} $ . Advancing , we have the binding line \verb | <var:a3> := <var:a2> * <var:N> ; | . This takes the precondition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \} $ . This is guaranteed using the assignment law of Hoare reasoning . Honing in on the following bit of code seen in the program , we have the assignment statement binding $ <nat:4> $ to $ <var:a0>$ . This line redefines the condition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \} $ toward $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . This is ensured using the assignment law from typical Hoare techniques . Immediately after , we see the assignment command \verb | <var:a1> := <var:a1> * <nat:6> ; | . This statement forwards the precondition $ \{ <var:N> = <var:v> \land <var:a1> = <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ toward $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . This is shown to be logically sound with the assignment law given by usual Hoare techniques . Taking another step toward the subsequent command contained in our set of commands , we have the variable binding command \verb | <var:a2> := <var:a2> * <nat:8> ; | . This redefines the precondition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ toward the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . Keeping momentum , we have the binding line assigning $ <var:a3> * <nat:1> $ to $ <var:a3>$ . This transfers the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a3> = <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ toward $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . Observing the next piece of code found in our series of instructions , we have the environment update command \verb | <var:s> := <var:a3> | . This code transfers the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:a0> = <nat:4> \} $ as $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> \} $ . Moving onward , we see the environment update command \verb | <var:s> := <var:s> + <var:a2> | . This line moves the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a2> = <nat:8> \times <var:v> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> \} $ into the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> + <nat:8> \times <var:v> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme given by standard Hoare techniques . Paying attention to the following line contained in our set of commands , we see the environment update code defining $ <var:s> + <var:a1$ into $ <var:s>$ . This moves the condition $ \{ <var:N> = <var:v> \land <var:a1> = <nat:6> \times <var:v> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> + <nat:8> \times <var:v> ^ <nat:2> \} $ toward the condition $ \{ <var:N> = <var:v> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> + <nat:8> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> \} $ . Moving forward to the upcoming piece of code contained in the code , we have the variable update command letting $ <var:s> + <var:a0$ into $ <var:s>$ . This transfers the precondition $ \{ <var:N> = <var:v> \land <var:a0> = <nat:4> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> + <nat:8> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> \} $ toward the condition $ \{ <var:N> = <var:v> \land <var:s> = <nat:1> \times <var:v> ^ <nat:3> + <nat:8> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> + <nat:4> \} $ . This is shown to be logically sound with the assignment law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:N> = <var:v> }} <var:a1> := <var:N> ; <var:a2> := <var:a1> * <var:N> ; <var:a3> := <var:a2> * <var:N> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:6> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:1> ; <var:s> := <var:a3> <var:s> := <var:s> + <var:a2> <var:s> := <var:s> + <var:a1> <var:s> := <var:s> + <var:a0> {{ <var:s> = <nat:1> * <var:v> ^ <nat:3> + <nat:8> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <var:v> /\ <var:a2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <var:v> /\ <var:a2> = <var:v> ^ <nat:2> /\ <var:a3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <var:v> /\ <var:a2> = <var:v> ^ <nat:2> /\ <var:a3> = <var:v> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <var:v> ^ <nat:2> /\ <var:a3> = <var:v> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:8> * <var:v> ^ <nat:2> /\ <var:a3> = <var:v> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:8> * <var:v> ^ <nat:2> /\ <var:a3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:8> * <var:v> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:s> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a0> = <nat:4> /\ <var:s> = <nat:1> * <var:v> ^ <nat:3> + <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:a0> = <nat:4> /\ <var:s> = <nat:1> * <var:v> ^ <nat:3> + <nat:8> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:v> /\ <var:s> = <nat:1> * <var:v> ^ <nat:3> + <nat:8> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 