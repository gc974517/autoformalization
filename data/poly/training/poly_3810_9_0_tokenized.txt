\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:h> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:h> ; <var:P2> := <var:P2> * <var:h> ; <var:K> := <var:P2> ; <var:K> := <var:K> + <var:P1> ; <var:K> := <var:K> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for all $ <var:I> \in \mathbb{N} $ ) that we have $ <var:h> = <var:I> $ before executing our code segment it follows that we have $ <var:K> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:8> $ when list of commands has executed . \end{theorem} \begin{proof} Let this decorated list of commands . \begin{eqnarray} \{ <var:h> = <var:I> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \} \\ <var:P1> := <nat:2> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \} \\ <var:P1> := <var:P1> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:I> \} \\ <var:P2> := <nat:9> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:I> \land <var:P2> = <nat:9> \} \\ <var:P2> := <var:P2> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:I> \land <var:P2> = <nat:9> \cdot <var:I> \} \\ <var:P2> := <var:P2> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:I> \land <var:P2> = <nat:9> \cdot <var:I> ^ <nat:2> \} \end{eqnarray} Allowing evaluating the series of instructions yields : \begin{eqnarray} <var:K> := <var:P2> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:I> \land <var:K> = <nat:9> \cdot <var:I> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:P1> ; \\ \{ <var:h> = <var:I> \land <var:P0> = <nat:8> \land <var:K> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> \} \end{eqnarray} Allowing evaluating our program yields : \begin{eqnarray} <var:K> := <var:K> + <var:P0> \\ \{ <var:h> = <var:I> \land <var:K> = <nat:9> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:8> \} \end{eqnarray} The application of usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:8> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:h> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:h> ; <var:P2> := <var:P2> * <var:h> ; <var:K> := <var:P2> ; <var:K> := <var:K> + <var:P1> ; <var:K> := <var:K> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:h> = <var:I> }} <def:poly> {{ <var:K> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:I> /\ <var:P2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:I> /\ <var:P2> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:I> /\ <var:P2> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:I> /\ <var:K> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:P0> = <nat:8> /\ <var:K> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:K> = <nat:9> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 