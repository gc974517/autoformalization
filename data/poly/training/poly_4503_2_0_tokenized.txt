\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:8> ; <var:C> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Q> = <var:X> $ , taking positive integer coefficients $ <var:X> $ , before evaluating the set of instructions , it follows that we see $ <var:C> = <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare techniques produces : \begin{eqnarray} \{ <var:Q> = <var:X> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:Q> = <var:X> \land <var:M0> = <nat:8> \} \\ <var:C> := <var:M0> \\ \{ <var:Q> = <var:X> \land <var:C> = <nat:8> \} \end{eqnarray} Therefore , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:8> ; <var:C> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Q> = <var:X> }} <def:poly> {{ <var:C> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 