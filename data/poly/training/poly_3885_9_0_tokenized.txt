\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:4> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:S> ; <var:f2> := <nat:2> ; <var:f2> := <var:f2> * <var:S> ; <var:f2> := <var:f2> * <var:S> ; <var:C> := <var:f2> ; <var:C> := <var:C> + <var:f1> ; <var:C> := <var:C> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for all $ <var:M> \in \mathbb{Z}^+ $ ) $ <var:S> = <var:M> $ before the evaluation of this program , it must be that we have $ <var:C> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} Note that this decorated series of instructions . \begin{eqnarray} \{ <var:S> = <var:M> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \} \\ <var:f1> := <nat:4> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> \} \\ <var:f1> := <var:f1> * <var:S> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> * <var:M> \} \\ <var:f2> := <nat:2> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> * <var:M> \land <var:f2> = <nat:2> \} \end{eqnarray} Allowing running this list of instructions gives us : \begin{eqnarray} <var:f2> := <var:f2> * <var:S> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> * <var:M> \land <var:f2> = <nat:2> * <var:M> \} \\ <var:f2> := <var:f2> * <var:S> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> * <var:M> \land <var:f2> = <nat:2> * <var:M> ^ <nat:2> \} \\ <var:C> := <var:f2> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:f1> = <nat:4> * <var:M> \land <var:C> = <nat:2> * <var:M> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:f1> ; \\ \{ <var:S> = <var:M> \land <var:f0> = <nat:4> \land <var:C> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> \} \\ <var:C> := <var:C> + <var:f0> \\ \{ <var:S> = <var:M> \land <var:C> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> \} \end{eqnarray} Furthering executing this list of commands gives : \begin{eqnarray} \end{eqnarray} Using usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:4> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:S> ; <var:f2> := <nat:2> ; <var:f2> := <var:f2> * <var:S> ; <var:f2> := <var:f2> * <var:S> ; <var:C> := <var:f2> ; <var:C> := <var:C> + <var:f1> ; <var:C> := <var:C> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:S> = <var:M> }} <def:poly> {{ <var:C> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> * <var:M> /\ <var:f2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:4> * <var:M> /\ <var:C> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:f0> = <nat:4> /\ <var:C> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:C> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 