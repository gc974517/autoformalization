\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> ; <var:v> := <nat:3> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> \end{verbatim} Allow that $ <var:x> = <var:f> $ for all whole numbers $ <var:f> $ ahead of running the set of commands it holds that we see $ <var:v> = <nat:3> \cdot <var:f> ^ <nat:6> + <nat:4> \cdot <var:f> ^ <nat:5> + <nat:2> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:2> $ once list of commands terminates . \end{theorem} \begin{proof} Proving correctness for the series of commands can be demonstrated by standard Hoare reasoning . Now , we have the variable binding code \verb | <var:v> := <nat:3> ; | . This command redefines the precondition $ \{ <var:x> = <var:f> \} $ into $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \} $ . This is rigorously given through the assignment scheme of typical Hoare reasoning . Honing in on the following step in the code segment , the assignment statement binding $ <nat:4> + <var:v> * <var:x> $ as $ <var:v>$ . This transfers $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \} $ into $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> + <nat:4> \} $ . This is given by the assignment rule given in standard Hoare logic . Following , the code assigning $ <nat:2> + <var:v> * <var:x> $ toward $ <var:v>$ . This takes $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> + <nat:4> \} $ into $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ . This is guaranteed with the assignment inference rule given in standard Hoare logic . Considering the proceeding line contained in the segment of code , we see the variable update code yielding $ <nat:4> + <var:v> * <var:x> $ toward $ <var:v>$ . This line advances $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:4> \} $ . After , we have the variable update command giving $ <nat:2> + <var:v> * <var:x> $ to $ <var:v>$ . This code redefines $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:4> \} $ as the postcondition $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ . Stepping through , the variable assignmet command yielding $ <nat:3> + <var:v> * <var:x> $ as $ <var:v>$ . This command redefines the condition $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ as $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> \} $ . Honing in on the subsequent statement in the list of instructions , we see the variable update statement assigning $ <nat:2> + <var:v> * <var:x$ toward $ <var:v>$ . This moves $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> \} $ as the condition $ \{ <var:x> = <var:f> \land <var:v> = <nat:3> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:x> = <var:f> }} <var:v> := <nat:3> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> ; <var:v> := <nat:4> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> ; <var:v> := <nat:3> + <var:v> * <var:x> ; <var:v> := <nat:2> + <var:v> * <var:x> {{ <var:v> = <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:v> = <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 