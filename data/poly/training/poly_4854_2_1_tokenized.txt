\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:2> ; <var:I> := <var:L0> \end{verbatim} Allow given any positive integers $ <var:M> $ $ <var:p> = <var:M> $ ahead of evaluating the program then $ <var:I> = <nat:2> $ . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:M> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:p> = <var:M> \land <var:L0> = <nat:2> \} \\ <var:I> := <var:L0> \\ \{ <var:p> = <var:M> \land <var:I> = <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:p> = <var:M> }} <var:L0> := <nat:2> ; <var:I> := <var:L0> {{ <var:I> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:M> /\ <var:I> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 