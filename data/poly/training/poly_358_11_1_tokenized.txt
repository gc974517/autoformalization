\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:j1> := <var:H> ; <var:j2> := <var:j1> * <var:H> ; <var:j3> := <var:j2> * <var:H> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:5> ; <var:o> := <var:j3> <var:o> := <var:o> + <var:j2> <var:o> := <var:o> + <var:j1> <var:o> := <var:o> + <var:j0> \end{verbatim} Allowing it to hold that $ <var:H> = <var:M> $ prior to evaluating the code segment , it follows that $ <var:o> = <nat:5> \cdot <var:M> ^ <nat:3> + <nat:6> \cdot <var:M> ^ <nat:2> + <nat:5> \cdot <var:M> + <nat:4> $ when list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is shown using the below decorated set of commands . \begin{eqnarray} \{ <var:H> = <var:M> \} \\ <var:j1> := <var:H> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <var:M> \} \\ <var:j2> := <var:j1> * <var:H> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <var:M> \land <var:j2> = <var:M> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:H> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <var:M> \land <var:j2> = <var:M> ^ <nat:2> \land <var:j3> = <var:M> ^ <nat:3> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <var:M> \land <var:j2> = <var:M> ^ <nat:2> \land <var:j3> = <var:M> ^ <nat:3> \land <var:j0> = <nat:4> \} \\ <var:j1> := <var:j1> * <nat:5> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <nat:5> \cdot <var:M> \land <var:j2> = <var:M> ^ <nat:2> \land <var:j3> = <var:M> ^ <nat:3> \land <var:j0> = <nat:4> \} \\ <var:j2> := <var:j2> * <nat:6> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <nat:5> \cdot <var:M> \land <var:j2> = <nat:6> \cdot <var:M> ^ <nat:2> \land <var:j3> = <var:M> ^ <nat:3> \land <var:j0> = <nat:4> \} \\ <var:j3> := <var:j3> * <nat:5> ; \\ \{ <var:H> = <var:M> \land <var:j1> = <nat:5> \cdot <var:M> \land <var:j2> = <nat:6> \cdot <var:M> ^ <nat:2> \land <var:j3> = <nat:5> \cdot <var:M> ^ <nat:3> \land <var:j0> = <nat:4> \} \\ <var:o> := <var:j3> \\ \{ <var:H> = <var:M> \land <var:j1> = <nat:5> \cdot <var:M> \land <var:j2> = <nat:6> \cdot <var:M> ^ <nat:2> \land <var:j0> = <nat:4> \land <var:o> = <nat:5> \cdot <var:M> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:j2> \\ \{ <var:H> = <var:M> \land <var:j1> = <nat:5> \cdot <var:M> \land <var:j0> = <nat:4> \land <var:o> = <nat:5> \cdot <var:M> ^ <nat:3> + <nat:6> \cdot <var:M> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:j1> \\ \{ <var:H> = <var:M> \land <var:j0> = <nat:4> \land <var:o> = <nat:5> \cdot <var:M> ^ <nat:3> + <nat:6> \cdot <var:M> ^ <nat:2> + <nat:5> \cdot <var:M> \} \\ <var:o> := <var:o> + <var:j0> \\ \{ <var:H> = <var:M> \land <var:o> = <nat:5> \cdot <var:M> ^ <nat:3> + <nat:6> \cdot <var:M> ^ <nat:2> + <nat:5> \cdot <var:M> + <nat:4> \} \end{eqnarray} Using standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:H> = <var:M> }} <var:j1> := <var:H> ; <var:j2> := <var:j1> * <var:H> ; <var:j3> := <var:j2> * <var:H> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:5> ; <var:o> := <var:j3> <var:o> := <var:o> + <var:j2> <var:o> := <var:o> + <var:j1> <var:o> := <var:o> + <var:j0> {{ <var:o> = <nat:5> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <var:M> /\ <var:j2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <var:M> /\ <var:j2> = <var:M> ^ <nat:2> /\ <var:j3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <var:M> /\ <var:j2> = <var:M> ^ <nat:2> /\ <var:j3> = <var:M> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <nat:5> * <var:M> /\ <var:j2> = <var:M> ^ <nat:2> /\ <var:j3> = <var:M> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <nat:5> * <var:M> /\ <var:j2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:j3> = <var:M> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <nat:5> * <var:M> /\ <var:j2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:j3> = <nat:5> * <var:M> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <nat:5> * <var:M> /\ <var:j2> = <nat:6> * <var:M> ^ <nat:2> /\ <var:j0> = <nat:4> /\ <var:o> = <nat:5> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j1> = <nat:5> * <var:M> /\ <var:j0> = <nat:4> /\ <var:o> = <nat:5> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:j0> = <nat:4> /\ <var:o> = <nat:5> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:o> = <nat:5> * <var:M> ^ <nat:3> + <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 