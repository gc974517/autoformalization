\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:y> ; <var:E> := <var:J1> ; <var:E> := <var:E> + <var:J0> \end{verbatim} Assume that we have $ <var:y> = <var:r> $ ahead of running this series of commands then we see $ <var:E> = <nat:2> * <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our set of commands can be given through Hoare techniques . Stepping forward , we have the command \verb | <var:J0> := <nat:3> ; | . This code advances the condition $ \{ <var:y> = <var:r> \} $ as $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule in Hoare techniques . Looking at the proceeding bit of code in the segment of code , the binding statement binding $ <nat:2> $ toward $ <var:J1>$ . This moves the precondition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \} $ into the condition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> \} $ . Honing in on the next line of code found in our code , the variable assignmet code defining $ <var:J1> * <var:y> $ as $ <var:J1>$ . This advances the precondition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> \} $ to $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> * <var:r> \} $ . This is shown to be logically sound using the assignment law defined by typical Hoare techniques . Moving onward , the variable update statement \verb | <var:E> := <var:J1> ; | . This line moves the precondition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> * <var:r> \} $ as the postcondition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:E> = <nat:2> * <var:r> \} $ . Moving on to the next step , we have the variable binding statement \verb | <var:E> := <var:E> + <var:J0> | . This forwards the condition $ \{ <var:y> = <var:r> \land <var:J0> = <nat:3> \land <var:E> = <nat:2> * <var:r> \} $ into the postcondition $ \{ <var:y> = <var:r> \land <var:E> = <nat:2> * <var:r> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:y> = <var:r> }} <var:J0> := <nat:3> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:y> ; <var:E> := <var:J1> ; <var:E> := <var:E> + <var:J0> {{ <var:E> = <nat:2> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:J0> = <nat:3> /\ <var:E> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:E> = <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 