\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:8> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:E> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:E> ; <var:u2> := <var:u2> * <var:E> ; <var:D> := <var:u2> ; <var:D> := <var:D> + <var:u1> ; <var:D> := <var:D> + <var:u0> \end{verbatim} Assume taking natural numbers $ <var:O> $ it to be that $ <var:E> = <var:O> $ prior to evaluating the set of instructions it follows that $ <var:D> = <nat:8> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:8> $ when program executes . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be demonstrated using standard Hoare logic . Focusing on the proceeding statements seen in our list of instructions , \verb | { <var:E> = <var:O> } <var:u0> := <nat:8> { <var:E> = <var:O> \land <var:u0> = <nat:8> } | and \verb | { <var:E> = <var:O> \land <var:u0> = <nat:8> } <var:u1> := <nat:5> { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> } | . This is ensured through the binding scheme given by Hoare logic . Immediately after , we have \verb | { <var:E> = <var:O> } <var:u0> := <nat:8> { <var:E> = <var:O> \land <var:u0> = <nat:8> } | , \verb | { <var:E> = <var:O> \land <var:u0> = <nat:8> } <var:u1> := <nat:5> { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> } | and \verb | { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> } <var:u1> := <var:u1> * <var:E> { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> \cdot <var:O> } | . This is guaranteed by the assignment rule given by standard Hoare techniques . Advancing to the next step , \verb | { <var:E> = <var:O> } <var:u0> := <nat:8> { <var:E> = <var:O> \land <var:u0> = <nat:8> } | and \verb | { <var:E> = <var:O> \land <var:u0> = <nat:8> } <var:u1> := <nat:5> { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> } | . This is shown to be logically sound using the variable update inference rule obtained from Hoare logic . Looking at the proceeding steps seen in our code segment , we have \verb | { <var:E> = <var:O> } <var:u0> := <nat:8> { <var:E> = <var:O> \land <var:u0> = <nat:8> } | and \verb | { <var:E> = <var:O> \land <var:u0> = <nat:8> } <var:u1> := <nat:5> { <var:E> = <var:O> \land <var:u0> = <nat:8> \land <var:u1> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:E> = <var:O> }} <var:u0> := <nat:8> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:E> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:E> ; <var:u2> := <var:u2> * <var:E> ; <var:D> := <var:u2> ; <var:D> := <var:D> + <var:u1> ; <var:D> := <var:D> + <var:u0> {{ <var:D> = <nat:8> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> * <var:O> /\ <var:u2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> * <var:O> /\ <var:u2> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> * <var:O> /\ <var:u2> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:u1> = <nat:5> * <var:O> /\ <var:D> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:u0> = <nat:8> /\ <var:D> = <nat:8> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:O> /\ <var:D> = <nat:8> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 