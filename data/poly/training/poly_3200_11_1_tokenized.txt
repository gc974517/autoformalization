\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:V> ; <var:Y2> := <var:Y1> * <var:V> ; <var:Y3> := <var:Y2> * <var:V> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:Y2> := <var:Y2> * <nat:9> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:T> := <var:Y3> <var:T> := <var:T> + <var:Y2> <var:T> := <var:T> + <var:Y1> <var:T> := <var:T> + <var:Y0> \end{verbatim} Allow that we have $ <var:V> = <var:J> $ before running the list of commands it must be that we have $ <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is accomplished using Hoare techniques . Focusing on the upcoming line found in our set of commands , the assignment code defining $ <var:V> $ to $ <var:Y1>$ . This statement moves the precondition $ \{ <var:V> = <var:J> \} $ into $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \} $ . Taking a look at the upcoming piece of code in the code , we have the code assigning $ <var:Y1> * <var:V> $ as $ <var:Y2>$ . This statement advances the precondition $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \} $ to $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \} $ . Stepping through , we have the binding code binding $ <var:Y2> * <var:V> $ toward $ <var:Y3>$ . This transfers $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \} $ . Moving on to the proceeding step seen in our program , we see the assignment statement binding $ <nat:5> $ to $ <var:Y0>$ . This redefines $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \} $ toward the condition $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ . This is deduced with the assignment scheme in usual Hoare techniques . Moving forward to the upcoming step contained in the series of commands , we see the assignment code \verb | <var:Y1> := <var:Y1> * <nat:4> ; | . This advances the precondition $ \{ <var:V> = <var:J> \land <var:Y1> = <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ as $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ . This is deduced using the assignment scheme of standard Hoare logic . Advancing on , we see the environment update statement \verb | <var:Y2> := <var:Y2> * <nat:9> ; | . This command forwards the precondition $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ as $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ . This is known to be sound using the assignment law defined in typical Hoare techniques . Moving on to the proceeding statement found in our code segment , the variable binding command giving $ <var:Y3> * <nat:7> $ toward $ <var:Y3>$ . This line advances the condition $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y3> = <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ to $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ . Considering the upcoming command seen in our series of instructions , the binding code giving $ <var:Y3$ toward $ <var:T>$ . This command forwards $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:J> ^ <nat:3> \land <var:Y0> = <nat:5> \} $ into the condition $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> \} $ . Immediately following , we see the variable binding command letting $ <var:T> + <var:Y2$ to $ <var:T>$ . This moves the condition $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y2> = <nat:9> \cdot <var:J> ^ <nat:2> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> \} $ into $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> \} $ . Now , we have the binding statement binding $ <var:T> + <var:Y1$ as $ <var:T>$ . This statement moves the condition $ \{ <var:V> = <var:J> \land <var:Y1> = <nat:4> \cdot <var:J> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:J> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> \} $ . This is sound by the assignment rule defined in typical Hoare techniques . Moving forward to the next step , we see the binding code \verb | <var:T> := <var:T> + <var:Y0> | . This advances the precondition $ \{ <var:V> = <var:J> \land <var:Y0> = <nat:5> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> \} $ to $ \{ <var:V> = <var:J> \land <var:T> = <nat:7> \cdot <var:J> ^ <nat:3> + <nat:9> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:5> \} $ . This is guaranteed using the assignment scheme in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:V> = <var:J> }} <var:Y1> := <var:V> ; <var:Y2> := <var:Y1> * <var:V> ; <var:Y3> := <var:Y2> * <var:V> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:Y2> := <var:Y2> * <nat:9> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:T> := <var:Y3> <var:T> := <var:T> + <var:Y2> <var:T> := <var:T> + <var:Y1> <var:T> := <var:T> + <var:Y0> {{ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <var:J> /\ <var:Y2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <var:J> /\ <var:Y2> = <var:J> ^ <nat:2> /\ <var:Y3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <var:J> /\ <var:Y2> = <var:J> ^ <nat:2> /\ <var:Y3> = <var:J> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <nat:4> * <var:J> /\ <var:Y2> = <var:J> ^ <nat:2> /\ <var:Y3> = <var:J> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <nat:4> * <var:J> /\ <var:Y2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Y3> = <var:J> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <nat:4> * <var:J> /\ <var:Y2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:J> ^ <nat:3> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <nat:4> * <var:J> /\ <var:Y2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:Y0> = <nat:5> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y1> = <nat:4> * <var:J> /\ <var:Y0> = <nat:5> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:Y0> = <nat:5> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:T> = <nat:7> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 