\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:6> ; <var:A> := <var:Z0> \end{verbatim} Allow $ <var:N> = <var:B> $ ahead of executing the list of commands it must be that we see $ <var:A> = <nat:6> $ when set of commands is done executing . \end{theorem} \begin{proof} The proof of the set of commands is clear by usual Hoare techniques . Paying attention to the following statement contained in our series of instructions , we see \begin{eqnarray} \{ <var:N> = <var:B> \} \, <var:Z0> := <nat:6> \, \{ <var:N> = <var:B> \land <var:Z0> = <nat:6> \} \end{eqnarray} Going to the next step , \begin{eqnarray} \{ <var:N> = <var:B> \} \, <var:Z0> := <nat:6> \, \{ <var:N> = <var:B> \land <var:Z0> = <nat:6> \} \end{eqnarray} This is shown to be logically sound through the variable binding law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:N> = <var:B> }} <var:Z0> := <nat:6> ; <var:A> := <var:Z0> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 