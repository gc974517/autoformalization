\begin{document} \begin{theorem} We define the following list of instructions such that \begin{verbatim} <var:y0> := <nat:2> ; <var:i> := <var:y0> \end{verbatim} Allowing it to be that $ <var:S> = <var:Y> $ ahead of the execution of this series of commands , it holds that we see $ <var:i> = <nat:2> $ once series of commands has terminated . \end{theorem} \begin{proof} The course of logic for this set of instructions is clear using typical Hoare reasoning . Going to the next step , we see \begin{eqnarray} \{ <var:S> = <var:Y> \} \, <var:y0> := <nat:2> \, \{ <var:S> = <var:Y> \land <var:y0> = <nat:2> \} \\ \{ <var:S> = <var:Y> \land <var:y0> = <nat:2> \} \, <var:i> := <var:y0\, \{ <var:S> = <var:Y> \land <var:i> = <nat:2> \} \end{eqnarray} This is deduced using the assignment rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:S> = <var:Y> }} <var:y0> := <nat:2> ; <var:i> := <var:y0> {{ <var:i> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Y> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Y> /\ <var:i> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 