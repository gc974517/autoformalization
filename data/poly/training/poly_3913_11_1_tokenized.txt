\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:F1> := <var:t> ; <var:F2> := <var:F1> * <var:t> ; <var:F3> := <var:F2> * <var:t> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:8> ; <var:F3> := <var:F3> * <nat:4> ; <var:A> := <var:F3> <var:A> := <var:A> + <var:F2> <var:A> := <var:A> + <var:F1> <var:A> := <var:A> + <var:F0> \end{verbatim} Assuming that we have $ <var:t> = <var:a> $ prior to interpreting our program then we have $ <var:A> = <nat:4> \times <var:a> ^ <nat:3> + <nat:8> \times <var:a> ^ <nat:2> + <nat:5> \times <var:a> + <nat:5> $ when list of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:a> \} \\ <var:F1> := <var:t> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <var:a> \} \\ <var:F2> := <var:F1> * <var:t> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <var:a> \land <var:F2> = <var:a> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:t> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <var:a> \land <var:F2> = <var:a> ^ <nat:2> \land <var:F3> = <var:a> ^ <nat:3> \} \\ <var:F0> := <nat:5> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <var:a> \land <var:F2> = <var:a> ^ <nat:2> \land <var:F3> = <var:a> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F1> := <var:F1> * <nat:5> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <nat:5> \cdot <var:a> \land <var:F2> = <var:a> ^ <nat:2> \land <var:F3> = <var:a> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F2> := <var:F2> * <nat:8> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <nat:5> \cdot <var:a> \land <var:F2> = <nat:8> \cdot <var:a> ^ <nat:2> \land <var:F3> = <var:a> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:F3> := <var:F3> * <nat:4> ; \\ \{ <var:t> = <var:a> \land <var:F1> = <nat:5> \cdot <var:a> \land <var:F2> = <nat:8> \cdot <var:a> ^ <nat:2> \land <var:F3> = <nat:4> \cdot <var:a> ^ <nat:3> \land <var:F0> = <nat:5> \} \\ <var:A> := <var:F3> \\ \{ <var:t> = <var:a> \land <var:F1> = <nat:5> \cdot <var:a> \land <var:F2> = <nat:8> \cdot <var:a> ^ <nat:2> \land <var:F0> = <nat:5> \land <var:A> = <nat:4> \cdot <var:a> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:F2> \\ \{ <var:t> = <var:a> \land <var:F1> = <nat:5> \cdot <var:a> \land <var:F0> = <nat:5> \land <var:A> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:8> \cdot <var:a> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:F1> \\ \{ <var:t> = <var:a> \land <var:F0> = <nat:5> \land <var:A> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:8> \cdot <var:a> ^ <nat:2> + <nat:5> \cdot <var:a> \} \\ <var:A> := <var:A> + <var:F0> \\ \{ <var:t> = <var:a> \land <var:A> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:8> \cdot <var:a> ^ <nat:2> + <nat:5> \cdot <var:a> + <nat:5> \} \end{eqnarray} Applying typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:t> = <var:a> }} <var:F1> := <var:t> ; <var:F2> := <var:F1> * <var:t> ; <var:F3> := <var:F2> * <var:t> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:5> ; <var:F2> := <var:F2> * <nat:8> ; <var:F3> := <var:F3> * <nat:4> ; <var:A> := <var:F3> <var:A> := <var:A> + <var:F2> <var:A> := <var:A> + <var:F1> <var:A> := <var:A> + <var:F0> {{ <var:A> = <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <var:a> /\ <var:F2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <var:a> /\ <var:F2> = <var:a> ^ <nat:2> /\ <var:F3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <var:a> /\ <var:F2> = <var:a> ^ <nat:2> /\ <var:F3> = <var:a> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <nat:5> * <var:a> /\ <var:F2> = <var:a> ^ <nat:2> /\ <var:F3> = <var:a> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <nat:5> * <var:a> /\ <var:F2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:F3> = <var:a> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <nat:5> * <var:a> /\ <var:F2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:F3> = <nat:4> * <var:a> ^ <nat:3> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <nat:5> * <var:a> /\ <var:F2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:F0> = <nat:5> /\ <var:A> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F1> = <nat:5> * <var:a> /\ <var:F0> = <nat:5> /\ <var:A> = <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:F0> = <nat:5> /\ <var:A> = <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:A> = <nat:4> * <var:a> ^ <nat:3> + <nat:8> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 