\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:e> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:1> ; <var:i> := <var:z1> <var:i> := <var:i> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:e> = <var:R> $ --- for every positive integer coefficients $ <var:R> $ --- before the evaluation of the set of commands , it holds that $ <var:i> = <nat:1> \cdot <var:R> + <nat:9> $ once code segment has exited . \end{theorem} \begin{proof} Notice the following decorated series of instructions . \begin{eqnarray} \{ <var:e> = <var:R> \} \\ <var:z1> := <var:e> ; \\ \{ <var:e> = <var:R> \land <var:z1> = <var:R> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:e> = <var:R> \land <var:z1> = <var:R> \land <var:z0> = <nat:9> \} \\ <var:z1> := <var:z1> * <nat:1> ; \\ \{ <var:e> = <var:R> \land <var:z1> = <nat:1> * <var:R> \land <var:z0> = <nat:9> \} \\ <var:i> := <var:z1> \\ \{ <var:e> = <var:R> \land <var:z0> = <nat:9> \land <var:i> = <nat:1> * <var:R> \} \\ <var:i> := <var:i> + <var:z0> \\ \{ <var:e> = <var:R> \land <var:i> = <nat:1> * <var:R> + <nat:9> \} \end{eqnarray} Utilizing standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:e> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:1> ; <var:i> := <var:z1> <var:i> := <var:i> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:e> = <var:R> }} <def:poly> {{ <var:i> = <nat:1> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:z1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:z1> = <var:R> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:z1> = <nat:1> * <var:R> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:z0> = <nat:9> /\ <var:i> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:i> = <nat:1> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 