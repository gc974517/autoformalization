\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:3> ; <var:r> := <var:C0> \end{verbatim} Assume given all positive integer coefficients $ <var:K> $ it to hold that $ <var:J> = <var:K> $ before the execution of the list of instructions then we see $ <var:r> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:K> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:J> = <var:K> \land <var:C0> = <nat:3> \} \\ <var:r> := <var:C0> \\ \{ <var:J> = <var:K> \land <var:r> = <nat:3> \} \end{eqnarray} The application of standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <var:C0> := <nat:3> ; <var:r> := <var:C0> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 