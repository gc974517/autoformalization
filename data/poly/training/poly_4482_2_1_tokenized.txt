\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:3> ; <var:B> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:M> = <var:h> $ before interpreting the segment of code , it follows that $ <var:B> = <nat:3> $ when segment of code finishes . \end{theorem} \begin{proof} Proving correctness for this program is evident through this decorated series of instructions . \begin{eqnarray} \{ <var:M> = <var:h> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:M> = <var:h> \land <var:N0> = <nat:3> \} \\ <var:B> := <var:N0> \\ \{ <var:M> = <var:h> \land <var:B> = <nat:3> \} \end{eqnarray} Applying typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:B> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:M> = <var:h> }} <def:poly> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:h> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 