\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:9> ; <var:F> := <var:h0> \end{verbatim} Assume that $ <var:e> = <var:q> $ before executing the program , it holds that $ <var:F> = <nat:9> $ when series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:q> \} \\ <var:h0> := <nat:9> ; \\ \{ <var:e> = <var:q> \land <var:h0> = <nat:9> \} \\ <var:F> := <var:h0> \\ \{ <var:e> = <var:q> \land <var:F> = <nat:9> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:e> = <var:q> }} <var:h0> := <nat:9> ; <var:F> := <var:h0> {{ <var:F> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:q> /\ <var:F> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 