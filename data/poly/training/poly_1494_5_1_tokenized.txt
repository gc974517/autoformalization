\begin{document} \begin{theorem} Take a program as follows \begin{verbatim} <var:x1> := <var:t> ; <var:x0> := <nat:3> ; <var:x1> := <var:x1> * <nat:1> ; <var:J> := <var:x1> <var:J> := <var:J> + <var:x0> \end{verbatim} Assume , given some natural coefficients $ <var:Y> $ , that we have $ <var:t> = <var:Y> $ before the evaluation of the list of instructions , it follows that we have $ <var:J> = <nat:1> \cdot <var:Y> + <nat:3> $ once segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is given with typical Hoare logic . Shifting focus toward the proceeding pieces of code contained in our series of instructions , \begin{verbatim} { <var:t> = <var:Y> } <var:x1> := <var:t> { <var:t> = <var:Y> \land <var:x1> = <var:Y> } { <var:t> = <var:Y> \land <var:x1> = <var:Y> } <var:x0> := <nat:3> { <var:t> = <var:Y> \land <var:x1> = <var:Y> \land <var:x0> = <nat:3> } { <var:t> = <var:Y> \land <var:x1> = <var:Y> \land <var:x0> = <nat:3> } <var:x1> := <var:x1> * <nat:1> { <var:t> = <var:Y> \land <var:x1> = <nat:1> \times <var:Y> \land <var:x0> = <nat:3> } { <var:t> = <var:Y> \land <var:x1> = <nat:1> \times <var:Y> \land <var:x0> = <nat:3> } <var:J> := <var:x1{ <var:t> = <var:Y> \land <var:x0> = <nat:3> \land <var:J> = <nat:1> \times <var:Y> } \end{verbatim} Advancing to the next step , we see \begin{verbatim} { <var:t> = <var:Y> } <var:x1> := <var:t> { <var:t> = <var:Y> \land <var:x1> = <var:Y> } \end{verbatim} This is rigorously given with the variable assignmet law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:t> = <var:Y> }} <var:x1> := <var:t> ; <var:x0> := <nat:3> ; <var:x1> := <var:x1> * <nat:1> ; <var:J> := <var:x1> <var:J> := <var:J> + <var:x0> {{ <var:J> = <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:x1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:x1> = <var:Y> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:x1> = <nat:1> * <var:Y> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:x0> = <nat:3> /\ <var:J> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:J> = <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 