\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:N> := <var:r3> <var:N> := <var:N> + <var:r2> <var:N> := <var:N> + <var:r1> <var:N> := <var:N> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assume that $ <var:T> = <var:P> $ with some $ <var:P> \in \mathbb{N} $ ahead of the evaluation of this list of commands , it must be that we see $ <var:N> = <nat:5> \cdot <var:P> ^ <nat:3> + <nat:4> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our set of commands is done through standard Hoare logic . Jumping to the subsequent lines found in the program , \begin{eqnarray} \{ <var:T> = <var:P> \} \, <var:r1> := <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \, <var:r2> := <var:r1> * <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \} \, <var:r3> := <var:r2> * <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \} \end{eqnarray} This is ensured by the variable assignmet law defined in standard Hoare techniques . Immediately following , we have \begin{eqnarray} \{ <var:T> = <var:P> \} \, <var:r1> := <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \, <var:r2> := <var:r1> * <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \} \, <var:r3> := <var:r2> * <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \} \, <var:r0> := <nat:9> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \land <var:r0> = <nat:9> \} \, <var:r1> := <var:r1> * <nat:1> \, \{ <var:T> = <var:P> \land <var:r1> = <nat:1> * <var:P> \land <var:r2> = <var:P> ^ <nat:2> \land <var:r3> = <var:P> ^ <nat:3> \land <var:r0> = <nat:9> \} \end{eqnarray} Immediately following , we have \begin{eqnarray} \{ <var:T> = <var:P> \} \, <var:r1> := <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \\ \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \, <var:r2> := <var:r1> * <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \land <var:r2> = <var:P> ^ <nat:2> \} \end{eqnarray} Looking at the proceeding command seen in our segment of code , \begin{eqnarray} \{ <var:T> = <var:P> \} \, <var:r1> := <var:T> \, \{ <var:T> = <var:P> \land <var:r1> = <var:P> \} \end{eqnarray} This is deduced through the variable update scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:N> := <var:r3> <var:N> := <var:N> + <var:r2> <var:N> := <var:N> + <var:r1> <var:N> := <var:N> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <def:poly> {{ <var:N> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <var:P> /\ <var:r2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <var:P> /\ <var:r2> = <var:P> ^ <nat:2> /\ <var:r3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <var:P> /\ <var:r2> = <var:P> ^ <nat:2> /\ <var:r3> = <var:P> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <var:P> ^ <nat:2> /\ <var:r3> = <var:P> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:r3> = <var:P> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:P> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:4> * <var:P> ^ <nat:2> /\ <var:r0> = <nat:9> /\ <var:N> = <nat:5> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r0> = <nat:9> /\ <var:N> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:r0> = <nat:9> /\ <var:N> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N> = <nat:5> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 