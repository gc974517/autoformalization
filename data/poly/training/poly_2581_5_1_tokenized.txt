\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:r> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:2> ; <var:h> := <var:q1> <var:h> := <var:h> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Given it to be that $ <var:r> = <var:X> $ before evaluating this series of instructions it must be that $ <var:h> = <nat:2> \times <var:X> + <nat:9> $ once list of instructions executes . \end{theorem} \begin{proof} The proof of this list of instructions can be seen by usual Hoare techniques . Jumping to the subsequent line contained in our code segment , we see the environment update command defining $ <var:r> $ toward $ <var:q1>$ . This statement transfers the condition $ \{ <var:r> = <var:X> \} $ toward $ \{ <var:r> = <var:X> \land <var:q1> = <var:X> \} $ . This is known to be sound with the assignment rule found in Hoare logic . Moving forward to the next step , we have the assignment command binding $ <nat:9> $ toward $ <var:q0>$ . This line advances the precondition $ \{ <var:r> = <var:X> \land <var:q1> = <var:X> \} $ into the condition $ \{ <var:r> = <var:X> \land <var:q1> = <var:X> \land <var:q0> = <nat:9> \} $ . Advancing , we see the statement \verb | <var:q1> := <var:q1> * <nat:2> ; | . This transfers $ \{ <var:r> = <var:X> \land <var:q1> = <var:X> \land <var:q0> = <nat:9> \} $ to the condition $ \{ <var:r> = <var:X> \land <var:q1> = <nat:2> \times <var:X> \land <var:q0> = <nat:9> \} $ . This is shown with the assignment scheme given by Hoare techniques . Paying attention to the upcoming bit of code contained in the code segment , we see the assignment statement \verb | <var:h> := <var:q1> | . This advances $ \{ <var:r> = <var:X> \land <var:q1> = <nat:2> \times <var:X> \land <var:q0> = <nat:9> \} $ as $ \{ <var:r> = <var:X> \land <var:q0> = <nat:9> \land <var:h> = <nat:2> \times <var:X> \} $ . Moving forward , the binding command assigning $ <var:h> + <var:q0$ to $ <var:h>$ . This transfers $ \{ <var:r> = <var:X> \land <var:q0> = <nat:9> \land <var:h> = <nat:2> \times <var:X> \} $ as the condition $ \{ <var:r> = <var:X> \land <var:h> = <nat:2> \times <var:X> + <nat:9> \} $ . This is known to be sound with the assignment inference rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:r> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:2> ; <var:h> := <var:q1> <var:h> := <var:h> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:r> = <var:X> }} <def:poly> {{ <var:h> = <nat:2> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:q1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:q1> = <var:X> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:q1> = <nat:2> * <var:X> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:q0> = <nat:9> /\ <var:h> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:h> = <nat:2> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 