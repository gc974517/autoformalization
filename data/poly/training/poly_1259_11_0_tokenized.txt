\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:9> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:v> ; <var:u2> := <var:u2> * <var:v> ; <var:u3> := <nat:5> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:x> := <var:u3> ; <var:x> := <var:x> + <var:u2> ; <var:x> := <var:x> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allow it to hold that $ <var:v> = <var:s> $ ahead of the execution of this series of commands it holds that $ <var:x> = <nat:5> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:9> $ once code segment has terminated . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:v> = <var:s> \} \\ <var:u0> := <nat:9> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \} \\ <var:u2> := <nat:3> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> \} \\ <var:u2> := <var:u2> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> \} \\ <var:u2> := <var:u2> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:u3> := <nat:5> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \land <var:u3> = <nat:5> \} \\ <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \land <var:u3> = <nat:5> * <var:s> \} \\ <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \land <var:u3> = <nat:5> * <var:s> ^ <nat:2> \} \\ <var:u3> := <var:u3> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \land <var:u3> = <nat:5> * <var:s> ^ <nat:3> \} \\ <var:x> := <var:u3> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:u2> = <nat:3> * <var:s> ^ <nat:2> \land <var:x> = <nat:5> * <var:s> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:u2> ; \\ \{ <var:v> = <var:s> \land <var:u0> = <nat:9> \land <var:x> = <nat:5> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:u0> \\ \{ <var:v> = <var:s> \land <var:x> = <nat:5> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> \} \end{eqnarray} As a consequence , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u0> := <nat:9> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:v> ; <var:u2> := <var:u2> * <var:v> ; <var:u3> := <nat:5> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:u3> := <var:u3> * <var:v> ; <var:x> := <var:u3> ; <var:x> := <var:x> + <var:u2> ; <var:x> := <var:x> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:v> = <var:s> }} <def:poly> {{ <var:x> = <nat:5> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:5> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:u2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:x> = <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:u0> = <nat:9> /\ <var:x> = <nat:5> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:x> = <nat:5> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 