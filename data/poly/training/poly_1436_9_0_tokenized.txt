\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:J> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:J> ; <var:E2> := <var:E2> * <var:J> ; <var:h> := <var:E2> ; <var:h> := <var:h> + <var:E1> ; <var:h> := <var:h> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Given it to hold that $ <var:J> = <var:v> $ , given all $ <var:v> \in \mathbb{Z}^+ $ , prior to evaluating this set of instructions , it must be that $ <var:h> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives : \begin{eqnarray} \{ <var:J> = <var:v> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \} \\ <var:E1> := <nat:3> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \} \\ <var:E1> := <var:E1> * <var:J> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \cdot <var:v> \} \\ <var:E2> := <nat:3> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \cdot <var:v> \land <var:E2> = <nat:3> \} \\ <var:E2> := <var:E2> * <var:J> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \cdot <var:v> \land <var:E2> = <nat:3> \cdot <var:v> \} \\ <var:E2> := <var:E2> * <var:J> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \cdot <var:v> \land <var:E2> = <nat:3> \cdot <var:v> ^ <nat:2> \} \\ <var:h> := <var:E2> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:E1> = <nat:3> \cdot <var:v> \land <var:h> = <nat:3> \cdot <var:v> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:E1> ; \\ \{ <var:J> = <var:v> \land <var:E0> = <nat:4> \land <var:h> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} \\ <var:h> := <var:h> + <var:E0> \\ \{ <var:J> = <var:v> \land <var:h> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:J> ; <var:E2> := <nat:3> ; <var:E2> := <var:E2> * <var:J> ; <var:E2> := <var:E2> * <var:J> ; <var:h> := <var:E2> ; <var:h> := <var:h> + <var:E1> ; <var:h> := <var:h> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:J> = <var:v> }} <def:poly> {{ <var:h> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:v> /\ <var:E2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:v> /\ <var:E2> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:v> /\ <var:E2> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:3> * <var:v> /\ <var:h> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:E0> = <nat:4> /\ <var:h> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 