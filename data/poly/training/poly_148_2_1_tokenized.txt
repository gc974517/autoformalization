\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:3> ; <var:h> := <var:g0> \end{verbatim} Assuming it to hold that $ <var:Y> = <var:x> $ prior to running the code , then we see $ <var:h> = <nat:3> $ . \end{theorem} \begin{proof} Observe the below decorated program . \begin{eqnarray} \{ <var:Y> = <var:x> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:Y> = <var:x> \land <var:g0> = <nat:3> \} \\ <var:h> := <var:g0> \\ \{ <var:Y> = <var:x> \land <var:h> = <nat:3> \} \end{eqnarray} The application of typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Y> = <var:x> }} <var:g0> := <nat:3> ; <var:h> := <var:g0> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 