\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:2> ; <var:Q> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:O> = <var:X> $ before the evaluation of our code segment it must be that $ <var:Q> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is clear through standard Hoare techniques . Keeping momentum , we have the assignment statement giving $ <nat:2> $ toward $ <var:k0>$ . This transfers the condition $ \{ <var:O> = <var:X> \} $ as the postcondition $ \{ <var:O> = <var:X> \land <var:k0> = <nat:2> \} $ . Advancing to the next step , we see the environment update code defining $ <var:k0$ to $ <var:Q>$ . This line moves the condition $ \{ <var:O> = <var:X> \land <var:k0> = <nat:2> \} $ to the postcondition $ \{ <var:O> = <var:X> \land <var:Q> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:Q> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:O> = <var:X> }} <def:poly> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 