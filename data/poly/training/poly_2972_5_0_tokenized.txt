\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:e> ; <var:f> := <var:U1> ; <var:f> := <var:f> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Given --- assuming some positive coefficients $ <var:j> $ --- that we have $ <var:e> = <var:j> $ before evaluating our code segment , it must be that $ <var:f> = <nat:3> \cdot <var:j> + <nat:9> $ once code executes . \end{theorem} \begin{proof} See that the following decorated list of instructions . \begin{eqnarray} \{ <var:e> = <var:j> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:e> = <var:j> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:3> ; \\ \{ <var:e> = <var:j> \land <var:U0> = <nat:9> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:e> ; \\ \{ <var:e> = <var:j> \land <var:U0> = <nat:9> \land <var:U1> = <nat:3> \times <var:j> \} \\ <var:f> := <var:U1> ; \\ \{ <var:e> = <var:j> \land <var:U0> = <nat:9> \land <var:f> = <nat:3> \times <var:j> \} \\ <var:f> := <var:f> + <var:U0> \\ \{ <var:e> = <var:j> \land <var:f> = <nat:3> \times <var:j> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:e> ; <var:f> := <var:U1> ; <var:f> := <var:f> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:e> = <var:j> }} <def:poly> {{ <var:f> = <nat:3> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:U0> = <nat:9> /\ <var:f> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:f> = <nat:3> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 