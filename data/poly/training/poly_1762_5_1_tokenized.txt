\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:E> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:1> ; <var:F> := <var:o1> <var:F> := <var:F> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:E> = <var:T> $ prior to the evaluation of the program , it must be that we have $ <var:F> = <nat:1> \cdot <var:T> + <nat:5> $ after program finishes . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:E> = <var:T> \} \\ <var:o1> := <var:E> ; \\ \{ <var:E> = <var:T> \land <var:o1> = <var:T> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:E> = <var:T> \land <var:o1> = <var:T> \land <var:o0> = <nat:5> \} \\ <var:o1> := <var:o1> * <nat:1> ; \\ \{ <var:E> = <var:T> \land <var:o1> = <nat:1> \cdot <var:T> \land <var:o0> = <nat:5> \} \\ <var:F> := <var:o1> \\ \{ <var:E> = <var:T> \land <var:o0> = <nat:5> \land <var:F> = <nat:1> \cdot <var:T> \} \\ <var:F> := <var:F> + <var:o0> \\ \{ <var:E> = <var:T> \land <var:F> = <nat:1> \cdot <var:T> + <nat:5> \} \end{eqnarray} Allowing the evaluation of this set of instructions results in : \begin{eqnarray} \end{eqnarray} Considering the above , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:E> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:1> ; <var:F> := <var:o1> <var:F> := <var:F> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:E> = <var:T> }} <def:poly> {{ <var:F> = <nat:1> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:o1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:o1> = <var:T> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:o1> = <nat:1> * <var:T> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:o0> = <nat:5> /\ <var:F> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:F> = <nat:1> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 