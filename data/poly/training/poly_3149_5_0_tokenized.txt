\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:a> ; <var:p> := <var:F1> ; <var:p> := <var:p> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allow it to be that $ <var:a> = <var:Q> $ before executing this list of commands , it holds that we see $ <var:p> = <nat:7> * <var:Q> + <nat:3> $ after series of commands is done executing . \end{theorem} \begin{proof} Applying standard Hoare logic results in : \begin{eqnarray} \{ <var:a> = <var:Q> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:a> = <var:Q> \land <var:F0> = <nat:3> \} \\ <var:F1> := <nat:7> ; \\ \{ <var:a> = <var:Q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:7> \} \\ <var:F1> := <var:F1> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:7> \times <var:Q> \} \\ <var:p> := <var:F1> ; \\ \{ <var:a> = <var:Q> \land <var:F0> = <nat:3> \land <var:p> = <nat:7> \times <var:Q> \} \end{eqnarray} Furthering executing this segment of code results in : \begin{eqnarray} <var:p> := <var:p> + <var:F0> \\ \{ <var:a> = <var:Q> \land <var:p> = <nat:7> \times <var:Q> + <nat:3> \} \end{eqnarray} Thus , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:a> ; <var:p> := <var:F1> ; <var:p> := <var:p> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <def:poly> {{ <var:p> = <nat:7> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:F0> = <nat:3> /\ <var:p> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:p> = <nat:7> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 