\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:S> ; <var:L2> := <var:L1> * <var:S> ; <var:L3> := <var:L2> * <var:S> ; <var:L0> := <nat:8> ; <var:L1> := <var:L1> * <nat:3> ; <var:L3> := <var:L3> * <nat:8> ; <var:A> := <var:L3> <var:A> := <var:A> + <var:L1> <var:A> := <var:A> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:S> = <var:g> $ ( for any integers $ <var:g> $ ) before evaluating our segment of code then we see $ <var:A> = <nat:8> \cdot <var:g> ^ <nat:3> + <nat:3> \cdot <var:g> + <nat:8> $ . \end{theorem} \begin{proof} Observe this decorated code segment . \begin{eqnarray} \{ <var:S> = <var:g> \} \\ <var:L1> := <var:S> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <var:g> \} \\ <var:L2> := <var:L1> * <var:S> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <var:g> \land <var:L2> = <var:g> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:S> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <var:g> \land <var:L2> = <var:g> ^ <nat:2> \land <var:L3> = <var:g> ^ <nat:3> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <var:g> \land <var:L2> = <var:g> ^ <nat:2> \land <var:L3> = <var:g> ^ <nat:3> \land <var:L0> = <nat:8> \} \\ <var:L1> := <var:L1> * <nat:3> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <nat:3> * <var:g> \land <var:L2> = <var:g> ^ <nat:2> \land <var:L3> = <var:g> ^ <nat:3> \land <var:L0> = <nat:8> \} \\ <var:L3> := <var:L3> * <nat:8> ; \\ \{ <var:S> = <var:g> \land <var:L1> = <nat:3> * <var:g> \land <var:L2> = <var:g> ^ <nat:2> \land <var:L3> = <nat:8> * <var:g> ^ <nat:3> \land <var:L0> = <nat:8> \} \\ <var:A> := <var:L3> \\ \{ <var:S> = <var:g> \land <var:L1> = <nat:3> * <var:g> \land <var:L2> = <var:g> ^ <nat:2> \land <var:L0> = <nat:8> \land <var:A> = <nat:8> * <var:g> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:L1> \\ \{ <var:S> = <var:g> \land <var:L0> = <nat:8> \land <var:A> = <nat:8> * <var:g> ^ <nat:3> + <nat:3> * <var:g> \} \\ <var:A> := <var:A> + <var:L0> \\ \{ <var:S> = <var:g> \land <var:A> = <nat:8> * <var:g> ^ <nat:3> + <nat:3> * <var:g> + <nat:8> \} \end{eqnarray} Using Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:S> ; <var:L2> := <var:L1> * <var:S> ; <var:L3> := <var:L2> * <var:S> ; <var:L0> := <nat:8> ; <var:L1> := <var:L1> * <nat:3> ; <var:L3> := <var:L3> * <nat:8> ; <var:A> := <var:L3> <var:A> := <var:A> + <var:L1> <var:A> := <var:A> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <def:poly> {{ <var:A> = <nat:8> * <var:g> ^ <nat:3> + <nat:3> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <var:g> /\ <var:L2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <var:g> /\ <var:L2> = <var:g> ^ <nat:2> /\ <var:L3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <var:g> /\ <var:L2> = <var:g> ^ <nat:2> /\ <var:L3> = <var:g> ^ <nat:3> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <nat:3> * <var:g> /\ <var:L2> = <var:g> ^ <nat:2> /\ <var:L3> = <var:g> ^ <nat:3> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <nat:3> * <var:g> /\ <var:L2> = <var:g> ^ <nat:2> /\ <var:L3> = <nat:8> * <var:g> ^ <nat:3> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L1> = <nat:3> * <var:g> /\ <var:L2> = <var:g> ^ <nat:2> /\ <var:L0> = <nat:8> /\ <var:A> = <nat:8> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:L0> = <nat:8> /\ <var:A> = <nat:8> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:A> = <nat:8> * <var:g> ^ <nat:3> + <nat:3> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 