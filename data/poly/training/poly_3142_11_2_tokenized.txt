\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:2> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:3> + <var:p> * <var:c> \end{verbatim} Assume that $ <var:c> = <var:w> $ ahead of interpreting the set of commands , it must be that $ <var:p> = <nat:3> \times <var:w> ^ <nat:10> + <nat:1> \times <var:w> ^ <nat:9> + <nat:1> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be accomplished using standard Hoare reasoning . Taking a look at the upcoming line found in the set of instructions , the variable assignmet code letting $ <nat:3> $ toward $ <var:p>$ . This line advances the condition $ \{ <var:c> = <var:w> \} $ to $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \} $ . This is given through the assignment law in standard Hoare reasoning . Moving forward , we see the code defining $ <nat:1> + <var:p> * <var:c> $ toward $ <var:p>$ . This command forwards $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \} $ as the postcondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> + <nat:1> \} $ . This is shown to be logically sound by the assignment scheme of usual Hoare logic . Following , we have the environment update code \verb | <var:p> := <nat:1> + <var:p> * <var:c> ; | . This redefines $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> + <nat:1> \} $ as the postcondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:1> \} $ . This is shown using the assignment law of standard Hoare techniques . Considering the next bit of code in the series of commands , the variable update code giving $ <var:p> * <var:c> $ into $ <var:p>$ . This line redefines the precondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:1> \} $ as $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + \} $ . This is ensured using the assignment law in typical Hoare reasoning . Moving on to the upcoming line of code in the program , we see the binding code binding $ <nat:1> + <var:p> * <var:c> $ as $ <var:p>$ . This redefines $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + \} $ as $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:1> \} $ . Moving forward to the next step , the variable assignmet code assigning $ <nat:4> + <var:p> * <var:c> $ to $ <var:p>$ . This statement takes the precondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> + <nat:4> \} $ . This is given through the assignment rule in Hoare reasoning . Moving on to the proceeding step contained in the segment of code , we have the variable assignmet line \verb | <var:p> := <nat:1> + <var:p> * <var:c> ; | . This transfers $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> + <nat:4> \} $ into the condition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:1> \} $ . This is guaranteed through the assignment law defined by usual Hoare reasoning . Shifting focus toward the following bit of code found in our set of commands , we have the variable update command defining $ <nat:4> + <var:p> * <var:c> $ as $ <var:p>$ . This command moves $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:1> \} $ into $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} $ . This is shown with the assignment rule given in typical Hoare techniques . Moving on to the next step , the variable assignmet code \verb | <var:p> := <nat:2> + <var:p> * <var:c> ; | . This code forwards $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} $ toward the condition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:2> \} $ . Advancing to the next step , the statement \verb | <var:p> := <nat:4> + <var:p> * <var:c> ; | . This statement advances $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:2> \} $ to $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:9> + <nat:1> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:4> \} $ . This is sound by the assignment scheme defined in standard Hoare techniques . Stepping through , we have the environment update command \verb | <var:p> := <nat:3> + <var:p> * <var:c> | . This command moves the condition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:9> + <nat:1> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:7> + <nat:1> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:4> \} $ toward the postcondition $ \{ <var:c> = <var:w> \land <var:p> = <nat:3> \times <var:w> ^ <nat:10> + <nat:1> \times <var:w> ^ <nat:9> + <nat:1> \times <var:w> ^ <nat:8> + <nat:1> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:3> \} $ . This is ensured through the assignment scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:c> = <var:w> }} <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:1> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:2> + <var:p> * <var:c> ; <var:p> := <nat:4> + <var:p> * <var:c> ; <var:p> := <nat:3> + <var:p> * <var:c> {{ <var:p> = <nat:3> * <var:w> ^ <nat:10> + <nat:1> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:w> /\ <var:p> = <nat:3> * <var:w> ^ <nat:10> + <nat:1> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 