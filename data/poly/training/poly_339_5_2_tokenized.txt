\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:3> + <var:N> * <var:I> ; <var:N> := <nat:2> + <var:N> * <var:I> ; <var:N> := <nat:2> + <var:N> * <var:I> ; <var:N> := <nat:1> + <var:N> * <var:I> \end{verbatim} Given given every positive coefficients $ <var:d> $ that $ <var:I> = <var:d> $ before the evaluation of this list of instructions it follows that $ <var:N> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be accomplished by Hoare logic . Taking another step toward the following lines in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:d> \} & <var:N> := <nat:4> & \{ <var:I> = <var:d> \land <var:N> = <nat:4> \} \\ \{ <var:I> = <var:d> \land <var:N> = <nat:4> \} & <var:N> := <nat:3> + <var:N> * <var:I> & \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> + <nat:3> \} \\ \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> + <nat:3> \} & <var:N> := <nat:2> + <var:N> * <var:I> & \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} \\ \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} & <var:N> := <nat:2> + <var:N> * <var:I> & \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} \\ \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} & <var:N> := <nat:1> + <var:N> * <var:I& \{ <var:I> = <var:d> \land <var:N> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} \end{tabular} This is guaranteed by the variable update inference rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:I> = <var:d> }} <var:N> := <nat:4> ; <var:N> := <nat:3> + <var:N> * <var:I> ; <var:N> := <nat:2> + <var:N> * <var:I> ; <var:N> := <nat:2> + <var:N> * <var:I> ; <var:N> := <nat:1> + <var:N> * <var:I> {{ <var:N> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:N> = <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:N> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:N> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 