\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:7> ; <var:w> := <var:K3> <var:w> := <var:w> + <var:K2> <var:w> := <var:w> + <var:K1> <var:w> := <var:w> + <var:K0> \end{verbatim} Given it to hold that $ <var:C> = <var:B> $ prior to the evaluation of the series of instructions then we see $ <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program is demonstrated using Hoare techniques . Taking another step toward the next line found in the series of commands , we have the binding line \verb | <var:K1> := <var:C> ; | . This advances $ \{ <var:C> = <var:B> \} $ as $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \} $ . This is rigorously given using the assignment scheme found in typical Hoare reasoning . Taking another step toward the proceeding command found in the program , we have the variable binding command \verb | <var:K2> := <var:K1> * <var:C> ; | . This redefines the condition $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \} $ to the condition $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \} $ . Moving on to the proceeding command seen in our code , the assignment code \verb | <var:K3> := <var:K2> * <var:C> ; | . This moves $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \} $ into $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \} $ . Next , we have the line yielding $ <nat:8> $ as $ <var:K0>$ . This statement forwards the condition $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . Taking a look at the next step seen in the code , we see the statement giving $ <var:K1> * <nat:5> $ to $ <var:K1>$ . This advances the precondition $ \{ <var:C> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ as the condition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . This is sound through the assignment scheme found in standard Hoare logic . Stepping forward , the variable assignmet statement \verb | <var:K2> := <var:K2> * <nat:6> ; | . This line transfers $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ to the condition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . This is shown to be logically sound with the assignment rule defined by Hoare techniques . Focusing on the subsequent line of code contained in the list of instructions , we see the binding line \verb | <var:K3> := <var:K3> * <nat:7> ; | . This forwards the precondition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ toward the postcondition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . Now , we see the binding statement giving $ <var:K3$ to $ <var:w>$ . This moves the precondition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K3> = <nat:7> \cdot <var:B> ^ <nat:3> \land <var:K0> = <nat:8> \} $ as $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> \} $ . This is deduced through the assignment scheme obtained from standard Hoare reasoning . Honing in on the upcoming step contained in our list of commands , we see the variable assignmet statement \verb | <var:w> := <var:w> + <var:K2> | . This redefines $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K2> = <nat:6> \cdot <var:B> ^ <nat:2> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ . Advancing to the proceeding line found in our code , we have the assignment line \verb | <var:w> := <var:w> + <var:K1> | . This command transfers the condition $ \{ <var:C> = <var:B> \land <var:K1> = <nat:5> \cdot <var:B> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:B> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ . This is given by the assignment rule defined by usual Hoare reasoning . Considering the next statement in the code segment , the variable assignmet statement assigning $ <var:w> + <var:K0$ toward $ <var:w>$ . This code moves the precondition $ \{ <var:C> = <var:B> \land <var:K0> = <nat:8> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ into the condition $ \{ <var:C> = <var:B> \land <var:w> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:6> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:C> = <var:B> }} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:6> ; <var:K3> := <var:K3> * <nat:7> ; <var:w> := <var:K3> <var:w> := <var:w> + <var:K2> <var:w> := <var:w> + <var:K1> <var:w> := <var:w> + <var:K0> {{ <var:w> = <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <nat:5> * <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <nat:5> * <var:B> /\ <var:K2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <nat:5> * <var:B> /\ <var:K2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <nat:5> * <var:B> /\ <var:K2> = <nat:6> * <var:B> ^ <nat:2> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:7> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K1> = <nat:5> * <var:B> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:B> /\ <var:w> = <nat:7> * <var:B> ^ <nat:3> + <nat:6> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 