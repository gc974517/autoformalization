\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:R1> := <var:D> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:5> ; <var:W> := <var:R1> <var:W> := <var:W> + <var:R0> \end{verbatim} Assuming it to be that $ <var:D> = <var:h> $ ( given some natural coefficients $ <var:h> $ ) ahead of running our set of instructions it follows that we have $ <var:W> = <nat:5> \times <var:h> + <nat:1> $ after list of instructions executes . \end{theorem} \begin{proof} Proving correctness for the code can be demonstrated using usual Hoare techniques . Paying attention to the following bit of code found in the series of instructions , the binding line giving $ <var:D> $ as $ <var:R1>$ . This code redefines $ \{ <var:D> = <var:h> \} $ to $ \{ <var:D> = <var:h> \land <var:R1> = <var:h> \} $ . This is shown using the assignment inference rule defined in typical Hoare techniques . Next , the environment update code \verb | <var:R0> := <nat:1> ; | . This code transfers $ \{ <var:D> = <var:h> \land <var:R1> = <var:h> \} $ into $ \{ <var:D> = <var:h> \land <var:R1> = <var:h> \land <var:R0> = <nat:1> \} $ . This is deduced by the assignment law given by usual Hoare techniques . Considering the following statement found in the program , we have the environment update statement \verb | <var:R1> := <var:R1> * <nat:5> ; | . This statement forwards the condition $ \{ <var:D> = <var:h> \land <var:R1> = <var:h> \land <var:R0> = <nat:1> \} $ into the condition $ \{ <var:D> = <var:h> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R0> = <nat:1> \} $ . Stepping through , we see the variable assignmet code \verb | <var:W> := <var:R1> | . This command moves the condition $ \{ <var:D> = <var:h> \land <var:R1> = <nat:5> \cdot <var:h> \land <var:R0> = <nat:1> \} $ into the condition $ \{ <var:D> = <var:h> \land <var:R0> = <nat:1> \land <var:W> = <nat:5> \cdot <var:h> \} $ . This is guaranteed through the assignment scheme given by standard Hoare logic . Now , we see the line \verb | <var:W> := <var:W> + <var:R0> | . This command forwards the condition $ \{ <var:D> = <var:h> \land <var:R0> = <nat:1> \land <var:W> = <nat:5> \cdot <var:h> \} $ to the postcondition $ \{ <var:D> = <var:h> \land <var:W> = <nat:5> \cdot <var:h> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:D> = <var:h> }} <var:R1> := <var:D> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:5> ; <var:W> := <var:R1> <var:W> := <var:W> + <var:R0> {{ <var:W> = <nat:5> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:R1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:R1> = <var:h> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:R1> = <nat:5> * <var:h> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:R0> = <nat:1> /\ <var:W> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:h> /\ <var:W> = <nat:5> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 