\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:c1> := <var:u> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:5> ; <var:W> := <var:c1> <var:W> := <var:W> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:u> = <var:e> $ , given any positive coefficients $ <var:e> $ , ahead of evaluating this set of instructions , then we have $ <var:W> = <nat:5> * <var:e> + <nat:7> $ when program has terminated . \end{theorem} \begin{proof} The course of logic for the code can be shown using standard Hoare reasoning . Observing the next steps contained in our list of instructions , \begin{verbatim} { <var:u> = <var:e> } <var:c1> := <var:u> { <var:u> = <var:e> \land <var:c1> = <var:e> } { <var:u> = <var:e> \land <var:c1> = <var:e> } <var:c0> := <nat:7> { <var:u> = <var:e> \land <var:c1> = <var:e> \land <var:c0> = <nat:7> } { <var:u> = <var:e> \land <var:c1> = <var:e> \land <var:c0> = <nat:7> } <var:c1> := <var:c1> * <nat:5> { <var:u> = <var:e> \land <var:c1> = <nat:5> * <var:e> \land <var:c0> = <nat:7> } \end{verbatim} Considering the proceeding statements found in the set of commands , we see \begin{verbatim} { <var:u> = <var:e> } <var:c1> := <var:u> { <var:u> = <var:e> \land <var:c1> = <var:e> } { <var:u> = <var:e> \land <var:c1> = <var:e> } <var:c0> := <nat:7> { <var:u> = <var:e> \land <var:c1> = <var:e> \land <var:c0> = <nat:7> } \end{verbatim} This is shown using the law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:u> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:5> ; <var:W> := <var:c1> <var:W> := <var:W> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:u> = <var:e> }} <def:poly> {{ <var:W> = <nat:5> * <var:e> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:c1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:c1> = <var:e> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:c1> = <nat:5> * <var:e> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:c0> = <nat:7> /\ <var:W> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:W> = <nat:5> * <var:e> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 