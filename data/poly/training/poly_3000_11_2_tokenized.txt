\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:2> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting natural coefficients $ <var:H> $ --- that we have $ <var:X> = <var:H> $ ahead of evaluating this series of instructions , it follows that $ <var:G> = <nat:2> \cdot <var:H> ^ <nat:10> + <nat:1> \cdot <var:H> ^ <nat:8> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is done by Hoare techniques . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:G> := <nat:2> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} & <var:G> := <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> + \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> + \} & <var:G> := <nat:1> + <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:2> + <nat:1> \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:2> + <nat:1> \} & <var:G> := <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + \} & <var:G> := <nat:3> + <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} & <var:G> := <nat:3> + <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> \} & <var:G> := <nat:1> + <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> \} \end{tabular} Taking another step toward the proceeding bit of code contained in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:G> := <nat:2> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} \end{tabular} Taking another step toward the following pieces of code seen in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:G> := <nat:2> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} \\ \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} & <var:G> := <var:G> * <var:X> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> * <var:H> + \} \end{tabular} Looking at the following line of code found in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:H> \} & <var:G> := <nat:2> & \{ <var:X> = <var:H> \land <var:G> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:2> ; <var:G> := <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:2> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:X> = <var:H> }} <def:poly> {{ <var:G> = <nat:2> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:G> = <nat:2> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 