\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:B> ; <var:F> := <var:A1> ; <var:F> := <var:F> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assume it to be that $ <var:B> = <var:C> $ ( taking positive numbers $ <var:C> $ ) before the execution of our segment of code , it follows that we see $ <var:F> = <nat:2> \times <var:C> + <nat:4> $ after code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:C> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:B> = <var:C> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:2> ; \\ \{ <var:B> = <var:C> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \} \\ <var:A1> := <var:A1> * <var:B> ; \\ \{ <var:B> = <var:C> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \cdot <var:C> \} \\ <var:F> := <var:A1> ; \\ \{ <var:B> = <var:C> \land <var:A0> = <nat:4> \land <var:F> = <nat:2> \cdot <var:C> \} \\ <var:F> := <var:F> + <var:A0> \\ \{ <var:B> = <var:C> \land <var:F> = <nat:2> \cdot <var:C> + <nat:4> \} \end{eqnarray} Applying Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:B> ; <var:F> := <var:A1> ; <var:F> := <var:F> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:B> = <var:C> }} <def:poly> {{ <var:F> = <nat:2> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:A0> = <nat:4> /\ <var:F> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:C> /\ <var:F> = <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 