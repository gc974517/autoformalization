\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:9> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:E> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:E> ; <var:w2> := <var:w2> * <var:E> ; <var:y> := <var:w2> ; <var:y> := <var:y> + <var:w1> ; <var:y> := <var:y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assume that we have $ <var:E> = <var:h> $ before executing our series of instructions then $ <var:y> = <nat:8> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:9> $ when set of instructions has executed . \end{theorem} \begin{proof} The application of usual Hoare reasoning produces : \begin{eqnarray} \{ <var:E> = <var:h> \} \\ <var:w0> := <nat:9> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> * <var:h> \} \\ <var:w2> := <nat:8> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:8> \} \\ <var:w2> := <var:w2> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:8> * <var:h> \} \\ <var:w2> := <var:w2> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> * <var:h> \land <var:w2> = <nat:8> * <var:h> ^ <nat:2> \} \\ <var:y> := <var:w2> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:w1> = <nat:2> * <var:h> \land <var:y> = <nat:8> * <var:h> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:w1> ; \\ \{ <var:E> = <var:h> \land <var:w0> = <nat:9> \land <var:y> = <nat:8> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} \\ <var:y> := <var:y> + <var:w0> \\ \{ <var:E> = <var:h> \land <var:y> = <nat:8> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> \} \end{eqnarray} Considering the preceding argument , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:9> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:E> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:E> ; <var:w2> := <var:w2> * <var:E> ; <var:y> := <var:w2> ; <var:y> := <var:y> + <var:w1> ; <var:y> := <var:y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <def:poly> {{ <var:y> = <nat:8> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> * <var:h> /\ <var:w2> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:w1> = <nat:2> * <var:h> /\ <var:y> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:8> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:y> = <nat:8> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 