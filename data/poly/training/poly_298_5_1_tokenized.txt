\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:l> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:M> := <var:Z1> <var:M> := <var:M> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:l> = <var:o> $ prior to running the code segment , it holds that we see $ <var:M> = <nat:2> * <var:o> + <nat:4> $ after code has exited . \end{theorem} \begin{proof} The flow of logic for this code is evident through this decorated program . \begin{eqnarray} \{ <var:l> = <var:o> \} \\ <var:Z1> := <var:l> ; \\ \{ <var:l> = <var:o> \land <var:Z1> = <var:o> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:l> = <var:o> \land <var:Z1> = <var:o> \land <var:Z0> = <nat:4> \} \\ <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:l> = <var:o> \land <var:Z1> = <nat:2> \times <var:o> \land <var:Z0> = <nat:4> \} \\ <var:M> := <var:Z1> \\ \{ <var:l> = <var:o> \land <var:Z0> = <nat:4> \land <var:M> = <nat:2> \times <var:o> \} \\ <var:M> := <var:M> + <var:Z0> \\ \{ <var:l> = <var:o> \land <var:M> = <nat:2> \times <var:o> + <nat:4> \} \end{eqnarray} Using Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:l> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:M> := <var:Z1> <var:M> := <var:M> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <def:poly> {{ <var:M> = <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Z1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Z1> = <var:o> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Z1> = <nat:2> * <var:o> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:Z0> = <nat:4> /\ <var:M> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:M> = <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 