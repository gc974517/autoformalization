\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:4> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:T> ; <var:k> := <var:l1> ; <var:k> := <var:k> + <var:l0> \end{verbatim} Assuming for any natural coefficients $ <var:v> $ that we have $ <var:T> = <var:v> $ ahead of interpreting our list of instructions , it holds that we have $ <var:k> = <nat:5> \cdot <var:v> + <nat:4> $ when list of instructions is done . \end{theorem} \begin{proof} The proof of the segment of code can be accomplished by usual Hoare logic . After , we see \begin{eqnarray} \{ <var:T> = <var:v> \} \, <var:l0> := <nat:4> \, \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \} \end{eqnarray} This is ensured by the variable assignmet rule defined by Hoare reasoning . Going to the next step , we have \begin{eqnarray} \{ <var:T> = <var:v> \} \, <var:l0> := <nat:4> \, \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \} \end{eqnarray} This is known to be sound by the binding rule from standard Hoare reasoning . Going to the next step , we see \begin{eqnarray} \{ <var:T> = <var:v> \} \, <var:l0> := <nat:4> \, \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \} \\ \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \} \, <var:l1> := <nat:5> \, \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \land <var:l1> = <nat:5> \} \\ \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \land <var:l1> = <nat:5> \} \, <var:l1> := <var:l1> * <var:T> \, \{ <var:T> = <var:v> \land <var:l0> = <nat:4> \land <var:l1> = <nat:5> * <var:v> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:T> = <var:v> }} <var:l0> := <nat:4> ; <var:l1> := <nat:5> ; <var:l1> := <var:l1> * <var:T> ; <var:k> := <var:l1> ; <var:k> := <var:k> + <var:l0> {{ <var:k> = <nat:5> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:l0> = <nat:4> /\ <var:k> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:v> /\ <var:k> = <nat:5> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 