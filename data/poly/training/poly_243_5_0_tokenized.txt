\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:1> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:p> ; <var:Q> := <var:X1> ; <var:Q> := <var:Q> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:p> = <var:P> $ before executing our segment of code , it follows that $ <var:Q> = <nat:2> * <var:P> + <nat:1> $ after segment of code exits . \end{theorem} \begin{proof} Arguing the correctness of our segment of code is shown through usual Hoare reasoning . Moving on to the following statement in the list of commands , we have the variable assignmet statement assigning $ <nat:1> $ into $ <var:X0>$ . This forwards the precondition $ \{ <var:p> = <var:P> \} $ into the condition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \} $ . This is shown by the assignment inference rule found in usual Hoare reasoning . Looking at the subsequent line of code found in the set of commands , we see the variable assignmet command letting $ <nat:2> $ to $ <var:X1>$ . This code advances $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \} $ into $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \} $ . Immediately following , the environment update line giving $ <var:X1> * <var:p> $ as $ <var:X1>$ . This command takes the precondition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \times <var:P> \} $ . This is known to be sound through the assignment scheme obtained from usual Hoare logic . Paying attention to the subsequent piece of code contained in the series of commands , we see the binding code \verb | <var:Q> := <var:X1> ; | . This takes the precondition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \times <var:P> \} $ as the condition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:Q> = <nat:2> \times <var:P> \} $ . Shifting focus toward the following statement in our segment of code , we see the environment update code \verb | <var:Q> := <var:Q> + <var:X0> | . This advances the precondition $ \{ <var:p> = <var:P> \land <var:X0> = <nat:1> \land <var:Q> = <nat:2> \times <var:P> \} $ as $ \{ <var:p> = <var:P> \land <var:Q> = <nat:2> \times <var:P> + <nat:1> \} $ . This is ensured through the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:p> ; <var:Q> := <var:X1> ; <var:Q> := <var:Q> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:p> = <var:P> }} <def:poly> {{ <var:Q> = <nat:2> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:X0> = <nat:1> /\ <var:Q> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:Q> = <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 