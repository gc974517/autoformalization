\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:S> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:S> ; <var:K2> := <var:K2> * <var:S> ; <var:i> := <var:K2> ; <var:i> := <var:i> + <var:K1> ; <var:i> := <var:i> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:S> = <var:C> $ ahead of running this segment of code , it follows that we see $ <var:i> = <nat:9> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:4> $ after set of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be accomplished through usual Hoare logic . Observing the subsequent command seen in our segment of code , we have the statement yielding $ <nat:4> $ as $ <var:K0>$ . This command redefines the condition $ \{ <var:S> = <var:C> \} $ toward the postcondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \} $ . Moving on to the next line found in our series of instructions , the variable assignmet code giving $ <nat:4> $ into $ <var:K1>$ . This code transfers $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \} $ as the postcondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> \} $ . This is known to be sound using the assignment rule defined by typical Hoare logic . Paying attention to the following line in our series of commands , we have the line \verb | <var:K1> := <var:K1> * <var:S> ; | . This forwards the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> \} $ into the postcondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \} $ . Jumping to the proceeding line contained in the code segment , we have the binding line assigning $ <nat:9> $ as $ <var:K2>$ . This statement redefines the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \} $ to the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> \} $ . This is ensured through the assignment rule obtained from typical Hoare techniques . Further , we see the environment update line yielding $ <var:K2> * <var:S> $ into $ <var:K2>$ . This statement moves the precondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> \} $ into the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> * <var:C> \} $ . Advancing on , we see the variable binding code \verb | <var:K2> := <var:K2> * <var:S> ; | . This code forwards $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> * <var:C> \} $ as $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> * <var:C> ^ <nat:2> \} $ . This is shown with the assignment inference rule in Hoare reasoning . Moving forward to the next step , we have the variable update code letting $ <var:K2> $ into $ <var:i>$ . This statement redefines the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:K2> = <nat:9> * <var:C> ^ <nat:2> \} $ as the condition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:i> = <nat:9> * <var:C> ^ <nat:2> \} $ . Next , we have the environment update statement letting $ <var:i> + <var:K1> $ toward $ <var:i>$ . This forwards the precondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:C> \land <var:i> = <nat:9> * <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> \} $ . Observing the next step found in the list of instructions , the binding line \verb | <var:i> := <var:i> + <var:K0> | . This command redefines $ \{ <var:S> = <var:C> \land <var:K0> = <nat:4> \land <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> \} $ into the condition $ \{ <var:S> = <var:C> \land <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> \} $ . This is guaranteed by the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:S> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:S> ; <var:K2> := <var:K2> * <var:S> ; <var:i> := <var:K2> ; <var:i> := <var:i> + <var:K1> ; <var:i> := <var:i> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <def:poly> {{ <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:C> /\ <var:K2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:C> /\ <var:K2> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:C> /\ <var:K2> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:C> /\ <var:i> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:K0> = <nat:4> /\ <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:i> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 