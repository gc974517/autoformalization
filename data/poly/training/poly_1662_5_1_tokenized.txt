\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:h1> := <var:c> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:4> ; <var:r> := <var:h1> <var:r> := <var:r> + <var:h0> \end{verbatim} Assume --- given all $ <var:Y> \in \mathbb{Z}^+ $ --- that we have $ <var:c> = <var:Y> $ ahead of evaluating our series of instructions it must be that we see $ <var:r> = <nat:4> \times <var:Y> + <nat:3> $ once set of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:Y> \} \\ <var:h1> := <var:c> ; \\ \{ <var:c> = <var:Y> \land <var:h1> = <var:Y> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:c> = <var:Y> \land <var:h1> = <var:Y> \land <var:h0> = <nat:3> \} \\ <var:h1> := <var:h1> * <nat:4> ; \\ \{ <var:c> = <var:Y> \land <var:h1> = <nat:4> \times <var:Y> \land <var:h0> = <nat:3> \} \\ <var:r> := <var:h1> \\ \{ <var:c> = <var:Y> \land <var:h0> = <nat:3> \land <var:r> = <nat:4> \times <var:Y> \} \\ <var:r> := <var:r> + <var:h0> \\ \{ <var:c> = <var:Y> \land <var:r> = <nat:4> \times <var:Y> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:c> = <var:Y> }} <var:h1> := <var:c> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:4> ; <var:r> := <var:h1> <var:r> := <var:r> + <var:h0> {{ <var:r> = <nat:4> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:h1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:h1> = <nat:4> * <var:Y> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:h0> = <nat:3> /\ <var:r> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:r> = <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 