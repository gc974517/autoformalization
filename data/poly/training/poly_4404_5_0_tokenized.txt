\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:r> ; <var:y> := <var:u1> ; <var:y> := <var:y> + <var:u0> \end{verbatim} Assume $ <var:r> = <var:x> $ ahead of executing our program , it holds that we see $ <var:y> = <nat:8> * <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:r> = <var:x> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:r> = <var:x> \land <var:u0> = <nat:3> \} \\ <var:u1> := <nat:8> ; \\ \{ <var:r> = <var:x> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> \} \\ <var:u1> := <var:u1> * <var:r> ; \\ \{ <var:r> = <var:x> \land <var:u0> = <nat:3> \land <var:u1> = <nat:8> * <var:x> \} \\ <var:y> := <var:u1> ; \\ \{ <var:r> = <var:x> \land <var:u0> = <nat:3> \land <var:y> = <nat:8> * <var:x> \} \\ <var:y> := <var:y> + <var:u0> \\ \{ <var:r> = <var:x> \land <var:y> = <nat:8> * <var:x> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:r> = <var:x> }} <var:u0> := <nat:3> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:r> ; <var:y> := <var:u1> ; <var:y> := <var:y> + <var:u0> {{ <var:y> = <nat:8> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:u0> = <nat:3> /\ <var:y> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:x> /\ <var:y> = <nat:8> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 