\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:D1> := <var:o> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:2> ; <var:y> := <var:D1> <var:y> := <var:y> + <var:D0> \end{verbatim} Assuming , given all positive integers $ <var:Z> $ , that $ <var:o> = <var:Z> $ before evaluating the segment of code then we have $ <var:y> = <nat:2> \times <var:Z> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be shown using Hoare techniques . Honing in on the subsequent piece of code seen in our program , we see the assignment command assigning $ <var:o> $ into $ <var:D1>$ . This transfers the condition $ \{ <var:o> = <var:Z> \} $ as the condition $ \{ <var:o> = <var:Z> \land <var:D1> = <var:Z> \} $ . This is ensured using the assignment law defined in standard Hoare reasoning . Moving onward , the binding code \verb | <var:D0> := <nat:1> ; | . This redefines the precondition $ \{ <var:o> = <var:Z> \land <var:D1> = <var:Z> \} $ as the condition $ \{ <var:o> = <var:Z> \land <var:D1> = <var:Z> \land <var:D0> = <nat:1> \} $ . This is shown through the assignment scheme defined in standard Hoare reasoning . Observing the proceeding line seen in our segment of code , we see the assignment command \verb | <var:D1> := <var:D1> * <nat:2> ; | . This takes the condition $ \{ <var:o> = <var:Z> \land <var:D1> = <var:Z> \land <var:D0> = <nat:1> \} $ toward the postcondition $ \{ <var:o> = <var:Z> \land <var:D1> = <nat:2> \times <var:Z> \land <var:D0> = <nat:1> \} $ . Moving forward to the next step , the binding code \verb | <var:y> := <var:D1> | . This command takes the precondition $ \{ <var:o> = <var:Z> \land <var:D1> = <nat:2> \times <var:Z> \land <var:D0> = <nat:1> \} $ toward the postcondition $ \{ <var:o> = <var:Z> \land <var:D0> = <nat:1> \land <var:y> = <nat:2> \times <var:Z> \} $ . This is guaranteed with the assignment rule in standard Hoare techniques . Shifting focus toward the upcoming step contained in the segment of code , we see the variable update line \verb | <var:y> := <var:y> + <var:D0> | . This line transfers the precondition $ \{ <var:o> = <var:Z> \land <var:D0> = <nat:1> \land <var:y> = <nat:2> \times <var:Z> \} $ into the postcondition $ \{ <var:o> = <var:Z> \land <var:y> = <nat:2> \times <var:Z> + <nat:1> \} $ . This is known to be sound through the assignment scheme found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:o> = <var:Z> }} <var:D1> := <var:o> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:2> ; <var:y> := <var:D1> <var:y> := <var:y> + <var:D0> {{ <var:y> = <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:D1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:D1> = <var:Z> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:D1> = <nat:2> * <var:Z> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:D0> = <nat:1> /\ <var:y> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:y> = <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 