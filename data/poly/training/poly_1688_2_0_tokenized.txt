\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:8> ; <var:o> := <var:Y0> \end{verbatim} Given $ <var:u> = <var:e> $ --- for any natural coefficients $ <var:e> $ --- prior to interpreting our list of instructions , it follows that we see $ <var:o> = <nat:8> $ after program is done . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is clear through Hoare logic . Keeping momentum , we see the environment update statement \verb | <var:Y0> := <nat:8> ; | . This advances the precondition $ \{ <var:u> = <var:e> \} $ toward the postcondition $ \{ <var:u> = <var:e> \land <var:Y0> = <nat:8> \} $ . This is shown using the assignment scheme in typical Hoare logic . Keeping momentum , the environment update statement letting $ <var:Y0$ as $ <var:o>$ . This code takes the condition $ \{ <var:u> = <var:e> \land <var:Y0> = <nat:8> \} $ into the postcondition $ \{ <var:u> = <var:e> \land <var:o> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:u> = <var:e> }} <var:Y0> := <nat:8> ; <var:o> := <var:Y0> {{ <var:o> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:e> /\ <var:o> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 