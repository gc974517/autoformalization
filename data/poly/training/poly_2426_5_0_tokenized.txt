\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:u> ; <var:L> := <var:Z1> ; <var:L> := <var:L> + <var:Z0> \end{verbatim} Allow that we have $ <var:u> = <var:T> $ before evaluating our list of commands it follows that we see $ <var:L> = <nat:8> * <var:T> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:T> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:u> = <var:T> \land <var:Z0> = <nat:4> \} \\ <var:Z1> := <nat:8> ; \\ \{ <var:u> = <var:T> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <var:u> ; \\ \{ <var:u> = <var:T> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:8> \times <var:T> \} \\ <var:L> := <var:Z1> ; \\ \{ <var:u> = <var:T> \land <var:Z0> = <nat:4> \land <var:L> = <nat:8> \times <var:T> \} \\ <var:L> := <var:L> + <var:Z0> \\ \{ <var:u> = <var:T> \land <var:L> = <nat:8> \times <var:T> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <var:Z0> := <nat:4> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:u> ; <var:L> := <var:Z1> ; <var:L> := <var:L> + <var:Z0> {{ <var:L> = <nat:8> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:Z0> = <nat:4> /\ <var:L> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:L> = <nat:8> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 