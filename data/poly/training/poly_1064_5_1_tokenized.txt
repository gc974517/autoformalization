\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:W1> := <var:g> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:4> ; <var:f> := <var:W1> <var:f> := <var:f> + <var:W0> \end{verbatim} Given that we have $ <var:g> = <var:B> $ taking positive integer coefficients $ <var:B> $ before the evaluation of the set of commands , it must be that we have $ <var:f> = <nat:4> * <var:B> + <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is given with Hoare logic . Shifting focus toward the next bits of codein the list of instructions , we have \begin{verbatim} { <var:g> = <var:B> } <var:W1> := <var:g> { <var:g> = <var:B> \land <var:W1> = <var:B> } { <var:g> = <var:B> \land <var:W1> = <var:B> } <var:W0> := <nat:4> { <var:g> = <var:B> \land <var:W1> = <var:B> \land <var:W0> = <nat:4> } { <var:g> = <var:B> \land <var:W1> = <var:B> \land <var:W0> = <nat:4> } <var:W1> := <var:W1> * <nat:4> { <var:g> = <var:B> \land <var:W1> = <nat:4> \times <var:B> \land <var:W0> = <nat:4> } { <var:g> = <var:B> \land <var:W1> = <nat:4> \times <var:B> \land <var:W0> = <nat:4> } <var:f> := <var:W1{ <var:g> = <var:B> \land <var:W0> = <nat:4> \land <var:f> = <nat:4> \times <var:B> } \end{verbatim} Moving forward , we have \begin{verbatim} { <var:g> = <var:B> } <var:W1> := <var:g> { <var:g> = <var:B> \land <var:W1> = <var:B> } \end{verbatim} This is ensured with the environment update law from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:g> = <var:B> }} <var:W1> := <var:g> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:4> ; <var:f> := <var:W1> <var:f> := <var:f> + <var:W0> {{ <var:f> = <nat:4> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:W1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:W1> = <var:B> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:W1> = <nat:4> * <var:B> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:W0> = <nat:4> /\ <var:f> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:f> = <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 