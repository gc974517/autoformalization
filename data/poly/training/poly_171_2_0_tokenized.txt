\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:3> ; <var:F> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:D> = <var:w> $ --- assuming some positive coefficients $ <var:w> $ --- prior to evaluating the program it follows that we have $ <var:F> = <nat:3> $ after set of commands finishes . \end{theorem} \begin{proof} The proof of this series of commands is shown using typical Hoare reasoning . Keeping momentum , we see \begin{eqnarray} \{ <var:D> = <var:w> \} \, <var:J0> := <nat:3> \, \{ <var:D> = <var:w> \land <var:J0> = <nat:3> \} \\ \{ <var:D> = <var:w> \land <var:J0> = <nat:3> \} \, <var:F> := <var:J0\, \{ <var:D> = <var:w> \land <var:F> = <nat:3> \} \end{eqnarray} This is known to be sound by the environment update scheme defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:F> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <def:poly> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 