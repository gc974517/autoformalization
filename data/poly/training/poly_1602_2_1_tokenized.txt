\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:8> ; <var:Z> := <var:E0> \end{verbatim} Allow with some positive numbers $ <var:g> $ it to be that $ <var:X> = <var:g> $ ahead of running this code , then we see $ <var:Z> = <nat:8> $ after series of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:g> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:X> = <var:g> \land <var:E0> = <nat:8> \} \\ <var:Z> := <var:E0> \\ \{ <var:X> = <var:g> \land <var:Z> = <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:X> = <var:g> }} <var:E0> := <nat:8> ; <var:Z> := <var:E0> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:g> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 