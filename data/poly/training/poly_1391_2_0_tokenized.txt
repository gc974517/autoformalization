\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:1> ; <var:j> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:I> = <var:W> $ ( for any natural numbers $ <var:W> $ ) prior to interpreting this list of commands , it must be that $ <var:j> = <nat:1> $ once segment of code terminates . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:I> = <var:W> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:I> = <var:W> \land <var:w0> = <nat:1> \} \\ <var:j> := <var:w0> \\ \{ <var:I> = <var:W> \land <var:j> = <nat:1> \} \end{eqnarray} Hence , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:j> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <def:poly> {{ <var:j> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:j> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 