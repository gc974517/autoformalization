\begin{document} \begin{theorem} Let the following list of instructions as \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:y> ; <var:N> := <var:X1> ; <var:N> := <var:N> + <var:X0> \end{verbatim} Allow it to hold that $ <var:y> = <var:S> $ before running our list of instructions , then we have $ <var:N> = <nat:7> * <var:S> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives : \begin{eqnarray} \{ <var:y> = <var:S> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:y> = <var:S> \land <var:X0> = <nat:4> \} \\ <var:X1> := <nat:7> ; \\ \{ <var:y> = <var:S> \land <var:X0> = <nat:4> \land <var:X1> = <nat:7> \} \\ <var:X1> := <var:X1> * <var:y> ; \\ \{ <var:y> = <var:S> \land <var:X0> = <nat:4> \land <var:X1> = <nat:7> \times <var:S> \} \end{eqnarray} Allowing interpreting the code segment gives : \begin{eqnarray} <var:N> := <var:X1> ; \\ \{ <var:y> = <var:S> \land <var:X0> = <nat:4> \land <var:N> = <nat:7> \times <var:S> \} \\ <var:N> := <var:N> + <var:X0> \\ \{ <var:y> = <var:S> \land <var:N> = <nat:7> \times <var:S> + <nat:4> \} \end{eqnarray} Therefore , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:y> = <var:S> }} <var:X0> := <nat:4> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:y> ; <var:N> := <var:X1> ; <var:N> := <var:N> + <var:X0> {{ <var:N> = <nat:7> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:X0> = <nat:4> /\ <var:N> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:S> /\ <var:N> = <nat:7> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 