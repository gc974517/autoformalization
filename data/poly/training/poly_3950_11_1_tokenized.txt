\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:p> ; <var:v2> := <var:v1> * <var:p> ; <var:v3> := <var:v2> * <var:p> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:6> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:p> = <var:V> $ prior to running the list of commands it holds that we see $ <var:j> = <nat:6> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:9> $ after series of commands has exited . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:p> = <var:V> \} \\ <var:v1> := <var:p> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <var:V> \} \end{eqnarray} Allowing executing our list of commands returns : \begin{eqnarray} <var:v2> := <var:v1> * <var:p> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <var:V> \land <var:v2> = <var:V> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:p> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <var:V> \land <var:v2> = <var:V> ^ <nat:2> \land <var:v3> = <var:V> ^ <nat:3> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <var:V> \land <var:v2> = <var:V> ^ <nat:2> \land <var:v3> = <var:V> ^ <nat:3> \land <var:v0> = <nat:9> \} \end{eqnarray} Allowing the execution of the set of commands produces : \begin{eqnarray} <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <nat:2> \times <var:V> \land <var:v2> = <var:V> ^ <nat:2> \land <var:v3> = <var:V> ^ <nat:3> \land <var:v0> = <nat:9> \} \\ <var:v2> := <var:v2> * <nat:3> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <nat:2> \times <var:V> \land <var:v2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:v3> = <var:V> ^ <nat:3> \land <var:v0> = <nat:9> \} \\ <var:v3> := <var:v3> * <nat:6> ; \\ \{ <var:p> = <var:V> \land <var:v1> = <nat:2> \times <var:V> \land <var:v2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:v3> = <nat:6> \times <var:V> ^ <nat:3> \land <var:v0> = <nat:9> \} \\ <var:j> := <var:v3> \\ \{ <var:p> = <var:V> \land <var:v1> = <nat:2> \times <var:V> \land <var:v2> = <nat:3> \times <var:V> ^ <nat:2> \land <var:v0> = <nat:9> \land <var:j> = <nat:6> \times <var:V> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:v2> \\ \{ <var:p> = <var:V> \land <var:v1> = <nat:2> \times <var:V> \land <var:v0> = <nat:9> \land <var:j> = <nat:6> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:v1> \\ \{ <var:p> = <var:V> \land <var:v0> = <nat:9> \land <var:j> = <nat:6> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> \} \\ <var:j> := <var:j> + <var:v0> \\ \{ <var:p> = <var:V> \land <var:j> = <nat:6> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:9> \} \end{eqnarray} Hence , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:p> ; <var:v2> := <var:v1> * <var:p> ; <var:v3> := <var:v2> * <var:p> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:2> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:6> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:p> = <var:V> }} <def:poly> {{ <var:j> = <nat:6> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <var:V> /\ <var:v2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <var:V> /\ <var:v2> = <var:V> ^ <nat:2> /\ <var:v3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <var:V> /\ <var:v2> = <var:V> ^ <nat:2> /\ <var:v3> = <var:V> ^ <nat:3> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <nat:2> * <var:V> /\ <var:v2> = <var:V> ^ <nat:2> /\ <var:v3> = <var:V> ^ <nat:3> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <nat:2> * <var:V> /\ <var:v2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:v3> = <var:V> ^ <nat:3> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <nat:2> * <var:V> /\ <var:v2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:V> ^ <nat:3> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <nat:2> * <var:V> /\ <var:v2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:v0> = <nat:9> /\ <var:j> = <nat:6> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v1> = <nat:2> * <var:V> /\ <var:v0> = <nat:9> /\ <var:j> = <nat:6> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:v0> = <nat:9> /\ <var:j> = <nat:6> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:j> = <nat:6> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 