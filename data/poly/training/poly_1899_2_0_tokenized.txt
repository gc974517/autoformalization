\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:7> ; <var:a> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing that we have $ <var:o> = <var:t> $ --- given every positive numbers $ <var:t> $ --- before evaluating this code segment , then we have $ <var:a> = <nat:7> $ when set of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be shown by typical Hoare logic . Observing the subsequent line of code found in our list of instructions , \begin{eqnarray} \{ <var:o> = <var:t> \} \, <var:E0> := <nat:7> \, \{ <var:o> = <var:t> \land <var:E0> = <nat:7> \} \end{eqnarray} Further , we have \begin{eqnarray} \{ <var:o> = <var:t> \} \, <var:E0> := <nat:7> \, \{ <var:o> = <var:t> \land <var:E0> = <nat:7> \} \end{eqnarray} This is ensured using the variable assignmet scheme found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:7> ; <var:a> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <def:poly> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 