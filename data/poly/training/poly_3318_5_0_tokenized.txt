\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:R> ; <var:L> := <var:d1> ; <var:L> := <var:L> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given that we have $ <var:R> = <var:s> $ before evaluating our program , it holds that $ <var:L> = <nat:1> \times <var:s> + <nat:4> $ . \end{theorem} \begin{proof} Let the below decorated code . \begin{eqnarray} \{ <var:R> = <var:s> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:R> = <var:s> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:R> = <var:s> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:R> ; \\ \{ <var:R> = <var:s> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \cdot <var:s> \} \\ <var:L> := <var:d1> ; \\ \{ <var:R> = <var:s> \land <var:d0> = <nat:4> \land <var:L> = <nat:1> \cdot <var:s> \} \\ <var:L> := <var:L> + <var:d0> \\ \{ <var:R> = <var:s> \land <var:L> = <nat:1> \cdot <var:s> + <nat:4> \} \end{eqnarray} The application of Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:R> ; <var:L> := <var:d1> ; <var:L> := <var:L> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:R> = <var:s> }} <def:poly> {{ <var:L> = <nat:1> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:d0> = <nat:4> /\ <var:L> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:L> = <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 