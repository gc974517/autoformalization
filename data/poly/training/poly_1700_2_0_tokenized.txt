\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:1> ; <var:e> := <var:L0> \end{verbatim} Allowing that we have $ <var:o> = <var:J> $ before the evaluation of this code , it holds that we have $ <var:e> = <nat:1> $ when code finishes . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:o> = <var:J> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:o> = <var:J> \land <var:L0> = <nat:1> \} \\ <var:e> := <var:L0> \\ \{ <var:o> = <var:J> \land <var:e> = <nat:1> \} \end{eqnarray} Thus , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:o> = <var:J> }} <var:L0> := <nat:1> ; <var:e> := <var:L0> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 