\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:y> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:y> ; <var:u2> := <var:u2> * <var:y> ; <var:D> := <var:u2> ; <var:D> := <var:D> + <var:u1> ; <var:D> := <var:D> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming $ <var:y> = <var:V> $ given every $ <var:V> \in \mathbb{N} $ ahead of interpreting this program , it holds that we see $ <var:D> = <nat:3> \cdot <var:V> ^ <nat:2> + <nat:2> \cdot <var:V> + <nat:6> $ once series of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:V> \} \\ <var:u0> := <nat:6> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \} \\ <var:u1> := <nat:2> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \} \\ <var:u1> := <var:u1> * <var:y> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \times <var:V> \} \\ <var:u2> := <nat:3> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \times <var:V> \land <var:u2> = <nat:3> \} \\ <var:u2> := <var:u2> * <var:y> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \times <var:V> \land <var:u2> = <nat:3> \times <var:V> \} \\ <var:u2> := <var:u2> * <var:y> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \times <var:V> \land <var:u2> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:D> := <var:u2> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:u1> = <nat:2> \times <var:V> \land <var:D> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:u1> ; \\ \{ <var:y> = <var:V> \land <var:u0> = <nat:6> \land <var:D> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> \} \\ <var:D> := <var:D> + <var:u0> \\ \{ <var:y> = <var:V> \land <var:D> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:6> \} \end{eqnarray} The application of Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:y> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:y> ; <var:u2> := <var:u2> * <var:y> ; <var:D> := <var:u2> ; <var:D> := <var:D> + <var:u1> ; <var:D> := <var:D> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:y> = <var:V> }} <def:poly> {{ <var:D> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> * <var:V> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> * <var:V> /\ <var:u2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> * <var:V> /\ <var:u2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:2> * <var:V> /\ <var:D> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:u0> = <nat:6> /\ <var:D> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:D> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 