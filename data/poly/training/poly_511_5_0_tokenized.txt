\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:c> ; <var:G> := <var:I1> ; <var:G> := <var:G> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assuming that $ <var:c> = <var:h> $ ahead of evaluating this set of instructions , it follows that $ <var:G> = <nat:8> * <var:h> + <nat:2> $ once set of commands terminates . \end{theorem} \begin{proof} The course of logic for this program is given by standard Hoare techniques . Moving forward to the following pieces of code contained in the program , we see \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:I0> := <nat:2> \, \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \} \\ \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \} \, <var:I1> := <nat:8> \, \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \} \\ \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \} \, <var:I1> := <var:I1> * <var:c> \, \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:h> \} \end{eqnarray} This is ensured with the variable assignmet rule given by standard Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:I0> := <nat:2> \, \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \} \end{eqnarray} This is sound through the inference rule from typical Hoare logic . Focusing on the following line seen in the list of commands , \begin{eqnarray} \{ <var:c> = <var:h> \} \, <var:I0> := <nat:2> \, \{ <var:c> = <var:h> \land <var:I0> = <nat:2> \} \end{eqnarray} This is shown by the environment update law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:c> ; <var:G> := <var:I1> ; <var:G> := <var:G> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:c> = <var:h> }} <def:poly> {{ <var:G> = <nat:8> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:I0> = <nat:2> /\ <var:G> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:G> = <nat:8> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 