\begin{document} \begin{theorem} Take a series of commands as \begin{verbatim} <var:u1> := <var:A> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:r> := <var:u1> <var:r> := <var:r> + <var:u0> \end{verbatim} Assume it to hold that $ <var:A> = <var:f> $ ( for all positive integers $ <var:f> $ ) before the execution of our segment of code , it must be that we see $ <var:r> = <nat:4> \cdot <var:f> + <nat:3> $ after list of commands terminates . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:f> \} \\ <var:u1> := <var:A> ; \\ \{ <var:A> = <var:f> \land <var:u1> = <var:f> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:A> = <var:f> \land <var:u1> = <var:f> \land <var:u0> = <nat:3> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:A> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u0> = <nat:3> \} \\ <var:r> := <var:u1> \\ \{ <var:A> = <var:f> \land <var:u0> = <nat:3> \land <var:r> = <nat:4> \cdot <var:f> \} \\ <var:r> := <var:r> + <var:u0> \\ \{ <var:A> = <var:f> \land <var:r> = <nat:4> \cdot <var:f> + <nat:3> \} \end{eqnarray} Thusly , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:A> = <var:f> }} <var:u1> := <var:A> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:r> := <var:u1> <var:r> := <var:r> + <var:u0> {{ <var:r> = <nat:4> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:u1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:u1> = <var:f> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:u0> = <nat:3> /\ <var:r> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:r> = <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 