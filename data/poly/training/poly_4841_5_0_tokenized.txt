\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:C> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Given it to hold that $ <var:C> = <var:S> $ prior to running the set of instructions it holds that we see $ <var:F> = <nat:1> \cdot <var:S> + <nat:3> $ after list of instructions has finished . \end{theorem} \begin{proof} The proof of our list of instructions is given with this decorated list of instructions . \begin{eqnarray} \{ <var:C> = <var:S> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:C> = <var:S> \land <var:G0> = <nat:3> \} \end{eqnarray} Furthering evaluating our list of instructions returns : \begin{eqnarray} <var:G1> := <nat:1> ; \\ \{ <var:C> = <var:S> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} \\ <var:G1> := <var:G1> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \cdot <var:S> \} \\ <var:F> := <var:G1> ; \\ \{ <var:C> = <var:S> \land <var:G0> = <nat:3> \land <var:F> = <nat:1> \cdot <var:S> \} \\ <var:F> := <var:F> + <var:G0> \\ \{ <var:C> = <var:S> \land <var:F> = <nat:1> \cdot <var:S> + <nat:3> \} \end{eqnarray} Using typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:C> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <def:poly> {{ <var:F> = <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:G0> = <nat:3> /\ <var:F> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:F> = <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 