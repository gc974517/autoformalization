\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:R> := <nat:2> ; <var:R> := <nat:2> + <var:R> * <var:a> ; <var:R> := <nat:3> + <var:R> * <var:a> ; <var:R> := <nat:4> + <var:R> * <var:a> ; <var:R> := <nat:1> + <var:R> * <var:a> ; <var:R> := <nat:4> + <var:R> * <var:a> ; <var:R> := <nat:3> + <var:R> * <var:a> \end{verbatim} Allowing that we have $ <var:a> = <var:c> $ before the execution of our list of commands it follows that we see $ <var:R> = <nat:2> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> $ when segment of code has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives : \begin{eqnarray} \{ <var:a> = <var:c> \} \\ <var:R> := <nat:2> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \} \\ <var:R> := <nat:2> + <var:R> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> + <nat:2> \} \\ <var:R> := <nat:3> + <var:R> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:3> \} \\ <var:R> := <nat:4> + <var:R> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:4> \} \\ <var:R> := <nat:1> + <var:R> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:1> \} \\ <var:R> := <nat:4> + <var:R> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + <nat:4> \} \\ <var:R> := <nat:3> + <var:R> * <var:a> \\ \{ <var:a> = <var:c> \land <var:R> = <nat:2> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> \} \end{eqnarray} As a consequence , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <var:R> := <nat:2> ; <var:R> := <nat:2> + <var:R> * <var:a> ; <var:R> := <nat:3> + <var:R> * <var:a> ; <var:R> := <nat:4> + <var:R> * <var:a> ; <var:R> := <nat:1> + <var:R> * <var:a> ; <var:R> := <nat:4> + <var:R> * <var:a> ; <var:R> := <nat:3> + <var:R> * <var:a> {{ <var:R> = <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:R> = <nat:2> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 