\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:E0> := <nat:3> ; <var:r> := <var:E0> \end{verbatim} Allow that $ <var:g> = <var:L> $ prior to executing our series of instructions it must be that we have $ <var:r> = <nat:3> $ once list of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is clear by typical Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:L> \} & <var:E0> := <nat:3> & \{ <var:g> = <var:L> \land <var:E0> = <nat:3> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:g> = <var:L> \} & <var:E0> := <nat:3> & \{ <var:g> = <var:L> \land <var:E0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <var:E0> := <nat:3> ; <var:r> := <var:E0> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 