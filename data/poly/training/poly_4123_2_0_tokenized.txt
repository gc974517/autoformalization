\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:7> ; <var:T> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Given it to hold that $ <var:H> = <var:Z> $ before executing this code segment then $ <var:T> = <nat:7> $ once list of commands has exited . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:H> = <var:Z> \} \\ <var:t0> := <nat:7> ; \\ \{ <var:H> = <var:Z> \land <var:t0> = <nat:7> \} \\ <var:T> := <var:t0> \\ \{ <var:H> = <var:Z> \land <var:T> = <nat:7> \} \end{eqnarray} Thus , our set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:T> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:H> = <var:Z> }} <def:poly> {{ <var:T> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:T> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 