\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:s1> := <var:J> ; <var:s2> := <var:s1> * <var:J> ; <var:s3> := <var:s2> * <var:J> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:5> ; <var:s3> := <var:s3> * <nat:1> ; <var:U> := <var:s3> <var:U> := <var:U> + <var:s2> <var:U> := <var:U> + <var:s1> <var:U> := <var:U> + <var:s0> \end{verbatim} Assume $ <var:J> = <var:x> $ prior to interpreting the series of instructions , then we have $ <var:U> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:5> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:9> $ once segment of code executes . \end{theorem} \begin{proof} Proving correctness for our set of instructions is accomplished by typical Hoare logic . Looking at the subsequent bit of code found in the list of commands , \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} Now , \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} Jumping to the upcoming bit of code contained in the program , we have \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} This is deduced by the variable binding rule defined in typical Hoare logic . Shifting focus toward the proceeding pieces of code found in the segment of code , we see \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \\ \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \, <var:s2> := <var:s1> * <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \} \\ \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \} \, <var:s3> := <var:s2> * <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \} \\ \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \} \, <var:s0> := <nat:9> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:9> \} \\ \{ <var:J> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:9> \} \, <var:s1> := <var:s1> * <nat:7> \, \{ <var:J> = <var:x> \land <var:s1> = <nat:7> \cdot <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:9> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} This is given with the binding scheme found in usual Hoare reasoning . Considering the proceeding step found in the series of instructions , \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} Considering the proceeding bit of code contained in the program , we see \begin{eqnarray} \{ <var:J> = <var:x> \} \, <var:s1> := <var:J> \, \{ <var:J> = <var:x> \land <var:s1> = <var:x> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:J> = <var:x> }} <var:s1> := <var:J> ; <var:s2> := <var:s1> * <var:J> ; <var:s3> := <var:s2> * <var:J> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:5> ; <var:s3> := <var:s3> * <nat:1> ; <var:U> := <var:s3> <var:U> := <var:U> + <var:s2> <var:U> := <var:U> + <var:s1> <var:U> := <var:U> + <var:s0> {{ <var:U> = <nat:1> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <nat:7> * <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <nat:7> * <var:x> /\ <var:s2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <nat:7> * <var:x> /\ <var:s2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:s3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <nat:7> * <var:x> /\ <var:s2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:s0> = <nat:9> /\ <var:U> = <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s1> = <nat:7> * <var:x> /\ <var:s0> = <nat:9> /\ <var:U> = <nat:1> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:s0> = <nat:9> /\ <var:U> = <nat:1> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:U> = <nat:1> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 