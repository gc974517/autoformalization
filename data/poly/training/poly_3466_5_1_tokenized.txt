\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:J> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:8> ; <var:Q> := <var:k1> <var:Q> := <var:Q> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:J> = <var:p> $ before the execution of the list of commands , then we see $ <var:Q> = <nat:8> \cdot <var:p> + <nat:5> $ once series of commands has terminated . \end{theorem} \begin{proof} Proving correctness for the code can be demonstrated using the following decorated code . \begin{eqnarray} \{ <var:J> = <var:p> \} \\ <var:k1> := <var:J> ; \\ \{ <var:J> = <var:p> \land <var:k1> = <var:p> \} \\ <var:k0> := <nat:5> ; \\ \{ <var:J> = <var:p> \land <var:k1> = <var:p> \land <var:k0> = <nat:5> \} \\ <var:k1> := <var:k1> * <nat:8> ; \\ \{ <var:J> = <var:p> \land <var:k1> = <nat:8> \times <var:p> \land <var:k0> = <nat:5> \} \\ <var:Q> := <var:k1> \\ \{ <var:J> = <var:p> \land <var:k0> = <nat:5> \land <var:Q> = <nat:8> \times <var:p> \} \\ <var:Q> := <var:Q> + <var:k0> \\ \{ <var:J> = <var:p> \land <var:Q> = <nat:8> \times <var:p> + <nat:5> \} \end{eqnarray} Applying standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:J> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:8> ; <var:Q> := <var:k1> <var:Q> := <var:Q> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:J> = <var:p> }} <def:poly> {{ <var:Q> = <nat:8> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:k1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:k1> = <var:p> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:k1> = <nat:8> * <var:p> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:k0> = <nat:5> /\ <var:Q> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:Q> = <nat:8> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 