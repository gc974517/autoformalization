\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:D> ; <var:O> := <var:k1> ; <var:O> := <var:O> + <var:k0> \end{verbatim} Assume that we have $ <var:D> = <var:T> $ ahead of evaluating the set of instructions it follows that we have $ <var:O> = <nat:2> \cdot <var:T> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be demonstrated using the following decorated series of commands . \begin{eqnarray} \{ <var:D> = <var:T> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:D> = <var:T> \land <var:k0> = <nat:6> \} \\ <var:k1> := <nat:2> ; \\ \{ <var:D> = <var:T> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \} \\ <var:k1> := <var:k1> * <var:D> ; \\ \{ <var:D> = <var:T> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \cdot <var:T> \} \\ <var:O> := <var:k1> ; \\ \{ <var:D> = <var:T> \land <var:k0> = <nat:6> \land <var:O> = <nat:2> \cdot <var:T> \} \\ <var:O> := <var:O> + <var:k0> \\ \{ <var:D> = <var:T> \land <var:O> = <nat:2> \cdot <var:T> + <nat:6> \} \end{eqnarray} Using typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:D> = <var:T> }} <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:D> ; <var:O> := <var:k1> ; <var:O> := <var:O> + <var:k0> {{ <var:O> = <nat:2> * <var:T> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:k0> = <nat:6> /\ <var:O> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:O> = <nat:2> * <var:T> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 