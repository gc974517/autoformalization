\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:j> ; <var:I2> := <var:I1> * <var:j> ; <var:I3> := <var:I2> * <var:j> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:1> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:t> := <var:I3> <var:t> := <var:t> + <var:I2> <var:t> := <var:t> + <var:I1> <var:t> := <var:t> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming given some positive integer coefficients $ <var:p> $ that we have $ <var:j> = <var:p> $ before running our segment of code it follows that we have $ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given with typical Hoare logic . Considering the upcoming statement in our set of commands , we see the assignment line giving $ <var:j> $ into $ <var:I1>$ . This moves the condition $ \{ <var:j> = <var:p> \} $ as the postcondition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \} $ . This is deduced through the assignment scheme found in Hoare logic . Taking a look at the subsequent bit of code found in our set of commands , we have the variable update command giving $ <var:I1> * <var:j> $ into $ <var:I2>$ . This command forwards $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \} $ to the postcondition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \} $ . Moving forward , we see the code yielding $ <var:I2> * <var:j> $ toward $ <var:I3>$ . This command takes the condition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \} $ to $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \} $ . Going forward , the variable update statement giving $ <nat:1> $ toward $ <var:I0>$ . This redefines the precondition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \} $ toward the postcondition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ . This is ensured using the assignment law from Hoare logic . Jumping to the following piece of code in our series of commands , we see the variable assignmet line defining $ <var:I1> * <nat:1> $ toward $ <var:I1>$ . This forwards the condition $ \{ <var:j> = <var:p> \land <var:I1> = <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ into the condition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ . Immediately following , we see the variable binding line binding $ <var:I2> * <nat:6> $ into $ <var:I2>$ . This advances the condition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ to $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ . This is guaranteed by the assignment law from typical Hoare techniques . Further , the binding command binding $ <var:I3> * <nat:6> $ to $ <var:I3>$ . This forwards $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I3> = <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ as $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I3> = <nat:6> * <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ . This is shown to be logically sound through the assignment rule given by Hoare techniques . Keeping momentum , the environment update line \verb | <var:t> := <var:I3> | . This takes the precondition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I3> = <nat:6> * <var:p> ^ <nat:3> \land <var:I0> = <nat:1> \} $ as the condition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> \} $ . This is known to be sound by the assignment rule of usual Hoare techniques . Taking another step toward the following line of code contained in the series of instructions , we have the assignment command \verb | <var:t> := <var:t> + <var:I2> | . This redefines the condition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I2> = <nat:6> * <var:p> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> \} $ toward the postcondition $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> \} $ . This is sound through the assignment law obtained from typical Hoare logic . Keeping momentum , the variable assignmet code \verb | <var:t> := <var:t> + <var:I1> | . This forwards $ \{ <var:j> = <var:p> \land <var:I1> = <nat:1> * <var:p> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> \} $ as the condition $ \{ <var:j> = <var:p> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} $ . This is deduced using the assignment scheme defined in typical Hoare logic . Shifting focus toward the upcoming line in the series of instructions , we have the variable assignmet command giving $ <var:t> + <var:I0$ as $ <var:t>$ . This transfers the condition $ \{ <var:j> = <var:p> \land <var:I0> = <nat:1> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} $ to the condition $ \{ <var:j> = <var:p> \land <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:j> ; <var:I2> := <var:I1> * <var:j> ; <var:I3> := <var:I2> * <var:j> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:1> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:t> := <var:I3> <var:t> := <var:t> + <var:I2> <var:t> := <var:t> + <var:I1> <var:t> := <var:t> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:j> = <var:p> }} <def:poly> {{ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <var:p> /\ <var:I2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <var:p> /\ <var:I2> = <var:p> ^ <nat:2> /\ <var:I3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <var:p> /\ <var:I2> = <var:p> ^ <nat:2> /\ <var:I3> = <var:p> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <nat:1> * <var:p> /\ <var:I2> = <var:p> ^ <nat:2> /\ <var:I3> = <var:p> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <nat:1> * <var:p> /\ <var:I2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:I3> = <var:p> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <nat:1> * <var:p> /\ <var:I2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:p> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <nat:1> * <var:p> /\ <var:I2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:I0> = <nat:1> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I1> = <nat:1> * <var:p> /\ <var:I0> = <nat:1> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:I0> = <nat:1> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:t> = <nat:6> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 