\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:S> ; <var:A> := <var:H1> ; <var:A> := <var:A> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:S> = <var:c> $ before executing the list of commands it follows that we see $ <var:A> = <nat:8> \cdot <var:c> + <nat:7> $ after series of commands has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be shown through typical Hoare logic . Advancing on , \begin{eqnarray} \{ <var:S> = <var:c> \} \, <var:H0> := <nat:7> \, \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \} \\ \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \} \, <var:H1> := <nat:8> \, \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:H1> = <nat:8> \} \\ \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:H1> = <nat:8> \} \, <var:H1> := <var:H1> * <var:S> \, \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:H1> = <nat:8> * <var:c> \} \\ \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:H1> = <nat:8> * <var:c> \} \, <var:A> := <var:H1> \, \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:A> = <nat:8> * <var:c> \} \\ \{ <var:S> = <var:c> \land <var:H0> = <nat:7> \land <var:A> = <nat:8> * <var:c> \} \, <var:A> := <var:A> + <var:H0\, \{ <var:S> = <var:c> \land <var:A> = <nat:8> * <var:c> + <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:7> ; <var:H1> := <nat:8> ; <var:H1> := <var:H1> * <var:S> ; <var:A> := <var:H1> ; <var:A> := <var:A> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:S> = <var:c> }} <def:poly> {{ <var:A> = <nat:8> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:H0> = <nat:7> /\ <var:A> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:A> = <nat:8> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 