\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:K> ; <var:t2> := <var:t1> * <var:K> ; <var:t3> := <var:t2> * <var:K> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:5> ; <var:e> := <var:t3> <var:e> := <var:e> + <var:t2> <var:e> := <var:e> + <var:t1> <var:e> := <var:e> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:K> = <var:A> $ ( taking whole numbers $ <var:A> $ ) ahead of running our segment of code , then we have $ <var:e> = <nat:5> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:7> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be done with Hoare logic . Advancing to the next step , the variable assignmet statement assigning $ <var:K> $ as $ <var:t1>$ . This transfers the precondition $ \{ <var:K> = <var:A> \} $ as $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \} $ . This is ensured using the assignment law defined in usual Hoare techniques . Moving forward to the subsequent command in the code , the variable binding code \verb | <var:t2> := <var:t1> * <var:K> ; | . This command advances the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \} $ as $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule in standard Hoare logic . Honing in on the next piece of code contained in the set of commands , we see the assignment command \verb | <var:t3> := <var:t2> * <var:K> ; | . This statement advances the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \} $ into the postcondition $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule in usual Hoare reasoning . Considering the proceeding line contained in the program , the variable update statement yielding $ <nat:4> $ as $ <var:t0>$ . This moves the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \} $ toward the postcondition $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is known to be sound through the assignment rule of standard Hoare reasoning . Honing in on the proceeding piece of code in the set of commands , we see the binding command \verb | <var:t1> := <var:t1> * <nat:7> ; | . This moves $ \{ <var:K> = <var:A> \land <var:t1> = <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ to $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . Moving forward , we have the variable assignmet statement \verb | <var:t2> := <var:t2> * <nat:4> ; | . This redefines the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ to the condition $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is shown to be logically sound using the assignment law obtained from Hoare reasoning . Stepping through , we have the binding code \verb | <var:t3> := <var:t3> * <nat:5> ; | . This code redefines $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t3> = <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ toward $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is guaranteed with the assignment inference rule given in typical Hoare logic . Moving forward , the assignment code \verb | <var:e> := <var:t3> | . This line advances the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:t0> = <nat:4> \} $ as $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> \} $ . Further , we have the line \verb | <var:e> := <var:e> + <var:t2> | . This redefines the precondition $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t2> = <nat:4> \cdot <var:A> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> \} $ as the condition $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> \} $ . This is rigorously given with the assignment law found in usual Hoare logic . Paying attention to the following piece of code found in the program , the variable assignmet statement defining $ <var:e> + <var:t1$ as $ <var:e>$ . This statement transfers $ \{ <var:K> = <var:A> \land <var:t1> = <nat:7> \cdot <var:A> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> \} $ as the condition $ \{ <var:K> = <var:A> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:7> \cdot <var:A> \} $ . Moving on to the next step , the variable assignmet line assigning $ <var:e> + <var:t0$ toward $ <var:e>$ . This forwards the condition $ \{ <var:K> = <var:A> \land <var:t0> = <nat:4> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:7> \cdot <var:A> \} $ into the condition $ \{ <var:K> = <var:A> \land <var:e> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:7> \cdot <var:A> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:K> ; <var:t2> := <var:t1> * <var:K> ; <var:t3> := <var:t2> * <var:K> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:4> ; <var:t3> := <var:t3> * <nat:5> ; <var:e> := <var:t3> <var:e> := <var:e> + <var:t2> <var:e> := <var:e> + <var:t1> <var:e> := <var:e> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:K> = <var:A> }} <def:poly> {{ <var:e> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:7> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <var:A> /\ <var:t2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <var:A> /\ <var:t2> = <var:A> ^ <nat:2> /\ <var:t3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <var:A> /\ <var:t2> = <var:A> ^ <nat:2> /\ <var:t3> = <var:A> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <nat:7> * <var:A> /\ <var:t2> = <var:A> ^ <nat:2> /\ <var:t3> = <var:A> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <nat:7> * <var:A> /\ <var:t2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:t3> = <var:A> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <nat:7> * <var:A> /\ <var:t2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:t3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <nat:7> * <var:A> /\ <var:t2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:e> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t1> = <nat:7> * <var:A> /\ <var:t0> = <nat:4> /\ <var:e> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:t0> = <nat:4> /\ <var:e> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:e> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:7> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 