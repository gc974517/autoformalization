\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:e1> := <var:G> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:5> ; <var:m> := <var:e1> <var:m> := <var:m> + <var:e0> \end{verbatim} Assume it to hold that $ <var:G> = <var:n> $ --- given positive numbers $ <var:n> $ --- ahead of evaluating our series of commands , it holds that we have $ <var:m> = <nat:5> \times <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this program can be given with Hoare techniques . After , we see \verb | { <var:G> = <var:n> } <var:e1> := <var:G> { <var:G> = <var:n> \land <var:e1> = <var:n> } | , \verb | { <var:G> = <var:n> \land <var:e1> = <var:n> } <var:e0> := <nat:3> { <var:G> = <var:n> \land <var:e1> = <var:n> \land <var:e0> = <nat:3> } | , \verb | { <var:G> = <var:n> \land <var:e1> = <var:n> \land <var:e0> = <nat:3> } <var:e1> := <var:e1> * <nat:5> { <var:G> = <var:n> \land <var:e1> = <nat:5> \cdot <var:n> \land <var:e0> = <nat:3> } | , \verb | { <var:G> = <var:n> \land <var:e1> = <nat:5> \cdot <var:n> \land <var:e0> = <nat:3> } <var:m> := <var:e1{ <var:G> = <var:n> \land <var:e0> = <nat:3> \land <var:m> = <nat:5> \cdot <var:n> } | and \verb | { <var:G> = <var:n> \land <var:e0> = <nat:3> \land <var:m> = <nat:5> \cdot <var:n> } <var:m> := <var:m> + <var:e0{ <var:G> = <var:n> \land <var:m> = <nat:5> \cdot <var:n> + <nat:3> } | . This is rigorously given through the variable assignmet rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:G> = <var:n> }} <var:e1> := <var:G> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:5> ; <var:m> := <var:e1> <var:m> := <var:m> + <var:e0> {{ <var:m> = <nat:5> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:e1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:e1> = <var:n> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:e1> = <nat:5> * <var:n> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:e0> = <nat:3> /\ <var:m> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:m> = <nat:5> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 