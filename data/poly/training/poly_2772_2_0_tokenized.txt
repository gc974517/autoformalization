\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:9> ; <var:A> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:j> = <var:I> $ before running our set of instructions , then $ <var:A> = <nat:9> $ once set of commands is done executing . \end{theorem} \begin{proof} The course of logic for the set of commands is demonstrated by typical Hoare logic . Advancing to the subsequent piece of code seen in the code segment , we have \begin{eqnarray} \{ <var:j> = <var:I> \} \, <var:C0> := <nat:9> \, \{ <var:j> = <var:I> \land <var:C0> = <nat:9> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:j> = <var:I> \} \, <var:C0> := <nat:9> \, \{ <var:j> = <var:I> \land <var:C0> = <nat:9> \} \end{eqnarray} This is given using the variable binding law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:9> ; <var:A> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <def:poly> {{ <var:A> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:A> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 