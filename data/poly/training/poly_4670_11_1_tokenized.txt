\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:x1> := <var:a> ; <var:x2> := <var:x1> * <var:a> ; <var:x3> := <var:x2> * <var:a> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:2> ; <var:u> := <var:x3> <var:u> := <var:u> + <var:x2> <var:u> := <var:u> + <var:x1> <var:u> := <var:u> + <var:x0> \end{verbatim} Allowing it to hold that $ <var:a> = <var:r> $ prior to executing our code segment then $ <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:a> = <var:r> \} \\ <var:x1> := <var:a> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <var:r> \} \\ <var:x2> := <var:x1> * <var:a> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <var:r> \land <var:x2> = <var:r> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:a> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <var:r> \land <var:x2> = <var:r> ^ <nat:2> \land <var:x3> = <var:r> ^ <nat:3> \} \\ <var:x0> := <nat:7> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <var:r> \land <var:x2> = <var:r> ^ <nat:2> \land <var:x3> = <var:r> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x1> := <var:x1> * <nat:9> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <nat:9> * <var:r> \land <var:x2> = <var:r> ^ <nat:2> \land <var:x3> = <var:r> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x2> := <var:x2> * <nat:5> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <nat:9> * <var:r> \land <var:x2> = <nat:5> * <var:r> ^ <nat:2> \land <var:x3> = <var:r> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:x3> := <var:x3> * <nat:2> ; \\ \{ <var:a> = <var:r> \land <var:x1> = <nat:9> * <var:r> \land <var:x2> = <nat:5> * <var:r> ^ <nat:2> \land <var:x3> = <nat:2> * <var:r> ^ <nat:3> \land <var:x0> = <nat:7> \} \\ <var:u> := <var:x3> \\ \{ <var:a> = <var:r> \land <var:x1> = <nat:9> * <var:r> \land <var:x2> = <nat:5> * <var:r> ^ <nat:2> \land <var:x0> = <nat:7> \land <var:u> = <nat:2> * <var:r> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:x2> \\ \{ <var:a> = <var:r> \land <var:x1> = <nat:9> * <var:r> \land <var:x0> = <nat:7> \land <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:x1> \\ \{ <var:a> = <var:r> \land <var:x0> = <nat:7> \land <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> \} \\ <var:u> := <var:u> + <var:x0> \\ \{ <var:a> = <var:r> \land <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:7> \} \end{eqnarray} Thusly , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <var:x1> := <var:a> ; <var:x2> := <var:x1> * <var:a> ; <var:x3> := <var:x2> * <var:a> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:9> ; <var:x2> := <var:x2> * <nat:5> ; <var:x3> := <var:x3> * <nat:2> ; <var:u> := <var:x3> <var:u> := <var:u> + <var:x2> <var:u> := <var:u> + <var:x1> <var:u> := <var:u> + <var:x0> {{ <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <var:r> /\ <var:x2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <var:r> /\ <var:x2> = <var:r> ^ <nat:2> /\ <var:x3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <var:r> /\ <var:x2> = <var:r> ^ <nat:2> /\ <var:x3> = <var:r> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <nat:9> * <var:r> /\ <var:x2> = <var:r> ^ <nat:2> /\ <var:x3> = <var:r> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <nat:9> * <var:r> /\ <var:x2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:x3> = <var:r> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <nat:9> * <var:r> /\ <var:x2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:r> ^ <nat:3> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <nat:9> * <var:r> /\ <var:x2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:x0> = <nat:7> /\ <var:u> = <nat:2> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x1> = <nat:9> * <var:r> /\ <var:x0> = <nat:7> /\ <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:x0> = <nat:7> /\ <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:u> = <nat:2> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 