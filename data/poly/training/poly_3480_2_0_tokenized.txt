\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:e0> := <nat:3> ; <var:p> := <var:e0> \end{verbatim} Given it to be that $ <var:a> = <var:r> $ prior to executing this set of instructions , it must be that we have $ <var:p> = <nat:3> $ when list of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is shown through Hoare logic . Further , the statement assigning $ <nat:3> $ as $ <var:e0>$ . This advances the condition $ \{ <var:a> = <var:r> \} $ into $ \{ <var:a> = <var:r> \land <var:e0> = <nat:3> \} $ . This is shown using the assignment rule given by Hoare reasoning . Stepping forward , we have the assignment statement defining $ <var:e0$ toward $ <var:p>$ . This transfers the condition $ \{ <var:a> = <var:r> \land <var:e0> = <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:r> \land <var:p> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <var:e0> := <nat:3> ; <var:p> := <var:e0> {{ <var:p> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:p> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 