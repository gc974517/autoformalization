\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:2> ; <var:o> := <var:M0> \end{verbatim} Assuming that we have $ <var:c> = <var:x> $ ahead of interpreting our segment of code , it follows that we have $ <var:o> = <nat:2> $ after code has exited . \end{theorem} \begin{proof} The course of logic for this code is demonstrated with standard Hoare reasoning . Taking a look at the upcoming line seen in the set of instructions , we have \begin{eqnarray} \{ <var:c> = <var:x> \} \, <var:M0> := <nat:2> \, \{ <var:c> = <var:x> \land <var:M0> = <nat:2> \} \end{eqnarray} Jumping to the subsequent statement found in the code , \begin{eqnarray} \{ <var:c> = <var:x> \} \, <var:M0> := <nat:2> \, \{ <var:c> = <var:x> \land <var:M0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:c> = <var:x> }} <var:M0> := <nat:2> ; <var:o> := <var:M0> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 