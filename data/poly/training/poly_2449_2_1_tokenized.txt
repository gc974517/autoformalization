\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:e> := <var:t0> \end{verbatim} Given that we have $ <var:j> = <var:I> $ before running this code segment , it follows that we have $ <var:e> = <nat:3> $ once code segment has exited . \end{theorem} \begin{proof} The method of proof for our program can be shown with typical Hoare reasoning . Focusing on the subsequent line found in our program , \begin{eqnarray} \{ <var:j> = <var:I> \} \, <var:t0> := <nat:3> \, \{ <var:j> = <var:I> \land <var:t0> = <nat:3> \} \end{eqnarray} This is ensured with the binding law found in standard Hoare techniques . Immediately following , we have \begin{eqnarray} \{ <var:j> = <var:I> \} \, <var:t0> := <nat:3> \, \{ <var:j> = <var:I> \land <var:t0> = <nat:3> \} \end{eqnarray} This is guaranteed with the binding rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <var:t0> := <nat:3> ; <var:e> := <var:t0> {{ <var:e> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:e> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 