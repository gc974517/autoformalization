\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:5> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:r> ; <var:g> := <var:Q1> ; <var:g> := <var:g> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:r> = <var:m> $ prior to the evaluation of our segment of code , it holds that $ <var:g> = <nat:2> \times <var:m> + <nat:5> $ after program exits . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:r> = <var:m> \} \\ <var:Q0> := <nat:5> ; \\ \{ <var:r> = <var:m> \land <var:Q0> = <nat:5> \} \\ <var:Q1> := <nat:2> ; \\ \{ <var:r> = <var:m> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:2> \} \\ <var:Q1> := <var:Q1> * <var:r> ; \\ \{ <var:r> = <var:m> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:2> \cdot <var:m> \} \\ <var:g> := <var:Q1> ; \\ \{ <var:r> = <var:m> \land <var:Q0> = <nat:5> \land <var:g> = <nat:2> \cdot <var:m> \} \\ <var:g> := <var:g> + <var:Q0> \\ \{ <var:r> = <var:m> \land <var:g> = <nat:2> \cdot <var:m> + <nat:5> \} \end{eqnarray} Thusly , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:5> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:r> ; <var:g> := <var:Q1> ; <var:g> := <var:g> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:r> = <var:m> }} <def:poly> {{ <var:g> = <nat:2> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:Q0> = <nat:5> /\ <var:g> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:g> = <nat:2> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 