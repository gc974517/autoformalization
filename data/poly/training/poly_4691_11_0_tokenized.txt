\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:1> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:V> ; <var:r2> := <var:r2> * <var:V> ; <var:r3> := <nat:5> ; <var:r3> := <var:r3> * <var:V> ; <var:r3> := <var:r3> * <var:V> ; <var:r3> := <var:r3> * <var:V> ; <var:Y> := <var:r3> ; <var:Y> := <var:Y> + <var:r2> ; <var:Y> := <var:Y> + <var:r0> \end{verbatim} Assume $ <var:V> = <var:j> $ , with some positive integer coefficients $ <var:j> $ , before evaluating this list of instructions , it holds that we see $ <var:Y> = <nat:5> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this segment of code is clear through usual Hoare logic . Observing the subsequent steps found in our code segment , we see \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \\ \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \, <var:r2> := <nat:6> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> \} \\ \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> \} \, <var:r2> := <var:r2> * <var:V> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> * <var:j> \} \\ \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> * <var:j> \} \, <var:r2> := <var:r2> * <var:V> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> * <var:j> ^ <nat:2> \} \\ \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> * <var:j> ^ <nat:2> \} \, <var:r3> := <nat:5> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> * <var:j> ^ <nat:2> \land <var:r3> = <nat:5> \} \end{eqnarray} This is shown through the environment update inference rule found in typical Hoare reasoning . Honing in on the next statements seen in our set of commands , we have \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \\ \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \, <var:r2> := <nat:6> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \land <var:r2> = <nat:6> \} \end{eqnarray} This is deduced by the variable binding inference rule obtained from Hoare logic . Considering the upcoming line of code seen in our set of commands , \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \end{eqnarray} This is given through the variable binding inference rule given in standard Hoare techniques . Observing the proceeding line in our set of commands , \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \end{eqnarray} This is deduced by the variable update rule from Hoare techniques . Jumping to the next command found in our list of instructions , we have \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \end{eqnarray} Stepping forward , we see \begin{eqnarray} \{ <var:V> = <var:j> \} \, <var:r0> := <nat:1> \, \{ <var:V> = <var:j> \land <var:r0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:V> = <var:j> }} <var:r0> := <nat:1> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:V> ; <var:r2> := <var:r2> * <var:V> ; <var:r3> := <nat:5> ; <var:r3> := <var:r3> * <var:V> ; <var:r3> := <var:r3> * <var:V> ; <var:r3> := <var:r3> * <var:V> ; <var:Y> := <var:r3> ; <var:Y> := <var:Y> + <var:r2> ; <var:Y> := <var:Y> + <var:r0> {{ <var:Y> = <nat:5> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:r2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:Y> = <nat:5> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:r0> = <nat:1> /\ <var:Y> = <nat:5> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:j> /\ <var:Y> = <nat:5> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 