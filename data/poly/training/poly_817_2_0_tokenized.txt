\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:5> ; <var:X> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:r> = <var:k> $ prior to the execution of this set of instructions , it holds that $ <var:X> = <nat:5> $ once list of instructions finishes . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:r> = <var:k> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:r> = <var:k> \land <var:A0> = <nat:5> \} \\ <var:X> := <var:A0> \\ \{ <var:r> = <var:k> \land <var:X> = <nat:5> \} \end{eqnarray} Given the preceding argument , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:5> ; <var:X> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <def:poly> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 