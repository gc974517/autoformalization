\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:E1> := <var:x> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:7> ; <var:h> := <var:E1> <var:h> := <var:h> + <var:E0> \end{verbatim} Assume it to be that $ <var:x> = <var:w> $ ahead of the execution of our segment of code it must be that we have $ <var:h> = <nat:7> \times <var:w> + <nat:8> $ once series of instructions exits . \end{theorem} \begin{proof} Let the below decorated code segment . \begin{eqnarray} \{ <var:x> = <var:w> \} \\ <var:E1> := <var:x> ; \\ \{ <var:x> = <var:w> \land <var:E1> = <var:w> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:x> = <var:w> \land <var:E1> = <var:w> \land <var:E0> = <nat:8> \} \\ <var:E1> := <var:E1> * <nat:7> ; \\ \{ <var:x> = <var:w> \land <var:E1> = <nat:7> \cdot <var:w> \land <var:E0> = <nat:8> \} \\ <var:h> := <var:E1> \\ \{ <var:x> = <var:w> \land <var:E0> = <nat:8> \land <var:h> = <nat:7> \cdot <var:w> \} \\ <var:h> := <var:h> + <var:E0> \\ \{ <var:x> = <var:w> \land <var:h> = <nat:7> \cdot <var:w> + <nat:8> \} \end{eqnarray} The application of typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <var:E1> := <var:x> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:7> ; <var:h> := <var:E1> <var:h> := <var:h> + <var:E0> {{ <var:h> = <nat:7> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:E1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:E1> = <var:w> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:E1> = <nat:7> * <var:w> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:E0> = <nat:8> /\ <var:h> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:h> = <nat:7> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 