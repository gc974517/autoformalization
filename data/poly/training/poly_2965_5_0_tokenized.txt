\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:5> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:s> ; <var:O> := <var:z1> ; <var:O> := <var:O> + <var:z0> \end{verbatim} Given it to hold that $ <var:s> = <var:p> $ before interpreting this set of commands , it follows that we have $ <var:O> = <nat:4> \cdot <var:p> + <nat:5> $ when series of commands has exited . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:s> = <var:p> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:s> = <var:p> \land <var:z0> = <nat:5> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:s> = <var:p> \land <var:z0> = <nat:5> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:s> ; \\ \{ <var:s> = <var:p> \land <var:z0> = <nat:5> \land <var:z1> = <nat:4> * <var:p> \} \\ <var:O> := <var:z1> ; \\ \{ <var:s> = <var:p> \land <var:z0> = <nat:5> \land <var:O> = <nat:4> * <var:p> \} \\ <var:O> := <var:O> + <var:z0> \\ \{ <var:s> = <var:p> \land <var:O> = <nat:4> * <var:p> + <nat:5> \} \end{eqnarray} Thusly , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:s> = <var:p> }} <var:z0> := <nat:5> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:s> ; <var:O> := <var:z1> ; <var:O> := <var:O> + <var:z0> {{ <var:O> = <nat:4> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:z0> = <nat:5> /\ <var:O> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:O> = <nat:4> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 