\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:S> ; <var:Q2> := <var:Q1> * <var:S> ; <var:Q3> := <var:Q2> * <var:S> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:2> ; <var:Z> := <var:Q3> <var:Z> := <var:Z> + <var:Q2> <var:Z> := <var:Z> + <var:Q1> <var:Z> := <var:Z> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allow that $ <var:S> = <var:y> $ --- letting whole numbers $ <var:y> $ --- ahead of the execution of our code segment , it holds that we have $ <var:Z> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be demonstrated using Hoare techniques . Next , the line giving $ <var:S> $ into $ <var:Q1>$ . This statement advances the condition $ \{ <var:S> = <var:y> \} $ into $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \} $ . This is shown through the assignment law given by typical Hoare techniques . Moving on , we have the command binding $ <var:Q1> * <var:S> $ as $ <var:Q2>$ . This statement moves $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \} $ as the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \} $ . This is shown by the assignment rule of Hoare reasoning . Immediately after , we have the assignment command \verb | <var:Q3> := <var:Q2> * <var:S> ; | . This command forwards $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \} $ . This is known to be sound using the assignment scheme found in standard Hoare techniques . Moving onward , we see the variable binding statement binding $ <nat:3> $ as $ <var:Q0>$ . This line redefines the precondition $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \} $ as the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ . This is shown with the assignment rule given by standard Hoare logic . Shifting focus toward the proceeding line contained in our program , we have the variable assignmet line assigning $ <var:Q1> * <nat:9> $ as $ <var:Q1>$ . This transfers $ \{ <var:S> = <var:y> \land <var:Q1> = <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ to $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ . This is sound with the assignment scheme from standard Hoare techniques . Looking at the upcoming line seen in the series of commands , the environment update line giving $ <var:Q2> * <nat:5> $ as $ <var:Q2>$ . This advances the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ as the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ . Now , we have the binding line assigning $ <var:Q3> * <nat:2> $ into $ <var:Q3>$ . This line redefines the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q3> = <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ toward the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q3> = <nat:2> \times <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ . This is rigorously given using the assignment inference rule found in usual Hoare techniques . Honing in on the proceeding statement found in our series of commands , we have the code assigning $ <var:Q3$ toward $ <var:Z>$ . This advances the condition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q3> = <nat:2> \times <var:y> ^ <nat:3> \land <var:Q0> = <nat:3> \} $ toward the postcondition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> \} $ . This is deduced by the assignment rule found in standard Hoare techniques . Looking at the following bit of code seen in the code , we see the assignment command \verb | <var:Z> := <var:Z> + <var:Q2> | . This moves $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> \} $ as $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> \} $ . Moving forward to the following line of code found in our series of commands , the binding line \verb | <var:Z> := <var:Z> + <var:Q1> | . This code advances the precondition $ \{ <var:S> = <var:y> \land <var:Q1> = <nat:9> \times <var:y> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:S> = <var:y> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> \} $ . Taking another step toward the next bit of code seen in our series of commands , we see the environment update code \verb | <var:Z> := <var:Z> + <var:Q0> | . This line advances the condition $ \{ <var:S> = <var:y> \land <var:Q0> = <nat:3> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> \} $ to the condition $ \{ <var:S> = <var:y> \land <var:Z> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:S> ; <var:Q2> := <var:Q1> * <var:S> ; <var:Q3> := <var:Q2> * <var:S> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:2> ; <var:Z> := <var:Q3> <var:Z> := <var:Z> + <var:Q2> <var:Z> := <var:Z> + <var:Q1> <var:Z> := <var:Z> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <def:poly> {{ <var:Z> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <var:y> /\ <var:Q2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <var:y> /\ <var:Q2> = <var:y> ^ <nat:2> /\ <var:Q3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <var:y> /\ <var:Q2> = <var:y> ^ <nat:2> /\ <var:Q3> = <var:y> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <nat:9> * <var:y> /\ <var:Q2> = <var:y> ^ <nat:2> /\ <var:Q3> = <var:y> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <nat:9> * <var:y> /\ <var:Q2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:Q3> = <var:y> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <nat:9> * <var:y> /\ <var:Q2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:Q3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <nat:9> * <var:y> /\ <var:Q2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:Q0> = <nat:3> /\ <var:Z> = <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q1> = <nat:9> * <var:y> /\ <var:Q0> = <nat:3> /\ <var:Z> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Q0> = <nat:3> /\ <var:Z> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:Z> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 