\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:7> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:v> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Allowing it to be that $ <var:v> = <var:p> $ before interpreting the code segment , it follows that we have $ <var:Z> = <nat:9> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:7> $ . \end{theorem} \begin{proof} Notice the below decorated list of commands . \begin{eqnarray} \{ <var:v> = <var:p> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \} \\ <var:b1> := <nat:1> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> \} \\ <var:b1> := <var:b1> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> * <var:p> \} \\ <var:b2> := <nat:9> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> * <var:p> \land <var:b2> = <nat:9> \} \\ <var:b2> := <var:b2> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> * <var:p> \land <var:b2> = <nat:9> * <var:p> \} \\ <var:b2> := <var:b2> * <var:v> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> * <var:p> \land <var:b2> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:Z> := <var:b2> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:b1> = <nat:1> * <var:p> \land <var:Z> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:b1> ; \\ \{ <var:v> = <var:p> \land <var:b0> = <nat:7> \land <var:Z> = <nat:9> * <var:p> ^ <nat:2> + <nat:1> * <var:p> \} \\ <var:Z> := <var:Z> + <var:b0> \\ \{ <var:v> = <var:p> \land <var:Z> = <nat:9> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:7> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:v> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:Z> := <var:b2> ; <var:Z> := <var:Z> + <var:b1> ; <var:Z> := <var:Z> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <def:poly> {{ <var:Z> = <nat:9> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> * <var:p> /\ <var:b2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> * <var:p> /\ <var:b2> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> * <var:p> /\ <var:b2> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:1> * <var:p> /\ <var:Z> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:b0> = <nat:7> /\ <var:Z> = <nat:9> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:Z> = <nat:9> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 