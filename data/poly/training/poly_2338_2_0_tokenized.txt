\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:n0> := <nat:2> ; <var:C> := <var:n0> \end{verbatim} Given that $ <var:J> = <var:H> $ before interpreting the set of instructions , it follows that $ <var:C> = <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:J> = <var:H> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:J> = <var:H> \land <var:n0> = <nat:2> \} \\ <var:C> := <var:n0> \\ \{ <var:J> = <var:H> \land <var:C> = <nat:2> \} \end{eqnarray} As a consequence , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:J> = <var:H> }} <var:n0> := <nat:2> ; <var:C> := <var:n0> {{ <var:C> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:C> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 