\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:l1> := <var:M> ; <var:l2> := <var:l1> * <var:M> ; <var:l3> := <var:l2> * <var:M> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:8> ; <var:Z> := <var:l3> <var:Z> := <var:Z> + <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> \end{verbatim} Allowing --- for some $ <var:K> $ --- that we have $ <var:M> = <var:K> $ prior to interpreting our series of instructions it follows that we see $ <var:Z> = <nat:8> \times <var:K> ^ <nat:3> + <nat:9> \times <var:K> ^ <nat:2> + <nat:9> \times <var:K> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic results in : \begin{eqnarray} \{ <var:M> = <var:K> \} \\ <var:l1> := <var:M> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <var:K> \} \\ <var:l2> := <var:l1> * <var:M> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <var:K> \land <var:l2> = <var:K> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:M> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <var:K> \land <var:l2> = <var:K> ^ <nat:2> \land <var:l3> = <var:K> ^ <nat:3> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <var:K> \land <var:l2> = <var:K> ^ <nat:2> \land <var:l3> = <var:K> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:l1> := <var:l1> * <nat:9> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <nat:9> * <var:K> \land <var:l2> = <var:K> ^ <nat:2> \land <var:l3> = <var:K> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:l2> := <var:l2> * <nat:9> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <nat:9> * <var:K> \land <var:l2> = <nat:9> * <var:K> ^ <nat:2> \land <var:l3> = <var:K> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:l3> := <var:l3> * <nat:8> ; \\ \{ <var:M> = <var:K> \land <var:l1> = <nat:9> * <var:K> \land <var:l2> = <nat:9> * <var:K> ^ <nat:2> \land <var:l3> = <nat:8> * <var:K> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:Z> := <var:l3> \\ \{ <var:M> = <var:K> \land <var:l1> = <nat:9> * <var:K> \land <var:l2> = <nat:9> * <var:K> ^ <nat:2> \land <var:l0> = <nat:4> \land <var:Z> = <nat:8> * <var:K> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:l2> \\ \{ <var:M> = <var:K> \land <var:l1> = <nat:9> * <var:K> \land <var:l0> = <nat:4> \land <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:l1> \\ \{ <var:M> = <var:K> \land <var:l0> = <nat:4> \land <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:9> * <var:K> \} \\ <var:Z> := <var:Z> + <var:l0> \\ \{ <var:M> = <var:K> \land <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:9> * <var:K> + <nat:4> \} \end{eqnarray} As a consequence , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:M> = <var:K> }} <var:l1> := <var:M> ; <var:l2> := <var:l1> * <var:M> ; <var:l3> := <var:l2> * <var:M> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:8> ; <var:Z> := <var:l3> <var:Z> := <var:Z> + <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> {{ <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:9> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <var:K> /\ <var:l2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <var:K> /\ <var:l2> = <var:K> ^ <nat:2> /\ <var:l3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <var:K> /\ <var:l2> = <var:K> ^ <nat:2> /\ <var:l3> = <var:K> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <nat:9> * <var:K> /\ <var:l2> = <var:K> ^ <nat:2> /\ <var:l3> = <var:K> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <nat:9> * <var:K> /\ <var:l2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:l3> = <var:K> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <nat:9> * <var:K> /\ <var:l2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <nat:9> * <var:K> /\ <var:l2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:l0> = <nat:4> /\ <var:Z> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l1> = <nat:9> * <var:K> /\ <var:l0> = <nat:4> /\ <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:l0> = <nat:4> /\ <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:Z> = <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:9> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 