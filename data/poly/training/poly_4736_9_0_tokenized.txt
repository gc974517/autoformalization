\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:S> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:S> ; <var:c2> := <var:c2> * <var:S> ; <var:j> := <var:c2> ; <var:j> := <var:j> + <var:c1> ; <var:j> := <var:j> + <var:c0> \end{verbatim} Assuming , given positive numbers $ <var:e> $ , $ <var:S> = <var:e> $ ahead of evaluating the list of instructions , it holds that we have $ <var:j> = <nat:2> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is shown with Hoare logic . Honing in on the next lines of codeseen in our code , we see \begin{verbatim} { <var:S> = <var:e> } <var:c0> := <nat:2> { <var:S> = <var:e> \land <var:c0> = <nat:2> } { <var:S> = <var:e> \land <var:c0> = <nat:2> } <var:c1> := <nat:3> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> } { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> } <var:c1> := <var:c1> * <var:S> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> } { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> } <var:c2> := <nat:2> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> \land <var:c2> = <nat:2> } { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> \land <var:c2> = <nat:2> } <var:c2> := <var:c2> * <var:S> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> \land <var:c2> = <nat:2> * <var:e> } { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> \land <var:c2> = <nat:2> * <var:e> } <var:c2> := <var:c2> * <var:S> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:e> \land <var:c2> = <nat:2> * <var:e> ^ <nat:2> } \end{verbatim} This is given through the variable assignmet rule given by Hoare reasoning . Immediately after , we have \begin{verbatim} { <var:S> = <var:e> } <var:c0> := <nat:2> { <var:S> = <var:e> \land <var:c0> = <nat:2> } { <var:S> = <var:e> \land <var:c0> = <nat:2> } <var:c1> := <nat:3> { <var:S> = <var:e> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> } \end{verbatim} This is shown to be logically sound with the variable binding inference rule obtained from typical Hoare logic . Considering the following statement contained in the program , we have \begin{verbatim} { <var:S> = <var:e> } <var:c0> := <nat:2> { <var:S> = <var:e> \land <var:c0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:S> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:S> ; <var:c2> := <var:c2> * <var:S> ; <var:j> := <var:c2> ; <var:j> := <var:j> + <var:c1> ; <var:j> := <var:j> + <var:c0> {{ <var:j> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:e> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:e> /\ <var:c2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:e> /\ <var:c2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:e> /\ <var:j> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:c0> = <nat:2> /\ <var:j> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:j> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 