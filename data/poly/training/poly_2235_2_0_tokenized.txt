\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:8> ; <var:o> := <var:W0> \end{verbatim} Allowing --- taking positive numbers $ <var:N> $ --- it to be that $ <var:n> = <var:N> $ prior to the execution of the set of commands , it follows that we see $ <var:o> = <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:N> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:n> = <var:N> \land <var:W0> = <nat:8> \} \\ <var:o> := <var:W0> \\ \{ <var:n> = <var:N> \land <var:o> = <nat:8> \} \end{eqnarray} As a result , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:n> = <var:N> }} <var:W0> := <nat:8> ; <var:o> := <var:W0> {{ <var:o> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:N> /\ <var:o> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 