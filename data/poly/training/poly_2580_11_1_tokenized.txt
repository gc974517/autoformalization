\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:K> := <var:Z3> <var:K> := <var:K> + <var:Z2> <var:K> := <var:K> + <var:Z1> <var:K> := <var:K> + <var:Z0> \end{verbatim} Allowing it to be that $ <var:h> = <var:O> $ , for any whole numbers $ <var:O> $ , prior to the evaluation of this list of instructions , it must be that we see $ <var:K> = <nat:6> * <var:O> ^ <nat:3> + <nat:9> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:h> = <var:O> \} \\ <var:Z1> := <var:h> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <var:O> \} \\ <var:Z2> := <var:Z1> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <var:O> \land <var:Z2> = <var:O> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <var:O> \land <var:Z2> = <var:O> ^ <nat:2> \land <var:Z3> = <var:O> ^ <nat:3> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <var:O> \land <var:Z2> = <var:O> ^ <nat:2> \land <var:Z3> = <var:O> ^ <nat:3> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <nat:3> \times <var:O> \land <var:Z2> = <var:O> ^ <nat:2> \land <var:Z3> = <var:O> ^ <nat:3> \land <var:Z0> = <nat:8> \} \\ <var:Z2> := <var:Z2> * <nat:9> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <nat:3> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> ^ <nat:2> \land <var:Z3> = <var:O> ^ <nat:3> \land <var:Z0> = <nat:8> \} \\ <var:Z3> := <var:Z3> * <nat:6> ; \\ \{ <var:h> = <var:O> \land <var:Z1> = <nat:3> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> ^ <nat:2> \land <var:Z3> = <nat:6> \times <var:O> ^ <nat:3> \land <var:Z0> = <nat:8> \} \\ <var:K> := <var:Z3> \\ \{ <var:h> = <var:O> \land <var:Z1> = <nat:3> \times <var:O> \land <var:Z2> = <nat:9> \times <var:O> ^ <nat:2> \land <var:Z0> = <nat:8> \land <var:K> = <nat:6> \times <var:O> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:Z2> \\ \{ <var:h> = <var:O> \land <var:Z1> = <nat:3> \times <var:O> \land <var:Z0> = <nat:8> \land <var:K> = <nat:6> \times <var:O> ^ <nat:3> + <nat:9> \times <var:O> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:Z1> \\ \{ <var:h> = <var:O> \land <var:Z0> = <nat:8> \land <var:K> = <nat:6> \times <var:O> ^ <nat:3> + <nat:9> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> \} \\ <var:K> := <var:K> + <var:Z0> \\ \{ <var:h> = <var:O> \land <var:K> = <nat:6> \times <var:O> ^ <nat:3> + <nat:9> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:8> \} \end{eqnarray} Considering the preceding argument , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:h> = <var:O> }} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:K> := <var:Z3> <var:K> := <var:K> + <var:Z2> <var:K> := <var:K> + <var:Z1> <var:K> := <var:K> + <var:Z0> {{ <var:K> = <nat:6> * <var:O> ^ <nat:3> + <nat:9> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <var:O> /\ <var:Z2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <var:O> /\ <var:Z2> = <var:O> ^ <nat:2> /\ <var:Z3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <var:O> /\ <var:Z2> = <var:O> ^ <nat:2> /\ <var:Z3> = <var:O> ^ <nat:3> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <nat:3> * <var:O> /\ <var:Z2> = <var:O> ^ <nat:2> /\ <var:Z3> = <var:O> ^ <nat:3> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <nat:3> * <var:O> /\ <var:Z2> = <nat:9> * <var:O> ^ <nat:2> /\ <var:Z3> = <var:O> ^ <nat:3> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <nat:3> * <var:O> /\ <var:Z2> = <nat:9> * <var:O> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:O> ^ <nat:3> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <nat:3> * <var:O> /\ <var:Z2> = <nat:9> * <var:O> ^ <nat:2> /\ <var:Z0> = <nat:8> /\ <var:K> = <nat:6> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z1> = <nat:3> * <var:O> /\ <var:Z0> = <nat:8> /\ <var:K> = <nat:6> * <var:O> ^ <nat:3> + <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:Z0> = <nat:8> /\ <var:K> = <nat:6> * <var:O> ^ <nat:3> + <nat:9> * <var:O> ^ <nat:2> + <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:K> = <nat:6> * <var:O> ^ <nat:3> + <nat:9> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 