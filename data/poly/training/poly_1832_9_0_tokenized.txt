\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:n> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:n> ; <var:a2> := <var:a2> * <var:n> ; <var:z> := <var:a2> ; <var:z> := <var:z> + <var:a1> ; <var:z> := <var:z> + <var:a0> \end{verbatim} Allow $ <var:n> = <var:j> $ ( with some natural numbers $ <var:j> $ ) ahead of running our set of instructions , it holds that $ <var:z> = <nat:7> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:8> $ . \end{theorem} \begin{proof} The argument for our code segment can be done using usual Hoare logic . Advancing on , we have \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } \end{verbatim} This is sound with the variable binding inference rule given in typical Hoare logic . Now , we have \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } { <var:n> = <var:j> \land <var:a0> = <nat:8> } <var:a1> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> } \end{verbatim} Further , we have \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } { <var:n> = <var:j> \land <var:a0> = <nat:8> } <var:a1> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> } \end{verbatim} Taking another step toward the following statements contained in our code , we have \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } { <var:n> = <var:j> \land <var:a0> = <nat:8> } <var:a1> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> } \end{verbatim} Further , \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } \end{verbatim} Stepping forward , we see \begin{verbatim} { <var:n> = <var:j> } <var:a0> := <nat:8> { <var:n> = <var:j> \land <var:a0> = <nat:8> } \end{verbatim} This is known to be sound by the law obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:n> ; <var:a2> := <nat:7> ; <var:a2> := <var:a2> * <var:n> ; <var:a2> := <var:a2> * <var:n> ; <var:z> := <var:a2> ; <var:z> := <var:z> + <var:a1> ; <var:z> := <var:z> + <var:a0> {{ <var:z> = <nat:7> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:j> /\ <var:a2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:j> /\ <var:a2> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:j> /\ <var:a2> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:j> /\ <var:z> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:a0> = <nat:8> /\ <var:z> = <nat:7> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:z> = <nat:7> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 