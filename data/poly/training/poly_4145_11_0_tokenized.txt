\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:7> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:M> ; <var:t2> := <var:t2> * <var:M> ; <var:t3> := <nat:3> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:N> := <var:t3> ; <var:N> := <var:N> + <var:t2> ; <var:N> := <var:N> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allow that $ <var:M> = <var:v> $ , given all $ <var:v> $ , ahead of executing our set of instructions , then $ <var:N> = <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:7> $ once series of instructions has exited . \end{theorem} \begin{proof} Observe that the below decorated list of commands . \begin{eqnarray} \{ <var:M> = <var:v> \} \\ <var:t0> := <nat:7> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \} \\ <var:t2> := <nat:4> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \} \\ <var:t2> := <var:t2> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> \} \\ <var:t2> := <var:t2> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \} \\ <var:t3> := <nat:3> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <nat:3> \} \\ <var:t3> := <var:t3> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <nat:3> \cdot <var:v> \} \\ <var:t3> := <var:t3> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <nat:3> \cdot <var:v> ^ <nat:2> \} \\ <var:t3> := <var:t3> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:t3> = <nat:3> \cdot <var:v> ^ <nat:3> \} \\ <var:N> := <var:t3> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:t2> = <nat:4> \cdot <var:v> ^ <nat:2> \land <var:N> = <nat:3> \cdot <var:v> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:t2> ; \\ \{ <var:M> = <var:v> \land <var:t0> = <nat:7> \land <var:N> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:t0> \\ \{ <var:M> = <var:v> \land <var:N> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:7> \} \end{eqnarray} The application of usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:t2> := <nat:4> ; <var:t2> := <var:t2> * <var:M> ; <var:t2> := <var:t2> * <var:M> ; <var:t3> := <nat:3> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:t3> := <var:t3> * <var:M> ; <var:N> := <var:t3> ; <var:N> := <var:N> + <var:t2> ; <var:N> := <var:N> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:M> = <var:v> }} <def:poly> {{ <var:N> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:t2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:N> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:t0> = <nat:7> /\ <var:N> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:N> = <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 