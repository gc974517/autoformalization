\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:7> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:Y> ; <var:Q> := <var:n1> ; <var:Q> := <var:Q> + <var:n0> \end{verbatim} Assuming that $ <var:Y> = <var:N> $ before executing the series of commands , it follows that we see $ <var:Q> = <nat:9> \times <var:N> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for this set of commands is shown using typical Hoare logic . Moving onward , the code \verb | <var:n0> := <nat:7> ; | . This statement redefines the precondition $ \{ <var:Y> = <var:N> \} $ into $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \} $ . This is deduced through the assignment scheme given in standard Hoare reasoning . Taking a look at the next bit of code in our code segment , the command \verb | <var:n1> := <nat:9> ; | . This code takes the precondition $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \} $ as the postcondition $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:n1> = <nat:9> \} $ . This is known to be sound with the assignment law in usual Hoare techniques . Looking at the next step in our set of commands , we see the environment update code \verb | <var:n1> := <var:n1> * <var:Y> ; | . This moves $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:n1> = <nat:9> \} $ to $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:n1> = <nat:9> \cdot <var:N> \} $ . This is guaranteed using the assignment rule of standard Hoare logic . Taking a look at the subsequent statement found in our series of commands , the environment update code letting $ <var:n1> $ as $ <var:Q>$ . This line takes the condition $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:n1> = <nat:9> \cdot <var:N> \} $ toward the condition $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:Q> = <nat:9> \cdot <var:N> \} $ . Next , the assignment statement giving $ <var:Q> + <var:n0$ into $ <var:Q>$ . This line takes the condition $ \{ <var:Y> = <var:N> \land <var:n0> = <nat:7> \land <var:Q> = <nat:9> \cdot <var:N> \} $ toward the condition $ \{ <var:Y> = <var:N> \land <var:Q> = <nat:9> \cdot <var:N> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <var:n0> := <nat:7> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:Y> ; <var:Q> := <var:n1> ; <var:Q> := <var:Q> + <var:n0> {{ <var:Q> = <nat:9> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:n0> = <nat:7> /\ <var:Q> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:Q> = <nat:9> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 