\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <var:P> * <var:x> ; <var:P> := <nat:2> + <var:P> * <var:x> \end{verbatim} Allowing that $ <var:x> = <var:O> $ , letting positive integer coefficients $ <var:O> $ , ahead of running this list of commands , it holds that we see $ <var:P> = <nat:2> \times <var:O> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:x> = <var:O> \} \\ <var:P> := <nat:2> ; \\ \{ <var:x> = <var:O> \land <var:P> = <nat:2> \} \\ <var:P> := <var:P> * <var:x> ; \\ \{ <var:x> = <var:O> \land <var:P> = <nat:2> * <var:O> + \} \\ <var:P> := <nat:2> + <var:P> * <var:x> \\ \{ <var:x> = <var:O> \land <var:P> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <var:P> := <nat:2> ; <var:P> := <var:P> * <var:x> ; <var:P> := <nat:2> + <var:P> * <var:x> {{ <var:P> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:P> = <nat:2> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:P> = <nat:2> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 