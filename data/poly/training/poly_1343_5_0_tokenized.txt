\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:d> ; <var:N> := <var:m1> ; <var:N> := <var:N> + <var:m0> \end{verbatim} Assuming ( given any $ <var:z> \in \mathbb{Z}^+ $ ) that $ <var:d> = <var:z> $ prior to executing the code , it follows that we see $ <var:N> = <nat:3> * <var:z> + <nat:7> $ after series of instructions terminates . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be accomplished using typical Hoare logic . Immediately after , the binding statement assigning $ <nat:7> $ to $ <var:m0>$ . This transfers the precondition $ \{ <var:d> = <var:z> \} $ into $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \} $ . This is shown to be logically sound with the assignment inference rule found in standard Hoare reasoning . Paying attention to the subsequent line of code seen in the set of commands , we have the variable assignmet command \verb | <var:m1> := <nat:3> ; | . This line transfers the condition $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \} $ into $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:m1> = <nat:3> \} $ . This is rigorously given through the assignment inference rule given by typical Hoare reasoning . Next , we have the variable binding command \verb | <var:m1> := <var:m1> * <var:d> ; | . This command moves the condition $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:m1> = <nat:3> \} $ as $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:m1> = <nat:3> \cdot <var:z> \} $ . This is deduced with the assignment law given by typical Hoare logic . Jumping to the upcoming step in our list of commands , the line \verb | <var:N> := <var:m1> ; | . This advances the condition $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:m1> = <nat:3> \cdot <var:z> \} $ to the condition $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:N> = <nat:3> \cdot <var:z> \} $ . Moving on , we see the environment update line \verb | <var:N> := <var:N> + <var:m0> | . This moves the precondition $ \{ <var:d> = <var:z> \land <var:m0> = <nat:7> \land <var:N> = <nat:3> \cdot <var:z> \} $ into the condition $ \{ <var:d> = <var:z> \land <var:N> = <nat:3> \cdot <var:z> + <nat:7> \} $ . This is known to be sound with the assignment inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:d> = <var:z> }} <var:m0> := <nat:7> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:d> ; <var:N> := <var:m1> ; <var:N> := <var:N> + <var:m0> {{ <var:N> = <nat:3> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:m0> = <nat:7> /\ <var:N> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:N> = <nat:3> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 