\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:t1> := <var:d> ; <var:t2> := <var:t1> * <var:d> ; <var:t3> := <var:t2> * <var:d> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:6> ; <var:t3> := <var:t3> * <nat:4> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> \end{verbatim} Given , for every natural coefficients $ <var:U> $ , that we have $ <var:d> = <var:U> $ ahead of the execution of the set of instructions , then $ <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:d> = <var:U> \} \\ <var:t1> := <var:d> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <var:U> \} \\ <var:t2> := <var:t1> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <var:U> \land <var:t2> = <var:U> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <var:U> \land <var:t2> = <var:U> ^ <nat:2> \land <var:t3> = <var:U> ^ <nat:3> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <var:U> \land <var:t2> = <var:U> ^ <nat:2> \land <var:t3> = <var:U> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t1> := <var:t1> * <nat:9> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <nat:9> * <var:U> \land <var:t2> = <var:U> ^ <nat:2> \land <var:t3> = <var:U> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t2> := <var:t2> * <nat:6> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <nat:9> * <var:U> \land <var:t2> = <nat:6> * <var:U> ^ <nat:2> \land <var:t3> = <var:U> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:t3> := <var:t3> * <nat:4> ; \\ \{ <var:d> = <var:U> \land <var:t1> = <nat:9> * <var:U> \land <var:t2> = <nat:6> * <var:U> ^ <nat:2> \land <var:t3> = <nat:4> * <var:U> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ <var:m> := <var:t3> \\ \{ <var:d> = <var:U> \land <var:t1> = <nat:9> * <var:U> \land <var:t2> = <nat:6> * <var:U> ^ <nat:2> \land <var:t0> = <nat:2> \land <var:m> = <nat:4> * <var:U> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:t2> \\ \{ <var:d> = <var:U> \land <var:t1> = <nat:9> * <var:U> \land <var:t0> = <nat:2> \land <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:t1> \\ \{ <var:d> = <var:U> \land <var:t0> = <nat:2> \land <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> \} \\ <var:m> := <var:m> + <var:t0> \\ \{ <var:d> = <var:U> \land <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:2> \} \end{eqnarray} Considering the preceding argument , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <var:t1> := <var:d> ; <var:t2> := <var:t1> * <var:d> ; <var:t3> := <var:t2> * <var:d> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:6> ; <var:t3> := <var:t3> * <nat:4> ; <var:m> := <var:t3> <var:m> := <var:m> + <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> {{ <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <var:U> /\ <var:t2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <var:U> /\ <var:t2> = <var:U> ^ <nat:2> /\ <var:t3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <var:U> /\ <var:t2> = <var:U> ^ <nat:2> /\ <var:t3> = <var:U> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <nat:9> * <var:U> /\ <var:t2> = <var:U> ^ <nat:2> /\ <var:t3> = <var:U> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <nat:9> * <var:U> /\ <var:t2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:t3> = <var:U> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <nat:9> * <var:U> /\ <var:t2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <nat:9> * <var:U> /\ <var:t2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:t0> = <nat:2> /\ <var:m> = <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t1> = <nat:9> * <var:U> /\ <var:t0> = <nat:2> /\ <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:t0> = <nat:2> /\ <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:4> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 