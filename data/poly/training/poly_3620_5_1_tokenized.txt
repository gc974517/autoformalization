\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:B> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:1> ; <var:y> := <var:q1> <var:y> := <var:y> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:B> = <var:j> $ , given all $ <var:j> \in \mathbb{Z}^+ $ , ahead of executing our code , it follows that $ <var:y> = <nat:1> \times <var:j> + <nat:3> $ when set of commands has terminated . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:B> = <var:j> \} \\ <var:q1> := <var:B> ; \\ \{ <var:B> = <var:j> \land <var:q1> = <var:j> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:B> = <var:j> \land <var:q1> = <var:j> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:1> ; \\ \{ <var:B> = <var:j> \land <var:q1> = <nat:1> \cdot <var:j> \land <var:q0> = <nat:3> \} \\ <var:y> := <var:q1> \\ \{ <var:B> = <var:j> \land <var:q0> = <nat:3> \land <var:y> = <nat:1> \cdot <var:j> \} \\ <var:y> := <var:y> + <var:q0> \\ \{ <var:B> = <var:j> \land <var:y> = <nat:1> \cdot <var:j> + <nat:3> \} \end{eqnarray} Thus , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:B> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:1> ; <var:y> := <var:q1> <var:y> := <var:y> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:B> = <var:j> }} <def:poly> {{ <var:y> = <nat:1> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:q1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:q1> = <var:j> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:q1> = <nat:1> * <var:j> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:q0> = <nat:3> /\ <var:y> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:y> = <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 