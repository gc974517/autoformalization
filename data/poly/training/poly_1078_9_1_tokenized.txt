\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:i1> := <var:X> ; <var:i2> := <var:i1> * <var:X> ; <var:i3> := <var:i2> * <var:X> ; <var:i0> := <nat:7> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:9> ; <var:d> := <var:i3> <var:d> := <var:d> + <var:i2> <var:d> := <var:d> + <var:i0> \end{verbatim} Assume that we have $ <var:X> = <var:W> $ ( given every positive coefficients $ <var:W> $ ) prior to executing the program , it follows that we have $ <var:d> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:W> \} \\ <var:i1> := <var:X> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \} \\ <var:i2> := <var:i1> * <var:X> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <var:W> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:X> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <var:W> ^ <nat:2> \land <var:i3> = <var:W> ^ <nat:3> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <var:W> ^ <nat:2> \land <var:i3> = <var:W> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:i2> := <var:i2> * <nat:2> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <nat:2> * <var:W> ^ <nat:2> \land <var:i3> = <var:W> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:i3> := <var:i3> * <nat:9> ; \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <nat:2> * <var:W> ^ <nat:2> \land <var:i3> = <nat:9> * <var:W> ^ <nat:3> \land <var:i0> = <nat:7> \} \\ <var:d> := <var:i3> \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i2> = <nat:2> * <var:W> ^ <nat:2> \land <var:i0> = <nat:7> \land <var:d> = <nat:9> * <var:W> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:i2> \\ \{ <var:X> = <var:W> \land <var:i1> = <var:W> \land <var:i0> = <nat:7> \land <var:d> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:i0> \\ \{ <var:X> = <var:W> \land <var:d> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:X> = <var:W> }} <var:i1> := <var:X> ; <var:i2> := <var:i1> * <var:X> ; <var:i3> := <var:i2> * <var:X> ; <var:i0> := <nat:7> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:9> ; <var:d> := <var:i3> <var:d> := <var:d> + <var:i2> <var:d> := <var:d> + <var:i0> {{ <var:d> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <var:W> ^ <nat:2> /\ <var:i3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <var:W> ^ <nat:2> /\ <var:i3> = <var:W> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:i3> = <var:W> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:i3> = <nat:9> * <var:W> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:i0> = <nat:7> /\ <var:d> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:i1> = <var:W> /\ <var:i0> = <nat:7> /\ <var:d> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:d> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 