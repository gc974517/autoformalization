\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:J> ; <var:H> := <var:A1> ; <var:H> := <var:H> + <var:A0> \end{verbatim} Allow $ <var:J> = <var:a> $ ( letting positive coefficients $ <var:a> $ ) prior to executing this code segment it holds that we have $ <var:H> = <nat:4> \cdot <var:a> + <nat:4> $ when list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:a> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:J> = <var:a> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:4> ; \\ \{ <var:J> = <var:a> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> \} \\ <var:A1> := <var:A1> * <var:J> ; \\ \{ <var:J> = <var:a> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:a> \} \\ <var:H> := <var:A1> ; \\ \{ <var:J> = <var:a> \land <var:A0> = <nat:4> \land <var:H> = <nat:4> * <var:a> \} \\ <var:H> := <var:H> + <var:A0> \\ \{ <var:J> = <var:a> \land <var:H> = <nat:4> * <var:a> + <nat:4> \} \end{eqnarray} Applying Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:J> = <var:a> }} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:J> ; <var:H> := <var:A1> ; <var:H> := <var:H> + <var:A0> {{ <var:H> = <nat:4> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:A0> = <nat:4> /\ <var:H> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:H> = <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 