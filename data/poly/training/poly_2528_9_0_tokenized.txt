\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:x> := <var:J2> ; <var:x> := <var:x> + <var:J1> ; <var:x> := <var:x> + <var:J0> \end{verbatim} Allowing it to be that $ <var:O> = <var:W> $ ( for some positive coefficients $ <var:W> $ ) prior to the execution of our program , it holds that $ <var:x> = <nat:9> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be seen by typical Hoare techniques . Going forward , \begin{verbatim} { <var:O> = <var:W> } <var:J0> := <nat:1> { <var:O> = <var:W> \land <var:J0> = <nat:1> } { <var:O> = <var:W> \land <var:J0> = <nat:1> } <var:J1> := <nat:5> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> } { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> } <var:J1> := <var:J1> * <var:O> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> } { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> } <var:J2> := <nat:9> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> \land <var:J2> = <nat:9> } { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> \land <var:J2> = <nat:9> } <var:J2> := <var:J2> * <var:O> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> \land <var:J2> = <nat:9> \cdot <var:W> } \end{verbatim} This is shown to be logically sound with the variable update rule defined in Hoare reasoning . Paying attention to the next steps contained in the list of instructions , \begin{verbatim} { <var:O> = <var:W> } <var:J0> := <nat:1> { <var:O> = <var:W> \land <var:J0> = <nat:1> } { <var:O> = <var:W> \land <var:J0> = <nat:1> } <var:J1> := <nat:5> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> } { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> } <var:J1> := <var:J1> * <var:O> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> } { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> } <var:J2> := <nat:9> { <var:O> = <var:W> \land <var:J0> = <nat:1> \land <var:J1> = <nat:5> \cdot <var:W> \land <var:J2> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:J0> := <nat:1> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:O> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:O> ; <var:J2> := <var:J2> * <var:O> ; <var:x> := <var:J2> ; <var:x> := <var:x> + <var:J1> ; <var:x> := <var:x> + <var:J0> {{ <var:x> = <nat:9> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:W> /\ <var:J2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:W> /\ <var:J2> = <nat:9> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:W> /\ <var:J2> = <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:5> * <var:W> /\ <var:x> = <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:J0> = <nat:1> /\ <var:x> = <nat:9> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:x> = <nat:9> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 