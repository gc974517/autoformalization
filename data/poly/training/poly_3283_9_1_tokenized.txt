\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:T> ; <var:e2> := <var:e1> * <var:T> ; <var:e3> := <var:e2> * <var:T> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:4> ; <var:e3> := <var:e3> * <nat:5> ; <var:h> := <var:e3> <var:h> := <var:h> + <var:e1> <var:h> := <var:h> + <var:e0> \end{verbatim} Allowing that we have $ <var:T> = <var:Z> $ ahead of evaluating our set of instructions it follows that $ <var:h> = <nat:5> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:4> $ after code has executed . \end{theorem} \begin{proof} The method of proof for our list of commands can be given through standard Hoare logic . Moving on to the following bits of codein our code segment , \begin{verbatim} { <var:T> = <var:Z> } <var:e1> := <var:T> { <var:T> = <var:Z> \land <var:e1> = <var:Z> } { <var:T> = <var:Z> \land <var:e1> = <var:Z> } <var:e2> := <var:e1> * <var:T> { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> } { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> } <var:e3> := <var:e2> * <var:T> { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> } { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> } <var:e0> := <nat:4> { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } { <var:T> = <var:Z> \land <var:e1> = <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } <var:e1> := <var:e1> * <nat:4> { <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } { <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } <var:e3> := <var:e3> * <nat:5> { <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <nat:5> \cdot <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } { <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e3> = <nat:5> \cdot <var:Z> ^ <nat:3> \land <var:e0> = <nat:4> } <var:h> := <var:e3{ <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e0> = <nat:4> \land <var:h> = <nat:5> \cdot <var:Z> ^ <nat:3> } { <var:T> = <var:Z> \land <var:e1> = <nat:4> \cdot <var:Z> \land <var:e2> = <var:Z> ^ <nat:2> \land <var:e0> = <nat:4> \land <var:h> = <nat:5> \cdot <var:Z> ^ <nat:3> } <var:h> := <var:h> + <var:e1{ <var:T> = <var:Z> \land <var:e0> = <nat:4> \land <var:h> = <nat:5> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> } \end{verbatim} This is sound by the variable assignmet rule obtained from standard Hoare reasoning . Moving on to the next step , we have \begin{verbatim} { <var:T> = <var:Z> } <var:e1> := <var:T> { <var:T> = <var:Z> \land <var:e1> = <var:Z> } \end{verbatim} This is deduced with the variable binding rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:e1> := <var:T> ; <var:e2> := <var:e1> * <var:T> ; <var:e3> := <var:e2> * <var:T> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:4> ; <var:e3> := <var:e3> * <nat:5> ; <var:h> := <var:e3> <var:h> := <var:h> + <var:e1> <var:h> := <var:h> + <var:e0> {{ <var:h> = <nat:5> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> /\ <var:e3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> /\ <var:e3> = <var:Z> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <nat:4> * <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> /\ <var:e3> = <var:Z> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <nat:4> * <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> /\ <var:e3> = <nat:5> * <var:Z> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e1> = <nat:4> * <var:Z> /\ <var:e2> = <var:Z> ^ <nat:2> /\ <var:e0> = <nat:4> /\ <var:h> = <nat:5> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:e0> = <nat:4> /\ <var:h> = <nat:5> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:h> = <nat:5> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 