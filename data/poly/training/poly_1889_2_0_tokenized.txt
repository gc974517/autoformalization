\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:5> ; <var:Q> := <var:c0> \end{verbatim} Assume that $ <var:B> = <var:f> $ before interpreting the code , then we have $ <var:Q> = <nat:5> $ after list of commands has exited . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:B> = <var:f> \} \\ <var:c0> := <nat:5> ; \\ \{ <var:B> = <var:f> \land <var:c0> = <nat:5> \} \\ <var:Q> := <var:c0> \\ \{ <var:B> = <var:f> \land <var:Q> = <nat:5> \} \end{eqnarray} Given the above , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:B> = <var:f> }} <var:c0> := <nat:5> ; <var:Q> := <var:c0> {{ <var:Q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:Q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 