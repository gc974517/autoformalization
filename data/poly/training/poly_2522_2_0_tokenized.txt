\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:N0> := <nat:7> ; <var:X> := <var:N0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:I> $ prior to running this series of commands it follows that $ <var:X> = <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be given by Hoare logic . Looking at the subsequent line contained in the set of instructions , we see the assignment command defining $ <nat:7> $ toward $ <var:N0>$ . This code transfers the precondition $ \{ <var:E> = <var:I> \} $ as $ \{ <var:E> = <var:I> \land <var:N0> = <nat:7> \} $ . Honing in on the proceeding piece of code in the program , we see the statement letting $ <var:N0$ into $ <var:X>$ . This statement takes $ \{ <var:E> = <var:I> \land <var:N0> = <nat:7> \} $ to $ \{ <var:E> = <var:I> \land <var:X> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <var:N0> := <nat:7> ; <var:X> := <var:N0> {{ <var:X> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:X> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 