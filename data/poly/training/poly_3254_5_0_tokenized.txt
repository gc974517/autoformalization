\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:N> ; <var:b> := <var:c1> ; <var:b> := <var:b> + <var:c0> \end{verbatim} Allow $ <var:N> = <var:T> $ before executing this series of instructions it follows that $ <var:b> = <nat:4> \cdot <var:T> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:T> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:N> = <var:T> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:N> = <var:T> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:N> ; \\ \{ <var:N> = <var:T> \land <var:c0> = <nat:3> \land <var:c1> = <nat:4> * <var:T> \} \\ <var:b> := <var:c1> ; \\ \{ <var:N> = <var:T> \land <var:c0> = <nat:3> \land <var:b> = <nat:4> * <var:T> \} \\ <var:b> := <var:b> + <var:c0> \\ \{ <var:N> = <var:T> \land <var:b> = <nat:4> * <var:T> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:N> = <var:T> }} <var:c0> := <nat:3> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:N> ; <var:b> := <var:c1> ; <var:b> := <var:b> + <var:c0> {{ <var:b> = <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:c0> = <nat:3> /\ <var:b> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:T> /\ <var:b> = <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 