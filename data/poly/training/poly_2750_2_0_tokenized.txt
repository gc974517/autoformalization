\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:2> ; <var:k> := <var:O0> \end{verbatim} Given ( letting whole numbers $ <var:s> $ ) that we have $ <var:n> = <var:s> $ ahead of the evaluation of this code , then we see $ <var:k> = <nat:2> $ after list of commands is done executing . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:s> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:n> = <var:s> \land <var:O0> = <nat:2> \} \\ <var:k> := <var:O0> \\ \{ <var:n> = <var:s> \land <var:k> = <nat:2> \} \end{eqnarray} Considering the above , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:n> = <var:s> }} <var:O0> := <nat:2> ; <var:k> := <var:O0> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:s> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:s> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 