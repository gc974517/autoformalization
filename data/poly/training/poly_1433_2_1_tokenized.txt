\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:9> ; <var:D> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assume letting $ <var:F> \in \mathbb{N} $ that we have $ <var:j> = <var:F> $ before the evaluation of this list of commands then we have $ <var:D> = <nat:9> $ once code segment has finished . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:j> = <var:F> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:j> = <var:F> \land <var:p0> = <nat:9> \} \\ <var:D> := <var:p0> \\ \{ <var:j> = <var:F> \land <var:D> = <nat:9> \} \end{eqnarray} As a result , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:9> ; <var:D> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:j> = <var:F> }} <def:poly> {{ <var:D> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:F> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:F> /\ <var:D> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 