\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:z1> := <var:c> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:6> ; <var:Z> := <var:z1> <var:Z> := <var:Z> + <var:z0> \end{verbatim} Assuming that $ <var:c> = <var:Y> $ ahead of executing our set of commands it follows that we see $ <var:Z> = <nat:6> * <var:Y> + <nat:2> $ after series of commands finishes . \end{theorem} \begin{proof} The course of logic for our list of commands is evident with Hoare reasoning . Considering the next line of code seen in our series of instructions , \begin{eqnarray} \{ <var:c> = <var:Y> \} \, <var:z1> := <var:c> \, \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \} \end{eqnarray} Jumping to the proceeding lines of codefound in the set of instructions , we have \begin{eqnarray} \{ <var:c> = <var:Y> \} \, <var:z1> := <var:c> \, \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \} \\ \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \} \, <var:z0> := <nat:2> \, \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \land <var:z0> = <nat:2> \} \end{eqnarray} Looking at the upcoming commands contained in our code segment , \begin{eqnarray} \{ <var:c> = <var:Y> \} \, <var:z1> := <var:c> \, \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \} \\ \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \} \, <var:z0> := <nat:2> \, \{ <var:c> = <var:Y> \land <var:z1> = <var:Y> \land <var:z0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:c> = <var:Y> }} <var:z1> := <var:c> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:6> ; <var:Z> := <var:z1> <var:Z> := <var:Z> + <var:z0> {{ <var:Z> = <nat:6> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:z1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:z1> = <nat:6> * <var:Y> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:z0> = <nat:2> /\ <var:Z> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Y> /\ <var:Z> = <nat:6> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 