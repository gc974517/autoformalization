\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:E1> := <var:p> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:Y> := <var:E1> <var:Y> := <var:Y> + <var:E0> \end{verbatim} Allowing $ <var:p> = <var:c> $ before evaluating our set of commands it holds that we see $ <var:Y> = <nat:4> \times <var:c> + <nat:1> $ . \end{theorem} \begin{proof} Notice the following decorated list of instructions . \begin{eqnarray} \{ <var:p> = <var:c> \} \\ <var:E1> := <var:p> ; \\ \{ <var:p> = <var:c> \land <var:E1> = <var:c> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:p> = <var:c> \land <var:E1> = <var:c> \land <var:E0> = <nat:1> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:p> = <var:c> \land <var:E1> = <nat:4> \times <var:c> \land <var:E0> = <nat:1> \} \\ <var:Y> := <var:E1> \\ \{ <var:p> = <var:c> \land <var:E0> = <nat:1> \land <var:Y> = <nat:4> \times <var:c> \} \\ <var:Y> := <var:Y> + <var:E0> \\ \{ <var:p> = <var:c> \land <var:Y> = <nat:4> \times <var:c> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <var:E1> := <var:p> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:Y> := <var:E1> <var:Y> := <var:Y> + <var:E0> {{ <var:Y> = <nat:4> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:E1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:E1> = <var:c> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:E1> = <nat:4> * <var:c> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:E0> = <nat:1> /\ <var:Y> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:Y> = <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 