\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:l1> := <var:U> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:9> ; <var:W> := <var:l1> <var:W> := <var:W> + <var:l0> \end{verbatim} Assume that $ <var:U> = <var:b> $ before interpreting the program it follows that we have $ <var:W> = <nat:9> \times <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our code segment is evident using Hoare reasoning . Moving onward , we have \verb | { <var:U> = <var:b> } <var:l1> := <var:U> { <var:U> = <var:b> \land <var:l1> = <var:b> } | , \verb | { <var:U> = <var:b> \land <var:l1> = <var:b> } <var:l0> := <nat:4> { <var:U> = <var:b> \land <var:l1> = <var:b> \land <var:l0> = <nat:4> } | , \verb | { <var:U> = <var:b> \land <var:l1> = <var:b> \land <var:l0> = <nat:4> } <var:l1> := <var:l1> * <nat:9> { <var:U> = <var:b> \land <var:l1> = <nat:9> \times <var:b> \land <var:l0> = <nat:4> } | , \verb | { <var:U> = <var:b> \land <var:l1> = <nat:9> \times <var:b> \land <var:l0> = <nat:4> } <var:W> := <var:l1{ <var:U> = <var:b> \land <var:l0> = <nat:4> \land <var:W> = <nat:9> \times <var:b> } | and \verb | { <var:U> = <var:b> \land <var:l0> = <nat:4> \land <var:W> = <nat:9> \times <var:b> } <var:W> := <var:W> + <var:l0{ <var:U> = <var:b> \land <var:W> = <nat:9> \times <var:b> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:U> = <var:b> }} <var:l1> := <var:U> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:9> ; <var:W> := <var:l1> <var:W> := <var:W> + <var:l0> {{ <var:W> = <nat:9> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:l1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:l1> = <var:b> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:l1> = <nat:9> * <var:b> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:l0> = <nat:4> /\ <var:W> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:W> = <nat:9> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 