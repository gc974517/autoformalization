\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> \end{verbatim} Allow --- letting $ <var:C> \in \mathbb{N} $ --- it to be that $ <var:d> = <var:C> $ ahead of running our list of instructions , it must be that $ <var:G> = <nat:1> \cdot <var:C> ^ <nat:4> + <nat:2> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:4> $ after series of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is shown through standard Hoare logic . Shifting focus toward the next piece of code seen in the code , the variable binding command \verb | <var:G> := <nat:1> ; | . This forwards the condition $ \{ <var:d> = <var:C> \} $ toward the postcondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \} $ . Considering the proceeding command contained in our list of instructions , we see the variable update line assigning $ <nat:2> + <var:G> * <var:d> $ into $ <var:G>$ . This code transfers the precondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \} $ as the postcondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> + <nat:2> \} $ . Taking another step toward the following command found in the code , the variable update command \verb | <var:G> := <nat:4> + <var:G> * <var:d> ; | . This statement forwards the precondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> + <nat:2> \} $ to the postcondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} $ . This is shown by the assignment inference rule given by typical Hoare logic . Keeping momentum , we see the variable binding line \verb | <var:G> := <nat:3> + <var:G> * <var:d> ; | . This code forwards the precondition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} $ as $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:3> \} $ . This is rigorously given through the assignment rule defined by standard Hoare reasoning . Taking a look at the proceeding bit of code contained in our code , we have the variable assignmet line \verb | <var:G> := <nat:4> + <var:G> * <var:d> | . This command redefines the condition $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:3> \} $ toward $ \{ <var:d> = <var:C> \land <var:G> = <nat:1> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:4> \} $ . This is sound through the assignment scheme defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <var:G> := <nat:1> ; <var:G> := <nat:2> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> {{ <var:G> = <nat:1> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:G> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:G> = <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:G> = <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:G> = <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:G> = <nat:1> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 