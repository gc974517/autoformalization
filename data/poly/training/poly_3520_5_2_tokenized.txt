\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:4> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> \end{verbatim} Assuming ( letting positive integer coefficients $ <var:S> $ ) $ <var:i> = <var:S> $ ahead of the evaluation of this list of commands it follows that we have $ <var:X> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> $ when list of commands is done . \end{theorem} \begin{proof} The course of logic for this set of commands is evident through the below decorated code . \begin{eqnarray} \{ <var:i> = <var:S> \} \\ <var:X> := <nat:3> ; \\ \{ <var:i> = <var:S> \land <var:X> = <nat:3> \} \\ <var:X> := <nat:4> + <var:X> * <var:i> ; \\ \{ <var:i> = <var:S> \land <var:X> = <nat:3> \cdot <var:S> + <nat:4> \} \\ <var:X> := <nat:1> + <var:X> * <var:i> ; \\ \{ <var:i> = <var:S> \land <var:X> = <nat:3> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:1> \} \end{eqnarray} Furthering interpreting our series of instructions gives : \begin{eqnarray} <var:X> := <nat:4> + <var:X> * <var:i> ; \\ \{ <var:i> = <var:S> \land <var:X> = <nat:3> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:4> \} \\ <var:X> := <nat:1> + <var:X> * <var:i> \\ \{ <var:i> = <var:S> \land <var:X> = <nat:3> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:1> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:1> \} \end{eqnarray} The application of standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:i> = <var:S> }} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> ; <var:X> := <nat:4> + <var:X> * <var:i> ; <var:X> := <nat:1> + <var:X> * <var:i> {{ <var:X> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:X> = <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:X> = <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:X> = <nat:3> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:X> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 