\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:J> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:J> ; <var:Y2> := <var:Y2> * <var:J> ; <var:D> := <var:Y2> ; <var:D> := <var:D> + <var:Y1> ; <var:D> := <var:D> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:J> = <var:L> $ ( for all natural numbers $ <var:L> $ ) ahead of running this list of instructions , then we see $ <var:D> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> $ after code segment is done executing . \end{theorem} \begin{proof} The argument for our set of instructions can be given by Hoare techniques . Stepping through , we see \begin{verbatim} { <var:J> = <var:L> } <var:Y0> := <nat:8> { <var:J> = <var:L> \land <var:Y0> = <nat:8> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:5> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> } \end{verbatim} This is sound using the variable binding inference rule defined by typical Hoare techniques . Advancing , we have \begin{verbatim} { <var:J> = <var:L> } <var:Y0> := <nat:8> { <var:J> = <var:L> \land <var:Y0> = <nat:8> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:5> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> } <var:Y1> := <var:Y1> * <var:J> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \times <var:L> } \end{verbatim} This is known to be sound using the scheme found in typical Hoare reasoning . Moving forward to the following bits of codefound in our series of commands , we have \begin{verbatim} { <var:J> = <var:L> } <var:Y0> := <nat:8> { <var:J> = <var:L> \land <var:Y0> = <nat:8> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> } <var:Y1> := <nat:5> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> } <var:Y1> := <var:Y1> * <var:J> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \times <var:L> } { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \times <var:L> } <var:Y2> := <nat:8> { <var:J> = <var:L> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \times <var:L> \land <var:Y2> = <nat:8> } \end{verbatim} This is guaranteed by the variable assignmet inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:J> ; <var:Y2> := <nat:8> ; <var:Y2> := <var:Y2> * <var:J> ; <var:Y2> := <var:Y2> * <var:J> ; <var:D> := <var:Y2> ; <var:D> := <var:D> + <var:Y1> ; <var:D> := <var:D> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <def:poly> {{ <var:D> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:L> /\ <var:Y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:L> /\ <var:Y2> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:L> /\ <var:Y2> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:L> /\ <var:D> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:Y0> = <nat:8> /\ <var:D> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:D> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 