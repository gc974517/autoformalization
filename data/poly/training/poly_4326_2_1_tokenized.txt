\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:1> ; <var:n> := <var:z0> \end{verbatim} Allowing for all integers $ <var:I> $ it to be that $ <var:K> = <var:I> $ ahead of evaluating this program it must be that we have $ <var:n> = <nat:1> $ . \end{theorem} \begin{proof} The argument for this set of instructions can be shown with typical Hoare techniques . Moving on to the next step , the variable binding statement yielding $ <nat:1> $ into $ <var:z0>$ . This transfers the condition $ \{ <var:K> = <var:I> \} $ as the postcondition $ \{ <var:K> = <var:I> \land <var:z0> = <nat:1> \} $ . Stepping forward , the binding line defining $ <var:z0$ as $ <var:n>$ . This transfers the precondition $ \{ <var:K> = <var:I> \land <var:z0> = <nat:1> \} $ as the condition $ \{ <var:K> = <var:I> \land <var:n> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <var:z0> := <nat:1> ; <var:n> := <var:z0> {{ <var:n> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:n> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 