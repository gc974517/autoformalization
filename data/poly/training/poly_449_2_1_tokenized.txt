\begin{document} \begin{theorem} Take the following code segment such that \begin{verbatim} <var:j0> := <nat:2> ; <var:D> := <var:j0> \end{verbatim} Assuming it to be that $ <var:T> = <var:u> $ ahead of executing this code segment then $ <var:D> = <nat:2> $ when segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be done with typical Hoare logic . Observing the next step in our program , \begin{verbatim} { <var:T> = <var:u> } <var:j0> := <nat:2> { <var:T> = <var:u> \land <var:j0> = <nat:2> } \end{verbatim} Advancing to the next statement in the series of instructions , we have \begin{verbatim} { <var:T> = <var:u> } <var:j0> := <nat:2> { <var:T> = <var:u> \land <var:j0> = <nat:2> } \end{verbatim} This is given using the environment update rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:T> = <var:u> }} <var:j0> := <nat:2> ; <var:D> := <var:j0> {{ <var:D> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:D> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 