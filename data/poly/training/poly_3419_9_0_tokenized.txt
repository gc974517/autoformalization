\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:5> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:r> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:r> ; <var:V2> := <var:V2> * <var:r> ; <var:R> := <var:V2> ; <var:R> := <var:R> + <var:V1> ; <var:R> := <var:R> + <var:V0> \end{verbatim} Assume that we have $ <var:r> = <var:v> $ ( with some natural numbers $ <var:v> $ ) before the execution of our series of commands it must be that $ <var:R> = <nat:9> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> + <nat:5> $ when list of commands terminates . \end{theorem} \begin{proof} The proof of our set of instructions is evident with standard Hoare reasoning . Focusing on the upcoming step found in the set of instructions , the assignment command binding $ <nat:5> $ to $ <var:V0>$ . This moves the condition $ \{ <var:r> = <var:v> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \} $ . Observing the next line of code contained in our set of instructions , we have the variable binding command binding $ <nat:5> $ to $ <var:V1>$ . This code takes the precondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> \} $ . This is shown to be logically sound by the assignment scheme of Hoare logic . Jumping to the following step in our segment of code , the environment update code \verb | <var:V1> := <var:V1> * <var:r> ; | . This statement moves the precondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> \} $ to $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \} $ . This is sound by the assignment rule given by Hoare techniques . Stepping forward , we have the binding statement \verb | <var:V2> := <nat:9> ; | . This advances the condition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \} $ toward the postcondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> \} $ . This is sound by the assignment law in usual Hoare reasoning . Moving on to the subsequent statement in the set of commands , we have the command \verb | <var:V2> := <var:V2> * <var:r> ; | . This line moves the precondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> \} $ into $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> * <var:v> \} $ . Moving forward to the following command contained in our list of commands , the environment update command \verb | <var:V2> := <var:V2> * <var:r> ; | . This transfers the precondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> * <var:v> \} $ into $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> * <var:v> ^ <nat:2> \} $ . This is sound using the assignment scheme defined by usual Hoare techniques . Now , we see the variable update command \verb | <var:R> := <var:V2> ; | . This forwards $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:V2> = <nat:9> * <var:v> ^ <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:R> = <nat:9> * <var:v> ^ <nat:2> \} $ . Honing in on the subsequent line of code in our list of commands , the binding command \verb | <var:R> := <var:R> + <var:V1> ; | . This code takes the condition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:V1> = <nat:5> * <var:v> \land <var:R> = <nat:9> * <var:v> ^ <nat:2> \} $ to the condition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> \} $ . Further , we have the variable update line giving $ <var:R> + <var:V0$ to $ <var:R>$ . This takes the condition $ \{ <var:r> = <var:v> \land <var:V0> = <nat:5> \land <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> \} $ as $ \{ <var:r> = <var:v> \land <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:r> = <var:v> }} <var:V0> := <nat:5> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:r> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:r> ; <var:V2> := <var:V2> * <var:r> ; <var:R> := <var:V2> ; <var:R> := <var:R> + <var:V1> ; <var:R> := <var:R> + <var:V0> {{ <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> * <var:v> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> * <var:v> /\ <var:V2> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> * <var:v> /\ <var:V2> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:V1> = <nat:5> * <var:v> /\ <var:R> = <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V0> = <nat:5> /\ <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:R> = <nat:9> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 