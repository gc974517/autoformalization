\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:1> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:O> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:O> ; <var:p2> := <var:p2> * <var:O> ; <var:T> := <var:p2> ; <var:T> := <var:T> + <var:p1> ; <var:T> := <var:T> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:O> = <var:q> $ ahead of executing the program it follows that $ <var:T> = <nat:6> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:1> $ once series of commands has executed . \end{theorem} \begin{proof} The argument for the code can be done with standard Hoare logic . Honing in on the upcoming lines of codein our code segment , we see \begin{verbatim} { <var:O> = <var:q> } <var:p0> := <nat:1> { <var:O> = <var:q> \land <var:p0> = <nat:1> } { <var:O> = <var:q> \land <var:p0> = <nat:1> } <var:p1> := <nat:6> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> } { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> } <var:p1> := <var:p1> * <var:O> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> } { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> } <var:p2> := <nat:6> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> } { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> } <var:p2> := <var:p2> * <var:O> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> \cdot <var:q> } { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> \cdot <var:q> } <var:p2> := <var:p2> * <var:O> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> \cdot <var:q> ^ <nat:2> } { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:p2> = <nat:6> \cdot <var:q> ^ <nat:2> } <var:T> := <var:p2> { <var:O> = <var:q> \land <var:p0> = <nat:1> \land <var:p1> = <nat:6> \cdot <var:q> \land <var:T> = <nat:6> \cdot <var:q> ^ <nat:2> } \end{verbatim} This is shown by the variable assignmet law defined by standard Hoare reasoning . Advancing to the subsequent command found in our program , \begin{verbatim} { <var:O> = <var:q> } <var:p0> := <nat:1> { <var:O> = <var:q> \land <var:p0> = <nat:1> } \end{verbatim} This is rigorously given through the binding law given by usual Hoare logic . Now , we see \begin{verbatim} { <var:O> = <var:q> } <var:p0> := <nat:1> { <var:O> = <var:q> \land <var:p0> = <nat:1> } \end{verbatim} This is shown to be logically sound through the assignment inference rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:O> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:O> ; <var:p2> := <var:p2> * <var:O> ; <var:T> := <var:p2> ; <var:T> := <var:T> + <var:p1> ; <var:T> := <var:T> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:O> = <var:q> }} <def:poly> {{ <var:T> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> * <var:q> /\ <var:p2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> * <var:q> /\ <var:p2> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> * <var:q> /\ <var:p2> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:6> * <var:q> /\ <var:T> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:p0> = <nat:1> /\ <var:T> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:T> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 