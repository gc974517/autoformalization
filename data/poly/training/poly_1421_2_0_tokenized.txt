\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:7> ; <var:F> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allowing $ <var:b> = <var:p> $ ahead of executing the set of commands , it must be that we see $ <var:F> = <nat:7> $ when list of commands has executed . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:b> = <var:p> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:b> = <var:p> \land <var:y0> = <nat:7> \} \\ <var:F> := <var:y0> \\ \{ <var:b> = <var:p> \land <var:F> = <nat:7> \} \end{eqnarray} As a consequence , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:F> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:b> = <var:p> }} <def:poly> {{ <var:F> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:F> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 