\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:6> ; <var:Q> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:y> = <var:c> $ , given any $ <var:c> \in \mathbb{Z}^+ $ , prior to the evaluation of the set of commands , it follows that we see $ <var:Q> = <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} Note that the following decorated series of commands . \begin{eqnarray} \{ <var:y> = <var:c> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:y> = <var:c> \land <var:v0> = <nat:6> \} \\ <var:Q> := <var:v0> \\ \{ <var:y> = <var:c> \land <var:Q> = <nat:6> \} \end{eqnarray} Applying usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:6> ; <var:Q> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:y> = <var:c> }} <def:poly> {{ <var:Q> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:c> /\ <var:Q> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 