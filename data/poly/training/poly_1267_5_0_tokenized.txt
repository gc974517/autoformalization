\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:J> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> \end{verbatim} Assume for some positive integer coefficients $ <var:H> $ $ <var:J> = <var:H> $ ahead of evaluating our set of commands , then we have $ <var:n> = <nat:2> \times <var:H> + <nat:1> $ when list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:H> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:J> = <var:H> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:2> ; \\ \{ <var:J> = <var:H> \land <var:N0> = <nat:1> \land <var:N1> = <nat:2> \} \\ <var:N1> := <var:N1> * <var:J> ; \\ \{ <var:J> = <var:H> \land <var:N0> = <nat:1> \land <var:N1> = <nat:2> * <var:H> \} \\ <var:n> := <var:N1> ; \\ \{ <var:J> = <var:H> \land <var:N0> = <nat:1> \land <var:n> = <nat:2> * <var:H> \} \\ <var:n> := <var:n> + <var:N0> \\ \{ <var:J> = <var:H> \land <var:n> = <nat:2> * <var:H> + <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:J> = <var:H> }} <var:N0> := <nat:1> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:J> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> {{ <var:n> = <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:N0> = <nat:1> /\ <var:n> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:n> = <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 