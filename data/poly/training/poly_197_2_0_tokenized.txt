\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:t0> := <nat:5> ; <var:i> := <var:t0> \end{verbatim} Assume that we have $ <var:h> = <var:G> $ , for positive integers $ <var:G> $ , ahead of executing this program it must be that we have $ <var:i> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:G> \} \\ <var:t0> := <nat:5> ; \\ \{ <var:h> = <var:G> \land <var:t0> = <nat:5> \} \\ <var:i> := <var:t0> \\ \{ <var:h> = <var:G> \land <var:i> = <nat:5> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:t0> := <nat:5> ; <var:i> := <var:t0> {{ <var:i> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:t0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:i> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 