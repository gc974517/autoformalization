\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:L> ; <var:T2> := <var:T1> * <var:L> ; <var:T3> := <var:T2> * <var:L> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:7> ; <var:T3> := <var:T3> * <nat:8> ; <var:i> := <var:T3> <var:i> := <var:i> + <var:T2> <var:i> := <var:i> + <var:T1> <var:i> := <var:i> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing --- for all natural coefficients $ <var:h> $ --- $ <var:L> = <var:h> $ before interpreting our code it must be that we have $ <var:i> = <nat:8> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:T1> := <var:L> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <var:h> \} \\ <var:T2> := <var:T1> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <var:h> \land <var:T2> = <var:h> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <var:h> \land <var:T2> = <var:h> ^ <nat:2> \land <var:T3> = <var:h> ^ <nat:3> \} \\ <var:T0> := <nat:4> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <var:h> \land <var:T2> = <var:h> ^ <nat:2> \land <var:T3> = <var:h> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T1> := <var:T1> * <nat:4> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <nat:4> * <var:h> \land <var:T2> = <var:h> ^ <nat:2> \land <var:T3> = <var:h> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T2> := <var:T2> * <nat:7> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <nat:4> * <var:h> \land <var:T2> = <nat:7> * <var:h> ^ <nat:2> \land <var:T3> = <var:h> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T3> := <var:T3> * <nat:8> ; \\ \{ <var:L> = <var:h> \land <var:T1> = <nat:4> * <var:h> \land <var:T2> = <nat:7> * <var:h> ^ <nat:2> \land <var:T3> = <nat:8> * <var:h> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:i> := <var:T3> \\ \{ <var:L> = <var:h> \land <var:T1> = <nat:4> * <var:h> \land <var:T2> = <nat:7> * <var:h> ^ <nat:2> \land <var:T0> = <nat:4> \land <var:i> = <nat:8> * <var:h> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:T2> \\ \{ <var:L> = <var:h> \land <var:T1> = <nat:4> * <var:h> \land <var:T0> = <nat:4> \land <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:T1> \\ \{ <var:L> = <var:h> \land <var:T0> = <nat:4> \land <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> \} \\ <var:i> := <var:i> + <var:T0> \\ \{ <var:L> = <var:h> \land <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:L> ; <var:T2> := <var:T1> * <var:L> ; <var:T3> := <var:T2> * <var:L> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:4> ; <var:T2> := <var:T2> * <nat:7> ; <var:T3> := <var:T3> * <nat:8> ; <var:i> := <var:T3> <var:i> := <var:i> + <var:T2> <var:i> := <var:i> + <var:T1> <var:i> := <var:i> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <def:poly> {{ <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <var:h> /\ <var:T2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <var:h> /\ <var:T2> = <var:h> ^ <nat:2> /\ <var:T3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <var:h> /\ <var:T2> = <var:h> ^ <nat:2> /\ <var:T3> = <var:h> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <nat:4> * <var:h> /\ <var:T2> = <var:h> ^ <nat:2> /\ <var:T3> = <var:h> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <nat:4> * <var:h> /\ <var:T2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:T3> = <var:h> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <nat:4> * <var:h> /\ <var:T2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:T3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <nat:4> * <var:h> /\ <var:T2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:T0> = <nat:4> /\ <var:i> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T1> = <nat:4> * <var:h> /\ <var:T0> = <nat:4> /\ <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:T0> = <nat:4> /\ <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:i> = <nat:8> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 