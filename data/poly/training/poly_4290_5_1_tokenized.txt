\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:x1> := <var:v> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:3> ; <var:H> := <var:x1> <var:H> := <var:H> + <var:x0> \end{verbatim} Assuming that we have $ <var:v> = <var:r> $ ( taking whole numbers $ <var:r> $ ) prior to executing this program it must be that we see $ <var:H> = <nat:3> \times <var:r> + <nat:4> $ once program is done executing . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:v> = <var:r> \} \\ <var:x1> := <var:v> ; \\ \{ <var:v> = <var:r> \land <var:x1> = <var:r> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:v> = <var:r> \land <var:x1> = <var:r> \land <var:x0> = <nat:4> \} \\ <var:x1> := <var:x1> * <nat:3> ; \\ \{ <var:v> = <var:r> \land <var:x1> = <nat:3> \cdot <var:r> \land <var:x0> = <nat:4> \} \\ <var:H> := <var:x1> \\ \{ <var:v> = <var:r> \land <var:x0> = <nat:4> \land <var:H> = <nat:3> \cdot <var:r> \} \end{eqnarray} Allowing interpreting our code produces : \begin{eqnarray} <var:H> := <var:H> + <var:x0> \\ \{ <var:v> = <var:r> \land <var:H> = <nat:3> \cdot <var:r> + <nat:4> \} \end{eqnarray} Hence , the set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:v> = <var:r> }} <var:x1> := <var:v> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:3> ; <var:H> := <var:x1> <var:H> := <var:H> + <var:x0> {{ <var:H> = <nat:3> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:x1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:x1> = <var:r> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:x1> = <nat:3> * <var:r> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:x0> = <nat:4> /\ <var:H> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:H> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 