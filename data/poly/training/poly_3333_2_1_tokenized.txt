\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:4> ; <var:U> := <var:O0> \end{verbatim} Allowing --- for all positive numbers $ <var:L> $ --- $ <var:h> = <var:L> $ prior to running our program then we have $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} The proof of this list of instructions can be done through typical Hoare logic . Moving on to the next step , we see \verb | { <var:h> = <var:L> } <var:O0> := <nat:4> { <var:h> = <var:L> \land <var:O0> = <nat:4> } | . This is shown with the variable update rule given by standard Hoare logic . Stepping through , \verb | { <var:h> = <var:L> } <var:O0> := <nat:4> { <var:h> = <var:L> \land <var:O0> = <nat:4> } | . This is deduced through the assignment scheme from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:h> = <var:L> }} <var:O0> := <nat:4> ; <var:U> := <var:O0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 