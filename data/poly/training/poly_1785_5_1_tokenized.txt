\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:J> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:2> ; <var:y> := <var:u1> <var:y> := <var:y> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Allow it to hold that $ <var:J> = <var:k> $ before the evaluation of this set of commands , then we have $ <var:y> = <nat:2> \times <var:k> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions is demonstrated with Hoare techniques . Further , we have the binding command \verb | <var:u1> := <var:J> ; | . This transfers the precondition $ \{ <var:J> = <var:k> \} $ to $ \{ <var:J> = <var:k> \land <var:u1> = <var:k> \} $ . Advancing to the following piece of code found in the code , we see the code \verb | <var:u0> := <nat:4> ; | . This advances the condition $ \{ <var:J> = <var:k> \land <var:u1> = <var:k> \} $ into the postcondition $ \{ <var:J> = <var:k> \land <var:u1> = <var:k> \land <var:u0> = <nat:4> \} $ . This is deduced with the assignment inference rule found in usual Hoare reasoning . Moving forward to the next step , we see the assignment statement \verb | <var:u1> := <var:u1> * <nat:2> ; | . This statement moves $ \{ <var:J> = <var:k> \land <var:u1> = <var:k> \land <var:u0> = <nat:4> \} $ toward the condition $ \{ <var:J> = <var:k> \land <var:u1> = <nat:2> \times <var:k> \land <var:u0> = <nat:4> \} $ . This is known to be sound with the assignment scheme found in standard Hoare techniques . Going to the next step , we have the environment update code defining $ <var:u1$ as $ <var:y>$ . This statement redefines the precondition $ \{ <var:J> = <var:k> \land <var:u1> = <nat:2> \times <var:k> \land <var:u0> = <nat:4> \} $ toward the postcondition $ \{ <var:J> = <var:k> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> \times <var:k> \} $ . This is known to be sound using the assignment scheme obtained from Hoare reasoning . Moving forward to the following command found in the series of commands , the variable update line letting $ <var:y> + <var:u0$ as $ <var:y>$ . This redefines $ \{ <var:J> = <var:k> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> \times <var:k> \} $ toward $ \{ <var:J> = <var:k> \land <var:y> = <nat:2> \times <var:k> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:J> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:2> ; <var:y> := <var:u1> <var:y> := <var:y> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:J> = <var:k> }} <def:poly> {{ <var:y> = <nat:2> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:u1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:u1> = <var:k> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:u1> = <nat:2> * <var:k> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:u0> = <nat:4> /\ <var:y> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:k> /\ <var:y> = <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 