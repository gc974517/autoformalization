\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:d> ; <var:W2> := <var:W1> * <var:d> ; <var:W3> := <var:W2> * <var:d> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:6> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:7> ; <var:J> := <var:W3> <var:J> := <var:J> + <var:W2> <var:J> := <var:J> + <var:W1> <var:J> := <var:J> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow for natural numbers $ <var:j> $ it to hold that $ <var:d> = <var:j> $ ahead of executing this set of commands , it must be that $ <var:J> = <nat:7> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> + <nat:7> $ when list of commands finishes . \end{theorem} \begin{proof} The method of proof for the list of commands can be seen with Hoare logic . Shifting focus toward the proceeding statement in the set of commands , the binding code defining $ <var:d> $ to $ <var:W1>$ . This code advances $ \{ <var:d> = <var:j> \} $ to $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \} $ . Advancing to the next step , the assignment statement \verb | <var:W2> := <var:W1> * <var:d> ; | . This redefines the condition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \} $ as the condition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \} $ . Moving onward , the assignment line \verb | <var:W3> := <var:W2> * <var:d> ; | . This redefines the precondition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \} $ to the condition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \} $ . This is given with the assignment rule given by Hoare reasoning . Going to the next step , we see the environment update statement \verb | <var:W0> := <nat:7> ; | . This statement transfers the condition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \} $ as $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ . This is shown by the assignment scheme obtained from Hoare logic . Next , we have the variable binding code letting $ <var:W1> * <nat:6> $ toward $ <var:W1>$ . This transfers the condition $ \{ <var:d> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ to the condition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ . Following , the assignment statement \verb | <var:W2> := <var:W2> * <nat:4> ; | . This forwards $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ toward the postcondition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ . Paying attention to the subsequent step found in the program , we see the variable update line binding $ <var:W3> * <nat:7> $ toward $ <var:W3>$ . This moves $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ toward the condition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W3> = <nat:7> * <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ . This is rigorously given with the assignment law defined in typical Hoare logic . Moving forward to the following line of code contained in our set of instructions , we see the variable update statement \verb | <var:J> := <var:W3> | . This line transfers the precondition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W3> = <nat:7> * <var:j> ^ <nat:3> \land <var:W0> = <nat:7> \} $ toward the postcondition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> \} $ . This is rigorously given with the assignment scheme of standard Hoare techniques . Taking a look at the upcoming step found in the program , we see the line \verb | <var:J> := <var:J> + <var:W2> | . This code redefines the condition $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W2> = <nat:4> * <var:j> ^ <nat:2> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> \} $ toward $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} $ . Advancing , we see the variable update code \verb | <var:J> := <var:J> + <var:W1> | . This forwards $ \{ <var:d> = <var:j> \land <var:W1> = <nat:6> * <var:j> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:j> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> \} $ . This is ensured by the assignment scheme of typical Hoare reasoning . Moving forward , the variable binding command \verb | <var:J> := <var:J> + <var:W0> | . This redefines $ \{ <var:d> = <var:j> \land <var:W0> = <nat:7> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> \} $ as the postcondition $ \{ <var:d> = <var:j> \land <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:d> ; <var:W2> := <var:W1> * <var:d> ; <var:W3> := <var:W2> * <var:d> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:6> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:7> ; <var:J> := <var:W3> <var:J> := <var:J> + <var:W2> <var:J> := <var:J> + <var:W1> <var:J> := <var:J> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:d> = <var:j> }} <def:poly> {{ <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <nat:6> * <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <nat:6> * <var:j> /\ <var:W2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <nat:6> * <var:j> /\ <var:W2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:j> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <nat:6> * <var:j> /\ <var:W2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:W0> = <nat:7> /\ <var:J> = <nat:7> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W1> = <nat:6> * <var:j> /\ <var:W0> = <nat:7> /\ <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:W0> = <nat:7> /\ <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:J> = <nat:7> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 