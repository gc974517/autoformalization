\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:y1> := <var:s> ; <var:y2> := <var:y1> * <var:s> ; <var:y3> := <var:y2> * <var:s> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:9> ; <var:Z> := <var:y3> <var:Z> := <var:Z> + <var:y2> <var:Z> := <var:Z> + <var:y1> <var:Z> := <var:Z> + <var:y0> \end{verbatim} Allow that $ <var:s> = <var:F> $ before executing this segment of code it follows that $ <var:Z> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> $ when code has finished executing . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:s> = <var:F> \} \\ <var:y1> := <var:s> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <var:F> \} \\ <var:y2> := <var:y1> * <var:s> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <var:F> \land <var:y2> = <var:F> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:s> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <var:F> \land <var:y2> = <var:F> ^ <nat:2> \land <var:y3> = <var:F> ^ <nat:3> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <var:F> \land <var:y2> = <var:F> ^ <nat:2> \land <var:y3> = <var:F> ^ <nat:3> \land <var:y0> = <nat:2> \} \\ <var:y1> := <var:y1> * <nat:2> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <nat:2> \times <var:F> \land <var:y2> = <var:F> ^ <nat:2> \land <var:y3> = <var:F> ^ <nat:3> \land <var:y0> = <nat:2> \} \\ <var:y2> := <var:y2> * <nat:6> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <nat:2> \times <var:F> \land <var:y2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:y3> = <var:F> ^ <nat:3> \land <var:y0> = <nat:2> \} \\ <var:y3> := <var:y3> * <nat:9> ; \\ \{ <var:s> = <var:F> \land <var:y1> = <nat:2> \times <var:F> \land <var:y2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:y3> = <nat:9> \times <var:F> ^ <nat:3> \land <var:y0> = <nat:2> \} \\ <var:Z> := <var:y3> \\ \{ <var:s> = <var:F> \land <var:y1> = <nat:2> \times <var:F> \land <var:y2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:y0> = <nat:2> \land <var:Z> = <nat:9> \times <var:F> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:y2> \\ \{ <var:s> = <var:F> \land <var:y1> = <nat:2> \times <var:F> \land <var:y0> = <nat:2> \land <var:Z> = <nat:9> \times <var:F> ^ <nat:3> + <nat:6> \times <var:F> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:y1> \\ \{ <var:s> = <var:F> \land <var:y0> = <nat:2> \land <var:Z> = <nat:9> \times <var:F> ^ <nat:3> + <nat:6> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> \} \\ <var:Z> := <var:Z> + <var:y0> \\ \{ <var:s> = <var:F> \land <var:Z> = <nat:9> \times <var:F> ^ <nat:3> + <nat:6> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:2> \} \end{eqnarray} As a consequence , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <var:y1> := <var:s> ; <var:y2> := <var:y1> * <var:s> ; <var:y3> := <var:y2> * <var:s> ; <var:y0> := <nat:2> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:9> ; <var:Z> := <var:y3> <var:Z> := <var:Z> + <var:y2> <var:Z> := <var:Z> + <var:y1> <var:Z> := <var:Z> + <var:y0> {{ <var:Z> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <var:F> /\ <var:y2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <var:F> /\ <var:y2> = <var:F> ^ <nat:2> /\ <var:y3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <var:F> /\ <var:y2> = <var:F> ^ <nat:2> /\ <var:y3> = <var:F> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <nat:2> * <var:F> /\ <var:y2> = <var:F> ^ <nat:2> /\ <var:y3> = <var:F> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <nat:2> * <var:F> /\ <var:y2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:y3> = <var:F> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <nat:2> * <var:F> /\ <var:y2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:F> ^ <nat:3> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <nat:2> * <var:F> /\ <var:y2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:y0> = <nat:2> /\ <var:Z> = <nat:9> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y1> = <nat:2> * <var:F> /\ <var:y0> = <nat:2> /\ <var:Z> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:y0> = <nat:2> /\ <var:Z> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:Z> = <nat:9> * <var:F> ^ <nat:3> + <nat:6> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 