\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:U> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:4> ; <var:e> := <var:m1> <var:e> := <var:e> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:U> = <var:S> $ ahead of the evaluation of the segment of code it holds that we see $ <var:e> = <nat:4> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare reasoning gives us : \begin{eqnarray} \{ <var:U> = <var:S> \} \\ <var:m1> := <var:U> ; \\ \{ <var:U> = <var:S> \land <var:m1> = <var:S> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:U> = <var:S> \land <var:m1> = <var:S> \land <var:m0> = <nat:1> \} \\ <var:m1> := <var:m1> * <nat:4> ; \\ \{ <var:U> = <var:S> \land <var:m1> = <nat:4> * <var:S> \land <var:m0> = <nat:1> \} \\ <var:e> := <var:m1> \\ \{ <var:U> = <var:S> \land <var:m0> = <nat:1> \land <var:e> = <nat:4> * <var:S> \} \\ <var:e> := <var:e> + <var:m0> \\ \{ <var:U> = <var:S> \land <var:e> = <nat:4> * <var:S> + <nat:1> \} \end{eqnarray} Hence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:U> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:4> ; <var:e> := <var:m1> <var:e> := <var:e> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:U> = <var:S> }} <def:poly> {{ <var:e> = <nat:4> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:m1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:m1> = <var:S> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:m1> = <nat:4> * <var:S> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:m0> = <nat:1> /\ <var:e> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:e> = <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 