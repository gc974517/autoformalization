\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:x> ; <var:O2> := <var:O1> * <var:x> ; <var:O3> := <var:O2> * <var:x> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:1> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:2> ; <var:V> := <var:O3> <var:V> := <var:V> + <var:O2> <var:V> := <var:V> + <var:O1> <var:V> := <var:V> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given , given some positive integers $ <var:M> $ , it to hold that $ <var:x> = <var:M> $ ahead of the execution of the code segment , it must be that $ <var:V> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:7> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this program is demonstrated using usual Hoare logic . Advancing to the following pieces of code found in the code segment , we have \begin{eqnarray} \{ <var:x> = <var:M> \} \, <var:O1> := <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \, <var:O2> := <var:O1> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \, <var:O3> := <var:O2> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \land <var:O3> = <var:M> ^ <nat:3> \} \end{eqnarray} This is shown to be logically sound with the law given in usual Hoare reasoning . Stepping through , we have \begin{eqnarray} \{ <var:x> = <var:M> \} \, <var:O1> := <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \, <var:O2> := <var:O1> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \, <var:O3> := <var:O2> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \land <var:O3> = <var:M> ^ <nat:3> \} \end{eqnarray} Stepping through , \begin{eqnarray} \{ <var:x> = <var:M> \} \, <var:O1> := <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \end{eqnarray} This is given using the assignment scheme defined in usual Hoare techniques . Taking a look at the upcoming commands contained in the program , we see \begin{eqnarray} \{ <var:x> = <var:M> \} \, <var:O1> := <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \, <var:O2> := <var:O1> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \end{eqnarray} Moving on to the next step , we have \begin{eqnarray} \{ <var:x> = <var:M> \} \, <var:O1> := <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \\ \{ <var:x> = <var:M> \land <var:O1> = <var:M> \} \, <var:O2> := <var:O1> * <var:x> \, \{ <var:x> = <var:M> \land <var:O1> = <var:M> \land <var:O2> = <var:M> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:x> ; <var:O2> := <var:O1> * <var:x> ; <var:O3> := <var:O2> * <var:x> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:1> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:2> ; <var:V> := <var:O3> <var:V> := <var:V> + <var:O2> <var:V> := <var:V> + <var:O1> <var:V> := <var:V> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:x> = <var:M> }} <def:poly> {{ <var:V> = <nat:2> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <var:M> /\ <var:O2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <var:M> /\ <var:O2> = <var:M> ^ <nat:2> /\ <var:O3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <var:M> /\ <var:O2> = <var:M> ^ <nat:2> /\ <var:O3> = <var:M> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <nat:1> * <var:M> /\ <var:O2> = <var:M> ^ <nat:2> /\ <var:O3> = <var:M> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <nat:1> * <var:M> /\ <var:O2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:O3> = <var:M> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <nat:1> * <var:M> /\ <var:O2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:O3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <nat:1> * <var:M> /\ <var:O2> = <nat:7> * <var:M> ^ <nat:2> /\ <var:O0> = <nat:3> /\ <var:V> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O1> = <nat:1> * <var:M> /\ <var:O0> = <nat:3> /\ <var:V> = <nat:2> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:O0> = <nat:3> /\ <var:V> = <nat:2> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:M> /\ <var:V> = <nat:2> * <var:M> ^ <nat:3> + <nat:7> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 