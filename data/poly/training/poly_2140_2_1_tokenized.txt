\begin{document} \begin{theorem} We define a set of instructions as follows \begin{verbatim} <var:o0> := <nat:7> ; <var:s> := <var:o0> \end{verbatim} Allowing that $ <var:f> = <var:h> $ --- for any integers $ <var:h> $ --- prior to the execution of this series of commands , it holds that we see $ <var:s> = <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is given with typical Hoare techniques . Following , \begin{verbatim} { <var:f> = <var:h> } <var:o0> := <nat:7> { <var:f> = <var:h> \land <var:o0> = <nat:7> } { <var:f> = <var:h> \land <var:o0> = <nat:7> } <var:s> := <var:o0{ <var:f> = <var:h> \land <var:s> = <nat:7> } \end{verbatim} This is sound by the variable assignmet law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <var:o0> := <nat:7> ; <var:s> := <var:o0> {{ <var:s> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:s> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 