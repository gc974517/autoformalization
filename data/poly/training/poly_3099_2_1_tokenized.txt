\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:5> ; <var:K> := <var:l0> \end{verbatim} Assuming --- for every positive numbers $ <var:M> $ --- it to hold that $ <var:z> = <var:M> $ ahead of evaluating the program , it follows that we have $ <var:K> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:z> = <var:M> \land <var:l0> = <nat:5> \} \\ <var:K> := <var:l0> \\ \{ <var:z> = <var:M> \land <var:K> = <nat:5> \} \end{eqnarray} Using typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <var:l0> := <nat:5> ; <var:K> := <var:l0> {{ <var:K> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:K> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 