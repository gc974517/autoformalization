\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:B> ; <var:x2> := <var:x1> * <var:B> ; <var:x3> := <var:x2> * <var:B> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:7> ; <var:x2> := <var:x2> * <nat:3> ; <var:x3> := <var:x3> * <nat:5> ; <var:y> := <var:x3> <var:y> := <var:y> + <var:x2> <var:y> := <var:y> + <var:x1> <var:y> := <var:y> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:B> = <var:S> $ prior to the evaluation of this series of commands it holds that $ <var:y> = <nat:5> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:S> \} \\ <var:x1> := <var:B> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <var:S> \} \\ <var:x2> := <var:x1> * <var:B> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <var:S> \land <var:x2> = <var:S> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:B> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <var:S> \land <var:x2> = <var:S> ^ <nat:2> \land <var:x3> = <var:S> ^ <nat:3> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <var:S> \land <var:x2> = <var:S> ^ <nat:2> \land <var:x3> = <var:S> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x1> := <var:x1> * <nat:7> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <nat:7> * <var:S> \land <var:x2> = <var:S> ^ <nat:2> \land <var:x3> = <var:S> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x2> := <var:x2> * <nat:3> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <nat:7> * <var:S> \land <var:x2> = <nat:3> * <var:S> ^ <nat:2> \land <var:x3> = <var:S> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x3> := <var:x3> * <nat:5> ; \\ \{ <var:B> = <var:S> \land <var:x1> = <nat:7> * <var:S> \land <var:x2> = <nat:3> * <var:S> ^ <nat:2> \land <var:x3> = <nat:5> * <var:S> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:y> := <var:x3> \\ \{ <var:B> = <var:S> \land <var:x1> = <nat:7> * <var:S> \land <var:x2> = <nat:3> * <var:S> ^ <nat:2> \land <var:x0> = <nat:5> \land <var:y> = <nat:5> * <var:S> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:x2> \\ \{ <var:B> = <var:S> \land <var:x1> = <nat:7> * <var:S> \land <var:x0> = <nat:5> \land <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:x1> \\ \{ <var:B> = <var:S> \land <var:x0> = <nat:5> \land <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:7> * <var:S> \} \\ <var:y> := <var:y> + <var:x0> \\ \{ <var:B> = <var:S> \land <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> \} \end{eqnarray} Utilizing Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:B> ; <var:x2> := <var:x1> * <var:B> ; <var:x3> := <var:x2> * <var:B> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:7> ; <var:x2> := <var:x2> * <nat:3> ; <var:x3> := <var:x3> * <nat:5> ; <var:y> := <var:x3> <var:y> := <var:y> + <var:x2> <var:y> := <var:y> + <var:x1> <var:y> := <var:y> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:B> = <var:S> }} <def:poly> {{ <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <var:S> /\ <var:x2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <var:S> /\ <var:x2> = <var:S> ^ <nat:2> /\ <var:x3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <var:S> /\ <var:x2> = <var:S> ^ <nat:2> /\ <var:x3> = <var:S> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <nat:7> * <var:S> /\ <var:x2> = <var:S> ^ <nat:2> /\ <var:x3> = <var:S> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <nat:7> * <var:S> /\ <var:x2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:x3> = <var:S> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <nat:7> * <var:S> /\ <var:x2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:x3> = <nat:5> * <var:S> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <nat:7> * <var:S> /\ <var:x2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:x0> = <nat:5> /\ <var:y> = <nat:5> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x1> = <nat:7> * <var:S> /\ <var:x0> = <nat:5> /\ <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:x0> = <nat:5> /\ <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:y> = <nat:5> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 