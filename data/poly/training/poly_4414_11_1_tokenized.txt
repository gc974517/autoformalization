\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:S> ; <var:O2> := <var:O1> * <var:S> ; <var:O3> := <var:O2> * <var:S> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:5> ; <var:p> := <var:O3> <var:p> := <var:p> + <var:O2> <var:p> := <var:p> + <var:O1> <var:p> := <var:p> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assume --- letting positive numbers $ <var:Z> $ --- that $ <var:S> = <var:Z> $ ahead of running the segment of code , it must be that we see $ <var:p> = <nat:5> \cdot <var:Z> ^ <nat:3> + <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> + <nat:9> $ after program has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be done by Hoare logic . Focusing on the next pieces of code in the series of commands , we have \begin{verbatim} { <var:S> = <var:Z> } <var:O1> := <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> } { <var:S> = <var:Z> \land <var:O1> = <var:Z> } <var:O2> := <var:O1> * <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> } \end{verbatim} This is shown by the environment update inference rule defined by Hoare techniques . Focusing on the proceeding pieces of code found in the set of instructions , we see \begin{verbatim} { <var:S> = <var:Z> } <var:O1> := <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> } { <var:S> = <var:Z> \land <var:O1> = <var:Z> } <var:O2> := <var:O1> * <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> } { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> } <var:O3> := <var:O2> * <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> } { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> } <var:O0> := <nat:9> { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } { <var:S> = <var:Z> \land <var:O1> = <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } <var:O1> := <var:O1> * <nat:9> { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } <var:O2> := <var:O2> * <nat:6> { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <nat:6> * <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <nat:6> * <var:Z> ^ <nat:2> \land <var:O3> = <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } <var:O3> := <var:O3> * <nat:5> { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <nat:6> * <var:Z> ^ <nat:2> \land <var:O3> = <nat:5> * <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } { <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <nat:6> * <var:Z> ^ <nat:2> \land <var:O3> = <nat:5> * <var:Z> ^ <nat:3> \land <var:O0> = <nat:9> } <var:p> := <var:O3{ <var:S> = <var:Z> \land <var:O1> = <nat:9> * <var:Z> \land <var:O2> = <nat:6> * <var:Z> ^ <nat:2> \land <var:O0> = <nat:9> \land <var:p> = <nat:5> * <var:Z> ^ <nat:3> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:S> = <var:Z> } <var:O1> := <var:S> { <var:S> = <var:Z> \land <var:O1> = <var:Z> } \end{verbatim} This is ensured through the binding law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:S> ; <var:O2> := <var:O1> * <var:S> ; <var:O3> := <var:O2> * <var:S> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:5> ; <var:p> := <var:O3> <var:p> := <var:p> + <var:O2> <var:p> := <var:p> + <var:O1> <var:p> := <var:p> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:S> = <var:Z> }} <def:poly> {{ <var:p> = <nat:5> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <var:Z> /\ <var:O2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <var:Z> /\ <var:O2> = <var:Z> ^ <nat:2> /\ <var:O3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <var:Z> /\ <var:O2> = <var:Z> ^ <nat:2> /\ <var:O3> = <var:Z> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <nat:9> * <var:Z> /\ <var:O2> = <var:Z> ^ <nat:2> /\ <var:O3> = <var:Z> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <nat:9> * <var:Z> /\ <var:O2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:O3> = <var:Z> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <nat:9> * <var:Z> /\ <var:O2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:Z> ^ <nat:3> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <nat:9> * <var:Z> /\ <var:O2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:O0> = <nat:9> /\ <var:p> = <nat:5> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O1> = <nat:9> * <var:Z> /\ <var:O0> = <nat:9> /\ <var:p> = <nat:5> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:O0> = <nat:9> /\ <var:p> = <nat:5> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Z> /\ <var:p> = <nat:5> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 