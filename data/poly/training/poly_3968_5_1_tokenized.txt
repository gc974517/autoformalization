\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:N1> := <var:C> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:D> := <var:N1> <var:D> := <var:D> + <var:N0> \end{verbatim} Given $ <var:C> = <var:L> $ for any whole numbers $ <var:L> $ prior to interpreting the series of commands it follows that $ <var:D> = <nat:2> \cdot <var:L> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment is accomplished with standard Hoare techniques . Jumping to the subsequent bit of code found in our list of instructions , we see the variable assignmet command letting $ <var:C> $ into $ <var:N1>$ . This statement forwards the precondition $ \{ <var:C> = <var:L> \} $ into the postcondition $ \{ <var:C> = <var:L> \land <var:N1> = <var:L> \} $ . Moving on , we see the variable binding command \verb | <var:N0> := <nat:8> ; | . This moves the condition $ \{ <var:C> = <var:L> \land <var:N1> = <var:L> \} $ to $ \{ <var:C> = <var:L> \land <var:N1> = <var:L> \land <var:N0> = <nat:8> \} $ . This is sound by the assignment scheme given in usual Hoare logic . Stepping forward , we see the assignment line \verb | <var:N1> := <var:N1> * <nat:2> ; | . This line takes the condition $ \{ <var:C> = <var:L> \land <var:N1> = <var:L> \land <var:N0> = <nat:8> \} $ toward $ \{ <var:C> = <var:L> \land <var:N1> = <nat:2> \cdot <var:L> \land <var:N0> = <nat:8> \} $ . Considering the proceeding statement in the set of commands , we see the variable assignmet statement \verb | <var:D> := <var:N1> | . This line advances the condition $ \{ <var:C> = <var:L> \land <var:N1> = <nat:2> \cdot <var:L> \land <var:N0> = <nat:8> \} $ as $ \{ <var:C> = <var:L> \land <var:N0> = <nat:8> \land <var:D> = <nat:2> \cdot <var:L> \} $ . Next , we see the assignment line \verb | <var:D> := <var:D> + <var:N0> | . This redefines the condition $ \{ <var:C> = <var:L> \land <var:N0> = <nat:8> \land <var:D> = <nat:2> \cdot <var:L> \} $ toward $ \{ <var:C> = <var:L> \land <var:D> = <nat:2> \cdot <var:L> + <nat:8> \} $ . This is given through the assignment law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:C> = <var:L> }} <var:N1> := <var:C> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:2> ; <var:D> := <var:N1> <var:D> := <var:D> + <var:N0> {{ <var:D> = <nat:2> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:N1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:N1> = <var:L> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:N1> = <nat:2> * <var:L> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:N0> = <nat:8> /\ <var:D> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:L> /\ <var:D> = <nat:2> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 