\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:7> ; <var:S> := <var:F0> \end{verbatim} Assuming it to hold that $ <var:L> = <var:M> $ ahead of running the set of commands , it holds that $ <var:S> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions is demonstrated with usual Hoare techniques . Immediately following , we see the variable update statement binding $ <nat:7> $ toward $ <var:F0>$ . This code transfers $ \{ <var:L> = <var:M> \} $ toward the postcondition $ \{ <var:L> = <var:M> \land <var:F0> = <nat:7> \} $ . Paying attention to the following statement found in the set of commands , we see the variable binding statement giving $ <var:F0$ toward $ <var:S>$ . This redefines the precondition $ \{ <var:L> = <var:M> \land <var:F0> = <nat:7> \} $ to the postcondition $ \{ <var:L> = <var:M> \land <var:S> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <var:F0> := <nat:7> ; <var:S> := <var:F0> {{ <var:S> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:S> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 