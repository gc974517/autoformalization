\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:1> ; <var:L> := <var:K0> \end{verbatim} Allow $ <var:k> = <var:M> $ given some $ <var:M> $ prior to interpreting our code segment , then $ <var:L> = <nat:1> $ when set of instructions terminates . \end{theorem} \begin{proof} The flow of logic for our set of commands can be demonstrated with Hoare reasoning . After , \begin{eqnarray} \{ <var:k> = <var:M> \} \, <var:K0> := <nat:1> \, \{ <var:k> = <var:M> \land <var:K0> = <nat:1> \} \end{eqnarray} Going forward , we have \begin{eqnarray} \{ <var:k> = <var:M> \} \, <var:K0> := <nat:1> \, \{ <var:k> = <var:M> \land <var:K0> = <nat:1> \} \end{eqnarray} This is sound through the environment update scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:k> = <var:M> }} <var:K0> := <nat:1> ; <var:L> := <var:K0> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 