\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:W> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> \end{verbatim} Allow given every $ <var:H> \in \mathbb{N} $ it to be that $ <var:W> = <var:H> $ before evaluating this segment of code it follows that we have $ <var:T> = <nat:9> \times <var:H> + <nat:4> $ once series of commands executes . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is done by the below decorated code . \begin{eqnarray} \{ <var:W> = <var:H> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:W> = <var:H> \land <var:E0> = <nat:4> \} \\ <var:E1> := <nat:9> ; \\ \{ <var:W> = <var:H> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \} \\ <var:E1> := <var:E1> * <var:W> ; \\ \{ <var:W> = <var:H> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:H> \} \end{eqnarray} Allowing interpreting our set of commands results in : \begin{eqnarray} <var:T> := <var:E1> ; \\ \{ <var:W> = <var:H> \land <var:E0> = <nat:4> \land <var:T> = <nat:9> \times <var:H> \} \\ <var:T> := <var:T> + <var:E0> \\ \{ <var:W> = <var:H> \land <var:T> = <nat:9> \times <var:H> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:W> = <var:H> }} <var:E0> := <nat:4> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:W> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> {{ <var:T> = <nat:9> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:E0> = <nat:4> /\ <var:T> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:T> = <nat:9> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 