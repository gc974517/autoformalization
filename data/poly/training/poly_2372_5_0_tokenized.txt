\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:w> ; <var:v> := <var:r1> ; <var:v> := <var:v> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allow taking positive numbers $ <var:l> $ it to hold that $ <var:w> = <var:l> $ prior to evaluating the program , it follows that we see $ <var:v> = <nat:6> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be demonstrated with the following decorated segment of code . \begin{eqnarray} \{ <var:w> = <var:l> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:w> = <var:l> \land <var:r0> = <nat:8> \} \\ <var:r1> := <nat:6> ; \\ \{ <var:w> = <var:l> \land <var:r0> = <nat:8> \land <var:r1> = <nat:6> \} \\ <var:r1> := <var:r1> * <var:w> ; \\ \{ <var:w> = <var:l> \land <var:r0> = <nat:8> \land <var:r1> = <nat:6> \times <var:l> \} \\ <var:v> := <var:r1> ; \\ \{ <var:w> = <var:l> \land <var:r0> = <nat:8> \land <var:v> = <nat:6> \times <var:l> \} \\ <var:v> := <var:v> + <var:r0> \\ \{ <var:w> = <var:l> \land <var:v> = <nat:6> \times <var:l> + <nat:8> \} \end{eqnarray} Using Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:8> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:w> ; <var:v> := <var:r1> ; <var:v> := <var:v> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:w> = <var:l> }} <def:poly> {{ <var:v> = <nat:6> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:r0> = <nat:8> /\ <var:v> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:l> /\ <var:v> = <nat:6> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 