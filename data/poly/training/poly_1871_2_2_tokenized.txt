\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:3> + <var:C> * <var:t> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assuming , given any positive integers $ <var:q> $ , $ <var:t> = <var:q> $ ahead of running this code then we see $ <var:C> = <nat:4> \cdot <var:q> + <nat:3> $ once series of commands executes . \end{theorem} \begin{proof} The argument for this set of commands can be demonstrated by Hoare reasoning . Focusing on the proceeding command contained in the code , we have the variable assignmet line \verb | <var:C> := <nat:4> ; | . This line moves the condition $ \{ <var:t> = <var:q> \} $ to the postcondition $ \{ <var:t> = <var:q> \land <var:C> = <nat:4> \} $ . This is sound with the assignment law obtained from typical Hoare logic . Paying attention to the proceeding step found in our set of instructions , we see the assignment command giving $ <nat:3> + <var:C> * <var:t$ to $ <var:C>$ . This transfers the condition $ \{ <var:t> = <var:q> \land <var:C> = <nat:4> \} $ as the postcondition $ \{ <var:t> = <var:q> \land <var:C> = <nat:4> \times <var:q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:4> ; <var:C> := <nat:3> + <var:C> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:t> = <var:q> }} <def:poly> {{ <var:C> = <nat:4> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:C> = <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 