\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:1> ; <var:x> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:q> = <var:s> $ prior to evaluating this code segment it follows that we see $ <var:x> = <nat:1> $ after list of commands finishes . \end{theorem} \begin{proof} The course of logic for the code can be demonstrated with typical Hoare techniques . Moving forward , we have the variable binding command defining $ <nat:1> $ into $ <var:r0>$ . This code redefines the precondition $ \{ <var:q> = <var:s> \} $ to $ \{ <var:q> = <var:s> \land <var:r0> = <nat:1> \} $ . Going to the next step , we see the variable assignmet line \verb | <var:x> := <var:r0> | . This takes the precondition $ \{ <var:q> = <var:s> \land <var:r0> = <nat:1> \} $ to the postcondition $ \{ <var:q> = <var:s> \land <var:x> = <nat:1> \} $ . This is guaranteed with the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:1> ; <var:x> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:q> = <var:s> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 