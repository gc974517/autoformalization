\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:M1> := <var:m> ; <var:M2> := <var:M1> * <var:m> ; <var:M3> := <var:M2> * <var:m> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:9> ; <var:L> := <var:M3> <var:L> := <var:L> + <var:M2> <var:L> := <var:L> + <var:M1> <var:L> := <var:L> + <var:M0> \end{verbatim} Assuming $ <var:m> = <var:E> $ ahead of the evaluation of our code segment then $ <var:L> = <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions can be seen using typical Hoare techniques . Focusing on the following line of code contained in the series of commands , the environment update statement \verb | <var:M1> := <var:m> ; | . This statement takes the precondition $ \{ <var:m> = <var:E> \} $ toward $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \} $ . This is sound with the assignment law of typical Hoare reasoning . Jumping to the subsequent command in the segment of code , we see the variable update statement yielding $ <var:M1> * <var:m> $ to $ <var:M2>$ . This line redefines the condition $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \} $ toward the condition $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \} $ . Following , the assignment command \verb | <var:M3> := <var:M2> * <var:m> ; | . This redefines the precondition $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \} $ as $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \} $ . This is given through the assignment rule given by Hoare logic . Moving forward , the environment update code binding $ <nat:9> $ into $ <var:M0>$ . This command forwards $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \} $ into $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ . Paying attention to the next bit of code contained in our series of commands , we see the variable binding statement \verb | <var:M1> := <var:M1> * <nat:8> ; | . This line forwards $ \{ <var:m> = <var:E> \land <var:M1> = <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ as the postcondition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ . Going to the next step , we have the assignment command \verb | <var:M2> := <var:M2> * <nat:8> ; | . This command moves the precondition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ toward the condition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ . Going to the next step , we have the environment update code yielding $ <var:M3> * <nat:9> $ to $ <var:M3>$ . This statement redefines the precondition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M3> = <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ to the condition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M3> = <nat:9> * <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ . Next , the environment update code \verb | <var:L> := <var:M3> | . This statement takes the precondition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M3> = <nat:9> * <var:E> ^ <nat:3> \land <var:M0> = <nat:9> \} $ as the condition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> \} $ . This is guaranteed through the assignment law of Hoare techniques . Stepping forward , we have the variable assignmet statement letting $ <var:L> + <var:M2$ as $ <var:L>$ . This takes $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M2> = <nat:8> * <var:E> ^ <nat:2> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> \} $ toward $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> \} $ . Considering the following step contained in the program , the environment update statement binding $ <var:L> + <var:M1$ toward $ <var:L>$ . This forwards the precondition $ \{ <var:m> = <var:E> \land <var:M1> = <nat:8> * <var:E> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> \} $ as $ \{ <var:m> = <var:E> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> \} $ . This is ensured using the assignment rule defined by standard Hoare reasoning . Moving forward , we have the variable update code giving $ <var:L> + <var:M0$ toward $ <var:L>$ . This line takes the precondition $ \{ <var:m> = <var:E> \land <var:M0> = <nat:9> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> \} $ toward the condition $ \{ <var:m> = <var:E> \land <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:m> = <var:E> }} <var:M1> := <var:m> ; <var:M2> := <var:M1> * <var:m> ; <var:M3> := <var:M2> * <var:m> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:9> ; <var:L> := <var:M3> <var:L> := <var:L> + <var:M2> <var:L> := <var:L> + <var:M1> <var:L> := <var:L> + <var:M0> {{ <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <var:E> /\ <var:M2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <var:E> /\ <var:M2> = <var:E> ^ <nat:2> /\ <var:M3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <var:E> /\ <var:M2> = <var:E> ^ <nat:2> /\ <var:M3> = <var:E> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <nat:8> * <var:E> /\ <var:M2> = <var:E> ^ <nat:2> /\ <var:M3> = <var:E> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <nat:8> * <var:E> /\ <var:M2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:M3> = <var:E> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <nat:8> * <var:E> /\ <var:M2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:M3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <nat:8> * <var:E> /\ <var:M2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:M0> = <nat:9> /\ <var:L> = <nat:9> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M1> = <nat:8> * <var:E> /\ <var:M0> = <nat:9> /\ <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:M0> = <nat:9> /\ <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:E> /\ <var:L> = <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 