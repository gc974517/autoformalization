\begin{document} \begin{theorem} Let the following series of instructions as follows \begin{verbatim} <var:R0> := <nat:2> ; <var:P> := <var:R0> \end{verbatim} Given it to be that $ <var:o> = <var:T> $ prior to the execution of this list of commands , then we see $ <var:P> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:T> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:o> = <var:T> \land <var:R0> = <nat:2> \} \\ <var:P> := <var:R0> \\ \{ <var:o> = <var:T> \land <var:P> = <nat:2> \} \end{eqnarray} Utilizing usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:o> = <var:T> }} <var:R0> := <nat:2> ; <var:P> := <var:R0> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 