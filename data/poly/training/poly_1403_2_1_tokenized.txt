\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:8> ; <var:e> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:u> = <var:x> $ given every $ <var:x> \in \mathbb{N} $ ahead of interpreting our program then $ <var:e> = <nat:8> $ when list of commands is done executing . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:u> = <var:x> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:u> = <var:x> \land <var:t0> = <nat:8> \} \\ <var:e> := <var:t0> \\ \{ <var:u> = <var:x> \land <var:e> = <nat:8> \} \end{eqnarray} Thusly , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:8> ; <var:e> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <def:poly> {{ <var:e> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:e> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 