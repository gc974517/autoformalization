\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:v1> := <var:B> ; <var:v2> := <var:v1> * <var:B> ; <var:v3> := <var:v2> * <var:B> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:6> ; <var:v3> := <var:v3> * <nat:1> ; <var:G> := <var:v3> <var:G> := <var:G> + <var:v2> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> \end{verbatim} Allowing , for all natural numbers $ <var:J> $ , that $ <var:B> = <var:J> $ prior to running our code , it holds that we have $ <var:G> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:6> $ after segment of code exits . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is evident with usual Hoare techniques . Observing the proceeding statements contained in the list of commands , we see \begin{verbatim} { <var:B> = <var:J> } <var:v1> := <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> } { <var:B> = <var:J> \land <var:v1> = <var:J> } <var:v2> := <var:v1> * <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> } { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> } <var:v3> := <var:v2> * <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> } { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> } <var:v0> := <nat:6> { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> \land <var:v0> = <nat:6> } { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> \land <var:v0> = <nat:6> } <var:v1> := <var:v1> * <nat:3> { <var:B> = <var:J> \land <var:v1> = <nat:3> \cdot <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> \land <var:v0> = <nat:6> } { <var:B> = <var:J> \land <var:v1> = <nat:3> \cdot <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> \land <var:v0> = <nat:6> } <var:v2> := <var:v2> * <nat:6> { <var:B> = <var:J> \land <var:v1> = <nat:3> \cdot <var:J> \land <var:v2> = <nat:6> \cdot <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> \land <var:v0> = <nat:6> } \end{verbatim} This is shown by the assignment rule given by typical Hoare reasoning . Paying attention to the upcoming commands found in the code segment , we have \begin{verbatim} { <var:B> = <var:J> } <var:v1> := <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> } { <var:B> = <var:J> \land <var:v1> = <var:J> } <var:v2> := <var:v1> * <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> } { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> } <var:v3> := <var:v2> * <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> \land <var:v2> = <var:J> ^ <nat:2> \land <var:v3> = <var:J> ^ <nat:3> } \end{verbatim} This is deduced using the inference rule defined by usual Hoare techniques . Moving forward to the next step , \begin{verbatim} { <var:B> = <var:J> } <var:v1> := <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> } \end{verbatim} Going forward , we see \begin{verbatim} { <var:B> = <var:J> } <var:v1> := <var:B> { <var:B> = <var:J> \land <var:v1> = <var:J> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:B> = <var:J> }} <var:v1> := <var:B> ; <var:v2> := <var:v1> * <var:B> ; <var:v3> := <var:v2> * <var:B> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:6> ; <var:v3> := <var:v3> * <nat:1> ; <var:G> := <var:v3> <var:G> := <var:G> + <var:v2> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> {{ <var:G> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <var:J> /\ <var:v2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <var:J> /\ <var:v2> = <var:J> ^ <nat:2> /\ <var:v3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <var:J> /\ <var:v2> = <var:J> ^ <nat:2> /\ <var:v3> = <var:J> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <nat:3> * <var:J> /\ <var:v2> = <var:J> ^ <nat:2> /\ <var:v3> = <var:J> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <nat:3> * <var:J> /\ <var:v2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:v3> = <var:J> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <nat:3> * <var:J> /\ <var:v2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <nat:3> * <var:J> /\ <var:v2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v1> = <nat:3> * <var:J> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:G> = <nat:1> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 