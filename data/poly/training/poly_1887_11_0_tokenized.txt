\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:g0> := <nat:1> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:E> ; <var:g2> := <var:g2> * <var:E> ; <var:g3> := <nat:9> ; <var:g3> := <var:g3> * <var:E> ; <var:g3> := <var:g3> * <var:E> ; <var:g3> := <var:g3> * <var:E> ; <var:m> := <var:g3> ; <var:m> := <var:m> + <var:g2> ; <var:m> := <var:m> + <var:g0> \end{verbatim} Assuming $ <var:E> = <var:l> $ , for some $ <var:l> $ , ahead of evaluating this code segment then $ <var:m> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:5> \cdot <var:l> ^ <nat:2> + <nat:1> $ when list of commands terminates . \end{theorem} \begin{proof} The method of proof for this set of instructions is clear using Hoare logic . Advancing to the upcoming lines of codecontained in the code , we see \verb | { <var:E> = <var:l> } <var:g0> := <nat:1> { <var:E> = <var:l> \land <var:g0> = <nat:1> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> } <var:g2> := <nat:5> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> } <var:g2> := <var:g2> * <var:E> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> } <var:g2> := <var:g2> * <var:E> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> } <var:g3> := <nat:9> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> } <var:g3> := <var:g3> * <var:E> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> } <var:g3> := <var:g3> * <var:E> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> ^ <nat:2> } | , \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> ^ <nat:2> } <var:g3> := <var:g3> * <var:E> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> ^ <nat:3> } | and \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:l> ^ <nat:3> } <var:m> := <var:g3> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> \cdot <var:l> ^ <nat:2> \land <var:m> = <nat:9> \cdot <var:l> ^ <nat:3> } | . This is given with the inference rule in standard Hoare reasoning . Following , we have \verb | { <var:E> = <var:l> } <var:g0> := <nat:1> { <var:E> = <var:l> \land <var:g0> = <nat:1> } | and \verb | { <var:E> = <var:l> \land <var:g0> = <nat:1> } <var:g2> := <nat:5> { <var:E> = <var:l> \land <var:g0> = <nat:1> \land <var:g2> = <nat:5> } | . This is deduced through the variable assignmet inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:E> = <var:l> }} <var:g0> := <nat:1> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:E> ; <var:g2> := <var:g2> * <var:E> ; <var:g3> := <nat:9> ; <var:g3> := <var:g3> * <var:E> ; <var:g3> := <var:g3> * <var:E> ; <var:g3> := <var:g3> * <var:E> ; <var:m> := <var:g3> ; <var:m> := <var:m> + <var:g2> ; <var:m> := <var:m> + <var:g0> {{ <var:m> = <nat:9> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:g2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:m> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:g0> = <nat:1> /\ <var:m> = <nat:9> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:m> = <nat:9> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 