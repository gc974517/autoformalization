\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:q> ; <var:g> := <var:K1> ; <var:g> := <var:g> + <var:K0> \end{verbatim} Given that $ <var:q> = <var:M> $ before the execution of this code segment , it holds that we see $ <var:g> = <nat:1> \times <var:M> + <nat:6> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:q> = <var:M> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:q> = <var:M> \land <var:K0> = <nat:6> \} \\ <var:K1> := <nat:1> ; \\ \{ <var:q> = <var:M> \land <var:K0> = <nat:6> \land <var:K1> = <nat:1> \} \\ <var:K1> := <var:K1> * <var:q> ; \\ \{ <var:q> = <var:M> \land <var:K0> = <nat:6> \land <var:K1> = <nat:1> * <var:M> \} \\ <var:g> := <var:K1> ; \\ \{ <var:q> = <var:M> \land <var:K0> = <nat:6> \land <var:g> = <nat:1> * <var:M> \} \\ <var:g> := <var:g> + <var:K0> \\ \{ <var:q> = <var:M> \land <var:g> = <nat:1> * <var:M> + <nat:6> \} \end{eqnarray} As a consequence , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:q> = <var:M> }} <var:K0> := <nat:6> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:q> ; <var:g> := <var:K1> ; <var:g> := <var:g> + <var:K0> {{ <var:g> = <nat:1> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:K0> = <nat:6> /\ <var:g> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:g> = <nat:1> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 