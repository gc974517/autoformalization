\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:W> ; <var:t2> := <var:t1> * <var:W> ; <var:t3> := <var:t2> * <var:W> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:6> ; <var:t3> := <var:t3> * <nat:3> ; <var:h> := <var:t3> <var:h> := <var:h> + <var:t2> <var:h> := <var:h> + <var:t1> <var:h> := <var:h> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:W> = <var:E> $ prior to the execution of our program then $ <var:h> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:7> $ . \end{theorem} \begin{proof} The argument for our code segment is evident using usual Hoare reasoning . Moving on to the following lines of codein our series of instructions , we see \begin{verbatim} { <var:W> = <var:E> } <var:t1> := <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> } { <var:W> = <var:E> \land <var:t1> = <var:E> } <var:t2> := <var:t1> * <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> } { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> } <var:t3> := <var:t2> * <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> } { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> } <var:t0> := <nat:7> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } <var:t1> := <var:t1> * <nat:9> { <var:W> = <var:E> \land <var:t1> = <nat:9> \cdot <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } { <var:W> = <var:E> \land <var:t1> = <nat:9> \cdot <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } <var:t2> := <var:t2> * <nat:6> { <var:W> = <var:E> \land <var:t1> = <nat:9> \cdot <var:E> \land <var:t2> = <nat:6> \cdot <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } { <var:W> = <var:E> \land <var:t1> = <nat:9> \cdot <var:E> \land <var:t2> = <nat:6> \cdot <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } <var:t3> := <var:t3> * <nat:3> { <var:W> = <var:E> \land <var:t1> = <nat:9> \cdot <var:E> \land <var:t2> = <nat:6> \cdot <var:E> ^ <nat:2> \land <var:t3> = <nat:3> \cdot <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } \end{verbatim} This is given through the variable assignmet law defined in Hoare reasoning . Moving forward to the next step , we have \begin{verbatim} { <var:W> = <var:E> } <var:t1> := <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> } { <var:W> = <var:E> \land <var:t1> = <var:E> } <var:t2> := <var:t1> * <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> } { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> } <var:t3> := <var:t2> * <var:W> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> } { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> } <var:t0> := <nat:7> { <var:W> = <var:E> \land <var:t1> = <var:E> \land <var:t2> = <var:E> ^ <nat:2> \land <var:t3> = <var:E> ^ <nat:3> \land <var:t0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:W> ; <var:t2> := <var:t1> * <var:W> ; <var:t3> := <var:t2> * <var:W> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:9> ; <var:t2> := <var:t2> * <nat:6> ; <var:t3> := <var:t3> * <nat:3> ; <var:h> := <var:t3> <var:h> := <var:h> + <var:t2> <var:h> := <var:h> + <var:t1> <var:h> := <var:h> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <def:poly> {{ <var:h> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <nat:9> * <var:E> /\ <var:t2> = <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <nat:9> * <var:E> /\ <var:t2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:t3> = <var:E> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <nat:9> * <var:E> /\ <var:t2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <nat:9> * <var:E> /\ <var:t2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:t0> = <nat:7> /\ <var:h> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t1> = <nat:9> * <var:E> /\ <var:t0> = <nat:7> /\ <var:h> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:t0> = <nat:7> /\ <var:h> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:h> = <nat:3> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 