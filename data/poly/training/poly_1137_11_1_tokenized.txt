\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:u1> := <var:x> ; <var:u2> := <var:u1> * <var:x> ; <var:u3> := <var:u2> * <var:x> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:1> ; <var:u3> := <var:u3> * <nat:3> ; <var:e> := <var:u3> <var:e> := <var:e> + <var:u2> <var:e> := <var:e> + <var:u1> <var:e> := <var:e> + <var:u0> \end{verbatim} Given that $ <var:x> = <var:v> $ before evaluating this list of instructions , it follows that $ <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:3> $ once set of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be demonstrated with typical Hoare techniques . Keeping momentum , we see the variable update command \verb | <var:u1> := <var:x> ; | . This redefines the precondition $ \{ <var:x> = <var:v> \} $ as the condition $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \} $ . This is guaranteed by the assignment rule given by standard Hoare reasoning . Advancing to the next step , we have the variable update code \verb | <var:u2> := <var:u1> * <var:x> ; | . This statement takes the precondition $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \} $ toward $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \} $ . Honing in on the next piece of code contained in the list of instructions , we have the binding command \verb | <var:u3> := <var:u2> * <var:x> ; | . This line takes $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \} $ as the condition $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \} $ . Moving forward to the subsequent statement contained in our set of commands , the environment update statement \verb | <var:u0> := <nat:3> ; | . This line takes $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \} $ into the postcondition $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ . This is sound through the assignment inference rule from typical Hoare techniques . Going forward , we have the assignment command yielding $ <var:u1> * <nat:4> $ to $ <var:u1>$ . This command advances the condition $ \{ <var:x> = <var:v> \land <var:u1> = <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ into the postcondition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ . Keeping momentum , we see the variable update line \verb | <var:u2> := <var:u2> * <nat:1> ; | . This moves the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ as the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ . Moving forward to the upcoming statement found in our code segment , we have the environment update statement assigning $ <var:u3> * <nat:3> $ toward $ <var:u3>$ . This forwards the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u3> = <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ into the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ . Taking a look at the subsequent piece of code in the segment of code , we have the variable binding code \verb | <var:e> := <var:u3> | . This takes the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u3> = <nat:3> \times <var:v> ^ <nat:3> \land <var:u0> = <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> \} $ . This is sound by the assignment rule given by usual Hoare logic . Moving forward to the next step , we see the variable assignmet line giving $ <var:e> + <var:u2$ toward $ <var:e>$ . This command transfers the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> \} $ into the condition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> \} $ . Advancing to the next step , we see the code \verb | <var:e> := <var:e> + <var:u1> | . This statement transfers the precondition $ \{ <var:x> = <var:v> \land <var:u1> = <nat:4> \times <var:v> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> \} $ toward $ \{ <var:x> = <var:v> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> \} $ . Going forward , we see the statement giving $ <var:e> + <var:u0$ into $ <var:e>$ . This command takes the condition $ \{ <var:x> = <var:v> \land <var:u0> = <nat:3> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> \} $ into $ \{ <var:x> = <var:v> \land <var:e> = <nat:3> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:x> = <var:v> }} <var:u1> := <var:x> ; <var:u2> := <var:u1> * <var:x> ; <var:u3> := <var:u2> * <var:x> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:1> ; <var:u3> := <var:u3> * <nat:3> ; <var:e> := <var:u3> <var:e> := <var:e> + <var:u2> <var:e> := <var:e> + <var:u1> <var:e> := <var:e> + <var:u0> {{ <var:e> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <var:v> /\ <var:u2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <var:v> /\ <var:u2> = <var:v> ^ <nat:2> /\ <var:u3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <var:v> /\ <var:u2> = <var:v> ^ <nat:2> /\ <var:u3> = <var:v> ^ <nat:3> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <nat:4> * <var:v> /\ <var:u2> = <var:v> ^ <nat:2> /\ <var:u3> = <var:v> ^ <nat:3> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <nat:4> * <var:v> /\ <var:u2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:u3> = <var:v> ^ <nat:3> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <nat:4> * <var:v> /\ <var:u2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <nat:4> * <var:v> /\ <var:u2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:u0> = <nat:3> /\ <var:e> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u1> = <nat:4> * <var:v> /\ <var:u0> = <nat:3> /\ <var:e> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:u0> = <nat:3> /\ <var:e> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:e> = <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 