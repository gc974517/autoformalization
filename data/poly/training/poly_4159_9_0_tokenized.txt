\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:5> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:X> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:X> ; <var:H2> := <var:H2> * <var:X> ; <var:J> := <var:H2> ; <var:J> := <var:J> + <var:H1> ; <var:J> := <var:J> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:X> = <var:f> $ ahead of executing the set of instructions it must be that we see $ <var:J> = <nat:6> \cdot <var:f> ^ <nat:2> + <nat:3> \cdot <var:f> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is evident using standard Hoare logic . Now , we have \verb | { <var:X> = <var:f> } <var:H0> := <nat:5> { <var:X> = <var:f> \land <var:H0> = <nat:5> } | . This is shown to be logically sound by the assignment rule defined in Hoare reasoning . Honing in on the following lines contained in the set of instructions , \verb | { <var:X> = <var:f> } <var:H0> := <nat:5> { <var:X> = <var:f> \land <var:H0> = <nat:5> } | , \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> } <var:H1> := <nat:3> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> } | , \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> } <var:H1> := <var:H1> * <var:X> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> } | , \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> } <var:H2> := <nat:6> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> \land <var:H2> = <nat:6> } | , \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> \land <var:H2> = <nat:6> } <var:H2> := <var:H2> * <var:X> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> \land <var:H2> = <nat:6> * <var:f> } | and \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> \land <var:H2> = <nat:6> * <var:f> } <var:H2> := <var:H2> * <var:X> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> * <var:f> \land <var:H2> = <nat:6> * <var:f> ^ <nat:2> } | . Focusing on the upcoming pieces of code found in our set of instructions , we have \verb | { <var:X> = <var:f> } <var:H0> := <nat:5> { <var:X> = <var:f> \land <var:H0> = <nat:5> } | and \verb | { <var:X> = <var:f> \land <var:H0> = <nat:5> } <var:H1> := <nat:3> { <var:X> = <var:f> \land <var:H0> = <nat:5> \land <var:H1> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:X> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:X> ; <var:H2> := <var:H2> * <var:X> ; <var:J> := <var:H2> ; <var:J> := <var:J> + <var:H1> ; <var:J> := <var:J> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:X> = <var:f> }} <def:poly> {{ <var:J> = <nat:6> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> * <var:f> /\ <var:H2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> * <var:f> /\ <var:H2> = <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> * <var:f> /\ <var:H2> = <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:H1> = <nat:3> * <var:f> /\ <var:J> = <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:H0> = <nat:5> /\ <var:J> = <nat:6> * <var:f> ^ <nat:2> + <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:J> = <nat:6> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 