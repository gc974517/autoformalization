\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:x> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:x> ; <var:a2> := <var:a2> * <var:x> ; <var:q> := <var:a2> ; <var:q> := <var:q> + <var:a1> ; <var:q> := <var:q> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given --- with some positive integers $ <var:g> $ --- it to be that $ <var:x> = <var:g> $ prior to the execution of the code segment , then we see $ <var:q> = <nat:1> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands is accomplished using standard Hoare logic . Advancing to the subsequent commands contained in our code segment , \verb | { <var:x> = <var:g> } <var:a0> := <nat:3> { <var:x> = <var:g> \land <var:a0> = <nat:3> } | , \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> } <var:a1> := <nat:2> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } | , \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } <var:a1> := <var:a1> * <var:x> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> } | , \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> } <var:a2> := <nat:1> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> } | , \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> } <var:a2> := <var:a2> * <var:x> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> \cdot <var:g> } | , \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> \cdot <var:g> } <var:a2> := <var:a2> * <var:x> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> \cdot <var:g> ^ <nat:2> } | and \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:a2> = <nat:1> \cdot <var:g> ^ <nat:2> } <var:q> := <var:a2> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> \cdot <var:g> \land <var:q> = <nat:1> \cdot <var:g> ^ <nat:2> } | . This is shown to be logically sound with the environment update rule in usual Hoare techniques . Moving forward to the next step , we see \verb | { <var:x> = <var:g> } <var:a0> := <nat:3> { <var:x> = <var:g> \land <var:a0> = <nat:3> } | and \verb | { <var:x> = <var:g> \land <var:a0> = <nat:3> } <var:a1> := <nat:2> { <var:x> = <var:g> \land <var:a0> = <nat:3> \land <var:a1> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:x> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:x> ; <var:a2> := <var:a2> * <var:x> ; <var:q> := <var:a2> ; <var:q> := <var:q> + <var:a1> ; <var:q> := <var:q> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:x> = <var:g> }} <def:poly> {{ <var:q> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:g> /\ <var:a2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:g> /\ <var:a2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:g> /\ <var:a2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:2> * <var:g> /\ <var:q> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:a0> = <nat:3> /\ <var:q> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:g> /\ <var:q> = <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 