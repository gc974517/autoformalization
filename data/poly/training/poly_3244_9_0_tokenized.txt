\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:O> ; <var:P2> := <nat:1> ; <var:P2> := <var:P2> * <var:O> ; <var:P2> := <var:P2> * <var:O> ; <var:d> := <var:P2> ; <var:d> := <var:d> + <var:P1> ; <var:d> := <var:d> + <var:P0> \end{verbatim} Assume that $ <var:O> = <var:m> $ prior to evaluating our set of instructions it must be that $ <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> $ once series of commands terminates . \end{theorem} \begin{proof} Proving correctness for our segment of code is shown through the below decorated code . \begin{eqnarray} \{ <var:O> = <var:m> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \} \\ <var:P1> := <nat:4> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> \} \\ <var:P1> := <var:P1> * <var:O> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:m> \} \\ <var:P2> := <nat:1> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:m> \land <var:P2> = <nat:1> \} \\ <var:P2> := <var:P2> * <var:O> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:m> \land <var:P2> = <nat:1> * <var:m> \} \\ <var:P2> := <var:P2> * <var:O> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:m> \land <var:P2> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:d> := <var:P2> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> * <var:m> \land <var:d> = <nat:1> * <var:m> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:P1> ; \\ \{ <var:O> = <var:m> \land <var:P0> = <nat:4> \land <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> \} \\ <var:d> := <var:d> + <var:P0> \\ \{ <var:O> = <var:m> \land <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:O> = <var:m> }} <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:O> ; <var:P2> := <nat:1> ; <var:P2> := <var:P2> * <var:O> ; <var:P2> := <var:P2> * <var:O> ; <var:d> := <var:P2> ; <var:d> := <var:d> + <var:P1> ; <var:d> := <var:d> + <var:P0> {{ <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:m> /\ <var:P2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:m> /\ <var:P2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:m> /\ <var:P2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:m> /\ <var:d> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:P0> = <nat:4> /\ <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:m> /\ <var:d> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 