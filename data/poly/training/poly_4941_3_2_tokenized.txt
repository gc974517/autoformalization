\begin{document} \begin{theorem} Define a code in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:2> ; <var:V> := <nat:2> + <var:V> * <var:B> ; <var:V> := <nat:4> + <var:V> * <var:B> \end{verbatim} Assuming it to be that $ <var:B> = <var:o> $ letting $ <var:o> \in \mathbb{Z}^+ $ before interpreting this segment of code , it must be that we have $ <var:V> = <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:o> \} \\ <var:V> := <nat:2> ; \\ \{ <var:B> = <var:o> \land <var:V> = <nat:2> \} \\ <var:V> := <nat:2> + <var:V> * <var:B> ; \\ \{ <var:B> = <var:o> \land <var:V> = <nat:2> * <var:o> + <nat:2> \} \\ <var:V> := <nat:4> + <var:V> * <var:B> \\ \{ <var:B> = <var:o> \land <var:V> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> \} \end{eqnarray} Using standard Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:B> = <var:o> }} <var:V> := <nat:2> ; <var:V> := <nat:2> + <var:V> * <var:B> ; <var:V> := <nat:4> + <var:V> * <var:B> {{ <var:V> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:V> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:V> = <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:V> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 