\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:m> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:m> ; <var:v2> := <var:v2> * <var:m> ; <var:j> := <var:v2> ; <var:j> := <var:j> + <var:v1> ; <var:j> := <var:j> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:m> = <var:W> $ for every positive integers $ <var:W> $ before the evaluation of our set of commands , it must be that we see $ <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is evident with usual Hoare reasoning . Shifting focus toward the upcoming line of code seen in our series of instructions , we have the code \verb | <var:v0> := <nat:3> ; | . This advances the condition $ \{ <var:m> = <var:W> \} $ toward the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \} $ . Following , we have the variable update code binding $ <nat:2> $ toward $ <var:v1>$ . This code forwards $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \} $ . Honing in on the subsequent line of code contained in our code , the environment update command giving $ <var:v1> * <var:m> $ into $ <var:v1>$ . This takes the precondition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \} $ . Moving on to the following step contained in our code , we see the binding line defining $ <nat:2> $ to $ <var:v2>$ . This advances the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \} $ toward $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \} $ . Advancing to the next step , we have the command letting $ <var:v2> * <var:m> $ into $ <var:v2>$ . This redefines the precondition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \} $ toward the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \cdot <var:W> \} $ . Stepping forward , we see the variable binding code \verb | <var:v2> := <var:v2> * <var:m> ; | . This command moves $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \cdot <var:W> \} $ as $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \cdot <var:W> ^ <nat:2> \} $ . This is known to be sound by the assignment scheme obtained from standard Hoare techniques . Moving forward , we have the variable binding line assigning $ <var:v2> $ toward $ <var:j>$ . This advances $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:v2> = <nat:2> \cdot <var:W> ^ <nat:2> \} $ toward $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> \} $ . Jumping to the upcoming line of code contained in our code segment , we see the assignment code \verb | <var:j> := <var:j> + <var:v1> ; | . This code takes the precondition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:v1> = <nat:2> \cdot <var:W> \land <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> \} $ into the condition $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> \} $ . Immediately following , we see the variable assignmet statement defining $ <var:j> + <var:v0$ to $ <var:j>$ . This command redefines $ \{ <var:m> = <var:W> \land <var:v0> = <nat:3> \land <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> \} $ toward $ \{ <var:m> = <var:W> \land <var:j> = <nat:2> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> \} $ . This is deduced through the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:3> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:m> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:m> ; <var:v2> := <var:v2> * <var:m> ; <var:j> := <var:v2> ; <var:j> := <var:j> + <var:v1> ; <var:j> := <var:j> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:m> = <var:W> }} <def:poly> {{ <var:j> = <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> * <var:W> /\ <var:v2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> * <var:W> /\ <var:v2> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> * <var:W> /\ <var:v2> = <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:2> * <var:W> /\ <var:j> = <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:v0> = <nat:3> /\ <var:j> = <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:W> /\ <var:j> = <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 