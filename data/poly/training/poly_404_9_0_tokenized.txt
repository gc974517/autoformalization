\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:5> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:D> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:D> ; <var:g2> := <var:g2> * <var:D> ; <var:S> := <var:g2> ; <var:S> := <var:S> + <var:g1> ; <var:S> := <var:S> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assuming it to hold that $ <var:D> = <var:o> $ before running this set of instructions it follows that we have $ <var:S> = <nat:6> \times <var:o> ^ <nat:2> + <nat:9> \times <var:o> + <nat:5> $ when series of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be done using typical Hoare reasoning . Considering the subsequent statement found in our segment of code , the variable binding line assigning $ <nat:5> $ as $ <var:g0>$ . This line redefines $ \{ <var:D> = <var:o> \} $ as $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \} $ . This is shown to be logically sound by the assignment law defined by standard Hoare techniques . Following , we have the assignment command defining $ <nat:9> $ as $ <var:g1>$ . This code advances the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \} $ as the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \} $ . Moving on to the next step , the binding code letting $ <var:g1> * <var:D> $ into $ <var:g1>$ . This command forwards $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \} $ toward the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \} $ . Looking at the subsequent command seen in our program , we see the variable update line \verb | <var:g2> := <nat:6> ; | . This forwards the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \} $ toward the postcondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \} $ . Keeping momentum , we see the line \verb | <var:g2> := <var:g2> * <var:D> ; | . This transfers the precondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \} $ toward $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \cdot <var:o> \} $ . Honing in on the next command in our set of instructions , we see the variable binding statement yielding $ <var:g2> * <var:D> $ toward $ <var:g2>$ . This code takes the precondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \cdot <var:o> \} $ to the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \cdot <var:o> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment scheme defined by typical Hoare reasoning . Moving on , the environment update statement \verb | <var:S> := <var:g2> ; | . This redefines the condition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:g2> = <nat:6> \cdot <var:o> ^ <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:S> = <nat:6> \cdot <var:o> ^ <nat:2> \} $ . Going to the next step , we have the variable update statement giving $ <var:S> + <var:g1> $ toward $ <var:S>$ . This line forwards the precondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:g1> = <nat:9> \cdot <var:o> \land <var:S> = <nat:6> \cdot <var:o> ^ <nat:2> \} $ toward the postcondition $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:S> = <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> \} $ . Looking at the next command contained in the segment of code , we see the assignment code \verb | <var:S> := <var:S> + <var:g0> | . This code transfers $ \{ <var:D> = <var:o> \land <var:g0> = <nat:5> \land <var:S> = <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> \} $ toward the condition $ \{ <var:D> = <var:o> \land <var:S> = <nat:6> \cdot <var:o> ^ <nat:2> + <nat:9> \cdot <var:o> + <nat:5> \} $ . This is known to be sound through the assignment inference rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:5> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:D> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:D> ; <var:g2> := <var:g2> * <var:D> ; <var:S> := <var:g2> ; <var:S> := <var:S> + <var:g1> ; <var:S> := <var:S> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:D> = <var:o> }} <def:poly> {{ <var:S> = <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> * <var:o> /\ <var:g2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> * <var:o> /\ <var:g2> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> * <var:o> /\ <var:g2> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:9> * <var:o> /\ <var:S> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:g0> = <nat:5> /\ <var:S> = <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:o> /\ <var:S> = <nat:6> * <var:o> ^ <nat:2> + <nat:9> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 