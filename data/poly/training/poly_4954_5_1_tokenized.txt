\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:S> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:2> ; <var:t> := <var:D1> <var:t> := <var:t> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Given that $ <var:S> = <var:e> $ for every natural coefficients $ <var:e> $ ahead of executing the set of instructions , it holds that we have $ <var:t> = <nat:2> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is accomplished using Hoare logic . Observing the following commands contained in the set of instructions , we see \begin{verbatim} { <var:S> = <var:e> } <var:D1> := <var:S> { <var:S> = <var:e> \land <var:D1> = <var:e> } { <var:S> = <var:e> \land <var:D1> = <var:e> } <var:D0> := <nat:4> { <var:S> = <var:e> \land <var:D1> = <var:e> \land <var:D0> = <nat:4> } { <var:S> = <var:e> \land <var:D1> = <var:e> \land <var:D0> = <nat:4> } <var:D1> := <var:D1> * <nat:2> { <var:S> = <var:e> \land <var:D1> = <nat:2> \times <var:e> \land <var:D0> = <nat:4> } \end{verbatim} This is shown to be logically sound by the variable update law defined in Hoare logic . Moving forward to the next step , we see \begin{verbatim} { <var:S> = <var:e> } <var:D1> := <var:S> { <var:S> = <var:e> \land <var:D1> = <var:e> } \end{verbatim} This is shown to be logically sound using the variable update law of standard Hoare logic . Moving forward to the next step , we see \begin{verbatim} { <var:S> = <var:e> } <var:D1> := <var:S> { <var:S> = <var:e> \land <var:D1> = <var:e> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:S> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:2> ; <var:t> := <var:D1> <var:t> := <var:t> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <def:poly> {{ <var:t> = <nat:2> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:D1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:D1> = <var:e> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:D1> = <nat:2> * <var:e> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:D0> = <nat:4> /\ <var:t> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:t> = <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 