\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:e> ; <var:I> := <var:J1> ; <var:I> := <var:I> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:e> = <var:K> $ ahead of the execution of this set of instructions then we have $ <var:I> = <nat:4> \times <var:K> + <nat:6> $ . \end{theorem} \begin{proof} The argument for this series of instructions is accomplished by Hoare techniques . Moving on to the subsequent step in our program , we have the code assigning $ <nat:6> $ to $ <var:J0>$ . This line redefines $ \{ <var:e> = <var:K> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \} $ . This is given using the assignment rule obtained from usual Hoare reasoning . Shifting focus toward the upcoming piece of code in the set of instructions , the assignment line assigning $ <nat:4> $ into $ <var:J1>$ . This transfers $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> \} $ . Looking at the following line found in the list of instructions , we have the variable assignmet command \verb | <var:J1> := <var:J1> * <var:e> ; | . This forwards the precondition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> \cdot <var:K> \} $ . This is deduced using the assignment inference rule given in usual Hoare techniques . Moving on to the next step , we have the variable binding command \verb | <var:I> := <var:J1> ; | . This redefines the condition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:J1> = <nat:4> \cdot <var:K> \} $ as $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:I> = <nat:4> \cdot <var:K> \} $ . Looking at the next step in the code segment , we have the variable binding code giving $ <var:I> + <var:J0$ into $ <var:I>$ . This forwards the precondition $ \{ <var:e> = <var:K> \land <var:J0> = <nat:6> \land <var:I> = <nat:4> \cdot <var:K> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:I> = <nat:4> \cdot <var:K> + <nat:6> \} $ . This is known to be sound by the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:e> ; <var:I> := <var:J1> ; <var:I> := <var:I> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <def:poly> {{ <var:I> = <nat:4> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:J0> = <nat:6> /\ <var:I> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I> = <nat:4> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 