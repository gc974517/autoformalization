\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:b> ; <var:D> := <var:g1> ; <var:D> := <var:D> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Assume it to be that $ <var:b> = <var:S> $ ahead of the execution of this program then $ <var:D> = <nat:9> \cdot <var:S> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be demonstrated using typical Hoare logic . Honing in on the next line of code contained in the list of commands , the assignment statement defining $ <nat:2> $ into $ <var:g0>$ . This statement advances the precondition $ \{ <var:b> = <var:S> \} $ to the condition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \} $ . Moving on to the next step , we have the assignment statement binding $ <nat:9> $ to $ <var:g1>$ . This code transfers the precondition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \} $ toward $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:g1> = <nat:9> \} $ . This is shown through the assignment rule from typical Hoare reasoning . Paying attention to the following line of code in the program , we have the variable assignmet line \verb | <var:g1> := <var:g1> * <var:b> ; | . This command moves the precondition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:g1> = <nat:9> \} $ as the condition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:g1> = <nat:9> \cdot <var:S> \} $ . Jumping to the next line found in our series of instructions , the assignment line \verb | <var:D> := <var:g1> ; | . This takes the condition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:g1> = <nat:9> \cdot <var:S> \} $ as the postcondition $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:D> = <nat:9> \cdot <var:S> \} $ . This is rigorously given through the assignment inference rule from standard Hoare logic . Advancing on , the environment update line assigning $ <var:D> + <var:g0$ into $ <var:D>$ . This moves $ \{ <var:b> = <var:S> \land <var:g0> = <nat:2> \land <var:D> = <nat:9> \cdot <var:S> \} $ into $ \{ <var:b> = <var:S> \land <var:D> = <nat:9> \cdot <var:S> + <nat:2> \} $ . This is shown through the assignment inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:9> ; <var:g1> := <var:g1> * <var:b> ; <var:D> := <var:g1> ; <var:D> := <var:D> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <def:poly> {{ <var:D> = <nat:9> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:g0> = <nat:2> /\ <var:D> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:D> = <nat:9> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 