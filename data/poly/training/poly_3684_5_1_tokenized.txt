\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:l> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:1> ; <var:I> := <var:P1> <var:I> := <var:I> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:l> = <var:c> $ , with some whole numbers $ <var:c> $ , before the execution of our list of commands , it follows that we have $ <var:I> = <nat:1> \cdot <var:c> + <nat:4> $ after series of instructions is done . \end{theorem} \begin{proof} The method of proof for our code is given through typical Hoare logic . Advancing on , the variable binding line \verb | <var:P1> := <var:l> ; | . This line moves the condition $ \{ <var:l> = <var:c> \} $ toward the condition $ \{ <var:l> = <var:c> \land <var:P1> = <var:c> \} $ . Focusing on the upcoming piece of code in our list of instructions , we see the assignment statement \verb | <var:P0> := <nat:4> ; | . This line transfers the condition $ \{ <var:l> = <var:c> \land <var:P1> = <var:c> \} $ into the condition $ \{ <var:l> = <var:c> \land <var:P1> = <var:c> \land <var:P0> = <nat:4> \} $ . This is known to be sound by the assignment inference rule from Hoare techniques . Observing the upcoming line of code contained in our series of instructions , the environment update command \verb | <var:P1> := <var:P1> * <nat:1> ; | . This takes the condition $ \{ <var:l> = <var:c> \land <var:P1> = <var:c> \land <var:P0> = <nat:4> \} $ into $ \{ <var:l> = <var:c> \land <var:P1> = <nat:1> \cdot <var:c> \land <var:P0> = <nat:4> \} $ . This is ensured through the assignment scheme from standard Hoare logic . Paying attention to the following piece of code found in our segment of code , the binding code letting $ <var:P1$ as $ <var:I>$ . This code moves $ \{ <var:l> = <var:c> \land <var:P1> = <nat:1> \cdot <var:c> \land <var:P0> = <nat:4> \} $ into $ \{ <var:l> = <var:c> \land <var:P0> = <nat:4> \land <var:I> = <nat:1> \cdot <var:c> \} $ . Advancing , the variable update line binding $ <var:I> + <var:P0$ into $ <var:I>$ . This redefines the condition $ \{ <var:l> = <var:c> \land <var:P0> = <nat:4> \land <var:I> = <nat:1> \cdot <var:c> \} $ toward $ \{ <var:l> = <var:c> \land <var:I> = <nat:1> \cdot <var:c> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P1> := <var:l> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:1> ; <var:I> := <var:P1> <var:I> := <var:I> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:l> = <var:c> }} <def:poly> {{ <var:I> = <nat:1> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:P1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:P1> = <var:c> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:P1> = <nat:1> * <var:c> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:P0> = <nat:4> /\ <var:I> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:c> /\ <var:I> = <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 