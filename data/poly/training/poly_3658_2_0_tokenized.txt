\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:1> ; <var:X> := <var:k0> \end{verbatim} Given , with some integers $ <var:d> $ , that we have $ <var:p> = <var:d> $ prior to interpreting this set of instructions , it follows that we see $ <var:X> = <nat:1> $ once list of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:d> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:p> = <var:d> \land <var:k0> = <nat:1> \} \\ <var:X> := <var:k0> \\ \{ <var:p> = <var:d> \land <var:X> = <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:p> = <var:d> }} <var:k0> := <nat:1> ; <var:X> := <var:k0> {{ <var:X> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:X> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 