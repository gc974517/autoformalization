\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:e> = <var:B> $ --- with some positive numbers $ <var:B> $ --- ahead of evaluating the segment of code then we see $ <var:v> = <nat:1> * <var:B> + <nat:4> $ after series of commands exits . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives : \begin{eqnarray} \{ <var:e> = <var:B> \} \\ <var:v> := <nat:1> ; \\ \{ <var:e> = <var:B> \land <var:v> = <nat:1> \} \\ <var:v> := <nat:4> + <var:v> * <var:e> \\ \{ <var:e> = <var:B> \land <var:v> = <nat:1> \cdot <var:B> + <nat:4> \} \end{eqnarray} As a consequence , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:4> + <var:v> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <def:poly> {{ <var:v> = <nat:1> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:v> = <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 