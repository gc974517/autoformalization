\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:4> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:j> ; <var:B> := <var:R1> ; <var:B> := <var:B> + <var:R0> \end{verbatim} Given for any $ <var:h> $ it to hold that $ <var:j> = <var:h> $ prior to the evaluation of this code then $ <var:B> = <nat:3> \times <var:h> + <nat:4> $ once code exits . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be shown through usual Hoare techniques . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:h> \} & <var:R0> := <nat:4> & \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \} \\ \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \} & <var:R1> := <nat:3> & \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:R1> = <nat:3> \} \\ \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:R1> = <nat:3> \} & <var:R1> := <var:R1> * <var:j> & \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:R1> = <nat:3> \times <var:h> \} \\ \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:R1> = <nat:3> \times <var:h> \} & <var:B> := <var:R1> & \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:B> = <nat:3> \times <var:h> \} \\ \{ <var:j> = <var:h> \land <var:R0> = <nat:4> \land <var:B> = <nat:3> \times <var:h> \} & <var:B> := <var:B> + <var:R0& \{ <var:j> = <var:h> \land <var:B> = <nat:3> \times <var:h> + <nat:4> \} \end{tabular} This is guaranteed through the scheme given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:j> = <var:h> }} <var:R0> := <nat:4> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:j> ; <var:B> := <var:R1> ; <var:B> := <var:B> + <var:R0> {{ <var:B> = <nat:3> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:R0> = <nat:4> /\ <var:B> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:B> = <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 