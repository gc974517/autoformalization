\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:J> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:C> := <var:Z1> <var:C> := <var:C> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:J> = <var:s> $ ahead of executing this set of commands it must be that $ <var:C> = <nat:2> \times <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is done using Hoare techniques . Advancing , \begin{verbatim} { <var:J> = <var:s> } <var:Z1> := <var:J> { <var:J> = <var:s> \land <var:Z1> = <var:s> } { <var:J> = <var:s> \land <var:Z1> = <var:s> } <var:Z0> := <nat:9> { <var:J> = <var:s> \land <var:Z1> = <var:s> \land <var:Z0> = <nat:9> } \end{verbatim} This is given using the variable assignmet law found in usual Hoare reasoning . Moving on to the next step , \begin{verbatim} { <var:J> = <var:s> } <var:Z1> := <var:J> { <var:J> = <var:s> \land <var:Z1> = <var:s> } \end{verbatim} Looking at the upcoming command contained in our program , we have \begin{verbatim} { <var:J> = <var:s> } <var:Z1> := <var:J> { <var:J> = <var:s> \land <var:Z1> = <var:s> } \end{verbatim} Taking another step toward the subsequent command found in the code segment , we see \begin{verbatim} { <var:J> = <var:s> } <var:Z1> := <var:J> { <var:J> = <var:s> \land <var:Z1> = <var:s> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:J> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:C> := <var:Z1> <var:C> := <var:C> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <def:poly> {{ <var:C> = <nat:2> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:Z1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:Z1> = <var:s> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:Z1> = <nat:2> * <var:s> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:Z0> = <nat:9> /\ <var:C> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:C> = <nat:2> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 