\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:B0> := <nat:3> ; <var:T> := <var:B0> \end{verbatim} Allow it to be that $ <var:m> = <var:y> $ prior to evaluating the set of instructions it follows that $ <var:T> = <nat:3> $ when set of commands has finished executing . \end{theorem} \begin{proof} The argument for our set of instructions can be accomplished by the below decorated code segment . \begin{eqnarray} \{ <var:m> = <var:y> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:m> = <var:y> \land <var:B0> = <nat:3> \} \\ <var:T> := <var:B0> \\ \{ <var:m> = <var:y> \land <var:T> = <nat:3> \} \end{eqnarray} Using typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <var:B0> := <nat:3> ; <var:T> := <var:B0> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 