\begin{document} \begin{theorem} Define a code segment as \begin{verbatim} <var:B0> := <nat:5> ; <var:s> := <var:B0> \end{verbatim} Allow $ <var:m> = <var:w> $ before interpreting the series of commands , it must be that we have $ <var:s> = <nat:5> $ once code segment is done . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:m> = <var:w> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:m> = <var:w> \land <var:B0> = <nat:5> \} \\ <var:s> := <var:B0> \\ \{ <var:m> = <var:w> \land <var:s> = <nat:5> \} \end{eqnarray} Utilizing standard Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:m> = <var:w> }} <var:B0> := <nat:5> ; <var:s> := <var:B0> {{ <var:s> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:w> /\ <var:s> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 