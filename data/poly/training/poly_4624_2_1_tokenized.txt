\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:7> ; <var:L> := <var:W0> \end{verbatim} Given that $ <var:i> = <var:l> $ ahead of executing our code segment , it follows that we see $ <var:L> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:l> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:i> = <var:l> \land <var:W0> = <nat:7> \} \\ <var:L> := <var:W0> \\ \{ <var:i> = <var:l> \land <var:L> = <nat:7> \} \end{eqnarray} Applying Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:i> = <var:l> }} <var:W0> := <nat:7> ; <var:L> := <var:W0> {{ <var:L> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:L> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 