\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:w> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:6> ; <var:Y> := <var:K1> <var:Y> := <var:Y> + <var:K0> \end{verbatim} Allowing that $ <var:w> = <var:P> $ ahead of the evaluation of this list of instructions it holds that we have $ <var:Y> = <nat:6> * <var:P> + <nat:3> $ once segment of code has finished . \end{theorem} \begin{proof} Proving correctness for this code is demonstrated using standard Hoare logic . Honing in on the next pieces of code seen in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:w> = <var:P> \} & <var:K1> := <var:w> & \{ <var:w> = <var:P> \land <var:K1> = <var:P> \} \\ \{ <var:w> = <var:P> \land <var:K1> = <var:P> \} & <var:K0> := <nat:3> & \{ <var:w> = <var:P> \land <var:K1> = <var:P> \land <var:K0> = <nat:3> \} \\ \{ <var:w> = <var:P> \land <var:K1> = <var:P> \land <var:K0> = <nat:3> \} & <var:K1> := <var:K1> * <nat:6> & \{ <var:w> = <var:P> \land <var:K1> = <nat:6> \cdot <var:P> \land <var:K0> = <nat:3> \} \\ \{ <var:w> = <var:P> \land <var:K1> = <nat:6> \cdot <var:P> \land <var:K0> = <nat:3> \} & <var:Y> := <var:K1& \{ <var:w> = <var:P> \land <var:K0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:P> \} \\ \{ <var:w> = <var:P> \land <var:K0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:P> \} & <var:Y> := <var:Y> + <var:K0& \{ <var:w> = <var:P> \land <var:Y> = <nat:6> \cdot <var:P> + <nat:3> \} \end{tabular} This is shown by the law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:w> = <var:P> }} <var:K1> := <var:w> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:6> ; <var:Y> := <var:K1> <var:Y> := <var:Y> + <var:K0> {{ <var:Y> = <nat:6> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:K1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:K1> = <var:P> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:K1> = <nat:6> * <var:P> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:K0> = <nat:3> /\ <var:Y> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:P> /\ <var:Y> = <nat:6> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 