\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:2> ; <var:Q> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assume given all $ <var:W> $ that $ <var:r> = <var:W> $ before evaluating the list of instructions it holds that we see $ <var:Q> = <nat:2> $ once series of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for the program is accomplished with this decorated series of instructions . \begin{eqnarray} \{ <var:r> = <var:W> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:r> = <var:W> \land <var:B0> = <nat:2> \} \\ <var:Q> := <var:B0> \\ \{ <var:r> = <var:W> \land <var:Q> = <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:2> ; <var:Q> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <def:poly> {{ <var:Q> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:Q> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 