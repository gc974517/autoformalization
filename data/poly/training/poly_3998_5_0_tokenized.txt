\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:3> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:T> ; <var:j> := <var:K1> ; <var:j> := <var:j> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assume it to hold that $ <var:T> = <var:u> $ prior to the evaluation of the list of commands , it follows that we see $ <var:j> = <nat:5> * <var:u> + <nat:3> $ once program is done executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:T> = <var:u> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:T> = <var:u> \land <var:K0> = <nat:3> \} \\ <var:K1> := <nat:5> ; \\ \{ <var:T> = <var:u> \land <var:K0> = <nat:3> \land <var:K1> = <nat:5> \} \\ <var:K1> := <var:K1> * <var:T> ; \\ \{ <var:T> = <var:u> \land <var:K0> = <nat:3> \land <var:K1> = <nat:5> \times <var:u> \} \\ <var:j> := <var:K1> ; \\ \{ <var:T> = <var:u> \land <var:K0> = <nat:3> \land <var:j> = <nat:5> \times <var:u> \} \\ <var:j> := <var:j> + <var:K0> \\ \{ <var:T> = <var:u> \land <var:j> = <nat:5> \times <var:u> + <nat:3> \} \end{eqnarray} Therefore , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:3> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:T> ; <var:j> := <var:K1> ; <var:j> := <var:j> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:T> = <var:u> }} <def:poly> {{ <var:j> = <nat:5> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:K0> = <nat:3> /\ <var:j> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:j> = <nat:5> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 