\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:3> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:4> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <nat:3> + <var:L> * <var:R> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming ( given some $ <var:X> \in \mathbb{Z}^+ $ ) it to be that $ <var:R> = <var:X> $ prior to running the list of commands then we see $ <var:L> = <nat:4> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this code segment is given by standard Hoare reasoning . Looking at the following step found in the list of commands , we have the binding command \verb | <var:L> := <nat:4> ; | . This line moves $ \{ <var:R> = <var:X> \} $ to the postcondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \} $ . Next , we have the assignment command giving $ <var:L> * <var:R> $ as $ <var:L>$ . This command redefines the precondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \} $ toward the postcondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> + \} $ . This is rigorously given by the assignment rule given in Hoare logic . Paying attention to the next line contained in our list of instructions , we see the environment update code \verb | <var:L> := <nat:3> + <var:L> * <var:R> ; | . This takes the precondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> + \} $ toward the condition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:2> + <nat:3> \} $ . Paying attention to the upcoming step contained in our set of commands , we see the code \verb | <var:L> := <var:L> * <var:R> ; | . This redefines the precondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:2> + <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + \} $ . Shifting focus toward the upcoming step found in the set of instructions , we have the environment update code defining $ <nat:4> + <var:L> * <var:R> $ to $ <var:L>$ . This command transfers the condition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + \} $ toward $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \} $ . This is given with the assignment law given in Hoare logic . Next , we have the variable binding line \verb | <var:L> := <var:L> * <var:R> ; | . This forwards the precondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + \} $ . This is guaranteed through the assignment inference rule from Hoare logic . Focusing on the subsequent step contained in our list of commands , the binding line \verb | <var:L> := <nat:2> + <var:L> * <var:R> ; | . This statement forwards the precondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + \} $ to $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \} $ . This is shown with the assignment inference rule found in Hoare logic . Moving forward to the following piece of code contained in our list of commands , the variable update command binding $ <var:L> * <var:R> $ as $ <var:L>$ . This code transfers $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \} $ into the postcondition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + \} $ . This is given with the assignment scheme defined by typical Hoare reasoning . Now , we see the variable update line \verb | <var:L> := <nat:2> + <var:L> * <var:R> ; | . This line takes $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:7> + <nat:3> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + \} $ as $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \} $ . Paying attention to the following command in the list of commands , we have the binding command assigning $ <nat:2> + <var:L> * <var:R> $ into $ <var:L>$ . This line redefines the condition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:8> + <nat:3> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \} $ as $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:9> + <nat:3> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + <nat:2> \} $ . This is shown with the assignment inference rule obtained from Hoare techniques . Stepping forward , we have the environment update command defining $ <nat:3> + <var:L> * <var:R$ to $ <var:L>$ . This moves $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:9> + <nat:3> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> + <nat:2> \} $ as the condition $ \{ <var:R> = <var:X> \land <var:L> = <nat:4> \times <var:X> ^ <nat:10> + <nat:3> \times <var:X> ^ <nat:8> + <nat:4> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:3> \} $ . This is ensured with the assignment inference rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:4> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:3> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:4> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <nat:2> + <var:L> * <var:R> ; <var:L> := <nat:3> + <var:L> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:R> = <var:X> }} <def:poly> {{ <var:L> = <nat:4> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:9> + <nat:3> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:L> = <nat:4> * <var:X> ^ <nat:10> + <nat:3> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 