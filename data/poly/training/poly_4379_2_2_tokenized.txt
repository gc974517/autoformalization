\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:3> + <var:r> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:g> $ --- given $ <var:g> \in \mathbb{Z}^+ $ --- prior to interpreting this set of commands it holds that we have $ <var:r> = <nat:2> \times <var:g> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:z> = <var:g> \} \\ <var:r> := <nat:2> ; \\ \{ <var:z> = <var:g> \land <var:r> = <nat:2> \} \\ <var:r> := <nat:3> + <var:r> * <var:z> \\ \{ <var:z> = <var:g> \land <var:r> = <nat:2> \times <var:g> + <nat:3> \} \end{eqnarray} As a result , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:2> ; <var:r> := <nat:3> + <var:r> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <def:poly> {{ <var:r> = <nat:2> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:r> = <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 