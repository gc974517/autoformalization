\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:d0> := <nat:4> ; <var:S> := <var:d0> \end{verbatim} Assuming it to hold that $ <var:i> = <var:F> $ , given every positive numbers $ <var:F> $ , ahead of executing this series of instructions it must be that $ <var:S> = <nat:4> $ . \end{theorem} \begin{proof} The argument for the series of commands is given through this decorated list of instructions . \begin{eqnarray} \{ <var:i> = <var:F> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:i> = <var:F> \land <var:d0> = <nat:4> \} \\ <var:S> := <var:d0> \\ \{ <var:i> = <var:F> \land <var:S> = <nat:4> \} \end{eqnarray} Applying typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:i> = <var:F> }} <var:d0> := <nat:4> ; <var:S> := <var:d0> {{ <var:S> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:S> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 