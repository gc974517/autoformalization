\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:H> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:H> ; <var:Y2> := <var:Y2> * <var:H> ; <var:W> := <var:Y2> ; <var:W> := <var:W> + <var:Y1> ; <var:W> := <var:W> + <var:Y0> \end{verbatim} Assume that $ <var:H> = <var:A> $ prior to the evaluation of the program , it follows that we see $ <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:7> $ when set of instructions has terminated . \end{theorem} \begin{proof} The method of proof for the list of instructions is evident using typical Hoare logic . Moving on , we have \verb | { <var:H> = <var:A> } <var:Y0> := <nat:7> { <var:H> = <var:A> \land <var:Y0> = <nat:7> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> } <var:Y1> := <nat:1> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> } <var:Y1> := <var:Y1> * <var:H> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> } <var:Y2> := <nat:5> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> } <var:Y2> := <var:Y2> * <var:H> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> } <var:Y2> := <var:Y2> * <var:H> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> ^ <nat:2> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> ^ <nat:2> } <var:W> := <var:Y2> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> } | , \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:1> \cdot <var:A> \land <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> } <var:W> := <var:W> + <var:Y1> { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> } | and \verb | { <var:H> = <var:A> \land <var:Y0> = <nat:7> \land <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> } <var:W> := <var:W> + <var:Y0{ <var:H> = <var:A> \land <var:W> = <nat:5> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:H> = <var:A> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:H> ; <var:Y2> := <nat:5> ; <var:Y2> := <var:Y2> * <var:H> ; <var:Y2> := <var:Y2> * <var:H> ; <var:W> := <var:Y2> ; <var:W> := <var:W> + <var:Y1> ; <var:W> := <var:W> + <var:Y0> {{ <var:W> = <nat:5> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:A> /\ <var:Y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:A> /\ <var:Y2> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:A> /\ <var:Y2> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:1> * <var:A> /\ <var:W> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:Y0> = <nat:7> /\ <var:W> = <nat:5> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:W> = <nat:5> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 