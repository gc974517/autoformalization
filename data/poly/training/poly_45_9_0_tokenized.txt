\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:4> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:n> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:n> ; <var:T2> := <var:T2> * <var:n> ; <var:j> := <var:T2> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> \end{verbatim} Allow it to hold that $ <var:n> = <var:U> $ ( given positive numbers $ <var:U> $ ) before interpreting the series of commands it must be that we see $ <var:j> = <nat:7> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> + <nat:4> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the code can be demonstrated by typical Hoare techniques . Advancing on , we have \begin{eqnarray} \{ <var:n> = <var:U> \} \, <var:T0> := <nat:4> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \} \, <var:T1> := <nat:8> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> \} \, <var:T1> := <var:T1> * <var:n> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \} \, <var:T2> := <nat:7> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \land <var:T2> = <nat:7> \} \end{eqnarray} Advancing on , \begin{eqnarray} \{ <var:n> = <var:U> \} \, <var:T0> := <nat:4> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \} \, <var:T1> := <nat:8> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> \} \, <var:T1> := <var:T1> * <var:n> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \} \, <var:T2> := <nat:7> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \land <var:T2> = <nat:7> \} \\ \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \land <var:T2> = <nat:7> \} \, <var:T2> := <var:T2> * <var:n> \, \{ <var:n> = <var:U> \land <var:T0> = <nat:4> \land <var:T1> = <nat:8> * <var:U> \land <var:T2> = <nat:7> * <var:U> \} \end{eqnarray} This is shown to be logically sound by the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <var:T0> := <nat:4> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:n> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:n> ; <var:T2> := <var:T2> * <var:n> ; <var:j> := <var:T2> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> {{ <var:j> = <nat:7> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> * <var:U> /\ <var:T2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> * <var:U> /\ <var:T2> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> * <var:U> /\ <var:T2> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:8> * <var:U> /\ <var:j> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:T0> = <nat:4> /\ <var:j> = <nat:7> * <var:U> ^ <nat:2> + <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:j> = <nat:7> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 