\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:3> ; <var:y> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:w> = <var:V> $ ahead of executing this list of commands , then $ <var:y> = <nat:3> $ after segment of code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:V> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:w> = <var:V> \land <var:r0> = <nat:3> \} \\ <var:y> := <var:r0> \\ \{ <var:w> = <var:V> \land <var:y> = <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:3> ; <var:y> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:w> = <var:V> }} <def:poly> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:V> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 