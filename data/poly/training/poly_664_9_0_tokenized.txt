\begin{document} \begin{theorem} We define the following segment of code such that \begin{verbatim} <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:z> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:z> ; <var:B2> := <var:B2> * <var:z> ; <var:C> := <var:B2> ; <var:C> := <var:C> + <var:B1> ; <var:C> := <var:C> + <var:B0> \end{verbatim} Assume $ <var:z> = <var:o> $ --- for any $ <var:o> \in \mathbb{Z}^+ $ --- before the evaluation of this list of instructions , it follows that we see $ <var:C> = <nat:3> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be seen with usual Hoare logic . Next , we have \verb | { <var:z> = <var:o> } <var:B0> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> } | , \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> } <var:B1> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> } | , \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> } <var:B1> := <var:B1> * <var:z> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> * <var:o> } | and \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> * <var:o> } <var:B2> := <nat:3> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> * <var:o> \land <var:B2> = <nat:3> } | . Advancing on , we see \verb | { <var:z> = <var:o> } <var:B0> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> } | , \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> } <var:B1> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> } | and \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> } <var:B1> := <var:B1> * <var:z> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> * <var:o> } | . This is known to be sound by the environment update law found in typical Hoare techniques . Advancing on , we have \verb | { <var:z> = <var:o> } <var:B0> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> } | and \verb | { <var:z> = <var:o> \land <var:B0> = <nat:1> } <var:B1> := <nat:1> { <var:z> = <var:o> \land <var:B0> = <nat:1> \land <var:B1> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:B0> := <nat:1> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:z> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:z> ; <var:B2> := <var:B2> * <var:z> ; <var:C> := <var:B2> ; <var:C> := <var:C> + <var:B1> ; <var:C> := <var:C> + <var:B0> {{ <var:C> = <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:o> /\ <var:B2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:o> /\ <var:B2> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:o> /\ <var:B2> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:1> * <var:o> /\ <var:C> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:B0> = <nat:1> /\ <var:C> = <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 