\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:r> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:r> ; <var:z2> := <var:z2> * <var:r> ; <var:w> := <var:z2> ; <var:w> := <var:w> + <var:z1> ; <var:w> := <var:w> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:r> = <var:U> $ ahead of the evaluation of the list of commands it holds that we see $ <var:w> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:7> \cdot <var:U> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:r> = <var:U> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \} \\ <var:z1> := <nat:7> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \} \\ <var:z1> := <var:z1> * <var:r> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \times <var:U> \} \\ <var:z2> := <nat:3> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \times <var:U> \land <var:z2> = <nat:3> \} \\ <var:z2> := <var:z2> * <var:r> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \times <var:U> \land <var:z2> = <nat:3> \times <var:U> \} \\ <var:z2> := <var:z2> * <var:r> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \times <var:U> \land <var:z2> = <nat:3> \times <var:U> ^ <nat:2> \} \\ <var:w> := <var:z2> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:z1> = <nat:7> \times <var:U> \land <var:w> = <nat:3> \times <var:U> ^ <nat:2> \} \end{eqnarray} Continuing running this set of commands results in : \begin{eqnarray} <var:w> := <var:w> + <var:z1> ; \\ \{ <var:r> = <var:U> \land <var:z0> = <nat:4> \land <var:w> = <nat:3> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> \} \\ <var:w> := <var:w> + <var:z0> \\ \{ <var:r> = <var:U> \land <var:w> = <nat:3> \times <var:U> ^ <nat:2> + <nat:7> \times <var:U> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:7> ; <var:z1> := <var:z1> * <var:r> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:r> ; <var:z2> := <var:z2> * <var:r> ; <var:w> := <var:z2> ; <var:w> := <var:w> + <var:z1> ; <var:w> := <var:w> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:r> = <var:U> }} <def:poly> {{ <var:w> = <nat:3> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> * <var:U> /\ <var:z2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> * <var:U> /\ <var:z2> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> * <var:U> /\ <var:z2> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:7> * <var:U> /\ <var:w> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:z0> = <nat:4> /\ <var:w> = <nat:3> * <var:U> ^ <nat:2> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:w> = <nat:3> * <var:U> ^ <nat:2> + <nat:7> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 