\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:o> ; <var:b> := <var:L1> ; <var:b> := <var:b> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Assuming $ <var:o> = <var:g> $ prior to running this series of commands , it holds that we see $ <var:b> = <nat:1> * <var:g> + <nat:5> $ after list of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be demonstrated using usual Hoare techniques . Looking at the next step found in our code , we see the variable binding command \verb | <var:L0> := <nat:5> ; | . This line redefines the condition $ \{ <var:o> = <var:g> \} $ to the postcondition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \} $ . This is ensured with the assignment rule given by typical Hoare logic . Focusing on the subsequent command contained in our set of instructions , we have the binding command yielding $ <nat:1> $ toward $ <var:L1>$ . This command moves the precondition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \} $ as the condition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \} $ . This is shown through the assignment scheme given in usual Hoare reasoning . Stepping through , we have the environment update statement defining $ <var:L1> * <var:o> $ into $ <var:L1>$ . This command moves the condition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \} $ toward $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:g> \} $ . This is sound by the assignment scheme of Hoare reasoning . Jumping to the following bit of code contained in our set of instructions , we see the code \verb | <var:b> := <var:L1> ; | . This takes the precondition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:g> \} $ to $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:b> = <nat:1> \cdot <var:g> \} $ . This is sound through the assignment law given by typical Hoare reasoning . Observing the next command in our code segment , we have the variable binding code assigning $ <var:b> + <var:L0$ to $ <var:b>$ . This code forwards the precondition $ \{ <var:o> = <var:g> \land <var:L0> = <nat:5> \land <var:b> = <nat:1> \cdot <var:g> \} $ into the postcondition $ \{ <var:o> = <var:g> \land <var:b> = <nat:1> \cdot <var:g> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:o> ; <var:b> := <var:L1> ; <var:b> := <var:b> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:o> = <var:g> }} <def:poly> {{ <var:b> = <nat:1> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:L0> = <nat:5> /\ <var:b> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:g> /\ <var:b> = <nat:1> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 