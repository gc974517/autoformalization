\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:3> ; <var:W> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Given it to be that $ <var:P> = <var:A> $ , with some positive integers $ <var:A> $ , ahead of the evaluation of our set of instructions it holds that we see $ <var:W> = <nat:3> $ once code has executed . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is given with this decorated segment of code . \begin{eqnarray} \{ <var:P> = <var:A> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:P> = <var:A> \land <var:O0> = <nat:3> \} \\ <var:W> := <var:O0> \\ \{ <var:P> = <var:A> \land <var:W> = <nat:3> \} \end{eqnarray} Using Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:W> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:P> = <var:A> }} <def:poly> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 