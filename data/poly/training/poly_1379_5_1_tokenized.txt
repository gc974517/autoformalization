\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:w1> := <var:s> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:1> ; <var:E> := <var:w1> <var:E> := <var:E> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Given $ <var:s> = <var:L> $ letting $ <var:L> \in \mathbb{N} $ ahead of the execution of this series of instructions , it must be that we see $ <var:E> = <nat:1> * <var:L> + <nat:9> $ once series of instructions has finished . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be given through Hoare techniques . Advancing , we have the variable assignmet line \verb | <var:w1> := <var:s> ; | . This code advances $ \{ <var:s> = <var:L> \} $ toward the condition $ \{ <var:s> = <var:L> \land <var:w1> = <var:L> \} $ . Moving onward , we see the variable binding statement \verb | <var:w0> := <nat:9> ; | . This command advances the precondition $ \{ <var:s> = <var:L> \land <var:w1> = <var:L> \} $ as the postcondition $ \{ <var:s> = <var:L> \land <var:w1> = <var:L> \land <var:w0> = <nat:9> \} $ . Moving forward to the upcoming line contained in the series of instructions , we have the assignment line \verb | <var:w1> := <var:w1> * <nat:1> ; | . This code takes the precondition $ \{ <var:s> = <var:L> \land <var:w1> = <var:L> \land <var:w0> = <nat:9> \} $ into the condition $ \{ <var:s> = <var:L> \land <var:w1> = <nat:1> \times <var:L> \land <var:w0> = <nat:9> \} $ . Observing the next bit of code contained in our code segment , we see the variable update statement giving $ <var:w1$ toward $ <var:E>$ . This command transfers the precondition $ \{ <var:s> = <var:L> \land <var:w1> = <nat:1> \times <var:L> \land <var:w0> = <nat:9> \} $ as the postcondition $ \{ <var:s> = <var:L> \land <var:w0> = <nat:9> \land <var:E> = <nat:1> \times <var:L> \} $ . This is given with the assignment rule given in usual Hoare reasoning . Jumping to the upcoming line contained in the series of instructions , we have the variable update code \verb | <var:E> := <var:E> + <var:w0> | . This command transfers the precondition $ \{ <var:s> = <var:L> \land <var:w0> = <nat:9> \land <var:E> = <nat:1> \times <var:L> \} $ toward the postcondition $ \{ <var:s> = <var:L> \land <var:E> = <nat:1> \times <var:L> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:s> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:1> ; <var:E> := <var:w1> <var:E> := <var:E> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:s> = <var:L> }} <def:poly> {{ <var:E> = <nat:1> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:w1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:w1> = <var:L> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:w1> = <nat:1> * <var:L> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:w0> = <nat:9> /\ <var:E> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:E> = <nat:1> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 