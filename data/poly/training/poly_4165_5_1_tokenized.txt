\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:g1> := <var:f> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:6> ; <var:r> := <var:g1> <var:r> := <var:r> + <var:g0> \end{verbatim} Allowing it to be that $ <var:f> = <var:I> $ ( taking $ <var:I> \in \mathbb{N} $ ) prior to the execution of this series of commands it follows that we have $ <var:r> = <nat:6> \times <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is accomplished by standard Hoare techniques . Observing the next steps found in the series of commands , we see \begin{verbatim} { <var:f> = <var:I> } <var:g1> := <var:f> { <var:f> = <var:I> \land <var:g1> = <var:I> } { <var:f> = <var:I> \land <var:g1> = <var:I> } <var:g0> := <nat:2> { <var:f> = <var:I> \land <var:g1> = <var:I> \land <var:g0> = <nat:2> } { <var:f> = <var:I> \land <var:g1> = <var:I> \land <var:g0> = <nat:2> } <var:g1> := <var:g1> * <nat:6> { <var:f> = <var:I> \land <var:g1> = <nat:6> * <var:I> \land <var:g0> = <nat:2> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:f> = <var:I> } <var:g1> := <var:f> { <var:f> = <var:I> \land <var:g1> = <var:I> } { <var:f> = <var:I> \land <var:g1> = <var:I> } <var:g0> := <nat:2> { <var:f> = <var:I> \land <var:g1> = <var:I> \land <var:g0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:f> = <var:I> }} <var:g1> := <var:f> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:6> ; <var:r> := <var:g1> <var:r> := <var:r> + <var:g0> {{ <var:r> = <nat:6> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g1> = <var:I> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g1> = <nat:6> * <var:I> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g0> = <nat:2> /\ <var:r> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:r> = <nat:6> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 