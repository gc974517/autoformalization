\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:G1> := <var:Q> ; <var:G2> := <var:G1> * <var:Q> ; <var:G3> := <var:G2> * <var:Q> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:5> ; <var:V> := <var:G3> <var:V> := <var:V> + <var:G2> <var:V> := <var:V> + <var:G1> <var:V> := <var:V> + <var:G0> \end{verbatim} Given --- with some $ <var:b> \in \mathbb{N} $ --- $ <var:Q> = <var:b> $ ahead of executing this set of commands then $ <var:V> = <nat:5> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:7> $ when set of commands has finished . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:b> \} \\ <var:G1> := <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <var:b> \} \\ <var:G2> := <var:G1> * <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <var:b> \land <var:G2> = <var:b> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:Q> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <var:b> \land <var:G2> = <var:b> ^ <nat:2> \land <var:G3> = <var:b> ^ <nat:3> \} \\ <var:G0> := <nat:7> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <var:b> \land <var:G2> = <var:b> ^ <nat:2> \land <var:G3> = <var:b> ^ <nat:3> \land <var:G0> = <nat:7> \} \\ <var:G1> := <var:G1> * <nat:4> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <nat:4> * <var:b> \land <var:G2> = <var:b> ^ <nat:2> \land <var:G3> = <var:b> ^ <nat:3> \land <var:G0> = <nat:7> \} \\ <var:G2> := <var:G2> * <nat:1> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <nat:4> * <var:b> \land <var:G2> = <nat:1> * <var:b> ^ <nat:2> \land <var:G3> = <var:b> ^ <nat:3> \land <var:G0> = <nat:7> \} \\ <var:G3> := <var:G3> * <nat:5> ; \\ \{ <var:Q> = <var:b> \land <var:G1> = <nat:4> * <var:b> \land <var:G2> = <nat:1> * <var:b> ^ <nat:2> \land <var:G3> = <nat:5> * <var:b> ^ <nat:3> \land <var:G0> = <nat:7> \} \\ <var:V> := <var:G3> \\ \{ <var:Q> = <var:b> \land <var:G1> = <nat:4> * <var:b> \land <var:G2> = <nat:1> * <var:b> ^ <nat:2> \land <var:G0> = <nat:7> \land <var:V> = <nat:5> * <var:b> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:G2> \\ \{ <var:Q> = <var:b> \land <var:G1> = <nat:4> * <var:b> \land <var:G0> = <nat:7> \land <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:G1> \\ \{ <var:Q> = <var:b> \land <var:G0> = <nat:7> \land <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} \\ <var:V> := <var:V> + <var:G0> \\ \{ <var:Q> = <var:b> \land <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> \} \end{eqnarray} Considering the preceding argument , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Q> = <var:b> }} <var:G1> := <var:Q> ; <var:G2> := <var:G1> * <var:Q> ; <var:G3> := <var:G2> * <var:Q> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:5> ; <var:V> := <var:G3> <var:V> := <var:V> + <var:G2> <var:V> := <var:V> + <var:G1> <var:V> := <var:V> + <var:G0> {{ <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <var:b> /\ <var:G2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <var:b> /\ <var:G2> = <var:b> ^ <nat:2> /\ <var:G3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <var:b> /\ <var:G2> = <var:b> ^ <nat:2> /\ <var:G3> = <var:b> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <nat:4> * <var:b> /\ <var:G2> = <var:b> ^ <nat:2> /\ <var:G3> = <var:b> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <nat:4> * <var:b> /\ <var:G2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:G3> = <var:b> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <nat:4> * <var:b> /\ <var:G2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:G3> = <nat:5> * <var:b> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <nat:4> * <var:b> /\ <var:G2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:G0> = <nat:7> /\ <var:V> = <nat:5> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G1> = <nat:4> * <var:b> /\ <var:G0> = <nat:7> /\ <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:G0> = <nat:7> /\ <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:V> = <nat:5> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 