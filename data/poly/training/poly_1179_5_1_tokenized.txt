\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:g> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:3> ; <var:t> := <var:I1> <var:t> := <var:t> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Allowing --- given every $ <var:H> $ --- it to hold that $ <var:g> = <var:H> $ ahead of the evaluation of our set of commands , it follows that we see $ <var:t> = <nat:3> * <var:H> + <nat:8> $ after series of commands finishes . \end{theorem} \begin{proof} Observe the following decorated set of commands . \begin{eqnarray} \{ <var:g> = <var:H> \} \\ <var:I1> := <var:g> ; \\ \{ <var:g> = <var:H> \land <var:I1> = <var:H> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:g> = <var:H> \land <var:I1> = <var:H> \land <var:I0> = <nat:8> \} \\ <var:I1> := <var:I1> * <nat:3> ; \\ \{ <var:g> = <var:H> \land <var:I1> = <nat:3> * <var:H> \land <var:I0> = <nat:8> \} \\ <var:t> := <var:I1> \\ \{ <var:g> = <var:H> \land <var:I0> = <nat:8> \land <var:t> = <nat:3> * <var:H> \} \\ <var:t> := <var:t> + <var:I0> \\ \{ <var:g> = <var:H> \land <var:t> = <nat:3> * <var:H> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:g> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:3> ; <var:t> := <var:I1> <var:t> := <var:t> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:g> = <var:H> }} <def:poly> {{ <var:t> = <nat:3> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:I1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:I1> = <var:H> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:I1> = <nat:3> * <var:H> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:I0> = <nat:8> /\ <var:t> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:t> = <nat:3> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 