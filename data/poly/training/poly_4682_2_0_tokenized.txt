\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:7> ; <var:B> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Allow it to hold that $ <var:K> = <var:X> $ ahead of executing the set of commands it must be that $ <var:B> = <nat:7> $ when code segment has finished executing . \end{theorem} \begin{proof} The flow of logic for our segment of code can be done using standard Hoare reasoning . Moving on to the proceeding bit of code contained in the program , we see \verb | { <var:K> = <var:X> } <var:t0> := <nat:7> { <var:K> = <var:X> \land <var:t0> = <nat:7> } | . This is given using the environment update law from typical Hoare techniques . Moving forward , \verb | { <var:K> = <var:X> } <var:t0> := <nat:7> { <var:K> = <var:X> \land <var:t0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:B> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <def:poly> {{ <var:B> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:B> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 