\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:v> ; <var:B2> := <var:B1> * <var:v> ; <var:B3> := <var:B2> * <var:v> ; <var:B0> := <nat:4> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:2> ; <var:O> := <var:B3> <var:O> := <var:O> + <var:B2> <var:O> := <var:O> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:v> = <var:U> $ ahead of the evaluation of this series of instructions it follows that $ <var:O> = <nat:2> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:U> \} \\ <var:B1> := <var:v> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \} \\ <var:B2> := <var:B1> * <var:v> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <var:U> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:v> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <var:U> ^ <nat:2> \land <var:B3> = <var:U> ^ <nat:3> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <var:U> ^ <nat:2> \land <var:B3> = <var:U> ^ <nat:3> \land <var:B0> = <nat:4> \} \\ <var:B2> := <var:B2> * <nat:1> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <nat:1> * <var:U> ^ <nat:2> \land <var:B3> = <var:U> ^ <nat:3> \land <var:B0> = <nat:4> \} \\ <var:B3> := <var:B3> * <nat:2> ; \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <nat:1> * <var:U> ^ <nat:2> \land <var:B3> = <nat:2> * <var:U> ^ <nat:3> \land <var:B0> = <nat:4> \} \\ <var:O> := <var:B3> \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B2> = <nat:1> * <var:U> ^ <nat:2> \land <var:B0> = <nat:4> \land <var:O> = <nat:2> * <var:U> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:B2> \\ \{ <var:v> = <var:U> \land <var:B1> = <var:U> \land <var:B0> = <nat:4> \land <var:O> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:B0> \\ \{ <var:v> = <var:U> \land <var:O> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> \} \end{eqnarray} Using standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:v> ; <var:B2> := <var:B1> * <var:v> ; <var:B3> := <var:B2> * <var:v> ; <var:B0> := <nat:4> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:2> ; <var:O> := <var:B3> <var:O> := <var:O> + <var:B2> <var:O> := <var:O> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:v> = <var:U> }} <def:poly> {{ <var:O> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <var:U> ^ <nat:2> /\ <var:B3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <var:U> ^ <nat:2> /\ <var:B3> = <var:U> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:B3> = <var:U> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:U> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:B0> = <nat:4> /\ <var:O> = <nat:2> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:B1> = <var:U> /\ <var:B0> = <nat:4> /\ <var:O> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:O> = <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 