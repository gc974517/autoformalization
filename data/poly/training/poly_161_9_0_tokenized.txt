\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:H> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:O> := <var:y2> ; <var:O> := <var:O> + <var:y1> ; <var:O> := <var:O> + <var:y0> \end{verbatim} Given it to be that $ <var:H> = <var:T> $ prior to executing our set of commands , it must be that we see $ <var:O> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our code segment can be seen using Hoare logic . Moving on to the following step in our code segment , the environment update code \verb | <var:y0> := <nat:1> ; | . This statement forwards the precondition $ \{ <var:H> = <var:T> \} $ toward the condition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \} $ . Moving on to the next step , we have the code \verb | <var:y1> := <nat:3> ; | . This transfers $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \} $ toward $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \} $ . This is guaranteed using the assignment rule obtained from Hoare reasoning . Moving forward to the proceeding bit of code in the list of commands , the binding statement \verb | <var:y1> := <var:y1> * <var:H> ; | . This code advances $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \} $ toward the postcondition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \} $ . This is rigorously given with the assignment rule defined by standard Hoare logic . Honing in on the upcoming bit of code seen in the segment of code , we have the code letting $ <nat:3> $ as $ <var:y2>$ . This line takes $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \} $ toward the postcondition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \} $ . This is ensured with the assignment scheme found in standard Hoare reasoning . Taking another step toward the subsequent line of code in the segment of code , we see the binding code binding $ <var:y2> * <var:H> $ as $ <var:y2>$ . This command moves the condition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \} $ toward the condition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \times <var:T> \} $ . Moving forward , the variable binding code \verb | <var:y2> := <var:y2> * <var:H> ; | . This statement transfers the precondition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \times <var:T> \} $ to the condition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \times <var:T> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule defined in standard Hoare logic . Moving on to the following statement seen in our series of commands , the binding statement \verb | <var:O> := <var:y2> ; | . This code forwards $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:y2> = <nat:3> \times <var:T> ^ <nat:2> \} $ to the postcondition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:O> = <nat:3> \times <var:T> ^ <nat:2> \} $ . Next , we have the environment update line \verb | <var:O> := <var:O> + <var:y1> ; | . This forwards the condition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:y1> = <nat:3> \times <var:T> \land <var:O> = <nat:3> \times <var:T> ^ <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:O> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> \} $ . This is shown to be logically sound using the assignment inference rule from Hoare reasoning . Moving on to the proceeding bit of code contained in the list of commands , the assignment statement \verb | <var:O> := <var:O> + <var:y0> | . This line moves $ \{ <var:H> = <var:T> \land <var:y0> = <nat:1> \land <var:O> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> \} $ into the postcondition $ \{ <var:H> = <var:T> \land <var:O> = <nat:3> \times <var:T> ^ <nat:2> + <nat:3> \times <var:T> + <nat:1> \} $ . This is deduced with the assignment scheme found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:H> = <var:T> }} <var:y0> := <nat:1> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:H> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:O> := <var:y2> ; <var:O> := <var:O> + <var:y1> ; <var:O> := <var:O> + <var:y0> {{ <var:O> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> * <var:T> /\ <var:y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> * <var:T> /\ <var:y2> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> * <var:T> /\ <var:y2> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:3> * <var:T> /\ <var:O> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:y0> = <nat:1> /\ <var:O> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:T> /\ <var:O> = <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 