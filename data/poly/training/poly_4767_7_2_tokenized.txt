\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <nat:3> + <var:o> * <var:Y> ; <var:o> := <nat:3> + <var:o> * <var:Y> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <nat:2> + <var:o> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Assume it to hold that $ <var:Y> = <var:Z> $ before running this list of commands it must be that we have $ <var:o> = <nat:1> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the series of commands is done with typical Hoare logic . Moving on to the proceeding lines contained in our segment of code , \[ \begin{tabular} {rcl} \{ <var:Y> = <var:Z> \} & <var:o> := <nat:1> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> \} \\ \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> \} & <var:o> := <var:o> * <var:Y> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> + \} \\ \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> + \} & <var:o> := <nat:3> + <var:o> * <var:Y> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> \} \\ \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> \} & <var:o> := <nat:3> + <var:o> * <var:Y> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + <nat:3> \} \\ \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + <nat:3> \} & <var:o> := <var:o> * <var:Y> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + \} \\ \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + \} & <var:o> := <var:o> * <var:Y> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + \} \end{tabular} Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:Z> \} & <var:o> := <nat:1> & \{ <var:Y> = <var:Z> \land <var:o> = <nat:1> \} \end{tabular} This is deduced using the variable assignmet scheme of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:1> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <nat:3> + <var:o> * <var:Y> ; <var:o> := <nat:3> + <var:o> * <var:Y> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <var:o> * <var:Y> ; <var:o> := <nat:2> + <var:o> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <def:poly> {{ <var:o> = <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:o> = <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 