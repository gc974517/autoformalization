\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:q> ; <var:L> := <var:t1> ; <var:L> := <var:L> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:q> = <var:b> $ , letting positive numbers $ <var:b> $ , ahead of evaluating the code , it must be that we see $ <var:L> = <nat:6> * <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Observe that the following decorated list of instructions . \begin{eqnarray} \{ <var:q> = <var:b> \} \\ <var:t0> := <nat:2> ; \\ \{ <var:q> = <var:b> \land <var:t0> = <nat:2> \} \\ <var:t1> := <nat:6> ; \\ \{ <var:q> = <var:b> \land <var:t0> = <nat:2> \land <var:t1> = <nat:6> \} \\ <var:t1> := <var:t1> * <var:q> ; \\ \{ <var:q> = <var:b> \land <var:t0> = <nat:2> \land <var:t1> = <nat:6> \times <var:b> \} \\ <var:L> := <var:t1> ; \\ \{ <var:q> = <var:b> \land <var:t0> = <nat:2> \land <var:L> = <nat:6> \times <var:b> \} \\ <var:L> := <var:L> + <var:t0> \\ \{ <var:q> = <var:b> \land <var:L> = <nat:6> \times <var:b> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:2> ; <var:t1> := <nat:6> ; <var:t1> := <var:t1> * <var:q> ; <var:L> := <var:t1> ; <var:L> := <var:L> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:q> = <var:b> }} <def:poly> {{ <var:L> = <nat:6> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:t0> = <nat:2> /\ <var:t1> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:t0> = <nat:2> /\ <var:L> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:b> /\ <var:L> = <nat:6> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 