\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:v> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:v> ; <var:c2> := <var:c2> * <var:v> ; <var:l> := <var:c2> ; <var:l> := <var:l> + <var:c1> ; <var:l> := <var:l> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:v> = <var:s> $ before running this series of instructions , it follows that we see $ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is evident through standard Hoare reasoning . Advancing , \[ \begin{tabular} {rcl} \{ <var:v> = <var:s> \} & <var:c0> := <nat:3> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \} & <var:c1> := <nat:1> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> \} & <var:c1> := <var:c1> * <var:v> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \} & <var:c2> := <nat:2> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> \} & <var:c2> := <var:c2> * <var:v> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> * <var:s> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> * <var:s> \} & <var:c2> := <var:c2> * <var:v> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> * <var:s> ^ <nat:2> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:c2> = <nat:2> * <var:s> ^ <nat:2> \} & <var:l> := <var:c2> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> \} \\ \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> * <var:s> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> \} & <var:l> := <var:l> + <var:c1> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \land <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> \} \end{tabular} This is ensured by the variable update law given by Hoare reasoning . Looking at the following line seen in the code segment , \[ \begin{tabular} {rcl} \{ <var:v> = <var:s> \} & <var:c0> := <nat:3> & \{ <var:v> = <var:s> \land <var:c0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:v> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:v> ; <var:c2> := <var:c2> * <var:v> ; <var:l> := <var:c2> ; <var:l> := <var:l> + <var:c1> ; <var:l> := <var:l> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:v> = <var:s> }} <def:poly> {{ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:s> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:s> /\ <var:c2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:s> /\ <var:c2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:s> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:c0> = <nat:3> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:l> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 