\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:u> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:3> ; <var:n> := <var:D1> <var:n> := <var:n> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:u> = <var:S> $ --- for some positive integers $ <var:S> $ --- before the evaluation of the series of commands it must be that $ <var:n> = <nat:3> \cdot <var:S> + <nat:6> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for our list of commands is shown using Hoare logic . Advancing to the next step , we see the assignment line \verb | <var:D1> := <var:u> ; | . This line advances the precondition $ \{ <var:u> = <var:S> \} $ to the postcondition $ \{ <var:u> = <var:S> \land <var:D1> = <var:S> \} $ . This is guaranteed through the assignment inference rule in standard Hoare reasoning . Now , we see the variable update line \verb | <var:D0> := <nat:6> ; | . This takes $ \{ <var:u> = <var:S> \land <var:D1> = <var:S> \} $ as the condition $ \{ <var:u> = <var:S> \land <var:D1> = <var:S> \land <var:D0> = <nat:6> \} $ . This is shown to be logically sound through the assignment law of Hoare logic . Taking another step toward the next statement found in our series of commands , we see the binding statement \verb | <var:D1> := <var:D1> * <nat:3> ; | . This code forwards $ \{ <var:u> = <var:S> \land <var:D1> = <var:S> \land <var:D0> = <nat:6> \} $ into the postcondition $ \{ <var:u> = <var:S> \land <var:D1> = <nat:3> \cdot <var:S> \land <var:D0> = <nat:6> \} $ . Advancing to the next step , we have the variable update command giving $ <var:D1$ into $ <var:n>$ . This line advances the precondition $ \{ <var:u> = <var:S> \land <var:D1> = <nat:3> \cdot <var:S> \land <var:D0> = <nat:6> \} $ to $ \{ <var:u> = <var:S> \land <var:D0> = <nat:6> \land <var:n> = <nat:3> \cdot <var:S> \} $ . This is sound using the assignment inference rule given by Hoare reasoning . Taking another step toward the proceeding piece of code found in our code , the environment update command \verb | <var:n> := <var:n> + <var:D0> | . This moves $ \{ <var:u> = <var:S> \land <var:D0> = <nat:6> \land <var:n> = <nat:3> \cdot <var:S> \} $ to the condition $ \{ <var:u> = <var:S> \land <var:n> = <nat:3> \cdot <var:S> + <nat:6> \} $ . This is sound using the assignment law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:u> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:3> ; <var:n> := <var:D1> <var:n> := <var:n> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:u> = <var:S> }} <def:poly> {{ <var:n> = <nat:3> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:D1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:D1> = <var:S> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:D1> = <nat:3> * <var:S> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:D0> = <nat:6> /\ <var:n> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:S> /\ <var:n> = <nat:3> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 