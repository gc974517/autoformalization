\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:2> ; <var:V> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Assuming $ <var:E> = <var:D> $ before interpreting this segment of code , it follows that we have $ <var:V> = <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The method of proof for this segment of code is clear using Hoare logic . Taking another step toward the next line of code in the code , the environment update code \verb | <var:w0> := <nat:2> ; | . This code transfers the condition $ \{ <var:E> = <var:D> \} $ toward the condition $ \{ <var:E> = <var:D> \land <var:w0> = <nat:2> \} $ . This is sound with the assignment law defined by usual Hoare techniques . Moving onward , the binding line \verb | <var:V> := <var:w0> | . This advances the precondition $ \{ <var:E> = <var:D> \land <var:w0> = <nat:2> \} $ toward $ \{ <var:E> = <var:D> \land <var:V> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:V> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:E> = <var:D> }} <def:poly> {{ <var:V> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:V> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 