\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:O1> := <var:C> ; <var:O2> := <var:O1> * <var:C> ; <var:O3> := <var:O2> * <var:C> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:6> ; <var:T> := <var:O3> <var:T> := <var:T> + <var:O2> <var:T> := <var:T> + <var:O1> <var:T> := <var:T> + <var:O0> \end{verbatim} Given ( with some positive numbers $ <var:J> $ ) that $ <var:C> = <var:J> $ ahead of interpreting our list of commands , then we have $ <var:T> = <nat:6> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> + <nat:4> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be shown through typical Hoare reasoning . Advancing , the binding line defining $ <var:C> $ toward $ <var:O1>$ . This moves $ \{ <var:C> = <var:J> \} $ to the condition $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \} $ . This is shown with the assignment rule given by typical Hoare reasoning . Advancing to the next step , we have the variable update code defining $ <var:O1> * <var:C> $ to $ <var:O2>$ . This forwards $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \} $ into $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \} $ . Considering the subsequent line seen in the code segment , we see the environment update command yielding $ <var:O2> * <var:C> $ toward $ <var:O3>$ . This moves $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \} $ . Stepping forward , we have the environment update statement binding $ <nat:4> $ as $ <var:O0>$ . This code forwards $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ . This is guaranteed through the assignment inference rule defined by typical Hoare reasoning . Taking another step toward the next step found in our program , we see the variable assignmet line binding $ <var:O1> * <nat:9> $ toward $ <var:O1>$ . This line transfers the precondition $ \{ <var:C> = <var:J> \land <var:O1> = <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ as $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ . Focusing on the following step contained in the series of commands , we have the environment update statement giving $ <var:O2> * <nat:3> $ into $ <var:O2>$ . This moves the condition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ into the postcondition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ . Looking at the upcoming line contained in our set of commands , the variable update code giving $ <var:O3> * <nat:6> $ to $ <var:O3>$ . This statement moves the precondition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O3> = <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ as $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O3> = <nat:6> * <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ . Looking at the next piece of code found in the set of instructions , the environment update code \verb | <var:T> := <var:O3> | . This command takes the precondition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O3> = <nat:6> * <var:J> ^ <nat:3> \land <var:O0> = <nat:4> \} $ to $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> \} $ . Stepping through , we have the variable binding line letting $ <var:T> + <var:O2$ into $ <var:T>$ . This moves the precondition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O2> = <nat:3> * <var:J> ^ <nat:2> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> \} $ as the condition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> \} $ . Focusing on the proceeding piece of code in the code , we have the environment update code \verb | <var:T> := <var:T> + <var:O1> | . This command forwards the condition $ \{ <var:C> = <var:J> \land <var:O1> = <nat:9> * <var:J> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:J> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> \} $ . This is known to be sound through the assignment scheme found in standard Hoare techniques . Going forward , the binding command assigning $ <var:T> + <var:O0$ to $ <var:T>$ . This line redefines $ \{ <var:C> = <var:J> \land <var:O0> = <nat:4> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> \} $ as $ \{ <var:C> = <var:J> \land <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:4> \} $ . This is known to be sound using the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:C> = <var:J> }} <var:O1> := <var:C> ; <var:O2> := <var:O1> * <var:C> ; <var:O3> := <var:O2> * <var:C> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:3> ; <var:O3> := <var:O3> * <nat:6> ; <var:T> := <var:O3> <var:T> := <var:T> + <var:O2> <var:T> := <var:T> + <var:O1> <var:T> := <var:T> + <var:O0> {{ <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <var:J> /\ <var:O2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <var:J> /\ <var:O2> = <var:J> ^ <nat:2> /\ <var:O3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <var:J> /\ <var:O2> = <var:J> ^ <nat:2> /\ <var:O3> = <var:J> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <nat:9> * <var:J> /\ <var:O2> = <var:J> ^ <nat:2> /\ <var:O3> = <var:J> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <nat:9> * <var:J> /\ <var:O2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:O3> = <var:J> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <nat:9> * <var:J> /\ <var:O2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:J> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <nat:9> * <var:J> /\ <var:O2> = <nat:3> * <var:J> ^ <nat:2> /\ <var:O0> = <nat:4> /\ <var:T> = <nat:6> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O1> = <nat:9> * <var:J> /\ <var:O0> = <nat:4> /\ <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:O0> = <nat:4> /\ <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:T> = <nat:6> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 