\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:i0> := <nat:4> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:X> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:X> ; <var:i2> := <var:i2> * <var:X> ; <var:G> := <var:i2> ; <var:G> := <var:G> + <var:i1> ; <var:G> := <var:G> + <var:i0> \end{verbatim} Allowing it to be that $ <var:X> = <var:y> $ ahead of the evaluation of the code segment it holds that we have $ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be demonstrated with usual Hoare reasoning . Moving forward , we see the environment update command \verb | <var:i0> := <nat:4> ; | . This code takes $ \{ <var:X> = <var:y> \} $ as the condition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \} $ . Taking a look at the next bit of code found in our code segment , the code \verb | <var:i1> := <nat:3> ; | . This redefines the precondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \} $ to $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \} $ . This is deduced with the assignment scheme in typical Hoare techniques . Next , the environment update line \verb | <var:i1> := <var:i1> * <var:X> ; | . This transfers $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \} $ to the postcondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \} $ . This is given by the assignment scheme given by typical Hoare reasoning . Honing in on the subsequent bit of code contained in the code , we see the command assigning $ <nat:4> $ into $ <var:i2>$ . This code redefines the precondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \} $ into the postcondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \} $ . Taking another step toward the upcoming step found in the list of instructions , the line letting $ <var:i2> * <var:X> $ into $ <var:i2>$ . This statement moves the precondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \} $ toward $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \times <var:y> \} $ . This is guaranteed using the assignment scheme in usual Hoare techniques . Going forward , the variable update statement defining $ <var:i2> * <var:X> $ to $ <var:i2>$ . This code takes the precondition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \times <var:y> \} $ to the condition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \times <var:y> ^ <nat:2> \} $ . This is given with the assignment inference rule found in standard Hoare techniques . Looking at the proceeding command found in our set of instructions , we have the command binding $ <var:i2> $ toward $ <var:G>$ . This line advances $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:i2> = <nat:4> \times <var:y> ^ <nat:2> \} $ into the condition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> \} $ . This is known to be sound with the assignment scheme in typical Hoare logic . Considering the subsequent command in our code , we have the assignment command \verb | <var:G> := <var:G> + <var:i1> ; | . This code forwards $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:i1> = <nat:3> \times <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> \} $ as the condition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> \} $ . This is deduced using the assignment law given by typical Hoare techniques . Honing in on the following line in the code segment , we see the environment update statement \verb | <var:G> := <var:G> + <var:i0> | . This line moves the condition $ \{ <var:X> = <var:y> \land <var:i0> = <nat:4> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> \} $ to $ \{ <var:X> = <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:X> = <var:y> }} <var:i0> := <nat:4> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:X> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:X> ; <var:i2> := <var:i2> * <var:X> ; <var:G> := <var:i2> ; <var:G> := <var:G> + <var:i1> ; <var:G> := <var:G> + <var:i0> {{ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> * <var:y> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> * <var:y> /\ <var:i2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> * <var:y> /\ <var:i2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:3> * <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:i0> = <nat:4> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 