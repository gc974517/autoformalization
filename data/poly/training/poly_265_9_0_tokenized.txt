\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:V> ; <var:G2> := <nat:7> ; <var:G2> := <var:G2> * <var:V> ; <var:G2> := <var:G2> * <var:V> ; <var:A> := <var:G2> ; <var:A> := <var:A> + <var:G1> ; <var:A> := <var:A> + <var:G0> \end{verbatim} Allow it to hold that $ <var:V> = <var:g> $ with some positive coefficients $ <var:g> $ prior to the evaluation of our series of commands it follows that $ <var:A> = <nat:7> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> $ when code segment executes . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:V> = <var:g> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \} \\ <var:G1> := <nat:3> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \} \\ <var:G1> := <var:G1> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \cdot <var:g> \} \\ <var:G2> := <nat:7> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \cdot <var:g> \land <var:G2> = <nat:7> \} \\ <var:G2> := <var:G2> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \cdot <var:g> \land <var:G2> = <nat:7> \cdot <var:g> \} \\ <var:G2> := <var:G2> * <var:V> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \cdot <var:g> \land <var:G2> = <nat:7> \cdot <var:g> ^ <nat:2> \} \\ <var:A> := <var:G2> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:G1> = <nat:3> \cdot <var:g> \land <var:A> = <nat:7> \cdot <var:g> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:G1> ; \\ \{ <var:V> = <var:g> \land <var:G0> = <nat:3> \land <var:A> = <nat:7> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} \\ <var:A> := <var:A> + <var:G0> \\ \{ <var:V> = <var:g> \land <var:A> = <nat:7> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:3> \} \end{eqnarray} Given the preceding argument , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:V> = <var:g> }} <var:G0> := <nat:3> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:V> ; <var:G2> := <nat:7> ; <var:G2> := <var:G2> * <var:V> ; <var:G2> := <var:G2> * <var:V> ; <var:A> := <var:G2> ; <var:A> := <var:A> + <var:G1> ; <var:A> := <var:A> + <var:G0> {{ <var:A> = <nat:7> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:g> /\ <var:G2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:g> /\ <var:G2> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:g> /\ <var:G2> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:3> * <var:g> /\ <var:A> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:G0> = <nat:3> /\ <var:A> = <nat:7> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:A> = <nat:7> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 