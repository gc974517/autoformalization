\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O> := <nat:1> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> ; <var:O> := <nat:4> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allow $ <var:y> = <var:J> $ ( assuming some natural numbers $ <var:J> $ ) before the evaluation of our list of commands , it holds that we see $ <var:O> = <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the series of instructions can be given using Hoare reasoning . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:J> \} & <var:O> := <nat:1> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} \\ \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} & <var:O> := <nat:3> + <var:O> * <var:y> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> + <nat:3> \} \\ \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> + <nat:3> \} & <var:O> := <nat:3> + <var:O> * <var:y> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:3> \} \\ \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:3> \} & <var:O> := <var:O> * <var:y> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + \} \end{tabular} After , \[ \begin{tabular} {rcl} \{ <var:y> = <var:J> \} & <var:O> := <nat:1> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} \\ \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} & <var:O> := <nat:3> + <var:O> * <var:y> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> + <nat:3> \} \\ \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> + <nat:3> \} & <var:O> := <nat:3> + <var:O> * <var:y> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + <nat:3> \} \end{tabular} Next , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:J> \} & <var:O> := <nat:1> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} \end{tabular} This is rigorously given through the rule defined in usual Hoare techniques . Considering the subsequent step found in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:J> \} & <var:O> := <nat:1> & \{ <var:y> = <var:J> \land <var:O> = <nat:1> \} \end{tabular} This is known to be sound using the variable binding scheme obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:1> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> ; <var:O> := <nat:4> + <var:O> * <var:y> ; <var:O> := <nat:3> + <var:O> * <var:y> ; <var:O> := <nat:2> + <var:O> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:y> = <var:J> }} <def:poly> {{ <var:O> = <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:O> = <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 