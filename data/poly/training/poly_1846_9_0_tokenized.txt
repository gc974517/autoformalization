\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:L> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:L> ; <var:R2> := <var:R2> * <var:L> ; <var:F> := <var:R2> ; <var:F> := <var:F> + <var:R1> ; <var:F> := <var:F> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:L> = <var:c> $ --- given some positive integer coefficients $ <var:c> $ --- ahead of evaluating the series of instructions , then we see $ <var:F> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:c> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \} \\ <var:R1> := <nat:2> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \} \\ <var:R1> := <var:R1> * <var:L> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \times <var:c> \} \\ <var:R2> := <nat:4> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \times <var:c> \land <var:R2> = <nat:4> \} \\ <var:R2> := <var:R2> * <var:L> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \times <var:c> \land <var:R2> = <nat:4> \times <var:c> \} \\ <var:R2> := <var:R2> * <var:L> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \times <var:c> \land <var:R2> = <nat:4> \times <var:c> ^ <nat:2> \} \\ <var:F> := <var:R2> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:R1> = <nat:2> \times <var:c> \land <var:F> = <nat:4> \times <var:c> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:R1> ; \\ \{ <var:L> = <var:c> \land <var:R0> = <nat:6> \land <var:F> = <nat:4> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> \} \\ <var:F> := <var:F> + <var:R0> \\ \{ <var:L> = <var:c> \land <var:F> = <nat:4> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:6> \} \end{eqnarray} Using usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:L> ; <var:R2> := <nat:4> ; <var:R2> := <var:R2> * <var:L> ; <var:R2> := <var:R2> * <var:L> ; <var:F> := <var:R2> ; <var:F> := <var:F> + <var:R1> ; <var:F> := <var:F> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:L> = <var:c> }} <def:poly> {{ <var:F> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> * <var:c> /\ <var:R2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> * <var:c> /\ <var:R2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> * <var:c> /\ <var:R2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:2> * <var:c> /\ <var:F> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:R0> = <nat:6> /\ <var:F> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:c> /\ <var:F> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 