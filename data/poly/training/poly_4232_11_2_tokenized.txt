\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:2> + <var:C> * <var:z> ; <var:C> := <nat:1> + <var:C> * <var:z> ; <var:C> := <nat:3> + <var:C> * <var:z> ; <var:C> := <nat:2> + <var:C> * <var:z> ; <var:C> := <nat:3> + <var:C> * <var:z> ; <var:C> := <nat:1> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:2> + <var:C> * <var:z> \end{verbatim} Assuming , assuming some positive integer coefficients $ <var:o> $ , $ <var:z> = <var:o> $ before executing the code it holds that we see $ <var:C> = <nat:4> \cdot <var:o> ^ <nat:10> + <nat:2> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:3> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our code segment can be demonstrated through standard Hoare reasoning . Moving forward to the next step , we see the variable update statement defining $ <nat:4> $ into $ <var:C>$ . This code advances the precondition $ \{ <var:z> = <var:o> \} $ to the condition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \} $ . Taking another step toward the proceeding piece of code in our segment of code , the variable update command letting $ <nat:2> + <var:C> * <var:z> $ into $ <var:C>$ . This code moves $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \} $ into the postcondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> + <nat:2> \} $ . This is deduced through the assignment inference rule given by standard Hoare logic . Shifting focus toward the upcoming statement contained in the program , the environment update line \verb | <var:C> := <nat:1> + <var:C> * <var:z> ; | . This code redefines the precondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> + <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> \} $ . This is given through the assignment inference rule defined by standard Hoare logic . Next , the variable binding line \verb | <var:C> := <nat:3> + <var:C> * <var:z> ; | . This forwards the precondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:1> \} $ to $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:3> \} $ . This is ensured through the assignment scheme in usual Hoare logic . Moving on to the upcoming line seen in our series of commands , we see the binding code giving $ <nat:2> + <var:C> * <var:z> $ as $ <var:C>$ . This forwards the precondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:3> \} $ to $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:2> \} $ . Considering the next step seen in our series of instructions , we see the environment update line binding $ <nat:3> + <var:C> * <var:z> $ toward $ <var:C>$ . This advances $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:2> \} $ to $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:3> \} $ . Advancing to the subsequent piece of code contained in our series of instructions , we see the variable binding statement \verb | <var:C> := <nat:1> + <var:C> * <var:z> ; | . This moves the condition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:3> \} $ into the condition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:1> \} $ . This is shown to be logically sound with the assignment inference rule of standard Hoare logic . Further , the variable assignmet command \verb | <var:C> := <nat:4> + <var:C> * <var:z> ; | . This redefines the precondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:1> \} $ into the postcondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ . This is rigorously given by the assignment scheme found in typical Hoare reasoning . Taking another step toward the following statement seen in our series of commands , we see the assignment command \verb | <var:C> := <nat:4> + <var:C> * <var:z> ; | . This command forwards the condition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:1> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:1> \cdot <var:o> + <nat:4> \} $ into $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:8> + <nat:2> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ . Advancing on , the command defining $ <nat:4> + <var:C> * <var:z> $ as $ <var:C>$ . This takes the precondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:8> + <nat:2> \cdot <var:o> ^ <nat:7> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:3> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ as $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:9> + <nat:2> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:3> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ . This is shown to be logically sound with the assignment law given by typical Hoare techniques . Advancing , the environment update statement assigning $ <nat:2> + <var:C> * <var:z$ as $ <var:C>$ . This command takes the condition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:9> + <nat:2> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:7> + <nat:3> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:3> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:4> \} $ as the postcondition $ \{ <var:z> = <var:o> \land <var:C> = <nat:4> \cdot <var:o> ^ <nat:10> + <nat:2> \cdot <var:o> ^ <nat:9> + <nat:1> \cdot <var:o> ^ <nat:8> + <nat:3> \cdot <var:o> ^ <nat:7> + <nat:2> \cdot <var:o> ^ <nat:6> + <nat:3> \cdot <var:o> ^ <nat:5> + <nat:1> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:C> := <nat:4> ; <var:C> := <nat:2> + <var:C> * <var:z> ; <var:C> := <nat:1> + <var:C> * <var:z> ; <var:C> := <nat:3> + <var:C> * <var:z> ; <var:C> := <nat:2> + <var:C> * <var:z> ; <var:C> := <nat:3> + <var:C> * <var:z> ; <var:C> := <nat:1> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:4> + <var:C> * <var:z> ; <var:C> := <nat:2> + <var:C> * <var:z> {{ <var:C> = <nat:4> * <var:o> ^ <nat:10> + <nat:2> * <var:o> ^ <nat:9> + <nat:1> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:9> + <nat:2> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:C> = <nat:4> * <var:o> ^ <nat:10> + <nat:2> * <var:o> ^ <nat:9> + <nat:1> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 