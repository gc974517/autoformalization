\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:l> ; <var:y> := <var:e1> ; <var:y> := <var:y> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:l> = <var:u> $ before running the code , then we see $ <var:y> = <nat:1> \cdot <var:u> + <nat:2> $ after segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for this set of instructions is shown using usual Hoare logic . Now , we see the variable update line giving $ <nat:2> $ as $ <var:e0>$ . This line transfers $ \{ <var:l> = <var:u> \} $ toward the condition $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \} $ . Taking another step toward the subsequent line of code seen in the list of commands , we see the code assigning $ <nat:1> $ as $ <var:e1>$ . This line moves the precondition $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \} $ to $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \} $ . This is shown to be logically sound by the assignment inference rule given by Hoare logic . Advancing to the upcoming line of code in our list of commands , we have the binding code \verb | <var:e1> := <var:e1> * <var:l> ; | . This command advances the condition $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \} $ as the postcondition $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \cdot <var:u> \} $ . This is deduced with the assignment rule in typical Hoare logic . Next , we have the assignment line defining $ <var:e1> $ into $ <var:y>$ . This command forwards $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \cdot <var:u> \} $ to the postcondition $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:y> = <nat:1> \cdot <var:u> \} $ . Taking another step toward the proceeding command found in our set of instructions , we see the binding line assigning $ <var:y> + <var:e0$ to $ <var:y>$ . This code forwards $ \{ <var:l> = <var:u> \land <var:e0> = <nat:2> \land <var:y> = <nat:1> \cdot <var:u> \} $ toward the postcondition $ \{ <var:l> = <var:u> \land <var:y> = <nat:1> \cdot <var:u> + <nat:2> \} $ . This is guaranteed with the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:l> ; <var:y> := <var:e1> ; <var:y> := <var:y> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:l> = <var:u> }} <def:poly> {{ <var:y> = <nat:1> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:e0> = <nat:2> /\ <var:y> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:y> = <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 