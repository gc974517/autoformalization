\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:5> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:J> ; <var:e> := <var:v1> ; <var:e> := <var:e> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:J> = <var:o> $ prior to the evaluation of the list of commands it follows that $ <var:e> = <nat:1> \cdot <var:o> + <nat:5> $ once list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for this list of instructions is done using standard Hoare logic . Focusing on the upcoming statement found in the list of commands , we have the environment update code \verb | <var:v0> := <nat:5> ; | . This transfers the precondition $ \{ <var:J> = <var:o> \} $ as $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \} $ . This is deduced using the assignment inference rule given in standard Hoare reasoning . Moving on to the proceeding piece of code in our program , the assignment line defining $ <nat:1> $ into $ <var:v1>$ . This advances $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \} $ to the condition $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} $ . Observing the subsequent statement in the series of instructions , the variable update statement yielding $ <var:v1> * <var:J> $ to $ <var:v1>$ . This command forwards the condition $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} $ to the condition $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:o> \} $ . This is shown by the assignment scheme defined by typical Hoare techniques . Moving on to the upcoming line in our series of commands , the statement assigning $ <var:v1> $ into $ <var:e>$ . This advances $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:o> \} $ to $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:e> = <nat:1> \times <var:o> \} $ . This is sound with the assignment rule defined by typical Hoare logic . After , we see the environment update statement yielding $ <var:e> + <var:v0$ toward $ <var:e>$ . This command advances the precondition $ \{ <var:J> = <var:o> \land <var:v0> = <nat:5> \land <var:e> = <nat:1> \times <var:o> \} $ to $ \{ <var:J> = <var:o> \land <var:e> = <nat:1> \times <var:o> + <nat:5> \} $ . This is rigorously given using the assignment law of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:5> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:J> ; <var:e> := <var:v1> ; <var:e> := <var:e> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:J> = <var:o> }} <def:poly> {{ <var:e> = <nat:1> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:o> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:o> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:o> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:o> /\ <var:v0> = <nat:5> /\ <var:e> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:o> /\ <var:e> = <nat:1> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 