\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:a> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:9> ; <var:X> := <var:A1> <var:X> := <var:X> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:a> = <var:V> $ ahead of the evaluation of our code it must be that $ <var:X> = <nat:9> \times <var:V> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is done using usual Hoare techniques . Immediately following , we see \begin{eqnarray} \{ <var:a> = <var:V> \} \, <var:A1> := <var:a> \, \{ <var:a> = <var:V> \land <var:A1> = <var:V> \} \\ \{ <var:a> = <var:V> \land <var:A1> = <var:V> \} \, <var:A0> := <nat:1> \, \{ <var:a> = <var:V> \land <var:A1> = <var:V> \land <var:A0> = <nat:1> \} \\ \{ <var:a> = <var:V> \land <var:A1> = <var:V> \land <var:A0> = <nat:1> \} \, <var:A1> := <var:A1> * <nat:9> \, \{ <var:a> = <var:V> \land <var:A1> = <nat:9> \cdot <var:V> \land <var:A0> = <nat:1> \} \\ \{ <var:a> = <var:V> \land <var:A1> = <nat:9> \cdot <var:V> \land <var:A0> = <nat:1> \} \, <var:X> := <var:A1\, \{ <var:a> = <var:V> \land <var:A0> = <nat:1> \land <var:X> = <nat:9> \cdot <var:V> \} \end{eqnarray} Stepping through , \begin{eqnarray} \{ <var:a> = <var:V> \} \, <var:A1> := <var:a> \, \{ <var:a> = <var:V> \land <var:A1> = <var:V> \} \end{eqnarray} This is rigorously given by the rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:a> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:9> ; <var:X> := <var:A1> <var:X> := <var:X> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <def:poly> {{ <var:X> = <nat:9> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:A1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:A1> = <var:V> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:A1> = <nat:9> * <var:V> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:A0> = <nat:1> /\ <var:X> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X> = <nat:9> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 