\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:N0> := <nat:2> ; <var:c> := <var:N0> \end{verbatim} Allow it to be that $ <var:S> = <var:D> $ , taking $ <var:D> $ , prior to evaluating this series of commands , then we have $ <var:c> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is clear by typical Hoare logic . Shifting focus toward the upcoming bit of code found in our list of instructions , \begin{eqnarray} \{ <var:S> = <var:D> \} \, <var:N0> := <nat:2> \, \{ <var:S> = <var:D> \land <var:N0> = <nat:2> \} \end{eqnarray} Going to the next step , \begin{eqnarray} \{ <var:S> = <var:D> \} \, <var:N0> := <nat:2> \, \{ <var:S> = <var:D> \land <var:N0> = <nat:2> \} \end{eqnarray} This is deduced with the rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:S> = <var:D> }} <var:N0> := <nat:2> ; <var:c> := <var:N0> {{ <var:c> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:c> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 