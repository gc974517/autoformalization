\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:5> ; <var:q> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:K> = <var:c> $ ( with some $ <var:c> \in \mathbb{N} $ ) prior to interpreting our series of instructions , it follows that we have $ <var:q> = <nat:5> $ after set of commands finishes . \end{theorem} \begin{proof} The argument for the list of instructions can be accomplished by standard Hoare reasoning . Honing in on the subsequent commands found in our program , we see \begin{verbatim} { <var:K> = <var:c> } <var:H0> := <nat:5> { <var:K> = <var:c> \land <var:H0> = <nat:5> } { <var:K> = <var:c> \land <var:H0> = <nat:5> } <var:q> := <var:H0{ <var:K> = <var:c> \land <var:q> = <nat:5> } \end{verbatim} This is sound through the law found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:q> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <def:poly> {{ <var:q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 