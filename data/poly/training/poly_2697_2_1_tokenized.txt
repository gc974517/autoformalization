\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:X0> := <nat:1> ; <var:y> := <var:X0> \end{verbatim} Allow , for all positive coefficients $ <var:r> $ , it to hold that $ <var:m> = <var:r> $ prior to evaluating our set of instructions it follows that we see $ <var:y> = <nat:1> $ when list of commands has finished . \end{theorem} \begin{proof} The course of logic for our list of commands can be done using typical Hoare techniques . Moving forward to the subsequent piece of code found in the program , we see the variable assignmet statement \verb | <var:X0> := <nat:1> ; | . This takes the condition $ \{ <var:m> = <var:r> \} $ toward $ \{ <var:m> = <var:r> \land <var:X0> = <nat:1> \} $ . Focusing on the upcoming line of code contained in our program , we see the binding command \verb | <var:y> := <var:X0> | . This command redefines the condition $ \{ <var:m> = <var:r> \land <var:X0> = <nat:1> \} $ into the postcondition $ \{ <var:m> = <var:r> \land <var:y> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:m> = <var:r> }} <var:X0> := <nat:1> ; <var:y> := <var:X0> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:r> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 