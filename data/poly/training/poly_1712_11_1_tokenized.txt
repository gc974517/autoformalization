\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:M> ; <var:a2> := <var:a1> * <var:M> ; <var:a3> := <var:a2> * <var:M> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:7> ; <var:a2> := <var:a2> * <nat:3> ; <var:a3> := <var:a3> * <nat:3> ; <var:q> := <var:a3> <var:q> := <var:q> + <var:a2> <var:q> := <var:q> + <var:a1> <var:q> := <var:q> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given --- letting positive numbers $ <var:x> $ --- that we have $ <var:M> = <var:x> $ before executing this series of instructions it must be that $ <var:q> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:2> $ after list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions can be given through Hoare logic . Shifting focus toward the proceeding statement in our list of instructions , we have the environment update code defining $ <var:M> $ as $ <var:a1>$ . This moves the precondition $ \{ <var:M> = <var:x> \} $ toward $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \} $ . This is sound through the assignment rule found in typical Hoare techniques . Shifting focus toward the subsequent line contained in our set of commands , we see the command \verb | <var:a2> := <var:a1> * <var:M> ; | . This moves the condition $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \} $ toward $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule defined in typical Hoare techniques . Keeping momentum , we see the binding code \verb | <var:a3> := <var:a2> * <var:M> ; | . This command transfers the precondition $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \} $ toward the postcondition $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \} $ . Further , we see the variable assignmet command \verb | <var:a0> := <nat:2> ; | . This redefines the condition $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \} $ into $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ . Jumping to the next statement found in our set of instructions , we have the variable assignmet code binding $ <var:a1> * <nat:7> $ to $ <var:a1>$ . This advances the condition $ \{ <var:M> = <var:x> \land <var:a1> = <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ into $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare techniques . Moving onward , we see the environment update statement \verb | <var:a2> := <var:a2> * <nat:3> ; | . This command forwards $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ to the condition $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ . Advancing on , we see the environment update line yielding $ <var:a3> * <nat:3> $ to $ <var:a3>$ . This command transfers $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a3> = <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ to the condition $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ . This is ensured by the assignment scheme from Hoare techniques . Advancing , we see the variable binding statement \verb | <var:q> := <var:a3> | . This code moves the condition $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:x> ^ <nat:3> \land <var:a0> = <nat:2> \} $ to the condition $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> \} $ . This is guaranteed through the assignment rule from typical Hoare reasoning . Advancing to the next statement contained in the program , we have the environment update statement \verb | <var:q> := <var:q> + <var:a2> | . This moves $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a2> = <nat:3> \times <var:x> ^ <nat:2> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> \} $ as $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule in typical Hoare reasoning . Considering the following statement found in the set of instructions , we have the variable update line assigning $ <var:q> + <var:a1$ to $ <var:q>$ . This moves the condition $ \{ <var:M> = <var:x> \land <var:a1> = <nat:7> \times <var:x> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> \} $ toward $ \{ <var:M> = <var:x> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> \} $ . Observing the proceeding command seen in the set of instructions , the binding command giving $ <var:q> + <var:a0$ as $ <var:q>$ . This statement takes $ \{ <var:M> = <var:x> \land <var:a0> = <nat:2> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> \} $ to the postcondition $ \{ <var:M> = <var:x> \land <var:q> = <nat:3> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:7> \times <var:x> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:M> ; <var:a2> := <var:a1> * <var:M> ; <var:a3> := <var:a2> * <var:M> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:7> ; <var:a2> := <var:a2> * <nat:3> ; <var:a3> := <var:a3> * <nat:3> ; <var:q> := <var:a3> <var:q> := <var:q> + <var:a2> <var:q> := <var:q> + <var:a1> <var:q> := <var:q> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:M> = <var:x> }} <def:poly> {{ <var:q> = <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <var:x> /\ <var:a2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <var:x> /\ <var:a2> = <var:x> ^ <nat:2> /\ <var:a3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <var:x> /\ <var:a2> = <var:x> ^ <nat:2> /\ <var:a3> = <var:x> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <nat:7> * <var:x> /\ <var:a2> = <var:x> ^ <nat:2> /\ <var:a3> = <var:x> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <nat:7> * <var:x> /\ <var:a2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:a3> = <var:x> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <nat:7> * <var:x> /\ <var:a2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:x> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <nat:7> * <var:x> /\ <var:a2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:a0> = <nat:2> /\ <var:q> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a1> = <nat:7> * <var:x> /\ <var:a0> = <nat:2> /\ <var:q> = <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:a0> = <nat:2> /\ <var:q> = <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:q> = <nat:3> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 