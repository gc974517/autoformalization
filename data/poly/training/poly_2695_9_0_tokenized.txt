\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:s> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:s> ; <var:A2> := <var:A2> * <var:s> ; <var:M> := <var:A2> ; <var:M> := <var:M> + <var:A1> ; <var:M> := <var:M> + <var:A0> \end{verbatim} Assume that $ <var:s> = <var:w> $ , given all positive coefficients $ <var:w> $ , before interpreting our series of commands , it follows that we have $ <var:M> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> $ after series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our code is demonstrated by the below decorated program . \begin{eqnarray} \{ <var:s> = <var:w> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \} \\ <var:A1> := <nat:3> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \} \\ <var:A1> := <var:A1> * <var:s> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \times <var:w> \} \\ <var:A2> := <nat:1> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \times <var:w> \land <var:A2> = <nat:1> \} \\ <var:A2> := <var:A2> * <var:s> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \times <var:w> \land <var:A2> = <nat:1> \times <var:w> \} \\ <var:A2> := <var:A2> * <var:s> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \times <var:w> \land <var:A2> = <nat:1> \times <var:w> ^ <nat:2> \} \\ <var:M> := <var:A2> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \times <var:w> \land <var:M> = <nat:1> \times <var:w> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:A1> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:3> \land <var:M> = <nat:1> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> \} \\ <var:M> := <var:M> + <var:A0> \\ \{ <var:s> = <var:w> \land <var:M> = <nat:1> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <var:A0> := <nat:3> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:s> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:s> ; <var:A2> := <var:A2> * <var:s> ; <var:M> := <var:A2> ; <var:M> := <var:M> + <var:A1> ; <var:M> := <var:M> + <var:A0> {{ <var:M> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:w> /\ <var:A2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:w> /\ <var:A2> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:w> /\ <var:A2> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:w> /\ <var:M> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:3> /\ <var:M> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:M> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 