\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:6> ; <var:l> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Given --- for whole numbers $ <var:Q> $ --- it to hold that $ <var:E> = <var:Q> $ ahead of evaluating our code segment it holds that $ <var:l> = <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:E> = <var:Q> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:E> = <var:Q> \land <var:H0> = <nat:6> \} \\ <var:l> := <var:H0> \\ \{ <var:E> = <var:Q> \land <var:l> = <nat:6> \} \end{eqnarray} Thus , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:6> ; <var:l> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:E> = <var:Q> }} <def:poly> {{ <var:l> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:l> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 