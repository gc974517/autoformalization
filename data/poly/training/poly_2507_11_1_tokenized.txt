\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z1> := <var:s> ; <var:Z2> := <var:Z1> * <var:s> ; <var:Z3> := <var:Z2> * <var:s> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:a> := <var:Z3> <var:a> := <var:a> + <var:Z2> <var:a> := <var:a> + <var:Z1> <var:a> := <var:a> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:s> = <var:V> $ before interpreting the set of commands it follows that $ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> $ after code has finished executing . \end{theorem} \begin{proof} Note that this decorated set of commands . \begin{eqnarray} \{ <var:s> = <var:V> \} \\ <var:Z1> := <var:s> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <var:V> \} \\ <var:Z2> := <var:Z1> * <var:s> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:s> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <var:Z1> * <nat:6> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <nat:6> \cdot <var:V> \land <var:Z2> = <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z2> := <var:Z2> * <nat:9> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <nat:6> \cdot <var:V> \land <var:Z2> = <nat:9> \cdot <var:V> ^ <nat:2> \land <var:Z3> = <var:V> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:Z3> := <var:Z3> * <nat:2> ; \\ \{ <var:s> = <var:V> \land <var:Z1> = <nat:6> \cdot <var:V> \land <var:Z2> = <nat:9> \cdot <var:V> ^ <nat:2> \land <var:Z3> = <nat:2> \cdot <var:V> ^ <nat:3> \land <var:Z0> = <nat:7> \} \\ <var:a> := <var:Z3> \\ \{ <var:s> = <var:V> \land <var:Z1> = <nat:6> \cdot <var:V> \land <var:Z2> = <nat:9> \cdot <var:V> ^ <nat:2> \land <var:Z0> = <nat:7> \land <var:a> = <nat:2> \cdot <var:V> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:Z2> \\ \{ <var:s> = <var:V> \land <var:Z1> = <nat:6> \cdot <var:V> \land <var:Z0> = <nat:7> \land <var:a> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:9> \cdot <var:V> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:Z1> \\ \{ <var:s> = <var:V> \land <var:Z0> = <nat:7> \land <var:a> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:9> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> \} \\ <var:a> := <var:a> + <var:Z0> \\ \{ <var:s> = <var:V> \land <var:a> = <nat:2> \cdot <var:V> ^ <nat:3> + <nat:9> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z1> := <var:s> ; <var:Z2> := <var:Z1> * <var:s> ; <var:Z3> := <var:Z2> * <var:s> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:a> := <var:Z3> <var:a> := <var:a> + <var:Z2> <var:a> := <var:a> + <var:Z1> <var:a> := <var:a> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:s> = <var:V> }} <def:poly> {{ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <nat:6> * <var:V> /\ <var:Z2> = <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <nat:6> * <var:V> /\ <var:Z2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:Z3> = <var:V> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <nat:6> * <var:V> /\ <var:Z2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:V> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <nat:6> * <var:V> /\ <var:Z2> = <nat:9> * <var:V> ^ <nat:2> /\ <var:Z0> = <nat:7> /\ <var:a> = <nat:2> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z1> = <nat:6> * <var:V> /\ <var:Z0> = <nat:7> /\ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:Z0> = <nat:7> /\ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:9> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 