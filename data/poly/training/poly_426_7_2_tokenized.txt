\begin{document} \begin{theorem} We define a series of instructions as follows \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:u> ; <var:C> := <nat:4> + <var:C> * <var:u> ; <var:C> := <var:C> * <var:u> ; <var:C> := <nat:2> + <var:C> * <var:u> ; <var:C> := <nat:4> + <var:C> * <var:u> ; <var:C> := <nat:1> + <var:C> * <var:u> \end{verbatim} Assume it to hold that $ <var:u> = <var:l> $ before interpreting the code segment , then $ <var:C> = <nat:1> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> $ once code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:l> \} \\ <var:C> := <nat:1> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \} \\ <var:C> := <nat:2> + <var:C> * <var:u> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:u> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:4> \} \end{eqnarray} Allowing interpreting our code segment gives : \begin{eqnarray} <var:C> := <var:C> * <var:u> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + \} \\ <var:C> := <nat:2> + <var:C> * <var:u> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:u> ; \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> + <nat:4> \} \\ <var:C> := <nat:1> + <var:C> * <var:u> \\ \{ <var:u> = <var:l> \land <var:C> = <nat:1> \times <var:l> ^ <nat:6> + <nat:2> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:u> = <var:l> }} <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:u> ; <var:C> := <nat:4> + <var:C> * <var:u> ; <var:C> := <var:C> * <var:u> ; <var:C> := <nat:2> + <var:C> * <var:u> ; <var:C> := <nat:4> + <var:C> * <var:u> ; <var:C> := <nat:1> + <var:C> * <var:u> {{ <var:C> = <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:l> /\ <var:C> = <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 