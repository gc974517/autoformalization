\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:j1> := <var:b> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:9> ; <var:M> := <var:j1> <var:M> := <var:M> + <var:j0> \end{verbatim} Allow --- given some integers $ <var:E> $ --- $ <var:b> = <var:E> $ prior to running the program it must be that we see $ <var:M> = <nat:9> \times <var:E> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is done with typical Hoare logic . After , \begin{verbatim} { <var:b> = <var:E> } <var:j1> := <var:b> { <var:b> = <var:E> \land <var:j1> = <var:E> } { <var:b> = <var:E> \land <var:j1> = <var:E> } <var:j0> := <nat:9> { <var:b> = <var:E> \land <var:j1> = <var:E> \land <var:j0> = <nat:9> } { <var:b> = <var:E> \land <var:j1> = <var:E> \land <var:j0> = <nat:9> } <var:j1> := <var:j1> * <nat:9> { <var:b> = <var:E> \land <var:j1> = <nat:9> \cdot <var:E> \land <var:j0> = <nat:9> } { <var:b> = <var:E> \land <var:j1> = <nat:9> \cdot <var:E> \land <var:j0> = <nat:9> } <var:M> := <var:j1{ <var:b> = <var:E> \land <var:j0> = <nat:9> \land <var:M> = <nat:9> \cdot <var:E> } \end{verbatim} This is rigorously given by the environment update inference rule defined in standard Hoare logic . Looking at the proceeding piece of code seen in our series of commands , \begin{verbatim} { <var:b> = <var:E> } <var:j1> := <var:b> { <var:b> = <var:E> \land <var:j1> = <var:E> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:b> = <var:E> }} <var:j1> := <var:b> ; <var:j0> := <nat:9> ; <var:j1> := <var:j1> * <nat:9> ; <var:M> := <var:j1> <var:M> := <var:M> + <var:j0> {{ <var:M> = <nat:9> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:j1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:j1> = <var:E> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:j1> = <nat:9> * <var:E> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:j0> = <nat:9> /\ <var:M> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:M> = <nat:9> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 