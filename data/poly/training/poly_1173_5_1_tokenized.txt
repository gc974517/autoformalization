\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:r1> := <var:S> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:6> ; <var:F> := <var:r1> <var:F> := <var:F> + <var:r0> \end{verbatim} Given it to be that $ <var:S> = <var:s> $ before the evaluation of the series of instructions then $ <var:F> = <nat:6> \cdot <var:s> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:S> = <var:s> \} \\ <var:r1> := <var:S> ; \\ \{ <var:S> = <var:s> \land <var:r1> = <var:s> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:S> = <var:s> \land <var:r1> = <var:s> \land <var:r0> = <nat:4> \} \\ <var:r1> := <var:r1> * <nat:6> ; \\ \{ <var:S> = <var:s> \land <var:r1> = <nat:6> \cdot <var:s> \land <var:r0> = <nat:4> \} \\ <var:F> := <var:r1> \\ \{ <var:S> = <var:s> \land <var:r0> = <nat:4> \land <var:F> = <nat:6> \cdot <var:s> \} \\ <var:F> := <var:F> + <var:r0> \\ \{ <var:S> = <var:s> \land <var:F> = <nat:6> \cdot <var:s> + <nat:4> \} \end{eqnarray} Given the preceding argument , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:S> = <var:s> }} <var:r1> := <var:S> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:6> ; <var:F> := <var:r1> <var:F> := <var:F> + <var:r0> {{ <var:F> = <nat:6> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r1> = <var:s> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r1> = <nat:6> * <var:s> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:4> /\ <var:F> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:F> = <nat:6> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 