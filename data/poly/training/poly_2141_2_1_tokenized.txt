\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:5> ; <var:z> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allow --- given every $ <var:Q> $ --- that we have $ <var:k> = <var:Q> $ prior to the execution of our set of commands , it follows that we see $ <var:z> = <nat:5> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:k> = <var:Q> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:k> = <var:Q> \land <var:r0> = <nat:5> \} \\ <var:z> := <var:r0> \\ \{ <var:k> = <var:Q> \land <var:z> = <nat:5> \} \end{eqnarray} Considering the preceding argument , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:5> ; <var:z> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <def:poly> {{ <var:z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 