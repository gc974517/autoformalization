\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:o> ; <var:J> := <var:y1> ; <var:J> := <var:J> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume that $ <var:o> = <var:Z> $ --- given any positive integers $ <var:Z> $ --- ahead of the evaluation of this list of instructions it holds that we have $ <var:J> = <nat:1> * <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:o> = <var:Z> \} \\ <var:y0> := <nat:3> ; \\ \{ <var:o> = <var:Z> \land <var:y0> = <nat:3> \} \\ <var:y1> := <nat:1> ; \\ \{ <var:o> = <var:Z> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> \} \\ <var:y1> := <var:y1> * <var:o> ; \\ \{ <var:o> = <var:Z> \land <var:y0> = <nat:3> \land <var:y1> = <nat:1> * <var:Z> \} \\ <var:J> := <var:y1> ; \\ \{ <var:o> = <var:Z> \land <var:y0> = <nat:3> \land <var:J> = <nat:1> * <var:Z> \} \\ <var:J> := <var:J> + <var:y0> \\ \{ <var:o> = <var:Z> \land <var:J> = <nat:1> * <var:Z> + <nat:3> \} \end{eqnarray} Therefore , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:o> ; <var:J> := <var:y1> ; <var:J> := <var:J> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:o> = <var:Z> }} <def:poly> {{ <var:J> = <nat:1> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:y0> = <nat:3> /\ <var:J> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:J> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 