\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:r1> := <var:n> ; <var:r2> := <var:r1> * <var:n> ; <var:r3> := <var:r2> * <var:n> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:7> ; <var:h> := <var:r3> <var:h> := <var:h> + <var:r2> <var:h> := <var:h> + <var:r1> <var:h> := <var:h> + <var:r0> \end{verbatim} Allow , letting $ <var:K> \in \mathbb{N} $ , that $ <var:n> = <var:K> $ ahead of the evaluation of the series of instructions , then we have $ <var:h> = <nat:7> \cdot <var:K> ^ <nat:3> + <nat:9> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program can be given using typical Hoare reasoning . Moving on to the next step , \verb | { <var:n> = <var:K> } <var:r1> := <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> } | , \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> } <var:r2> := <var:r1> * <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> } | , \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> } <var:r3> := <var:r2> * <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> } | , \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> } <var:r0> := <nat:3> { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> \land <var:r0> = <nat:3> } | , \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> \land <var:r0> = <nat:3> } <var:r1> := <var:r1> * <nat:2> { <var:n> = <var:K> \land <var:r1> = <nat:2> * <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> \land <var:r0> = <nat:3> } | and \verb | { <var:n> = <var:K> \land <var:r1> = <nat:2> * <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> \land <var:r0> = <nat:3> } <var:r2> := <var:r2> * <nat:9> { <var:n> = <var:K> \land <var:r1> = <nat:2> * <var:K> \land <var:r2> = <nat:9> * <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> \land <var:r0> = <nat:3> } | . This is rigorously given by the variable update inference rule in Hoare logic . Advancing , we see \verb | { <var:n> = <var:K> } <var:r1> := <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> } | . This is shown by the variable update scheme in usual Hoare reasoning . Considering the following command found in our program , we have \verb | { <var:n> = <var:K> } <var:r1> := <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> } | . Jumping to the following lines of codecontained in our segment of code , we have \verb | { <var:n> = <var:K> } <var:r1> := <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> } | , \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> } <var:r2> := <var:r1> * <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> } | and \verb | { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> } <var:r3> := <var:r2> * <var:n> { <var:n> = <var:K> \land <var:r1> = <var:K> \land <var:r2> = <var:K> ^ <nat:2> \land <var:r3> = <var:K> ^ <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <var:r1> := <var:n> ; <var:r2> := <var:r1> * <var:n> ; <var:r3> := <var:r2> * <var:n> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:7> ; <var:h> := <var:r3> <var:h> := <var:h> + <var:r2> <var:h> := <var:h> + <var:r1> <var:h> := <var:h> + <var:r0> {{ <var:h> = <nat:7> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <var:K> /\ <var:r2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <var:K> /\ <var:r2> = <var:K> ^ <nat:2> /\ <var:r3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <var:K> /\ <var:r2> = <var:K> ^ <nat:2> /\ <var:r3> = <var:K> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <nat:2> * <var:K> /\ <var:r2> = <var:K> ^ <nat:2> /\ <var:r3> = <var:K> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <nat:2> * <var:K> /\ <var:r2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:r3> = <var:K> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <nat:2> * <var:K> /\ <var:r2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:r3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <nat:2> * <var:K> /\ <var:r2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:h> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r1> = <nat:2> * <var:K> /\ <var:r0> = <nat:3> /\ <var:h> = <nat:7> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:r0> = <nat:3> /\ <var:h> = <nat:7> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:h> = <nat:7> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 