\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:o> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:1> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allowing $ <var:o> = <var:v> $ before executing this set of commands , it holds that we see $ <var:Z> = <nat:1> \times <var:v> + <nat:7> $ after set of instructions exits . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be demonstrated with this decorated segment of code . \begin{eqnarray} \{ <var:o> = <var:v> \} \\ <var:x1> := <var:o> ; \\ \{ <var:o> = <var:v> \land <var:x1> = <var:v> \} \\ <var:x0> := <nat:7> ; \\ \{ <var:o> = <var:v> \land <var:x1> = <var:v> \land <var:x0> = <nat:7> \} \end{eqnarray} Continuing the evaluation of this program gives : \begin{eqnarray} <var:x1> := <var:x1> * <nat:1> ; \\ \{ <var:o> = <var:v> \land <var:x1> = <nat:1> \cdot <var:v> \land <var:x0> = <nat:7> \} \\ <var:Z> := <var:x1> \\ \{ <var:o> = <var:v> \land <var:x0> = <nat:7> \land <var:Z> = <nat:1> \cdot <var:v> \} \\ <var:Z> := <var:Z> + <var:x0> \\ \{ <var:o> = <var:v> \land <var:Z> = <nat:1> \cdot <var:v> + <nat:7> \} \end{eqnarray} Using standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:o> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:1> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:o> = <var:v> }} <def:poly> {{ <var:Z> = <nat:1> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:x1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:x1> = <var:v> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:x1> = <nat:1> * <var:v> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:x0> = <nat:7> /\ <var:Z> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:Z> = <nat:1> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 