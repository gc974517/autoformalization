\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:C> ; <var:U2> := <var:U2> * <var:C> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:C> ; <var:U3> := <var:U3> * <var:C> ; <var:U3> := <var:U3> * <var:C> ; <var:l> := <var:U3> ; <var:l> := <var:l> + <var:U2> ; <var:l> := <var:l> + <var:U0> \end{verbatim} Allow it to hold that $ <var:C> = <var:S> $ , for $ <var:S> $ , before evaluating the set of commands then $ <var:l> = <nat:7> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Observe that this decorated set of instructions . \begin{eqnarray} \{ <var:C> = <var:S> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \} \\ <var:U2> := <nat:4> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> \} \\ <var:U2> := <var:U2> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> \} \\ <var:U2> := <var:U2> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \} \\ <var:U3> := <nat:7> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \land <var:U3> = <nat:7> \} \\ <var:U3> := <var:U3> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \land <var:U3> = <nat:7> * <var:S> \} \\ <var:U3> := <var:U3> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \land <var:U3> = <nat:7> * <var:S> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \land <var:U3> = <nat:7> * <var:S> ^ <nat:3> \} \\ <var:l> := <var:U3> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:U2> = <nat:4> * <var:S> ^ <nat:2> \land <var:l> = <nat:7> * <var:S> ^ <nat:3> \} \end{eqnarray} Allowing executing our set of commands results in : \begin{eqnarray} <var:l> := <var:l> + <var:U2> ; \\ \{ <var:C> = <var:S> \land <var:U0> = <nat:9> \land <var:l> = <nat:7> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:U0> \\ \{ <var:C> = <var:S> \land <var:l> = <nat:7> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> \} \end{eqnarray} Continuing interpreting this segment of code gives us : \begin{eqnarray} \end{eqnarray} The application of usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <var:U0> := <nat:9> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:C> ; <var:U2> := <var:U2> * <var:C> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:C> ; <var:U3> := <var:U3> * <var:C> ; <var:U3> := <var:U3> * <var:C> ; <var:l> := <var:U3> ; <var:l> := <var:l> + <var:U2> ; <var:l> := <var:l> + <var:U0> {{ <var:l> = <nat:7> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:U3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:U2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:l> = <nat:7> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:U0> = <nat:9> /\ <var:l> = <nat:7> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:l> = <nat:7> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 