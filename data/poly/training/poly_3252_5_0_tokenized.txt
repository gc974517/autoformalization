\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:S> ; <var:Z> := <var:D1> ; <var:Z> := <var:Z> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Given , given all natural numbers $ <var:p> $ , that we have $ <var:S> = <var:p> $ ahead of running the list of instructions it must be that $ <var:Z> = <nat:3> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning produces : \begin{eqnarray} \{ <var:S> = <var:p> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:S> = <var:p> \land <var:D0> = <nat:3> \} \\ <var:D1> := <nat:3> ; \\ \{ <var:S> = <var:p> \land <var:D0> = <nat:3> \land <var:D1> = <nat:3> \} \\ <var:D1> := <var:D1> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:D0> = <nat:3> \land <var:D1> = <nat:3> * <var:p> \} \\ <var:Z> := <var:D1> ; \\ \{ <var:S> = <var:p> \land <var:D0> = <nat:3> \land <var:Z> = <nat:3> * <var:p> \} \\ <var:Z> := <var:Z> + <var:D0> \\ \{ <var:S> = <var:p> \land <var:Z> = <nat:3> * <var:p> + <nat:3> \} \end{eqnarray} Therefore , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:3> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:S> ; <var:Z> := <var:D1> ; <var:Z> := <var:Z> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:S> = <var:p> }} <def:poly> {{ <var:Z> = <nat:3> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:D0> = <nat:3> /\ <var:Z> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:Z> = <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 