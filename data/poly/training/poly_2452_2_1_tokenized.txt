\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:7> ; <var:z> := <var:U0> \end{verbatim} Assume that $ <var:P> = <var:L> $ before running this series of commands , it holds that we have $ <var:z> = <nat:7> $ . \end{theorem} \begin{proof} The proof of this segment of code is given with Hoare reasoning . Advancing , the binding statement \verb | <var:U0> := <nat:7> ; | . This transfers the condition $ \{ <var:P> = <var:L> \} $ toward $ \{ <var:P> = <var:L> \land <var:U0> = <nat:7> \} $ . Moving on to the subsequent line of code contained in the program , the variable assignmet command yielding $ <var:U0$ into $ <var:z>$ . This forwards the precondition $ \{ <var:P> = <var:L> \land <var:U0> = <nat:7> \} $ toward the condition $ \{ <var:P> = <var:L> \land <var:z> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:P> = <var:L> }} <var:U0> := <nat:7> ; <var:z> := <var:U0> {{ <var:z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 