\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:D> ; <var:s2> := <var:s1> * <var:D> ; <var:s3> := <var:s2> * <var:D> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:5> ; <var:b> := <var:s3> <var:b> := <var:b> + <var:s2> <var:b> := <var:b> + <var:s1> <var:b> := <var:b> + <var:s0> \end{verbatim} Assume it to hold that $ <var:D> = <var:l> $ prior to the evaluation of the list of instructions it holds that $ <var:b> = <nat:5> \times <var:l> ^ <nat:3> + <nat:6> \times <var:l> ^ <nat:2> + <nat:7> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:D> = <var:l> \} \\ <var:s1> := <var:D> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <var:l> \} \\ <var:s2> := <var:s1> * <var:D> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <var:l> \land <var:s2> = <var:l> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:D> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <var:l> \land <var:s2> = <var:l> ^ <nat:2> \land <var:s3> = <var:l> ^ <nat:3> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <var:l> \land <var:s2> = <var:l> ^ <nat:2> \land <var:s3> = <var:l> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ <var:s1> := <var:s1> * <nat:7> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <nat:7> * <var:l> \land <var:s2> = <var:l> ^ <nat:2> \land <var:s3> = <var:l> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ <var:s2> := <var:s2> * <nat:6> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <nat:7> * <var:l> \land <var:s2> = <nat:6> * <var:l> ^ <nat:2> \land <var:s3> = <var:l> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ <var:s3> := <var:s3> * <nat:5> ; \\ \{ <var:D> = <var:l> \land <var:s1> = <nat:7> * <var:l> \land <var:s2> = <nat:6> * <var:l> ^ <nat:2> \land <var:s3> = <nat:5> * <var:l> ^ <nat:3> \land <var:s0> = <nat:4> \} \\ <var:b> := <var:s3> \\ \{ <var:D> = <var:l> \land <var:s1> = <nat:7> * <var:l> \land <var:s2> = <nat:6> * <var:l> ^ <nat:2> \land <var:s0> = <nat:4> \land <var:b> = <nat:5> * <var:l> ^ <nat:3> \} \end{eqnarray} Continuing the evaluation of this series of commands returns : \begin{eqnarray} <var:b> := <var:b> + <var:s2> \\ \{ <var:D> = <var:l> \land <var:s1> = <nat:7> * <var:l> \land <var:s0> = <nat:4> \land <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:s1> \\ \{ <var:D> = <var:l> \land <var:s0> = <nat:4> \land <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:7> * <var:l> \} \\ <var:b> := <var:b> + <var:s0> \\ \{ <var:D> = <var:l> \land <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:4> \} \end{eqnarray} Thusly , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:D> = <var:l> }} <var:s1> := <var:D> ; <var:s2> := <var:s1> * <var:D> ; <var:s3> := <var:s2> * <var:D> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:5> ; <var:b> := <var:s3> <var:b> := <var:b> + <var:s2> <var:b> := <var:b> + <var:s1> <var:b> := <var:b> + <var:s0> {{ <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <var:l> /\ <var:s2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <var:l> /\ <var:s2> = <var:l> ^ <nat:2> /\ <var:s3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <var:l> /\ <var:s2> = <var:l> ^ <nat:2> /\ <var:s3> = <var:l> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <nat:7> * <var:l> /\ <var:s2> = <var:l> ^ <nat:2> /\ <var:s3> = <var:l> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <nat:7> * <var:l> /\ <var:s2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:s3> = <var:l> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <nat:7> * <var:l> /\ <var:s2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:s3> = <nat:5> * <var:l> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <nat:7> * <var:l> /\ <var:s2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:s0> = <nat:4> /\ <var:b> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s1> = <nat:7> * <var:l> /\ <var:s0> = <nat:4> /\ <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:s0> = <nat:4> /\ <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:b> = <nat:5> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 