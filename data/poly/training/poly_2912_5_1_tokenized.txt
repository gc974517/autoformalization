\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:T> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:2> ; <var:d> := <var:P1> <var:d> := <var:d> + <var:P0> \end{verbatim} Assuming it to hold that $ <var:T> = <var:h> $ --- taking positive coefficients $ <var:h> $ --- before executing this set of instructions , it follows that $ <var:d> = <nat:2> \cdot <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be done with the following decorated segment of code . \begin{eqnarray} \{ <var:T> = <var:h> \} \\ <var:P1> := <var:T> ; \\ \{ <var:T> = <var:h> \land <var:P1> = <var:h> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:T> = <var:h> \land <var:P1> = <var:h> \land <var:P0> = <nat:2> \} \\ <var:P1> := <var:P1> * <nat:2> ; \\ \{ <var:T> = <var:h> \land <var:P1> = <nat:2> \cdot <var:h> \land <var:P0> = <nat:2> \} \\ <var:d> := <var:P1> \\ \{ <var:T> = <var:h> \land <var:P0> = <nat:2> \land <var:d> = <nat:2> \cdot <var:h> \} \\ <var:d> := <var:d> + <var:P0> \\ \{ <var:T> = <var:h> \land <var:d> = <nat:2> \cdot <var:h> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:T> = <var:h> }} <var:P1> := <var:T> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:2> ; <var:d> := <var:P1> <var:d> := <var:d> + <var:P0> {{ <var:d> = <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:P1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:P1> = <var:h> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:P1> = <nat:2> * <var:h> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:P0> = <nat:2> /\ <var:d> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:d> = <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 