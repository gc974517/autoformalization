\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <nat:4> + <var:z> * <var:r> ; <var:z> := <nat:1> + <var:z> * <var:r> ; <var:z> := <var:z> * <var:r> ; <var:z> := <nat:3> + <var:z> * <var:r> ; <var:z> := <nat:4> + <var:z> * <var:r> ; <var:z> := <nat:1> + <var:z> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assuming that $ <var:r> = <var:M> $ before evaluating our segment of code , it follows that $ <var:z> = <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:r> = <var:M> \} \\ <var:z> := <nat:4> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> \} \\ <var:z> := <nat:4> + <var:z> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \\ <var:z> := <var:z> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + \} \\ <var:z> := <nat:3> + <var:z> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:r> ; \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:r> \\ \{ <var:r> = <var:M> \land <var:z> = <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \end{eqnarray} Thusly , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:4> ; <var:z> := <nat:4> + <var:z> * <var:r> ; <var:z> := <nat:1> + <var:z> * <var:r> ; <var:z> := <var:z> * <var:r> ; <var:z> := <nat:3> + <var:z> * <var:r> ; <var:z> := <nat:4> + <var:z> * <var:r> ; <var:z> := <nat:1> + <var:z> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:r> = <var:M> }} <def:poly> {{ <var:z> = <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:z> = <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 