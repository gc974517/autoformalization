\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:6> ; <var:h> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:k> = <var:Y> $ ahead of the evaluation of our series of instructions it must be that $ <var:h> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be given using typical Hoare techniques . Keeping momentum , we see the variable update line \verb | <var:L0> := <nat:6> ; | . This transfers the condition $ \{ <var:k> = <var:Y> \} $ toward the postcondition $ \{ <var:k> = <var:Y> \land <var:L0> = <nat:6> \} $ . Shifting focus toward the proceeding piece of code in our series of instructions , the variable update line giving $ <var:L0$ into $ <var:h>$ . This statement moves $ \{ <var:k> = <var:Y> \land <var:L0> = <nat:6> \} $ to $ \{ <var:k> = <var:Y> \land <var:h> = <nat:6> \} $ . This is sound through the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:6> ; <var:h> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:k> = <var:Y> }} <def:poly> {{ <var:h> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:h> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 