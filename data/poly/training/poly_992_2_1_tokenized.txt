\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:1> ; <var:E> := <var:C0> \end{verbatim} Allowing that $ <var:O> = <var:o> $ --- given all natural numbers $ <var:o> $ --- ahead of the evaluation of our segment of code it follows that $ <var:E> = <nat:1> $ after program terminates . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:O> = <var:o> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:O> = <var:o> \land <var:C0> = <nat:1> \} \\ <var:E> := <var:C0> \\ \{ <var:O> = <var:o> \land <var:E> = <nat:1> \} \end{eqnarray} Thus , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <var:C0> := <nat:1> ; <var:E> := <var:C0> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 