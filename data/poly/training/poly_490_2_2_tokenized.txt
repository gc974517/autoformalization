\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:1> + <var:X> * <var:R> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allowing $ <var:R> = <var:p> $ prior to the evaluation of the segment of code it follows that we see $ <var:X> = <nat:3> \times <var:p> + <nat:1> $ when list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:p> \} \\ <var:X> := <nat:3> ; \\ \{ <var:R> = <var:p> \land <var:X> = <nat:3> \} \\ <var:X> := <nat:1> + <var:X> * <var:R> \\ \{ <var:R> = <var:p> \land <var:X> = <nat:3> \cdot <var:p> + <nat:1> \} \end{eqnarray} The application of standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:3> ; <var:X> := <nat:1> + <var:X> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <def:poly> {{ <var:X> = <nat:3> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:X> = <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 