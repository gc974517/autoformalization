\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:l0> := <nat:2> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:X> ; <var:i> := <var:l1> ; <var:i> := <var:i> + <var:l0> \end{verbatim} Allow that $ <var:X> = <var:o> $ --- taking positive integer coefficients $ <var:o> $ --- before executing the list of commands , it follows that we have $ <var:i> = <nat:8> \cdot <var:o> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be seen using typical Hoare techniques . After , \begin{verbatim} { <var:X> = <var:o> } <var:l0> := <nat:2> { <var:X> = <var:o> \land <var:l0> = <nat:2> } { <var:X> = <var:o> \land <var:l0> = <nat:2> } <var:l1> := <nat:8> { <var:X> = <var:o> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> } { <var:X> = <var:o> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> } <var:l1> := <var:l1> * <var:X> { <var:X> = <var:o> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:o> } \end{verbatim} Focusing on the subsequent lines contained in our code , we have \begin{verbatim} { <var:X> = <var:o> } <var:l0> := <nat:2> { <var:X> = <var:o> \land <var:l0> = <nat:2> } { <var:X> = <var:o> \land <var:l0> = <nat:2> } <var:l1> := <nat:8> { <var:X> = <var:o> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> } \end{verbatim} This is shown to be logically sound using the assignment inference rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <var:l0> := <nat:2> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:X> ; <var:i> := <var:l1> ; <var:i> := <var:i> + <var:l0> {{ <var:i> = <nat:8> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:l0> = <nat:2> /\ <var:i> = <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:i> = <nat:8> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 