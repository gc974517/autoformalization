\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:e> ; <var:s> := <var:F1> ; <var:s> := <var:s> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:e> = <var:Z> $ before running our set of instructions it follows that we have $ <var:s> = <nat:5> \times <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:Z> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:e> = <var:Z> \land <var:F0> = <nat:3> \} \\ <var:F1> := <nat:5> ; \\ \{ <var:e> = <var:Z> \land <var:F0> = <nat:3> \land <var:F1> = <nat:5> \} \\ <var:F1> := <var:F1> * <var:e> ; \\ \{ <var:e> = <var:Z> \land <var:F0> = <nat:3> \land <var:F1> = <nat:5> \times <var:Z> \} \\ <var:s> := <var:F1> ; \\ \{ <var:e> = <var:Z> \land <var:F0> = <nat:3> \land <var:s> = <nat:5> \times <var:Z> \} \\ <var:s> := <var:s> + <var:F0> \\ \{ <var:e> = <var:Z> \land <var:s> = <nat:5> \times <var:Z> + <nat:3> \} \end{eqnarray} Applying typical Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:F1> := <nat:5> ; <var:F1> := <var:F1> * <var:e> ; <var:s> := <var:F1> ; <var:s> := <var:s> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:e> = <var:Z> }} <def:poly> {{ <var:s> = <nat:5> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:F0> = <nat:3> /\ <var:s> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:s> = <nat:5> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 