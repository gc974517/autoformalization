\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:1> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:A> ; <var:a> := <var:L1> ; <var:a> := <var:a> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assume that $ <var:A> = <var:j> $ prior to running this segment of code it holds that we have $ <var:a> = <nat:9> * <var:j> + <nat:1> $ when series of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is given by Hoare techniques . Moving on to the following lines contained in the list of commands , \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:L0> := <nat:1> \, \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \} \\ \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \} \, <var:L1> := <nat:9> \, \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \land <var:L1> = <nat:9> \} \\ \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \land <var:L1> = <nat:9> \} \, <var:L1> := <var:L1> * <var:A> \, \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \land <var:L1> = <nat:9> * <var:j> \} \\ \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \land <var:L1> = <nat:9> * <var:j> \} \, <var:a> := <var:L1> \, \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \land <var:a> = <nat:9> * <var:j> \} \end{eqnarray} Advancing , we have \begin{eqnarray} \{ <var:A> = <var:j> \} \, <var:L0> := <nat:1> \, \{ <var:A> = <var:j> \land <var:L0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:A> ; <var:a> := <var:L1> ; <var:a> := <var:a> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <def:poly> {{ <var:a> = <nat:9> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:L0> = <nat:1> /\ <var:a> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:a> = <nat:9> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 