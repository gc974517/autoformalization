\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:8> ; <var:P> := <var:v0> \end{verbatim} Allow , given all natural numbers $ <var:o> $ , it to hold that $ <var:z> = <var:o> $ ahead of the evaluation of this code segment it must be that $ <var:P> = <nat:8> $ after series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:z> = <var:o> \land <var:v0> = <nat:8> \} \\ <var:P> := <var:v0> \\ \{ <var:z> = <var:o> \land <var:P> = <nat:8> \} \end{eqnarray} The application of usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:v0> := <nat:8> ; <var:P> := <var:v0> {{ <var:P> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:P> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 