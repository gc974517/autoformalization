\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:J> := <nat:4> ; <var:J> := <nat:1> + <var:J> * <var:Q> ; <var:J> := <nat:4> + <var:J> * <var:Q> ; <var:J> := <nat:4> + <var:J> * <var:Q> ; <var:J> := <nat:3> + <var:J> * <var:Q> \end{verbatim} Allow it to be that $ <var:Q> = <var:y> $ before executing this list of instructions then $ <var:J> = <nat:4> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:3> $ when list of instructions executes . \end{theorem} \begin{proof} Utilizing typical Hoare techniques results in : \begin{eqnarray} \{ <var:Q> = <var:y> \} \\ <var:J> := <nat:4> ; \\ \{ <var:Q> = <var:y> \land <var:J> = <nat:4> \} \\ <var:J> := <nat:1> + <var:J> * <var:Q> ; \\ \{ <var:Q> = <var:y> \land <var:J> = <nat:4> \cdot <var:y> + <nat:1> \} \\ <var:J> := <nat:4> + <var:J> * <var:Q> ; \\ \{ <var:Q> = <var:y> \land <var:J> = <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:4> \} \\ <var:J> := <nat:4> + <var:J> * <var:Q> ; \\ \{ <var:Q> = <var:y> \land <var:J> = <nat:4> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \\ <var:J> := <nat:3> + <var:J> * <var:Q> \\ \{ <var:Q> = <var:y> \land <var:J> = <nat:4> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:3> \} \end{eqnarray} Thus , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Q> = <var:y> }} <var:J> := <nat:4> ; <var:J> := <nat:1> + <var:J> * <var:Q> ; <var:J> := <nat:4> + <var:J> * <var:Q> ; <var:J> := <nat:4> + <var:J> * <var:Q> ; <var:J> := <nat:3> + <var:J> * <var:Q> {{ <var:J> = <nat:4> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:y> /\ <var:J> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:y> /\ <var:J> = <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:y> /\ <var:J> = <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:y> /\ <var:J> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:y> /\ <var:J> = <nat:4> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 