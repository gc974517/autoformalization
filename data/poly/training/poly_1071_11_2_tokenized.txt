\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:1> + <var:i> * <var:L> ; <var:i> := <var:i> * <var:L> ; <var:i> := <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:L> = <var:M> $ prior to interpreting this set of instructions it must be that we see $ <var:i> = <nat:2> \times <var:M> ^ <nat:10> + <nat:3> \times <var:M> ^ <nat:8> + <nat:3> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> + <nat:2> $ once list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be demonstrated with usual Hoare reasoning . Focusing on the upcoming steps in our code , we see \begin{verbatim} { <var:L> = <var:M> } <var:i> := <nat:2> { <var:L> = <var:M> \land <var:i> = <nat:2> } { <var:L> = <var:M> \land <var:i> = <nat:2> } <var:i> := <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> + } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> + } <var:i> := <nat:3> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> } \end{verbatim} This is shown using the binding scheme given in usual Hoare reasoning . Taking another step toward the following lines contained in the set of commands , \begin{verbatim} { <var:L> = <var:M> } <var:i> := <nat:2> { <var:L> = <var:M> \land <var:i> = <nat:2> } { <var:L> = <var:M> \land <var:i> = <nat:2> } <var:i> := <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> + } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> + } <var:i> := <nat:3> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> } <var:i> := <nat:3> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:3> } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:3> } <var:i> := <nat:2> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> } <var:i> := <nat:3> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> } { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> } <var:i> := <nat:1> + <var:i> * <var:L> { <var:L> = <var:M> \land <var:i> = <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> } \end{verbatim} Honing in on the following command in the list of instructions , we see \begin{verbatim} { <var:L> = <var:M> } <var:i> := <nat:2> { <var:L> = <var:M> \land <var:i> = <nat:2> } \end{verbatim} This is ensured using the variable update rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:2> ; <var:i> := <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> ; <var:i> := <nat:3> + <var:i> * <var:L> ; <var:i> := <nat:1> + <var:i> * <var:L> ; <var:i> := <var:i> * <var:L> ; <var:i> := <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> ; <var:i> := <nat:2> + <var:i> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <def:poly> {{ <var:i> = <nat:2> * <var:M> ^ <nat:10> + <nat:3> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:9> + <nat:3> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:10> + <nat:3> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 