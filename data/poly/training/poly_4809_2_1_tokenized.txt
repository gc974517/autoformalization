\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:g0> := <nat:2> ; <var:F> := <var:g0> \end{verbatim} Assuming that we have $ <var:A> = <var:V> $ prior to running the list of instructions it must be that we see $ <var:F> = <nat:2> $ when set of commands finishes . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:A> = <var:V> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:A> = <var:V> \land <var:g0> = <nat:2> \} \\ <var:F> := <var:g0> \\ \{ <var:A> = <var:V> \land <var:F> = <nat:2> \} \end{eqnarray} As a result , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:A> = <var:V> }} <var:g0> := <nat:2> ; <var:F> := <var:g0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 