\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:z> ; <var:R2> := <nat:8> ; <var:R2> := <var:R2> * <var:z> ; <var:R2> := <var:R2> * <var:z> ; <var:r> := <var:R2> ; <var:r> := <var:r> + <var:R1> ; <var:r> := <var:r> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:z> = <var:M> $ prior to interpreting our set of instructions then we see $ <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:z> = <var:M> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \} \\ <var:R1> := <nat:3> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> \} \\ <var:R1> := <var:R1> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> * <var:M> \} \\ <var:R2> := <nat:8> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> * <var:M> \land <var:R2> = <nat:8> \} \\ <var:R2> := <var:R2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> * <var:M> \land <var:R2> = <nat:8> * <var:M> \} \\ <var:R2> := <var:R2> * <var:z> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> * <var:M> \land <var:R2> = <nat:8> * <var:M> ^ <nat:2> \} \\ <var:r> := <var:R2> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:R1> = <nat:3> * <var:M> \land <var:r> = <nat:8> * <var:M> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:R1> ; \\ \{ <var:z> = <var:M> \land <var:R0> = <nat:8> \land <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> \} \\ <var:r> := <var:r> + <var:R0> \\ \{ <var:z> = <var:M> \land <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:8> \} \end{eqnarray} Thus , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:z> ; <var:R2> := <nat:8> ; <var:R2> := <var:R2> * <var:z> ; <var:R2> := <var:R2> * <var:z> ; <var:r> := <var:R2> ; <var:r> := <var:r> + <var:R1> ; <var:r> := <var:r> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <def:poly> {{ <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> * <var:M> /\ <var:R2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> * <var:M> /\ <var:R2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> * <var:M> /\ <var:R2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:3> * <var:M> /\ <var:r> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:R0> = <nat:8> /\ <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:r> = <nat:8> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 