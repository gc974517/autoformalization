\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:6> ; <var:h> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allowing that we have $ <var:q> = <var:e> $ before running the list of commands , it holds that $ <var:h> = <nat:6> $ once list of instructions has executed . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:q> = <var:e> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:q> = <var:e> \land <var:w0> = <nat:6> \} \\ <var:h> := <var:w0> \\ \{ <var:q> = <var:e> \land <var:h> = <nat:6> \} \end{eqnarray} Given the above , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:h> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:q> = <var:e> }} <def:poly> {{ <var:h> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:e> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:e> /\ <var:h> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 