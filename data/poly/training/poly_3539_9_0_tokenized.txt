\begin{document} \begin{theorem} Define the following list of commands : \begin{verbatim} <var:a0> := <nat:7> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:t> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:t> ; <var:a2> := <var:a2> * <var:t> ; <var:S> := <var:a2> ; <var:S> := <var:S> + <var:a1> ; <var:S> := <var:S> + <var:a0> \end{verbatim} Allowing that $ <var:t> = <var:x> $ ahead of the execution of our set of instructions , it must be that we have $ <var:S> = <nat:6> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:7> $ after code segment is done . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:x> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:t> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:x> \} \\ <var:a2> := <nat:6> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:x> \land <var:a2> = <nat:6> \} \\ <var:a2> := <var:a2> * <var:t> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:x> \land <var:a2> = <nat:6> * <var:x> \} \\ <var:a2> := <var:a2> * <var:t> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:x> \land <var:a2> = <nat:6> * <var:x> ^ <nat:2> \} \\ <var:S> := <var:a2> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:a1> = <nat:2> * <var:x> \land <var:S> = <nat:6> * <var:x> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:a1> ; \\ \{ <var:t> = <var:x> \land <var:a0> = <nat:7> \land <var:S> = <nat:6> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} \\ <var:S> := <var:S> + <var:a0> \\ \{ <var:t> = <var:x> \land <var:S> = <nat:6> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:7> \} \end{eqnarray} As a consequence , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:t> = <var:x> }} <var:a0> := <nat:7> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:t> ; <var:a2> := <nat:6> ; <var:a2> := <var:a2> * <var:t> ; <var:a2> := <var:a2> * <var:t> ; <var:S> := <var:a2> ; <var:S> := <var:S> + <var:a1> ; <var:S> := <var:S> + <var:a0> {{ <var:S> = <nat:6> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:x> /\ <var:a2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:x> /\ <var:a2> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:x> /\ <var:a2> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:2> * <var:x> /\ <var:S> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:a0> = <nat:7> /\ <var:S> = <nat:6> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:x> /\ <var:S> = <nat:6> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 