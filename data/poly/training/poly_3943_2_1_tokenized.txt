\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:Q> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Given that $ <var:e> = <var:p> $ before the execution of the set of instructions then we have $ <var:Q> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:e> = <var:p> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:e> = <var:p> \land <var:t0> = <nat:3> \} \\ <var:Q> := <var:t0> \\ \{ <var:e> = <var:p> \land <var:Q> = <nat:3> \} \end{eqnarray} As a result , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:Q> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:e> = <var:p> }} <def:poly> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 