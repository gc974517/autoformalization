\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:X> \end{verbatim} Assuming it to hold that $ <var:X> = <var:O> $ before the execution of this list of commands , then we have $ <var:o> = <nat:1> * <var:O> + <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:o> := <nat:1> ; \\ \{ <var:X> = <var:O> \land <var:o> = <nat:1> \} \\ <var:o> := <nat:1> + <var:o> * <var:X> \\ \{ <var:X> = <var:O> \land <var:o> = <nat:1> * <var:O> + <nat:1> \} \end{eqnarray} As a consequence , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:X> {{ <var:o> = <nat:1> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:o> = <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 