\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:7> ; <var:b> := <var:n0> \end{verbatim} Allow that $ <var:g> = <var:q> $ for some whole numbers $ <var:q> $ before the execution of our series of instructions it must be that we have $ <var:b> = <nat:7> $ when series of instructions is done executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment is shown with standard Hoare logic . Moving on , we have \begin{eqnarray} \{ <var:g> = <var:q> \} \, <var:n0> := <nat:7> \, \{ <var:g> = <var:q> \land <var:n0> = <nat:7> \} \\ \{ <var:g> = <var:q> \land <var:n0> = <nat:7> \} \, <var:b> := <var:n0\, \{ <var:g> = <var:q> \land <var:b> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:g> = <var:q> }} <var:n0> := <nat:7> ; <var:b> := <var:n0> {{ <var:b> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:q> /\ <var:b> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 