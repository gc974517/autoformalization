\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:1> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:a> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:a> ; <var:s2> := <var:s2> * <var:a> ; <var:y> := <var:s2> ; <var:y> := <var:y> + <var:s1> ; <var:y> := <var:y> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:a> = <var:H> $ prior to interpreting our list of instructions , it must be that we see $ <var:y> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:1> $ once series of commands has exited . \end{theorem} \begin{proof} Proving correctness for this code segment can be seen through usual Hoare reasoning . Looking at the next bit of code seen in our series of instructions , we have the variable binding code \verb | <var:s0> := <nat:1> ; | . This code forwards $ \{ <var:a> = <var:H> \} $ toward the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \} $ . Taking another step toward the proceeding piece of code found in our list of commands , the line \verb | <var:s1> := <nat:1> ; | . This command moves $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \} $ to the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \} $ . This is deduced with the assignment rule obtained from usual Hoare reasoning . Advancing to the next step , we have the environment update line yielding $ <var:s1> * <var:a> $ into $ <var:s1>$ . This advances the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \} $ as the postcondition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \} $ . Stepping through , we have the statement \verb | <var:s2> := <nat:4> ; | . This line advances the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \} $ into $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \} $ . Taking another step toward the subsequent line of code contained in our set of commands , the assignment statement \verb | <var:s2> := <var:s2> * <var:a> ; | . This code advances the precondition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \} $ as $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \times <var:H> \} $ . This is sound by the assignment law given by typical Hoare logic . Immediately following , we see the code assigning $ <var:s2> * <var:a> $ to $ <var:s2>$ . This command takes the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \times <var:H> \} $ into the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \times <var:H> ^ <nat:2> \} $ . Honing in on the next command seen in our series of commands , the assignment command \verb | <var:y> := <var:s2> ; | . This forwards $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:s2> = <nat:4> \times <var:H> ^ <nat:2> \} $ into $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:y> = <nat:4> \times <var:H> ^ <nat:2> \} $ . Honing in on the next bit of code in the series of commands , we have the variable update command \verb | <var:y> := <var:y> + <var:s1> ; | . This redefines $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:1> \times <var:H> \land <var:y> = <nat:4> \times <var:H> ^ <nat:2> \} $ as the condition $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:y> = <nat:4> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} $ . Now , we see the binding statement giving $ <var:y> + <var:s0$ toward $ <var:y>$ . This code forwards $ \{ <var:a> = <var:H> \land <var:s0> = <nat:1> \land <var:y> = <nat:4> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} $ as the condition $ \{ <var:a> = <var:H> \land <var:y> = <nat:4> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:1> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:a> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:a> ; <var:s2> := <var:s2> * <var:a> ; <var:y> := <var:s2> ; <var:y> := <var:y> + <var:s1> ; <var:y> := <var:y> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:a> = <var:H> }} <def:poly> {{ <var:y> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> * <var:H> /\ <var:s2> = <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:1> * <var:H> /\ <var:y> = <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:s0> = <nat:1> /\ <var:y> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:H> /\ <var:y> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 