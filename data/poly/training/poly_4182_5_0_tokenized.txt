\begin{document} \begin{theorem} Take a code in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:a> ; <var:Z> := <var:Y1> ; <var:Z> := <var:Z> + <var:Y0> \end{verbatim} Assume given some natural numbers $ <var:S> $ that $ <var:a> = <var:S> $ ahead of evaluating our code it must be that $ <var:Z> = <nat:4> \cdot <var:S> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for our code segment is evident by Hoare reasoning . Advancing to the next step , \begin{verbatim} { <var:a> = <var:S> } <var:Y0> := <nat:7> { <var:a> = <var:S> \land <var:Y0> = <nat:7> } { <var:a> = <var:S> \land <var:Y0> = <nat:7> } <var:Y1> := <nat:4> { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> } { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> } <var:Y1> := <var:Y1> * <var:a> { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> \cdot <var:S> } { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> \cdot <var:S> } <var:Z> := <var:Y1> { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Z> = <nat:4> \cdot <var:S> } { <var:a> = <var:S> \land <var:Y0> = <nat:7> \land <var:Z> = <nat:4> \cdot <var:S> } <var:Z> := <var:Z> + <var:Y0{ <var:a> = <var:S> \land <var:Z> = <nat:4> \cdot <var:S> + <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:a> = <var:S> }} <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:a> ; <var:Z> := <var:Y1> ; <var:Z> := <var:Z> + <var:Y0> {{ <var:Z> = <nat:4> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Y0> = <nat:7> /\ <var:Z> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:S> /\ <var:Z> = <nat:4> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 