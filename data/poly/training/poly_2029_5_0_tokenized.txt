\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:C> ; <var:F> := <var:Z1> ; <var:F> := <var:F> + <var:Z0> \end{verbatim} Assume that $ <var:C> = <var:K> $ before executing the list of commands it must be that we have $ <var:F> = <nat:2> \cdot <var:K> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:K> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:C> = <var:K> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <nat:2> ; \\ \{ <var:C> = <var:K> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <var:C> ; \\ \{ <var:C> = <var:K> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:2> * <var:K> \} \\ <var:F> := <var:Z1> ; \\ \{ <var:C> = <var:K> \land <var:Z0> = <nat:2> \land <var:F> = <nat:2> * <var:K> \} \\ <var:F> := <var:F> + <var:Z0> \\ \{ <var:C> = <var:K> \land <var:F> = <nat:2> * <var:K> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <var:Z0> := <nat:2> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:C> ; <var:F> := <var:Z1> ; <var:F> := <var:F> + <var:Z0> {{ <var:F> = <nat:2> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z0> = <nat:2> /\ <var:F> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:F> = <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 