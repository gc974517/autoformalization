\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:c> ; <var:a2> := <var:a1> * <var:c> ; <var:a3> := <var:a2> * <var:c> ; <var:a0> := <nat:1> ; <var:a3> := <var:a3> * <nat:5> ; <var:J> := <var:a3> <var:J> := <var:J> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:c> = <var:k> $ ahead of executing our series of commands it must be that we have $ <var:J> = <nat:5> \cdot <var:k> ^ <nat:3> + <nat:1> $ after list of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for our set of instructions is evident through this decorated list of instructions . \begin{eqnarray} \{ <var:c> = <var:k> \} \\ <var:a1> := <var:c> ; \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \} \\ <var:a2> := <var:a1> * <var:c> ; \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:c> ; \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <var:k> ^ <nat:3> \land <var:a0> = <nat:1> \} \\ <var:a3> := <var:a3> * <nat:5> ; \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:a0> = <nat:1> \} \\ <var:J> := <var:a3> \\ \{ <var:c> = <var:k> \land <var:a1> = <var:k> \land <var:a2> = <var:k> ^ <nat:2> \land <var:a0> = <nat:1> \land <var:J> = <nat:5> \cdot <var:k> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:a0> \\ \{ <var:c> = <var:k> \land <var:J> = <nat:5> \cdot <var:k> ^ <nat:3> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:c> ; <var:a2> := <var:a1> * <var:c> ; <var:a3> := <var:a2> * <var:c> ; <var:a0> := <nat:1> ; <var:a3> := <var:a3> * <nat:5> ; <var:J> := <var:a3> <var:J> := <var:J> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:c> = <var:k> }} <def:poly> {{ <var:J> = <nat:5> * <var:k> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <var:k> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:a1> = <var:k> /\ <var:a2> = <var:k> ^ <nat:2> /\ <var:a0> = <nat:1> /\ <var:J> = <nat:5> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:J> = <nat:5> * <var:k> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 