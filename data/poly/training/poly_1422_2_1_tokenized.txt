\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:4> ; <var:K> := <var:R0> \end{verbatim} Allowing , for any natural numbers $ <var:B> $ , that we have $ <var:Y> = <var:B> $ ahead of evaluating this set of instructions , it must be that we see $ <var:K> = <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} The proof of our set of commands can be given by standard Hoare techniques . Moving on , we have \begin{eqnarray} \{ <var:Y> = <var:B> \} \, <var:R0> := <nat:4> \, \{ <var:Y> = <var:B> \land <var:R0> = <nat:4> \} \\ \{ <var:Y> = <var:B> \land <var:R0> = <nat:4> \} \, <var:K> := <var:R0\, \{ <var:Y> = <var:B> \land <var:K> = <nat:4> \} \end{eqnarray} This is sound by the environment update inference rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Y> = <var:B> }} <var:R0> := <nat:4> ; <var:K> := <var:R0> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 