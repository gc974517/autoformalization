\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:3> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:B> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> \end{verbatim} Allow it to hold that $ <var:B> = <var:Z> $ ahead of the evaluation of the list of instructions , it follows that we have $ <var:t> = <nat:9> * <var:Z> + <nat:3> $ once series of instructions has exited . \end{theorem} \begin{proof} Proving correctness for our series of instructions is demonstrated using the below decorated program . \begin{eqnarray} \{ <var:B> = <var:Z> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:B> = <var:Z> \land <var:P0> = <nat:3> \} \\ <var:P1> := <nat:9> ; \\ \{ <var:B> = <var:Z> \land <var:P0> = <nat:3> \land <var:P1> = <nat:9> \} \\ <var:P1> := <var:P1> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:P0> = <nat:3> \land <var:P1> = <nat:9> * <var:Z> \} \\ <var:t> := <var:P1> ; \\ \{ <var:B> = <var:Z> \land <var:P0> = <nat:3> \land <var:t> = <nat:9> * <var:Z> \} \end{eqnarray} Allowing running this program returns : \begin{eqnarray} <var:t> := <var:t> + <var:P0> \\ \{ <var:B> = <var:Z> \land <var:t> = <nat:9> * <var:Z> + <nat:3> \} \end{eqnarray} Applying Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <var:P0> := <nat:3> ; <var:P1> := <nat:9> ; <var:P1> := <var:P1> * <var:B> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> {{ <var:t> = <nat:9> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:P0> = <nat:3> /\ <var:t> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:t> = <nat:9> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 