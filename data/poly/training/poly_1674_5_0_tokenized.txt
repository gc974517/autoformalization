\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:7> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:x> ; <var:e> := <var:X1> ; <var:e> := <var:e> + <var:X0> \end{verbatim} Given --- for $ <var:H> \in \mathbb{Z}^+ $ --- that $ <var:x> = <var:H> $ ahead of interpreting this series of commands , it must be that $ <var:e> = <nat:4> * <var:H> + <nat:7> $ after code segment terminates . \end{theorem} \begin{proof} The method of proof for our set of instructions is clear with Hoare reasoning . Honing in on the subsequent piece of code seen in our series of commands , the command defining $ <nat:7> $ into $ <var:X0>$ . This forwards the condition $ \{ <var:x> = <var:H> \} $ toward the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \} $ . This is guaranteed using the assignment rule found in standard Hoare techniques . Immediately following , the variable update code defining $ <nat:4> $ to $ <var:X1>$ . This code transfers the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \} $ as the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:4> \} $ . This is rigorously given with the assignment inference rule in standard Hoare logic . Moving on to the following command contained in our list of instructions , we see the assignment code \verb | <var:X1> := <var:X1> * <var:x> ; | . This forwards $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:4> * <var:H> \} $ . Looking at the following piece of code in our set of instructions , we have the variable assignmet line letting $ <var:X1> $ as $ <var:e>$ . This line forwards the precondition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:4> * <var:H> \} $ to the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:e> = <nat:4> * <var:H> \} $ . Honing in on the following line found in our series of instructions , the environment update line \verb | <var:e> := <var:e> + <var:X0> | . This redefines the condition $ \{ <var:x> = <var:H> \land <var:X0> = <nat:7> \land <var:e> = <nat:4> * <var:H> \} $ as $ \{ <var:x> = <var:H> \land <var:e> = <nat:4> * <var:H> + <nat:7> \} $ . This is sound through the assignment scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <var:X0> := <nat:7> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:x> ; <var:e> := <var:X1> ; <var:e> := <var:e> + <var:X0> {{ <var:e> = <nat:4> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:X0> = <nat:7> /\ <var:e> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:e> = <nat:4> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 