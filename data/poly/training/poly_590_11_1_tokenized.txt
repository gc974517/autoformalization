\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:z1> := <var:n> ; <var:z2> := <var:z1> * <var:n> ; <var:z3> := <var:z2> * <var:n> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:4> ; <var:Y> := <var:z3> <var:Y> := <var:Y> + <var:z2> <var:Y> := <var:Y> + <var:z1> <var:Y> := <var:Y> + <var:z0> \end{verbatim} Assume that we have $ <var:n> = <var:D> $ prior to the evaluation of this set of commands it follows that $ <var:Y> = <nat:4> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:2> $ . \end{theorem} \begin{proof} The application of typical Hoare logic gives us : \begin{eqnarray} \{ <var:n> = <var:D> \} \\ <var:z1> := <var:n> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <var:D> \} \\ <var:z2> := <var:z1> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <var:D> \land <var:z2> = <var:D> ^ <nat:2> \} \end{eqnarray} Furthering running the program results in : \begin{eqnarray} <var:z3> := <var:z2> * <var:n> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <var:D> \land <var:z2> = <var:D> ^ <nat:2> \land <var:z3> = <var:D> ^ <nat:3> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <var:D> \land <var:z2> = <var:D> ^ <nat:2> \land <var:z3> = <var:D> ^ <nat:3> \land <var:z0> = <nat:2> \} \\ <var:z1> := <var:z1> * <nat:7> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <nat:7> \times <var:D> \land <var:z2> = <var:D> ^ <nat:2> \land <var:z3> = <var:D> ^ <nat:3> \land <var:z0> = <nat:2> \} \\ <var:z2> := <var:z2> * <nat:3> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <nat:7> \times <var:D> \land <var:z2> = <nat:3> \times <var:D> ^ <nat:2> \land <var:z3> = <var:D> ^ <nat:3> \land <var:z0> = <nat:2> \} \\ <var:z3> := <var:z3> * <nat:4> ; \\ \{ <var:n> = <var:D> \land <var:z1> = <nat:7> \times <var:D> \land <var:z2> = <nat:3> \times <var:D> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:D> ^ <nat:3> \land <var:z0> = <nat:2> \} \\ <var:Y> := <var:z3> \\ \{ <var:n> = <var:D> \land <var:z1> = <nat:7> \times <var:D> \land <var:z2> = <nat:3> \times <var:D> ^ <nat:2> \land <var:z0> = <nat:2> \land <var:Y> = <nat:4> \times <var:D> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:z2> \\ \{ <var:n> = <var:D> \land <var:z1> = <nat:7> \times <var:D> \land <var:z0> = <nat:2> \land <var:Y> = <nat:4> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:z1> \\ \{ <var:n> = <var:D> \land <var:z0> = <nat:2> \land <var:Y> = <nat:4> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:7> \times <var:D> \} \\ <var:Y> := <var:Y> + <var:z0> \\ \{ <var:n> = <var:D> \land <var:Y> = <nat:4> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:7> \times <var:D> + <nat:2> \} \end{eqnarray} As a result , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <var:z1> := <var:n> ; <var:z2> := <var:z1> * <var:n> ; <var:z3> := <var:z2> * <var:n> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:3> ; <var:z3> := <var:z3> * <nat:4> ; <var:Y> := <var:z3> <var:Y> := <var:Y> + <var:z2> <var:Y> := <var:Y> + <var:z1> <var:Y> := <var:Y> + <var:z0> {{ <var:Y> = <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <var:D> /\ <var:z2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <var:D> /\ <var:z2> = <var:D> ^ <nat:2> /\ <var:z3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <var:D> /\ <var:z2> = <var:D> ^ <nat:2> /\ <var:z3> = <var:D> ^ <nat:3> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <nat:7> * <var:D> /\ <var:z2> = <var:D> ^ <nat:2> /\ <var:z3> = <var:D> ^ <nat:3> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <nat:7> * <var:D> /\ <var:z2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:z3> = <var:D> ^ <nat:3> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <nat:7> * <var:D> /\ <var:z2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:D> ^ <nat:3> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <nat:7> * <var:D> /\ <var:z2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:z0> = <nat:2> /\ <var:Y> = <nat:4> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z1> = <nat:7> * <var:D> /\ <var:z0> = <nat:2> /\ <var:Y> = <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:z0> = <nat:2> /\ <var:Y> = <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:Y> = <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 