\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:M> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:M> ; <var:O2> := <var:O2> * <var:M> ; <var:p> := <var:O2> ; <var:p> := <var:p> + <var:O1> ; <var:p> := <var:p> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assuming it to be that $ <var:M> = <var:z> $ ahead of executing the list of commands it holds that $ <var:p> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:3> $ when segment of code has exited . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is evident through the below decorated list of commands . \begin{eqnarray} \{ <var:M> = <var:z> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \} \\ <var:O1> := <nat:3> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \} \\ <var:O1> := <var:O1> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \cdot <var:z> \} \\ <var:O2> := <nat:2> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \cdot <var:z> \land <var:O2> = <nat:2> \} \\ <var:O2> := <var:O2> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \cdot <var:z> \land <var:O2> = <nat:2> \cdot <var:z> \} \\ <var:O2> := <var:O2> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \cdot <var:z> \land <var:O2> = <nat:2> \cdot <var:z> ^ <nat:2> \} \\ <var:p> := <var:O2> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \cdot <var:z> \land <var:p> = <nat:2> \cdot <var:z> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:O1> ; \\ \{ <var:M> = <var:z> \land <var:O0> = <nat:3> \land <var:p> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> \} \\ <var:p> := <var:p> + <var:O0> \\ \{ <var:M> = <var:z> \land <var:p> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:3> \} \end{eqnarray} Using usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:M> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:M> ; <var:O2> := <var:O2> * <var:M> ; <var:p> := <var:O2> ; <var:p> := <var:p> + <var:O1> ; <var:p> := <var:p> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:M> = <var:z> }} <def:poly> {{ <var:p> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:z> /\ <var:O2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:z> /\ <var:O2> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:z> /\ <var:O2> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:z> /\ <var:p> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:O0> = <nat:3> /\ <var:p> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:p> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 