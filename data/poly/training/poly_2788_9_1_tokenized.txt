\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:n1> := <var:z> ; <var:n2> := <var:n1> * <var:z> ; <var:n3> := <var:n2> * <var:z> ; <var:n0> := <nat:1> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:7> ; <var:j> := <var:n3> <var:j> := <var:j> + <var:n2> <var:j> := <var:j> + <var:n0> \end{verbatim} Assume ( given natural coefficients $ <var:f> $ ) $ <var:z> = <var:f> $ prior to executing this program then we have $ <var:j> = <nat:7> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:1> $ when code segment executes . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is accomplished with Hoare techniques . Going to the next step , we have \begin{verbatim} { <var:z> = <var:f> } <var:n1> := <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> } { <var:z> = <var:f> \land <var:n1> = <var:f> } <var:n2> := <var:n1> * <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> } { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> } <var:n3> := <var:n2> * <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> } { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> } <var:n0> := <nat:1> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:1> } { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:1> } <var:n2> := <var:n2> * <nat:8> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <nat:8> * <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:1> } { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <nat:8> * <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:1> } <var:n3> := <var:n3> * <nat:7> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <nat:8> * <var:f> ^ <nat:2> \land <var:n3> = <nat:7> * <var:f> ^ <nat:3> \land <var:n0> = <nat:1> } \end{verbatim} Moving on to the next step , \begin{verbatim} { <var:z> = <var:f> } <var:n1> := <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> } \end{verbatim} This is guaranteed through the variable update inference rule found in standard Hoare reasoning . Moving forward to the next step , we have \begin{verbatim} { <var:z> = <var:f> } <var:n1> := <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> } { <var:z> = <var:f> \land <var:n1> = <var:f> } <var:n2> := <var:n1> * <var:z> { <var:z> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:z> = <var:f> }} <var:n1> := <var:z> ; <var:n2> := <var:n1> * <var:z> ; <var:n3> := <var:n2> * <var:z> ; <var:n0> := <nat:1> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:7> ; <var:j> := <var:n3> <var:j> := <var:j> + <var:n2> <var:j> := <var:j> + <var:n0> {{ <var:j> = <nat:7> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:n3> = <nat:7> * <var:f> ^ <nat:3> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:n0> = <nat:1> /\ <var:j> = <nat:7> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:n1> = <var:f> /\ <var:n0> = <nat:1> /\ <var:j> = <nat:7> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:j> = <nat:7> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 