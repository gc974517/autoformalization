\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:3> + <var:S> * <var:I> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:I> = <var:Z> $ prior to the evaluation of this code segment it follows that $ <var:S> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:3> $ when list of commands terminates . \end{theorem} \begin{proof} Proving correctness for this series of commands is accomplished by standard Hoare logic . Advancing to the proceeding piece of code in our list of commands , the statement \verb | <var:S> := <nat:2> ; | . This transfers $ \{ <var:I> = <var:Z> \} $ as $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \} $ . This is shown to be logically sound with the assignment rule given in usual Hoare techniques . Focusing on the upcoming step in the series of instructions , the assignment code giving $ <nat:1> + <var:S> * <var:I> $ to $ <var:S>$ . This statement takes the precondition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \} $ to the postcondition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> + <nat:1> \} $ . Jumping to the upcoming line contained in our code , we see the assignment line \verb | <var:S> := <nat:1> + <var:S> * <var:I> ; | . This moves the condition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> + <nat:1> \} $ toward the condition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:1> \} $ . This is rigorously given through the assignment inference rule defined by usual Hoare logic . Going to the next step , we see the binding line \verb | <var:S> := <nat:1> + <var:S> * <var:I> ; | . This code takes $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:1> \} $ toward the condition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:1> \} $ . After , the variable assignmet statement \verb | <var:S> := <nat:3> + <var:S> * <var:I> | . This line advances the precondition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:1> \} $ to the postcondition $ \{ <var:I> = <var:Z> \land <var:S> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:2> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:1> + <var:S> * <var:I> ; <var:S> := <nat:3> + <var:S> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:S> = <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:S> = <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:S> = <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:S> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:S> = <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 