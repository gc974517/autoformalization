\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:N> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:4> ; <var:A> := <var:H1> <var:A> := <var:A> + <var:H0> \end{verbatim} Assuming that $ <var:N> = <var:Q> $ before the execution of this set of instructions it follows that $ <var:A> = <nat:4> * <var:Q> + <nat:6> $ once series of commands exits . \end{theorem} \begin{proof} Observe this decorated series of commands . \begin{eqnarray} \{ <var:N> = <var:Q> \} \\ <var:H1> := <var:N> ; \\ \{ <var:N> = <var:Q> \land <var:H1> = <var:Q> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:N> = <var:Q> \land <var:H1> = <var:Q> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:4> ; \\ \{ <var:N> = <var:Q> \land <var:H1> = <nat:4> \cdot <var:Q> \land <var:H0> = <nat:6> \} \\ <var:A> := <var:H1> \\ \{ <var:N> = <var:Q> \land <var:H0> = <nat:6> \land <var:A> = <nat:4> \cdot <var:Q> \} \\ <var:A> := <var:A> + <var:H0> \\ \{ <var:N> = <var:Q> \land <var:A> = <nat:4> \cdot <var:Q> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:N> = <var:Q> }} <var:H1> := <var:N> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:4> ; <var:A> := <var:H1> <var:A> := <var:A> + <var:H0> {{ <var:A> = <nat:4> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:H1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:H1> = <var:Q> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:H1> = <nat:4> * <var:Q> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:H0> = <nat:6> /\ <var:A> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:A> = <nat:4> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 