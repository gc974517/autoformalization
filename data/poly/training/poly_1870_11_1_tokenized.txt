\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:h> ; <var:R2> := <var:R1> * <var:h> ; <var:R3> := <var:R2> * <var:h> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:3> ; <var:l> := <var:R3> <var:l> := <var:l> + <var:R2> <var:l> := <var:l> + <var:R1> <var:l> := <var:l> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:h> = <var:V> $ --- taking integers $ <var:V> $ --- ahead of the execution of our series of commands , then we have $ <var:l> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:6> $ when set of commands has finished . \end{theorem} \begin{proof} The course of logic for this set of instructions is accomplished through Hoare techniques . Advancing to the next piece of code found in the list of instructions , we have the variable binding code assigning $ <var:h> $ as $ <var:R1>$ . This command advances $ \{ <var:h> = <var:V> \} $ into the postcondition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \} $ . This is shown to be logically sound by the assignment rule obtained from typical Hoare reasoning . Shifting focus toward the proceeding line of code found in the segment of code , we have the code \verb | <var:R2> := <var:R1> * <var:h> ; | . This advances the condition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \} $ to $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule given in Hoare techniques . Shifting focus toward the next piece of code contained in our segment of code , we have the environment update statement assigning $ <var:R2> * <var:h> $ as $ <var:R3>$ . This advances the condition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme given by Hoare reasoning . Taking a look at the next statement seen in our set of commands , we see the binding line defining $ <nat:6> $ as $ <var:R0>$ . This statement forwards $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \} $ toward the condition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ . This is ensured with the assignment rule in Hoare techniques . Advancing to the proceeding step in our series of instructions , the variable assignmet statement \verb | <var:R1> := <var:R1> * <nat:6> ; | . This command moves the condition $ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ to the postcondition $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ . Moving on to the upcoming line of code in the series of commands , we have the binding code yielding $ <var:R2> * <nat:1> $ as $ <var:R2>$ . This code advances the precondition $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ into $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ . Going to the next step , we have the environment update command \verb | <var:R3> := <var:R3> * <nat:3> ; | . This advances $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R3> = <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ toward $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ . This is shown using the assignment inference rule given in Hoare techniques . Paying attention to the proceeding bit of code seen in the list of commands , we see the variable update line \verb | <var:l> := <var:R3> | . This statement transfers the condition $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:V> ^ <nat:3> \land <var:R0> = <nat:6> \} $ into $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> \} $ . This is deduced by the assignment rule obtained from usual Hoare reasoning . Moving forward to the next command contained in the series of commands , we have the binding line \verb | <var:l> := <var:l> + <var:R2> | . This code redefines the condition $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> \} $ to $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> \} $ . This is shown using the assignment rule defined by Hoare reasoning . Advancing to the subsequent statement found in our segment of code , we have the assignment command giving $ <var:l> + <var:R1$ as $ <var:l>$ . This forwards the condition $ \{ <var:h> = <var:V> \land <var:R1> = <nat:6> \cdot <var:V> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:V> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> \} $ . This is known to be sound using the assignment law obtained from typical Hoare techniques . Observing the next line of code seen in the segment of code , the environment update command \verb | <var:l> := <var:l> + <var:R0> | . This moves $ \{ <var:h> = <var:V> \land <var:R0> = <nat:6> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> \} $ as the condition $ \{ <var:h> = <var:V> \land <var:l> = <nat:3> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> ^ <nat:2> + <nat:6> \cdot <var:V> + <nat:6> \} $ . This is given using the assignment inference rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:h> ; <var:R2> := <var:R1> * <var:h> ; <var:R3> := <var:R2> * <var:h> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:3> ; <var:l> := <var:R3> <var:l> := <var:l> + <var:R2> <var:l> := <var:l> + <var:R1> <var:l> := <var:l> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <def:poly> {{ <var:l> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:6> * <var:V> /\ <var:R2> = <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:6> * <var:V> /\ <var:R2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:R3> = <var:V> ^ <nat:3> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:6> * <var:V> /\ <var:R2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:V> ^ <nat:3> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:6> * <var:V> /\ <var:R2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:R0> = <nat:6> /\ <var:l> = <nat:3> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:6> * <var:V> /\ <var:R0> = <nat:6> /\ <var:l> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R0> = <nat:6> /\ <var:l> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:6> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:l> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:6> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 