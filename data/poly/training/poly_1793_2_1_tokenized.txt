\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:2> ; <var:b> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume taking integers $ <var:y> $ that we have $ <var:q> = <var:y> $ ahead of running this code segment , it must be that we see $ <var:b> = <nat:2> $ once list of commands executes . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:q> = <var:y> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:q> = <var:y> \land <var:F0> = <nat:2> \} \\ <var:b> := <var:F0> \\ \{ <var:q> = <var:y> \land <var:b> = <nat:2> \} \end{eqnarray} Considering the above , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:b> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:q> = <var:y> }} <def:poly> {{ <var:b> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:b> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 