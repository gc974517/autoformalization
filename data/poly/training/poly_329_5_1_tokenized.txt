\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:b> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:W> := <var:y1> <var:W> := <var:W> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:b> = <var:X> $ before evaluating the code segment , it holds that $ <var:W> = <nat:4> \times <var:X> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:b> = <var:X> \} \\ <var:y1> := <var:b> ; \\ \{ <var:b> = <var:X> \land <var:y1> = <var:X> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:b> = <var:X> \land <var:y1> = <var:X> \land <var:y0> = <nat:6> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:b> = <var:X> \land <var:y1> = <nat:4> \cdot <var:X> \land <var:y0> = <nat:6> \} \\ <var:W> := <var:y1> \\ \{ <var:b> = <var:X> \land <var:y0> = <nat:6> \land <var:W> = <nat:4> \cdot <var:X> \} \\ <var:W> := <var:W> + <var:y0> \\ \{ <var:b> = <var:X> \land <var:W> = <nat:4> \cdot <var:X> + <nat:6> \} \end{eqnarray} Considering the preceding argument , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:b> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:4> ; <var:W> := <var:y1> <var:W> := <var:W> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <def:poly> {{ <var:W> = <nat:4> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:y1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:y1> = <var:X> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:y1> = <nat:4> * <var:X> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:y0> = <nat:6> /\ <var:W> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:W> = <nat:4> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 