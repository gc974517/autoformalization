\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:y> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:6> ; <var:h> := <var:N1> <var:h> := <var:h> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:y> = <var:x> $ , given all positive coefficients $ <var:x> $ , prior to executing our set of instructions , it holds that we have $ <var:h> = <nat:6> \times <var:x> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:y> = <var:x> \} \\ <var:N1> := <var:y> ; \\ \{ <var:y> = <var:x> \land <var:N1> = <var:x> \} \\ <var:N0> := <nat:5> ; \\ \{ <var:y> = <var:x> \land <var:N1> = <var:x> \land <var:N0> = <nat:5> \} \\ <var:N1> := <var:N1> * <nat:6> ; \\ \{ <var:y> = <var:x> \land <var:N1> = <nat:6> \times <var:x> \land <var:N0> = <nat:5> \} \\ <var:h> := <var:N1> \\ \{ <var:y> = <var:x> \land <var:N0> = <nat:5> \land <var:h> = <nat:6> \times <var:x> \} \\ <var:h> := <var:h> + <var:N0> \\ \{ <var:y> = <var:x> \land <var:h> = <nat:6> \times <var:x> + <nat:5> \} \end{eqnarray} As a result , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:y> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:6> ; <var:h> := <var:N1> <var:h> := <var:h> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:y> = <var:x> }} <def:poly> {{ <var:h> = <nat:6> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:N1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:N1> = <var:x> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:N1> = <nat:6> * <var:x> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:N0> = <nat:5> /\ <var:h> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:h> = <nat:6> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 