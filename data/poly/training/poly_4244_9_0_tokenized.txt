\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:7> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:v> ; <var:N2> := <nat:8> ; <var:N2> := <var:N2> * <var:v> ; <var:N2> := <var:N2> * <var:v> ; <var:G> := <var:N2> ; <var:G> := <var:G> + <var:N1> ; <var:G> := <var:G> + <var:N0> \end{verbatim} Assume that $ <var:v> = <var:y> $ before executing the series of commands it follows that we have $ <var:G> = <nat:8> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:7> $ . \end{theorem} \begin{proof} The proof of this segment of code can be given by usual Hoare reasoning . Moving on , we see the environment update line defining $ <nat:7> $ to $ <var:N0>$ . This transfers the precondition $ \{ <var:v> = <var:y> \} $ into the postcondition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \} $ . Observing the upcoming command contained in the code segment , the variable binding line \verb | <var:N1> := <nat:4> ; | . This command advances $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \} $ toward the postcondition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \} $ . Focusing on the upcoming line in the list of commands , we have the environment update command \verb | <var:N1> := <var:N1> * <var:v> ; | . This moves $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \} $ as the condition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \} $ . This is deduced with the assignment scheme found in Hoare reasoning . Moving on to the next step , we have the line letting $ <nat:8> $ into $ <var:N2>$ . This takes $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \} $ toward the condition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \} $ . Moving on to the next bit of code found in our list of commands , the environment update command \verb | <var:N2> := <var:N2> * <var:v> ; | . This line advances the precondition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \} $ to the postcondition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \times <var:y> \} $ . This is rigorously given with the assignment inference rule in Hoare techniques . Moving on to the upcoming line contained in our code , we have the line letting $ <var:N2> * <var:v> $ toward $ <var:N2>$ . This transfers $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \times <var:y> \} $ to the condition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \times <var:y> ^ <nat:2> \} $ . Stepping forward , the variable binding code \verb | <var:G> := <var:N2> ; | . This code moves the condition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:N2> = <nat:8> \times <var:y> ^ <nat:2> \} $ as the postcondition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:G> = <nat:8> \times <var:y> ^ <nat:2> \} $ . This is given by the assignment law given in Hoare techniques . Moving on , the environment update code letting $ <var:G> + <var:N1> $ to $ <var:G>$ . This forwards $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:N1> = <nat:4> \times <var:y> \land <var:G> = <nat:8> \times <var:y> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:G> = <nat:8> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> \} $ . This is shown to be logically sound through the assignment rule obtained from usual Hoare reasoning . Going to the next step , we see the environment update statement giving $ <var:G> + <var:N0$ toward $ <var:G>$ . This command forwards $ \{ <var:v> = <var:y> \land <var:N0> = <nat:7> \land <var:G> = <nat:8> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> \} $ as the postcondition $ \{ <var:v> = <var:y> \land <var:G> = <nat:8> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:v> = <var:y> }} <var:N0> := <nat:7> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:v> ; <var:N2> := <nat:8> ; <var:N2> := <var:N2> * <var:v> ; <var:N2> := <var:N2> * <var:v> ; <var:G> := <var:N2> ; <var:G> := <var:G> + <var:N1> ; <var:G> := <var:G> + <var:N0> {{ <var:G> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> * <var:y> /\ <var:N2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> * <var:y> /\ <var:N2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> * <var:y> /\ <var:N2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:4> * <var:y> /\ <var:G> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:N0> = <nat:7> /\ <var:G> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:y> /\ <var:G> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 