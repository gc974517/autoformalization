\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:6> ; <var:s> := <var:U0> \end{verbatim} Allow that we have $ <var:j> = <var:r> $ ahead of running the program , it holds that we see $ <var:s> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:j> = <var:r> \} \\ <var:U0> := <nat:6> ; \\ \{ <var:j> = <var:r> \land <var:U0> = <nat:6> \} \\ <var:s> := <var:U0> \\ \{ <var:j> = <var:r> \land <var:s> = <nat:6> \} \end{eqnarray} Thus , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <var:U0> := <nat:6> ; <var:s> := <var:U0> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 