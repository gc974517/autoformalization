\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:7> ; <var:h> := <var:L0> \end{verbatim} Assume --- given all positive coefficients $ <var:E> $ --- it to be that $ <var:M> = <var:E> $ before interpreting this set of instructions , it follows that we have $ <var:h> = <nat:7> $ once set of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be given by usual Hoare techniques . Further , the variable binding command \verb | <var:L0> := <nat:7> ; | . This redefines the precondition $ \{ <var:M> = <var:E> \} $ as the condition $ \{ <var:M> = <var:E> \land <var:L0> = <nat:7> \} $ . Advancing to the next step , the command \verb | <var:h> := <var:L0> | . This transfers the condition $ \{ <var:M> = <var:E> \land <var:L0> = <nat:7> \} $ into the postcondition $ \{ <var:M> = <var:E> \land <var:h> = <nat:7> \} $ . This is known to be sound through the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:M> = <var:E> }} <var:L0> := <nat:7> ; <var:h> := <var:L0> {{ <var:h> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:h> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 