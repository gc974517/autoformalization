\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:2> ; <var:s> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:X> = <var:h> $ --- given all positive integer coefficients $ <var:h> $ --- prior to interpreting our set of commands , it holds that we see $ <var:s> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the code is done by standard Hoare reasoning . Stepping forward , we have the variable update command defining $ <nat:2> $ toward $ <var:e0>$ . This command takes the precondition $ \{ <var:X> = <var:h> \} $ to $ \{ <var:X> = <var:h> \land <var:e0> = <nat:2> \} $ . Taking a look at the following line of code in our set of instructions , we see the variable assignmet statement \verb | <var:s> := <var:e0> | . This redefines $ \{ <var:X> = <var:h> \land <var:e0> = <nat:2> \} $ into the postcondition $ \{ <var:X> = <var:h> \land <var:s> = <nat:2> \} $ . This is guaranteed using the assignment rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:s> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:X> = <var:h> }} <def:poly> {{ <var:s> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:h> /\ <var:s> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 