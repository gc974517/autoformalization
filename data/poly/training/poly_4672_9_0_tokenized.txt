\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:O> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:O> ; <var:s2> := <var:s2> * <var:O> ; <var:v> := <var:s2> ; <var:v> := <var:v> + <var:s1> ; <var:v> := <var:v> + <var:s0> \end{verbatim} Allowing assuming some positive coefficients $ <var:f> $ $ <var:O> = <var:f> $ before executing this list of commands , it must be that we have $ <var:v> = <nat:7> \times <var:f> ^ <nat:2> + <nat:9> \times <var:f> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:f> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \} \\ <var:s1> := <nat:9> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> \} \\ <var:s1> := <var:s1> * <var:O> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:f> \} \\ <var:s2> := <nat:7> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:f> \land <var:s2> = <nat:7> \} \\ <var:s2> := <var:s2> * <var:O> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:f> \land <var:s2> = <nat:7> * <var:f> \} \\ <var:s2> := <var:s2> * <var:O> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:f> \land <var:s2> = <nat:7> * <var:f> ^ <nat:2> \} \\ <var:v> := <var:s2> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:f> \land <var:v> = <nat:7> * <var:f> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:s1> ; \\ \{ <var:O> = <var:f> \land <var:s0> = <nat:5> \land <var:v> = <nat:7> * <var:f> ^ <nat:2> + <nat:9> * <var:f> \} \\ <var:v> := <var:v> + <var:s0> \\ \{ <var:O> = <var:f> \land <var:v> = <nat:7> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:5> \} \end{eqnarray} As a result , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:O> = <var:f> }} <var:s0> := <nat:5> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:O> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:O> ; <var:s2> := <var:s2> * <var:O> ; <var:v> := <var:s2> ; <var:v> := <var:v> + <var:s1> ; <var:v> := <var:v> + <var:s0> {{ <var:v> = <nat:7> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:f> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:f> /\ <var:s2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:f> /\ <var:s2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:f> /\ <var:v> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:s0> = <nat:5> /\ <var:v> = <nat:7> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:f> /\ <var:v> = <nat:7> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 