\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:d> ; <var:g> := <var:F1> ; <var:g> := <var:g> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allow $ <var:d> = <var:a> $ before executing this list of commands , it must be that we have $ <var:g> = <nat:4> * <var:a> + <nat:4> $ after list of commands has executed . \end{theorem} \begin{proof} The course of logic for this code segment can be given using this decorated set of instructions . \begin{eqnarray} \{ <var:d> = <var:a> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:d> = <var:a> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:4> ; \\ \{ <var:d> = <var:a> \land <var:F0> = <nat:4> \land <var:F1> = <nat:4> \} \\ <var:F1> := <var:F1> * <var:d> ; \\ \{ <var:d> = <var:a> \land <var:F0> = <nat:4> \land <var:F1> = <nat:4> \cdot <var:a> \} \\ <var:g> := <var:F1> ; \\ \{ <var:d> = <var:a> \land <var:F0> = <nat:4> \land <var:g> = <nat:4> \cdot <var:a> \} \\ <var:g> := <var:g> + <var:F0> \\ \{ <var:d> = <var:a> \land <var:g> = <nat:4> \cdot <var:a> + <nat:4> \} \end{eqnarray} Applying standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:d> ; <var:g> := <var:F1> ; <var:g> := <var:g> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:d> = <var:a> }} <def:poly> {{ <var:g> = <nat:4> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:F0> = <nat:4> /\ <var:g> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:g> = <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 