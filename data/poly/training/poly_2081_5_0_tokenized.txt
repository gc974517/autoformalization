\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:a> ; <var:C> := <var:u1> ; <var:C> := <var:C> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Assuming $ <var:a> = <var:Y> $ before the evaluation of this code , it must be that $ <var:C> = <nat:9> \times <var:Y> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:Y> \} \\ <var:u0> := <nat:6> ; \\ \{ <var:a> = <var:Y> \land <var:u0> = <nat:6> \} \\ <var:u1> := <nat:9> ; \\ \{ <var:a> = <var:Y> \land <var:u0> = <nat:6> \land <var:u1> = <nat:9> \} \\ <var:u1> := <var:u1> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:u0> = <nat:6> \land <var:u1> = <nat:9> \cdot <var:Y> \} \\ <var:C> := <var:u1> ; \\ \{ <var:a> = <var:Y> \land <var:u0> = <nat:6> \land <var:C> = <nat:9> \cdot <var:Y> \} \\ <var:C> := <var:C> + <var:u0> \\ \{ <var:a> = <var:Y> \land <var:C> = <nat:9> \cdot <var:Y> + <nat:6> \} \end{eqnarray} The application of standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:a> ; <var:C> := <var:u1> ; <var:C> := <var:C> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <def:poly> {{ <var:C> = <nat:9> * <var:Y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:u0> = <nat:6> /\ <var:C> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:C> = <nat:9> * <var:Y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 