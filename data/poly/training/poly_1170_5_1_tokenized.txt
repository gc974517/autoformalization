\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:b> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:2> ; <var:L> := <var:O1> <var:L> := <var:L> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Given it to hold that $ <var:b> = <var:l> $ prior to interpreting our program it holds that we see $ <var:L> = <nat:2> \times <var:l> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:b> = <var:l> \} \\ <var:O1> := <var:b> ; \\ \{ <var:b> = <var:l> \land <var:O1> = <var:l> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:b> = <var:l> \land <var:O1> = <var:l> \land <var:O0> = <nat:3> \} \\ <var:O1> := <var:O1> * <nat:2> ; \\ \{ <var:b> = <var:l> \land <var:O1> = <nat:2> \times <var:l> \land <var:O0> = <nat:3> \} \\ <var:L> := <var:O1> \\ \{ <var:b> = <var:l> \land <var:O0> = <nat:3> \land <var:L> = <nat:2> \times <var:l> \} \\ <var:L> := <var:L> + <var:O0> \\ \{ <var:b> = <var:l> \land <var:L> = <nat:2> \times <var:l> + <nat:3> \} \end{eqnarray} Therefore , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:b> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:2> ; <var:L> := <var:O1> <var:L> := <var:L> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:b> = <var:l> }} <def:poly> {{ <var:L> = <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:O1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:O1> = <var:l> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:O1> = <nat:2> * <var:l> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:O0> = <nat:3> /\ <var:L> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:l> /\ <var:L> = <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 