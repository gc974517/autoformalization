\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> ; <var:C> := <nat:1> + <var:C> * <var:F> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:1> + <var:C> * <var:F> ; <var:C> := <nat:4> + <var:C> * <var:F> ; <var:C> := <nat:3> + <var:C> * <var:F> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> \end{verbatim} Assuming that $ <var:F> = <var:Q> $ , given some positive integer coefficients $ <var:Q> $ , prior to evaluating the code it must be that we see $ <var:C> = <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our segment of code is done using usual Hoare logic . Observing the next line seen in our list of instructions , we have \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | . This is sound with the variable binding law from typical Hoare techniques . Advancing to the following lines in our list of commands , we see \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | , \verb | { <var:F> = <var:Q> \land <var:C> = <nat:2> } <var:C> := <var:C> * <var:F> { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> + } | , \verb | { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> + } <var:C> := <nat:2> + <var:C> * <var:F> { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> } | , \verb | { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> } <var:C> := <nat:2> + <var:C> * <var:F> { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> + <nat:2> } | and \verb | { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> + <nat:2> } <var:C> := <nat:1> + <var:C> * <var:F> { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:1> } | . This is guaranteed using the binding rule from usual Hoare reasoning . Next , we see \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | and \verb | { <var:F> = <var:Q> \land <var:C> = <nat:2> } <var:C> := <var:C> * <var:F> { <var:F> = <var:Q> \land <var:C> = <nat:2> \cdot <var:Q> + } | . This is known to be sound with the variable binding scheme from usual Hoare reasoning . Moving on to the next statement seen in our segment of code , \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | . This is known to be sound by the assignment rule of usual Hoare reasoning . Further , \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | . Keeping momentum , we see \verb | { <var:F> = <var:Q> } <var:C> := <nat:2> { <var:F> = <var:Q> \land <var:C> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:F> = <var:Q> }} <var:C> := <nat:2> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> ; <var:C> := <nat:1> + <var:C> * <var:F> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:1> + <var:C> * <var:F> ; <var:C> := <nat:4> + <var:C> * <var:F> ; <var:C> := <nat:3> + <var:C> * <var:F> ; <var:C> := <var:C> * <var:F> ; <var:C> := <nat:2> + <var:C> * <var:F> {{ <var:C> = <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:C> = <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 