\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:Y> ; <var:h2> := <var:h1> * <var:Y> ; <var:h3> := <var:h2> * <var:Y> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:5> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:g> := <var:h3> <var:g> := <var:g> + <var:h2> <var:g> := <var:g> + <var:h1> <var:g> := <var:g> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:Y> = <var:p> $ prior to evaluating this set of commands , it holds that we have $ <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:p> \} \\ <var:h1> := <var:Y> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <var:p> \} \\ <var:h2> := <var:h1> * <var:Y> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:Y> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:3> \} \end{eqnarray} Advancing the evaluation of our set of commands results in : \begin{eqnarray} <var:h1> := <var:h1> * <nat:5> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <nat:5> * <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:h2> := <var:h2> * <nat:8> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <nat:5> * <var:p> \land <var:h2> = <nat:8> * <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:h3> := <var:h3> * <nat:5> ; \\ \{ <var:Y> = <var:p> \land <var:h1> = <nat:5> * <var:p> \land <var:h2> = <nat:8> * <var:p> ^ <nat:2> \land <var:h3> = <nat:5> * <var:p> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:g> := <var:h3> \\ \{ <var:Y> = <var:p> \land <var:h1> = <nat:5> * <var:p> \land <var:h2> = <nat:8> * <var:p> ^ <nat:2> \land <var:h0> = <nat:3> \land <var:g> = <nat:5> * <var:p> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:h2> \\ \{ <var:Y> = <var:p> \land <var:h1> = <nat:5> * <var:p> \land <var:h0> = <nat:3> \land <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:h1> \\ \{ <var:Y> = <var:p> \land <var:h0> = <nat:3> \land <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> \} \\ <var:g> := <var:g> + <var:h0> \\ \{ <var:Y> = <var:p> \land <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:Y> ; <var:h2> := <var:h1> * <var:Y> ; <var:h3> := <var:h2> * <var:Y> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:5> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:g> := <var:h3> <var:g> := <var:g> + <var:h2> <var:g> := <var:g> + <var:h1> <var:g> := <var:g> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Y> = <var:p> }} <def:poly> {{ <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <nat:5> * <var:p> /\ <var:h2> = <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <nat:5> * <var:p> /\ <var:h2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <nat:5> * <var:p> /\ <var:h2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:h3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <nat:5> * <var:p> /\ <var:h2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:h0> = <nat:3> /\ <var:g> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h1> = <nat:5> * <var:p> /\ <var:h0> = <nat:3> /\ <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:h0> = <nat:3> /\ <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:g> = <nat:5> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 