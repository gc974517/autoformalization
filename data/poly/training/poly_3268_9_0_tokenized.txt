\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:A> ; <var:k2> := <nat:6> ; <var:k2> := <var:k2> * <var:A> ; <var:k2> := <var:k2> * <var:A> ; <var:y> := <var:k2> ; <var:y> := <var:y> + <var:k1> ; <var:y> := <var:y> + <var:k0> \end{verbatim} Allowing it to hold that $ <var:A> = <var:l> $ before interpreting our code it follows that we have $ <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:7> $ after code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:l> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \} \\ <var:k1> := <nat:4> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> \} \\ <var:k1> := <var:k1> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> * <var:l> \} \\ <var:k2> := <nat:6> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:6> \} \\ <var:k2> := <var:k2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:6> * <var:l> \} \\ <var:k2> := <var:k2> * <var:A> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> * <var:l> \land <var:k2> = <nat:6> * <var:l> ^ <nat:2> \} \\ <var:y> := <var:k2> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:k1> = <nat:4> * <var:l> \land <var:y> = <nat:6> * <var:l> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:k1> ; \\ \{ <var:A> = <var:l> \land <var:k0> = <nat:7> \land <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} \\ <var:y> := <var:y> + <var:k0> \\ \{ <var:A> = <var:l> \land <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:7> \} \end{eqnarray} Applying usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:A> = <var:l> }} <var:k0> := <nat:7> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:A> ; <var:k2> := <nat:6> ; <var:k2> := <var:k2> * <var:A> ; <var:k2> := <var:k2> * <var:A> ; <var:y> := <var:k2> ; <var:y> := <var:y> + <var:k1> ; <var:y> := <var:y> + <var:k0> {{ <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:l> /\ <var:k2> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:4> * <var:l> /\ <var:y> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:k0> = <nat:7> /\ <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:l> /\ <var:y> = <nat:6> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 