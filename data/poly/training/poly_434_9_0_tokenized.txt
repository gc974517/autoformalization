\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:p> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:p> ; <var:t2> := <var:t2> * <var:p> ; <var:w> := <var:t2> ; <var:w> := <var:w> + <var:t1> ; <var:w> := <var:w> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:p> = <var:j> $ --- given all positive coefficients $ <var:j> $ --- prior to the evaluation of our list of instructions it follows that we have $ <var:w> = <nat:1> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be shown by typical Hoare logic . Now , \[ \begin{tabular} {rcl} \{ <var:p> = <var:j> \} & <var:t0> := <nat:9> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \} & <var:t1> := <nat:9> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \} & <var:t1> := <var:t1> * <var:p> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \} & <var:t2> := <nat:1> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \} & <var:t2> := <var:t2> * <var:p> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \cdot <var:j> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \cdot <var:j> \} & <var:t2> := <var:t2> * <var:p> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:t2> = <nat:1> \cdot <var:j> ^ <nat:2> \} & <var:w> := <var:t2> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:w> = <nat:1> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:t1> = <nat:9> \cdot <var:j> \land <var:w> = <nat:1> \cdot <var:j> ^ <nat:2> \} & <var:w> := <var:w> + <var:t1> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \land <var:w> = <nat:1> \cdot <var:j> ^ <nat:2> + <nat:9> \cdot <var:j> \} \end{tabular} This is ensured with the variable assignmet rule given by Hoare techniques . Honing in on the upcoming piece of code in our code , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:j> \} & <var:t0> := <nat:9> & \{ <var:p> = <var:j> \land <var:t0> = <nat:9> \} \end{tabular} This is deduced by the binding scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:t1> := <nat:9> ; <var:t1> := <var:t1> * <var:p> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:p> ; <var:t2> := <var:t2> * <var:p> ; <var:w> := <var:t2> ; <var:w> := <var:w> + <var:t1> ; <var:w> := <var:w> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:p> = <var:j> }} <def:poly> {{ <var:w> = <nat:1> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> * <var:j> /\ <var:t2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> * <var:j> /\ <var:t2> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> * <var:j> /\ <var:t2> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:9> * <var:j> /\ <var:w> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:9> /\ <var:w> = <nat:1> * <var:j> ^ <nat:2> + <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:w> = <nat:1> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 