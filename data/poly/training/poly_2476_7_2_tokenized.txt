\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <nat:2> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> ; <var:P> := <nat:1> + <var:P> * <var:c> ; <var:P> := <nat:4> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> \end{verbatim} Given that $ <var:c> = <var:X> $ before the evaluation of this program , it holds that $ <var:P> = <nat:1> \cdot <var:X> ^ <nat:6> + <nat:2> \cdot <var:X> ^ <nat:5> + <nat:3> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:X> \} \\ <var:P> := <nat:1> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \} \\ <var:P> := <nat:2> + <var:P> * <var:c> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> + <nat:2> \} \\ <var:P> := <nat:3> + <var:P> * <var:c> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:3> \} \\ <var:P> := <nat:1> + <var:P> * <var:c> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} \\ <var:P> := <nat:4> + <var:P> * <var:c> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:4> \} \\ <var:P> := <nat:3> + <var:P> * <var:c> ; \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:3> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:3> \} \\ <var:P> := <nat:3> + <var:P> * <var:c> \\ \{ <var:c> = <var:X> \land <var:P> = <nat:1> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:3> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:3> \} \end{eqnarray} Using Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:c> = <var:X> }} <var:P> := <nat:1> ; <var:P> := <nat:2> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> ; <var:P> := <nat:1> + <var:P> * <var:c> ; <var:P> := <nat:4> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> ; <var:P> := <nat:3> + <var:P> * <var:c> {{ <var:P> = <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 