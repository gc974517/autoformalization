\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:S> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:6> ; <var:c> := <var:f1> <var:c> := <var:c> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:S> = <var:H> $ before interpreting the program , it must be that we see $ <var:c> = <nat:6> \cdot <var:H> + <nat:4> $ after series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:H> \} \\ <var:f1> := <var:S> ; \\ \{ <var:S> = <var:H> \land <var:f1> = <var:H> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:S> = <var:H> \land <var:f1> = <var:H> \land <var:f0> = <nat:4> \} \\ <var:f1> := <var:f1> * <nat:6> ; \\ \{ <var:S> = <var:H> \land <var:f1> = <nat:6> * <var:H> \land <var:f0> = <nat:4> \} \\ <var:c> := <var:f1> \\ \{ <var:S> = <var:H> \land <var:f0> = <nat:4> \land <var:c> = <nat:6> * <var:H> \} \\ <var:c> := <var:c> + <var:f0> \\ \{ <var:S> = <var:H> \land <var:c> = <nat:6> * <var:H> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:S> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:6> ; <var:c> := <var:f1> <var:c> := <var:c> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:S> = <var:H> }} <def:poly> {{ <var:c> = <nat:6> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:f1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:f1> = <var:H> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:f1> = <nat:6> * <var:H> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:f0> = <nat:4> /\ <var:c> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:H> /\ <var:c> = <nat:6> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 