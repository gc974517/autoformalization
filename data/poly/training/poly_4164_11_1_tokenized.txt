\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:9> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:3> ; <var:u> := <var:L3> <var:u> := <var:u> + <var:L2> <var:u> := <var:u> + <var:L1> <var:u> := <var:u> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allow that we have $ <var:f> = <var:B> $ ahead of interpreting this program then $ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:7> $ when series of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands is demonstrated through Hoare logic . Jumping to the following pieces of code seen in the series of commands , \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:L1> := <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <var:B> \} & <var:L2> := <var:L1> * <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} \end{tabular} This is rigorously given through the assignment law given in usual Hoare techniques . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:L1> := <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <var:B> \} & <var:L2> := <var:L1> * <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \} & <var:L3> := <var:L2> * <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \} & <var:L0> := <nat:7> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} & <var:L1> := <var:L1> * <nat:9> & \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} & <var:L2> := <var:L2> * <nat:2> & \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} & <var:L3> := <var:L3> * <nat:3> & \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <nat:3> \times <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} \\ \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L3> = <nat:3> \times <var:B> ^ <nat:3> \land <var:L0> = <nat:7> \} & <var:u> := <var:L3& \{ <var:f> = <var:B> \land <var:L1> = <nat:9> \times <var:B> \land <var:L2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:L0> = <nat:7> \land <var:u> = <nat:3> \times <var:B> ^ <nat:3> \} \end{tabular} Further , we see \[ \begin{tabular} {rcl} \{ <var:f> = <var:B> \} & <var:L1> := <var:f> & \{ <var:f> = <var:B> \land <var:L1> = <var:B> \} \end{tabular} This is rigorously given by the binding scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:f> ; <var:L2> := <var:L1> * <var:f> ; <var:L3> := <var:L2> * <var:f> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:9> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:3> ; <var:u> := <var:L3> <var:u> := <var:u> + <var:L2> <var:u> := <var:u> + <var:L1> <var:u> := <var:u> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:f> = <var:B> }} <def:poly> {{ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <nat:9> * <var:B> /\ <var:L2> = <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <nat:9> * <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L3> = <var:B> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <nat:9> * <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:B> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <nat:9> * <var:B> /\ <var:L2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:L0> = <nat:7> /\ <var:u> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L1> = <nat:9> * <var:B> /\ <var:L0> = <nat:7> /\ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:L0> = <nat:7> /\ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 