\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:8> ; <var:W> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given every positive coefficients $ <var:X> $ ) it to be that $ <var:y> = <var:X> $ ahead of the evaluation of this code it holds that we see $ <var:W> = <nat:8> $ after program terminates . \end{theorem} \begin{proof} The argument for the list of commands is demonstrated by Hoare reasoning . Paying attention to the upcoming command in our segment of code , we have \verb | { <var:y> = <var:X> } <var:Z0> := <nat:8> { <var:y> = <var:X> \land <var:Z0> = <nat:8> } | . This is rigorously given through the assignment scheme found in Hoare techniques . Paying attention to the next step seen in the program , we see \verb | { <var:y> = <var:X> } <var:Z0> := <nat:8> { <var:y> = <var:X> \land <var:Z0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:W> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:y> = <var:X> }} <def:poly> {{ <var:W> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:W> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 