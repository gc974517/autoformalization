\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:I0> := <nat:6> ; <var:V> := <var:I0> \end{verbatim} Allow $ <var:t> = <var:n> $ prior to the execution of the set of commands , it must be that we have $ <var:V> = <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for the code can be done through standard Hoare logic . Shifting focus toward the subsequent bits of codecontained in the set of commands , \begin{eqnarray} \{ <var:t> = <var:n> \} \, <var:I0> := <nat:6> \, \{ <var:t> = <var:n> \land <var:I0> = <nat:6> \} \\ \{ <var:t> = <var:n> \land <var:I0> = <nat:6> \} \, <var:V> := <var:I0\, \{ <var:t> = <var:n> \land <var:V> = <nat:6> \} \end{eqnarray} This is sound with the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:t> = <var:n> }} <var:I0> := <nat:6> ; <var:V> := <var:I0> {{ <var:V> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:V> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 