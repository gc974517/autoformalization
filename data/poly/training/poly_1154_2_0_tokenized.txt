\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:5> ; <var:E> := <var:M0> \end{verbatim} Assuming it to hold that $ <var:j> = <var:d> $ before the execution of our program it must be that we have $ <var:E> = <nat:5> $ once set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:d> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:j> = <var:d> \land <var:M0> = <nat:5> \} \\ <var:E> := <var:M0> \\ \{ <var:j> = <var:d> \land <var:E> = <nat:5> \} \end{eqnarray} The application of typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:j> = <var:d> }} <var:M0> := <nat:5> ; <var:E> := <var:M0> {{ <var:E> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:d> /\ <var:E> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 