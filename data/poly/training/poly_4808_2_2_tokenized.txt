\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:4> + <var:B> * <var:g> \end{verbatim} Allowing it to hold that $ <var:g> = <var:s> $ prior to interpreting this program , it holds that we have $ <var:B> = <nat:4> \times <var:s> + <nat:4> $ . \end{theorem} \begin{proof} We can see that this decorated program . \begin{eqnarray} \{ <var:g> = <var:s> \} \\ <var:B> := <nat:4> ; \\ \{ <var:g> = <var:s> \land <var:B> = <nat:4> \} \\ <var:B> := <nat:4> + <var:B> * <var:g> \\ \{ <var:g> = <var:s> \land <var:B> = <nat:4> \times <var:s> + <nat:4> \} \end{eqnarray} Applying standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:g> = <var:s> }} <var:B> := <nat:4> ; <var:B> := <nat:4> + <var:B> * <var:g> {{ <var:B> = <nat:4> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:B> = <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 