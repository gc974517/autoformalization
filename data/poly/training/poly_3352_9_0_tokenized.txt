\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:9> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:j> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:j> ; <var:X2> := <var:X2> * <var:j> ; <var:U> := <var:X2> ; <var:U> := <var:U> + <var:X1> ; <var:U> := <var:U> + <var:X0> \end{verbatim} Given $ <var:j> = <var:c> $ ahead of the execution of our series of commands it follows that we have $ <var:U> = <nat:3> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:9> $ after set of instructions has executed . \end{theorem} \begin{proof} The argument for the list of commands can be demonstrated by Hoare reasoning . Observing the following steps contained in our segment of code , \begin{eqnarray} \{ <var:j> = <var:c> \} \, <var:X0> := <nat:9> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \} \, <var:X1> := <nat:3> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> \} \, <var:X1> := <var:X1> * <var:j> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \} \, <var:X2> := <nat:3> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> \} \, <var:X2> := <var:X2> * <var:j> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> * <var:c> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> * <var:c> \} \, <var:X2> := <var:X2> * <var:j> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> * <var:c> ^ <nat:2> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:X2> = <nat:3> * <var:c> ^ <nat:2> \} \, <var:U> := <var:X2> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:U> = <nat:3> * <var:c> ^ <nat:2> \} \\ \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:X1> = <nat:3> * <var:c> \land <var:U> = <nat:3> * <var:c> ^ <nat:2> \} \, <var:U> := <var:U> + <var:X1> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \land <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> \} \end{eqnarray} Taking another step toward the proceeding piece of code in the series of instructions , \begin{eqnarray} \{ <var:j> = <var:c> \} \, <var:X0> := <nat:9> \, \{ <var:j> = <var:c> \land <var:X0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:j> = <var:c> }} <var:X0> := <nat:9> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:j> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:j> ; <var:X2> := <var:X2> * <var:j> ; <var:U> := <var:X2> ; <var:U> := <var:U> + <var:X1> ; <var:U> := <var:U> + <var:X0> {{ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> * <var:c> /\ <var:X2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> * <var:c> /\ <var:X2> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> * <var:c> /\ <var:X2> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:X1> = <nat:3> * <var:c> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:X0> = <nat:9> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:U> = <nat:3> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 