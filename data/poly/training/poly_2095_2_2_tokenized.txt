\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:2> + <var:O> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Allow it to hold that $ <var:J> = <var:b> $ ahead of interpreting the set of instructions it holds that $ <var:O> = <nat:3> \cdot <var:b> + <nat:2> $ when program is done . \end{theorem} \begin{proof} The flow of logic for our set of commands is shown using standard Hoare logic . Advancing to the next line seen in the list of commands , \begin{verbatim} { <var:J> = <var:b> } <var:O> := <nat:3> { <var:J> = <var:b> \land <var:O> = <nat:3> } \end{verbatim} This is guaranteed through the environment update scheme given by usual Hoare techniques . Advancing to the subsequent line of code found in the code , \begin{verbatim} { <var:J> = <var:b> } <var:O> := <nat:3> { <var:J> = <var:b> \land <var:O> = <nat:3> } \end{verbatim} This is ensured using the assignment law found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:3> ; <var:O> := <nat:2> + <var:O> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <def:poly> {{ <var:O> = <nat:3> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:O> = <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 