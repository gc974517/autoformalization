\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:g0> := <nat:4> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:H> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:H> ; <var:g2> := <var:g2> * <var:H> ; <var:R> := <var:g2> ; <var:R> := <var:R> + <var:g1> ; <var:R> := <var:R> + <var:g0> \end{verbatim} Allow that we have $ <var:H> = <var:w> $ ahead of the evaluation of the list of commands it holds that we see $ <var:R> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:4> $ when series of commands has exited . \end{theorem} \begin{proof} Proving correctness for our code can be seen with this decorated program . \begin{eqnarray} \{ <var:H> = <var:w> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \} \\ <var:g1> := <nat:6> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \} \\ <var:g1> := <var:g1> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \times <var:w> \} \\ <var:g2> := <nat:6> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \times <var:w> \land <var:g2> = <nat:6> \} \\ <var:g2> := <var:g2> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \times <var:w> \land <var:g2> = <nat:6> \times <var:w> \} \\ <var:g2> := <var:g2> * <var:H> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \times <var:w> \land <var:g2> = <nat:6> \times <var:w> ^ <nat:2> \} \\ <var:R> := <var:g2> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:g1> = <nat:6> \times <var:w> \land <var:R> = <nat:6> \times <var:w> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:g1> ; \\ \{ <var:H> = <var:w> \land <var:g0> = <nat:4> \land <var:R> = <nat:6> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> \} \\ <var:R> := <var:R> + <var:g0> \\ \{ <var:H> = <var:w> \land <var:R> = <nat:6> \times <var:w> ^ <nat:2> + <nat:6> \times <var:w> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:H> = <var:w> }} <var:g0> := <nat:4> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:H> ; <var:g2> := <nat:6> ; <var:g2> := <var:g2> * <var:H> ; <var:g2> := <var:g2> * <var:H> ; <var:R> := <var:g2> ; <var:R> := <var:R> + <var:g1> ; <var:R> := <var:R> + <var:g0> {{ <var:R> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> * <var:w> /\ <var:g2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> * <var:w> /\ <var:g2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> * <var:w> /\ <var:g2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:g1> = <nat:6> * <var:w> /\ <var:R> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:g0> = <nat:4> /\ <var:R> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:R> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 