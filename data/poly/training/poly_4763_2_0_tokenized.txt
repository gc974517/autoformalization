\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:4> ; <var:N> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Assuming $ <var:j> = <var:u> $ prior to evaluating the list of commands it holds that we see $ <var:N> = <nat:4> $ when program has exited . \end{theorem} \begin{proof} Proving correctness for this code can be shown through standard Hoare reasoning . Moving on to the next step , we see the assignment command \verb | <var:n0> := <nat:4> ; | . This command advances the condition $ \{ <var:j> = <var:u> \} $ into the postcondition $ \{ <var:j> = <var:u> \land <var:n0> = <nat:4> \} $ . This is shown to be logically sound with the assignment law of standard Hoare logic . Considering the upcoming line of code found in the segment of code , the statement defining $ <var:n0$ to $ <var:N>$ . This line moves $ \{ <var:j> = <var:u> \land <var:n0> = <nat:4> \} $ into the condition $ \{ <var:j> = <var:u> \land <var:N> = <nat:4> \} $ . This is deduced using the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:4> ; <var:N> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:j> = <var:u> }} <def:poly> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 