\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <var:U> * <var:j> ; <var:U> := <nat:2> + <var:U> * <var:j> \end{verbatim} Allowing it to hold that $ <var:j> = <var:r> $ prior to evaluating this list of instructions it follows that we see $ <var:U> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> $ once segment of code executes . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:j> = <var:r> \} \\ <var:U> := <nat:4> ; \\ \{ <var:j> = <var:r> \land <var:U> = <nat:4> \} \\ <var:U> := <var:U> * <var:j> ; \\ \{ <var:j> = <var:r> \land <var:U> = <nat:4> \cdot <var:r> + \} \\ <var:U> := <nat:2> + <var:U> * <var:j> \\ \{ <var:j> = <var:r> \land <var:U> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thus , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <var:U> := <nat:4> ; <var:U> := <var:U> * <var:j> ; <var:U> := <nat:2> + <var:U> * <var:j> {{ <var:U> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U> = <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:U> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 