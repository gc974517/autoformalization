\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:Y> ; <var:O> := <var:R1> ; <var:O> := <var:O> + <var:R0> \end{verbatim} Allowing it to hold that $ <var:Y> = <var:d> $ before executing the code segment it follows that $ <var:O> = <nat:8> \cdot <var:d> + <nat:3> $ once set of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:d> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:Y> = <var:d> \land <var:R0> = <nat:3> \} \\ <var:R1> := <nat:8> ; \\ \{ <var:Y> = <var:d> \land <var:R0> = <nat:3> \land <var:R1> = <nat:8> \} \\ <var:R1> := <var:R1> * <var:Y> ; \\ \{ <var:Y> = <var:d> \land <var:R0> = <nat:3> \land <var:R1> = <nat:8> * <var:d> \} \\ <var:O> := <var:R1> ; \\ \{ <var:Y> = <var:d> \land <var:R0> = <nat:3> \land <var:O> = <nat:8> * <var:d> \} \\ <var:O> := <var:O> + <var:R0> \\ \{ <var:Y> = <var:d> \land <var:O> = <nat:8> * <var:d> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Y> = <var:d> }} <var:R0> := <nat:3> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:Y> ; <var:O> := <var:R1> ; <var:O> := <var:O> + <var:R0> {{ <var:O> = <nat:8> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:d> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:d> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:d> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:d> /\ <var:R0> = <nat:3> /\ <var:O> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:d> /\ <var:O> = <nat:8> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 