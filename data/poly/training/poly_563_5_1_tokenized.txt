\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:c> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:3> ; <var:R> := <var:D1> <var:R> := <var:R> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:c> = <var:S> $ ahead of executing the series of instructions it follows that we have $ <var:R> = <nat:3> \cdot <var:S> + <nat:6> $ when series of commands terminates . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:c> = <var:S> \} \\ <var:D1> := <var:c> ; \\ \{ <var:c> = <var:S> \land <var:D1> = <var:S> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:c> = <var:S> \land <var:D1> = <var:S> \land <var:D0> = <nat:6> \} \\ <var:D1> := <var:D1> * <nat:3> ; \\ \{ <var:c> = <var:S> \land <var:D1> = <nat:3> \cdot <var:S> \land <var:D0> = <nat:6> \} \\ <var:R> := <var:D1> \\ \{ <var:c> = <var:S> \land <var:D0> = <nat:6> \land <var:R> = <nat:3> \cdot <var:S> \} \\ <var:R> := <var:R> + <var:D0> \\ \{ <var:c> = <var:S> \land <var:R> = <nat:3> \cdot <var:S> + <nat:6> \} \end{eqnarray} As a consequence , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:c> ; <var:D0> := <nat:6> ; <var:D1> := <var:D1> * <nat:3> ; <var:R> := <var:D1> <var:R> := <var:R> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:c> = <var:S> }} <def:poly> {{ <var:R> = <nat:3> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:D1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:D1> = <var:S> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:D1> = <nat:3> * <var:S> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:D0> = <nat:6> /\ <var:R> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:R> = <nat:3> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 