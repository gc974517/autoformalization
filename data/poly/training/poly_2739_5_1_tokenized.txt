\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:d1> := <var:n> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:3> ; <var:b> := <var:d1> <var:b> := <var:b> + <var:d0> \end{verbatim} Allow it to hold that $ <var:n> = <var:R> $ prior to executing our list of commands it follows that we have $ <var:b> = <nat:3> * <var:R> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be shown through usual Hoare techniques . Considering the subsequent lines found in our series of commands , we see \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:d1> := <var:n> \, \{ <var:n> = <var:R> \land <var:d1> = <var:R> \} \\ \{ <var:n> = <var:R> \land <var:d1> = <var:R> \} \, <var:d0> := <nat:3> \, \{ <var:n> = <var:R> \land <var:d1> = <var:R> \land <var:d0> = <nat:3> \} \end{eqnarray} Moving forward to the next step , \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:d1> := <var:n> \, \{ <var:n> = <var:R> \land <var:d1> = <var:R> \} \end{eqnarray} Observing the subsequent bits of codein our series of instructions , we see \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:d1> := <var:n> \, \{ <var:n> = <var:R> \land <var:d1> = <var:R> \} \\ \{ <var:n> = <var:R> \land <var:d1> = <var:R> \} \, <var:d0> := <nat:3> \, \{ <var:n> = <var:R> \land <var:d1> = <var:R> \land <var:d0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <var:d1> := <var:n> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:3> ; <var:b> := <var:d1> <var:b> := <var:b> + <var:d0> {{ <var:b> = <nat:3> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:d1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:d1> = <var:R> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:d1> = <nat:3> * <var:R> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:d0> = <nat:3> /\ <var:b> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:b> = <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 