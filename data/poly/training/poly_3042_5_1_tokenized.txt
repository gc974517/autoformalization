\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:P> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:7> ; <var:R> := <var:q1> <var:R> := <var:R> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Given --- for positive numbers $ <var:o> $ --- $ <var:P> = <var:o> $ before evaluating this list of commands it must be that we see $ <var:R> = <nat:7> \times <var:o> + <nat:9> $ once series of commands has exited . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:P> = <var:o> \} \\ <var:q1> := <var:P> ; \\ \{ <var:P> = <var:o> \land <var:q1> = <var:o> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:P> = <var:o> \land <var:q1> = <var:o> \land <var:q0> = <nat:9> \} \\ <var:q1> := <var:q1> * <nat:7> ; \\ \{ <var:P> = <var:o> \land <var:q1> = <nat:7> \cdot <var:o> \land <var:q0> = <nat:9> \} \\ <var:R> := <var:q1> \\ \{ <var:P> = <var:o> \land <var:q0> = <nat:9> \land <var:R> = <nat:7> \cdot <var:o> \} \\ <var:R> := <var:R> + <var:q0> \\ \{ <var:P> = <var:o> \land <var:R> = <nat:7> \cdot <var:o> + <nat:9> \} \end{eqnarray} As a result , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:P> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:7> ; <var:R> := <var:q1> <var:R> := <var:R> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <def:poly> {{ <var:R> = <nat:7> * <var:o> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:q1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:q1> = <var:o> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:q0> = <nat:9> /\ <var:R> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:7> * <var:o> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 