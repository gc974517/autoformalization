\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:I> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:U> := <var:Q1> <var:U> := <var:U> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:I> = <var:h> $ ahead of interpreting the code segment it holds that we have $ <var:U> = <nat:9> * <var:h> + <nat:4> $ after series of instructions has exited . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:I> = <var:h> \} \\ <var:Q1> := <var:I> ; \\ \{ <var:I> = <var:h> \land <var:Q1> = <var:h> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:I> = <var:h> \land <var:Q1> = <var:h> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:9> ; \\ \{ <var:I> = <var:h> \land <var:Q1> = <nat:9> * <var:h> \land <var:Q0> = <nat:4> \} \\ <var:U> := <var:Q1> \\ \{ <var:I> = <var:h> \land <var:Q0> = <nat:4> \land <var:U> = <nat:9> * <var:h> \} \\ <var:U> := <var:U> + <var:Q0> \\ \{ <var:I> = <var:h> \land <var:U> = <nat:9> * <var:h> + <nat:4> \} \end{eqnarray} Therefore , our program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:I> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:U> := <var:Q1> <var:U> := <var:U> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:I> = <var:h> }} <def:poly> {{ <var:U> = <nat:9> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:Q1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:Q1> = <var:h> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:Q1> = <nat:9> * <var:h> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:Q0> = <nat:4> /\ <var:U> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:U> = <nat:9> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 