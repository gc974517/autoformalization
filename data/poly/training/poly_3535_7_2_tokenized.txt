\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:p> := <nat:2> ; <var:p> := <var:p> * <var:U> ; <var:p> := <nat:3> + <var:p> * <var:U> ; <var:p> := <nat:4> + <var:p> * <var:U> ; <var:p> := <var:p> * <var:U> ; <var:p> := <var:p> * <var:U> ; <var:p> := <nat:3> + <var:p> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:U> = <var:w> $ before the execution of the segment of code it holds that we see $ <var:p> = <nat:2> \times <var:w> ^ <nat:6> + <nat:3> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions is given through standard Hoare reasoning . Shifting focus toward the next bit of code seen in the series of commands , we see the variable update code \verb | <var:p> := <nat:2> ; | . This command forwards $ \{ <var:U> = <var:w> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> \} $ . This is deduced using the assignment law in Hoare logic . Taking another step toward the next statement in the code segment , we see the assignment line yielding $ <var:p> * <var:U> $ toward $ <var:p>$ . This takes $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> \} $ as $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> + \} $ . Advancing to the next step , the environment update command letting $ <nat:3> + <var:p> * <var:U> $ to $ <var:p>$ . This line forwards $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> + \} $ as the condition $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:2> + <nat:3> \} $ . Advancing to the following statement in the series of instructions , the binding line defining $ <nat:4> + <var:p> * <var:U> $ toward $ <var:p>$ . This command advances $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:4> \} $ . Taking another step toward the subsequent bit of code found in the set of commands , the variable binding code \verb | <var:p> := <var:p> * <var:U> ; | . This code redefines $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:4> \} $ to the condition $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + \} $ . This is shown to be logically sound with the assignment law from standard Hoare logic . Stepping forward , we have the code yielding $ <var:p> * <var:U> $ toward $ <var:p>$ . This moves $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + \} $ into the condition $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + \} $ . Taking another step toward the next line of code contained in our list of instructions , the assignment code binding $ <nat:3> + <var:p> * <var:U$ to $ <var:p>$ . This forwards $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + \} $ as $ \{ <var:U> = <var:w> \land <var:p> = <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:2> ; <var:p> := <var:p> * <var:U> ; <var:p> := <nat:3> + <var:p> * <var:U> ; <var:p> := <nat:4> + <var:p> * <var:U> ; <var:p> := <var:p> * <var:U> ; <var:p> := <var:p> * <var:U> ; <var:p> := <nat:3> + <var:p> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:U> = <var:w> }} <def:poly> {{ <var:p> = <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:p> = <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 