\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:i1> := <var:Q> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:1> ; <var:X> := <var:i1> <var:X> := <var:X> + <var:i0> \end{verbatim} Assuming that $ <var:Q> = <var:M> $ prior to executing the segment of code it holds that we see $ <var:X> = <nat:1> \times <var:M> + <nat:6> $ once code finishes . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:Q> = <var:M> \} \\ <var:i1> := <var:Q> ; \\ \{ <var:Q> = <var:M> \land <var:i1> = <var:M> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:Q> = <var:M> \land <var:i1> = <var:M> \land <var:i0> = <nat:6> \} \end{eqnarray} Continuing interpreting the list of commands results in : \begin{eqnarray} <var:i1> := <var:i1> * <nat:1> ; \\ \{ <var:Q> = <var:M> \land <var:i1> = <nat:1> * <var:M> \land <var:i0> = <nat:6> \} \\ <var:X> := <var:i1> \\ \{ <var:Q> = <var:M> \land <var:i0> = <nat:6> \land <var:X> = <nat:1> * <var:M> \} \\ <var:X> := <var:X> + <var:i0> \\ \{ <var:Q> = <var:M> \land <var:X> = <nat:1> * <var:M> + <nat:6> \} \end{eqnarray} Considering the above , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Q> = <var:M> }} <var:i1> := <var:Q> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:1> ; <var:X> := <var:i1> <var:X> := <var:X> + <var:i0> {{ <var:X> = <nat:1> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:i1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:i1> = <var:M> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:i1> = <nat:1> * <var:M> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:i0> = <nat:6> /\ <var:X> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:M> /\ <var:X> = <nat:1> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 