\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:9> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:O> ; <var:j> := <var:z1> ; <var:j> := <var:j> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume , given some $ <var:H> $ , $ <var:O> = <var:H> $ before the evaluation of the set of commands , it follows that we see $ <var:j> = <nat:6> \cdot <var:H> + <nat:9> $ once list of commands has finished . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:O> = <var:H> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:O> = <var:H> \land <var:z0> = <nat:9> \} \\ <var:z1> := <nat:6> ; \\ \{ <var:O> = <var:H> \land <var:z0> = <nat:9> \land <var:z1> = <nat:6> \} \\ <var:z1> := <var:z1> * <var:O> ; \\ \{ <var:O> = <var:H> \land <var:z0> = <nat:9> \land <var:z1> = <nat:6> \cdot <var:H> \} \end{eqnarray} Advancing interpreting the code segment gives : \begin{eqnarray} <var:j> := <var:z1> ; \\ \{ <var:O> = <var:H> \land <var:z0> = <nat:9> \land <var:j> = <nat:6> \cdot <var:H> \} \\ <var:j> := <var:j> + <var:z0> \\ \{ <var:O> = <var:H> \land <var:j> = <nat:6> \cdot <var:H> + <nat:9> \} \end{eqnarray} Given the above , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:z1> := <nat:6> ; <var:z1> := <var:z1> * <var:O> ; <var:j> := <var:z1> ; <var:j> := <var:j> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:O> = <var:H> }} <def:poly> {{ <var:j> = <nat:6> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:z0> = <nat:9> /\ <var:z1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:z0> = <nat:9> /\ <var:j> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:j> = <nat:6> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 