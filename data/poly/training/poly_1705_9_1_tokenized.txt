\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:S> ; <var:D2> := <var:D1> * <var:S> ; <var:D3> := <var:D2> * <var:S> ; <var:D0> := <nat:9> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:A> := <var:D3> <var:A> := <var:A> + <var:D2> <var:A> := <var:A> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given every natural coefficients $ <var:R> $ ) that $ <var:S> = <var:R> $ ahead of evaluating the series of instructions it must be that $ <var:A> = <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is clear through typical Hoare reasoning . Focusing on the subsequent bits of codein our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:R> \} & <var:D1> := <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \} & <var:D2> := <var:D1> * <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \} & <var:D3> := <var:D2> * <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \} & <var:D0> := <nat:9> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \land <var:D0> = <nat:9> \} \end{tabular} Taking a look at the subsequent step contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:S> = <var:R> \} & <var:D1> := <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \} \end{tabular} After , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:R> \} & <var:D1> := <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \} & <var:D2> := <var:D1> * <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \} & <var:D3> := <var:D2> * <var:S> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \} \\ \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \} & <var:D0> := <nat:9> & \{ <var:S> = <var:R> \land <var:D1> = <var:R> \land <var:D2> = <var:R> ^ <nat:2> \land <var:D3> = <var:R> ^ <nat:3> \land <var:D0> = <nat:9> \} \end{tabular} This is shown with the assignment scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:S> ; <var:D2> := <var:D1> * <var:S> ; <var:D3> := <var:D2> * <var:S> ; <var:D0> := <nat:9> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:A> := <var:D3> <var:A> := <var:A> + <var:D2> <var:A> := <var:A> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:S> = <var:R> }} <def:poly> {{ <var:A> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <var:R> ^ <nat:2> /\ <var:D3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <var:R> ^ <nat:2> /\ <var:D3> = <var:R> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:D3> = <var:R> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:R> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:D0> = <nat:9> /\ <var:A> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:D1> = <var:R> /\ <var:D0> = <nat:9> /\ <var:A> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:R> /\ <var:A> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 