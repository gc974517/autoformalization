\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:z0> := <nat:6> ; <var:O> := <var:z0> \end{verbatim} Allowing it to hold that $ <var:x> = <var:I> $ before evaluating this set of commands it must be that we have $ <var:O> = <nat:6> $ when series of commands is done executing . \end{theorem} \begin{proof} The proof of the list of instructions is given using Hoare logic . Paying attention to the next line of code contained in our series of commands , we see \verb | { <var:x> = <var:I> } <var:z0> := <nat:6> { <var:x> = <var:I> \land <var:z0> = <nat:6> } | . Immediately after , we see \verb | { <var:x> = <var:I> } <var:z0> := <nat:6> { <var:x> = <var:I> \land <var:z0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:x> = <var:I> }} <var:z0> := <nat:6> ; <var:O> := <var:z0> {{ <var:O> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:I> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:I> /\ <var:O> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 