\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:4> ; <var:t> := <var:t> * <var:a> ; <var:t> := <var:t> * <var:a> ; <var:t> := <nat:4> + <var:t> * <var:a> ; <var:t> := <nat:3> + <var:t> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:a> = <var:w> $ , letting $ <var:w> \in \mathbb{N} $ , before interpreting the segment of code , then $ <var:t> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is demonstrated through typical Hoare logic . Honing in on the following line seen in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:w> \} & <var:t> := <nat:4> & \{ <var:a> = <var:w> \land <var:t> = <nat:4> \} \end{tabular} Next , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:w> \} & <var:t> := <nat:4> & \{ <var:a> = <var:w> \land <var:t> = <nat:4> \} \\ \{ <var:a> = <var:w> \land <var:t> = <nat:4> \} & <var:t> := <var:t> * <var:a> & \{ <var:a> = <var:w> \land <var:t> = <nat:4> * <var:w> + \} \end{tabular} Next , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:w> \} & <var:t> := <nat:4> & \{ <var:a> = <var:w> \land <var:t> = <nat:4> \} \end{tabular} Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:a> = <var:w> \} & <var:t> := <nat:4> & \{ <var:a> = <var:w> \land <var:t> = <nat:4> \} \end{tabular} This is given by the environment update rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:4> ; <var:t> := <var:t> * <var:a> ; <var:t> := <var:t> * <var:a> ; <var:t> := <nat:4> + <var:t> * <var:a> ; <var:t> := <nat:3> + <var:t> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:a> = <var:w> }} <def:poly> {{ <var:t> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:t> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:t> = <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:t> = <nat:4> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:t> = <nat:4> * <var:w> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:t> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 