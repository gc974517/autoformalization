\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:b> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:b> ; <var:q2> := <var:q2> * <var:b> ; <var:e> := <var:q2> ; <var:e> := <var:e> + <var:q1> ; <var:e> := <var:e> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:b> = <var:w> $ prior to interpreting the code , it holds that $ <var:e> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is evident through typical Hoare logic . Moving forward to the proceeding line contained in our program , we have the binding statement defining $ <nat:3> $ into $ <var:q0>$ . This line redefines the condition $ \{ <var:b> = <var:w> \} $ as $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \} $ . Next , we have the variable update code \verb | <var:q1> := <nat:6> ; | . This code redefines the condition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \} $ to the condition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \} $ . Paying attention to the next statement seen in the series of instructions , we have the assignment command \verb | <var:q1> := <var:q1> * <var:b> ; | . This moves the precondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \} $ as the postcondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \} $ . Observing the upcoming line contained in the set of instructions , we have the variable assignmet line \verb | <var:q2> := <nat:6> ; | . This statement advances the condition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \} $ to the condition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \} $ . This is deduced by the assignment rule from Hoare techniques . Following , the variable assignmet code \verb | <var:q2> := <var:q2> * <var:b> ; | . This moves $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \} $ to the condition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \cdot <var:w> \} $ . This is shown using the assignment inference rule found in usual Hoare logic . Moving forward , we have the assignment code \verb | <var:q2> := <var:q2> * <var:b> ; | . This command redefines the precondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \cdot <var:w> \} $ into $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \cdot <var:w> ^ <nat:2> \} $ . Further , we see the binding line giving $ <var:q2> $ as $ <var:e>$ . This takes the precondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:q2> = <nat:6> \cdot <var:w> ^ <nat:2> \} $ into the postcondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:e> = <nat:6> \cdot <var:w> ^ <nat:2> \} $ . This is known to be sound through the assignment law defined in usual Hoare reasoning . Following , the assignment code letting $ <var:e> + <var:q1> $ into $ <var:e>$ . This statement forwards $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:q1> = <nat:6> \cdot <var:w> \land <var:e> = <nat:6> \cdot <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:e> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ . This is sound using the assignment scheme of Hoare logic . Moving on , we have the assignment statement assigning $ <var:e> + <var:q0$ to $ <var:e>$ . This takes $ \{ <var:b> = <var:w> \land <var:q0> = <nat:3> \land <var:e> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ into the postcondition $ \{ <var:b> = <var:w> \land <var:e> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:b> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:b> ; <var:q2> := <var:q2> * <var:b> ; <var:e> := <var:q2> ; <var:e> := <var:e> + <var:q1> ; <var:e> := <var:e> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:b> = <var:w> }} <def:poly> {{ <var:e> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> * <var:w> /\ <var:q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> * <var:w> /\ <var:q2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> * <var:w> /\ <var:q2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:6> * <var:w> /\ <var:e> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:q0> = <nat:3> /\ <var:e> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:w> /\ <var:e> = <nat:6> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 