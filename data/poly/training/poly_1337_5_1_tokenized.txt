\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:b> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:2> ; <var:H> := <var:u1> <var:H> := <var:H> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:b> = <var:U> $ ahead of the evaluation of the series of instructions then $ <var:H> = <nat:2> \times <var:U> + <nat:2> $ once segment of code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:U> \} \\ <var:u1> := <var:b> ; \\ \{ <var:b> = <var:U> \land <var:u1> = <var:U> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:b> = <var:U> \land <var:u1> = <var:U> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:2> ; \\ \{ <var:b> = <var:U> \land <var:u1> = <nat:2> * <var:U> \land <var:u0> = <nat:2> \} \\ <var:H> := <var:u1> \\ \{ <var:b> = <var:U> \land <var:u0> = <nat:2> \land <var:H> = <nat:2> * <var:U> \} \\ <var:H> := <var:H> + <var:u0> \\ \{ <var:b> = <var:U> \land <var:H> = <nat:2> * <var:U> + <nat:2> \} \end{eqnarray} Using usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:b> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:2> ; <var:H> := <var:u1> <var:H> := <var:H> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:b> = <var:U> }} <def:poly> {{ <var:H> = <nat:2> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:u1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:u1> = <var:U> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:u1> = <nat:2> * <var:U> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:u0> = <nat:2> /\ <var:H> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:H> = <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 