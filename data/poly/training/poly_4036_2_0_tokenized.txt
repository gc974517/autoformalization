\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:7> ; <var:P> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume ( taking natural coefficients $ <var:M> $ ) that we have $ <var:D> = <var:M> $ prior to evaluating the code segment , it must be that we see $ <var:P> = <nat:7> $ when series of instructions has exited . \end{theorem} \begin{proof} The argument for the series of commands is given through Hoare techniques . Stepping forward , we have the variable binding statement letting $ <nat:7> $ as $ <var:y0>$ . This statement transfers the condition $ \{ <var:D> = <var:M> \} $ to $ \{ <var:D> = <var:M> \land <var:y0> = <nat:7> \} $ . Looking at the subsequent step in the program , we see the variable update statement \verb | <var:P> := <var:y0> | . This statement advances the precondition $ \{ <var:D> = <var:M> \land <var:y0> = <nat:7> \} $ as $ \{ <var:D> = <var:M> \land <var:P> = <nat:7> \} $ . This is known to be sound by the assignment scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:P> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <def:poly> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 