\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:O> ; <var:C> := <var:y1> ; <var:C> := <var:C> + <var:y0> \end{verbatim} Assuming for any positive integers $ <var:F> $ it to be that $ <var:O> = <var:F> $ prior to running our code , then we see $ <var:C> = <nat:5> \cdot <var:F> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:O> = <var:F> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:O> = <var:F> \land <var:y0> = <nat:2> \} \\ <var:y1> := <nat:5> ; \\ \{ <var:O> = <var:F> \land <var:y0> = <nat:2> \land <var:y1> = <nat:5> \} \\ <var:y1> := <var:y1> * <var:O> ; \\ \{ <var:O> = <var:F> \land <var:y0> = <nat:2> \land <var:y1> = <nat:5> * <var:F> \} \\ <var:C> := <var:y1> ; \\ \{ <var:O> = <var:F> \land <var:y0> = <nat:2> \land <var:C> = <nat:5> * <var:F> \} \\ <var:C> := <var:C> + <var:y0> \\ \{ <var:O> = <var:F> \land <var:C> = <nat:5> * <var:F> + <nat:2> \} \end{eqnarray} Thus , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:O> = <var:F> }} <var:y0> := <nat:2> ; <var:y1> := <nat:5> ; <var:y1> := <var:y1> * <var:O> ; <var:C> := <var:y1> ; <var:C> := <var:C> + <var:y0> {{ <var:C> = <nat:5> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:y0> = <nat:2> /\ <var:C> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:C> = <nat:5> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 