\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:I1> := <var:e> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:2> ; <var:L> := <var:I1> <var:L> := <var:L> + <var:I0> \end{verbatim} Assume it to hold that $ <var:e> = <var:N> $ ahead of running our series of commands , it holds that we see $ <var:L> = <nat:2> \times <var:N> + <nat:4> $ after set of commands is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning yields : \begin{eqnarray} \{ <var:e> = <var:N> \} \\ <var:I1> := <var:e> ; \\ \{ <var:e> = <var:N> \land <var:I1> = <var:N> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:e> = <var:N> \land <var:I1> = <var:N> \land <var:I0> = <nat:4> \} \\ <var:I1> := <var:I1> * <nat:2> ; \\ \{ <var:e> = <var:N> \land <var:I1> = <nat:2> * <var:N> \land <var:I0> = <nat:4> \} \\ <var:L> := <var:I1> \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:4> \land <var:L> = <nat:2> * <var:N> \} \\ <var:L> := <var:L> + <var:I0> \\ \{ <var:e> = <var:N> \land <var:L> = <nat:2> * <var:N> + <nat:4> \} \end{eqnarray} As a consequence , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:e> = <var:N> }} <var:I1> := <var:e> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:2> ; <var:L> := <var:I1> <var:L> := <var:L> + <var:I0> {{ <var:L> = <nat:2> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I1> = <var:N> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I1> = <nat:2> * <var:N> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:4> /\ <var:L> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:L> = <nat:2> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 