\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:g> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:I> := <var:V1> <var:I> := <var:I> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Given $ <var:g> = <var:t> $ ( letting positive coefficients $ <var:t> $ ) prior to executing this segment of code , it must be that $ <var:I> = <nat:3> \cdot <var:t> + <nat:2> $ when list of instructions finishes . \end{theorem} \begin{proof} The flow of logic for our list of commands is given with standard Hoare logic . Moving onward , the environment update statement assigning $ <var:g> $ into $ <var:V1>$ . This moves the precondition $ \{ <var:g> = <var:t> \} $ to the postcondition $ \{ <var:g> = <var:t> \land <var:V1> = <var:t> \} $ . This is deduced by the assignment inference rule defined in standard Hoare techniques . Advancing to the subsequent step contained in the code segment , the statement \verb | <var:V0> := <nat:2> ; | . This command takes $ \{ <var:g> = <var:t> \land <var:V1> = <var:t> \} $ as the postcondition $ \{ <var:g> = <var:t> \land <var:V1> = <var:t> \land <var:V0> = <nat:2> \} $ . This is shown through the assignment inference rule defined by Hoare logic . Further , we see the command \verb | <var:V1> := <var:V1> * <nat:3> ; | . This line transfers the precondition $ \{ <var:g> = <var:t> \land <var:V1> = <var:t> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:g> = <var:t> \land <var:V1> = <nat:3> \cdot <var:t> \land <var:V0> = <nat:2> \} $ . This is shown using the assignment scheme given in standard Hoare logic . Immediately after , we see the variable update line assigning $ <var:V1$ to $ <var:I>$ . This line advances $ \{ <var:g> = <var:t> \land <var:V1> = <nat:3> \cdot <var:t> \land <var:V0> = <nat:2> \} $ toward the condition $ \{ <var:g> = <var:t> \land <var:V0> = <nat:2> \land <var:I> = <nat:3> \cdot <var:t> \} $ . This is rigorously given using the assignment inference rule found in typical Hoare logic . Advancing to the following line of code found in our segment of code , we see the binding command \verb | <var:I> := <var:I> + <var:V0> | . This command moves the precondition $ \{ <var:g> = <var:t> \land <var:V0> = <nat:2> \land <var:I> = <nat:3> \cdot <var:t> \} $ into the postcondition $ \{ <var:g> = <var:t> \land <var:I> = <nat:3> \cdot <var:t> + <nat:2> \} $ . This is rigorously given using the assignment scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:g> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:3> ; <var:I> := <var:V1> <var:I> := <var:I> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <def:poly> {{ <var:I> = <nat:3> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:V1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:V1> = <var:t> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:V1> = <nat:3> * <var:t> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:V0> = <nat:2> /\ <var:I> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:I> = <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 