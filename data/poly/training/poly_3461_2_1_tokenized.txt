\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:X0> := <nat:3> ; <var:w> := <var:X0> \end{verbatim} Assuming it to hold that $ <var:C> = <var:m> $ before running the program , it follows that we have $ <var:w> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this code is accomplished by standard Hoare logic . Considering the proceeding piece of code in the list of instructions , \begin{eqnarray} \{ <var:C> = <var:m> \} \, <var:X0> := <nat:3> \, \{ <var:C> = <var:m> \land <var:X0> = <nat:3> \} \end{eqnarray} This is ensured with the variable update rule of Hoare reasoning . Stepping forward , we see \begin{eqnarray} \{ <var:C> = <var:m> \} \, <var:X0> := <nat:3> \, \{ <var:C> = <var:m> \land <var:X0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:C> = <var:m> }} <var:X0> := <nat:3> ; <var:w> := <var:X0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:m> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 