\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:2> ; <var:P> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:e> = <var:E> $ before evaluating the series of instructions , then we see $ <var:P> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:E> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:e> = <var:E> \land <var:j0> = <nat:2> \} \\ <var:P> := <var:j0> \\ \{ <var:e> = <var:E> \land <var:P> = <nat:2> \} \end{eqnarray} Using typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:2> ; <var:P> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:e> = <var:E> }} <def:poly> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 