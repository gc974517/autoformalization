\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:3> ; <var:t> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:H> = <var:x> $ before evaluating this set of commands it follows that we have $ <var:t> = <nat:3> $ after program has finished executing . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:H> = <var:x> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:H> = <var:x> \land <var:h0> = <nat:3> \} \\ <var:t> := <var:h0> \\ \{ <var:H> = <var:x> \land <var:t> = <nat:3> \} \end{eqnarray} Thusly , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:t> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <def:poly> {{ <var:t> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:t> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 