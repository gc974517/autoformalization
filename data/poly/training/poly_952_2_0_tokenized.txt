\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:1> ; <var:K> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:X> = <var:Z> $ given any positive integer coefficients $ <var:Z> $ prior to executing this set of commands , it holds that $ <var:K> = <nat:1> $ after series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:Z> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:X> = <var:Z> \land <var:L0> = <nat:1> \} \\ <var:K> := <var:L0> \\ \{ <var:X> = <var:Z> \land <var:K> = <nat:1> \} \end{eqnarray} Utilizing Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:K> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <def:poly> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 