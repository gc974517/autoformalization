\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:e> \end{verbatim} Assuming that we have $ <var:e> = <var:F> $ before executing the series of commands , it must be that we see $ <var:y> = <nat:4> * <var:F> + <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be seen with Hoare logic . Shifting focus toward the subsequent statement found in our program , we have the code \verb | <var:y> := <nat:4> ; | . This statement transfers the precondition $ \{ <var:e> = <var:F> \} $ into the condition $ \{ <var:e> = <var:F> \land <var:y> = <nat:4> \} $ . This is deduced with the assignment inference rule from usual Hoare techniques . Moving on to the upcoming bit of code seen in our set of commands , we have the variable assignmet line defining $ <nat:2> + <var:y> * <var:e$ as $ <var:y>$ . This redefines the precondition $ \{ <var:e> = <var:F> \land <var:y> = <nat:4> \} $ toward the postcondition $ \{ <var:e> = <var:F> \land <var:y> = <nat:4> * <var:F> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:e> = <var:F> }} <var:y> := <nat:4> ; <var:y> := <nat:2> + <var:y> * <var:e> {{ <var:y> = <nat:4> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:y> = <nat:4> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 