\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:6> ; <var:C1> := <var:C1> * <var:c> ; <var:u> := <var:C1> ; <var:u> := <var:u> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:c> = <var:i> $ given any positive integer coefficients $ <var:i> $ ahead of the evaluation of this program , it follows that we have $ <var:u> = <nat:6> * <var:i> + <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:c> = <var:i> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:c> = <var:i> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:6> ; \\ \{ <var:c> = <var:i> \land <var:C0> = <nat:5> \land <var:C1> = <nat:6> \} \\ <var:C1> := <var:C1> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:C0> = <nat:5> \land <var:C1> = <nat:6> * <var:i> \} \\ <var:u> := <var:C1> ; \\ \{ <var:c> = <var:i> \land <var:C0> = <nat:5> \land <var:u> = <nat:6> * <var:i> \} \\ <var:u> := <var:u> + <var:C0> \\ \{ <var:c> = <var:i> \land <var:u> = <nat:6> * <var:i> + <nat:5> \} \end{eqnarray} As a result , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C1> := <nat:6> ; <var:C1> := <var:C1> * <var:c> ; <var:u> := <var:C1> ; <var:u> := <var:u> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:u> = <nat:6> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:C0> = <nat:5> /\ <var:u> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:u> = <nat:6> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 