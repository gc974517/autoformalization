\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:5> ; <var:d> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assume given all positive integers $ <var:n> $ it to hold that $ <var:B> = <var:n> $ ahead of the evaluation of the list of commands , it must be that we see $ <var:d> = <nat:5> $ when list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:n> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:B> = <var:n> \land <var:W0> = <nat:5> \} \\ <var:d> := <var:W0> \\ \{ <var:B> = <var:n> \land <var:d> = <nat:5> \} \end{eqnarray} Utilizing usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:5> ; <var:d> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:B> = <var:n> }} <def:poly> {{ <var:d> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:d> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 