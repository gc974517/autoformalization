\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:4> ; <var:K> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:U> = <var:C> $ prior to interpreting the series of instructions , it follows that we have $ <var:K> = <nat:4> $ once code is done executing . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions can be done through typical Hoare reasoning . Further , we have \begin{verbatim} { <var:U> = <var:C> } <var:k0> := <nat:4> { <var:U> = <var:C> \land <var:k0> = <nat:4> } { <var:U> = <var:C> \land <var:k0> = <nat:4> } <var:K> := <var:k0{ <var:U> = <var:C> \land <var:K> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:K> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:U> = <var:C> }} <def:poly> {{ <var:K> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:C> /\ <var:K> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 