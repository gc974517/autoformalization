\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:M> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:4> ; <var:Z> := <var:V1> <var:Z> := <var:Z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Given $ <var:M> = <var:B> $ letting positive integers $ <var:B> $ prior to evaluating this set of commands , it must be that we see $ <var:Z> = <nat:4> \times <var:B> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is shown through Hoare techniques . Looking at the next step seen in the segment of code , we have the variable assignmet code assigning $ <var:M> $ toward $ <var:V1>$ . This line advances the condition $ \{ <var:M> = <var:B> \} $ to $ \{ <var:M> = <var:B> \land <var:V1> = <var:B> \} $ . Looking at the proceeding step seen in the code segment , the line giving $ <nat:2> $ toward $ <var:V0>$ . This statement redefines $ \{ <var:M> = <var:B> \land <var:V1> = <var:B> \} $ as the condition $ \{ <var:M> = <var:B> \land <var:V1> = <var:B> \land <var:V0> = <nat:2> \} $ . This is shown by the assignment scheme found in standard Hoare techniques . Moving on , the environment update line assigning $ <var:V1> * <nat:4> $ as $ <var:V1>$ . This statement moves $ \{ <var:M> = <var:B> \land <var:V1> = <var:B> \land <var:V0> = <nat:2> \} $ into the postcondition $ \{ <var:M> = <var:B> \land <var:V1> = <nat:4> \cdot <var:B> \land <var:V0> = <nat:2> \} $ . Jumping to the upcoming command seen in the code , we see the assignment statement \verb | <var:Z> := <var:V1> | . This redefines the condition $ \{ <var:M> = <var:B> \land <var:V1> = <nat:4> \cdot <var:B> \land <var:V0> = <nat:2> \} $ as the postcondition $ \{ <var:M> = <var:B> \land <var:V0> = <nat:2> \land <var:Z> = <nat:4> \cdot <var:B> \} $ . This is known to be sound through the assignment scheme from standard Hoare reasoning . Observing the proceeding command found in the code segment , we have the variable binding line \verb | <var:Z> := <var:Z> + <var:V0> | . This code advances the condition $ \{ <var:M> = <var:B> \land <var:V0> = <nat:2> \land <var:Z> = <nat:4> \cdot <var:B> \} $ as $ \{ <var:M> = <var:B> \land <var:Z> = <nat:4> \cdot <var:B> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:M> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:4> ; <var:Z> := <var:V1> <var:Z> := <var:Z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <def:poly> {{ <var:Z> = <nat:4> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:V1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:V1> = <var:B> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:V1> = <nat:4> * <var:B> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:V0> = <nat:2> /\ <var:Z> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:Z> = <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 