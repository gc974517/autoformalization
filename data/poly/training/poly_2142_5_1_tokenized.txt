\begin{document} \begin{theorem} Consider a series of commands : \begin{verbatim} <var:S1> := <var:T> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:7> ; <var:G> := <var:S1> <var:G> := <var:G> + <var:S0> \end{verbatim} Given it to be that $ <var:T> = <var:i> $ prior to executing this list of commands , it holds that we see $ <var:G> = <nat:7> * <var:i> + <nat:9> $ once set of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:i> \} \\ <var:S1> := <var:T> ; \\ \{ <var:T> = <var:i> \land <var:S1> = <var:i> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:T> = <var:i> \land <var:S1> = <var:i> \land <var:S0> = <nat:9> \} \\ <var:S1> := <var:S1> * <nat:7> ; \\ \{ <var:T> = <var:i> \land <var:S1> = <nat:7> \times <var:i> \land <var:S0> = <nat:9> \} \\ <var:G> := <var:S1> \\ \{ <var:T> = <var:i> \land <var:S0> = <nat:9> \land <var:G> = <nat:7> \times <var:i> \} \\ <var:G> := <var:G> + <var:S0> \\ \{ <var:T> = <var:i> \land <var:G> = <nat:7> \times <var:i> + <nat:9> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:T> = <var:i> }} <var:S1> := <var:T> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:7> ; <var:G> := <var:S1> <var:G> := <var:G> + <var:S0> {{ <var:G> = <nat:7> * <var:i> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:S1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:S1> = <var:i> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:S1> = <nat:7> * <var:i> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:S0> = <nat:9> /\ <var:G> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:G> = <nat:7> * <var:i> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 