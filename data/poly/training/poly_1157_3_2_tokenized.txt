\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:4> + <var:a> * <var:R> ; <var:a> := <nat:3> + <var:a> * <var:R> \end{verbatim} Allowing $ <var:R> = <var:f> $ prior to evaluating the series of instructions , it holds that we see $ <var:a> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:3> $ after set of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for this code is clear by usual Hoare techniques . Moving forward , we have the variable binding code \verb | <var:a> := <nat:1> ; | . This redefines the precondition $ \{ <var:R> = <var:f> \} $ into the postcondition $ \{ <var:R> = <var:f> \land <var:a> = <nat:1> \} $ . Taking a look at the upcoming statement seen in our segment of code , we see the variable binding code defining $ <nat:4> + <var:a> * <var:R> $ to $ <var:a>$ . This command redefines $ \{ <var:R> = <var:f> \land <var:a> = <nat:1> \} $ into the condition $ \{ <var:R> = <var:f> \land <var:a> = <nat:1> \times <var:f> + <nat:4> \} $ . Advancing to the following statement contained in the code segment , we see the variable update statement defining $ <nat:3> + <var:a> * <var:R$ as $ <var:a>$ . This moves $ \{ <var:R> = <var:f> \land <var:a> = <nat:1> \times <var:f> + <nat:4> \} $ as the condition $ \{ <var:R> = <var:f> \land <var:a> = <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:R> = <var:f> }} <var:a> := <nat:1> ; <var:a> := <nat:4> + <var:a> * <var:R> ; <var:a> := <nat:3> + <var:a> * <var:R> {{ <var:a> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:a> = <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:a> = <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 