\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:1> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:b> ; <var:w> := <var:E1> ; <var:w> := <var:w> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Assume it to be that $ <var:b> = <var:f> $ prior to running our series of commands , it must be that we have $ <var:w> = <nat:2> * <var:f> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is demonstrated using typical Hoare logic . Moving on to the proceeding steps contained in our program , \verb | { <var:b> = <var:f> } <var:E0> := <nat:1> { <var:b> = <var:f> \land <var:E0> = <nat:1> } | , \verb | { <var:b> = <var:f> \land <var:E0> = <nat:1> } <var:E1> := <nat:2> { <var:b> = <var:f> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> } | and \verb | { <var:b> = <var:f> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> } <var:E1> := <var:E1> * <var:b> { <var:b> = <var:f> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> * <var:f> } | . Focusing on the proceeding step in our list of instructions , we see \verb | { <var:b> = <var:f> } <var:E0> := <nat:1> { <var:b> = <var:f> \land <var:E0> = <nat:1> } | . This is guaranteed by the environment update scheme obtained from standard Hoare logic . Focusing on the following step seen in the series of instructions , we have \verb | { <var:b> = <var:f> } <var:E0> := <nat:1> { <var:b> = <var:f> \land <var:E0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:b> ; <var:w> := <var:E1> ; <var:w> := <var:w> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <def:poly> {{ <var:w> = <nat:2> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E0> = <nat:1> /\ <var:w> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:w> = <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 