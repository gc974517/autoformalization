\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:1> + <var:y> * <var:w> ; <var:y> := <nat:2> + <var:y> * <var:w> ; <var:y> := <nat:3> + <var:y> * <var:w> ; <var:y> := <nat:3> + <var:y> * <var:w> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Allow that $ <var:w> = <var:W> $ --- for every positive coefficients $ <var:W> $ --- prior to interpreting this series of instructions , then we have $ <var:y> = <nat:3> \times <var:W> ^ <nat:4> + <nat:1> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be shown through standard Hoare reasoning . Moving onward , we see the variable binding command giving $ <nat:3> $ to $ <var:y>$ . This statement transfers the precondition $ \{ <var:w> = <var:W> \} $ toward the postcondition $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \} $ . Shifting focus toward the subsequent line of code seen in our code segment , the variable binding command \verb | <var:y> := <nat:1> + <var:y> * <var:w> ; | . This command takes $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \} $ toward the condition $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> + <nat:1> \} $ . This is ensured by the assignment rule in typical Hoare logic . Going forward , we have the environment update code \verb | <var:y> := <nat:2> + <var:y> * <var:w> ; | . This forwards the condition $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> + <nat:1> \} $ to $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> \} $ . Taking a look at the next step seen in our series of commands , we have the assignment statement giving $ <nat:3> + <var:y> * <var:w> $ toward $ <var:y>$ . This command redefines $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:2> \} $ toward the condition $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:3> \} $ . This is known to be sound using the assignment rule defined in usual Hoare reasoning . Advancing to the subsequent piece of code found in our list of commands , we have the variable binding line letting $ <nat:3> + <var:y> * <var:w$ as $ <var:y>$ . This command forwards $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:3> \} $ into the postcondition $ \{ <var:w> = <var:W> \land <var:y> = <nat:3> \times <var:W> ^ <nat:4> + <nat:1> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:3> \} $ . This is ensured using the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:3> ; <var:y> := <nat:1> + <var:y> * <var:w> ; <var:y> := <nat:2> + <var:y> * <var:w> ; <var:y> := <nat:3> + <var:y> * <var:w> ; <var:y> := <nat:3> + <var:y> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <def:poly> {{ <var:y> = <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:y> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 