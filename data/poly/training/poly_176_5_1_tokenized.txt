\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:Z> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:3> ; <var:X> := <var:F1> <var:X> := <var:X> + <var:F0> \end{verbatim} Assume $ <var:Z> = <var:w> $ before interpreting this list of instructions it holds that we have $ <var:X> = <nat:3> \cdot <var:w> + <nat:7> $ once segment of code has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be demonstrated through standard Hoare reasoning . Following , we see the environment update code giving $ <var:Z> $ as $ <var:F1>$ . This line transfers $ \{ <var:Z> = <var:w> \} $ as the postcondition $ \{ <var:Z> = <var:w> \land <var:F1> = <var:w> \} $ . This is guaranteed with the assignment rule from Hoare reasoning . Now , the variable binding line \verb | <var:F0> := <nat:7> ; | . This statement advances the condition $ \{ <var:Z> = <var:w> \land <var:F1> = <var:w> \} $ into the condition $ \{ <var:Z> = <var:w> \land <var:F1> = <var:w> \land <var:F0> = <nat:7> \} $ . Jumping to the next command in our code segment , we see the assignment line \verb | <var:F1> := <var:F1> * <nat:3> ; | . This moves the precondition $ \{ <var:Z> = <var:w> \land <var:F1> = <var:w> \land <var:F0> = <nat:7> \} $ toward the postcondition $ \{ <var:Z> = <var:w> \land <var:F1> = <nat:3> * <var:w> \land <var:F0> = <nat:7> \} $ . This is rigorously given with the assignment scheme found in standard Hoare logic . After , we have the variable update code binding $ <var:F1$ toward $ <var:X>$ . This code redefines the condition $ \{ <var:Z> = <var:w> \land <var:F1> = <nat:3> * <var:w> \land <var:F0> = <nat:7> \} $ to $ \{ <var:Z> = <var:w> \land <var:F0> = <nat:7> \land <var:X> = <nat:3> * <var:w> \} $ . This is sound through the assignment scheme defined by standard Hoare reasoning . Advancing to the following command found in our code segment , we have the variable update code assigning $ <var:X> + <var:F0$ as $ <var:X>$ . This redefines the precondition $ \{ <var:Z> = <var:w> \land <var:F0> = <nat:7> \land <var:X> = <nat:3> * <var:w> \} $ as the postcondition $ \{ <var:Z> = <var:w> \land <var:X> = <nat:3> * <var:w> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <var:F1> := <var:Z> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:3> ; <var:X> := <var:F1> <var:X> := <var:X> + <var:F0> {{ <var:X> = <nat:3> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:F1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:F1> = <var:w> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:F1> = <nat:3> * <var:w> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:F0> = <nat:7> /\ <var:X> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:X> = <nat:3> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 