\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:O> ; <var:Q> := <var:r1> ; <var:Q> := <var:Q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allow --- given some $ <var:Z> $ --- that we have $ <var:O> = <var:Z> $ before running this set of instructions it holds that we have $ <var:Q> = <nat:3> \times <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment is evident with typical Hoare techniques . Looking at the next bits of codefound in the list of commands , we see \begin{eqnarray} \{ <var:O> = <var:Z> \} \, <var:r0> := <nat:7> \, \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \} \\ \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \} \, <var:r1> := <nat:3> \, \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:3> \} \\ \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:3> \} \, <var:r1> := <var:r1> * <var:O> \, \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:3> \times <var:Z> \} \\ \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \land <var:r1> = <nat:3> \times <var:Z> \} \, <var:Q> := <var:r1> \, \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \land <var:Q> = <nat:3> \times <var:Z> \} \end{eqnarray} Jumping to the subsequent bit of code seen in the segment of code , we have \begin{eqnarray} \{ <var:O> = <var:Z> \} \, <var:r0> := <nat:7> \, \{ <var:O> = <var:Z> \land <var:r0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:O> ; <var:Q> := <var:r1> ; <var:Q> := <var:Q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:O> = <var:Z> }} <def:poly> {{ <var:Q> = <nat:3> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:r0> = <nat:7> /\ <var:Q> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:Q> = <nat:3> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 