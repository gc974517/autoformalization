\begin{document} \begin{theorem} We define a set of commands such that \begin{verbatim} <var:I1> := <var:K> ; <var:I2> := <var:I1> * <var:K> ; <var:I3> := <var:I2> * <var:K> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:7> ; <var:I2> := <var:I2> * <nat:8> ; <var:I3> := <var:I3> * <nat:2> ; <var:C> := <var:I3> <var:C> := <var:C> + <var:I2> <var:C> := <var:C> + <var:I1> <var:C> := <var:C> + <var:I0> \end{verbatim} Assume that we have $ <var:K> = <var:F> $ , given some positive integers $ <var:F> $ , before running this list of commands , it follows that we have $ <var:C> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:8> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> + <nat:8> $ when set of commands exits . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:K> = <var:F> \} \\ <var:I1> := <var:K> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <var:F> \} \\ <var:I2> := <var:I1> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I3> = <var:F> ^ <nat:3> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I3> = <var:F> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:I1> := <var:I1> * <nat:7> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <nat:7> \cdot <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I3> = <var:F> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:I2> := <var:I2> * <nat:8> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <nat:7> \cdot <var:F> \land <var:I2> = <nat:8> \cdot <var:F> ^ <nat:2> \land <var:I3> = <var:F> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:I3> := <var:I3> * <nat:2> ; \\ \{ <var:K> = <var:F> \land <var:I1> = <nat:7> \cdot <var:F> \land <var:I2> = <nat:8> \cdot <var:F> ^ <nat:2> \land <var:I3> = <nat:2> \cdot <var:F> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:C> := <var:I3> \\ \{ <var:K> = <var:F> \land <var:I1> = <nat:7> \cdot <var:F> \land <var:I2> = <nat:8> \cdot <var:F> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:C> = <nat:2> \cdot <var:F> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:I2> \\ \{ <var:K> = <var:F> \land <var:I1> = <nat:7> \cdot <var:F> \land <var:I0> = <nat:8> \land <var:C> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:8> \cdot <var:F> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:I1> \\ \{ <var:K> = <var:F> \land <var:I0> = <nat:8> \land <var:C> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:8> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> \} \\ <var:C> := <var:C> + <var:I0> \\ \{ <var:K> = <var:F> \land <var:C> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:8> \cdot <var:F> ^ <nat:2> + <nat:7> \cdot <var:F> + <nat:8> \} \end{eqnarray} Considering the above , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:K> = <var:F> }} <var:I1> := <var:K> ; <var:I2> := <var:I1> * <var:K> ; <var:I3> := <var:I2> * <var:K> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:7> ; <var:I2> := <var:I2> * <nat:8> ; <var:I3> := <var:I3> * <nat:2> ; <var:C> := <var:I3> <var:C> := <var:C> + <var:I2> <var:C> := <var:C> + <var:I1> <var:C> := <var:C> + <var:I0> {{ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:8> * <var:F> ^ <nat:2> + <nat:7> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I3> = <var:F> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <nat:7> * <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I3> = <var:F> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <nat:7> * <var:F> /\ <var:I2> = <nat:8> * <var:F> ^ <nat:2> /\ <var:I3> = <var:F> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <nat:7> * <var:F> /\ <var:I2> = <nat:8> * <var:F> ^ <nat:2> /\ <var:I3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <nat:7> * <var:F> /\ <var:I2> = <nat:8> * <var:F> ^ <nat:2> /\ <var:I0> = <nat:8> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I1> = <nat:7> * <var:F> /\ <var:I0> = <nat:8> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:8> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:I0> = <nat:8> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:8> * <var:F> ^ <nat:2> + <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:8> * <var:F> ^ <nat:2> + <nat:7> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 