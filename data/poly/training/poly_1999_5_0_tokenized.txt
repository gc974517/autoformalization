\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:k> ; <var:A> := <var:j1> ; <var:A> := <var:A> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:k> = <var:a> $ ahead of executing the list of commands it follows that we see $ <var:A> = <nat:8> \times <var:a> + <nat:4> $ after list of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the series of instructions can be shown with this decorated segment of code . \begin{eqnarray} \{ <var:k> = <var:a> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:k> = <var:a> \land <var:j0> = <nat:4> \} \end{eqnarray} Advancing executing the code segment gives us : \begin{eqnarray} <var:j1> := <nat:8> ; \\ \{ <var:k> = <var:a> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> \} \\ <var:j1> := <var:j1> * <var:k> ; \\ \{ <var:k> = <var:a> \land <var:j0> = <nat:4> \land <var:j1> = <nat:8> \cdot <var:a> \} \\ <var:A> := <var:j1> ; \\ \{ <var:k> = <var:a> \land <var:j0> = <nat:4> \land <var:A> = <nat:8> \cdot <var:a> \} \\ <var:A> := <var:A> + <var:j0> \\ \{ <var:k> = <var:a> \land <var:A> = <nat:8> \cdot <var:a> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:j1> := <nat:8> ; <var:j1> := <var:j1> * <var:k> ; <var:A> := <var:j1> ; <var:A> := <var:A> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:k> = <var:a> }} <def:poly> {{ <var:A> = <nat:8> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:j0> = <nat:4> /\ <var:A> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:A> = <nat:8> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 