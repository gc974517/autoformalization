\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:s> ; <var:k> := <var:b1> ; <var:k> := <var:k> + <var:b0> \end{verbatim} Given it to hold that $ <var:s> = <var:A> $ ahead of evaluating the segment of code it holds that we see $ <var:k> = <nat:8> \times <var:A> + <nat:4> $ after set of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:A> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:s> = <var:A> \land <var:b0> = <nat:4> \} \\ <var:b1> := <nat:8> ; \\ \{ <var:s> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \} \\ <var:b1> := <var:b1> * <var:s> ; \\ \{ <var:s> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> * <var:A> \} \\ <var:k> := <var:b1> ; \\ \{ <var:s> = <var:A> \land <var:b0> = <nat:4> \land <var:k> = <nat:8> * <var:A> \} \\ <var:k> := <var:k> + <var:b0> \\ \{ <var:s> = <var:A> \land <var:k> = <nat:8> * <var:A> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:s> = <var:A> }} <var:b0> := <nat:4> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:s> ; <var:k> := <var:b1> ; <var:k> := <var:k> + <var:b0> {{ <var:k> = <nat:8> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:b0> = <nat:4> /\ <var:k> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:k> = <nat:8> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 