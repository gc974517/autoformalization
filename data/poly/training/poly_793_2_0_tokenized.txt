\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:S0> := <nat:4> ; <var:x> := <var:S0> \end{verbatim} Assuming it to hold that $ <var:D> = <var:P> $ , letting $ <var:P> \in \mathbb{N} $ , before interpreting our code segment it must be that we have $ <var:x> = <nat:4> $ when set of instructions is done executing . \end{theorem} \begin{proof} We can see that the following decorated list of commands . \begin{eqnarray} \{ <var:D> = <var:P> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:D> = <var:P> \land <var:S0> = <nat:4> \} \\ <var:x> := <var:S0> \\ \{ <var:D> = <var:P> \land <var:x> = <nat:4> \} \end{eqnarray} Applying standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:S0> := <nat:4> ; <var:x> := <var:S0> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 