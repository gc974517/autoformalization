\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:t> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:t> ; <var:L2> := <var:L2> * <var:t> ; <var:x> := <var:L2> ; <var:x> := <var:x> + <var:L1> ; <var:x> := <var:x> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Given it to hold that $ <var:t> = <var:M> $ before executing this list of commands then we see $ <var:x> = <nat:4> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:7> $ when set of instructions is done . \end{theorem} \begin{proof} The argument for the list of instructions can be done through Hoare techniques . Going forward , we have the code \verb | <var:L0> := <nat:7> ; | . This statement moves the precondition $ \{ <var:t> = <var:M> \} $ toward the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \} $ . Going to the next step , the variable update code \verb | <var:L1> := <nat:7> ; | . This statement moves the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \} $ toward the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> \} $ . Focusing on the next line contained in our series of commands , we see the assignment command letting $ <var:L1> * <var:t> $ to $ <var:L1>$ . This line redefines $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> \} $ toward $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \} $ . This is ensured through the assignment rule found in typical Hoare logic . Moving on to the next bit of code seen in our set of instructions , we see the variable binding command binding $ <nat:4> $ toward $ <var:L2>$ . This statement advances the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \} $ to the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> \} $ . Keeping momentum , we have the environment update code assigning $ <var:L2> * <var:t> $ to $ <var:L2>$ . This redefines $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> \} $ as the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> * <var:M> \} $ . Looking at the next line contained in our program , we see the binding code \verb | <var:L2> := <var:L2> * <var:t> ; | . This redefines the precondition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> * <var:M> \} $ into the postcondition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> * <var:M> ^ <nat:2> \} $ . This is guaranteed through the assignment rule given in standard Hoare logic . Focusing on the subsequent piece of code found in our series of instructions , the variable update statement defining $ <var:L2> $ to $ <var:x>$ . This statement moves $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:L2> = <nat:4> * <var:M> ^ <nat:2> \} $ toward the postcondition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:x> = <nat:4> * <var:M> ^ <nat:2> \} $ . This is deduced by the assignment rule obtained from Hoare logic . Going to the next step , the binding code \verb | <var:x> := <var:x> + <var:L1> ; | . This line takes the precondition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:L1> = <nat:7> * <var:M> \land <var:x> = <nat:4> * <var:M> ^ <nat:2> \} $ into the postcondition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> \} $ . This is ensured by the assignment scheme given by usual Hoare logic . Moving forward , we have the assignment command \verb | <var:x> := <var:x> + <var:L0> | . This line moves the condition $ \{ <var:t> = <var:M> \land <var:L0> = <nat:7> \land <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> \} $ into the postcondition $ \{ <var:t> = <var:M> \land <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:t> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:t> ; <var:L2> := <var:L2> * <var:t> ; <var:x> := <var:L2> ; <var:x> := <var:x> + <var:L1> ; <var:x> := <var:x> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:t> = <var:M> }} <def:poly> {{ <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> * <var:M> /\ <var:L2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> * <var:M> /\ <var:L2> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> * <var:M> /\ <var:L2> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:7> * <var:M> /\ <var:x> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:L0> = <nat:7> /\ <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:x> = <nat:4> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 