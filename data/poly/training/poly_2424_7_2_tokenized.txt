\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:h> ; <var:I> := <nat:4> + <var:I> * <var:h> ; <var:I> := <nat:2> + <var:I> * <var:h> ; <var:I> := <nat:3> + <var:I> * <var:h> ; <var:I> := <nat:3> + <var:I> * <var:h> ; <var:I> := <nat:1> + <var:I> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given some natural coefficients $ <var:m> $ --- $ <var:h> = <var:m> $ prior to running this set of instructions it follows that we see $ <var:I> = <nat:4> \times <var:m> ^ <nat:6> + <nat:2> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> $ after series of commands is done . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:m> \} \\ <var:I> := <nat:4> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \} \\ <var:I> := <nat:2> + <var:I> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> + <nat:2> \} \\ <var:I> := <nat:4> + <var:I> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:4> \} \\ <var:I> := <nat:2> + <var:I> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:2> \} \\ <var:I> := <nat:3> + <var:I> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:3> \} \\ <var:I> := <nat:3> + <var:I> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> ^ <nat:5> + <nat:2> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:3> \} \\ <var:I> := <nat:1> + <var:I> * <var:h> \\ \{ <var:h> = <var:m> \land <var:I> = <nat:4> \times <var:m> ^ <nat:6> + <nat:2> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> \} \end{eqnarray} Given the above , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:h> ; <var:I> := <nat:4> + <var:I> * <var:h> ; <var:I> := <nat:2> + <var:I> * <var:h> ; <var:I> := <nat:3> + <var:I> * <var:h> ; <var:I> := <nat:3> + <var:I> * <var:h> ; <var:I> := <nat:1> + <var:I> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <def:poly> {{ <var:I> = <nat:4> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:I> = <nat:4> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 