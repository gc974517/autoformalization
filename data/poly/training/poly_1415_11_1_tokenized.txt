\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:M1> := <var:j> ; <var:M2> := <var:M1> * <var:j> ; <var:M3> := <var:M2> * <var:j> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:8> ; <var:Z> := <var:M3> <var:Z> := <var:Z> + <var:M2> <var:Z> := <var:Z> + <var:M1> <var:Z> := <var:Z> + <var:M0> \end{verbatim} Allowing ( letting positive numbers $ <var:w> $ ) that $ <var:j> = <var:w> $ ahead of executing this set of instructions , it holds that we see $ <var:Z> = <nat:8> \cdot <var:w> ^ <nat:3> + <nat:5> \cdot <var:w> ^ <nat:2> + <nat:5> \cdot <var:w> + <nat:9> $ . \end{theorem} \begin{proof} The proof of our code can be seen by typical Hoare logic . Advancing on , we have \begin{verbatim} { <var:j> = <var:w> } <var:M1> := <var:j> { <var:j> = <var:w> \land <var:M1> = <var:w> } { <var:j> = <var:w> \land <var:M1> = <var:w> } <var:M2> := <var:M1> * <var:j> { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> } { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> } <var:M3> := <var:M2> * <var:j> { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> } { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> } <var:M0> := <nat:9> { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } <var:M1> := <var:M1> * <nat:5> { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } <var:M2> := <var:M2> * <nat:5> { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } <var:M3> := <var:M3> * <nat:8> { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M3> = <nat:8> * <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M3> = <nat:8> * <var:w> ^ <nat:3> \land <var:M0> = <nat:9> } <var:Z> := <var:M3{ <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M0> = <nat:9> \land <var:Z> = <nat:8> * <var:w> ^ <nat:3> } { <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M2> = <nat:5> * <var:w> ^ <nat:2> \land <var:M0> = <nat:9> \land <var:Z> = <nat:8> * <var:w> ^ <nat:3> } <var:Z> := <var:Z> + <var:M2{ <var:j> = <var:w> \land <var:M1> = <nat:5> * <var:w> \land <var:M0> = <nat:9> \land <var:Z> = <nat:8> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> } \end{verbatim} This is given by the environment update scheme defined by Hoare reasoning . Following , \begin{verbatim} { <var:j> = <var:w> } <var:M1> := <var:j> { <var:j> = <var:w> \land <var:M1> = <var:w> } { <var:j> = <var:w> \land <var:M1> = <var:w> } <var:M2> := <var:M1> * <var:j> { <var:j> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:j> = <var:w> }} <var:M1> := <var:j> ; <var:M2> := <var:M1> * <var:j> ; <var:M3> := <var:M2> * <var:j> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:8> ; <var:Z> := <var:M3> <var:Z> := <var:Z> + <var:M2> <var:Z> := <var:Z> + <var:M1> <var:Z> := <var:Z> + <var:M0> {{ <var:Z> = <nat:8> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <nat:5> * <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <nat:5> * <var:w> /\ <var:M2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <nat:5> * <var:w> /\ <var:M2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:w> ^ <nat:3> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <nat:5> * <var:w> /\ <var:M2> = <nat:5> * <var:w> ^ <nat:2> /\ <var:M0> = <nat:9> /\ <var:Z> = <nat:8> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M1> = <nat:5> * <var:w> /\ <var:M0> = <nat:9> /\ <var:Z> = <nat:8> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:M0> = <nat:9> /\ <var:Z> = <nat:8> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:Z> = <nat:8> * <var:w> ^ <nat:3> + <nat:5> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 