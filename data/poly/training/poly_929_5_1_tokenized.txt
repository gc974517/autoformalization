\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:O> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:T> := <var:Q1> <var:T> := <var:T> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:O> = <var:l> $ for positive numbers $ <var:l> $ prior to the execution of the code segment it must be that we see $ <var:T> = <nat:1> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:O> = <var:l> \} \\ <var:Q1> := <var:O> ; \\ \{ <var:O> = <var:l> \land <var:Q1> = <var:l> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:O> = <var:l> \land <var:Q1> = <var:l> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:1> ; \\ \{ <var:O> = <var:l> \land <var:Q1> = <nat:1> * <var:l> \land <var:Q0> = <nat:4> \} \\ <var:T> := <var:Q1> \\ \{ <var:O> = <var:l> \land <var:Q0> = <nat:4> \land <var:T> = <nat:1> * <var:l> \} \\ <var:T> := <var:T> + <var:Q0> \\ \{ <var:O> = <var:l> \land <var:T> = <nat:1> * <var:l> + <nat:4> \} \end{eqnarray} Thusly , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:O> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:T> := <var:Q1> <var:T> := <var:T> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:O> = <var:l> }} <def:poly> {{ <var:T> = <nat:1> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:Q1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:Q1> = <var:l> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:Q1> = <nat:1> * <var:l> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:Q0> = <nat:4> /\ <var:T> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:T> = <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 