\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:6> ; <var:l2> := <nat:5> ; <var:l2> := <var:l2> * <var:K> ; <var:l2> := <var:l2> * <var:K> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:e> := <var:l3> ; <var:e> := <var:e> + <var:l2> ; <var:e> := <var:e> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Assume it to be that $ <var:K> = <var:t> $ before running this set of instructions , it follows that we have $ <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the code segment can be seen using Hoare logic . Moving on , we see the environment update code \verb | <var:l0> := <nat:6> ; | . This command takes the condition $ \{ <var:K> = <var:t> \} $ into $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \} $ . This is rigorously given by the assignment inference rule given in standard Hoare logic . Considering the upcoming step contained in our set of instructions , we have the statement assigning $ <nat:5> $ as $ <var:l2>$ . This takes the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \} $ into the postcondition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> \} $ . Looking at the upcoming command in the code , the environment update line \verb | <var:l2> := <var:l2> * <var:K> ; | . This redefines the precondition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> \} $ as the postcondition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> \} $ . Paying attention to the proceeding piece of code found in our list of instructions , we have the environment update statement yielding $ <var:l2> * <var:K> $ toward $ <var:l2>$ . This forwards $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> \} $ toward the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \} $ . Immediately following , the environment update code yielding $ <nat:6> $ toward $ <var:l3>$ . This takes $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \} $ to $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> \} $ . This is rigorously given by the assignment scheme given by Hoare techniques . Advancing to the next step , the binding line yielding $ <var:l3> * <var:K> $ as $ <var:l3>$ . This forwards $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> \} $ into the postcondition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> \} $ . This is ensured using the assignment rule in typical Hoare logic . Advancing , we have the variable binding command assigning $ <var:l3> * <var:K> $ toward $ <var:l3>$ . This takes the precondition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> \} $ as the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> ^ <nat:2> \} $ . This is known to be sound by the assignment rule defined by usual Hoare techniques . Shifting focus toward the upcoming command seen in the set of commands , we have the statement \verb | <var:l3> := <var:l3> * <var:K> ; | . This redefines $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> ^ <nat:2> \} $ to the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> ^ <nat:3> \} $ . Moving on to the next step , the binding command \verb | <var:e> := <var:l3> ; | . This forwards the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:l3> = <nat:6> * <var:t> ^ <nat:3> \} $ as the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:e> = <nat:6> * <var:t> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law defined in Hoare reasoning . Moving on to the next step , we see the environment update statement \verb | <var:e> := <var:e> + <var:l2> ; | . This forwards $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:l2> = <nat:5> * <var:t> ^ <nat:2> \land <var:e> = <nat:6> * <var:t> ^ <nat:3> \} $ to the condition $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> \} $ . Further , the variable update line \verb | <var:e> := <var:e> + <var:l0> | . This statement redefines $ \{ <var:K> = <var:t> \land <var:l0> = <nat:6> \land <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> \} $ as $ \{ <var:K> = <var:t> \land <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> \} $ . This is ensured with the assignment rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:l2> := <nat:5> ; <var:l2> := <var:l2> * <var:K> ; <var:l2> := <var:l2> * <var:K> ; <var:l3> := <nat:6> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:e> := <var:l3> ; <var:e> := <var:e> + <var:l2> ; <var:e> := <var:e> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:K> = <var:t> }} <def:poly> {{ <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:l2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:e> = <nat:6> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:l0> = <nat:6> /\ <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:t> /\ <var:e> = <nat:6> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 