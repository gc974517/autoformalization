\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:n> ; <var:s> := <var:i1> ; <var:s> := <var:s> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:n> = <var:l> $ prior to evaluating this list of instructions , it must be that $ <var:s> = <nat:4> \times <var:l> + <nat:7> $ once series of instructions is done . \end{theorem} \begin{proof} The course of logic for this program can be accomplished using typical Hoare reasoning . Advancing to the subsequent pieces of code found in our series of commands , we see \begin{verbatim} { <var:n> = <var:l> } <var:i0> := <nat:7> { <var:n> = <var:l> \land <var:i0> = <nat:7> } { <var:n> = <var:l> \land <var:i0> = <nat:7> } <var:i1> := <nat:4> { <var:n> = <var:l> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> } { <var:n> = <var:l> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> } <var:i1> := <var:i1> * <var:n> { <var:n> = <var:l> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \cdot <var:l> } { <var:n> = <var:l> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \cdot <var:l> } <var:s> := <var:i1> { <var:n> = <var:l> \land <var:i0> = <nat:7> \land <var:s> = <nat:4> \cdot <var:l> } \end{verbatim} This is known to be sound with the environment update scheme found in Hoare reasoning . Advancing on , \begin{verbatim} { <var:n> = <var:l> } <var:i0> := <nat:7> { <var:n> = <var:l> \land <var:i0> = <nat:7> } \end{verbatim} This is guaranteed with the variable assignmet inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:n> ; <var:s> := <var:i1> ; <var:s> := <var:s> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <def:poly> {{ <var:s> = <nat:4> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:i0> = <nat:7> /\ <var:s> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:s> = <nat:4> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 