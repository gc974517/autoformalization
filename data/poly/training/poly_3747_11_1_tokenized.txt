\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:b> ; <var:u2> := <var:u1> * <var:b> ; <var:u3> := <var:u2> * <var:b> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:M> := <var:u3> <var:M> := <var:M> + <var:u2> <var:M> := <var:M> + <var:u1> <var:M> := <var:M> + <var:u0> \end{verbatim} Allow it to be that $ <var:b> = <var:s> $ prior to the evaluation of this series of commands it follows that we see $ <var:M> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:9> \cdot <var:s> + <nat:6> $ after list of commands executes . \end{theorem} \begin{proof} Let this decorated list of commands . \begin{eqnarray} \{ <var:b> = <var:s> \} \\ <var:u1> := <var:b> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <var:s> \} \\ <var:u2> := <var:u1> * <var:b> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:b> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \} \\ <var:u0> := <nat:6> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \land <var:u0> = <nat:6> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <nat:9> \times <var:s> \land <var:u2> = <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \land <var:u0> = <nat:6> \} \\ <var:u2> := <var:u2> * <nat:9> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <nat:9> \times <var:s> \land <var:u2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:u3> = <var:s> ^ <nat:3> \land <var:u0> = <nat:6> \} \\ <var:u3> := <var:u3> * <nat:2> ; \\ \{ <var:b> = <var:s> \land <var:u1> = <nat:9> \times <var:s> \land <var:u2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:s> ^ <nat:3> \land <var:u0> = <nat:6> \} \\ <var:M> := <var:u3> \\ \{ <var:b> = <var:s> \land <var:u1> = <nat:9> \times <var:s> \land <var:u2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:u0> = <nat:6> \land <var:M> = <nat:2> \times <var:s> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:u2> \\ \{ <var:b> = <var:s> \land <var:u1> = <nat:9> \times <var:s> \land <var:u0> = <nat:6> \land <var:M> = <nat:2> \times <var:s> ^ <nat:3> + <nat:9> \times <var:s> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:u1> \\ \{ <var:b> = <var:s> \land <var:u0> = <nat:6> \land <var:M> = <nat:2> \times <var:s> ^ <nat:3> + <nat:9> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} \\ <var:M> := <var:M> + <var:u0> \\ \{ <var:b> = <var:s> \land <var:M> = <nat:2> \times <var:s> ^ <nat:3> + <nat:9> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:6> \} \end{eqnarray} The application of typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:b> = <var:s> }} <var:u1> := <var:b> ; <var:u2> := <var:u1> * <var:b> ; <var:u3> := <var:u2> * <var:b> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:M> := <var:u3> <var:M> := <var:M> + <var:u2> <var:M> := <var:M> + <var:u1> <var:M> := <var:M> + <var:u0> {{ <var:M> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <nat:9> * <var:s> /\ <var:u2> = <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <nat:9> * <var:s> /\ <var:u2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:u3> = <var:s> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <nat:9> * <var:s> /\ <var:u2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:s> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <nat:9> * <var:s> /\ <var:u2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:u0> = <nat:6> /\ <var:M> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u1> = <nat:9> * <var:s> /\ <var:u0> = <nat:6> /\ <var:M> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:u0> = <nat:6> /\ <var:M> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:M> = <nat:2> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 