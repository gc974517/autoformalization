\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:v> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:v> ; <var:q2> := <var:q2> * <var:v> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> \end{verbatim} Given --- with some natural numbers $ <var:Y> $ --- that we have $ <var:v> = <var:Y> $ prior to running this series of instructions , then we see $ <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions is demonstrated by typical Hoare logic . Next , we have the variable assignmet command yielding $ <nat:2> $ into $ <var:q0>$ . This forwards the condition $ \{ <var:v> = <var:Y> \} $ as the postcondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \} $ . This is known to be sound by the assignment rule defined in usual Hoare logic . Moving forward , we have the command \verb | <var:q1> := <nat:2> ; | . This redefines the precondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \} $ into the postcondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \} $ . This is known to be sound with the assignment rule found in usual Hoare reasoning . Moving forward to the following command seen in the list of commands , we have the command yielding $ <var:q1> * <var:v> $ to $ <var:q1>$ . This statement takes the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \} $ toward the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \} $ . Advancing to the next step , we see the variable update statement letting $ <nat:1> $ as $ <var:q2>$ . This line transfers the precondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \} $ toward the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \} $ . This is rigorously given using the assignment law in standard Hoare techniques . Focusing on the following command contained in our segment of code , the variable update line \verb | <var:q2> := <var:q2> * <var:v> ; | . This takes the precondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \} $ to the postcondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \cdot <var:Y> \} $ . This is sound using the assignment law given in standard Hoare reasoning . Going forward , the assignment command \verb | <var:q2> := <var:q2> * <var:v> ; | . This code advances the precondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \cdot <var:Y> \} $ into the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \cdot <var:Y> ^ <nat:2> \} $ . This is given using the assignment law of typical Hoare logic . Taking another step toward the subsequent piece of code found in our set of instructions , we have the binding statement \verb | <var:K> := <var:q2> ; | . This redefines the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:q2> = <nat:1> \cdot <var:Y> ^ <nat:2> \} $ into $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:K> = <nat:1> \cdot <var:Y> ^ <nat:2> \} $ . Going forward , we have the environment update statement yielding $ <var:K> + <var:q1> $ toward $ <var:K>$ . This moves the condition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:q1> = <nat:2> \cdot <var:Y> \land <var:K> = <nat:1> \cdot <var:Y> ^ <nat:2> \} $ to $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:K> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} $ . This is shown to be logically sound using the assignment rule obtained from standard Hoare logic . After , we see the variable assignmet statement \verb | <var:K> := <var:K> + <var:q0> | . This forwards the precondition $ \{ <var:v> = <var:Y> \land <var:q0> = <nat:2> \land <var:K> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} $ to $ \{ <var:v> = <var:Y> \land <var:K> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} $ . This is rigorously given by the assignment inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:v> = <var:Y> }} <var:q0> := <nat:2> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:v> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:v> ; <var:q2> := <var:q2> * <var:v> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> {{ <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:Y> /\ <var:q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:Y> /\ <var:q2> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:Y> /\ <var:q2> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:2> * <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:q0> = <nat:2> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Y> /\ <var:K> = <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 