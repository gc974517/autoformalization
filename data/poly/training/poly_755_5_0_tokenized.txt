\begin{document} \begin{theorem} Define the following series of instructions as follows \begin{verbatim} <var:N0> := <nat:6> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:j> ; <var:F> := <var:N1> ; <var:F> := <var:F> + <var:N0> \end{verbatim} Allowing that $ <var:j> = <var:o> $ ahead of interpreting this set of instructions it follows that $ <var:F> = <nat:1> \cdot <var:o> + <nat:6> $ after segment of code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:o> \} \\ <var:N0> := <nat:6> ; \\ \{ <var:j> = <var:o> \land <var:N0> = <nat:6> \} \\ <var:N1> := <nat:1> ; \\ \{ <var:j> = <var:o> \land <var:N0> = <nat:6> \land <var:N1> = <nat:1> \} \\ <var:N1> := <var:N1> * <var:j> ; \\ \{ <var:j> = <var:o> \land <var:N0> = <nat:6> \land <var:N1> = <nat:1> \cdot <var:o> \} \\ <var:F> := <var:N1> ; \\ \{ <var:j> = <var:o> \land <var:N0> = <nat:6> \land <var:F> = <nat:1> \cdot <var:o> \} \\ <var:F> := <var:F> + <var:N0> \\ \{ <var:j> = <var:o> \land <var:F> = <nat:1> \cdot <var:o> + <nat:6> \} \end{eqnarray} The application of usual Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:j> = <var:o> }} <var:N0> := <nat:6> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:j> ; <var:F> := <var:N1> ; <var:F> := <var:F> + <var:N0> {{ <var:F> = <nat:1> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:N0> = <nat:6> /\ <var:F> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:F> = <nat:1> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 