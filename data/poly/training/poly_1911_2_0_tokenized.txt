\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:1> ; <var:p> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing it to hold that $ <var:V> = <var:g> $ for every $ <var:g> \in \mathbb{N} $ before running our set of instructions it holds that we have $ <var:p> = <nat:1> $ . \end{theorem} \begin{proof} See that the following decorated code . \begin{eqnarray} \{ <var:V> = <var:g> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:V> = <var:g> \land <var:y0> = <nat:1> \} \\ <var:p> := <var:y0> \\ \{ <var:V> = <var:g> \land <var:p> = <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:p> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:V> = <var:g> }} <def:poly> {{ <var:p> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:g> /\ <var:p> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 