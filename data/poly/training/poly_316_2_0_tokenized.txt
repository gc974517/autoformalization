\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:3> ; <var:b> := <var:n0> \end{verbatim} Assume it to hold that $ <var:Z> = <var:g> $ given some natural numbers $ <var:g> $ ahead of the evaluation of our program , it must be that we have $ <var:b> = <nat:3> $ after code segment finishes . \end{theorem} \begin{proof} Proving correctness for our list of instructions is done using usual Hoare techniques . Moving on , we see \begin{eqnarray} \{ <var:Z> = <var:g> \} \, <var:n0> := <nat:3> \, \{ <var:Z> = <var:g> \land <var:n0> = <nat:3> \} \end{eqnarray} This is known to be sound through the variable update rule defined in standard Hoare reasoning . Jumping to the next step in our list of commands , we see \begin{eqnarray} \{ <var:Z> = <var:g> \} \, <var:n0> := <nat:3> \, \{ <var:Z> = <var:g> \land <var:n0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Z> = <var:g> }} <var:n0> := <nat:3> ; <var:b> := <var:n0> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 