\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:3> ; <var:q> := <var:D0> \end{verbatim} Given for positive coefficients $ <var:p> $ it to be that $ <var:W> = <var:p> $ prior to the execution of our series of commands , then $ <var:q> = <nat:3> $ . \end{theorem} \begin{proof} The argument for the set of instructions is demonstrated using Hoare reasoning . Looking at the next lines of codeseen in the set of instructions , \begin{eqnarray} \{ <var:W> = <var:p> \} \, <var:D0> := <nat:3> \, \{ <var:W> = <var:p> \land <var:D0> = <nat:3> \} \\ \{ <var:W> = <var:p> \land <var:D0> = <nat:3> \} \, <var:q> := <var:D0\, \{ <var:W> = <var:p> \land <var:q> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:W> = <var:p> }} <var:D0> := <nat:3> ; <var:q> := <var:D0> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:p> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 