\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:N> ; <var:Y2> := <nat:2> ; <var:Y2> := <var:Y2> * <var:N> ; <var:Y2> := <var:Y2> * <var:N> ; <var:P> := <var:Y2> ; <var:P> := <var:P> + <var:Y1> ; <var:P> := <var:P> + <var:Y0> \end{verbatim} Allow that $ <var:N> = <var:F> $ before evaluating this set of commands , then we have $ <var:P> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:5> \cdot <var:F> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this code can be done using typical Hoare techniques . Immediately after , we have the assignment statement \verb | <var:Y0> := <nat:8> ; | . This code redefines the precondition $ \{ <var:N> = <var:F> \} $ toward the postcondition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \} $ . Going forward , the variable binding line \verb | <var:Y1> := <nat:5> ; | . This takes $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \} $ toward $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \} $ . After , we have the statement assigning $ <var:Y1> * <var:N> $ as $ <var:Y1>$ . This line redefines $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \} $ toward $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \} $ . Moving forward , we see the assignment statement yielding $ <nat:2> $ as $ <var:Y2>$ . This line redefines $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \} $ to $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> \} $ . This is shown using the assignment scheme defined in Hoare reasoning . Focusing on the following line found in our segment of code , we have the variable assignmet code assigning $ <var:Y2> * <var:N> $ into $ <var:Y2>$ . This forwards the condition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> \} $ as the condition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> * <var:F> \} $ . Now , we have the binding statement giving $ <var:Y2> * <var:N> $ toward $ <var:Y2>$ . This takes the condition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> * <var:F> \} $ to $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> * <var:F> ^ <nat:2> \} $ . Going forward , we have the variable assignmet code assigning $ <var:Y2> $ to $ <var:P>$ . This line redefines the precondition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:Y2> = <nat:2> * <var:F> ^ <nat:2> \} $ to the postcondition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:P> = <nat:2> * <var:F> ^ <nat:2> \} $ . Considering the next line seen in the series of instructions , we have the variable assignmet line \verb | <var:P> := <var:P> + <var:Y1> ; | . This line redefines the condition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:F> \land <var:P> = <nat:2> * <var:F> ^ <nat:2> \} $ as $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> \} $ . Moving forward , the variable binding line defining $ <var:P> + <var:Y0$ into $ <var:P>$ . This advances the condition $ \{ <var:N> = <var:F> \land <var:Y0> = <nat:8> \land <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> \} $ toward $ \{ <var:N> = <var:F> \land <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:8> \} $ . This is known to be sound by the assignment inference rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:N> = <var:F> }} <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:N> ; <var:Y2> := <nat:2> ; <var:Y2> := <var:Y2> * <var:N> ; <var:Y2> := <var:Y2> * <var:N> ; <var:P> := <var:Y2> ; <var:P> := <var:P> + <var:Y1> ; <var:P> := <var:P> + <var:Y0> {{ <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:F> /\ <var:Y2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:F> /\ <var:Y2> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:F> /\ <var:Y2> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:F> /\ <var:P> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y0> = <nat:8> /\ <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:P> = <nat:2> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 