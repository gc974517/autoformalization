\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:L0> := <nat:6> ; <var:F> := <var:L0> \end{verbatim} Allowing $ <var:f> = <var:V> $ before running our list of commands it must be that we have $ <var:F> = <nat:6> $ . \end{theorem} \begin{proof} The proof of the set of instructions is given using typical Hoare logic . Moving on to the next step , we see the variable update code yielding $ <nat:6> $ toward $ <var:L0>$ . This command transfers the condition $ \{ <var:f> = <var:V> \} $ into the condition $ \{ <var:f> = <var:V> \land <var:L0> = <nat:6> \} $ . Considering the next statement found in the series of commands , the environment update line \verb | <var:F> := <var:L0> | . This transfers $ \{ <var:f> = <var:V> \land <var:L0> = <nat:6> \} $ into $ \{ <var:f> = <var:V> \land <var:F> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:f> = <var:V> }} <var:L0> := <nat:6> ; <var:F> := <var:L0> {{ <var:F> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:V> /\ <var:F> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 