\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:Y> ; <var:i> := <var:a1> ; <var:i> := <var:i> + <var:a0> \end{verbatim} Allowing it to be that $ <var:Y> = <var:g> $ before the execution of this series of commands , it follows that $ <var:i> = <nat:8> * <var:g> + <nat:8> $ when code segment has finished . \end{theorem} \begin{proof} The method of proof for our series of commands is demonstrated through Hoare logic . Now , \begin{eqnarray} \{ <var:Y> = <var:g> \} \, <var:a0> := <nat:8> \, \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \} \\ \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \} \, <var:a1> := <nat:8> \, \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> \} \end{eqnarray} This is deduced by the environment update scheme defined in standard Hoare logic . Stepping forward , we see \begin{eqnarray} \{ <var:Y> = <var:g> \} \, <var:a0> := <nat:8> \, \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \} \\ \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \} \, <var:a1> := <nat:8> \, \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:Y> = <var:g> \} \, <var:a0> := <nat:8> \, \{ <var:Y> = <var:g> \land <var:a0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Y> = <var:g> }} <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:Y> ; <var:i> := <var:a1> ; <var:i> := <var:i> + <var:a0> {{ <var:i> = <nat:8> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:a0> = <nat:8> /\ <var:i> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:g> /\ <var:i> = <nat:8> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 