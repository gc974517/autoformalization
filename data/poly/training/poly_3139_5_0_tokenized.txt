\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:H> ; <var:o> := <var:a1> ; <var:o> := <var:o> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for any integers $ <var:A> $ --- it to hold that $ <var:H> = <var:A> $ prior to the execution of this program , it follows that we see $ <var:o> = <nat:4> \times <var:A> + <nat:4> $ after code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is shown through Hoare logic . Following , we see the statement \verb | <var:a0> := <nat:4> ; | . This command moves $ \{ <var:H> = <var:A> \} $ toward $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \} $ . Honing in on the following piece of code in our segment of code , the variable update code giving $ <nat:4> $ toward $ <var:a1>$ . This redefines the precondition $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \} $ toward the postcondition $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} $ . Following , we see the binding code \verb | <var:a1> := <var:a1> * <var:H> ; | . This code transfers the precondition $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} $ as $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:A> \} $ . This is given using the assignment inference rule obtained from typical Hoare logic . Moving on to the next step , the variable update code binding $ <var:a1> $ as $ <var:o>$ . This forwards the condition $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \times <var:A> \} $ as the postcondition $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:o> = <nat:4> \times <var:A> \} $ . This is guaranteed through the assignment rule in Hoare reasoning . Moving forward to the next step , we have the variable binding line giving $ <var:o> + <var:a0$ into $ <var:o>$ . This command transfers $ \{ <var:H> = <var:A> \land <var:a0> = <nat:4> \land <var:o> = <nat:4> \times <var:A> \} $ as the condition $ \{ <var:H> = <var:A> \land <var:o> = <nat:4> \times <var:A> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:H> ; <var:o> := <var:a1> ; <var:o> := <var:o> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:H> = <var:A> }} <def:poly> {{ <var:o> = <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:a0> = <nat:4> /\ <var:o> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:o> = <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 