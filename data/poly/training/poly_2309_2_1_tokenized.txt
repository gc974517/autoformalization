\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:5> ; <var:U> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assume it to be that $ <var:g> = <var:m> $ given every $ <var:m> \in \mathbb{Z}^+ $ prior to running this program it follows that we see $ <var:U> = <nat:5> $ after list of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is clear using the below decorated series of commands . \begin{eqnarray} \{ <var:g> = <var:m> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:g> = <var:m> \land <var:A0> = <nat:5> \} \\ <var:U> := <var:A0> \\ \{ <var:g> = <var:m> \land <var:U> = <nat:5> \} \end{eqnarray} The application of Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:5> ; <var:U> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <def:poly> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 