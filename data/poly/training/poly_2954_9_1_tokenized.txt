\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:g> ; <var:w2> := <var:w1> * <var:g> ; <var:w3> := <var:w2> * <var:g> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:4> ; <var:w3> := <var:w3> * <nat:4> ; <var:Y> := <var:w3> <var:Y> := <var:Y> + <var:w1> <var:Y> := <var:Y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allowing that we have $ <var:g> = <var:H> $ prior to the execution of the series of instructions , it must be that we see $ <var:Y> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> + <nat:7> $ . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:g> = <var:H> \} \\ <var:w1> := <var:g> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <var:H> \} \\ <var:w2> := <var:w1> * <var:g> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:g> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <nat:4> \cdot <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <var:H> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:w3> := <var:w3> * <nat:4> ; \\ \{ <var:g> = <var:H> \land <var:w1> = <nat:4> \cdot <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w3> = <nat:4> \cdot <var:H> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:Y> := <var:w3> \\ \{ <var:g> = <var:H> \land <var:w1> = <nat:4> \cdot <var:H> \land <var:w2> = <var:H> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:Y> = <nat:4> \cdot <var:H> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:w1> \\ \{ <var:g> = <var:H> \land <var:w0> = <nat:7> \land <var:Y> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> \} \\ <var:Y> := <var:Y> + <var:w0> \\ \{ <var:g> = <var:H> \land <var:Y> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> + <nat:7> \} \end{eqnarray} As a consequence , the series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:g> ; <var:w2> := <var:w1> * <var:g> ; <var:w3> := <var:w2> * <var:g> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:4> ; <var:w3> := <var:w3> * <nat:4> ; <var:Y> := <var:w3> <var:Y> := <var:Y> + <var:w1> <var:Y> := <var:Y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:g> = <var:H> }} <def:poly> {{ <var:Y> = <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <nat:4> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <var:H> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <nat:4> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w3> = <nat:4> * <var:H> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w1> = <nat:4> * <var:H> /\ <var:w2> = <var:H> ^ <nat:2> /\ <var:w0> = <nat:7> /\ <var:Y> = <nat:4> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:w0> = <nat:7> /\ <var:Y> = <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:Y> = <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 