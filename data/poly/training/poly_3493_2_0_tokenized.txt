\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:9> ; <var:l> := <var:M0> \end{verbatim} Given --- for any positive numbers $ <var:f> $ --- that we have $ <var:A> = <var:f> $ before running our series of instructions , it follows that $ <var:l> = <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands can be shown by typical Hoare logic . After , the binding statement defining $ <nat:9> $ toward $ <var:M0>$ . This command transfers the condition $ \{ <var:A> = <var:f> \} $ to the postcondition $ \{ <var:A> = <var:f> \land <var:M0> = <nat:9> \} $ . Advancing on , we have the environment update command defining $ <var:M0$ into $ <var:l>$ . This advances $ \{ <var:A> = <var:f> \land <var:M0> = <nat:9> \} $ to the condition $ \{ <var:A> = <var:f> \land <var:l> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:A> = <var:f> }} <var:M0> := <nat:9> ; <var:l> := <var:M0> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 