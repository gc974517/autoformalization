\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:V> ; <var:h> := <var:y1> ; <var:h> := <var:h> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Given for positive numbers $ <var:X> $ that we have $ <var:V> = <var:X> $ prior to running this set of instructions , it follows that we see $ <var:h> = <nat:4> \times <var:X> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is evident using usual Hoare reasoning . Shifting focus toward the next command contained in our segment of code , we see the variable update code \verb | <var:y0> := <nat:1> ; | . This statement transfers the condition $ \{ <var:V> = <var:X> \} $ into the condition $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \} $ . Taking another step toward the next step contained in the code , we see the variable binding line binding $ <nat:4> $ to $ <var:y1>$ . This line takes the precondition $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \} $ toward $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \} $ . Advancing , we have the variable update line yielding $ <var:y1> * <var:V> $ as $ <var:y1>$ . This redefines the precondition $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \} $ to $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:X> \} $ . Advancing to the subsequent step found in the series of commands , we see the environment update code defining $ <var:y1> $ toward $ <var:h>$ . This advances the condition $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:4> \cdot <var:X> \} $ into the condition $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:h> = <nat:4> \cdot <var:X> \} $ . This is known to be sound using the assignment rule of standard Hoare techniques . Stepping through , we see the assignment code assigning $ <var:h> + <var:y0$ into $ <var:h>$ . This statement redefines $ \{ <var:V> = <var:X> \land <var:y0> = <nat:1> \land <var:h> = <nat:4> \cdot <var:X> \} $ as the condition $ \{ <var:V> = <var:X> \land <var:h> = <nat:4> \cdot <var:X> + <nat:1> \} $ . This is given by the assignment rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:V> ; <var:h> := <var:y1> ; <var:h> := <var:h> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <def:poly> {{ <var:h> = <nat:4> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:y0> = <nat:1> /\ <var:h> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:h> = <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 