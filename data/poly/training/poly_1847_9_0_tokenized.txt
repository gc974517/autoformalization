\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:p> ; <var:z2> := <nat:8> ; <var:z2> := <var:z2> * <var:p> ; <var:z2> := <var:z2> * <var:p> ; <var:U> := <var:z2> ; <var:U> := <var:U> + <var:z1> ; <var:U> := <var:U> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:p> = <var:J> $ --- given whole numbers $ <var:J> $ --- prior to evaluating this program it follows that we have $ <var:U> = <nat:8> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:1> $ after series of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of the program can be seen through typical Hoare reasoning . Taking another step toward the next pieces of code in our series of commands , \begin{verbatim} { <var:p> = <var:J> } <var:z0> := <nat:1> { <var:p> = <var:J> \land <var:z0> = <nat:1> } { <var:p> = <var:J> \land <var:z0> = <nat:1> } <var:z1> := <nat:4> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> } { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> } <var:z1> := <var:z1> * <var:p> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> \times <var:J> } \end{verbatim} This is guaranteed by the environment update scheme defined by standard Hoare reasoning . Advancing , we have \begin{verbatim} { <var:p> = <var:J> } <var:z0> := <nat:1> { <var:p> = <var:J> \land <var:z0> = <nat:1> } { <var:p> = <var:J> \land <var:z0> = <nat:1> } <var:z1> := <nat:4> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> } \end{verbatim} This is rigorously given with the variable assignmet rule of typical Hoare reasoning . Moving onward , \begin{verbatim} { <var:p> = <var:J> } <var:z0> := <nat:1> { <var:p> = <var:J> \land <var:z0> = <nat:1> } { <var:p> = <var:J> \land <var:z0> = <nat:1> } <var:z1> := <nat:4> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> } { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> } <var:z1> := <var:z1> * <var:p> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> \times <var:J> } { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> \times <var:J> } <var:z2> := <nat:8> { <var:p> = <var:J> \land <var:z0> = <nat:1> \land <var:z1> = <nat:4> \times <var:J> \land <var:z2> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:p> ; <var:z2> := <nat:8> ; <var:z2> := <var:z2> * <var:p> ; <var:z2> := <var:z2> * <var:p> ; <var:U> := <var:z2> ; <var:U> := <var:U> + <var:z1> ; <var:U> := <var:U> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:p> = <var:J> }} <def:poly> {{ <var:U> = <nat:8> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> * <var:J> /\ <var:z2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> * <var:J> /\ <var:z2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> * <var:J> /\ <var:z2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:4> * <var:J> /\ <var:U> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:z0> = <nat:1> /\ <var:U> = <nat:8> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:J> /\ <var:U> = <nat:8> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 