\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:1> + <var:e> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:u> = <var:H> $ , given any positive coefficients $ <var:H> $ , ahead of evaluating this list of instructions , then we see $ <var:e> = <nat:3> \cdot <var:H> + <nat:1> $ once list of instructions is done executing . \end{theorem} \begin{proof} See that the below decorated series of commands . \begin{eqnarray} \{ <var:u> = <var:H> \} \\ <var:e> := <nat:3> ; \\ \{ <var:u> = <var:H> \land <var:e> = <nat:3> \} \\ <var:e> := <nat:1> + <var:e> * <var:u> \\ \{ <var:u> = <var:H> \land <var:e> = <nat:3> * <var:H> + <nat:1> \} \end{eqnarray} Using typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:1> + <var:e> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:u> = <var:H> }} <def:poly> {{ <var:e> = <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:H> /\ <var:e> = <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 