\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:H> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:1> ; <var:W> := <var:A1> <var:W> := <var:W> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:H> = <var:g> $ before running this segment of code , it must be that we have $ <var:W> = <nat:1> \times <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this program is shown using usual Hoare techniques . Advancing to the next lines found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:H> = <var:g> \} & <var:A1> := <var:H> & \{ <var:H> = <var:g> \land <var:A1> = <var:g> \} \\ \{ <var:H> = <var:g> \land <var:A1> = <var:g> \} & <var:A0> := <nat:4> & \{ <var:H> = <var:g> \land <var:A1> = <var:g> \land <var:A0> = <nat:4> \} \end{tabular} Jumping to the following command found in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:H> = <var:g> \} & <var:A1> := <var:H> & \{ <var:H> = <var:g> \land <var:A1> = <var:g> \} \end{tabular} Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:g> \} & <var:A1> := <var:H> & \{ <var:H> = <var:g> \land <var:A1> = <var:g> \} \end{tabular} This is shown to be logically sound with the law in typical Hoare logic . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:H> = <var:g> \} & <var:A1> := <var:H> & \{ <var:H> = <var:g> \land <var:A1> = <var:g> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:H> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:1> ; <var:W> := <var:A1> <var:W> := <var:W> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:H> = <var:g> }} <def:poly> {{ <var:W> = <nat:1> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:A1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:A1> = <var:g> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:A1> = <nat:1> * <var:g> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:A0> = <nat:4> /\ <var:W> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:g> /\ <var:W> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 