\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:8> ; <var:Z> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> . Allow ( taking natural numbers $ <var:q> $ ) that we have $ <var:K> = <var:q> $ ahead of the execution of this list of instructions it must be that we have $ <var:Z> = <nat:8> $ when list of commands has finished executing . \end{theorem} \begin{proof} The argument for the set of commands can be given by Hoare logic . Honing in on the next statements contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:q> \} & <var:I0> := <nat:8> & \{ <var:K> = <var:q> \land <var:I0> = <nat:8> \} \\ \{ <var:K> = <var:q> \land <var:I0> = <nat:8> \} & <var:Z> := <var:I0& \{ <var:K> = <var:q> \land <var:Z> = <nat:8> \} \end{tabular} This is deduced with the rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:Z> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <def:poly> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 