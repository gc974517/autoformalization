\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:8> ; <var:M> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:F> = <var:J> $ before executing the list of commands it holds that $ <var:M> = <nat:8> $ after series of commands exits . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be demonstrated using usual Hoare reasoning . Further , we see the binding code giving $ <nat:8> $ as $ <var:K0>$ . This statement transfers the condition $ \{ <var:F> = <var:J> \} $ as the condition $ \{ <var:F> = <var:J> \land <var:K0> = <nat:8> \} $ . Keeping momentum , we have the environment update statement giving $ <var:K0$ into $ <var:M>$ . This takes the precondition $ \{ <var:F> = <var:J> \land <var:K0> = <nat:8> \} $ as the condition $ \{ <var:F> = <var:J> \land <var:M> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:8> ; <var:M> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:F> = <var:J> }} <def:poly> {{ <var:M> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:M> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 