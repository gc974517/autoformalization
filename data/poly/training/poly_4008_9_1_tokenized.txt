\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:X1> := <var:j> ; <var:X2> := <var:X1> * <var:j> ; <var:X3> := <var:X2> * <var:j> ; <var:X0> := <nat:1> ; <var:X2> := <var:X2> * <nat:3> ; <var:X3> := <var:X3> * <nat:3> ; <var:d> := <var:X3> <var:d> := <var:d> + <var:X2> <var:d> := <var:d> + <var:X0> \end{verbatim} Allow it to be that $ <var:j> = <var:I> $ ahead of the execution of our program , it follows that $ <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> $ when segment of code exits . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be given through usual Hoare techniques . Immediately after , we have the variable assignmet line binding $ <var:j> $ toward $ <var:X1>$ . This forwards the precondition $ \{ <var:j> = <var:I> \} $ as the condition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \} $ . This is deduced through the assignment rule defined by Hoare logic . Taking a look at the following step seen in the list of commands , the environment update line yielding $ <var:X1> * <var:j> $ to $ <var:X2>$ . This code moves the condition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \} $ into the postcondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \} $ . Observing the subsequent line of code contained in the code segment , the variable binding code \verb | <var:X3> := <var:X2> * <var:j> ; | . This command transfers the condition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \} $ . Honing in on the subsequent piece of code contained in the set of commands , we have the binding command defining $ <nat:1> $ into $ <var:X0>$ . This redefines $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . Taking another step toward the subsequent line seen in our set of instructions , we see the binding code assigning $ <var:X2> * <nat:3> $ toward $ <var:X2>$ . This line advances the precondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ to $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . This is guaranteed using the assignment scheme defined by usual Hoare reasoning . Observing the proceeding line seen in our code , the statement \verb | <var:X3> := <var:X3> * <nat:3> ; | . This moves the precondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X3> = <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ to the postcondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X3> = <nat:3> * <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ . Considering the subsequent bit of code in our code , the variable assignmet code \verb | <var:d> := <var:X3> | . This advances the precondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X3> = <nat:3> * <var:I> ^ <nat:3> \land <var:X0> = <nat:1> \} $ as the postcondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X0> = <nat:1> \land <var:d> = <nat:3> * <var:I> ^ <nat:3> \} $ . This is given through the assignment law given in typical Hoare techniques . Jumping to the upcoming step contained in the set of instructions , we have the code letting $ <var:d> + <var:X2$ as $ <var:d>$ . This forwards the precondition $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X2> = <nat:3> * <var:I> ^ <nat:2> \land <var:X0> = <nat:1> \land <var:d> = <nat:3> * <var:I> ^ <nat:3> \} $ as $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X0> = <nat:1> \land <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule obtained from typical Hoare logic . Moving on , we see the variable update command assigning $ <var:d> + <var:X0$ to $ <var:d>$ . This command moves $ \{ <var:j> = <var:I> \land <var:X1> = <var:I> \land <var:X0> = <nat:1> \land <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> \} $ to the postcondition $ \{ <var:j> = <var:I> \land <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> \} $ . This is rigorously given by the assignment rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <var:X1> := <var:j> ; <var:X2> := <var:X1> * <var:j> ; <var:X3> := <var:X2> * <var:j> ; <var:X0> := <nat:1> ; <var:X2> := <var:X2> * <nat:3> ; <var:X3> := <var:X3> * <nat:3> ; <var:d> := <var:X3> <var:d> := <var:d> + <var:X2> <var:d> := <var:d> + <var:X0> {{ <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <var:I> ^ <nat:2> /\ <var:X3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <var:I> ^ <nat:2> /\ <var:X3> = <var:I> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:X3> = <var:I> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:X3> = <nat:3> * <var:I> ^ <nat:3> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:X0> = <nat:1> /\ <var:d> = <nat:3> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:X1> = <var:I> /\ <var:X0> = <nat:1> /\ <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:d> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 