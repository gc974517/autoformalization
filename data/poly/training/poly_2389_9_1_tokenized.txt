\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:m> ; <var:d2> := <var:d1> * <var:m> ; <var:d3> := <var:d2> * <var:m> ; <var:d0> := <nat:8> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:8> ; <var:V> := <var:d3> <var:V> := <var:V> + <var:d2> <var:V> := <var:V> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming --- for some positive numbers $ <var:u> $ --- it to hold that $ <var:m> = <var:u> $ ahead of evaluating our series of instructions then we see $ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:8> $ after series of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be shown with typical Hoare reasoning . Next , we have \begin{verbatim} { <var:m> = <var:u> } <var:d1> := <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> } { <var:m> = <var:u> \land <var:d1> = <var:u> } <var:d2> := <var:d1> * <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> } \end{verbatim} Keeping momentum , we have \begin{verbatim} { <var:m> = <var:u> } <var:d1> := <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> } { <var:m> = <var:u> \land <var:d1> = <var:u> } <var:d2> := <var:d1> * <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> } { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> } <var:d3> := <var:d2> * <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> \land <var:d3> = <var:u> ^ <nat:3> } { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> \land <var:d3> = <var:u> ^ <nat:3> } <var:d0> := <nat:8> { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> \land <var:d3> = <var:u> ^ <nat:3> \land <var:d0> = <nat:8> } \end{verbatim} Looking at the subsequent steps seen in our program , we see \begin{verbatim} { <var:m> = <var:u> } <var:d1> := <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> } { <var:m> = <var:u> \land <var:d1> = <var:u> } <var:d2> := <var:d1> * <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> \land <var:d2> = <var:u> ^ <nat:2> } \end{verbatim} This is given with the binding law obtained from standard Hoare logic . Moving forward to the subsequent piece of code in our code , we see \begin{verbatim} { <var:m> = <var:u> } <var:d1> := <var:m> { <var:m> = <var:u> \land <var:d1> = <var:u> } \end{verbatim} This is ensured with the variable update inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:m> ; <var:d2> := <var:d1> * <var:m> ; <var:d3> := <var:d2> * <var:m> ; <var:d0> := <nat:8> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:8> ; <var:V> := <var:d3> <var:V> := <var:V> + <var:d2> <var:V> := <var:V> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:m> = <var:u> }} <def:poly> {{ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <var:u> ^ <nat:2> /\ <var:d3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <var:u> ^ <nat:2> /\ <var:d3> = <var:u> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:d3> = <var:u> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:d0> = <nat:8> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:d1> = <var:u> /\ <var:d0> = <nat:8> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 