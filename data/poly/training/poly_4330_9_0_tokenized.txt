\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:s0> := <nat:1> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:b> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:b> ; <var:s2> := <var:s2> * <var:b> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> \end{verbatim} Assuming ( assuming some $ <var:j> \in \mathbb{N} $ ) it to be that $ <var:b> = <var:j> $ prior to the evaluation of our series of instructions , it must be that $ <var:H> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> $ after list of instructions has exited . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:b> = <var:j> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \} \end{eqnarray} Advancing evaluating this code returns : \begin{eqnarray} <var:s1> := <var:s1> * <var:b> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \times <var:j> \} \\ <var:s2> := <nat:3> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \times <var:j> \land <var:s2> = <nat:3> \} \\ <var:s2> := <var:s2> * <var:b> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \times <var:j> \land <var:s2> = <nat:3> \times <var:j> \} \\ <var:s2> := <var:s2> * <var:b> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \times <var:j> \land <var:s2> = <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:H> := <var:s2> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:s1> = <nat:4> \times <var:j> \land <var:H> = <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:s1> ; \\ \{ <var:b> = <var:j> \land <var:s0> = <nat:1> \land <var:H> = <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> \} \\ <var:H> := <var:H> + <var:s0> \\ \{ <var:b> = <var:j> \land <var:H> = <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:1> \} \end{eqnarray} Thusly , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:b> = <var:j> }} <var:s0> := <nat:1> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:b> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:b> ; <var:s2> := <var:s2> * <var:b> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> {{ <var:H> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> * <var:j> /\ <var:s2> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:4> * <var:j> /\ <var:H> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:s0> = <nat:1> /\ <var:H> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:H> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 