\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:8> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:h> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:h> = <var:y> $ ( given all positive integers $ <var:y> $ ) ahead of interpreting this program it must be that we see $ <var:T> = <nat:7> \times <var:y> + <nat:8> $ . \end{theorem} \begin{proof} The argument for the list of commands can be given using standard Hoare reasoning . Shifting focus toward the proceeding steps found in our code segment , we see \verb | { <var:h> = <var:y> } <var:E0> := <nat:8> { <var:h> = <var:y> \land <var:E0> = <nat:8> } | and \verb | { <var:h> = <var:y> \land <var:E0> = <nat:8> } <var:E1> := <nat:7> { <var:h> = <var:y> \land <var:E0> = <nat:8> \land <var:E1> = <nat:7> } | . Moving onward , we have \verb | { <var:h> = <var:y> } <var:E0> := <nat:8> { <var:h> = <var:y> \land <var:E0> = <nat:8> } | , \verb | { <var:h> = <var:y> \land <var:E0> = <nat:8> } <var:E1> := <nat:7> { <var:h> = <var:y> \land <var:E0> = <nat:8> \land <var:E1> = <nat:7> } | and \verb | { <var:h> = <var:y> \land <var:E0> = <nat:8> \land <var:E1> = <nat:7> } <var:E1> := <var:E1> * <var:h> { <var:h> = <var:y> \land <var:E0> = <nat:8> \land <var:E1> = <nat:7> * <var:y> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:8> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:h> ; <var:T> := <var:E1> ; <var:T> := <var:T> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <def:poly> {{ <var:T> = <nat:7> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:E0> = <nat:8> /\ <var:T> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:T> = <nat:7> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 