\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:y> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:3> ; <var:L> := <var:t1> <var:L> := <var:L> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Allow that $ <var:y> = <var:N> $ prior to evaluating our code segment , it must be that we see $ <var:L> = <nat:3> * <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is clear by standard Hoare reasoning . Considering the proceeding command in the list of instructions , we see \verb | { <var:y> = <var:N> } <var:t1> := <var:y> { <var:y> = <var:N> \land <var:t1> = <var:N> } | . Further , we see \verb | { <var:y> = <var:N> } <var:t1> := <var:y> { <var:y> = <var:N> \land <var:t1> = <var:N> } | . After , \verb | { <var:y> = <var:N> } <var:t1> := <var:y> { <var:y> = <var:N> \land <var:t1> = <var:N> } | . Moving forward , \verb | { <var:y> = <var:N> } <var:t1> := <var:y> { <var:y> = <var:N> \land <var:t1> = <var:N> } | and \verb | { <var:y> = <var:N> \land <var:t1> = <var:N> } <var:t0> := <nat:1> { <var:y> = <var:N> \land <var:t1> = <var:N> \land <var:t0> = <nat:1> } | . This is given with the variable binding law obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:y> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:3> ; <var:L> := <var:t1> <var:L> := <var:L> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <def:poly> {{ <var:L> = <nat:3> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:t1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:t1> = <var:N> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:t1> = <nat:3> * <var:N> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:t0> = <nat:1> /\ <var:L> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:L> = <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 