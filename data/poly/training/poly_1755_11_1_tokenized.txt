\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:p1> := <var:P> ; <var:p2> := <var:p1> * <var:P> ; <var:p3> := <var:p2> * <var:P> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:1> ; <var:k> := <var:p3> <var:k> := <var:k> + <var:p2> <var:k> := <var:k> + <var:p1> <var:k> := <var:k> + <var:p0> \end{verbatim} Allow that we have $ <var:P> = <var:v> $ prior to interpreting this program , it must be that we see $ <var:k> = <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:9> $ when series of instructions finishes . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:P> = <var:v> \} \\ <var:p1> := <var:P> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <var:v> \} \\ <var:p2> := <var:p1> * <var:P> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <var:v> \land <var:p2> = <var:v> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:P> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <var:v> \land <var:p2> = <var:v> ^ <nat:2> \land <var:p3> = <var:v> ^ <nat:3> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <var:v> \land <var:p2> = <var:v> ^ <nat:2> \land <var:p3> = <var:v> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p1> := <var:p1> * <nat:7> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <var:v> ^ <nat:2> \land <var:p3> = <var:v> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p2> := <var:p2> * <nat:2> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <var:v> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p3> := <var:p3> * <nat:1> ; \\ \{ <var:P> = <var:v> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p3> = <nat:1> \times <var:v> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:k> := <var:p3> \\ \{ <var:P> = <var:v> \land <var:p1> = <nat:7> \times <var:v> \land <var:p2> = <nat:2> \times <var:v> ^ <nat:2> \land <var:p0> = <nat:9> \land <var:k> = <nat:1> \times <var:v> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:p2> \\ \{ <var:P> = <var:v> \land <var:p1> = <nat:7> \times <var:v> \land <var:p0> = <nat:9> \land <var:k> = <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:p1> \\ \{ <var:P> = <var:v> \land <var:p0> = <nat:9> \land <var:k> = <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> \} \\ <var:k> := <var:k> + <var:p0> \\ \{ <var:P> = <var:v> \land <var:k> = <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> + <nat:9> \} \end{eqnarray} Hence , this set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:P> = <var:v> }} <var:p1> := <var:P> ; <var:p2> := <var:p1> * <var:P> ; <var:p3> := <var:p2> * <var:P> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:1> ; <var:k> := <var:p3> <var:k> := <var:k> + <var:p2> <var:k> := <var:k> + <var:p1> <var:k> := <var:k> + <var:p0> {{ <var:k> = <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <var:v> /\ <var:p2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <var:v> /\ <var:p2> = <var:v> ^ <nat:2> /\ <var:p3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <var:v> /\ <var:p2> = <var:v> ^ <nat:2> /\ <var:p3> = <var:v> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <var:v> ^ <nat:2> /\ <var:p3> = <var:v> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <var:v> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p2> = <nat:2> * <var:v> ^ <nat:2> /\ <var:p0> = <nat:9> /\ <var:k> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p1> = <nat:7> * <var:v> /\ <var:p0> = <nat:9> /\ <var:k> = <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:p0> = <nat:9> /\ <var:k> = <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:v> /\ <var:k> = <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 