\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:H0> := <nat:2> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:D> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:D> ; <var:H2> := <var:H2> * <var:D> ; <var:P> := <var:H2> ; <var:P> := <var:P> + <var:H1> ; <var:P> := <var:P> + <var:H0> \end{verbatim} Allow that we have $ <var:D> = <var:b> $ ( for every positive numbers $ <var:b> $ ) prior to executing our list of commands , it follows that we see $ <var:P> = <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is given with usual Hoare reasoning . Keeping momentum , we see the variable update command yielding $ <nat:2> $ into $ <var:H0>$ . This transfers the condition $ \{ <var:D> = <var:b> \} $ toward the postcondition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \} $ . This is given through the assignment rule in usual Hoare techniques . Now , we have the assignment line \verb | <var:H1> := <nat:4> ; | . This forwards the precondition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \} $ toward the condition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \} $ . This is given using the assignment law obtained from typical Hoare techniques . Moving on , we have the statement \verb | <var:H1> := <var:H1> * <var:D> ; | . This command redefines $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \} $ toward $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \} $ . Considering the upcoming line seen in our segment of code , the assignment code \verb | <var:H2> := <nat:4> ; | . This command advances the condition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \} $ as $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \} $ . Paying attention to the next command seen in our code segment , we see the assignment line \verb | <var:H2> := <var:H2> * <var:D> ; | . This redefines $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \} $ as $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \times <var:b> \} $ . This is deduced by the assignment inference rule found in Hoare techniques . Honing in on the subsequent bit of code found in the set of commands , we have the binding code \verb | <var:H2> := <var:H2> * <var:D> ; | . This line takes $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \times <var:b> \} $ into the condition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \times <var:b> ^ <nat:2> \} $ . This is shown with the assignment scheme defined by standard Hoare techniques . Immediately after , the statement \verb | <var:P> := <var:H2> ; | . This advances the precondition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:H2> = <nat:4> \times <var:b> ^ <nat:2> \} $ to $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:P> = <nat:4> \times <var:b> ^ <nat:2> \} $ . Stepping forward , we have the variable assignmet command \verb | <var:P> := <var:P> + <var:H1> ; | . This redefines the condition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:H1> = <nat:4> \times <var:b> \land <var:P> = <nat:4> \times <var:b> ^ <nat:2> \} $ into the postcondition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:P> = <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> \} $ . Immediately following , we see the variable binding code defining $ <var:P> + <var:H0$ toward $ <var:P>$ . This statement transfers the condition $ \{ <var:D> = <var:b> \land <var:H0> = <nat:2> \land <var:P> = <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> \} $ as the condition $ \{ <var:D> = <var:b> \land <var:P> = <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <var:H0> := <nat:2> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:D> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:D> ; <var:H2> := <var:H2> * <var:D> ; <var:P> := <var:H2> ; <var:P> := <var:P> + <var:H1> ; <var:P> := <var:P> + <var:H0> {{ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:H1> = <nat:4> * <var:b> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:H0> = <nat:2> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 