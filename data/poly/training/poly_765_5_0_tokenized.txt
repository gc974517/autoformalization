\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:S> ; <var:z> := <var:D1> ; <var:z> := <var:z> + <var:D0> \end{verbatim} Assume $ <var:S> = <var:X> $ --- letting integers $ <var:X> $ --- prior to the execution of our program , it must be that we see $ <var:z> = <nat:3> * <var:X> + <nat:4> $ when set of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:X> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:S> = <var:X> \land <var:D0> = <nat:4> \} \\ <var:D1> := <nat:3> ; \\ \{ <var:S> = <var:X> \land <var:D0> = <nat:4> \land <var:D1> = <nat:3> \} \\ <var:D1> := <var:D1> * <var:S> ; \\ \{ <var:S> = <var:X> \land <var:D0> = <nat:4> \land <var:D1> = <nat:3> * <var:X> \} \\ <var:z> := <var:D1> ; \\ \{ <var:S> = <var:X> \land <var:D0> = <nat:4> \land <var:z> = <nat:3> * <var:X> \} \\ <var:z> := <var:z> + <var:D0> \\ \{ <var:S> = <var:X> \land <var:z> = <nat:3> * <var:X> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:S> = <var:X> }} <var:D0> := <nat:4> ; <var:D1> := <nat:3> ; <var:D1> := <var:D1> * <var:S> ; <var:z> := <var:D1> ; <var:z> := <var:z> + <var:D0> {{ <var:z> = <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:D0> = <nat:4> /\ <var:z> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:z> = <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 