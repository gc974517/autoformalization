\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:y> ; <var:h2> := <var:h1> * <var:y> ; <var:h3> := <var:h2> * <var:y> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:4> ; <var:h2> := <var:h2> * <nat:4> ; <var:h3> := <var:h3> * <nat:3> ; <var:C> := <var:h3> <var:C> := <var:C> + <var:h2> <var:C> := <var:C> + <var:h1> <var:C> := <var:C> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:y> = <var:k> $ ( letting positive numbers $ <var:k> $ ) prior to evaluating this set of commands , it follows that $ <var:C> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:y> = <var:k> \} \\ <var:h1> := <var:y> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <var:k> \} \\ <var:h2> := <var:h1> * <var:y> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <var:k> \land <var:h2> = <var:k> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:y> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <var:k> \land <var:h2> = <var:k> ^ <nat:2> \land <var:h3> = <var:k> ^ <nat:3> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <var:k> \land <var:h2> = <var:k> ^ <nat:2> \land <var:h3> = <var:k> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:h1> := <var:h1> * <nat:4> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <nat:4> \times <var:k> \land <var:h2> = <var:k> ^ <nat:2> \land <var:h3> = <var:k> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:h2> := <var:h2> * <nat:4> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <nat:4> \times <var:k> \land <var:h2> = <nat:4> \times <var:k> ^ <nat:2> \land <var:h3> = <var:k> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:h3> := <var:h3> * <nat:3> ; \\ \{ <var:y> = <var:k> \land <var:h1> = <nat:4> \times <var:k> \land <var:h2> = <nat:4> \times <var:k> ^ <nat:2> \land <var:h3> = <nat:3> \times <var:k> ^ <nat:3> \land <var:h0> = <nat:2> \} \\ <var:C> := <var:h3> \\ \{ <var:y> = <var:k> \land <var:h1> = <nat:4> \times <var:k> \land <var:h2> = <nat:4> \times <var:k> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:C> = <nat:3> \times <var:k> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:h2> \\ \{ <var:y> = <var:k> \land <var:h1> = <nat:4> \times <var:k> \land <var:h0> = <nat:2> \land <var:C> = <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:h1> \\ \{ <var:y> = <var:k> \land <var:h0> = <nat:2> \land <var:C> = <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> \} \\ <var:C> := <var:C> + <var:h0> \\ \{ <var:y> = <var:k> \land <var:C> = <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:2> \} \end{eqnarray} Given the preceding argument , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:y> ; <var:h2> := <var:h1> * <var:y> ; <var:h3> := <var:h2> * <var:y> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:4> ; <var:h2> := <var:h2> * <nat:4> ; <var:h3> := <var:h3> * <nat:3> ; <var:C> := <var:h3> <var:C> := <var:C> + <var:h2> <var:C> := <var:C> + <var:h1> <var:C> := <var:C> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <def:poly> {{ <var:C> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <var:k> /\ <var:h2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <var:k> /\ <var:h2> = <var:k> ^ <nat:2> /\ <var:h3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <var:k> /\ <var:h2> = <var:k> ^ <nat:2> /\ <var:h3> = <var:k> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <nat:4> * <var:k> /\ <var:h2> = <var:k> ^ <nat:2> /\ <var:h3> = <var:k> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <nat:4> * <var:k> /\ <var:h2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:h3> = <var:k> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <nat:4> * <var:k> /\ <var:h2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:h3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <nat:4> * <var:k> /\ <var:h2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:h0> = <nat:2> /\ <var:C> = <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h1> = <nat:4> * <var:k> /\ <var:h0> = <nat:2> /\ <var:C> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:h0> = <nat:2> /\ <var:C> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:C> = <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 