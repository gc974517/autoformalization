\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:a> ; <var:R2> := <var:R1> * <var:a> ; <var:R3> := <var:R2> * <var:a> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:3> ; <var:I> := <var:R3> <var:I> := <var:I> + <var:R2> <var:I> := <var:I> + <var:R1> <var:I> := <var:I> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:a> = <var:v> $ , for all natural coefficients $ <var:v> $ , before running our program it follows that we see $ <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:1> $ when list of instructions is done . \end{theorem} \begin{proof} Proving correctness for this list of instructions is demonstrated with Hoare techniques . Next , we see the variable update command yielding $ <var:a> $ into $ <var:R1>$ . This advances the condition $ \{ <var:a> = <var:v> \} $ toward the postcondition $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \} $ . This is deduced by the assignment scheme obtained from typical Hoare reasoning . Looking at the upcoming step contained in our series of instructions , we see the variable assignmet code \verb | <var:R2> := <var:R1> * <var:a> ; | . This command takes $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \} $ as the condition $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \} $ . Moving onward , we see the binding code binding $ <var:R2> * <var:a> $ as $ <var:R3>$ . This code forwards $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \} $ as the condition $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \} $ . Taking another step toward the upcoming bit of code found in our list of commands , we have the variable binding line \verb | <var:R0> := <nat:1> ; | . This statement takes $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \} $ into the postcondition $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . This is ensured with the assignment inference rule found in typical Hoare reasoning . Stepping forward , we see the binding command \verb | <var:R1> := <var:R1> * <nat:6> ; | . This line moves the condition $ \{ <var:a> = <var:v> \land <var:R1> = <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ as $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . Looking at the proceeding command found in the code segment , we have the environment update code \verb | <var:R2> := <var:R2> * <nat:5> ; | . This transfers $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ to the condition $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . This is deduced using the assignment inference rule defined in usual Hoare logic . Going forward , the variable update command yielding $ <var:R3> * <nat:3> $ as $ <var:R3>$ . This forwards $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R3> = <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ to $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . Taking another step toward the next line contained in the list of commands , we see the variable update statement letting $ <var:R3$ toward $ <var:I>$ . This command transfers the condition $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:v> ^ <nat:3> \land <var:R0> = <nat:1> \} $ into the condition $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> \} $ . Going to the next step , we see the assignment code yielding $ <var:I> + <var:R2$ to $ <var:I>$ . This moves the precondition $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> \} $ . Advancing to the next line of code in the code , we see the assignment line giving $ <var:I> + <var:R1$ as $ <var:I>$ . This takes $ \{ <var:a> = <var:v> \land <var:R1> = <nat:6> \cdot <var:v> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> \} $ to the condition $ \{ <var:a> = <var:v> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> \} $ . This is shown using the assignment rule defined by typical Hoare techniques . Looking at the upcoming bit of code seen in the code , we see the binding code giving $ <var:I> + <var:R0$ to $ <var:I>$ . This redefines the condition $ \{ <var:a> = <var:v> \land <var:R0> = <nat:1> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> \} $ toward $ \{ <var:a> = <var:v> \land <var:I> = <nat:3> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:a> ; <var:R2> := <var:R1> * <var:a> ; <var:R3> := <var:R2> * <var:a> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:3> ; <var:I> := <var:R3> <var:I> := <var:I> + <var:R2> <var:I> := <var:I> + <var:R1> <var:I> := <var:I> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:a> = <var:v> }} <def:poly> {{ <var:I> = <nat:3> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <var:v> /\ <var:R2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <var:v> /\ <var:R2> = <var:v> ^ <nat:2> /\ <var:R3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <var:v> /\ <var:R2> = <var:v> ^ <nat:2> /\ <var:R3> = <var:v> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <nat:6> * <var:v> /\ <var:R2> = <var:v> ^ <nat:2> /\ <var:R3> = <var:v> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <nat:6> * <var:v> /\ <var:R2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:R3> = <var:v> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <nat:6> * <var:v> /\ <var:R2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <nat:6> * <var:v> /\ <var:R2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:R0> = <nat:1> /\ <var:I> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R1> = <nat:6> * <var:v> /\ <var:R0> = <nat:1> /\ <var:I> = <nat:3> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:R0> = <nat:1> /\ <var:I> = <nat:3> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:v> /\ <var:I> = <nat:3> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 