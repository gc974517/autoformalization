\begin{document} \begin{theorem} Consider a series of commands as follows \begin{verbatim} <var:P1> := <var:y> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:4> ; <var:z> := <var:P1> <var:z> := <var:z> + <var:P0> \end{verbatim} Allow --- given all whole numbers $ <var:n> $ --- it to be that $ <var:y> = <var:n> $ ahead of interpreting the list of commands , then $ <var:z> = <nat:4> \cdot <var:n> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is clear with standard Hoare reasoning . Advancing to the proceeding bit of code in our set of instructions , we see the environment update line \verb | <var:P1> := <var:y> ; | . This advances the condition $ \{ <var:y> = <var:n> \} $ toward $ \{ <var:y> = <var:n> \land <var:P1> = <var:n> \} $ . This is guaranteed through the assignment scheme in usual Hoare logic . Advancing , the variable assignmet statement letting $ <nat:9> $ toward $ <var:P0>$ . This transfers $ \{ <var:y> = <var:n> \land <var:P1> = <var:n> \} $ toward the condition $ \{ <var:y> = <var:n> \land <var:P1> = <var:n> \land <var:P0> = <nat:9> \} $ . This is ensured through the assignment rule from typical Hoare logic . Keeping momentum , we see the environment update command defining $ <var:P1> * <nat:4> $ as $ <var:P1>$ . This redefines the precondition $ \{ <var:y> = <var:n> \land <var:P1> = <var:n> \land <var:P0> = <nat:9> \} $ as the postcondition $ \{ <var:y> = <var:n> \land <var:P1> = <nat:4> \times <var:n> \land <var:P0> = <nat:9> \} $ . Moving forward to the subsequent statement seen in our segment of code , we have the variable update code \verb | <var:z> := <var:P1> | . This command redefines the condition $ \{ <var:y> = <var:n> \land <var:P1> = <nat:4> \times <var:n> \land <var:P0> = <nat:9> \} $ as the condition $ \{ <var:y> = <var:n> \land <var:P0> = <nat:9> \land <var:z> = <nat:4> \times <var:n> \} $ . This is rigorously given using the assignment rule from typical Hoare techniques . Shifting focus toward the proceeding step in our list of instructions , the binding statement defining $ <var:z> + <var:P0$ to $ <var:z>$ . This code transfers the precondition $ \{ <var:y> = <var:n> \land <var:P0> = <nat:9> \land <var:z> = <nat:4> \times <var:n> \} $ as $ \{ <var:y> = <var:n> \land <var:z> = <nat:4> \times <var:n> + <nat:9> \} $ . This is shown to be logically sound through the assignment rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:y> = <var:n> }} <var:P1> := <var:y> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:4> ; <var:z> := <var:P1> <var:z> := <var:z> + <var:P0> {{ <var:z> = <nat:4> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:P1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:P1> = <var:n> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:P1> = <nat:4> * <var:n> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:P0> = <nat:9> /\ <var:z> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:n> /\ <var:z> = <nat:4> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 