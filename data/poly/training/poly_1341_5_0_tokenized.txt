\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:v> ; <var:l> := <var:G1> ; <var:l> := <var:l> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:v> = <var:Z> $ before executing our series of instructions , it must be that we have $ <var:l> = <nat:3> \times <var:Z> + <nat:9> $ once segment of code is done . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be given through typical Hoare techniques . Honing in on the subsequent command seen in our set of commands , we have the variable assignmet command letting $ <nat:9> $ as $ <var:G0>$ . This transfers the precondition $ \{ <var:v> = <var:Z> \} $ toward the condition $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \} $ . This is known to be sound with the assignment scheme given in standard Hoare techniques . Taking a look at the proceeding step contained in the code segment , we have the statement yielding $ <nat:3> $ toward $ <var:G1>$ . This command moves $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \} $ to the condition $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \} $ . This is rigorously given with the assignment scheme from standard Hoare logic . Jumping to the next command seen in the list of commands , we see the variable update statement assigning $ <var:G1> * <var:v> $ toward $ <var:G1>$ . This statement transfers $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \} $ toward the postcondition $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \cdot <var:Z> \} $ . Going forward , the environment update command assigning $ <var:G1> $ as $ <var:l>$ . This redefines the precondition $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \cdot <var:Z> \} $ into the condition $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:l> = <nat:3> \cdot <var:Z> \} $ . Moving forward to the next step , we have the variable binding statement defining $ <var:l> + <var:G0$ toward $ <var:l>$ . This statement redefines $ \{ <var:v> = <var:Z> \land <var:G0> = <nat:9> \land <var:l> = <nat:3> \cdot <var:Z> \} $ into the postcondition $ \{ <var:v> = <var:Z> \land <var:l> = <nat:3> \cdot <var:Z> + <nat:9> \} $ . This is sound with the assignment law given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:v> ; <var:l> := <var:G1> ; <var:l> := <var:l> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:v> = <var:Z> }} <def:poly> {{ <var:l> = <nat:3> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:G0> = <nat:9> /\ <var:l> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:Z> /\ <var:l> = <nat:3> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 