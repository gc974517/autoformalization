\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:9> ; <var:h> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:X> = <var:B> $ prior to interpreting the series of commands , it follows that we have $ <var:h> = <nat:9> $ once code segment exits . \end{theorem} \begin{proof} Notice this decorated series of instructions . \begin{eqnarray} \{ <var:X> = <var:B> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:X> = <var:B> \land <var:b0> = <nat:9> \} \\ <var:h> := <var:b0> \\ \{ <var:X> = <var:B> \land <var:h> = <nat:9> \} \end{eqnarray} Utilizing standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:h> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <def:poly> {{ <var:h> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:h> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 