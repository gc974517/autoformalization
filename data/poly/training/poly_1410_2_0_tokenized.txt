\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:8> ; <var:g> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:q> = <var:F> $ ahead of evaluating this list of commands then we see $ <var:g> = <nat:8> $ when segment of code has finished executing . \end{theorem} \begin{proof} The argument for this list of commands can be demonstrated with standard Hoare techniques . Advancing to the subsequent bits of codecontained in the code , \verb | { <var:q> = <var:F> } <var:Q0> := <nat:8> { <var:q> = <var:F> \land <var:Q0> = <nat:8> } | and \verb | { <var:q> = <var:F> \land <var:Q0> = <nat:8> } <var:g> := <var:Q0{ <var:q> = <var:F> \land <var:g> = <nat:8> } | . This is ensured through the variable binding scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:g> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:q> = <var:F> }} <def:poly> {{ <var:g> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:F> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:F> /\ <var:g> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 