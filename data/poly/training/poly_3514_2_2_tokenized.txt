\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:g> = <var:A> $ ahead of the execution of our set of commands it must be that $ <var:N> = <nat:2> * <var:A> + <nat:1> $ when program terminates . \end{theorem} \begin{proof} The proof of our list of commands can be accomplished by Hoare logic . Moving forward to the upcoming line of code seen in our code segment , we have the line assigning $ <nat:2> $ as $ <var:N>$ . This moves $ \{ <var:g> = <var:A> \} $ as the postcondition $ \{ <var:g> = <var:A> \land <var:N> = <nat:2> \} $ . This is shown to be logically sound through the assignment rule of Hoare logic . Looking at the subsequent line contained in our list of instructions , we have the variable binding code yielding $ <nat:1> + <var:N> * <var:g$ toward $ <var:N>$ . This code moves $ \{ <var:g> = <var:A> \land <var:N> = <nat:2> \} $ into $ \{ <var:g> = <var:A> \land <var:N> = <nat:2> \times <var:A> + <nat:1> \} $ . This is guaranteed using the assignment law defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:g> = <var:A> }} <def:poly> {{ <var:N> = <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:A> /\ <var:N> = <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 