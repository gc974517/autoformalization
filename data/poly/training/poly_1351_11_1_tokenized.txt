\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:o> ; <var:c2> := <var:c1> * <var:o> ; <var:c3> := <var:c2> * <var:o> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:6> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:4> ; <var:n> := <var:c3> <var:n> := <var:n> + <var:c2> <var:n> := <var:n> + <var:c1> <var:n> := <var:n> + <var:c0> \end{verbatim} Assuming it to hold that $ <var:o> = <var:e> $ ahead of evaluating our set of commands it must be that we see $ <var:n> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be done with Hoare logic . Immediately after , \begin{verbatim} { <var:o> = <var:e> } <var:c1> := <var:o> { <var:o> = <var:e> \land <var:c1> = <var:e> } { <var:o> = <var:e> \land <var:c1> = <var:e> } <var:c2> := <var:c1> * <var:o> { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> } { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> } <var:c3> := <var:c2> * <var:o> { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> } { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> } <var:c0> := <nat:7> { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } { <var:o> = <var:e> \land <var:c1> = <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } <var:c1> := <var:c1> * <nat:6> { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } <var:c2> := <var:c2> * <nat:4> { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c3> = <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } <var:c3> := <var:c3> * <nat:4> { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c3> = <nat:4> \cdot <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c3> = <nat:4> \cdot <var:e> ^ <nat:3> \land <var:c0> = <nat:7> } <var:n> := <var:c3{ <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c0> = <nat:7> \land <var:n> = <nat:4> \cdot <var:e> ^ <nat:3> } { <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c2> = <nat:4> \cdot <var:e> ^ <nat:2> \land <var:c0> = <nat:7> \land <var:n> = <nat:4> \cdot <var:e> ^ <nat:3> } <var:n> := <var:n> + <var:c2{ <var:o> = <var:e> \land <var:c1> = <nat:6> \cdot <var:e> \land <var:c0> = <nat:7> \land <var:n> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> } \end{verbatim} This is guaranteed through the variable assignmet inference rule obtained from typical Hoare techniques . Going to the next step , we have \begin{verbatim} { <var:o> = <var:e> } <var:c1> := <var:o> { <var:o> = <var:e> \land <var:c1> = <var:e> } \end{verbatim} This is shown to be logically sound with the assignment inference rule given in usual Hoare logic . After , \begin{verbatim} { <var:o> = <var:e> } <var:c1> := <var:o> { <var:o> = <var:e> \land <var:c1> = <var:e> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:o> = <var:e> }} <var:c1> := <var:o> ; <var:c2> := <var:c1> * <var:o> ; <var:c3> := <var:c2> * <var:o> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:6> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:4> ; <var:n> := <var:c3> <var:n> := <var:n> + <var:c2> <var:n> := <var:n> + <var:c1> <var:n> := <var:n> + <var:c0> {{ <var:n> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <var:e> /\ <var:c2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <var:e> /\ <var:c2> = <var:e> ^ <nat:2> /\ <var:c3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <var:e> /\ <var:c2> = <var:e> ^ <nat:2> /\ <var:c3> = <var:e> ^ <nat:3> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <nat:6> * <var:e> /\ <var:c2> = <var:e> ^ <nat:2> /\ <var:c3> = <var:e> ^ <nat:3> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <nat:6> * <var:e> /\ <var:c2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:c3> = <var:e> ^ <nat:3> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <nat:6> * <var:e> /\ <var:c2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <nat:6> * <var:e> /\ <var:c2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:c0> = <nat:7> /\ <var:n> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c1> = <nat:6> * <var:e> /\ <var:c0> = <nat:7> /\ <var:n> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:c0> = <nat:7> /\ <var:n> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:n> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 