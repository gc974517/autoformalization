\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:y0> := <nat:4> ; <var:B> := <var:y0> \end{verbatim} Allowing $ <var:V> = <var:U> $ before interpreting our code segment it must be that we have $ <var:B> = <nat:4> $ after series of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be seen by Hoare techniques . Honing in on the upcoming statement found in the code , \verb | { <var:V> = <var:U> } <var:y0> := <nat:4> { <var:V> = <var:U> \land <var:y0> = <nat:4> } | . This is guaranteed with the environment update law from standard Hoare techniques . Moving forward to the next step , we see \verb | { <var:V> = <var:U> } <var:y0> := <nat:4> { <var:V> = <var:U> \land <var:y0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:V> = <var:U> }} <var:y0> := <nat:4> ; <var:B> := <var:y0> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:U> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 