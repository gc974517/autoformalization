\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:1> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:h> ; <var:P2> := <nat:7> ; <var:P2> := <var:P2> * <var:h> ; <var:P2> := <var:P2> * <var:h> ; <var:k> := <var:P2> ; <var:k> := <var:k> + <var:P1> ; <var:k> := <var:k> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:h> = <var:z> $ for every $ <var:z> \in \mathbb{Z}^+ $ prior to running our code , it must be that $ <var:k> = <nat:7> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> + <nat:1> $ once series of instructions is done . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:h> = <var:z> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \} \\ <var:P1> := <nat:6> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \} \\ <var:P1> := <var:P1> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \times <var:z> \} \\ <var:P2> := <nat:7> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \times <var:z> \land <var:P2> = <nat:7> \} \\ <var:P2> := <var:P2> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \times <var:z> \land <var:P2> = <nat:7> \times <var:z> \} \\ <var:P2> := <var:P2> * <var:h> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \times <var:z> \land <var:P2> = <nat:7> \times <var:z> ^ <nat:2> \} \\ <var:k> := <var:P2> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:P1> = <nat:6> \times <var:z> \land <var:k> = <nat:7> \times <var:z> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:P1> ; \\ \{ <var:h> = <var:z> \land <var:P0> = <nat:1> \land <var:k> = <nat:7> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> \} \\ <var:k> := <var:k> + <var:P0> \\ \{ <var:h> = <var:z> \land <var:k> = <nat:7> \times <var:z> ^ <nat:2> + <nat:6> \times <var:z> + <nat:1> \} \end{eqnarray} Hence , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:h> ; <var:P2> := <nat:7> ; <var:P2> := <var:P2> * <var:h> ; <var:P2> := <var:P2> * <var:h> ; <var:k> := <var:P2> ; <var:k> := <var:k> + <var:P1> ; <var:k> := <var:k> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:h> = <var:z> }} <def:poly> {{ <var:k> = <nat:7> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> * <var:z> /\ <var:P2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> * <var:z> /\ <var:P2> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> * <var:z> /\ <var:P2> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:6> * <var:z> /\ <var:k> = <nat:7> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:P0> = <nat:1> /\ <var:k> = <nat:7> * <var:z> ^ <nat:2> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:z> /\ <var:k> = <nat:7> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 