\begin{document} \begin{theorem} Let the following program in \emph{Imp} as \begin{verbatim} <var:N1> := <var:L> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:4> ; <var:Z> := <var:N1> <var:Z> := <var:Z> + <var:N0> \end{verbatim} Assuming it to be that $ <var:L> = <var:A> $ prior to running the set of commands it must be that we have $ <var:Z> = <nat:4> \times <var:A> + <nat:3> $ when program has finished . \end{theorem} \begin{proof} The proof of the set of instructions can be shown using Hoare techniques . Going to the next step , we have \begin{verbatim} { <var:L> = <var:A> } <var:N1> := <var:L> { <var:L> = <var:A> \land <var:N1> = <var:A> } { <var:L> = <var:A> \land <var:N1> = <var:A> } <var:N0> := <nat:3> { <var:L> = <var:A> \land <var:N1> = <var:A> \land <var:N0> = <nat:3> } \end{verbatim} This is ensured by the binding law given by Hoare techniques . Observing the proceeding lines of codefound in the set of commands , we have \begin{verbatim} { <var:L> = <var:A> } <var:N1> := <var:L> { <var:L> = <var:A> \land <var:N1> = <var:A> } { <var:L> = <var:A> \land <var:N1> = <var:A> } <var:N0> := <nat:3> { <var:L> = <var:A> \land <var:N1> = <var:A> \land <var:N0> = <nat:3> } { <var:L> = <var:A> \land <var:N1> = <var:A> \land <var:N0> = <nat:3> } <var:N1> := <var:N1> * <nat:4> { <var:L> = <var:A> \land <var:N1> = <nat:4> \times <var:A> \land <var:N0> = <nat:3> } \end{verbatim} This is guaranteed with the variable binding law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:L> = <var:A> }} <var:N1> := <var:L> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:4> ; <var:Z> := <var:N1> <var:Z> := <var:Z> + <var:N0> {{ <var:Z> = <nat:4> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:N1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:N1> = <var:A> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:N1> = <nat:4> * <var:A> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:N0> = <nat:3> /\ <var:Z> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:Z> = <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 