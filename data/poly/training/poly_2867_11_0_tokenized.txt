\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:j0> := <nat:5> ; <var:j2> := <nat:8> ; <var:j2> := <var:j2> * <var:x> ; <var:j2> := <var:j2> * <var:x> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:x> ; <var:j3> := <var:j3> * <var:x> ; <var:j3> := <var:j3> * <var:x> ; <var:n> := <var:j3> ; <var:n> := <var:n> + <var:j2> ; <var:n> := <var:n> + <var:j0> \end{verbatim} Assume $ <var:x> = <var:r> $ with some $ <var:r> \in \mathbb{Z}^+ $ ahead of running our program , it follows that $ <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:r> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \} \\ <var:j2> := <nat:8> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> \} \\ <var:j2> := <var:j2> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> \} \\ <var:j2> := <var:j2> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \} \\ <var:j3> := <nat:1> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \land <var:j3> = <nat:1> \} \\ <var:j3> := <var:j3> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \land <var:j3> = <nat:1> * <var:r> \} \\ <var:j3> := <var:j3> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \land <var:j3> = <nat:1> * <var:r> ^ <nat:2> \} \\ <var:j3> := <var:j3> * <var:x> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \land <var:j3> = <nat:1> * <var:r> ^ <nat:3> \} \\ <var:n> := <var:j3> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:j2> = <nat:8> * <var:r> ^ <nat:2> \land <var:n> = <nat:1> * <var:r> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:j2> ; \\ \{ <var:x> = <var:r> \land <var:j0> = <nat:5> \land <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:j0> \\ \{ <var:x> = <var:r> \land <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:5> \} \end{eqnarray} The application of usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:x> = <var:r> }} <var:j0> := <nat:5> ; <var:j2> := <nat:8> ; <var:j2> := <var:j2> * <var:x> ; <var:j2> := <var:j2> * <var:x> ; <var:j3> := <nat:1> ; <var:j3> := <var:j3> * <var:x> ; <var:j3> := <var:j3> * <var:x> ; <var:j3> := <var:j3> * <var:x> ; <var:n> := <var:j3> ; <var:n> := <var:n> + <var:j2> ; <var:n> := <var:n> + <var:j0> {{ <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:j3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:n> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:j0> = <nat:5> /\ <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:n> = <nat:1> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 