\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:R1> := <var:b> ; <var:R2> := <var:R1> * <var:b> ; <var:R3> := <var:R2> * <var:b> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:4> ; <var:Y> := <var:R3> <var:Y> := <var:Y> + <var:R2> <var:Y> := <var:Y> + <var:R1> <var:Y> := <var:Y> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for some natural numbers $ <var:J> $ --- that we have $ <var:b> = <var:J> $ ahead of the evaluation of our list of commands , it must be that $ <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:4> $ after list of commands has terminated . \end{theorem} \begin{proof} The argument for this segment of code can be accomplished using typical Hoare reasoning . Immediately after , we have \begin{verbatim} { <var:b> = <var:J> } <var:R1> := <var:b> { <var:b> = <var:J> \land <var:R1> = <var:J> } { <var:b> = <var:J> \land <var:R1> = <var:J> } <var:R2> := <var:R1> * <var:b> { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> } { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> } <var:R3> := <var:R2> * <var:b> { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> } { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> } <var:R0> := <nat:4> { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:b> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R1> := <var:R1> * <nat:1> { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R2> := <var:R2> * <nat:7> { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R3> = <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R3> := <var:R3> * <nat:4> { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R3> = <nat:4> \cdot <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R3> = <nat:4> \cdot <var:J> ^ <nat:3> \land <var:R0> = <nat:4> } <var:Y> := <var:R3{ <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> } { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R2> = <nat:7> \cdot <var:J> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> } <var:Y> := <var:Y> + <var:R2{ <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R0> = <nat:4> \land <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> } { <var:b> = <var:J> \land <var:R1> = <nat:1> \cdot <var:J> \land <var:R0> = <nat:4> \land <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> } <var:Y> := <var:Y> + <var:R1{ <var:b> = <var:J> \land <var:R0> = <nat:4> \land <var:Y> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:7> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> } \end{verbatim} This is shown by the inference rule defined in typical Hoare techniques . After , we see \begin{verbatim} { <var:b> = <var:J> } <var:R1> := <var:b> { <var:b> = <var:J> \land <var:R1> = <var:J> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:b> ; <var:R2> := <var:R1> * <var:b> ; <var:R3> := <var:R2> * <var:b> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:4> ; <var:Y> := <var:R3> <var:Y> := <var:Y> + <var:R2> <var:Y> := <var:Y> + <var:R1> <var:Y> := <var:Y> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:b> = <var:J> }} <def:poly> {{ <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <var:J> /\ <var:R2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <var:J> /\ <var:R2> = <var:J> ^ <nat:2> /\ <var:R3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <var:J> /\ <var:R2> = <var:J> ^ <nat:2> /\ <var:R3> = <var:J> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <nat:1> * <var:J> /\ <var:R2> = <var:J> ^ <nat:2> /\ <var:R3> = <var:J> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <nat:1> * <var:J> /\ <var:R2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:R3> = <var:J> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <nat:1> * <var:J> /\ <var:R2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:J> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <nat:1> * <var:J> /\ <var:R2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R1> = <nat:1> * <var:J> /\ <var:R0> = <nat:4> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:R0> = <nat:4> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:J> /\ <var:Y> = <nat:4> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 