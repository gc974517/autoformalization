\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:4> ; <var:V> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:N> = <var:P> $ before executing this segment of code , then $ <var:V> = <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:N> = <var:P> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:N> = <var:P> \land <var:k0> = <nat:4> \} \\ <var:V> := <var:k0> \\ \{ <var:N> = <var:P> \land <var:V> = <nat:4> \} \end{eqnarray} Given the preceding argument , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:V> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:N> = <var:P> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 