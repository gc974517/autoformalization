\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <nat:3> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:3> + <var:S> * <var:T> ; <var:S> := <nat:4> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> \end{verbatim} Allow that we have $ <var:T> = <var:a> $ prior to executing this code segment it holds that we see $ <var:S> = <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> $ once segment of code terminates . \end{theorem} \begin{proof} The course of logic for the code is accomplished with standard Hoare reasoning . Advancing to the proceeding bit of code contained in our program , we see the assignment line binding $ <nat:1> $ to $ <var:S>$ . This advances the condition $ \{ <var:T> = <var:a> \} $ toward the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> \} $ . This is ensured through the assignment rule of typical Hoare techniques . Jumping to the subsequent step seen in our code segment , we have the command \verb | <var:S> := <nat:3> + <var:S> * <var:T> ; | . This redefines $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> \} $ toward $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> + <nat:3> \} $ . This is deduced through the assignment scheme obtained from standard Hoare logic . Jumping to the following step contained in our series of instructions , we see the binding code \verb | <var:S> := <nat:2> + <var:S> * <var:T> ; | . This code forwards the precondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> + <nat:3> \} $ into $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> \} $ . This is given with the assignment inference rule obtained from Hoare logic . Stepping through , we have the variable update statement \verb | <var:S> := <nat:1> + <var:S> * <var:T> ; | . This redefines the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> \} $ to $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> \} $ . This is shown to be logically sound through the assignment scheme given in usual Hoare techniques . Moving on to the next step , we see the variable assignmet line \verb | <var:S> := <nat:3> + <var:S> * <var:T> ; | . This takes the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> \} $ as the postcondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} $ . Advancing , we have the command \verb | <var:S> := <nat:4> + <var:S> * <var:T> ; | . This advances the precondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} $ to $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> \} $ . This is known to be sound by the assignment scheme given by usual Hoare techniques . Moving on to the following piece of code contained in the series of commands , the assignment line giving $ <nat:1> + <var:S> * <var:T> $ as $ <var:S>$ . This code transfers the precondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> \} $ as the postcondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> \} $ . This is deduced using the assignment scheme obtained from Hoare reasoning . Taking a look at the upcoming piece of code contained in our list of commands , we have the binding code \verb | <var:S> := <nat:2> + <var:S> * <var:T> ; | . This command moves the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> \} $ to $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> \} $ . This is guaranteed using the assignment inference rule defined by Hoare techniques . Immediately after , the binding line \verb | <var:S> := <nat:1> + <var:S> * <var:T> ; | . This code takes the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> \} $ into the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> \} $ . This is deduced using the assignment law given in usual Hoare techniques . Following , we have the line yielding $ <nat:2> + <var:S> * <var:T> $ to $ <var:S>$ . This forwards $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> \} $ into the postcondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> \} $ . Moving on to the next step , we see the variable binding statement \verb | <var:S> := <nat:2> + <var:S> * <var:T> | . This transfers the condition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> \} $ into the postcondition $ \{ <var:T> = <var:a> \land <var:S> = <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:T> = <var:a> }} <var:S> := <nat:1> ; <var:S> := <nat:3> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:3> + <var:S> * <var:T> ; <var:S> := <nat:4> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:1> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> ; <var:S> := <nat:2> + <var:S> * <var:T> {{ <var:S> = <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:S> = <nat:1> * <var:a> ^ <nat:10> + <nat:3> * <var:a> ^ <nat:9> + <nat:2> * <var:a> ^ <nat:8> + <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 