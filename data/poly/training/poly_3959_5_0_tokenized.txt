\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:v> ; <var:n> := <var:y1> ; <var:n> := <var:n> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Assume it to hold that $ <var:v> = <var:L> $ ahead of executing the code segment , then we have $ <var:n> = <nat:9> \cdot <var:L> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic gives : \begin{eqnarray} \{ <var:v> = <var:L> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:v> = <var:L> \land <var:y0> = <nat:6> \} \\ <var:y1> := <nat:9> ; \\ \{ <var:v> = <var:L> \land <var:y0> = <nat:6> \land <var:y1> = <nat:9> \} \\ <var:y1> := <var:y1> * <var:v> ; \\ \{ <var:v> = <var:L> \land <var:y0> = <nat:6> \land <var:y1> = <nat:9> \cdot <var:L> \} \\ <var:n> := <var:y1> ; \\ \{ <var:v> = <var:L> \land <var:y0> = <nat:6> \land <var:n> = <nat:9> \cdot <var:L> \} \\ <var:n> := <var:n> + <var:y0> \\ \{ <var:v> = <var:L> \land <var:n> = <nat:9> \cdot <var:L> + <nat:6> \} \end{eqnarray} Continuing the evaluation of our set of commands gives us : \begin{eqnarray} \end{eqnarray} Hence , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:v> ; <var:n> := <var:y1> ; <var:n> := <var:n> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:v> = <var:L> }} <def:poly> {{ <var:n> = <nat:9> * <var:L> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:L> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:L> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:L> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:L> /\ <var:y0> = <nat:6> /\ <var:n> = <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:L> /\ <var:n> = <nat:9> * <var:L> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 