\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:w> ; <var:S2> := <var:S1> * <var:w> ; <var:S3> := <var:S2> * <var:w> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:S3> := <var:S3> * <nat:2> ; <var:p> := <var:S3> <var:p> := <var:p> + <var:S2> <var:p> := <var:p> + <var:S1> <var:p> := <var:p> + <var:S0> \end{verbatim} Assume it to hold that $ <var:w> = <var:D> $ before interpreting our set of instructions it follows that we have $ <var:p> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> $ after set of commands is done executing . \end{theorem} \begin{proof} The argument for this set of instructions can be given with standard Hoare logic . Honing in on the proceeding steps found in the program , we see \verb | { <var:w> = <var:D> } <var:S1> := <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> } | and \verb | { <var:w> = <var:D> \land <var:S1> = <var:D> } <var:S2> := <var:S1> * <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> } | . This is ensured with the law found in standard Hoare techniques . Honing in on the following statements found in our list of instructions , we see \verb | { <var:w> = <var:D> } <var:S1> := <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <var:D> } <var:S2> := <var:S1> * <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> } <var:S3> := <var:S2> * <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> } <var:S0> := <nat:2> { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } <var:S1> := <var:S1> * <nat:3> { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } <var:S2> := <var:S2> * <nat:2> { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <nat:2> \cdot <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } | , \verb | { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <nat:2> \cdot <var:D> ^ <nat:2> \land <var:S3> = <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } <var:S3> := <var:S3> * <nat:2> { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <nat:2> \cdot <var:D> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } | and \verb | { <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <nat:2> \cdot <var:D> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:D> ^ <nat:3> \land <var:S0> = <nat:2> } <var:p> := <var:S3{ <var:w> = <var:D> \land <var:S1> = <nat:3> \cdot <var:D> \land <var:S2> = <nat:2> \cdot <var:D> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:p> = <nat:2> \cdot <var:D> ^ <nat:3> } | . This is shown by the variable assignmet law from standard Hoare reasoning . Moving forward , we have \verb | { <var:w> = <var:D> } <var:S1> := <var:w> { <var:w> = <var:D> \land <var:S1> = <var:D> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <var:S1> := <var:w> ; <var:S2> := <var:S1> * <var:w> ; <var:S3> := <var:S2> * <var:w> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:S3> := <var:S3> * <nat:2> ; <var:p> := <var:S3> <var:p> := <var:p> + <var:S2> <var:p> := <var:p> + <var:S1> <var:p> := <var:p> + <var:S0> {{ <var:p> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <var:D> /\ <var:S2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <var:D> /\ <var:S2> = <var:D> ^ <nat:2> /\ <var:S3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <var:D> /\ <var:S2> = <var:D> ^ <nat:2> /\ <var:S3> = <var:D> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <nat:3> * <var:D> /\ <var:S2> = <var:D> ^ <nat:2> /\ <var:S3> = <var:D> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <nat:3> * <var:D> /\ <var:S2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:S3> = <var:D> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <nat:3> * <var:D> /\ <var:S2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:D> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <nat:3> * <var:D> /\ <var:S2> = <nat:2> * <var:D> ^ <nat:2> /\ <var:S0> = <nat:2> /\ <var:p> = <nat:2> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S1> = <nat:3> * <var:D> /\ <var:S0> = <nat:2> /\ <var:p> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:S0> = <nat:2> /\ <var:p> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:p> = <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 