\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:Q> ; <var:O2> := <nat:9> ; <var:O2> := <var:O2> * <var:Q> ; <var:O2> := <var:O2> * <var:Q> ; <var:c> := <var:O2> ; <var:c> := <var:c> + <var:O1> ; <var:c> := <var:c> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Allow it to hold that $ <var:Q> = <var:A> $ --- taking positive integer coefficients $ <var:A> $ --- prior to running this segment of code it follows that we have $ <var:c> = <nat:9> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:6> $ . \end{theorem} \begin{proof} The proof of the set of instructions can be seen through typical Hoare techniques . Moving on to the upcoming commands contained in our code , we have \begin{eqnarray} \{ <var:Q> = <var:A> \} \, <var:O0> := <nat:6> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \} \, <var:O1> := <nat:8> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} \, <var:O1> := <var:O1> * <var:Q> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \} \, <var:O2> := <nat:9> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \land <var:O2> = <nat:9> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \land <var:O2> = <nat:9> \} \, <var:O2> := <var:O2> * <var:Q> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \land <var:O2> = <nat:9> * <var:A> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \land <var:O2> = <nat:9> * <var:A> \} \, <var:O2> := <var:O2> * <var:Q> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \land <var:O2> = <nat:9> * <var:A> ^ <nat:2> \} \end{eqnarray} Focusing on the next steps found in the series of commands , we have \begin{eqnarray} \{ <var:Q> = <var:A> \} \, <var:O0> := <nat:6> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \} \, <var:O1> := <nat:8> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} \\ \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} \, <var:O1> := <var:O1> * <var:Q> \, \{ <var:Q> = <var:A> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> * <var:A> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:Q> ; <var:O2> := <nat:9> ; <var:O2> := <var:O2> * <var:Q> ; <var:O2> := <var:O2> * <var:Q> ; <var:c> := <var:O2> ; <var:c> := <var:c> + <var:O1> ; <var:c> := <var:c> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Q> = <var:A> }} <def:poly> {{ <var:c> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:A> /\ <var:O2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:A> /\ <var:O2> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:A> /\ <var:O2> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:A> /\ <var:c> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:O0> = <nat:6> /\ <var:c> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:c> = <nat:9> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 