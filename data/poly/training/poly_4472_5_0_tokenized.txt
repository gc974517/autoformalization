\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:2> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:y> ; <var:I> := <var:U1> ; <var:I> := <var:I> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Given --- given every positive coefficients $ <var:O> $ --- that $ <var:y> = <var:O> $ before the execution of the list of commands it holds that we see $ <var:I> = <nat:4> \times <var:O> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions is evident with typical Hoare techniques . Honing in on the subsequent statements in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:O> \} & <var:U0> := <nat:2> & \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \} \\ \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \} & <var:U1> := <nat:4> & \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \land <var:U1> = <nat:4> \} \\ \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \land <var:U1> = <nat:4> \} & <var:U1> := <var:U1> * <var:y> & \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \land <var:U1> = <nat:4> \times <var:O> \} \\ \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \land <var:U1> = <nat:4> \times <var:O> \} & <var:I> := <var:U1> & \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \land <var:I> = <nat:4> \times <var:O> \} \end{tabular} This is sound using the variable update rule of typical Hoare techniques . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:O> \} & <var:U0> := <nat:2> & \{ <var:y> = <var:O> \land <var:U0> = <nat:2> \} \end{tabular} This is shown to be logically sound by the variable binding inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:2> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:y> ; <var:I> := <var:U1> ; <var:I> := <var:I> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:y> = <var:O> }} <def:poly> {{ <var:I> = <nat:4> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:U0> = <nat:2> /\ <var:I> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I> = <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 