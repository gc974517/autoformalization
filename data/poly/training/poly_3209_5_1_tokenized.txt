\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:V> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:3> ; <var:C> := <var:b1> <var:C> := <var:C> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Given --- letting positive integers $ <var:L> $ --- that $ <var:V> = <var:L> $ prior to evaluating our series of commands , then $ <var:C> = <nat:3> \times <var:L> + <nat:7> $ once set of commands executes . \end{theorem} \begin{proof} Proving correctness for the series of commands is done using the below decorated code . \begin{eqnarray} \{ <var:V> = <var:L> \} \\ <var:b1> := <var:V> ; \\ \{ <var:V> = <var:L> \land <var:b1> = <var:L> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:V> = <var:L> \land <var:b1> = <var:L> \land <var:b0> = <nat:7> \} \\ <var:b1> := <var:b1> * <nat:3> ; \\ \{ <var:V> = <var:L> \land <var:b1> = <nat:3> \cdot <var:L> \land <var:b0> = <nat:7> \} \\ <var:C> := <var:b1> \\ \{ <var:V> = <var:L> \land <var:b0> = <nat:7> \land <var:C> = <nat:3> \cdot <var:L> \} \\ <var:C> := <var:C> + <var:b0> \\ \{ <var:V> = <var:L> \land <var:C> = <nat:3> \cdot <var:L> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:V> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:3> ; <var:C> := <var:b1> <var:C> := <var:C> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:V> = <var:L> }} <def:poly> {{ <var:C> = <nat:3> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:b1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:b1> = <var:L> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:b1> = <nat:3> * <var:L> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:b0> = <nat:7> /\ <var:C> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C> = <nat:3> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 