\begin{document} \begin{theorem} Take a set of commands as follows \begin{verbatim} <var:Y1> := <var:Q> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:g> := <var:Y1> <var:g> := <var:g> + <var:Y0> \end{verbatim} Allow it to be that $ <var:Q> = <var:W> $ , for some integers $ <var:W> $ , before executing this set of commands , it holds that $ <var:g> = <nat:4> \cdot <var:W> + <nat:6> $ after code segment has finished executing . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:W> \} \\ <var:Y1> := <var:Q> ; \\ \{ <var:Q> = <var:W> \land <var:Y1> = <var:W> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:Q> = <var:W> \land <var:Y1> = <var:W> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <var:Y1> * <nat:4> ; \\ \{ <var:Q> = <var:W> \land <var:Y1> = <nat:4> \times <var:W> \land <var:Y0> = <nat:6> \} \\ <var:g> := <var:Y1> \\ \{ <var:Q> = <var:W> \land <var:Y0> = <nat:6> \land <var:g> = <nat:4> \times <var:W> \} \\ <var:g> := <var:g> + <var:Y0> \\ \{ <var:Q> = <var:W> \land <var:g> = <nat:4> \times <var:W> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Q> = <var:W> }} <var:Y1> := <var:Q> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:g> := <var:Y1> <var:g> := <var:g> + <var:Y0> {{ <var:g> = <nat:4> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:Y1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:Y1> = <var:W> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:Y1> = <nat:4> * <var:W> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:Y0> = <nat:6> /\ <var:g> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:W> /\ <var:g> = <nat:4> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 