\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:A> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:7> ; <var:B> := <var:l1> <var:B> := <var:B> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:A> = <var:J> $ before executing our series of commands it follows that $ <var:B> = <nat:7> * <var:J> + <nat:4> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:A> = <var:J> \} \\ <var:l1> := <var:A> ; \\ \{ <var:A> = <var:J> \land <var:l1> = <var:J> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:A> = <var:J> \land <var:l1> = <var:J> \land <var:l0> = <nat:4> \} \\ <var:l1> := <var:l1> * <nat:7> ; \\ \{ <var:A> = <var:J> \land <var:l1> = <nat:7> \times <var:J> \land <var:l0> = <nat:4> \} \\ <var:B> := <var:l1> \\ \{ <var:A> = <var:J> \land <var:l0> = <nat:4> \land <var:B> = <nat:7> \times <var:J> \} \\ <var:B> := <var:B> + <var:l0> \\ \{ <var:A> = <var:J> \land <var:B> = <nat:7> \times <var:J> + <nat:4> \} \end{eqnarray} As a consequence , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:A> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:7> ; <var:B> := <var:l1> <var:B> := <var:B> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:A> = <var:J> }} <def:poly> {{ <var:B> = <nat:7> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:l1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:l1> = <var:J> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:l1> = <nat:7> * <var:J> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:l0> = <nat:4> /\ <var:B> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:J> /\ <var:B> = <nat:7> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 