\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:E> ; <var:c2> := <var:c1> * <var:E> ; <var:c3> := <var:c2> * <var:E> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:9> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Assume , for any positive integer coefficients $ <var:s> $ , $ <var:E> = <var:s> $ ahead of interpreting this list of commands , it holds that $ <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> $ after set of commands executes . \end{theorem} \begin{proof} The flow of logic for this code segment can be seen by usual Hoare logic . Honing in on the next bit of code contained in the series of commands , we have the assignment statement assigning $ <var:E> $ toward $ <var:c1>$ . This command takes the precondition $ \{ <var:E> = <var:s> \} $ to $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \} $ . Going forward , we see the variable assignmet line letting $ <var:c1> * <var:E> $ to $ <var:c2>$ . This code takes the condition $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \} $ toward the condition $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \} $ . This is given by the assignment rule found in standard Hoare logic . Moving on to the next step , we see the assignment command giving $ <var:c2> * <var:E> $ toward $ <var:c3>$ . This advances $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \} $ . Honing in on the subsequent command found in our set of commands , we have the assignment code giving $ <nat:6> $ as $ <var:c0>$ . This transfers the condition $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \} $ into the postcondition $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ . This is shown to be logically sound through the assignment rule given in usual Hoare techniques . Advancing on , we have the environment update line yielding $ <var:c1> * <nat:4> $ toward $ <var:c1>$ . This takes $ \{ <var:E> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ as the condition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ . Advancing , the binding line letting $ <var:c2> * <nat:9> $ as $ <var:c2>$ . This redefines $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ into $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ . This is guaranteed through the assignment rule defined in standard Hoare reasoning . Advancing to the following line contained in our series of commands , the variable update line \verb | <var:c3> := <var:c3> * <nat:9> ; | . This code redefines $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ as the postcondition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c3> = <nat:9> * <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ . Paying attention to the upcoming step contained in our segment of code , we see the variable assignmet command binding $ <var:c3$ to $ <var:A>$ . This statement advances $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c3> = <nat:9> * <var:s> ^ <nat:3> \land <var:c0> = <nat:6> \} $ toward the condition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> \} $ . This is ensured with the assignment inference rule found in typical Hoare techniques . Keeping momentum , the command \verb | <var:A> := <var:A> + <var:c2> | . This advances the condition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c2> = <nat:9> * <var:s> ^ <nat:2> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> \} $ as the postcondition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> \} $ . This is ensured using the assignment scheme found in usual Hoare techniques . Looking at the following line in the series of commands , we have the environment update line \verb | <var:A> := <var:A> + <var:c1> | . This takes the precondition $ \{ <var:E> = <var:s> \land <var:c1> = <nat:4> * <var:s> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> \} $ as the condition $ \{ <var:E> = <var:s> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ . This is shown using the assignment scheme given in usual Hoare reasoning . Advancing to the following piece of code seen in the series of instructions , we have the variable assignmet line giving $ <var:A> + <var:c0$ toward $ <var:A>$ . This redefines the precondition $ \{ <var:E> = <var:s> \land <var:c0> = <nat:6> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ toward the condition $ \{ <var:E> = <var:s> \land <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:E> ; <var:c2> := <var:c1> * <var:E> ; <var:c3> := <var:c2> * <var:E> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:9> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:E> = <var:s> }} <def:poly> {{ <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <nat:4> * <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <nat:4> * <var:s> /\ <var:c2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <nat:4> * <var:s> /\ <var:c2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:c3> = <nat:9> * <var:s> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <nat:4> * <var:s> /\ <var:c2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:c0> = <nat:6> /\ <var:A> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c1> = <nat:4> * <var:s> /\ <var:c0> = <nat:6> /\ <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:c0> = <nat:6> /\ <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:A> = <nat:9> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 