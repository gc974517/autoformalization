\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:1> ; <var:H> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Allow that $ <var:c> = <var:J> $ --- given every integers $ <var:J> $ --- before evaluating the list of instructions , it follows that we have $ <var:H> = <nat:1> $ after series of instructions finishes . \end{theorem} \begin{proof} The method of proof for the series of instructions is evident through usual Hoare logic . Moving onward , we see the binding line \verb | <var:Q0> := <nat:1> ; | . This advances $ \{ <var:c> = <var:J> \} $ as the postcondition $ \{ <var:c> = <var:J> \land <var:Q0> = <nat:1> \} $ . Moving forward , we see the variable update line \verb | <var:H> := <var:Q0> | . This takes $ \{ <var:c> = <var:J> \land <var:Q0> = <nat:1> \} $ into $ \{ <var:c> = <var:J> \land <var:H> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:H> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <def:poly> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 