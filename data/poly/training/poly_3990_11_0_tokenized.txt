\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:v> ; <var:a4> := <nat:4> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:P> := <var:a4> ; <var:P> := <var:P> + <var:a1> ; <var:P> := <var:P> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:v> = <var:A> $ before the evaluation of the set of commands , it must be that we see $ <var:P> = <nat:4> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> + <nat:2> $ when series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:A> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:2> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} \\ <var:a1> := <var:a1> * <var:v> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \} \\ <var:a4> := <nat:4> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:a4> = <nat:4> \} \\ <var:a4> := <var:a4> * <var:v> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:a4> = <nat:4> \cdot <var:A> \} \\ <var:a4> := <var:a4> * <var:v> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:a4> = <nat:4> \cdot <var:A> ^ <nat:2> \} \\ <var:a4> := <var:a4> * <var:v> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:a4> = <nat:4> \cdot <var:A> ^ <nat:3> \} \\ <var:a4> := <var:a4> * <var:v> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:a4> = <nat:4> \cdot <var:A> ^ <nat:4> \} \\ <var:P> := <var:a4> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \cdot <var:A> \land <var:P> = <nat:4> \cdot <var:A> ^ <nat:4> \} \\ <var:P> := <var:P> + <var:a1> ; \\ \{ <var:v> = <var:A> \land <var:a0> = <nat:2> \land <var:P> = <nat:4> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> \} \\ <var:P> := <var:P> + <var:a0> \\ \{ <var:v> = <var:A> \land <var:P> = <nat:4> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> + <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:v> ; <var:a4> := <nat:4> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:a4> := <var:a4> * <var:v> ; <var:P> := <var:a4> ; <var:P> := <var:P> + <var:a1> ; <var:P> := <var:P> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:v> = <var:A> }} <def:poly> {{ <var:P> = <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a4> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a4> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a4> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a4> = <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:a4> = <nat:4> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:A> /\ <var:P> = <nat:4> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:a0> = <nat:2> /\ <var:P> = <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:P> = <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 