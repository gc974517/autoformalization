\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:T> ; <var:x2> := <nat:7> ; <var:x2> := <var:x2> * <var:T> ; <var:x2> := <var:x2> * <var:T> ; <var:S> := <var:x2> ; <var:S> := <var:S> + <var:x1> ; <var:S> := <var:S> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:T> = <var:X> $ ahead of evaluating our series of instructions it follows that we see $ <var:S> = <nat:7> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> + <nat:3> $ after series of instructions is done . \end{theorem} \begin{proof} The flow of logic for this code is evident through standard Hoare techniques . Moving on , we see the assignment command \verb | <var:x0> := <nat:3> ; | . This transfers the precondition $ \{ <var:T> = <var:X> \} $ as the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \} $ . This is given by the assignment scheme defined by Hoare techniques . Advancing to the following bit of code contained in the code , we see the line \verb | <var:x1> := <nat:7> ; | . This transfers the precondition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \} $ into the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> \} $ . Following , the variable assignmet code \verb | <var:x1> := <var:x1> * <var:T> ; | . This takes the precondition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> \} $ toward $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \} $ . Jumping to the upcoming line of code seen in our list of commands , we see the binding command letting $ <nat:7> $ toward $ <var:x2>$ . This statement forwards $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \} $ into $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> \} $ . This is shown to be logically sound using the assignment scheme defined by usual Hoare techniques . Shifting focus toward the next step seen in our code , we see the variable update line assigning $ <var:x2> * <var:T> $ into $ <var:x2>$ . This command forwards $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> \} $ to the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> * <var:X> \} $ . Next , we see the assignment code \verb | <var:x2> := <var:x2> * <var:T> ; | . This line transfers the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> * <var:X> \} $ into the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> * <var:X> ^ <nat:2> \} $ . Going to the next step , the environment update code yielding $ <var:x2> $ to $ <var:S>$ . This advances the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:x2> = <nat:7> * <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:S> = <nat:7> * <var:X> ^ <nat:2> \} $ . After , we have the variable update code \verb | <var:S> := <var:S> + <var:x1> ; | . This command moves the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> * <var:X> \land <var:S> = <nat:7> * <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> \} $ . This is guaranteed through the assignment law from standard Hoare logic . After , we see the variable assignmet statement \verb | <var:S> := <var:S> + <var:x0> | . This transfers the precondition $ \{ <var:T> = <var:X> \land <var:x0> = <nat:3> \land <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> \} $ to the postcondition $ \{ <var:T> = <var:X> \land <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:T> ; <var:x2> := <nat:7> ; <var:x2> := <var:x2> * <var:T> ; <var:x2> := <var:x2> * <var:T> ; <var:S> := <var:x2> ; <var:S> := <var:S> + <var:x1> ; <var:S> := <var:S> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <def:poly> {{ <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:X> /\ <var:S> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:x0> = <nat:3> /\ <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:S> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 