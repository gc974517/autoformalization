\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:b> ; <var:E> := <var:E> * <var:b> ; <var:E> := <nat:2> + <var:E> * <var:b> ; <var:E> := <var:E> * <var:b> ; <var:E> := <nat:1> + <var:E> * <var:b> ; <var:E> := <nat:2> + <var:E> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:b> = <var:H> $ ahead of interpreting our program , then $ <var:E> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> $ after list of commands is done . \end{theorem} \begin{proof} Arguing the correctness of our program is clear with the below decorated list of instructions . \begin{eqnarray} \{ <var:b> = <var:H> \} \\ <var:E> := <nat:3> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> \} \\ <var:E> := <nat:1> + <var:E> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> + <nat:1> \} \\ <var:E> := <var:E> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + \} \\ <var:E> := <nat:2> + <var:E> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> \} \\ <var:E> := <var:E> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + \} \\ <var:E> := <nat:1> + <var:E> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> \} \\ <var:E> := <nat:2> + <var:E> * <var:b> \\ \{ <var:b> = <var:H> \land <var:E> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <nat:1> + <var:E> * <var:b> ; <var:E> := <var:E> * <var:b> ; <var:E> := <nat:2> + <var:E> * <var:b> ; <var:E> := <var:E> * <var:b> ; <var:E> := <nat:1> + <var:E> * <var:b> ; <var:E> := <nat:2> + <var:E> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:b> = <var:H> }} <def:poly> {{ <var:E> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:E> = <nat:3> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 