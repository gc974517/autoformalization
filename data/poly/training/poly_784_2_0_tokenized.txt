\begin{document} \begin{theorem} Define a code as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:F> := <var:k0> \end{verbatim} Given $ <var:W> = <var:M> $ given any whole numbers $ <var:M> $ ahead of executing the code segment then we have $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} Observe the below decorated list of commands . \begin{eqnarray} \{ <var:W> = <var:M> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:W> = <var:M> \land <var:k0> = <nat:2> \} \\ <var:F> := <var:k0> \\ \{ <var:W> = <var:M> \land <var:F> = <nat:2> \} \end{eqnarray} Using standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:W> = <var:M> }} <var:k0> := <nat:2> ; <var:F> := <var:k0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:M> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 