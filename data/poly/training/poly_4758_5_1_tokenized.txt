\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:d> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:5> ; <var:c> := <var:U1> <var:c> := <var:c> + <var:U0> \end{verbatim} Allow that $ <var:d> = <var:a> $ for all natural coefficients $ <var:a> $ before interpreting this set of instructions , then $ <var:c> = <nat:5> \times <var:a> + <nat:9> $ once list of commands terminates . \end{theorem} \begin{proof} Proving correctness for the series of instructions is given using standard Hoare logic . Focusing on the following bits of codein our set of instructions , we have \verb | { <var:d> = <var:a> } <var:U1> := <var:d> { <var:d> = <var:a> \land <var:U1> = <var:a> } | , \verb | { <var:d> = <var:a> \land <var:U1> = <var:a> } <var:U0> := <nat:9> { <var:d> = <var:a> \land <var:U1> = <var:a> \land <var:U0> = <nat:9> } | , \verb | { <var:d> = <var:a> \land <var:U1> = <var:a> \land <var:U0> = <nat:9> } <var:U1> := <var:U1> * <nat:5> { <var:d> = <var:a> \land <var:U1> = <nat:5> \cdot <var:a> \land <var:U0> = <nat:9> } | and \verb | { <var:d> = <var:a> \land <var:U1> = <nat:5> \cdot <var:a> \land <var:U0> = <nat:9> } <var:c> := <var:U1{ <var:d> = <var:a> \land <var:U0> = <nat:9> \land <var:c> = <nat:5> \cdot <var:a> } | . This is given with the assignment scheme from standard Hoare reasoning . Focusing on the following bit of code seen in our code , we have \verb | { <var:d> = <var:a> } <var:U1> := <var:d> { <var:d> = <var:a> \land <var:U1> = <var:a> } | . This is rigorously given with the binding rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:d> = <var:a> }} <var:U1> := <var:d> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:5> ; <var:c> := <var:U1> <var:c> := <var:c> + <var:U0> {{ <var:c> = <nat:5> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:U1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:U1> = <var:a> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:U1> = <nat:5> * <var:a> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:U0> = <nat:9> /\ <var:c> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:c> = <nat:5> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 