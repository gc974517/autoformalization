\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:7> ; <var:n> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:A> = <var:Q> $ prior to the execution of our list of instructions , it must be that $ <var:n> = <nat:7> $ after code is done . \end{theorem} \begin{proof} Notice this decorated set of instructions . \begin{eqnarray} \{ <var:A> = <var:Q> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:A> = <var:Q> \land <var:e0> = <nat:7> \} \\ <var:n> := <var:e0> \\ \{ <var:A> = <var:Q> \land <var:n> = <nat:7> \} \end{eqnarray} The application of usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:n> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:A> = <var:Q> }} <def:poly> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 