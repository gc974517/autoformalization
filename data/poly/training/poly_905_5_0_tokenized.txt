\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:2> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:i> ; <var:N> := <var:j1> ; <var:N> := <var:N> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Allowing that $ <var:i> = <var:E> $ before running our program , it must be that we have $ <var:N> = <nat:4> * <var:E> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:i> = <var:E> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:i> = <var:E> \land <var:j0> = <nat:2> \} \\ <var:j1> := <nat:4> ; \\ \{ <var:i> = <var:E> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \} \\ <var:j1> := <var:j1> * <var:i> ; \\ \{ <var:i> = <var:E> \land <var:j0> = <nat:2> \land <var:j1> = <nat:4> \cdot <var:E> \} \\ <var:N> := <var:j1> ; \\ \{ <var:i> = <var:E> \land <var:j0> = <nat:2> \land <var:N> = <nat:4> \cdot <var:E> \} \\ <var:N> := <var:N> + <var:j0> \\ \{ <var:i> = <var:E> \land <var:N> = <nat:4> \cdot <var:E> + <nat:2> \} \end{eqnarray} As a consequence , the series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:2> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:i> ; <var:N> := <var:j1> ; <var:N> := <var:N> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:i> = <var:E> }} <def:poly> {{ <var:N> = <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:j0> = <nat:2> /\ <var:N> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:N> = <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 