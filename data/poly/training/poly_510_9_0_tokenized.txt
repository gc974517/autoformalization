\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:Z> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:Z> ; <var:b2> := <var:b2> * <var:Z> ; <var:C> := <var:b2> ; <var:C> := <var:C> + <var:b1> ; <var:C> := <var:C> + <var:b0> \end{verbatim} Assuming it to be that $ <var:Z> = <var:I> $ , for every positive integer coefficients $ <var:I> $ , before evaluating this list of instructions , then $ <var:C> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the code is shown through this decorated code . \begin{eqnarray} \{ <var:Z> = <var:I> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:Z> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:I> \} \\ <var:b2> := <nat:7> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:I> \land <var:b2> = <nat:7> \} \\ <var:b2> := <var:b2> * <var:Z> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:I> \land <var:b2> = <nat:7> \cdot <var:I> \} \\ <var:b2> := <var:b2> * <var:Z> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:I> \land <var:b2> = <nat:7> \cdot <var:I> ^ <nat:2> \} \\ <var:C> := <var:b2> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:I> \land <var:C> = <nat:7> \cdot <var:I> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:b1> ; \\ \{ <var:Z> = <var:I> \land <var:b0> = <nat:8> \land <var:C> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> \} \\ <var:C> := <var:C> + <var:b0> \\ \{ <var:Z> = <var:I> \land <var:C> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Z> = <var:I> }} <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:Z> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:Z> ; <var:b2> := <var:b2> * <var:Z> ; <var:C> := <var:b2> ; <var:C> := <var:C> + <var:b1> ; <var:C> := <var:C> + <var:b0> {{ <var:C> = <nat:7> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:I> /\ <var:b2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:I> /\ <var:b2> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:I> /\ <var:b2> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:I> /\ <var:C> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:b0> = <nat:8> /\ <var:C> = <nat:7> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:I> /\ <var:C> = <nat:7> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 