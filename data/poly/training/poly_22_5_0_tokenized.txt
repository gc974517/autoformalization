\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:s> ; <var:c> := <var:t1> ; <var:c> := <var:c> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allowing that $ <var:s> = <var:Z> $ given any integers $ <var:Z> $ ahead of interpreting our program , it must be that we have $ <var:c> = <nat:4> * <var:Z> + <nat:4> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:s> = <var:Z> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:s> = <var:Z> \land <var:t0> = <nat:4> \} \\ <var:t1> := <nat:4> ; \\ \{ <var:s> = <var:Z> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \} \\ <var:t1> := <var:t1> * <var:s> ; \\ \{ <var:s> = <var:Z> \land <var:t0> = <nat:4> \land <var:t1> = <nat:4> \times <var:Z> \} \\ <var:c> := <var:t1> ; \\ \{ <var:s> = <var:Z> \land <var:t0> = <nat:4> \land <var:c> = <nat:4> \times <var:Z> \} \\ <var:c> := <var:c> + <var:t0> \\ \{ <var:s> = <var:Z> \land <var:c> = <nat:4> \times <var:Z> + <nat:4> \} \end{eqnarray} As a result , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:s> ; <var:c> := <var:t1> ; <var:c> := <var:c> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:s> = <var:Z> }} <def:poly> {{ <var:c> = <nat:4> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:c> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:c> = <nat:4> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 