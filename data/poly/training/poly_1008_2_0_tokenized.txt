\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:7> ; <var:V> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allow $ <var:K> = <var:b> $ ( letting $ <var:b> \in \mathbb{N} $ ) prior to the execution of the list of instructions it must be that we see $ <var:V> = <nat:7> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for this set of instructions can be accomplished with standard Hoare techniques . Taking a look at the following steps seen in our list of commands , we have \verb | { <var:K> = <var:b> } <var:J0> := <nat:7> { <var:K> = <var:b> \land <var:J0> = <nat:7> } | and \verb | { <var:K> = <var:b> \land <var:J0> = <nat:7> } <var:V> := <var:J0{ <var:K> = <var:b> \land <var:V> = <nat:7> } | . This is given using the environment update scheme obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:7> ; <var:V> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:K> = <var:b> }} <def:poly> {{ <var:V> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:V> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 