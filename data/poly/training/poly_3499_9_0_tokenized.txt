\begin{document} \begin{theorem} Define a set of commands such that \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:D> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:D> ; <var:k2> := <var:k2> * <var:D> ; <var:i> := <var:k2> ; <var:i> := <var:i> + <var:k1> ; <var:i> := <var:i> + <var:k0> \end{verbatim} Allow ( given all natural numbers $ <var:a> $ ) $ <var:D> = <var:a> $ ahead of executing the code segment , then $ <var:i> = <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:2> $ after list of commands has finished . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:a> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \} \\ <var:k1> := <nat:2> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> \} \\ <var:k1> := <var:k1> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> * <var:a> \} \\ <var:k2> := <nat:1> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> * <var:a> \land <var:k2> = <nat:1> \} \\ <var:k2> := <var:k2> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> * <var:a> \land <var:k2> = <nat:1> * <var:a> \} \\ <var:k2> := <var:k2> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> * <var:a> \land <var:k2> = <nat:1> * <var:a> ^ <nat:2> \} \\ <var:i> := <var:k2> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:k1> = <nat:2> * <var:a> \land <var:i> = <nat:1> * <var:a> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:k1> ; \\ \{ <var:D> = <var:a> \land <var:k0> = <nat:2> \land <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> \} \\ <var:i> := <var:i> + <var:k0> \\ \{ <var:D> = <var:a> \land <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> \} \end{eqnarray} Hence , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:D> = <var:a> }} <var:k0> := <nat:2> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:D> ; <var:k2> := <nat:1> ; <var:k2> := <var:k2> * <var:D> ; <var:k2> := <var:k2> * <var:D> ; <var:i> := <var:k2> ; <var:i> := <var:i> + <var:k1> ; <var:i> := <var:i> + <var:k0> {{ <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:a> /\ <var:k2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:a> /\ <var:k2> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:a> /\ <var:k2> = <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:2> * <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:k0> = <nat:2> /\ <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:i> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 