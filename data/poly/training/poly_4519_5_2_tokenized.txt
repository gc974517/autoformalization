\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:4> + <var:z> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Given , taking natural numbers $ <var:G> $ , $ <var:l> = <var:G> $ prior to running our series of instructions it follows that we see $ <var:z> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is evident using the following decorated program . \begin{eqnarray} \{ <var:l> = <var:G> \} \\ <var:z> := <nat:1> ; \\ \{ <var:l> = <var:G> \land <var:z> = <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:z> = <nat:1> \times <var:G> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:z> = <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:z> = <nat:1> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:2> \} \end{eqnarray} Allowing executing our series of instructions gives us : \begin{eqnarray} <var:z> := <nat:4> + <var:z> * <var:l> \\ \{ <var:l> = <var:G> \land <var:z> = <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:1> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:2> + <var:z> * <var:l> ; <var:z> := <nat:4> + <var:z> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:l> = <var:G> }} <def:poly> {{ <var:z> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:z> = <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:z> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:z> = <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:z> = <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 