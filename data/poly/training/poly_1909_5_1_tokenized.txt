\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:C1> := <var:Z> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:7> ; <var:f> := <var:C1> <var:f> := <var:f> + <var:C0> \end{verbatim} Given that $ <var:Z> = <var:j> $ --- given positive numbers $ <var:j> $ --- ahead of interpreting this series of commands then $ <var:f> = <nat:7> \times <var:j> + <nat:3> $ when series of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:j> \} \\ <var:C1> := <var:Z> ; \\ \{ <var:Z> = <var:j> \land <var:C1> = <var:j> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:Z> = <var:j> \land <var:C1> = <var:j> \land <var:C0> = <nat:3> \} \\ <var:C1> := <var:C1> * <nat:7> ; \\ \{ <var:Z> = <var:j> \land <var:C1> = <nat:7> \cdot <var:j> \land <var:C0> = <nat:3> \} \\ <var:f> := <var:C1> \\ \{ <var:Z> = <var:j> \land <var:C0> = <nat:3> \land <var:f> = <nat:7> \cdot <var:j> \} \\ <var:f> := <var:f> + <var:C0> \\ \{ <var:Z> = <var:j> \land <var:f> = <nat:7> \cdot <var:j> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Z> = <var:j> }} <var:C1> := <var:Z> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:7> ; <var:f> := <var:C1> <var:f> := <var:f> + <var:C0> {{ <var:f> = <nat:7> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:C1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:C1> = <var:j> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:C1> = <nat:7> * <var:j> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:C0> = <nat:3> /\ <var:f> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:f> = <nat:7> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 