\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:4> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:H> ; <var:t2> := <var:t2> * <var:H> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:H> ; <var:t3> := <var:t3> * <var:H> ; <var:t3> := <var:t3> * <var:H> ; <var:v> := <var:t3> ; <var:v> := <var:v> + <var:t2> ; <var:v> := <var:v> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:H> = <var:O> $ ahead of evaluating this list of instructions , it holds that we see $ <var:v> = <nat:2> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be given through standard Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:H> = <var:O> \} & <var:t0> := <nat:4> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} & <var:t2> := <nat:1> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} & <var:t2> := <var:t2> * <var:H> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> \} \end{tabular} This is known to be sound through the variable update law of typical Hoare techniques . Observing the next pieces of code in our code segment , \[ \begin{tabular} {rcl} \{ <var:H> = <var:O> \} & <var:t0> := <nat:4> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} & <var:t2> := <nat:1> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} & <var:t2> := <var:t2> * <var:H> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> \} & <var:t2> := <var:t2> * <var:H> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> ^ <nat:2> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> ^ <nat:2> \} & <var:t3> := <nat:2> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \cdot <var:O> ^ <nat:2> \land <var:t3> = <nat:2> \} \end{tabular} Moving forward to the following bits of codein the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:O> \} & <var:t0> := <nat:4> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} \\ \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} & <var:t2> := <nat:1> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \land <var:t2> = <nat:1> \} \end{tabular} Honing in on the proceeding piece of code seen in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:H> = <var:O> \} & <var:t0> := <nat:4> & \{ <var:H> = <var:O> \land <var:t0> = <nat:4> \} \end{tabular} This is ensured by the variable binding rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t2> := <nat:1> ; <var:t2> := <var:t2> * <var:H> ; <var:t2> := <var:t2> * <var:H> ; <var:t3> := <nat:2> ; <var:t3> := <var:t3> * <var:H> ; <var:t3> := <var:t3> * <var:H> ; <var:t3> := <var:t3> * <var:H> ; <var:v> := <var:t3> ; <var:v> := <var:v> + <var:t2> ; <var:v> := <var:v> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:H> = <var:O> }} <def:poly> {{ <var:v> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:t3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:t2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:v> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:t0> = <nat:4> /\ <var:v> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:O> /\ <var:v> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 