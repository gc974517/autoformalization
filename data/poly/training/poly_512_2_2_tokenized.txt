\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <nat:3> + <var:A> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:f> = <var:W> $ ahead of evaluating the series of instructions it follows that we see $ <var:A> = <nat:4> * <var:W> + <nat:3> $ after list of commands exits . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:f> = <var:W> \} \\ <var:A> := <nat:4> ; \\ \{ <var:f> = <var:W> \land <var:A> = <nat:4> \} \\ <var:A> := <nat:3> + <var:A> * <var:f> \\ \{ <var:f> = <var:W> \land <var:A> = <nat:4> * <var:W> + <nat:3> \} \end{eqnarray} Given the above , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:4> ; <var:A> := <nat:3> + <var:A> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:f> = <var:W> }} <def:poly> {{ <var:A> = <nat:4> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:W> /\ <var:A> = <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 