\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:c1> := <var:g> ; <var:c2> := <var:c1> * <var:g> ; <var:c3> := <var:c2> * <var:g> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:c3> := <var:c3> * <nat:3> ; <var:e> := <var:c3> <var:e> := <var:e> + <var:c1> <var:e> := <var:e> + <var:c0> \end{verbatim} Given that $ <var:g> = <var:L> $ prior to the evaluation of our series of commands it holds that $ <var:e> = <nat:3> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> + <nat:1> $ when list of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is given through Hoare reasoning . After , \verb | { <var:g> = <var:L> } <var:c1> := <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> } | and \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> } <var:c2> := <var:c1> * <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> } | . This is guaranteed through the variable binding law defined by usual Hoare techniques . Keeping momentum , we see \verb | { <var:g> = <var:L> } <var:c1> := <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> } | , \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> } <var:c2> := <var:c1> * <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> } | , \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> } <var:c3> := <var:c2> * <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> } | , \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> } <var:c0> := <nat:1> { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c0> = <nat:1> } | and \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c0> = <nat:1> } <var:c1> := <var:c1> * <nat:2> { <var:g> = <var:L> \land <var:c1> = <nat:2> \cdot <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c0> = <nat:1> } | . Looking at the proceeding commands found in our set of instructions , we see \verb | { <var:g> = <var:L> } <var:c1> := <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> } | and \verb | { <var:g> = <var:L> \land <var:c1> = <var:L> } <var:c2> := <var:c1> * <var:g> { <var:g> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> } | . This is given using the law given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <var:c1> := <var:g> ; <var:c2> := <var:c1> * <var:g> ; <var:c3> := <var:c2> * <var:g> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:c3> := <var:c3> * <nat:3> ; <var:e> := <var:c3> <var:e> := <var:e> + <var:c1> <var:e> := <var:e> + <var:c0> {{ <var:e> = <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <nat:2> * <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <nat:2> * <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c1> = <nat:2> * <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c0> = <nat:1> /\ <var:e> = <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:c0> = <nat:1> /\ <var:e> = <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:e> = <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 