\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:7> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:b> ; <var:J> := <var:G1> ; <var:J> := <var:J> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Assuming that $ <var:b> = <var:O> $ prior to running the series of instructions , it must be that we have $ <var:J> = <nat:4> * <var:O> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this program can be accomplished through typical Hoare reasoning . Advancing to the next step , we see \begin{verbatim} { <var:b> = <var:O> } <var:G0> := <nat:7> { <var:b> = <var:O> \land <var:G0> = <nat:7> } { <var:b> = <var:O> \land <var:G0> = <nat:7> } <var:G1> := <nat:4> { <var:b> = <var:O> \land <var:G0> = <nat:7> \land <var:G1> = <nat:4> } { <var:b> = <var:O> \land <var:G0> = <nat:7> \land <var:G1> = <nat:4> } <var:G1> := <var:G1> * <var:b> { <var:b> = <var:O> \land <var:G0> = <nat:7> \land <var:G1> = <nat:4> \times <var:O> } \end{verbatim} This is sound using the environment update inference rule defined by typical Hoare reasoning . Stepping forward , we see \begin{verbatim} { <var:b> = <var:O> } <var:G0> := <nat:7> { <var:b> = <var:O> \land <var:G0> = <nat:7> } \end{verbatim} This is ensured using the variable update inference rule of typical Hoare reasoning . Taking another step toward the upcoming line of code seen in the set of instructions , \begin{verbatim} { <var:b> = <var:O> } <var:G0> := <nat:7> { <var:b> = <var:O> \land <var:G0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:b> ; <var:J> := <var:G1> ; <var:J> := <var:J> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <def:poly> {{ <var:J> = <nat:4> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:G0> = <nat:7> /\ <var:J> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:J> = <nat:4> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 