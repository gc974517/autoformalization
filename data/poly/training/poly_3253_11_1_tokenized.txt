\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O3> := <var:O2> * <var:B> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:2> ; <var:X> := <var:O3> <var:X> := <var:X> + <var:O2> <var:X> := <var:X> + <var:O1> <var:X> := <var:X> + <var:O0> \end{verbatim} Assuming that $ <var:B> = <var:P> $ prior to interpreting our series of commands it follows that we have $ <var:X> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:5> $ when set of commands is done . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be seen by usual Hoare techniques . Considering the next pieces of code found in the set of commands , we see \begin{verbatim} { <var:B> = <var:P> } <var:O1> := <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> } { <var:B> = <var:P> \land <var:O1> = <var:P> } <var:O2> := <var:O1> * <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> } { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> } <var:O3> := <var:O2> * <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> } { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> } <var:O0> := <nat:5> { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> \land <var:O0> = <nat:5> } { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> \land <var:O0> = <nat:5> } <var:O1> := <var:O1> * <nat:8> { <var:B> = <var:P> \land <var:O1> = <nat:8> \cdot <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> \land <var:O0> = <nat:5> } \end{verbatim} Moving on to the next step , we see \begin{verbatim} { <var:B> = <var:P> } <var:O1> := <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> } \end{verbatim} This is rigorously given with the environment update rule given by typical Hoare techniques . Considering the subsequent piece of code found in the code segment , we see \begin{verbatim} { <var:B> = <var:P> } <var:O1> := <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> } \end{verbatim} Moving on , we have \begin{verbatim} { <var:B> = <var:P> } <var:O1> := <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> } \end{verbatim} This is ensured by the inference rule given by standard Hoare logic . Advancing , \begin{verbatim} { <var:B> = <var:P> } <var:O1> := <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> } { <var:B> = <var:P> \land <var:O1> = <var:P> } <var:O2> := <var:O1> * <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> } { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> } <var:O3> := <var:O2> * <var:B> { <var:B> = <var:P> \land <var:O1> = <var:P> \land <var:O2> = <var:P> ^ <nat:2> \land <var:O3> = <var:P> ^ <nat:3> } \end{verbatim} This is shown to be logically sound with the scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:B> = <var:P> }} <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O3> := <var:O2> * <var:B> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:8> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:2> ; <var:X> := <var:O3> <var:X> := <var:X> + <var:O2> <var:X> := <var:X> + <var:O1> <var:X> := <var:X> + <var:O0> {{ <var:X> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <var:P> /\ <var:O2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <var:P> /\ <var:O2> = <var:P> ^ <nat:2> /\ <var:O3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <var:P> /\ <var:O2> = <var:P> ^ <nat:2> /\ <var:O3> = <var:P> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <nat:8> * <var:P> /\ <var:O2> = <var:P> ^ <nat:2> /\ <var:O3> = <var:P> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <nat:8> * <var:P> /\ <var:O2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:O3> = <var:P> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <nat:8> * <var:P> /\ <var:O2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:O3> = <nat:2> * <var:P> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <nat:8> * <var:P> /\ <var:O2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:O0> = <nat:5> /\ <var:X> = <nat:2> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O1> = <nat:8> * <var:P> /\ <var:O0> = <nat:5> /\ <var:X> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:O0> = <nat:5> /\ <var:X> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:P> /\ <var:X> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 