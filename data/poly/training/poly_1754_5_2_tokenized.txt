\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:O> ; <var:V> := <nat:4> + <var:V> * <var:O> ; <var:V> := <var:V> * <var:O> ; <var:V> := <nat:3> + <var:V> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:O> = <var:G> $ before interpreting this list of instructions it follows that we see $ <var:V> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:3> $ once program is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:G> \} \\ <var:V> := <nat:4> ; \\ \{ <var:O> = <var:G> \land <var:V> = <nat:4> \} \\ <var:V> := <nat:3> + <var:V> * <var:O> ; \\ \{ <var:O> = <var:G> \land <var:V> = <nat:4> \cdot <var:G> + <nat:3> \} \\ <var:V> := <nat:4> + <var:V> * <var:O> ; \\ \{ <var:O> = <var:G> \land <var:V> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:4> \} \\ <var:V> := <var:V> * <var:O> ; \\ \{ <var:O> = <var:G> \land <var:V> = <nat:4> \cdot <var:G> ^ <nat:3> + <nat:3> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + \} \\ <var:V> := <nat:3> + <var:V> * <var:O> \\ \{ <var:O> = <var:G> \land <var:V> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:3> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:O> ; <var:V> := <nat:4> + <var:V> * <var:O> ; <var:V> := <var:V> * <var:O> ; <var:V> := <nat:3> + <var:V> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:O> = <var:G> }} <def:poly> {{ <var:V> = <nat:4> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:4> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:4> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:V> = <nat:4> * <var:G> ^ <nat:4> + <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 