\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:J0> := <nat:7> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:B> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:B> ; <var:J2> := <var:J2> * <var:B> ; <var:D> := <var:J2> ; <var:D> := <var:D> + <var:J1> ; <var:D> := <var:D> + <var:J0> \end{verbatim} Allowing that we have $ <var:B> = <var:T> $ before interpreting our set of commands it follows that we see $ <var:D> = <nat:9> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> + <nat:7> $ once code executes . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is demonstrated through typical Hoare techniques . Looking at the following line of code in the list of instructions , the variable binding line \verb | <var:J0> := <nat:7> ; | . This code moves the condition $ \{ <var:B> = <var:T> \} $ to the postcondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \} $ . Immediately after , we see the variable binding code \verb | <var:J1> := <nat:9> ; | . This statement advances the precondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \} $ toward the condition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \} $ . This is given by the assignment law given by standard Hoare reasoning . Taking a look at the subsequent statement seen in the series of instructions , we see the assignment command \verb | <var:J1> := <var:J1> * <var:B> ; | . This redefines the precondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \} $ toward the condition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \} $ . This is known to be sound using the assignment rule given by Hoare logic . Paying attention to the proceeding line of code found in our series of commands , the variable update line defining $ <nat:9> $ as $ <var:J2>$ . This transfers $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \} $ as the postcondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \} $ . Taking a look at the following step in our set of instructions , we have the variable update line letting $ <var:J2> * <var:B> $ into $ <var:J2>$ . This statement takes the condition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \} $ as $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \times <var:T> \} $ . Immediately following , we see the variable assignmet code \verb | <var:J2> := <var:J2> * <var:B> ; | . This command transfers $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \times <var:T> \} $ toward $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \times <var:T> ^ <nat:2> \} $ . Taking another step toward the following step seen in our list of instructions , the variable binding statement binding $ <var:J2> $ into $ <var:D>$ . This moves the precondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:J2> = <nat:9> \times <var:T> ^ <nat:2> \} $ to the postcondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:D> = <nat:9> \times <var:T> ^ <nat:2> \} $ . Focusing on the proceeding command found in our list of instructions , we see the line giving $ <var:D> + <var:J1> $ to $ <var:D>$ . This takes the precondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:J1> = <nat:9> \times <var:T> \land <var:D> = <nat:9> \times <var:T> ^ <nat:2> \} $ into the condition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:D> = <nat:9> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> \} $ . This is sound with the assignment inference rule in Hoare logic . Taking a look at the following line of code in the list of commands , the variable update command giving $ <var:D> + <var:J0$ to $ <var:D>$ . This code advances the precondition $ \{ <var:B> = <var:T> \land <var:J0> = <nat:7> \land <var:D> = <nat:9> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> \} $ to the postcondition $ \{ <var:B> = <var:T> \land <var:D> = <nat:9> \times <var:T> ^ <nat:2> + <nat:9> \times <var:T> + <nat:7> \} $ . This is shown using the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:B> = <var:T> }} <var:J0> := <nat:7> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:B> ; <var:J2> := <nat:9> ; <var:J2> := <var:J2> * <var:B> ; <var:J2> := <var:J2> * <var:B> ; <var:D> := <var:J2> ; <var:D> := <var:D> + <var:J1> ; <var:D> := <var:D> + <var:J0> {{ <var:D> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> * <var:T> /\ <var:J2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> * <var:T> /\ <var:J2> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> * <var:T> /\ <var:J2> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:9> * <var:T> /\ <var:D> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:J0> = <nat:7> /\ <var:D> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:D> = <nat:9> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 