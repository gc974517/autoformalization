\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:6> ; <var:i1> := <nat:5> ; <var:i1> := <var:i1> * <var:x> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:x> ; <var:i2> := <var:i2> * <var:x> ; <var:o> := <var:i2> ; <var:o> := <var:o> + <var:i1> ; <var:o> := <var:o> + <var:i0> \end{verbatim} Assuming that $ <var:x> = <var:Z> $ ahead of evaluating the code segment , it holds that $ <var:o> = <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:x> = <var:Z> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \} \\ <var:i1> := <nat:5> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \} \\ <var:i1> := <var:i1> * <var:x> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \cdot <var:Z> \} \\ <var:i2> := <nat:9> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \cdot <var:Z> \land <var:i2> = <nat:9> \} \\ <var:i2> := <var:i2> * <var:x> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \cdot <var:Z> \land <var:i2> = <nat:9> \cdot <var:Z> \} \\ <var:i2> := <var:i2> * <var:x> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \cdot <var:Z> \land <var:i2> = <nat:9> \cdot <var:Z> ^ <nat:2> \} \\ <var:o> := <var:i2> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:i1> = <nat:5> \cdot <var:Z> \land <var:o> = <nat:9> \cdot <var:Z> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:i1> ; \\ \{ <var:x> = <var:Z> \land <var:i0> = <nat:6> \land <var:o> = <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> \} \\ <var:o> := <var:o> + <var:i0> \\ \{ <var:x> = <var:Z> \land <var:o> = <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:6> \} \end{eqnarray} Considering the preceding argument , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <var:i0> := <nat:6> ; <var:i1> := <nat:5> ; <var:i1> := <var:i1> * <var:x> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:x> ; <var:i2> := <var:i2> * <var:x> ; <var:o> := <var:i2> ; <var:o> := <var:o> + <var:i1> ; <var:o> := <var:o> + <var:i0> {{ <var:o> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> * <var:Z> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> * <var:Z> /\ <var:i2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> * <var:Z> /\ <var:i2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:5> * <var:Z> /\ <var:o> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:i0> = <nat:6> /\ <var:o> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:o> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 