\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:5> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:1> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:W> := <var:v2> ; <var:W> := <var:W> + <var:v1> ; <var:W> := <var:W> + <var:v0> \end{verbatim} Given that we have $ <var:u> = <var:N> $ assuming some $ <var:N> $ ahead of running the list of instructions it must be that we have $ <var:W> = <nat:1> \times <var:N> ^ <nat:2> + <nat:9> \times <var:N> + <nat:5> $ when segment of code has executed . \end{theorem} \begin{proof} The course of logic for the code segment can be seen through Hoare techniques . Moving forward to the next line contained in our segment of code , we have the line \verb | <var:v0> := <nat:5> ; | . This forwards $ \{ <var:u> = <var:N> \} $ toward the postcondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \} $ . Considering the next bit of code contained in our list of commands , the variable update line \verb | <var:v1> := <nat:9> ; | . This line redefines the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \} $ into $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \} $ . This is sound through the assignment inference rule in typical Hoare reasoning . Advancing on , the variable assignmet command yielding $ <var:v1> * <var:u> $ into $ <var:v1>$ . This line forwards the precondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \} $ as $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \} $ . This is shown to be logically sound through the assignment rule of usual Hoare logic . Observing the next statement found in our segment of code , the variable binding command giving $ <nat:1> $ toward $ <var:v2>$ . This forwards the precondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \} $ as the postcondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \} $ . This is known to be sound with the assignment scheme of standard Hoare techniques . Keeping momentum , we see the line \verb | <var:v2> := <var:v2> * <var:u> ; | . This forwards the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \} $ as the postcondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \cdot <var:N> \} $ . Immediately following , we have the variable update line giving $ <var:v2> * <var:u> $ to $ <var:v2>$ . This redefines $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \cdot <var:N> \} $ to the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \cdot <var:N> ^ <nat:2> \} $ . Jumping to the upcoming line of code contained in the code segment , we have the assignment statement yielding $ <var:v2> $ toward $ <var:W>$ . This line redefines the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:v2> = <nat:1> \cdot <var:N> ^ <nat:2> \} $ toward the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:W> = <nat:1> \cdot <var:N> ^ <nat:2> \} $ . Keeping momentum , the command \verb | <var:W> := <var:W> + <var:v1> ; | . This moves the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:v1> = <nat:9> \cdot <var:N> \land <var:W> = <nat:1> \cdot <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:W> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> \} $ . Honing in on the next statement seen in the code , we have the assignment code \verb | <var:W> := <var:W> + <var:v0> | . This moves the condition $ \{ <var:u> = <var:N> \land <var:v0> = <nat:5> \land <var:W> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> \} $ into the postcondition $ \{ <var:u> = <var:N> \land <var:W> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:u> = <var:N> }} <var:v0> := <nat:5> ; <var:v1> := <nat:9> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:1> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:W> := <var:v2> ; <var:W> := <var:W> + <var:v1> ; <var:W> := <var:W> + <var:v0> {{ <var:W> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> * <var:N> /\ <var:v2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> * <var:N> /\ <var:v2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> * <var:N> /\ <var:v2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:9> * <var:N> /\ <var:W> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:v0> = <nat:5> /\ <var:W> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:N> /\ <var:W> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 