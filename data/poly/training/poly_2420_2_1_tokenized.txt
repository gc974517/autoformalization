\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:9> ; <var:y> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:B> = <var:k> $ ahead of the execution of this series of instructions , it holds that we see $ <var:y> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:k> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:B> = <var:k> \land <var:N0> = <nat:9> \} \\ <var:y> := <var:N0> \\ \{ <var:B> = <var:k> \land <var:y> = <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:9> ; <var:y> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:B> = <var:k> }} <def:poly> {{ <var:y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:k> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:k> /\ <var:y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 