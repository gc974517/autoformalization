\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:7> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:U> ; <var:h2> := <nat:2> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:y> := <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:U> = <var:v> $ ( with some $ <var:v> $ ) ahead of the execution of this program it holds that we have $ <var:y> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:7> $ . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:U> = <var:v> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \} \\ <var:h1> := <nat:5> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \} \\ <var:h1> := <var:h1> * <var:U> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \times <var:v> \} \\ <var:h2> := <nat:2> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \times <var:v> \land <var:h2> = <nat:2> \} \\ <var:h2> := <var:h2> * <var:U> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \times <var:v> \land <var:h2> = <nat:2> \times <var:v> \} \\ <var:h2> := <var:h2> * <var:U> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \times <var:v> \land <var:h2> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:y> := <var:h2> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \times <var:v> \land <var:y> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:h1> ; \\ \{ <var:U> = <var:v> \land <var:h0> = <nat:7> \land <var:y> = <nat:2> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> \} \\ <var:y> := <var:y> + <var:h0> \\ \{ <var:U> = <var:v> \land <var:y> = <nat:2> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> + <nat:7> \} \end{eqnarray} The application of Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:U> ; <var:h2> := <nat:2> ; <var:h2> := <var:h2> * <var:U> ; <var:h2> := <var:h2> * <var:U> ; <var:y> := <var:h2> ; <var:y> := <var:y> + <var:h1> ; <var:y> := <var:y> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:y> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:v> /\ <var:h2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:v> /\ <var:h2> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:v> /\ <var:h2> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:v> /\ <var:y> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:h0> = <nat:7> /\ <var:y> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:y> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 