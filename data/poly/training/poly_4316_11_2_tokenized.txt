\begin{document} \begin{theorem} Take a program : \begin{verbatim} <var:a> := <nat:3> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:3> + <var:a> * <var:u> ; <var:a> := <nat:3> + <var:a> * <var:u> \end{verbatim} Given $ <var:u> = <var:d> $ prior to the evaluation of the series of commands , it follows that $ <var:a> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> $ once code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:d> \} \\ <var:a> := <nat:3> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> \} \\ <var:a> := <nat:2> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> + <nat:2> \} \\ <var:a> := <nat:2> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} \\ <var:a> := <nat:2> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} \\ <var:a> := <nat:1> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} \\ <var:a> := <nat:2> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} \\ <var:a> := <nat:1> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} \\ <var:a> := <nat:2> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} \\ <var:a> := <nat:1> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} \\ <var:a> := <nat:3> + <var:a> * <var:u> ; \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:3> \} \\ <var:a> := <nat:3> + <var:a> * <var:u> \\ \{ <var:u> = <var:d> \land <var:a> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:u> = <var:d> }} <var:a> := <nat:3> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:2> + <var:a> * <var:u> ; <var:a> := <nat:1> + <var:a> * <var:u> ; <var:a> := <nat:3> + <var:a> * <var:u> ; <var:a> := <nat:3> + <var:a> * <var:u> {{ <var:a> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 