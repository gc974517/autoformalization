\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:j> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:3> ; <var:H> := <var:y1> <var:H> := <var:H> + <var:y0> \end{verbatim} Allowing that we have $ <var:j> = <var:M> $ before interpreting this program , it follows that we see $ <var:H> = <nat:3> \cdot <var:M> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is accomplished using Hoare logic . Shifting focus toward the following statements in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:M> \} & <var:y1> := <var:j> & \{ <var:j> = <var:M> \land <var:y1> = <var:M> \} \\ \{ <var:j> = <var:M> \land <var:y1> = <var:M> \} & <var:y0> := <nat:9> & \{ <var:j> = <var:M> \land <var:y1> = <var:M> \land <var:y0> = <nat:9> \} \\ \{ <var:j> = <var:M> \land <var:y1> = <var:M> \land <var:y0> = <nat:9> \} & <var:y1> := <var:y1> * <nat:3> & \{ <var:j> = <var:M> \land <var:y1> = <nat:3> \cdot <var:M> \land <var:y0> = <nat:9> \} \end{tabular} Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:j> = <var:M> \} & <var:y1> := <var:j> & \{ <var:j> = <var:M> \land <var:y1> = <var:M> \} \\ \{ <var:j> = <var:M> \land <var:y1> = <var:M> \} & <var:y0> := <nat:9> & \{ <var:j> = <var:M> \land <var:y1> = <var:M> \land <var:y0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:j> = <var:M> }} <var:y1> := <var:j> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:3> ; <var:H> := <var:y1> <var:H> := <var:H> + <var:y0> {{ <var:H> = <nat:3> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:y1> = <var:M> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:y1> = <nat:3> * <var:M> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:y0> = <nat:9> /\ <var:H> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:H> = <nat:3> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 