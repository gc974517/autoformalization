\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:Q> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> \end{verbatim} Assuming , given all $ <var:r> $ , it to hold that $ <var:Q> = <var:r> $ prior to interpreting this series of commands then we see $ <var:z> = <nat:2> * <var:r> + <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} The method of proof for this list of commands can be given by Hoare logic . Advancing to the proceeding step in our code segment , we have the environment update code assigning $ <nat:4> $ into $ <var:O0>$ . This moves the precondition $ \{ <var:Q> = <var:r> \} $ into the condition $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \} $ . Shifting focus toward the upcoming piece of code found in our program , we have the code defining $ <nat:2> $ toward $ <var:O1>$ . This line forwards $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \} $ as the condition $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:O1> = <nat:2> \} $ . Going to the next step , the binding statement \verb | <var:O1> := <var:O1> * <var:Q> ; | . This code moves the precondition $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:O1> = <nat:2> \} $ as $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:O1> = <nat:2> \cdot <var:r> \} $ . Looking at the proceeding step found in the set of instructions , the line \verb | <var:z> := <var:O1> ; | . This line advances the condition $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:O1> = <nat:2> \cdot <var:r> \} $ into $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:z> = <nat:2> \cdot <var:r> \} $ . This is rigorously given with the assignment rule defined by Hoare reasoning . Moving forward to the next statement found in our set of commands , we see the variable update code giving $ <var:z> + <var:O0$ toward $ <var:z>$ . This transfers $ \{ <var:Q> = <var:r> \land <var:O0> = <nat:4> \land <var:z> = <nat:2> \cdot <var:r> \} $ into $ \{ <var:Q> = <var:r> \land <var:z> = <nat:2> \cdot <var:r> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Q> = <var:r> }} <var:O0> := <nat:4> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:Q> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> {{ <var:z> = <nat:2> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:O0> = <nat:4> /\ <var:z> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:r> /\ <var:z> = <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 