\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:8> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:B> ; <var:v> := <var:X1> ; <var:v> := <var:v> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:B> = <var:S> $ assuming some $ <var:S> \in \mathbb{N} $ before executing this program then we see $ <var:v> = <nat:7> \times <var:S> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our program is clear through typical Hoare techniques . Jumping to the upcoming line of code found in the list of commands , the variable assignmet command \verb | <var:X0> := <nat:8> ; | . This command takes $ \{ <var:B> = <var:S> \} $ toward $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \} $ . Immediately following , we have the variable binding statement assigning $ <nat:7> $ into $ <var:X1>$ . This advances the precondition $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \} $ toward $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:X1> = <nat:7> \} $ . This is guaranteed using the assignment scheme given in typical Hoare reasoning . Stepping forward , we see the variable binding line defining $ <var:X1> * <var:B> $ into $ <var:X1>$ . This moves the precondition $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:X1> = <nat:7> \} $ to $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:X1> = <nat:7> \times <var:S> \} $ . This is shown using the assignment scheme from standard Hoare reasoning . Moving forward to the proceeding piece of code in the program , we have the variable binding code \verb | <var:v> := <var:X1> ; | . This statement moves $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:X1> = <nat:7> \times <var:S> \} $ to the condition $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:v> = <nat:7> \times <var:S> \} $ . Jumping to the proceeding line seen in the series of commands , we have the variable update code binding $ <var:v> + <var:X0$ to $ <var:v>$ . This command forwards the condition $ \{ <var:B> = <var:S> \land <var:X0> = <nat:8> \land <var:v> = <nat:7> \times <var:S> \} $ to the condition $ \{ <var:B> = <var:S> \land <var:v> = <nat:7> \times <var:S> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:8> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:B> ; <var:v> := <var:X1> ; <var:v> := <var:v> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:B> = <var:S> }} <def:poly> {{ <var:v> = <nat:7> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:X0> = <nat:8> /\ <var:v> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:S> /\ <var:v> = <nat:7> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 