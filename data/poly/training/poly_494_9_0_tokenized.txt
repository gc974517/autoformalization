\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:e> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:e> ; <var:P2> := <var:P2> * <var:e> ; <var:M> := <var:P2> ; <var:M> := <var:M> + <var:P1> ; <var:M> := <var:M> + <var:P0> \end{verbatim} Assume --- for $ <var:t> \in \mathbb{N} $ --- $ <var:e> = <var:t> $ ahead of evaluating the program , it holds that $ <var:M> = <nat:4> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:6> $ after program is done . \end{theorem} \begin{proof} The course of logic for our code segment is given using usual Hoare techniques . Moving on to the next step , we see the environment update statement yielding $ <nat:6> $ into $ <var:P0>$ . This statement advances $ \{ <var:e> = <var:t> \} $ into $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \} $ . This is shown through the assignment rule from usual Hoare logic . Moving on to the proceeding bit of code found in the set of instructions , we have the assignment command defining $ <nat:4> $ to $ <var:P1>$ . This command takes the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \} $ as the postcondition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \} $ . This is shown by the assignment law in typical Hoare techniques . Moving onward , we see the binding statement giving $ <var:P1> * <var:e> $ into $ <var:P1>$ . This redefines $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \} $ as the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \} $ . This is ensured with the assignment scheme found in standard Hoare reasoning . Advancing to the subsequent statement contained in our segment of code , we see the variable assignmet code yielding $ <nat:4> $ toward $ <var:P2>$ . This redefines the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \} $ into the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \} $ . Moving on to the next step , the variable update line \verb | <var:P2> := <var:P2> * <var:e> ; | . This moves the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \} $ to the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \cdot <var:t> \} $ . This is given with the assignment inference rule given by typical Hoare techniques . Taking a look at the subsequent command in the segment of code , the statement \verb | <var:P2> := <var:P2> * <var:e> ; | . This moves $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \cdot <var:t> \} $ toward $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ . This is sound with the assignment rule from typical Hoare reasoning . After , we have the binding line \verb | <var:M> := <var:P2> ; | . This moves the precondition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:P2> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ to the condition $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:M> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ . Honing in on the next bit of code seen in our series of commands , the assignment code \verb | <var:M> := <var:M> + <var:P1> ; | . This command transfers $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:P1> = <nat:4> \cdot <var:t> \land <var:M> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ toward $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:M> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> \} $ . This is rigorously given using the assignment inference rule in Hoare reasoning . Moving onward , the variable update statement letting $ <var:M> + <var:P0$ toward $ <var:M>$ . This code forwards $ \{ <var:e> = <var:t> \land <var:P0> = <nat:6> \land <var:M> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> \} $ into the condition $ \{ <var:e> = <var:t> \land <var:M> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:e> = <var:t> }} <var:P0> := <nat:6> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:e> ; <var:P2> := <nat:4> ; <var:P2> := <var:P2> * <var:e> ; <var:P2> := <var:P2> * <var:e> ; <var:M> := <var:P2> ; <var:M> := <var:M> + <var:P1> ; <var:M> := <var:M> + <var:P0> {{ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> * <var:t> /\ <var:P2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> * <var:t> /\ <var:P2> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> * <var:t> /\ <var:P2> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:4> * <var:t> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:P0> = <nat:6> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 