\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:q1> := <var:j> ; <var:q2> := <var:q1> * <var:j> ; <var:q3> := <var:q2> * <var:j> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:9> ; <var:q3> := <var:q3> * <nat:3> ; <var:K> := <var:q3> <var:K> := <var:K> + <var:q1> <var:K> := <var:K> + <var:q0> \end{verbatim} Given it to hold that $ <var:j> = <var:h> $ before executing this program then $ <var:K> = <nat:3> \times <var:h> ^ <nat:3> + <nat:9> \times <var:h> + <nat:9> $ after series of commands is done . \end{theorem} \begin{proof} The proof of the segment of code can be seen by Hoare techniques . Paying attention to the proceeding lines seen in our code segment , we have \begin{eqnarray} \{ <var:j> = <var:h> \} \, <var:q1> := <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <var:h> \} \, <var:q2> := <var:q1> * <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \} \, <var:q0> := <nat:9> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \land <var:q0> = <nat:9> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \land <var:q0> = <nat:9> \} \, <var:q1> := <var:q1> * <nat:9> \, \{ <var:j> = <var:h> \land <var:q1> = <nat:9> * <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \land <var:q0> = <nat:9> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <nat:9> * <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <var:h> ^ <nat:3> \land <var:q0> = <nat:9> \} \, <var:q3> := <var:q3> * <nat:3> \, \{ <var:j> = <var:h> \land <var:q1> = <nat:9> * <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q3> = <nat:3> * <var:h> ^ <nat:3> \land <var:q0> = <nat:9> \} \end{eqnarray} After , we see \begin{eqnarray} \{ <var:j> = <var:h> \} \, <var:q1> := <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \} \\ \{ <var:j> = <var:h> \land <var:q1> = <var:h> \} \, <var:q2> := <var:q1> * <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \} \end{eqnarray} Observing the upcoming line found in the series of commands , we see \begin{eqnarray} \{ <var:j> = <var:h> \} \, <var:q1> := <var:j> \, \{ <var:j> = <var:h> \land <var:q1> = <var:h> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:j> = <var:h> }} <var:q1> := <var:j> ; <var:q2> := <var:q1> * <var:j> ; <var:q3> := <var:q2> * <var:j> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:9> ; <var:q3> := <var:q3> * <nat:3> ; <var:K> := <var:q3> <var:K> := <var:K> + <var:q1> <var:K> := <var:K> + <var:q0> {{ <var:K> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <var:h> /\ <var:q2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q3> = <var:h> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <nat:9> * <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q3> = <var:h> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <nat:9> * <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q1> = <nat:9> * <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q0> = <nat:9> /\ <var:K> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:q0> = <nat:9> /\ <var:K> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:K> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 