\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:2> ; <var:W> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:e> = <var:J> $ ( taking natural coefficients $ <var:J> $ ) before executing this program it follows that we see $ <var:W> = <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of commands is given with Hoare reasoning . Taking another step toward the subsequent bits of codein the program , we have \begin{verbatim} { <var:e> = <var:J> } <var:Y0> := <nat:2> { <var:e> = <var:J> \land <var:Y0> = <nat:2> } { <var:e> = <var:J> \land <var:Y0> = <nat:2> } <var:W> := <var:Y0{ <var:e> = <var:J> \land <var:W> = <nat:2> } \end{verbatim} This is rigorously given with the law given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:W> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:e> = <var:J> }} <def:poly> {{ <var:W> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:W> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 