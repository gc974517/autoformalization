\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:F> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:4> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assume , assuming some integers $ <var:q> $ , it to hold that $ <var:F> = <var:q> $ before interpreting the segment of code it follows that $ <var:R> = <nat:4> * <var:q> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:q> \} \\ <var:W1> := <var:F> ; \\ \{ <var:F> = <var:q> \land <var:W1> = <var:q> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:F> = <var:q> \land <var:W1> = <var:q> \land <var:W0> = <nat:7> \} \\ <var:W1> := <var:W1> * <nat:4> ; \\ \{ <var:F> = <var:q> \land <var:W1> = <nat:4> \cdot <var:q> \land <var:W0> = <nat:7> \} \\ <var:R> := <var:W1> \\ \{ <var:F> = <var:q> \land <var:W0> = <nat:7> \land <var:R> = <nat:4> \cdot <var:q> \} \\ <var:R> := <var:R> + <var:W0> \\ \{ <var:F> = <var:q> \land <var:R> = <nat:4> \cdot <var:q> + <nat:7> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:F> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:4> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:F> = <var:q> }} <def:poly> {{ <var:R> = <nat:4> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:W1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:W1> = <var:q> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:W1> = <nat:4> * <var:q> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:W0> = <nat:7> /\ <var:R> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R> = <nat:4> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 