\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:f> ; <var:u> := <var:s1> ; <var:u> := <var:u> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Assuming that we have $ <var:f> = <var:q> $ ahead of executing our series of instructions , it must be that we have $ <var:u> = <nat:3> \cdot <var:q> + <nat:2> $ after set of instructions finishes . \end{theorem} \begin{proof} The method of proof for our segment of code is shown with usual Hoare techniques . Moving forward to the next step , we see the binding line yielding $ <nat:2> $ into $ <var:s0>$ . This command advances $ \{ <var:f> = <var:q> \} $ to the condition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \} $ . Moving forward , the environment update line \verb | <var:s1> := <nat:3> ; | . This statement advances $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \} $ as the condition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \} $ . Following , the binding line assigning $ <var:s1> * <var:f> $ to $ <var:s1>$ . This code advances the condition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \} $ toward the condition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \} $ . Considering the following piece of code found in our code segment , we have the binding statement assigning $ <var:s1> $ as $ <var:u>$ . This line transfers the condition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \} $ toward $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:q> \} $ . This is given using the assignment inference rule given by usual Hoare techniques . Moving forward to the subsequent step found in our list of commands , the variable assignmet command binding $ <var:u> + <var:s0$ toward $ <var:u>$ . This line redefines the precondition $ \{ <var:f> = <var:q> \land <var:s0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:q> \} $ as $ \{ <var:f> = <var:q> \land <var:u> = <nat:3> \cdot <var:q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:f> ; <var:u> := <var:s1> ; <var:u> := <var:u> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:f> = <var:q> }} <def:poly> {{ <var:u> = <nat:3> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:q> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:q> /\ <var:s0> = <nat:2> /\ <var:u> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:q> /\ <var:u> = <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 