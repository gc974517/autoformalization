\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:p> ; <var:J> := <var:c1> ; <var:J> := <var:J> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Given ( for all whole numbers $ <var:f> $ ) $ <var:p> = <var:f> $ before running our code segment , it follows that we see $ <var:J> = <nat:2> \cdot <var:f> + <nat:9> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be accomplished using Hoare reasoning . Taking another step toward the upcoming bits of codefound in our segment of code , \[ \begin{tabular} {rcl} \{ <var:p> = <var:f> \} & <var:c0> := <nat:9> & \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \} \\ \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \} & <var:c1> := <nat:2> & \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \} \\ \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \} & <var:c1> := <var:c1> * <var:p> & \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \cdot <var:f> \} \\ \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \cdot <var:f> \} & <var:J> := <var:c1> & \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \land <var:J> = <nat:2> \cdot <var:f> \} \end{tabular} Advancing to the subsequent step in our code , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:f> \} & <var:c0> := <nat:9> & \{ <var:p> = <var:f> \land <var:c0> = <nat:9> \} \end{tabular} This is known to be sound by the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:9> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:p> ; <var:J> := <var:c1> ; <var:J> := <var:J> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <def:poly> {{ <var:J> = <nat:2> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:c0> = <nat:9> /\ <var:J> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:J> = <nat:2> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 