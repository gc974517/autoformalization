\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:9> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:x> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:x> ; <var:o2> := <var:o2> * <var:x> ; <var:t> := <var:o2> ; <var:t> := <var:t> + <var:o1> ; <var:t> := <var:t> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:x> = <var:P> $ given every positive integers $ <var:P> $ before executing the list of instructions , then $ <var:t> = <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:P> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \} \\ <var:o1> := <nat:1> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \} \\ <var:o1> := <var:o1> * <var:x> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \times <var:P> \} \\ <var:o2> := <nat:1> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \times <var:P> \land <var:o2> = <nat:1> \} \\ <var:o2> := <var:o2> * <var:x> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \times <var:P> \land <var:o2> = <nat:1> \times <var:P> \} \\ <var:o2> := <var:o2> * <var:x> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \times <var:P> \land <var:o2> = <nat:1> \times <var:P> ^ <nat:2> \} \\ <var:t> := <var:o2> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:o1> = <nat:1> \times <var:P> \land <var:t> = <nat:1> \times <var:P> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:o1> ; \\ \{ <var:x> = <var:P> \land <var:o0> = <nat:9> \land <var:t> = <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> \} \\ <var:t> := <var:t> + <var:o0> \\ \{ <var:x> = <var:P> \land <var:t> = <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:9> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:x> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:x> ; <var:o2> := <var:o2> * <var:x> ; <var:t> := <var:o2> ; <var:t> := <var:t> + <var:o1> ; <var:t> := <var:t> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:x> = <var:P> }} <def:poly> {{ <var:t> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> * <var:P> /\ <var:o2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:1> * <var:P> /\ <var:t> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:o0> = <nat:9> /\ <var:t> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 