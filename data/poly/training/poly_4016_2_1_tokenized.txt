\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:g> := <var:o0> \end{verbatim} Assuming that we have $ <var:E> = <var:G> $ before executing our list of commands , it follows that we have $ <var:g> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is evident with Hoare reasoning . Advancing to the proceeding pieces of code seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:G> \} & <var:o0> := <nat:8> & \{ <var:E> = <var:G> \land <var:o0> = <nat:8> \} \\ \{ <var:E> = <var:G> \land <var:o0> = <nat:8> \} & <var:g> := <var:o0& \{ <var:E> = <var:G> \land <var:g> = <nat:8> \} \end{tabular} This is rigorously given using the environment update scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:E> = <var:G> }} <var:o0> := <nat:8> ; <var:g> := <var:o0> {{ <var:g> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:G> /\ <var:g> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 