\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:T> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:3> ; <var:E> := <var:c1> <var:E> := <var:E> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:T> = <var:O> $ ahead of running the code segment , then we have $ <var:E> = <nat:3> \times <var:O> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:O> \} \\ <var:c1> := <var:T> ; \\ \{ <var:T> = <var:O> \land <var:c1> = <var:O> \} \\ <var:c0> := <nat:1> ; \\ \{ <var:T> = <var:O> \land <var:c1> = <var:O> \land <var:c0> = <nat:1> \} \\ <var:c1> := <var:c1> * <nat:3> ; \\ \{ <var:T> = <var:O> \land <var:c1> = <nat:3> \times <var:O> \land <var:c0> = <nat:1> \} \\ <var:E> := <var:c1> \\ \{ <var:T> = <var:O> \land <var:c0> = <nat:1> \land <var:E> = <nat:3> \times <var:O> \} \\ <var:E> := <var:E> + <var:c0> \\ \{ <var:T> = <var:O> \land <var:E> = <nat:3> \times <var:O> + <nat:1> \} \end{eqnarray} Utilizing Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:T> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:3> ; <var:E> := <var:c1> <var:E> := <var:E> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:T> = <var:O> }} <def:poly> {{ <var:E> = <nat:3> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:c1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:c1> = <var:O> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:c1> = <nat:3> * <var:O> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:c0> = <nat:1> /\ <var:E> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:E> = <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 