\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} : \begin{verbatim} <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:2> ; <var:R> := <var:N3> <var:R> := <var:R> + <var:N2> <var:R> := <var:R> + <var:N1> <var:R> := <var:R> + <var:N0> \end{verbatim} Assuming it to hold that $ <var:T> = <var:K> $ prior to interpreting this series of instructions it must be that we have $ <var:R> = <nat:2> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:9> $ after segment of code has terminated . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be given through typical Hoare reasoning . Taking a look at the following lines contained in our list of commands , we see \begin{verbatim} { <var:T> = <var:K> } <var:N1> := <var:T> { <var:T> = <var:K> \land <var:N1> = <var:K> } { <var:T> = <var:K> \land <var:N1> = <var:K> } <var:N2> := <var:N1> * <var:T> { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> } { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> } <var:N3> := <var:N2> * <var:T> { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> } { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> } <var:N0> := <nat:9> { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } <var:N1> := <var:N1> * <nat:2> { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } <var:N2> := <var:N2> * <nat:7> { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N3> = <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } <var:N3> := <var:N3> * <nat:2> { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N3> = <nat:2> * <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N3> = <nat:2> * <var:K> ^ <nat:3> \land <var:N0> = <nat:9> } <var:R> := <var:N3{ <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:R> = <nat:2> * <var:K> ^ <nat:3> } { <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N2> = <nat:7> * <var:K> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:R> = <nat:2> * <var:K> ^ <nat:3> } <var:R> := <var:R> + <var:N2{ <var:T> = <var:K> \land <var:N1> = <nat:2> * <var:K> \land <var:N0> = <nat:9> \land <var:R> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:T> = <var:K> } <var:N1> := <var:T> { <var:T> = <var:K> \land <var:N1> = <var:K> } { <var:T> = <var:K> \land <var:N1> = <var:K> } <var:N2> := <var:N1> * <var:T> { <var:T> = <var:K> \land <var:N1> = <var:K> \land <var:N2> = <var:K> ^ <nat:2> } \end{verbatim} This is deduced with the binding law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:T> = <var:K> }} <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:2> ; <var:R> := <var:N3> <var:R> := <var:R> + <var:N2> <var:R> := <var:R> + <var:N1> <var:R> := <var:R> + <var:N0> {{ <var:R> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <var:K> ^ <nat:2> /\ <var:N3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <var:K> /\ <var:N2> = <var:K> ^ <nat:2> /\ <var:N3> = <var:K> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <nat:2> * <var:K> /\ <var:N2> = <var:K> ^ <nat:2> /\ <var:N3> = <var:K> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <nat:2> * <var:K> /\ <var:N2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:N3> = <var:K> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <nat:2> * <var:K> /\ <var:N2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:K> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <nat:2> * <var:K> /\ <var:N2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:N0> = <nat:9> /\ <var:R> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N1> = <nat:2> * <var:K> /\ <var:N0> = <nat:9> /\ <var:R> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:N0> = <nat:9> /\ <var:R> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:R> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 