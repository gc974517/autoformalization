\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:d> ; <var:P> := <nat:1> + <var:P> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given every positive coefficients $ <var:D> $ --- it to be that $ <var:d> = <var:D> $ before the execution of our list of instructions , it must be that $ <var:P> = <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> $ when series of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be given by usual Hoare techniques . Jumping to the proceeding step seen in the code segment , \[ \begin{tabular} {rcl} \{ <var:d> = <var:D> \} & <var:P> := <nat:4> & \{ <var:d> = <var:D> \land <var:P> = <nat:4> \} \end{tabular} Considering the proceeding statements contained in the series of commands , \[ \begin{tabular} {rcl} \{ <var:d> = <var:D> \} & <var:P> := <nat:4> & \{ <var:d> = <var:D> \land <var:P> = <nat:4> \} \\ \{ <var:d> = <var:D> \land <var:P> = <nat:4> \} & <var:P> := <nat:3> + <var:P> * <var:d> & \{ <var:d> = <var:D> \land <var:P> = <nat:4> \cdot <var:D> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:d> ; <var:P> := <nat:1> + <var:P> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:d> = <var:D> }} <def:poly> {{ <var:P> = <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:P> = <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:P> = <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 