\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:F1> := <var:I> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:W> := <var:F1> <var:W> := <var:W> + <var:F0> \end{verbatim} Assume that we have $ <var:I> = <var:h> $ ahead of executing the code segment it must be that we see $ <var:W> = <nat:3> * <var:h> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be seen using typical Hoare reasoning . Jumping to the proceeding statements seen in the list of commands , \begin{eqnarray} \{ <var:I> = <var:h> \} \, <var:F1> := <var:I> \, \{ <var:I> = <var:h> \land <var:F1> = <var:h> \} \\ \{ <var:I> = <var:h> \land <var:F1> = <var:h> \} \, <var:F0> := <nat:3> \, \{ <var:I> = <var:h> \land <var:F1> = <var:h> \land <var:F0> = <nat:3> \} \\ \{ <var:I> = <var:h> \land <var:F1> = <var:h> \land <var:F0> = <nat:3> \} \, <var:F1> := <var:F1> * <nat:3> \, \{ <var:I> = <var:h> \land <var:F1> = <nat:3> \times <var:h> \land <var:F0> = <nat:3> \} \end{eqnarray} Jumping to the subsequent line of code found in the list of commands , we see \begin{eqnarray} \{ <var:I> = <var:h> \} \, <var:F1> := <var:I> \, \{ <var:I> = <var:h> \land <var:F1> = <var:h> \} \end{eqnarray} This is guaranteed by the inference rule found in usual Hoare logic . Moving forward to the following command seen in the list of commands , we have \begin{eqnarray} \{ <var:I> = <var:h> \} \, <var:F1> := <var:I> \, \{ <var:I> = <var:h> \land <var:F1> = <var:h> \} \end{eqnarray} This is guaranteed by the variable assignmet inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:I> = <var:h> }} <var:F1> := <var:I> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:W> := <var:F1> <var:W> := <var:W> + <var:F0> {{ <var:W> = <nat:3> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:F1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:F1> = <var:h> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:F1> = <nat:3> * <var:h> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:F0> = <nat:3> /\ <var:W> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:W> = <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 