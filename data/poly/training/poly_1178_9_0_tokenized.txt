\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:8> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:z> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:z> ; <var:v2> := <var:v2> * <var:z> ; <var:Y> := <var:v2> ; <var:Y> := <var:Y> + <var:v1> ; <var:Y> := <var:Y> + <var:v0> \end{verbatim} Allowing that $ <var:z> = <var:s> $ before the evaluation of our series of commands it follows that $ <var:Y> = <nat:6> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> + <nat:8> $ once series of commands is done executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:z> = <var:s> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \} \\ <var:v1> := <nat:5> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \} \\ <var:v1> := <var:v1> * <var:z> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \cdot <var:s> \} \\ <var:v2> := <nat:6> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \cdot <var:s> \land <var:v2> = <nat:6> \} \\ <var:v2> := <var:v2> * <var:z> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \cdot <var:s> \land <var:v2> = <nat:6> \cdot <var:s> \} \\ <var:v2> := <var:v2> * <var:z> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \cdot <var:s> \land <var:v2> = <nat:6> \cdot <var:s> ^ <nat:2> \} \\ <var:Y> := <var:v2> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \cdot <var:s> \land <var:Y> = <nat:6> \cdot <var:s> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:v1> ; \\ \{ <var:z> = <var:s> \land <var:v0> = <nat:8> \land <var:Y> = <nat:6> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> \} \\ <var:Y> := <var:Y> + <var:v0> \\ \{ <var:z> = <var:s> \land <var:Y> = <nat:6> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> + <nat:8> \} \end{eqnarray} Given the above , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <var:v0> := <nat:8> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:z> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:z> ; <var:v2> := <var:v2> * <var:z> ; <var:Y> := <var:v2> ; <var:Y> := <var:Y> + <var:v1> ; <var:Y> := <var:Y> + <var:v0> {{ <var:Y> = <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:s> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:s> /\ <var:v2> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:s> /\ <var:v2> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:s> /\ <var:Y> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:v0> = <nat:8> /\ <var:Y> = <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:Y> = <nat:6> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 