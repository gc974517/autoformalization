\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:c> ; <var:K> := <var:P1> ; <var:K> := <var:K> + <var:P0> \end{verbatim} Assume $ <var:c> = <var:u> $ for any whole numbers $ <var:u> $ prior to the execution of this set of commands , it must be that $ <var:K> = <nat:6> \cdot <var:u> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions is demonstrated by Hoare techniques . Focusing on the upcoming line of code in the code , we see the variable assignmet statement \verb | <var:P0> := <nat:2> ; | . This command forwards the precondition $ \{ <var:c> = <var:u> \} $ as $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \} $ . This is given by the assignment rule given in usual Hoare techniques . Moving onward , we see the assignment code defining $ <nat:6> $ into $ <var:P1>$ . This statement advances the condition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \} $ . Focusing on the proceeding step contained in our set of commands , we see the binding line \verb | <var:P1> := <var:P1> * <var:c> ; | . This redefines the precondition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \} $ toward the postcondition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \cdot <var:u> \} $ . This is shown to be logically sound with the assignment inference rule of standard Hoare techniques . Advancing , we see the assignment statement \verb | <var:K> := <var:P1> ; | . This command takes the condition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:P1> = <nat:6> \cdot <var:u> \} $ to $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:K> = <nat:6> \cdot <var:u> \} $ . Stepping through , we have the assignment statement \verb | <var:K> := <var:K> + <var:P0> | . This line transfers the condition $ \{ <var:c> = <var:u> \land <var:P0> = <nat:2> \land <var:K> = <nat:6> \cdot <var:u> \} $ as $ \{ <var:c> = <var:u> \land <var:K> = <nat:6> \cdot <var:u> + <nat:2> \} $ . This is ensured with the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:c> = <var:u> }} <var:P0> := <nat:2> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:c> ; <var:K> := <var:P1> ; <var:K> := <var:K> + <var:P0> {{ <var:K> = <nat:6> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:P0> = <nat:2> /\ <var:K> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:u> /\ <var:K> = <nat:6> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 