\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:y> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:y> ; <var:W2> := <var:W2> * <var:y> ; <var:L> := <var:W2> ; <var:L> := <var:L> + <var:W1> ; <var:L> := <var:L> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:y> = <var:R> $ given all $ <var:R> \in \mathbb{Z}^+ $ prior to interpreting this code , it must be that we see $ <var:L> = <nat:8> \cdot <var:R> ^ <nat:2> + <nat:7> \cdot <var:R> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:y> = <var:R> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \} \\ <var:W1> := <nat:7> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> \} \\ <var:W1> := <var:W1> * <var:y> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:R> \} \\ <var:W2> := <nat:8> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:R> \land <var:W2> = <nat:8> \} \\ <var:W2> := <var:W2> * <var:y> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:R> \land <var:W2> = <nat:8> * <var:R> \} \\ <var:W2> := <var:W2> * <var:y> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:R> \land <var:W2> = <nat:8> * <var:R> ^ <nat:2> \} \\ <var:L> := <var:W2> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:W1> = <nat:7> * <var:R> \land <var:L> = <nat:8> * <var:R> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:W1> ; \\ \{ <var:y> = <var:R> \land <var:W0> = <nat:4> \land <var:L> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> \} \\ <var:L> := <var:L> + <var:W0> \\ \{ <var:y> = <var:R> \land <var:L> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:4> \} \end{eqnarray} Given the above , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W1> := <nat:7> ; <var:W1> := <var:W1> * <var:y> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:y> ; <var:W2> := <var:W2> * <var:y> ; <var:L> := <var:W2> ; <var:L> := <var:L> + <var:W1> ; <var:L> := <var:L> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:y> = <var:R> }} <def:poly> {{ <var:L> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:R> /\ <var:W2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:R> /\ <var:W2> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:R> /\ <var:W2> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:7> * <var:R> /\ <var:L> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:W0> = <nat:4> /\ <var:L> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:L> = <nat:8> * <var:R> ^ <nat:2> + <nat:7> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 