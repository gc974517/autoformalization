\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:3> ; <var:S> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:H> = <var:R> $ before interpreting our segment of code , it follows that $ <var:S> = <nat:3> $ when series of instructions is done executing . \end{theorem} \begin{proof} Using Hoare techniques yields : \begin{eqnarray} \{ <var:H> = <var:R> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:H> = <var:R> \land <var:u0> = <nat:3> \} \\ <var:S> := <var:u0> \\ \{ <var:H> = <var:R> \land <var:S> = <nat:3> \} \end{eqnarray} Therefore , our program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:S> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:H> = <var:R> }} <def:poly> {{ <var:S> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:R> /\ <var:S> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 