\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:k0> := <nat:8> ; <var:Z> := <var:k0> \end{verbatim} Allowing letting $ <var:g> \in \mathbb{N} $ it to be that $ <var:F> = <var:g> $ prior to running the code segment , it follows that $ <var:Z> = <nat:8> $ once list of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for this list of instructions is clear by Hoare reasoning . Considering the following step in our segment of code , we see the variable binding statement yielding $ <nat:8> $ as $ <var:k0>$ . This transfers the precondition $ \{ <var:F> = <var:g> \} $ toward the condition $ \{ <var:F> = <var:g> \land <var:k0> = <nat:8> \} $ . Going forward , the binding command \verb | <var:Z> := <var:k0> | . This takes the precondition $ \{ <var:F> = <var:g> \land <var:k0> = <nat:8> \} $ toward $ \{ <var:F> = <var:g> \land <var:Z> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <var:k0> := <nat:8> ; <var:Z> := <var:k0> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 