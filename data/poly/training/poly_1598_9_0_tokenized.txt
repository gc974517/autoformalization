\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:K> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:K> ; <var:B2> := <var:B2> * <var:K> ; <var:f> := <var:B2> ; <var:f> := <var:f> + <var:B1> ; <var:f> := <var:f> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:K> = <var:s> $ before executing the program , then $ <var:f> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> $ after list of commands exits . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is clear through typical Hoare reasoning . Looking at the proceeding line contained in the set of commands , we see the binding statement \verb | <var:B0> := <nat:4> ; | . This transfers $ \{ <var:K> = <var:s> \} $ to $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \} $ . This is sound by the assignment inference rule of typical Hoare techniques . Now , we have the variable update code defining $ <nat:4> $ toward $ <var:B1>$ . This statement advances $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \} $ into the postcondition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \} $ . Taking a look at the following command contained in our program , we see the code yielding $ <var:B1> * <var:K> $ to $ <var:B1>$ . This code advances the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \} $ into the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \} $ . Stepping through , the environment update line letting $ <nat:3> $ into $ <var:B2>$ . This code redefines the precondition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \} $ as $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \} $ . This is rigorously given through the assignment rule defined by typical Hoare reasoning . Considering the proceeding command in our series of instructions , we have the assignment statement \verb | <var:B2> := <var:B2> * <var:K> ; | . This statement takes the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \} $ to the postcondition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \cdot <var:s> \} $ . This is ensured with the assignment law given in standard Hoare techniques . Considering the subsequent step contained in the program , the variable update line \verb | <var:B2> := <var:B2> * <var:K> ; | . This statement forwards $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \cdot <var:s> \} $ toward the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \cdot <var:s> ^ <nat:2> \} $ . This is given with the assignment law of usual Hoare reasoning . After , the variable binding code \verb | <var:f> := <var:B2> ; | . This advances the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:B2> = <nat:3> \cdot <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:f> = <nat:3> \cdot <var:s> ^ <nat:2> \} $ . Moving forward to the next step , the variable update code assigning $ <var:f> + <var:B1> $ toward $ <var:f>$ . This advances the condition $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \cdot <var:s> \land <var:f> = <nat:3> \cdot <var:s> ^ <nat:2> \} $ to $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:f> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> \} $ . Honing in on the proceeding step contained in our series of commands , we have the environment update statement letting $ <var:f> + <var:B0$ into $ <var:f>$ . This code advances $ \{ <var:K> = <var:s> \land <var:B0> = <nat:4> \land <var:f> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> \} $ into the condition $ \{ <var:K> = <var:s> \land <var:f> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:K> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:K> ; <var:B2> := <var:B2> * <var:K> ; <var:f> := <var:B2> ; <var:f> := <var:f> + <var:B1> ; <var:f> := <var:f> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <def:poly> {{ <var:f> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:s> /\ <var:B2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:s> /\ <var:B2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:s> /\ <var:B2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:s> /\ <var:f> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B0> = <nat:4> /\ <var:f> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:f> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 