\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:5> ; <var:T> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assuming taking whole numbers $ <var:e> $ it to be that $ <var:b> = <var:e> $ prior to running this program it must be that we see $ <var:T> = <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our program can be demonstrated with usual Hoare reasoning . Taking a look at the next line found in the code segment , we have \begin{eqnarray} \{ <var:b> = <var:e> \} \, <var:q0> := <nat:5> \, \{ <var:b> = <var:e> \land <var:q0> = <nat:5> \} \end{eqnarray} Going to the next step , we have \begin{eqnarray} \{ <var:b> = <var:e> \} \, <var:q0> := <nat:5> \, \{ <var:b> = <var:e> \land <var:q0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:T> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:b> = <var:e> }} <def:poly> {{ <var:T> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:T> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 