\begin{document} \begin{theorem} Define a list of instructions : \begin{verbatim} <var:i0> := <nat:6> ; <var:U> := <var:i0> \end{verbatim} Assume , given some positive numbers $ <var:d> $ , $ <var:r> = <var:d> $ prior to running the list of commands then $ <var:U> = <nat:6> $ once list of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be demonstrated using Hoare techniques . Focusing on the following line seen in the series of commands , we see the variable assignmet code \verb | <var:i0> := <nat:6> ; | . This moves the condition $ \{ <var:r> = <var:d> \} $ toward the condition $ \{ <var:r> = <var:d> \land <var:i0> = <nat:6> \} $ . Moving forward , we see the variable binding code defining $ <var:i0$ toward $ <var:U>$ . This statement transfers the condition $ \{ <var:r> = <var:d> \land <var:i0> = <nat:6> \} $ into $ \{ <var:r> = <var:d> \land <var:U> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:r> = <var:d> }} <var:i0> := <nat:6> ; <var:U> := <var:i0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 