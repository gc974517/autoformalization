\begin{document} \begin{theorem} Let the following series of instructions : \begin{verbatim} <var:j1> := <var:R> ; <var:j2> := <var:j1> * <var:R> ; <var:j3> := <var:j2> * <var:R> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:8> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} Assume it to be that $ <var:R> = <var:J> $ before running the series of commands it must be that we have $ <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is given with standard Hoare reasoning . Focusing on the next step contained in our list of commands , we have the code \verb | <var:j1> := <var:R> ; | . This code forwards the condition $ \{ <var:R> = <var:J> \} $ toward the condition $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \} $ . This is given by the assignment law defined by usual Hoare reasoning . Immediately following , we have the variable assignmet code defining $ <var:j1> * <var:R> $ into $ <var:j2>$ . This moves $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \} $ into the postcondition $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} $ . This is given through the assignment law given in typical Hoare techniques . Shifting focus toward the upcoming command seen in the set of commands , we see the assignment statement \verb | <var:j3> := <var:j2> * <var:R> ; | . This code moves $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} $ to $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} $ . Honing in on the next command seen in the code , the command \verb | <var:j0> := <nat:4> ; | . This line redefines the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} $ toward $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ . Advancing on , we have the line \verb | <var:j1> := <var:j1> * <nat:8> ; | . This line moves the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ . This is known to be sound by the assignment law obtained from Hoare techniques . Honing in on the following line in the list of commands , we see the assignment command \verb | <var:j2> := <var:j2> * <nat:7> ; | . This command redefines the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ toward the condition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ . This is deduced through the assignment inference rule in standard Hoare reasoning . Going forward , the command letting $ <var:j3> * <nat:8> $ to $ <var:j3>$ . This statement transfers the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ into $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j3> = <nat:8> \times <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ . Taking another step toward the next line of code contained in our set of commands , the statement \verb | <var:a> := <var:j3> | . This moves the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j3> = <nat:8> \times <var:J> ^ <nat:3> \land <var:j0> = <nat:4> \} $ to the condition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment law defined by typical Hoare reasoning . Moving on to the next bit of code found in our series of instructions , we have the assignment command \verb | <var:a> := <var:a> + <var:j2> | . This advances $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j2> = <nat:7> \times <var:J> ^ <nat:2> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> \} $ . Considering the proceeding command seen in our series of commands , we have the variable update code assigning $ <var:a> + <var:j1$ as $ <var:a>$ . This code forwards the precondition $ \{ <var:R> = <var:J> \land <var:j1> = <nat:8> \times <var:J> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> \} $ to the condition $ \{ <var:R> = <var:J> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> \} $ . Moving forward to the upcoming line of code in the code , we have the command \verb | <var:a> := <var:a> + <var:j0> | . This redefines the condition $ \{ <var:R> = <var:J> \land <var:j0> = <nat:4> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> \} $ as the postcondition $ \{ <var:R> = <var:J> \land <var:a> = <nat:8> \times <var:J> ^ <nat:3> + <nat:7> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:R> = <var:J> }} <var:j1> := <var:R> ; <var:j2> := <var:j1> * <var:R> ; <var:j3> := <var:j2> * <var:R> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:8> ; <var:a> := <var:j3> <var:a> := <var:a> + <var:j2> <var:a> := <var:a> + <var:j1> <var:a> := <var:a> + <var:j0> {{ <var:a> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <nat:8> * <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <nat:8> * <var:J> /\ <var:j2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <nat:8> * <var:J> /\ <var:j2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:j3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <nat:8> * <var:J> /\ <var:j2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:j0> = <nat:4> /\ <var:a> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j1> = <nat:8> * <var:J> /\ <var:j0> = <nat:4> /\ <var:a> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:j0> = <nat:4> /\ <var:a> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a> = <nat:8> * <var:J> ^ <nat:3> + <nat:7> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 