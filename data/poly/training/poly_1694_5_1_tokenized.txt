\begin{document} \begin{theorem} Consider the following set of commands such that \begin{verbatim} <var:h1> := <var:M> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:3> ; <var:l> := <var:h1> <var:l> := <var:l> + <var:h0> \end{verbatim} Given ( with some positive integers $ <var:J> $ ) that we have $ <var:M> = <var:J> $ ahead of the execution of this series of commands it must be that we have $ <var:l> = <nat:3> \cdot <var:J> + <nat:2> $ once series of instructions terminates . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is done through usual Hoare reasoning . Focusing on the next pieces of code seen in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:M> = <var:J> \} & <var:h1> := <var:M> & \{ <var:M> = <var:J> \land <var:h1> = <var:J> \} \\ \{ <var:M> = <var:J> \land <var:h1> = <var:J> \} & <var:h0> := <nat:2> & \{ <var:M> = <var:J> \land <var:h1> = <var:J> \land <var:h0> = <nat:2> \} \end{tabular} Going forward , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:J> \} & <var:h1> := <var:M> & \{ <var:M> = <var:J> \land <var:h1> = <var:J> \} \\ \{ <var:M> = <var:J> \land <var:h1> = <var:J> \} & <var:h0> := <nat:2> & \{ <var:M> = <var:J> \land <var:h1> = <var:J> \land <var:h0> = <nat:2> \} \\ \{ <var:M> = <var:J> \land <var:h1> = <var:J> \land <var:h0> = <nat:2> \} & <var:h1> := <var:h1> * <nat:3> & \{ <var:M> = <var:J> \land <var:h1> = <nat:3> * <var:J> \land <var:h0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:M> = <var:J> }} <var:h1> := <var:M> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:3> ; <var:l> := <var:h1> <var:l> := <var:l> + <var:h0> {{ <var:l> = <nat:3> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:J> /\ <var:h1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:J> /\ <var:h1> = <var:J> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:J> /\ <var:h1> = <nat:3> * <var:J> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:J> /\ <var:h0> = <nat:2> /\ <var:l> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:J> /\ <var:l> = <nat:3> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 