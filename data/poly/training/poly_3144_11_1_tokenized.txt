\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:t> ; <var:d2> := <var:d1> * <var:t> ; <var:d3> := <var:d2> * <var:t> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:1> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:5> ; <var:B> := <var:d3> <var:B> := <var:B> + <var:d2> <var:B> := <var:B> + <var:d1> <var:B> := <var:B> + <var:d0> \end{verbatim} Assume $ <var:t> = <var:Q> $ for all positive coefficients $ <var:Q> $ ahead of executing this list of commands it holds that $ <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:5> $ after program finishes . \end{theorem} \begin{proof} The way to prove correctness for this code segment is clear with the below decorated code segment . \begin{eqnarray} \{ <var:t> = <var:Q> \} \\ <var:d1> := <var:t> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <var:Q> \} \\ <var:d2> := <var:d1> * <var:t> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:t> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \} \\ <var:d0> := <nat:5> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \land <var:d0> = <nat:5> \} \\ <var:d1> := <var:d1> * <nat:1> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <nat:1> * <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \land <var:d0> = <nat:5> \} \\ <var:d2> := <var:d2> * <nat:1> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <nat:1> * <var:Q> \land <var:d2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \land <var:d0> = <nat:5> \} \\ <var:d3> := <var:d3> * <nat:5> ; \\ \{ <var:t> = <var:Q> \land <var:d1> = <nat:1> * <var:Q> \land <var:d2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:d3> = <nat:5> * <var:Q> ^ <nat:3> \land <var:d0> = <nat:5> \} \\ <var:B> := <var:d3> \\ \{ <var:t> = <var:Q> \land <var:d1> = <nat:1> * <var:Q> \land <var:d2> = <nat:1> * <var:Q> ^ <nat:2> \land <var:d0> = <nat:5> \land <var:B> = <nat:5> * <var:Q> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:d2> \\ \{ <var:t> = <var:Q> \land <var:d1> = <nat:1> * <var:Q> \land <var:d0> = <nat:5> \land <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:d1> \\ \{ <var:t> = <var:Q> \land <var:d0> = <nat:5> \land <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> \} \\ <var:B> := <var:B> + <var:d0> \\ \{ <var:t> = <var:Q> \land <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:5> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:t> = <var:Q> }} <var:d1> := <var:t> ; <var:d2> := <var:d1> * <var:t> ; <var:d3> := <var:d2> * <var:t> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:1> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:5> ; <var:B> := <var:d3> <var:B> := <var:B> + <var:d2> <var:B> := <var:B> + <var:d1> <var:B> := <var:B> + <var:d0> {{ <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <nat:1> * <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <nat:1> * <var:Q> /\ <var:d2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <nat:1> * <var:Q> /\ <var:d2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <nat:1> * <var:Q> /\ <var:d2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:d0> = <nat:5> /\ <var:B> = <nat:5> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d1> = <nat:1> * <var:Q> /\ <var:d0> = <nat:5> /\ <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:d0> = <nat:5> /\ <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:B> = <nat:5> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 