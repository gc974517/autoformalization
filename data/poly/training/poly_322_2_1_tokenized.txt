\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:1> ; <var:H> := <var:F0> \end{verbatim} Assuming it to hold that $ <var:o> = <var:G> $ before the evaluation of the code segment , it follows that we have $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be shown through standard Hoare logic . Next , we see \begin{verbatim} { <var:o> = <var:G> } <var:F0> := <nat:1> { <var:o> = <var:G> \land <var:F0> = <nat:1> } { <var:o> = <var:G> \land <var:F0> = <nat:1> } <var:H> := <var:F0{ <var:o> = <var:G> \land <var:H> = <nat:1> } \end{verbatim} This is sound using the environment update scheme given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:o> = <var:G> }} <var:F0> := <nat:1> ; <var:H> := <var:F0> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 