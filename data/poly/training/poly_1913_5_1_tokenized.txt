\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:L> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:7> ; <var:P> := <var:n1> <var:P> := <var:P> + <var:n0> \end{verbatim} Assuming it to be that $ <var:L> = <var:E> $ before running this list of instructions , it follows that we have $ <var:P> = <nat:7> \cdot <var:E> + <nat:6> $ when list of commands finishes . \end{theorem} \begin{proof} Observe the below decorated code segment . \begin{eqnarray} \{ <var:L> = <var:E> \} \\ <var:n1> := <var:L> ; \\ \{ <var:L> = <var:E> \land <var:n1> = <var:E> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:L> = <var:E> \land <var:n1> = <var:E> \land <var:n0> = <nat:6> \} \\ <var:n1> := <var:n1> * <nat:7> ; \\ \{ <var:L> = <var:E> \land <var:n1> = <nat:7> * <var:E> \land <var:n0> = <nat:6> \} \\ <var:P> := <var:n1> \\ \{ <var:L> = <var:E> \land <var:n0> = <nat:6> \land <var:P> = <nat:7> * <var:E> \} \\ <var:P> := <var:P> + <var:n0> \\ \{ <var:L> = <var:E> \land <var:P> = <nat:7> * <var:E> + <nat:6> \} \end{eqnarray} Using typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <var:n1> := <var:L> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:7> ; <var:P> := <var:n1> <var:P> := <var:P> + <var:n0> {{ <var:P> = <nat:7> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:n1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:n1> = <var:E> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:n1> = <nat:7> * <var:E> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:n0> = <nat:6> /\ <var:P> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:P> = <nat:7> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 