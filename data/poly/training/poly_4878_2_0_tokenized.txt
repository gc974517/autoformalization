\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:5> ; <var:W> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Given that $ <var:Y> = <var:j> $ before interpreting our series of commands it follows that we have $ <var:W> = <nat:5> $ after list of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be demonstrated through usual Hoare reasoning . Further , \begin{verbatim} { <var:Y> = <var:j> } <var:z0> := <nat:5> { <var:Y> = <var:j> \land <var:z0> = <nat:5> } \end{verbatim} Moving forward to the next step , \begin{verbatim} { <var:Y> = <var:j> } <var:z0> := <nat:5> { <var:Y> = <var:j> \land <var:z0> = <nat:5> } \end{verbatim} This is ensured with the binding law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:5> ; <var:W> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Y> = <var:j> }} <def:poly> {{ <var:W> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:j> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:j> /\ <var:W> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 