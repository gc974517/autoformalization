\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:x1> := <var:N> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:6> ; <var:b> := <var:x1> <var:b> := <var:b> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:N> = <var:M> $ ahead of running the segment of code it follows that we see $ <var:b> = <nat:6> * <var:M> + <nat:7> $ after code segment has finished . \end{theorem} \begin{proof} The course of logic for this segment of code can be accomplished by Hoare techniques . Taking another step toward the following line of code seen in the series of instructions , the variable update code giving $ <var:N> $ as $ <var:x1>$ . This statement takes $ \{ <var:N> = <var:M> \} $ to $ \{ <var:N> = <var:M> \land <var:x1> = <var:M> \} $ . This is deduced with the assignment scheme of standard Hoare logic . Now , the variable binding line \verb | <var:x0> := <nat:7> ; | . This takes the precondition $ \{ <var:N> = <var:M> \land <var:x1> = <var:M> \} $ into the condition $ \{ <var:N> = <var:M> \land <var:x1> = <var:M> \land <var:x0> = <nat:7> \} $ . Advancing to the next step , we have the variable assignmet statement \verb | <var:x1> := <var:x1> * <nat:6> ; | . This moves the precondition $ \{ <var:N> = <var:M> \land <var:x1> = <var:M> \land <var:x0> = <nat:7> \} $ to the postcondition $ \{ <var:N> = <var:M> \land <var:x1> = <nat:6> \times <var:M> \land <var:x0> = <nat:7> \} $ . Moving forward to the upcoming command found in our segment of code , we see the binding statement letting $ <var:x1$ to $ <var:b>$ . This code forwards the precondition $ \{ <var:N> = <var:M> \land <var:x1> = <nat:6> \times <var:M> \land <var:x0> = <nat:7> \} $ as $ \{ <var:N> = <var:M> \land <var:x0> = <nat:7> \land <var:b> = <nat:6> \times <var:M> \} $ . This is given with the assignment inference rule given by Hoare techniques . Next , the binding statement letting $ <var:b> + <var:x0$ to $ <var:b>$ . This forwards the condition $ \{ <var:N> = <var:M> \land <var:x0> = <nat:7> \land <var:b> = <nat:6> \times <var:M> \} $ as the postcondition $ \{ <var:N> = <var:M> \land <var:b> = <nat:6> \times <var:M> + <nat:7> \} $ . This is shown by the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:N> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:6> ; <var:b> := <var:x1> <var:b> := <var:b> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <def:poly> {{ <var:b> = <nat:6> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:x1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:x1> = <var:M> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:x1> = <nat:6> * <var:M> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:x0> = <nat:7> /\ <var:b> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:b> = <nat:6> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 