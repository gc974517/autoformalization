\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:j> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:j> ; <var:K2> := <var:K2> * <var:j> ; <var:b> := <var:K2> ; <var:b> := <var:b> + <var:K1> ; <var:b> := <var:b> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allowing taking positive coefficients $ <var:k> $ that we have $ <var:j> = <var:k> $ before the evaluation of our set of commands it holds that we have $ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:6> $ after series of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:k> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \} \\ <var:K1> := <nat:6> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \} \\ <var:K1> := <var:K1> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \cdot <var:k> \} \\ <var:K2> := <nat:9> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \cdot <var:k> \land <var:K2> = <nat:9> \} \\ <var:K2> := <var:K2> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \cdot <var:k> \land <var:K2> = <nat:9> \cdot <var:k> \} \\ <var:K2> := <var:K2> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \cdot <var:k> \land <var:K2> = <nat:9> \cdot <var:k> ^ <nat:2> \} \\ <var:b> := <var:K2> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:K1> = <nat:6> \cdot <var:k> \land <var:b> = <nat:9> \cdot <var:k> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:K1> ; \\ \{ <var:j> = <var:k> \land <var:K0> = <nat:6> \land <var:b> = <nat:9> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> \} \\ <var:b> := <var:b> + <var:K0> \\ \{ <var:j> = <var:k> \land <var:b> = <nat:9> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> + <nat:6> \} \end{eqnarray} Using usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:6> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:j> ; <var:K2> := <nat:9> ; <var:K2> := <var:K2> * <var:j> ; <var:K2> := <var:K2> * <var:j> ; <var:b> := <var:K2> ; <var:b> := <var:b> + <var:K1> ; <var:b> := <var:b> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:j> = <var:k> }} <def:poly> {{ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> * <var:k> /\ <var:K2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> * <var:k> /\ <var:K2> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> * <var:k> /\ <var:K2> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:6> * <var:k> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:K0> = <nat:6> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:b> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 