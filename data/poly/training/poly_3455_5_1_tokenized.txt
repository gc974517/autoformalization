\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:v> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:8> ; <var:V> := <var:R1> <var:V> := <var:V> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:v> = <var:I> $ --- taking positive integers $ <var:I> $ --- prior to running this code , it must be that we have $ <var:V> = <nat:8> * <var:I> + <nat:3> $ when code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our code is demonstrated through standard Hoare reasoning . Further , we have the environment update line assigning $ <var:v> $ as $ <var:R1>$ . This code redefines the condition $ \{ <var:v> = <var:I> \} $ to the condition $ \{ <var:v> = <var:I> \land <var:R1> = <var:I> \} $ . Moving forward to the next piece of code in the list of instructions , we see the variable binding line \verb | <var:R0> := <nat:3> ; | . This code forwards the precondition $ \{ <var:v> = <var:I> \land <var:R1> = <var:I> \} $ into the condition $ \{ <var:v> = <var:I> \land <var:R1> = <var:I> \land <var:R0> = <nat:3> \} $ . Taking another step toward the next step seen in our program , we have the variable assignmet command letting $ <var:R1> * <nat:8> $ as $ <var:R1>$ . This command forwards the precondition $ \{ <var:v> = <var:I> \land <var:R1> = <var:I> \land <var:R0> = <nat:3> \} $ into the postcondition $ \{ <var:v> = <var:I> \land <var:R1> = <nat:8> * <var:I> \land <var:R0> = <nat:3> \} $ . Taking another step toward the subsequent piece of code found in the list of instructions , we have the assignment code defining $ <var:R1$ toward $ <var:V>$ . This statement transfers the precondition $ \{ <var:v> = <var:I> \land <var:R1> = <nat:8> * <var:I> \land <var:R0> = <nat:3> \} $ to the condition $ \{ <var:v> = <var:I> \land <var:R0> = <nat:3> \land <var:V> = <nat:8> * <var:I> \} $ . This is sound through the assignment law in standard Hoare techniques . Now , we see the environment update code binding $ <var:V> + <var:R0$ to $ <var:V>$ . This statement moves the condition $ \{ <var:v> = <var:I> \land <var:R0> = <nat:3> \land <var:V> = <nat:8> * <var:I> \} $ into $ \{ <var:v> = <var:I> \land <var:V> = <nat:8> * <var:I> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:v> ; <var:R0> := <nat:3> ; <var:R1> := <var:R1> * <nat:8> ; <var:V> := <var:R1> <var:V> := <var:V> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:v> = <var:I> }} <def:poly> {{ <var:V> = <nat:8> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:R1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:R1> = <var:I> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:R1> = <nat:8> * <var:I> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:R0> = <nat:3> /\ <var:V> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:I> /\ <var:V> = <nat:8> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 