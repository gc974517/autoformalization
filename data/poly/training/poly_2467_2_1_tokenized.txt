\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:4> ; <var:p> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given given any natural numbers $ <var:D> $ it to hold that $ <var:E> = <var:D> $ ahead of interpreting the list of instructions , it follows that we have $ <var:p> = <nat:4> $ . \end{theorem} \begin{proof} The proof of our set of instructions can be accomplished through Hoare techniques . Going forward , \[ \begin{tabular} {rcl} \{ <var:E> = <var:D> \} & <var:A0> := <nat:4> & \{ <var:E> = <var:D> \land <var:A0> = <nat:4> \} \\ \{ <var:E> = <var:D> \land <var:A0> = <nat:4> \} & <var:p> := <var:A0& \{ <var:E> = <var:D> \land <var:p> = <nat:4> \} \end{tabular} This is known to be sound with the rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:p> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:E> = <var:D> }} <def:poly> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 