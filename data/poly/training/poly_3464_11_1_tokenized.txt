\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:j> ; <var:l2> := <var:l1> * <var:j> ; <var:l3> := <var:l2> * <var:j> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:6> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:1> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:j> = <var:e> $ --- for all $ <var:e> $ --- ahead of evaluating the set of commands it holds that we have $ <var:J> = <nat:1> \times <var:e> ^ <nat:3> + <nat:9> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:3> $ once list of instructions has terminated . \end{theorem} \begin{proof} The argument for this series of instructions is accomplished by Hoare techniques . Moving on to the next step , we have the binding command defining $ <var:j> $ to $ <var:l1>$ . This command advances the condition $ \{ <var:j> = <var:e> \} $ toward $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \} $ . Moving onward , we have the variable assignmet statement \verb | <var:l2> := <var:l1> * <var:j> ; | . This takes the condition $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \} $ as $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \} $ . Now , we see the variable assignmet statement assigning $ <var:l2> * <var:j> $ into $ <var:l3>$ . This moves $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \} $ toward $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \} $ . This is guaranteed by the assignment scheme defined by Hoare techniques . Moving forward , we see the variable update code defining $ <nat:3> $ to $ <var:l0>$ . This redefines the condition $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \} $ toward $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . Stepping through , the assignment command defining $ <var:l1> * <nat:6> $ as $ <var:l1>$ . This code redefines $ \{ <var:j> = <var:e> \land <var:l1> = <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . Looking at the upcoming piece of code found in the list of commands , the binding line giving $ <var:l2> * <nat:9> $ toward $ <var:l2>$ . This statement forwards the precondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ to the postcondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . Stepping through , we have the variable assignmet line yielding $ <var:l3> * <nat:1> $ to $ <var:l3>$ . This transfers the precondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l3> = <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ as $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l3> = <nat:1> \cdot <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ . This is sound through the assignment law defined in standard Hoare reasoning . Jumping to the upcoming step contained in our set of commands , we have the environment update statement letting $ <var:l3$ as $ <var:J>$ . This moves the precondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l3> = <nat:1> \cdot <var:e> ^ <nat:3> \land <var:l0> = <nat:3> \} $ as $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> \} $ . Paying attention to the proceeding step contained in the set of commands , we see the binding command assigning $ <var:J> + <var:l2$ as $ <var:J>$ . This statement moves the condition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l2> = <nat:9> \cdot <var:e> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> \} $ to the postcondition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:9> \cdot <var:e> ^ <nat:2> \} $ . Advancing on , we see the command \verb | <var:J> := <var:J> + <var:l1> | . This code redefines the condition $ \{ <var:j> = <var:e> \land <var:l1> = <nat:6> \cdot <var:e> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:9> \cdot <var:e> ^ <nat:2> \} $ toward $ \{ <var:j> = <var:e> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:9> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> \} $ . Moving on to the following piece of code in the set of instructions , we have the command \verb | <var:J> := <var:J> + <var:l0> | . This statement transfers the precondition $ \{ <var:j> = <var:e> \land <var:l0> = <nat:3> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:9> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> \} $ as the postcondition $ \{ <var:j> = <var:e> \land <var:J> = <nat:1> \cdot <var:e> ^ <nat:3> + <nat:9> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:j> ; <var:l2> := <var:l1> * <var:j> ; <var:l3> := <var:l2> * <var:j> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:6> ; <var:l2> := <var:l2> * <nat:9> ; <var:l3> := <var:l3> * <nat:1> ; <var:J> := <var:l3> <var:J> := <var:J> + <var:l2> <var:J> := <var:J> + <var:l1> <var:J> := <var:J> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:j> = <var:e> }} <def:poly> {{ <var:J> = <nat:1> * <var:e> ^ <nat:3> + <nat:9> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <var:e> /\ <var:l2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <var:e> /\ <var:l2> = <var:e> ^ <nat:2> /\ <var:l3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <var:e> /\ <var:l2> = <var:e> ^ <nat:2> /\ <var:l3> = <var:e> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <nat:6> * <var:e> /\ <var:l2> = <var:e> ^ <nat:2> /\ <var:l3> = <var:e> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <nat:6> * <var:e> /\ <var:l2> = <nat:9> * <var:e> ^ <nat:2> /\ <var:l3> = <var:e> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <nat:6> * <var:e> /\ <var:l2> = <nat:9> * <var:e> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:e> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <nat:6> * <var:e> /\ <var:l2> = <nat:9> * <var:e> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:1> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l1> = <nat:6> * <var:e> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:1> * <var:e> ^ <nat:3> + <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:l0> = <nat:3> /\ <var:J> = <nat:1> * <var:e> ^ <nat:3> + <nat:9> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:J> = <nat:1> * <var:e> ^ <nat:3> + <nat:9> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 