\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:T> := <var:k0> \end{verbatim} Assume that $ <var:M> = <var:b> $ --- for all positive numbers $ <var:b> $ --- before executing our series of instructions it holds that we have $ <var:T> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:M> = <var:b> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:M> = <var:b> \land <var:k0> = <nat:2> \} \\ <var:T> := <var:k0> \\ \{ <var:M> = <var:b> \land <var:T> = <nat:2> \} \end{eqnarray} Considering the preceding argument , our program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:M> = <var:b> }} <var:k0> := <nat:2> ; <var:T> := <var:k0> {{ <var:T> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:T> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 