\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:l> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:5> ; <var:r> := <var:W1> <var:r> := <var:r> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:l> = <var:E> $ ahead of the execution of this set of instructions it holds that we see $ <var:r> = <nat:5> * <var:E> + <nat:4> $ once program has finished . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is clear by Hoare reasoning . After , we have \begin{eqnarray} \{ <var:l> = <var:E> \} \, <var:W1> := <var:l> \, \{ <var:l> = <var:E> \land <var:W1> = <var:E> \} \\ \{ <var:l> = <var:E> \land <var:W1> = <var:E> \} \, <var:W0> := <nat:4> \, \{ <var:l> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:4> \} \\ \{ <var:l> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:4> \} \, <var:W1> := <var:W1> * <nat:5> \, \{ <var:l> = <var:E> \land <var:W1> = <nat:5> * <var:E> \land <var:W0> = <nat:4> \} \\ \{ <var:l> = <var:E> \land <var:W1> = <nat:5> * <var:E> \land <var:W0> = <nat:4> \} \, <var:r> := <var:W1\, \{ <var:l> = <var:E> \land <var:W0> = <nat:4> \land <var:r> = <nat:5> * <var:E> \} \end{eqnarray} This is rigorously given through the variable assignmet inference rule in usual Hoare reasoning . After , \begin{eqnarray} \{ <var:l> = <var:E> \} \, <var:W1> := <var:l> \, \{ <var:l> = <var:E> \land <var:W1> = <var:E> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:l> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:5> ; <var:r> := <var:W1> <var:r> := <var:r> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:l> = <var:E> }} <def:poly> {{ <var:r> = <nat:5> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:W1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:W1> = <var:E> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:W1> = <nat:5> * <var:E> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:W0> = <nat:4> /\ <var:r> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:E> /\ <var:r> = <nat:5> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 