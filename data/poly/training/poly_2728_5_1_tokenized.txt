\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:j> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:G> := <var:p1> <var:G> := <var:G> + <var:p0> \end{verbatim} Allowing --- given every $ <var:m> $ --- it to be that $ <var:j> = <var:m> $ ahead of interpreting our series of instructions , it must be that we see $ <var:G> = <nat:5> * <var:m> + <nat:5> $ once list of instructions is done . \end{theorem} \begin{proof} Proving correctness for our code segment is clear through usual Hoare reasoning . Advancing on , we see the binding line \verb | <var:p1> := <var:j> ; | . This command takes the precondition $ \{ <var:j> = <var:m> \} $ into $ \{ <var:j> = <var:m> \land <var:p1> = <var:m> \} $ . This is rigorously given with the assignment scheme of Hoare reasoning . Moving on to the proceeding statement seen in the code , we see the variable assignmet code assigning $ <nat:5> $ toward $ <var:p0>$ . This code advances the condition $ \{ <var:j> = <var:m> \land <var:p1> = <var:m> \} $ toward $ \{ <var:j> = <var:m> \land <var:p1> = <var:m> \land <var:p0> = <nat:5> \} $ . This is rigorously given by the assignment rule from typical Hoare reasoning . Focusing on the upcoming bit of code in the segment of code , we have the variable assignmet line binding $ <var:p1> * <nat:5> $ to $ <var:p1>$ . This code advances the condition $ \{ <var:j> = <var:m> \land <var:p1> = <var:m> \land <var:p0> = <nat:5> \} $ as the condition $ \{ <var:j> = <var:m> \land <var:p1> = <nat:5> \cdot <var:m> \land <var:p0> = <nat:5> \} $ . This is known to be sound through the assignment inference rule defined by Hoare logic . Shifting focus toward the next command in the set of commands , we see the variable update statement \verb | <var:G> := <var:p1> | . This statement transfers $ \{ <var:j> = <var:m> \land <var:p1> = <nat:5> \cdot <var:m> \land <var:p0> = <nat:5> \} $ into the postcondition $ \{ <var:j> = <var:m> \land <var:p0> = <nat:5> \land <var:G> = <nat:5> \cdot <var:m> \} $ . Immediately after , the statement letting $ <var:G> + <var:p0$ as $ <var:G>$ . This transfers $ \{ <var:j> = <var:m> \land <var:p0> = <nat:5> \land <var:G> = <nat:5> \cdot <var:m> \} $ toward the postcondition $ \{ <var:j> = <var:m> \land <var:G> = <nat:5> \cdot <var:m> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:j> = <var:m> }} <var:p1> := <var:j> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:G> := <var:p1> <var:G> := <var:G> + <var:p0> {{ <var:G> = <nat:5> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:p1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:p1> = <var:m> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:p1> = <nat:5> * <var:m> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:p0> = <nat:5> /\ <var:G> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:G> = <nat:5> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 