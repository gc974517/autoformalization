\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:m> ; <var:C> := <var:S1> ; <var:C> := <var:C> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:m> = <var:g> $ before the execution of our segment of code then $ <var:C> = <nat:7> \cdot <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The argument for the set of commands can be demonstrated by standard Hoare reasoning . Going forward , we have the environment update code yielding $ <nat:4> $ to $ <var:S0>$ . This redefines $ \{ <var:m> = <var:g> \} $ toward $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \} $ . This is sound using the assignment scheme obtained from Hoare reasoning . Advancing on , we have the variable assignmet code yielding $ <nat:7> $ toward $ <var:S1>$ . This advances the condition $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \} $ to the condition $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \} $ . Paying attention to the following line in our list of instructions , the variable assignmet code defining $ <var:S1> * <var:m> $ into $ <var:S1>$ . This transfers the precondition $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \} $ as the postcondition $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \cdot <var:g> \} $ . This is ensured by the assignment inference rule defined in Hoare techniques . Moving onward , we have the environment update line yielding $ <var:S1> $ toward $ <var:C>$ . This statement transfers the precondition $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:S1> = <nat:7> \cdot <var:g> \} $ into $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:C> = <nat:7> \cdot <var:g> \} $ . This is known to be sound using the assignment inference rule of typical Hoare reasoning . Taking another step toward the proceeding command seen in our set of commands , we have the environment update code \verb | <var:C> := <var:C> + <var:S0> | . This line transfers $ \{ <var:m> = <var:g> \land <var:S0> = <nat:4> \land <var:C> = <nat:7> \cdot <var:g> \} $ as the postcondition $ \{ <var:m> = <var:g> \land <var:C> = <nat:7> \cdot <var:g> + <nat:4> \} $ . This is rigorously given through the assignment inference rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:m> ; <var:C> := <var:S1> ; <var:C> := <var:C> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <def:poly> {{ <var:C> = <nat:7> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:S0> = <nat:4> /\ <var:C> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:C> = <nat:7> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 