\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:C1> := <var:l> ; <var:C2> := <var:C1> * <var:l> ; <var:C3> := <var:C2> * <var:l> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:8> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:8> ; <var:R> := <var:C3> <var:R> := <var:R> + <var:C2> <var:R> := <var:R> + <var:C1> <var:R> := <var:R> + <var:C0> \end{verbatim} Allowing that we have $ <var:l> = <var:D> $ prior to running the series of instructions then $ <var:R> = <nat:8> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:8> \times <var:D> + <nat:6> $ . \end{theorem} \begin{proof} The proof of our list of commands can be given through standard Hoare logic . Moving on , \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | . This is ensured by the binding inference rule given in typical Hoare reasoning . Immediately following , we have \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | and \verb | { <var:l> = <var:D> \land <var:C1> = <var:D> } <var:C2> := <var:C1> * <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> } | . This is deduced with the variable assignmet inference rule obtained from standard Hoare reasoning . Looking at the subsequent statements found in the code , \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | , \verb | { <var:l> = <var:D> \land <var:C1> = <var:D> } <var:C2> := <var:C1> * <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> } | , \verb | { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> } <var:C3> := <var:C2> * <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> \land <var:C3> = <var:D> ^ <nat:3> } | , \verb | { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> \land <var:C3> = <var:D> ^ <nat:3> } <var:C0> := <nat:6> { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> \land <var:C3> = <var:D> ^ <nat:3> \land <var:C0> = <nat:6> } | and \verb | { <var:l> = <var:D> \land <var:C1> = <var:D> \land <var:C2> = <var:D> ^ <nat:2> \land <var:C3> = <var:D> ^ <nat:3> \land <var:C0> = <nat:6> } <var:C1> := <var:C1> * <nat:8> { <var:l> = <var:D> \land <var:C1> = <nat:8> \times <var:D> \land <var:C2> = <var:D> ^ <nat:2> \land <var:C3> = <var:D> ^ <nat:3> \land <var:C0> = <nat:6> } | . This is shown to be logically sound with the rule in standard Hoare logic . Advancing to the next step , \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | . Honing in on the next piece of code found in the series of commands , we have \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | . This is deduced by the variable binding scheme from Hoare techniques . Considering the subsequent statement found in the program , we see \verb | { <var:l> = <var:D> } <var:C1> := <var:l> { <var:l> = <var:D> \land <var:C1> = <var:D> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:l> = <var:D> }} <var:C1> := <var:l> ; <var:C2> := <var:C1> * <var:l> ; <var:C3> := <var:C2> * <var:l> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:8> ; <var:C2> := <var:C2> * <nat:4> ; <var:C3> := <var:C3> * <nat:8> ; <var:R> := <var:C3> <var:R> := <var:R> + <var:C2> <var:R> := <var:R> + <var:C1> <var:R> := <var:R> + <var:C0> {{ <var:R> = <nat:8> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <var:D> /\ <var:C2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <var:D> /\ <var:C2> = <var:D> ^ <nat:2> /\ <var:C3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <var:D> /\ <var:C2> = <var:D> ^ <nat:2> /\ <var:C3> = <var:D> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <nat:8> * <var:D> /\ <var:C2> = <var:D> ^ <nat:2> /\ <var:C3> = <var:D> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <nat:8> * <var:D> /\ <var:C2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:C3> = <var:D> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <nat:8> * <var:D> /\ <var:C2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:C3> = <nat:8> * <var:D> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <nat:8> * <var:D> /\ <var:C2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:C0> = <nat:6> /\ <var:R> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C1> = <nat:8> * <var:D> /\ <var:C0> = <nat:6> /\ <var:R> = <nat:8> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:C0> = <nat:6> /\ <var:R> = <nat:8> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:R> = <nat:8> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 