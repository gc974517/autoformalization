\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:E1> := <var:I> ; <var:E2> := <var:E1> * <var:I> ; <var:E3> := <var:E2> * <var:I> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:1> ; <var:E3> := <var:E3> * <nat:2> ; <var:H> := <var:E3> <var:H> := <var:H> + <var:E2> <var:H> := <var:H> + <var:E1> <var:H> := <var:H> + <var:E0> \end{verbatim} Assuming --- for every whole numbers $ <var:B> $ --- that $ <var:I> = <var:B> $ before interpreting the series of commands it follows that we see $ <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> $ once set of commands has finished . \end{theorem} \begin{proof} We can see that the below decorated program . \begin{eqnarray} \{ <var:I> = <var:B> \} \\ <var:E1> := <var:I> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <var:B> \} \\ <var:E2> := <var:E1> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:I> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:8> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <nat:8> * <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:1> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <nat:8> * <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E3> = <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:E3> := <var:E3> * <nat:2> ; \\ \{ <var:I> = <var:B> \land <var:E1> = <nat:8> * <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E3> = <nat:2> * <var:B> ^ <nat:3> \land <var:E0> = <nat:9> \} \\ <var:H> := <var:E3> \\ \{ <var:I> = <var:B> \land <var:E1> = <nat:8> * <var:B> \land <var:E2> = <nat:1> * <var:B> ^ <nat:2> \land <var:E0> = <nat:9> \land <var:H> = <nat:2> * <var:B> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:E2> \\ \{ <var:I> = <var:B> \land <var:E1> = <nat:8> * <var:B> \land <var:E0> = <nat:9> \land <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:E1> \\ \{ <var:I> = <var:B> \land <var:E0> = <nat:9> \land <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} \\ <var:H> := <var:H> + <var:E0> \\ \{ <var:I> = <var:B> \land <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:I> = <var:B> }} <var:E1> := <var:I> ; <var:E2> := <var:E1> * <var:I> ; <var:E3> := <var:E2> * <var:I> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:1> ; <var:E3> := <var:E3> * <nat:2> ; <var:H> := <var:E3> <var:H> := <var:H> + <var:E2> <var:H> := <var:H> + <var:E1> <var:H> := <var:H> + <var:E0> {{ <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <nat:8> * <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <nat:8> * <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E3> = <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <nat:8> * <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <nat:8> * <var:B> /\ <var:E2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:E0> = <nat:9> /\ <var:H> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E1> = <nat:8> * <var:B> /\ <var:E0> = <nat:9> /\ <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:E0> = <nat:9> /\ <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:B> /\ <var:H> = <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 