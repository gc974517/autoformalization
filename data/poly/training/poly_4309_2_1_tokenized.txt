\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:1> ; <var:W> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Given that we have $ <var:K> = <var:h> $ prior to the evaluation of the list of commands it must be that we see $ <var:W> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is shown with usual Hoare techniques . Next , we see the statement \verb | <var:b0> := <nat:1> ; | . This command takes the precondition $ \{ <var:K> = <var:h> \} $ to $ \{ <var:K> = <var:h> \land <var:b0> = <nat:1> \} $ . Advancing to the subsequent line of code found in our program , the variable update statement \verb | <var:W> := <var:b0> | . This statement transfers $ \{ <var:K> = <var:h> \land <var:b0> = <nat:1> \} $ as $ \{ <var:K> = <var:h> \land <var:W> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:1> ; <var:W> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:K> = <var:h> }} <def:poly> {{ <var:W> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:W> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 