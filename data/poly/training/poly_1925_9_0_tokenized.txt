\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:z> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:z> ; <var:L2> := <var:L2> * <var:z> ; <var:b> := <var:L2> ; <var:b> := <var:b> + <var:L1> ; <var:b> := <var:b> + <var:L0> \end{verbatim} Assume that we have $ <var:z> = <var:y> $ before the execution of the list of instructions , it must be that we have $ <var:b> = <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:2> $ when series of commands has finished . \end{theorem} \begin{proof} Proving correctness for this series of commands can be accomplished with standard Hoare techniques . Following , we have the variable update line defining $ <nat:2> $ to $ <var:L0>$ . This redefines the precondition $ \{ <var:z> = <var:y> \} $ as the condition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \} $ . Moving on , we have the variable update statement assigning $ <nat:1> $ into $ <var:L1>$ . This moves the condition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \} $ into the condition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \} $ . This is guaranteed with the assignment law of standard Hoare techniques . Moving on , the variable assignmet command assigning $ <var:L1> * <var:z> $ into $ <var:L1>$ . This code takes the precondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \} $ toward the condition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \} $ . This is ensured by the assignment law found in typical Hoare reasoning . Taking another step toward the following line of code in our segment of code , we see the assignment statement yielding $ <nat:3> $ to $ <var:L2>$ . This command transfers the precondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \} $ to $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \} $ . This is given through the assignment law obtained from Hoare reasoning . Honing in on the next piece of code found in the set of instructions , the variable assignmet code \verb | <var:L2> := <var:L2> * <var:z> ; | . This command redefines $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \} $ to the postcondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \times <var:y> \} $ . This is known to be sound by the assignment rule given by typical Hoare techniques . Taking another step toward the subsequent command seen in the program , we have the variable assignmet command \verb | <var:L2> := <var:L2> * <var:z> ; | . This statement transfers $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \times <var:y> \} $ toward $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \times <var:y> ^ <nat:2> \} $ . Immediately following , the environment update command \verb | <var:b> := <var:L2> ; | . This transfers the precondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:L2> = <nat:3> \times <var:y> ^ <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:b> = <nat:3> \times <var:y> ^ <nat:2> \} $ . Now , we see the variable update code \verb | <var:b> := <var:b> + <var:L1> ; | . This advances the precondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:1> \times <var:y> \land <var:b> = <nat:3> \times <var:y> ^ <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:b> = <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> \} $ . Going forward , the environment update statement giving $ <var:b> + <var:L0$ toward $ <var:b>$ . This code forwards $ \{ <var:z> = <var:y> \land <var:L0> = <nat:2> \land <var:b> = <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> \} $ toward the postcondition $ \{ <var:z> = <var:y> \land <var:b> = <nat:3> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:z> = <var:y> }} <var:L0> := <nat:2> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:z> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:z> ; <var:L2> := <var:L2> * <var:z> ; <var:b> := <var:L2> ; <var:b> := <var:b> + <var:L1> ; <var:b> := <var:b> + <var:L0> {{ <var:b> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:y> /\ <var:L2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:y> /\ <var:L2> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:y> /\ <var:L2> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:1> * <var:y> /\ <var:b> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:L0> = <nat:2> /\ <var:b> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:b> = <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 