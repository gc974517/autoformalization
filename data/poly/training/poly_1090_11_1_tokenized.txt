\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:P1> := <var:F> ; <var:P2> := <var:P1> * <var:F> ; <var:P3> := <var:P2> * <var:F> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:1> ; <var:R> := <var:P3> <var:R> := <var:R> + <var:P2> <var:R> := <var:R> + <var:P1> <var:R> := <var:R> + <var:P0> \end{verbatim} Given it to hold that $ <var:F> = <var:f> $ before executing our program , it follows that we have $ <var:R> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is done by usual Hoare logic . Jumping to the next step contained in our set of commands , \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:P1> := <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \} \end{tabular} Jumping to the next lines contained in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:P1> := <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <var:f> \} & <var:P2> := <var:P1> * <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \} & <var:P3> := <var:P2> * <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \} & <var:P0> := <nat:1> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} & <var:P1> := <var:P1> * <nat:2> & \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} & <var:P2> := <var:P2> * <nat:3> & \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:P3> = <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} & <var:P3> := <var:P3> * <nat:1> & \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:P3> = <nat:1> \cdot <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:P3> = <nat:1> \cdot <var:f> ^ <nat:3> \land <var:P0> = <nat:1> \} & <var:R> := <var:P3& \{ <var:F> = <var:f> \land <var:P1> = <nat:2> \cdot <var:f> \land <var:P2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:P0> = <nat:1> \land <var:R> = <nat:1> \cdot <var:f> ^ <nat:3> \} \end{tabular} Observing the upcoming lines in our program , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:P1> := <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \} \\ \{ <var:F> = <var:f> \land <var:P1> = <var:f> \} & <var:P2> := <var:P1> * <var:F> & \{ <var:F> = <var:f> \land <var:P1> = <var:f> \land <var:P2> = <var:f> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:F> = <var:f> }} <var:P1> := <var:F> ; <var:P2> := <var:P1> * <var:F> ; <var:P3> := <var:P2> * <var:F> ; <var:P0> := <nat:1> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:1> ; <var:R> := <var:P3> <var:R> := <var:R> + <var:P2> <var:R> := <var:R> + <var:P1> <var:R> := <var:R> + <var:P0> {{ <var:R> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <var:f> /\ <var:P2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <var:f> /\ <var:P2> = <var:f> ^ <nat:2> /\ <var:P3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <var:f> /\ <var:P2> = <var:f> ^ <nat:2> /\ <var:P3> = <var:f> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <nat:2> * <var:f> /\ <var:P2> = <var:f> ^ <nat:2> /\ <var:P3> = <var:f> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <nat:2> * <var:f> /\ <var:P2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:P3> = <var:f> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <nat:2> * <var:f> /\ <var:P2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <nat:2> * <var:f> /\ <var:P2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:P0> = <nat:1> /\ <var:R> = <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P1> = <nat:2> * <var:f> /\ <var:P0> = <nat:1> /\ <var:R> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:P0> = <nat:1> /\ <var:R> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:R> = <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 