\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:e> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:e> ; <var:J2> := <var:J2> * <var:e> ; <var:y> := <var:J2> ; <var:y> := <var:y> + <var:J1> ; <var:y> := <var:y> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allow it to be that $ <var:e> = <var:d> $ before executing our list of instructions then we see $ <var:y> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:d> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \} \\ <var:J1> := <var:J1> * <var:e> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:d> \} \\ <var:J2> := <nat:4> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:d> \land <var:J2> = <nat:4> \} \\ <var:J2> := <var:J2> * <var:e> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:d> \land <var:J2> = <nat:4> \cdot <var:d> \} \\ <var:J2> := <var:J2> * <var:e> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:d> \land <var:J2> = <nat:4> \cdot <var:d> ^ <nat:2> \} \\ <var:y> := <var:J2> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:J1> = <nat:2> \cdot <var:d> \land <var:y> = <nat:4> \cdot <var:d> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:J1> ; \\ \{ <var:e> = <var:d> \land <var:J0> = <nat:4> \land <var:y> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> \} \\ <var:y> := <var:y> + <var:J0> \\ \{ <var:e> = <var:d> \land <var:y> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:4> \} \end{eqnarray} Therefore , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:e> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:e> ; <var:J2> := <var:J2> * <var:e> ; <var:y> := <var:J2> ; <var:y> := <var:y> + <var:J1> ; <var:y> := <var:y> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:e> = <var:d> }} <def:poly> {{ <var:y> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:d> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:d> /\ <var:J2> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:d> /\ <var:J2> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:2> * <var:d> /\ <var:y> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:J0> = <nat:4> /\ <var:y> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:y> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 