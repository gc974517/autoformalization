\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:y0> := <nat:8> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:r> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:r> ; <var:y2> := <var:y2> * <var:r> ; <var:W> := <var:y2> ; <var:W> := <var:W> + <var:y1> ; <var:W> := <var:W> + <var:y0> \end{verbatim} Allowing that $ <var:r> = <var:C> $ ( for every integers $ <var:C> $ ) prior to the evaluation of our set of commands it must be that $ <var:W> = <nat:7> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> + <nat:8> $ after set of commands exits . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is done with standard Hoare reasoning . Further , the binding command \verb | <var:y0> := <nat:8> ; | . This line transfers $ \{ <var:r> = <var:C> \} $ toward $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \} $ . Following , we have the variable update statement \verb | <var:y1> := <nat:8> ; | . This command moves $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \} $ into $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \} $ . Immediately after , the assignment command \verb | <var:y1> := <var:y1> * <var:r> ; | . This statement takes $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \} $ as the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \} $ . This is ensured using the assignment inference rule from standard Hoare reasoning . Considering the subsequent bit of code in our code segment , the variable binding line binding $ <nat:7> $ into $ <var:y2>$ . This takes the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \} $ as the postcondition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \} $ . This is guaranteed with the assignment rule found in typical Hoare techniques . Moving on to the upcoming command found in the list of instructions , the variable binding code \verb | <var:y2> := <var:y2> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \} $ into $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \times <var:C> \} $ . Observing the proceeding command seen in the series of instructions , the variable assignmet statement \verb | <var:y2> := <var:y2> * <var:r> ; | . This command redefines the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \times <var:C> \} $ to the postcondition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \times <var:C> ^ <nat:2> \} $ . This is sound with the assignment law from Hoare logic . Focusing on the subsequent statement in our segment of code , we see the environment update line binding $ <var:y2> $ into $ <var:W>$ . This command transfers the precondition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:y2> = <nat:7> \times <var:C> ^ <nat:2> \} $ into the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:W> = <nat:7> \times <var:C> ^ <nat:2> \} $ . This is given by the assignment scheme found in typical Hoare logic . After , we see the code letting $ <var:W> + <var:y1> $ to $ <var:W>$ . This line redefines the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:y1> = <nat:8> \times <var:C> \land <var:W> = <nat:7> \times <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:7> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ . This is rigorously given using the assignment scheme in typical Hoare techniques . Looking at the following bit of code in the list of commands , we see the variable binding code \verb | <var:W> := <var:W> + <var:y0> | . This statement transfers the condition $ \{ <var:r> = <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:7> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ toward the condition $ \{ <var:r> = <var:C> \land <var:W> = <nat:7> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:r> = <var:C> }} <var:y0> := <nat:8> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:r> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:r> ; <var:y2> := <var:y2> * <var:r> ; <var:W> := <var:y2> ; <var:W> := <var:W> + <var:y1> ; <var:W> := <var:W> + <var:y0> {{ <var:W> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:8> * <var:C> /\ <var:W> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:y0> = <nat:8> /\ <var:W> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:C> /\ <var:W> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 