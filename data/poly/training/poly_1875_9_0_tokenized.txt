\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:R> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:R> ; <var:D2> := <var:D2> * <var:R> ; <var:N> := <var:D2> ; <var:N> := <var:N> + <var:D1> ; <var:N> := <var:N> + <var:D0> \end{verbatim} Allowing that $ <var:R> = <var:w> $ before interpreting the program it must be that $ <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> $ once series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \} \\ <var:D1> := <nat:2> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> \} \\ <var:D1> := <var:D1> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> * <var:w> \} \\ <var:D2> := <nat:3> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> * <var:w> \land <var:D2> = <nat:3> \} \\ <var:D2> := <var:D2> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> * <var:w> \land <var:D2> = <nat:3> * <var:w> \} \\ <var:D2> := <var:D2> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> * <var:w> \land <var:D2> = <nat:3> * <var:w> ^ <nat:2> \} \\ <var:N> := <var:D2> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:D1> = <nat:2> * <var:w> \land <var:N> = <nat:3> * <var:w> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:D1> ; \\ \{ <var:R> = <var:w> \land <var:D0> = <nat:3> \land <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> \} \\ <var:N> := <var:N> + <var:D0> \\ \{ <var:R> = <var:w> \land <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <var:D0> := <nat:3> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:R> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:R> ; <var:D2> := <var:D2> * <var:R> ; <var:N> := <var:D2> ; <var:N> := <var:N> + <var:D1> ; <var:N> := <var:N> + <var:D0> {{ <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:w> /\ <var:D2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:w> /\ <var:D2> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:w> /\ <var:D2> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:2> * <var:w> /\ <var:N> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:D0> = <nat:3> /\ <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:N> = <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 