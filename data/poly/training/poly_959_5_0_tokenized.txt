\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:1> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:l> ; <var:n> := <var:R1> ; <var:n> := <var:n> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given ( given every positive coefficients $ <var:g> $ ) that we have $ <var:l> = <var:g> $ prior to the evaluation of this series of commands it holds that $ <var:n> = <nat:8> * <var:g> + <nat:1> $ after series of instructions has executed . \end{theorem} \begin{proof} The course of logic for the series of instructions can be accomplished with standard Hoare reasoning . Jumping to the subsequent step seen in our list of instructions , we see the variable update command \verb | <var:R0> := <nat:1> ; | . This forwards the condition $ \{ <var:l> = <var:g> \} $ to the condition $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \} $ . Taking a look at the following command contained in our segment of code , we see the environment update line \verb | <var:R1> := <nat:8> ; | . This command advances $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \} $ into $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:R1> = <nat:8> \} $ . Taking a look at the proceeding line seen in our set of commands , the assignment statement \verb | <var:R1> := <var:R1> * <var:l> ; | . This statement redefines the condition $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:R1> = <nat:8> \} $ as $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:R1> = <nat:8> \cdot <var:g> \} $ . Moving forward to the next step , we see the variable binding line giving $ <var:R1> $ as $ <var:n>$ . This code transfers the condition $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:R1> = <nat:8> \cdot <var:g> \} $ to $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:n> = <nat:8> \cdot <var:g> \} $ . This is shown to be logically sound with the assignment rule given by typical Hoare reasoning . After , we have the command binding $ <var:n> + <var:R0$ toward $ <var:n>$ . This forwards $ \{ <var:l> = <var:g> \land <var:R0> = <nat:1> \land <var:n> = <nat:8> \cdot <var:g> \} $ to the postcondition $ \{ <var:l> = <var:g> \land <var:n> = <nat:8> \cdot <var:g> + <nat:1> \} $ . This is shown with the assignment rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:l> ; <var:n> := <var:R1> ; <var:n> := <var:n> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:l> = <var:g> }} <def:poly> {{ <var:n> = <nat:8> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:R0> = <nat:1> /\ <var:n> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n> = <nat:8> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 