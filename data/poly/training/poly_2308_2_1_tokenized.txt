\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:2> ; <var:Y> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allow ( for every whole numbers $ <var:O> $ ) that $ <var:n> = <var:O> $ prior to evaluating our segment of code , it must be that $ <var:Y> = <nat:2> $ when program exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:O> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:n> = <var:O> \land <var:q0> = <nat:2> \} \\ <var:Y> := <var:q0> \\ \{ <var:n> = <var:O> \land <var:Y> = <nat:2> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:Y> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:n> = <var:O> }} <def:poly> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 