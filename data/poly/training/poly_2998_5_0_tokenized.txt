\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:4> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:k> ; <var:i> := <var:x1> ; <var:i> := <var:i> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:k> = <var:K> $ ahead of executing the list of instructions it holds that $ <var:i> = <nat:1> \times <var:K> + <nat:4> $ after series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of our code can be seen through Hoare techniques . Advancing on , we see \begin{eqnarray} \{ <var:k> = <var:K> \} \, <var:x0> := <nat:4> \, \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \} \end{eqnarray} Moving on to the upcoming bits of codefound in our list of commands , we see \begin{eqnarray} \{ <var:k> = <var:K> \} \, <var:x0> := <nat:4> \, \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \} \\ \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \} \, <var:x1> := <nat:1> \, \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \} \\ \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \} \, <var:x1> := <var:x1> * <var:k> \, \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \times <var:K> \} \\ \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \times <var:K> \} \, <var:i> := <var:x1> \, \{ <var:k> = <var:K> \land <var:x0> = <nat:4> \land <var:i> = <nat:1> \times <var:K> \} \end{eqnarray} This is shown to be logically sound with the environment update scheme from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:k> ; <var:i> := <var:x1> ; <var:i> := <var:i> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:k> = <var:K> }} <def:poly> {{ <var:i> = <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:x0> = <nat:4> /\ <var:i> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:i> = <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 