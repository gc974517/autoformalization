\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:2> ; <var:f> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allowing ( given any positive integer coefficients $ <var:T> $ ) that we have $ <var:n> = <var:T> $ before interpreting our series of commands it must be that we have $ <var:f> = <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions is done through standard Hoare techniques . Stepping through , we have the variable binding line giving $ <nat:2> $ toward $ <var:i0>$ . This forwards the precondition $ \{ <var:n> = <var:T> \} $ toward the condition $ \{ <var:n> = <var:T> \land <var:i0> = <nat:2> \} $ . Moving on , we have the environment update line \verb | <var:f> := <var:i0> | . This code forwards the condition $ \{ <var:n> = <var:T> \land <var:i0> = <nat:2> \} $ as $ \{ <var:n> = <var:T> \land <var:f> = <nat:2> \} $ . This is shown to be logically sound through the assignment law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:f> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:n> = <var:T> }} <def:poly> {{ <var:f> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:f> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 