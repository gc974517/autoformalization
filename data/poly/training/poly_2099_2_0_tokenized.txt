\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:3> ; <var:U> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allow it to hold that $ <var:R> = <var:h> $ before running the set of commands it holds that $ <var:U> = <nat:3> $ once set of commands exits . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:R> = <var:h> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:R> = <var:h> \land <var:x0> = <nat:3> \} \\ <var:U> := <var:x0> \\ \{ <var:R> = <var:h> \land <var:U> = <nat:3> \} \end{eqnarray} Therefore , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:U> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:R> = <var:h> }} <def:poly> {{ <var:U> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:U> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 