\begin{document} \begin{theorem} Take the following program as follows \begin{verbatim} <var:Q> := <nat:4> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> \end{verbatim} Allow that we have $ <var:O> = <var:I> $ ahead of evaluating our series of instructions it holds that we see $ <var:Q> = <nat:4> \cdot <var:I> ^ <nat:10> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:4> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> $ after program finishes . \end{theorem} \begin{proof} The proof of our program is done using typical Hoare logic . Going to the next step , we have the variable update code letting $ <nat:4> $ toward $ <var:Q>$ . This advances $ \{ <var:O> = <var:I> \} $ to the postcondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> \} $ . Taking another step toward the proceeding line of code in the program , we see the environment update code binding $ <var:Q> * <var:O> $ into $ <var:Q>$ . This code forwards the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> \} $ toward the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> + \} $ . This is ensured with the assignment rule from standard Hoare reasoning . Focusing on the subsequent line contained in our set of commands , we have the binding line defining $ <nat:1> + <var:Q> * <var:O> $ as $ <var:Q>$ . This command redefines the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> + \} $ into the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> \} $ . Next , we see the variable assignmet command giving $ <nat:4> + <var:Q> * <var:O> $ as $ <var:Q>$ . This moves $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> \} $ as the postcondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + <nat:4> \} $ . This is shown to be logically sound using the assignment scheme in standard Hoare techniques . Further , we see the binding line \verb | <var:Q> := <nat:1> + <var:Q> * <var:O> ; | . This command advances the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + <nat:4> \} $ toward $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> \} $ . This is guaranteed by the assignment scheme given by standard Hoare techniques . Focusing on the upcoming step in the series of instructions , we have the variable binding line yielding $ <nat:2> + <var:Q> * <var:O> $ toward $ <var:Q>$ . This command redefines the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> \} $ into the postcondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> \} $ . This is ensured using the assignment inference rule defined in Hoare logic . Advancing to the upcoming line of code found in the set of commands , we see the statement letting $ <nat:3> + <var:Q> * <var:O> $ into $ <var:Q>$ . This code transfers the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> \} $ as the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> \} $ . This is rigorously given using the assignment inference rule obtained from standard Hoare techniques . Advancing to the upcoming piece of code in the segment of code , we have the variable update statement \verb | <var:Q> := <var:Q> * <var:O> ; | . This line moves the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> \} $ toward the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + \} $ . This is deduced with the assignment law defined in usual Hoare logic . Observing the following bit of code seen in the code segment , the environment update command binding $ <nat:2> + <var:Q> * <var:O> $ toward $ <var:Q>$ . This line advances the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + \} $ as the postcondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> \} $ . This is deduced using the assignment rule given in typical Hoare reasoning . Immediately following , we have the binding statement \verb | <var:Q> := <nat:4> + <var:Q> * <var:O> ; | . This takes the precondition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> \} $ into the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:4> \} $ . Paying attention to the next line contained in our series of instructions , the variable binding command giving $ <nat:2> + <var:Q> * <var:O$ to $ <var:Q>$ . This statement takes the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:4> \} $ toward the condition $ \{ <var:O> = <var:I> \land <var:Q> = <nat:4> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <var:Q> := <nat:4> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:1> + <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:3> + <var:Q> * <var:O> ; <var:Q> := <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> ; <var:Q> := <nat:4> + <var:Q> * <var:O> ; <var:Q> := <nat:2> + <var:Q> * <var:O> {{ <var:Q> = <nat:4> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:Q> = <nat:4> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 