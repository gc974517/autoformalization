\begin{document} \begin{theorem} Let the following program in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:5> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:J> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:J> ; <var:r2> := <var:r2> * <var:J> ; <var:o> := <var:r2> ; <var:o> := <var:o> + <var:r1> ; <var:o> := <var:o> + <var:r0> \end{verbatim} Assuming that we have $ <var:J> = <var:c> $ ( taking positive integer coefficients $ <var:c> $ ) ahead of executing this code , then we have $ <var:o> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:5> $ . \end{theorem} \begin{proof} Applying Hoare techniques produces : \begin{eqnarray} \{ <var:J> = <var:c> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \} \\ <var:r1> := <nat:5> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \} \\ <var:r1> := <var:r1> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \times <var:c> \} \\ <var:r2> := <nat:4> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \times <var:c> \land <var:r2> = <nat:4> \} \\ <var:r2> := <var:r2> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \times <var:c> \land <var:r2> = <nat:4> \times <var:c> \} \\ <var:r2> := <var:r2> * <var:J> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \times <var:c> \land <var:r2> = <nat:4> \times <var:c> ^ <nat:2> \} \\ <var:o> := <var:r2> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:r1> = <nat:5> \times <var:c> \land <var:o> = <nat:4> \times <var:c> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:r1> ; \\ \{ <var:J> = <var:c> \land <var:r0> = <nat:5> \land <var:o> = <nat:4> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> \} \\ <var:o> := <var:o> + <var:r0> \\ \{ <var:J> = <var:c> \land <var:o> = <nat:4> \times <var:c> ^ <nat:2> + <nat:5> \times <var:c> + <nat:5> \} \end{eqnarray} Thus , our set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:J> = <var:c> }} <var:r0> := <nat:5> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:J> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:J> ; <var:r2> := <var:r2> * <var:J> ; <var:o> := <var:r2> ; <var:o> := <var:o> + <var:r1> ; <var:o> := <var:o> + <var:r0> {{ <var:o> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> * <var:c> /\ <var:r2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> * <var:c> /\ <var:r2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> * <var:c> /\ <var:r2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:5> * <var:c> /\ <var:o> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:r0> = <nat:5> /\ <var:o> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:c> /\ <var:o> = <nat:4> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 