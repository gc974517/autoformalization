\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:8> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:o> ; <var:M2> := <nat:8> ; <var:M2> := <var:M2> * <var:o> ; <var:M2> := <var:M2> * <var:o> ; <var:l> := <var:M2> ; <var:l> := <var:l> + <var:M1> ; <var:l> := <var:l> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Allow that we have $ <var:o> = <var:P> $ ( given some positive numbers $ <var:P> $ ) prior to the execution of our set of commands it holds that $ <var:l> = <nat:8> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:8> $ . \end{theorem} \begin{proof} Observe the following decorated series of commands . \begin{eqnarray} \{ <var:o> = <var:P> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \} \\ <var:M1> := <nat:9> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \} \\ <var:M1> := <var:M1> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \cdot <var:P> \} \\ <var:M2> := <nat:8> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \cdot <var:P> \land <var:M2> = <nat:8> \} \\ <var:M2> := <var:M2> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \cdot <var:P> \land <var:M2> = <nat:8> \cdot <var:P> \} \\ <var:M2> := <var:M2> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \cdot <var:P> \land <var:M2> = <nat:8> \cdot <var:P> ^ <nat:2> \} \\ <var:l> := <var:M2> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:M1> = <nat:9> \cdot <var:P> \land <var:l> = <nat:8> \cdot <var:P> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:M1> ; \\ \{ <var:o> = <var:P> \land <var:M0> = <nat:8> \land <var:l> = <nat:8> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> \} \\ <var:l> := <var:l> + <var:M0> \\ \{ <var:o> = <var:P> \land <var:l> = <nat:8> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> + <nat:8> \} \end{eqnarray} Using typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:8> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:o> ; <var:M2> := <nat:8> ; <var:M2> := <var:M2> * <var:o> ; <var:M2> := <var:M2> * <var:o> ; <var:l> := <var:M2> ; <var:l> := <var:l> + <var:M1> ; <var:l> := <var:l> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:o> = <var:P> }} <def:poly> {{ <var:l> = <nat:8> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> * <var:P> /\ <var:M2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> * <var:P> /\ <var:M2> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> * <var:P> /\ <var:M2> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:9> * <var:P> /\ <var:l> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:M0> = <nat:8> /\ <var:l> = <nat:8> * <var:P> ^ <nat:2> + <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:l> = <nat:8> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 