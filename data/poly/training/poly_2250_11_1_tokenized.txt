\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:k1> := <var:X> ; <var:k2> := <var:k1> * <var:X> ; <var:k3> := <var:k2> * <var:X> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:4> ; <var:s> := <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assume that we have $ <var:X> = <var:T> $ prior to running this series of instructions , then we have $ <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:X> = <var:T> \} \\ <var:k1> := <var:X> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <var:T> \} \\ <var:k2> := <var:k1> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k1> := <var:k1> * <nat:3> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <nat:3> * <var:T> \land <var:k2> = <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k2> := <var:k2> * <nat:7> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <nat:3> * <var:T> \land <var:k2> = <nat:7> * <var:T> ^ <nat:2> \land <var:k3> = <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k3> := <var:k3> * <nat:4> ; \\ \{ <var:X> = <var:T> \land <var:k1> = <nat:3> * <var:T> \land <var:k2> = <nat:7> * <var:T> ^ <nat:2> \land <var:k3> = <nat:4> * <var:T> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:s> := <var:k3> \\ \{ <var:X> = <var:T> \land <var:k1> = <nat:3> * <var:T> \land <var:k2> = <nat:7> * <var:T> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:s> = <nat:4> * <var:T> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:k2> \\ \{ <var:X> = <var:T> \land <var:k1> = <nat:3> * <var:T> \land <var:k0> = <nat:1> \land <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:k1> \\ \{ <var:X> = <var:T> \land <var:k0> = <nat:1> \land <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> \} \\ <var:s> := <var:s> + <var:k0> \\ \{ <var:X> = <var:T> \land <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> \} \end{eqnarray} Hence , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:X> ; <var:k2> := <var:k1> * <var:X> ; <var:k3> := <var:k2> * <var:X> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:4> ; <var:s> := <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <def:poly> {{ <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <nat:3> * <var:T> /\ <var:k2> = <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <nat:3> * <var:T> /\ <var:k2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:k3> = <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <nat:3> * <var:T> /\ <var:k2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <nat:3> * <var:T> /\ <var:k2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k1> = <nat:3> * <var:T> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:s> = <nat:4> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 