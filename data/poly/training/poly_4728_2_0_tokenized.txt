\begin{document} \begin{theorem} Take the following program as follows \begin{verbatim} <var:K0> := <nat:8> ; <var:X> := <var:K0> \end{verbatim} Assume that $ <var:d> = <var:n> $ prior to the evaluation of the program , it follows that $ <var:X> = <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:d> = <var:n> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:d> = <var:n> \land <var:K0> = <nat:8> \} \\ <var:X> := <var:K0> \\ \{ <var:d> = <var:n> \land <var:X> = <nat:8> \} \end{eqnarray} Thus , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <var:K0> := <nat:8> ; <var:X> := <var:K0> {{ <var:X> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:X> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 