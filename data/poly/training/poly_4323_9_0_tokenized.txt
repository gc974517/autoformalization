\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:5> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:r> := <var:u2> ; <var:r> := <var:r> + <var:u1> ; <var:r> := <var:r> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Given that $ <var:o> = <var:B> $ ( given some positive integer coefficients $ <var:B> $ ) before interpreting this segment of code then $ <var:r> = <nat:5> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for this code segment can be done by standard Hoare techniques . Considering the following piece of code in our code segment , we have the variable update line \verb | <var:u0> := <nat:6> ; | . This redefines the condition $ \{ <var:o> = <var:B> \} $ into $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \} $ . This is deduced by the assignment scheme given by standard Hoare techniques . Observing the following bit of code in the series of commands , we see the environment update line defining $ <nat:3> $ toward $ <var:u1>$ . This command transfers $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \} $ toward $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> \} $ . This is ensured by the assignment inference rule given by Hoare reasoning . Advancing to the subsequent piece of code contained in the set of commands , we have the binding code \verb | <var:u1> := <var:u1> * <var:o> ; | . This moves the condition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> \} $ toward the postcondition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \} $ . Stepping through , we see the environment update statement \verb | <var:u2> := <nat:5> ; | . This transfers $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \} $ to the postcondition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> \} $ . Moving forward , we have the binding line assigning $ <var:u2> * <var:o> $ as $ <var:u2>$ . This forwards the precondition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> \} $ to the condition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> * <var:B> \} $ . After , we have the environment update statement \verb | <var:u2> := <var:u2> * <var:o> ; | . This command takes the precondition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> * <var:B> \} $ into the condition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> * <var:B> ^ <nat:2> \} $ . This is given by the assignment scheme found in standard Hoare techniques . After , the variable assignmet line \verb | <var:r> := <var:u2> ; | . This moves the condition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:u2> = <nat:5> * <var:B> ^ <nat:2> \} $ as $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:r> = <nat:5> * <var:B> ^ <nat:2> \} $ . Immediately following , we see the variable binding command \verb | <var:r> := <var:r> + <var:u1> ; | . This takes the condition $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:u1> = <nat:3> * <var:B> \land <var:r> = <nat:5> * <var:B> ^ <nat:2> \} $ to $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> \} $ . This is rigorously given by the assignment scheme given by standard Hoare techniques . Shifting focus toward the following piece of code contained in the code segment , we have the variable update code \verb | <var:r> := <var:r> + <var:u0> | . This moves $ \{ <var:o> = <var:B> \land <var:u0> = <nat:6> \land <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> \} $ as the condition $ \{ <var:o> = <var:B> \land <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:6> \} $ . This is shown using the assignment scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:5> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:r> := <var:u2> ; <var:r> := <var:r> + <var:u1> ; <var:r> := <var:r> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:o> = <var:B> }} <def:poly> {{ <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> * <var:B> /\ <var:u2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> * <var:B> /\ <var:u2> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> * <var:B> /\ <var:u2> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:3> * <var:B> /\ <var:r> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:u0> = <nat:6> /\ <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:r> = <nat:5> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 