\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:W1> := <var:A> ; <var:W2> := <var:W1> * <var:A> ; <var:W3> := <var:W2> * <var:A> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:3> ; <var:s> := <var:W3> <var:s> := <var:s> + <var:W2> <var:s> := <var:s> + <var:W1> <var:s> := <var:s> + <var:W0> \end{verbatim} Assume , for some natural coefficients $ <var:E> $ , it to be that $ <var:A> = <var:E> $ prior to the evaluation of our set of commands it must be that we have $ <var:s> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands can be shown using typical Hoare techniques . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:E> \} & <var:W1> := <var:A> & \{ <var:A> = <var:E> \land <var:W1> = <var:E> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <var:E> \} & <var:W2> := <var:W1> * <var:A> & \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \} & <var:W3> := <var:W2> * <var:A> & \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \} & <var:W0> := <nat:8> & \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} & <var:W1> := <var:W1> * <nat:8> & \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} & <var:W2> := <var:W2> * <nat:1> & \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} & <var:W3> := <var:W3> * <nat:3> & \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W3> = <nat:3> * <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W3> = <nat:3> * <var:E> ^ <nat:3> \land <var:W0> = <nat:8> \} & <var:s> := <var:W3& \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:s> = <nat:3> * <var:E> ^ <nat:3> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W2> = <nat:1> * <var:E> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:s> = <nat:3> * <var:E> ^ <nat:3> \} & <var:s> := <var:s> + <var:W2& \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W0> = <nat:8> \land <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> \} \\ \{ <var:A> = <var:E> \land <var:W1> = <nat:8> * <var:E> \land <var:W0> = <nat:8> \land <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> \} & <var:s> := <var:s> + <var:W1& \{ <var:A> = <var:E> \land <var:W0> = <nat:8> \land <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:8> * <var:E> \} \end{tabular} This is deduced using the environment update rule defined in typical Hoare reasoning . Moving on to the next line of code seen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:E> \} & <var:W1> := <var:A> & \{ <var:A> = <var:E> \land <var:W1> = <var:E> \} \end{tabular} This is deduced using the variable update rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:A> = <var:E> }} <var:W1> := <var:A> ; <var:W2> := <var:W1> * <var:A> ; <var:W3> := <var:W2> * <var:A> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:3> ; <var:s> := <var:W3> <var:s> := <var:s> + <var:W2> <var:s> := <var:s> + <var:W1> <var:s> := <var:s> + <var:W0> {{ <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <nat:8> * <var:E> /\ <var:W2> = <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <nat:8> * <var:E> /\ <var:W2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <nat:8> * <var:E> /\ <var:W2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <nat:8> * <var:E> /\ <var:W2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:W0> = <nat:8> /\ <var:s> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W1> = <nat:8> * <var:E> /\ <var:W0> = <nat:8> /\ <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:W0> = <nat:8> /\ <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:s> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 