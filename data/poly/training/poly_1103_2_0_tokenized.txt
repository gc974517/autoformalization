\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:8> ; <var:i> := <var:N0> \end{verbatim} Allow $ <var:y> = <var:k> $ ahead of executing the list of commands it holds that we see $ <var:i> = <nat:8> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The proof of our program is evident through typical Hoare logic . Stepping through , \[ \begin{tabular} {rcl} \{ <var:y> = <var:k> \} & <var:N0> := <nat:8> & \{ <var:y> = <var:k> \land <var:N0> = <nat:8> \} \\ \{ <var:y> = <var:k> \land <var:N0> = <nat:8> \} & <var:i> := <var:N0& \{ <var:y> = <var:k> \land <var:i> = <nat:8> \} \end{tabular} This is shown using the environment update inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <var:N0> := <nat:8> ; <var:i> := <var:N0> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 