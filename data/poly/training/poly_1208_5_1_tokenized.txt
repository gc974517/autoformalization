\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:q> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:5> ; <var:y> := <var:m1> <var:y> := <var:y> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:q> = <var:s> $ before the execution of this series of instructions it follows that $ <var:y> = <nat:5> * <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:q> = <var:s> \} \\ <var:m1> := <var:q> ; \\ \{ <var:q> = <var:s> \land <var:m1> = <var:s> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:q> = <var:s> \land <var:m1> = <var:s> \land <var:m0> = <nat:2> \} \\ <var:m1> := <var:m1> * <nat:5> ; \\ \{ <var:q> = <var:s> \land <var:m1> = <nat:5> \cdot <var:s> \land <var:m0> = <nat:2> \} \\ <var:y> := <var:m1> \\ \{ <var:q> = <var:s> \land <var:m0> = <nat:2> \land <var:y> = <nat:5> \cdot <var:s> \} \\ <var:y> := <var:y> + <var:m0> \\ \{ <var:q> = <var:s> \land <var:y> = <nat:5> \cdot <var:s> + <nat:2> \} \end{eqnarray} As a result , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:q> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:5> ; <var:y> := <var:m1> <var:y> := <var:y> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:q> = <var:s> }} <def:poly> {{ <var:y> = <nat:5> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:m1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:m1> = <var:s> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:m1> = <nat:5> * <var:s> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:m0> = <nat:2> /\ <var:y> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:s> /\ <var:y> = <nat:5> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 