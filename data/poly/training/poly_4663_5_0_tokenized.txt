\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:V> ; <var:Q> := <var:A1> ; <var:Q> := <var:Q> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Allow --- for some positive numbers $ <var:F> $ --- that $ <var:V> = <var:F> $ ahead of the evaluation of this segment of code it follows that $ <var:Q> = <nat:1> \cdot <var:F> + <nat:7> $ when segment of code exits . \end{theorem} \begin{proof} Arguing the correctness of our program is shown using typical Hoare reasoning . Jumping to the subsequent piece of code in the code , we have \begin{eqnarray} \{ <var:V> = <var:F> \} \, <var:A0> := <nat:7> \, \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet rule from typical Hoare reasoning . Moving forward to the proceeding lines seen in the list of instructions , we have \begin{eqnarray} \{ <var:V> = <var:F> \} \, <var:A0> := <nat:7> \, \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \} \\ \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \} \, <var:A1> := <nat:1> \, \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \land <var:A1> = <nat:1> \} \\ \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \land <var:A1> = <nat:1> \} \, <var:A1> := <var:A1> * <var:V> \, \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \land <var:A1> = <nat:1> \cdot <var:F> \} \\ \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \land <var:A1> = <nat:1> \cdot <var:F> \} \, <var:Q> := <var:A1> \, \{ <var:V> = <var:F> \land <var:A0> = <nat:7> \land <var:Q> = <nat:1> \cdot <var:F> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:7> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:V> ; <var:Q> := <var:A1> ; <var:Q> := <var:Q> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <def:poly> {{ <var:Q> = <nat:1> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:A0> = <nat:7> /\ <var:Q> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:Q> = <nat:1> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 