\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:w> ; <var:x2> := <var:x1> * <var:w> ; <var:x3> := <var:x2> * <var:w> ; <var:x0> := <nat:6> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:8> ; <var:E> := <var:x3> <var:E> := <var:E> + <var:x1> <var:E> := <var:E> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:w> = <var:d> $ ahead of the evaluation of our set of commands , it must be that $ <var:E> = <nat:8> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> + <nat:6> $ after program terminates . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be demonstrated through typical Hoare reasoning . Immediately following , we see \begin{verbatim} { <var:w> = <var:d> } <var:x1> := <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> } { <var:w> = <var:d> \land <var:x1> = <var:d> } <var:x2> := <var:x1> * <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> } { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> } <var:x3> := <var:x2> * <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> } { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> } <var:x0> := <nat:6> { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> \land <var:x0> = <nat:6> } { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> \land <var:x0> = <nat:6> } <var:x1> := <var:x1> * <nat:1> { <var:w> = <var:d> \land <var:x1> = <nat:1> * <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> \land <var:x0> = <nat:6> } \end{verbatim} This is shown to be logically sound through the variable update inference rule from usual Hoare reasoning . Honing in on the proceeding pieces of code seen in our series of commands , we see \begin{verbatim} { <var:w> = <var:d> } <var:x1> := <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> } { <var:w> = <var:d> \land <var:x1> = <var:d> } <var:x2> := <var:x1> * <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> } { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> } <var:x3> := <var:x2> * <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> \land <var:x2> = <var:d> ^ <nat:2> \land <var:x3> = <var:d> ^ <nat:3> } \end{verbatim} Advancing on , we see \begin{verbatim} { <var:w> = <var:d> } <var:x1> := <var:w> { <var:w> = <var:d> \land <var:x1> = <var:d> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:w> ; <var:x2> := <var:x1> * <var:w> ; <var:x3> := <var:x2> * <var:w> ; <var:x0> := <nat:6> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:8> ; <var:E> := <var:x3> <var:E> := <var:E> + <var:x1> <var:E> := <var:E> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:w> = <var:d> }} <def:poly> {{ <var:E> = <nat:8> * <var:d> ^ <nat:3> + <nat:1> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <var:d> /\ <var:x2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <var:d> /\ <var:x2> = <var:d> ^ <nat:2> /\ <var:x3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <var:d> /\ <var:x2> = <var:d> ^ <nat:2> /\ <var:x3> = <var:d> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <nat:1> * <var:d> /\ <var:x2> = <var:d> ^ <nat:2> /\ <var:x3> = <var:d> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <nat:1> * <var:d> /\ <var:x2> = <var:d> ^ <nat:2> /\ <var:x3> = <nat:8> * <var:d> ^ <nat:3> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x1> = <nat:1> * <var:d> /\ <var:x2> = <var:d> ^ <nat:2> /\ <var:x0> = <nat:6> /\ <var:E> = <nat:8> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:x0> = <nat:6> /\ <var:E> = <nat:8> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:E> = <nat:8> * <var:d> ^ <nat:3> + <nat:1> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 