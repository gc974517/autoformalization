\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:O> ; <var:w> := <nat:3> + <var:w> * <var:O> ; <var:w> := <var:w> * <var:O> ; <var:w> := <nat:4> + <var:w> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:O> = <var:D> $ ahead of interpreting our set of instructions it follows that $ <var:w> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> $ once segment of code executes . \end{theorem} \begin{proof} The application of usual Hoare reasoning yields : \begin{eqnarray} \{ <var:O> = <var:D> \} \\ <var:w> := <nat:4> ; \\ \{ <var:O> = <var:D> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:w> = <nat:4> \times <var:D> + <nat:1> \} \\ <var:w> := <nat:3> + <var:w> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:w> = <nat:4> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> \} \\ <var:w> := <var:w> * <var:O> ; \\ \{ <var:O> = <var:D> \land <var:w> = <nat:4> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + \} \\ <var:w> := <nat:4> + <var:w> * <var:O> \\ \{ <var:O> = <var:D> \land <var:w> = <nat:4> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:4> \} \end{eqnarray} Thus , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:O> ; <var:w> := <nat:3> + <var:w> * <var:O> ; <var:w> := <var:w> * <var:O> ; <var:w> := <nat:4> + <var:w> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:O> = <var:D> }} <def:poly> {{ <var:w> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:w> = <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:w> = <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:w> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:D> /\ <var:w> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 