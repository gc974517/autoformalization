\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:1> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:o> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:o> ; <var:O2> := <var:O2> * <var:o> ; <var:N> := <var:O2> ; <var:N> := <var:N> + <var:O1> ; <var:N> := <var:N> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow , for all $ <var:P> \in \mathbb{N} $ , that we have $ <var:o> = <var:P> $ before the evaluation of this program , it holds that we have $ <var:N> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our code can be demonstrated by typical Hoare logic . Focusing on the following commands in the series of instructions , \begin{verbatim} { <var:o> = <var:P> } <var:O0> := <nat:1> { <var:o> = <var:P> \land <var:O0> = <nat:1> } { <var:o> = <var:P> \land <var:O0> = <nat:1> } <var:O1> := <nat:4> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> } \end{verbatim} Shifting focus toward the following lines contained in the series of instructions , we see \begin{verbatim} { <var:o> = <var:P> } <var:O0> := <nat:1> { <var:o> = <var:P> \land <var:O0> = <nat:1> } { <var:o> = <var:P> \land <var:O0> = <nat:1> } <var:O1> := <nat:4> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> } { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> } <var:O1> := <var:O1> * <var:o> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> \times <var:P> } { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> \times <var:P> } <var:O2> := <nat:1> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> \times <var:P> \land <var:O2> = <nat:1> } { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> \times <var:P> \land <var:O2> = <nat:1> } <var:O2> := <var:O2> * <var:o> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> \times <var:P> \land <var:O2> = <nat:1> \times <var:P> } \end{verbatim} This is shown by the variable update law defined in standard Hoare techniques . Shifting focus toward the subsequent lines seen in the series of instructions , \begin{verbatim} { <var:o> = <var:P> } <var:O0> := <nat:1> { <var:o> = <var:P> \land <var:O0> = <nat:1> } { <var:o> = <var:P> \land <var:O0> = <nat:1> } <var:O1> := <nat:4> { <var:o> = <var:P> \land <var:O0> = <nat:1> \land <var:O1> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:o> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:o> ; <var:O2> := <var:O2> * <var:o> ; <var:N> := <var:O2> ; <var:N> := <var:N> + <var:O1> ; <var:N> := <var:N> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:o> = <var:P> }} <def:poly> {{ <var:N> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> * <var:P> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> * <var:P> /\ <var:O2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> * <var:P> /\ <var:O2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:4> * <var:P> /\ <var:N> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:O0> = <nat:1> /\ <var:N> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:N> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 