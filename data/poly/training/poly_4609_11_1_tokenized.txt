\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:O1> := <var:t> ; <var:O2> := <var:O1> * <var:t> ; <var:O3> := <var:O2> * <var:t> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:3> ; <var:r> := <var:O3> <var:r> := <var:r> + <var:O2> <var:r> := <var:r> + <var:O1> <var:r> := <var:r> + <var:O0> \end{verbatim} Assuming $ <var:t> = <var:T> $ ahead of interpreting this code segment it follows that $ <var:r> = <nat:3> \times <var:T> ^ <nat:3> + <nat:9> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:T> \} \\ <var:O1> := <var:t> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <var:T> \} \\ <var:O2> := <var:O1> * <var:t> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <var:T> \land <var:O2> = <var:T> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:t> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <var:T> \land <var:O2> = <var:T> ^ <nat:2> \land <var:O3> = <var:T> ^ <nat:3> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <var:T> \land <var:O2> = <var:T> ^ <nat:2> \land <var:O3> = <var:T> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O1> := <var:O1> * <nat:4> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <nat:4> \times <var:T> \land <var:O2> = <var:T> ^ <nat:2> \land <var:O3> = <var:T> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O2> := <var:O2> * <nat:9> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <nat:4> \times <var:T> \land <var:O2> = <nat:9> \times <var:T> ^ <nat:2> \land <var:O3> = <var:T> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O3> := <var:O3> * <nat:3> ; \\ \{ <var:t> = <var:T> \land <var:O1> = <nat:4> \times <var:T> \land <var:O2> = <nat:9> \times <var:T> ^ <nat:2> \land <var:O3> = <nat:3> \times <var:T> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:r> := <var:O3> \\ \{ <var:t> = <var:T> \land <var:O1> = <nat:4> \times <var:T> \land <var:O2> = <nat:9> \times <var:T> ^ <nat:2> \land <var:O0> = <nat:1> \land <var:r> = <nat:3> \times <var:T> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:O2> \\ \{ <var:t> = <var:T> \land <var:O1> = <nat:4> \times <var:T> \land <var:O0> = <nat:1> \land <var:r> = <nat:3> \times <var:T> ^ <nat:3> + <nat:9> \times <var:T> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:O1> \\ \{ <var:t> = <var:T> \land <var:O0> = <nat:1> \land <var:r> = <nat:3> \times <var:T> ^ <nat:3> + <nat:9> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> \} \\ <var:r> := <var:r> + <var:O0> \\ \{ <var:t> = <var:T> \land <var:r> = <nat:3> \times <var:T> ^ <nat:3> + <nat:9> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:1> \} \end{eqnarray} Applying usual Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:t> = <var:T> }} <var:O1> := <var:t> ; <var:O2> := <var:O1> * <var:t> ; <var:O3> := <var:O2> * <var:t> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:4> ; <var:O2> := <var:O2> * <nat:9> ; <var:O3> := <var:O3> * <nat:3> ; <var:r> := <var:O3> <var:r> := <var:r> + <var:O2> <var:r> := <var:r> + <var:O1> <var:r> := <var:r> + <var:O0> {{ <var:r> = <nat:3> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <var:T> /\ <var:O2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <var:T> /\ <var:O2> = <var:T> ^ <nat:2> /\ <var:O3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <var:T> /\ <var:O2> = <var:T> ^ <nat:2> /\ <var:O3> = <var:T> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <nat:4> * <var:T> /\ <var:O2> = <var:T> ^ <nat:2> /\ <var:O3> = <var:T> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <nat:4> * <var:T> /\ <var:O2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:O3> = <var:T> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <nat:4> * <var:T> /\ <var:O2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:T> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <nat:4> * <var:T> /\ <var:O2> = <nat:9> * <var:T> ^ <nat:2> /\ <var:O0> = <nat:1> /\ <var:r> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O1> = <nat:4> * <var:T> /\ <var:O0> = <nat:1> /\ <var:r> = <nat:3> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:O0> = <nat:1> /\ <var:r> = <nat:3> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:r> = <nat:3> * <var:T> ^ <nat:3> + <nat:9> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 