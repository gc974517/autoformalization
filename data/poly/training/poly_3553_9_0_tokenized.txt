\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:i> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:i> ; <var:u2> := <var:u2> * <var:i> ; <var:f> := <var:u2> ; <var:f> := <var:f> + <var:u1> ; <var:f> := <var:f> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing given all positive coefficients $ <var:P> $ that $ <var:i> = <var:P> $ prior to evaluating this code it follows that we see $ <var:f> = <nat:2> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is evident using typical Hoare reasoning . Shifting focus toward the subsequent pieces of code found in the list of instructions , we see \verb | { <var:i> = <var:P> } <var:u0> := <nat:2> { <var:i> = <var:P> \land <var:u0> = <nat:2> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> } <var:u1> := <nat:4> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> } <var:u1> := <var:u1> * <var:i> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> } <var:u2> := <nat:2> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> } <var:u2> := <var:u2> * <var:i> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> * <var:P> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> * <var:P> } <var:u2> := <var:u2> * <var:i> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> * <var:P> ^ <nat:2> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:u2> = <nat:2> * <var:P> ^ <nat:2> } <var:f> := <var:u2> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:f> = <nat:2> * <var:P> ^ <nat:2> } | , \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:u1> = <nat:4> * <var:P> \land <var:f> = <nat:2> * <var:P> ^ <nat:2> } <var:f> := <var:f> + <var:u1> { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> } | and \verb | { <var:i> = <var:P> \land <var:u0> = <nat:2> \land <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> } <var:f> := <var:f> + <var:u0{ <var:i> = <var:P> \land <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:2> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:i> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:i> ; <var:u2> := <var:u2> * <var:i> ; <var:f> := <var:u2> ; <var:f> := <var:f> + <var:u1> ; <var:f> := <var:f> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:i> = <var:P> }} <def:poly> {{ <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> * <var:P> /\ <var:u2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> * <var:P> /\ <var:u2> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> * <var:P> /\ <var:u2> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:4> * <var:P> /\ <var:f> = <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:u0> = <nat:2> /\ <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:P> /\ <var:f> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 