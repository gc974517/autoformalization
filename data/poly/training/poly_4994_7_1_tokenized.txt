\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:N1> := <var:I> ; <var:N2> := <var:N1> * <var:I> ; <var:N3> := <var:N2> * <var:I> ; <var:N0> := <nat:3> ; <var:N3> := <var:N3> * <nat:4> ; <var:R> := <var:N3> <var:R> := <var:R> + <var:N0> \end{verbatim} Allow that we have $ <var:I> = <var:p> $ taking $ <var:p> $ ahead of running the series of commands then we have $ <var:R> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> $ when segment of code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:p> \} \\ <var:N1> := <var:I> ; \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \} \\ <var:N2> := <var:N1> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \land <var:N2> = <var:p> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:I> ; \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \land <var:N2> = <var:p> ^ <nat:2> \land <var:N3> = <var:p> ^ <nat:3> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \land <var:N2> = <var:p> ^ <nat:2> \land <var:N3> = <var:p> ^ <nat:3> \land <var:N0> = <nat:3> \} \\ <var:N3> := <var:N3> * <nat:4> ; \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \land <var:N2> = <var:p> ^ <nat:2> \land <var:N3> = <nat:4> * <var:p> ^ <nat:3> \land <var:N0> = <nat:3> \} \\ <var:R> := <var:N3> \\ \{ <var:I> = <var:p> \land <var:N1> = <var:p> \land <var:N2> = <var:p> ^ <nat:2> \land <var:N0> = <nat:3> \land <var:R> = <nat:4> * <var:p> ^ <nat:3> \} \end{eqnarray} Advancing executing our series of instructions results in : \begin{eqnarray} <var:R> := <var:R> + <var:N0> \\ \{ <var:I> = <var:p> \land <var:R> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> \} \end{eqnarray} Using typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:I> = <var:p> }} <var:N1> := <var:I> ; <var:N2> := <var:N1> * <var:I> ; <var:N3> := <var:N2> * <var:I> ; <var:N0> := <nat:3> ; <var:N3> := <var:N3> * <nat:4> ; <var:R> := <var:N3> <var:R> := <var:R> + <var:N0> {{ <var:R> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> /\ <var:N2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> /\ <var:N2> = <var:p> ^ <nat:2> /\ <var:N3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> /\ <var:N2> = <var:p> ^ <nat:2> /\ <var:N3> = <var:p> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> /\ <var:N2> = <var:p> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:p> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:N1> = <var:p> /\ <var:N2> = <var:p> ^ <nat:2> /\ <var:N0> = <nat:3> /\ <var:R> = <nat:4> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:R> = <nat:4> * <var:p> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 