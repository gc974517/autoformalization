\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:8> ; <var:Y> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:z> = <var:o> $ ahead of evaluating the segment of code then $ <var:Y> = <nat:8> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:l0> := <nat:8> ; \\ \{ <var:z> = <var:o> \land <var:l0> = <nat:8> \} \\ <var:Y> := <var:l0> \\ \{ <var:z> = <var:o> \land <var:Y> = <nat:8> \} \end{eqnarray} Considering the above , our segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:8> ; <var:Y> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <def:poly> {{ <var:Y> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:Y> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 