\begin{document} \begin{theorem} Take a program as follows \begin{verbatim} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:j> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:j> ; <var:o2> := <var:o2> * <var:j> ; <var:m> := <var:o2> ; <var:m> := <var:m> + <var:o1> ; <var:m> := <var:m> + <var:o0> \end{verbatim} Assume it to be that $ <var:j> = <var:Q> $ prior to running this series of commands , it follows that we see $ <var:m> = <nat:9> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:6> $ once set of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be demonstrated through Hoare techniques . Next , we see the variable binding line letting $ <nat:6> $ to $ <var:o0>$ . This moves $ \{ <var:j> = <var:Q> \} $ as $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \} $ . This is guaranteed through the assignment law given in Hoare techniques . Advancing on , we have the code \verb | <var:o1> := <nat:1> ; | . This moves the precondition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \} $ to the condition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} $ . This is guaranteed through the assignment scheme defined by usual Hoare reasoning . Moving on , we have the variable update statement binding $ <var:o1> * <var:j> $ into $ <var:o1>$ . This moves $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \} $ as the condition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \} $ . This is sound by the assignment rule defined in Hoare logic . Following , we have the binding line \verb | <var:o2> := <nat:9> ; | . This advances the precondition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \} $ as $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \} $ . Considering the proceeding bit of code contained in the series of instructions , we see the environment update command \verb | <var:o2> := <var:o2> * <var:j> ; | . This line transfers $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \} $ as the postcondition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \cdot <var:Q> \} $ . This is deduced with the assignment rule from typical Hoare reasoning . Immediately following , we have the variable binding line \verb | <var:o2> := <var:o2> * <var:j> ; | . This statement takes the precondition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \cdot <var:Q> \} $ into $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \cdot <var:Q> ^ <nat:2> \} $ . Focusing on the next piece of code found in our code , we see the variable binding line \verb | <var:m> := <var:o2> ; | . This transfers $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:o2> = <nat:9> \cdot <var:Q> ^ <nat:2> \} $ toward the condition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:m> = <nat:9> \cdot <var:Q> ^ <nat:2> \} $ . Observing the following command seen in our code , we have the variable update code yielding $ <var:m> + <var:o1> $ into $ <var:m>$ . This line moves $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:o1> = <nat:1> \cdot <var:Q> \land <var:m> = <nat:9> \cdot <var:Q> ^ <nat:2> \} $ into the condition $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> \} $ . This is ensured through the assignment rule found in usual Hoare reasoning . Further , we see the variable update line giving $ <var:m> + <var:o0$ toward $ <var:m>$ . This transfers $ \{ <var:j> = <var:Q> \land <var:o0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> \} $ toward the postcondition $ \{ <var:j> = <var:Q> \land <var:m> = <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <var:o0> := <nat:6> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:j> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:j> ; <var:o2> := <var:o2> * <var:j> ; <var:m> := <var:o2> ; <var:m> := <var:m> + <var:o1> ; <var:m> := <var:m> + <var:o0> {{ <var:m> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:o2> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:o1> = <nat:1> * <var:Q> /\ <var:m> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:o0> = <nat:6> /\ <var:m> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:m> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 