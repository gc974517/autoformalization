\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:W1> := <var:A> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:3> ; <var:o> := <var:W1> <var:o> := <var:o> + <var:W0> \end{verbatim} Assume ( for $ <var:n> \in \mathbb{N} $ ) it to hold that $ <var:A> = <var:n> $ prior to evaluating this program , it holds that we have $ <var:o> = <nat:3> * <var:n> + <nat:2> $ once list of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:n> \} \\ <var:W1> := <var:A> ; \\ \{ <var:A> = <var:n> \land <var:W1> = <var:n> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:A> = <var:n> \land <var:W1> = <var:n> \land <var:W0> = <nat:2> \} \\ <var:W1> := <var:W1> * <nat:3> ; \\ \{ <var:A> = <var:n> \land <var:W1> = <nat:3> * <var:n> \land <var:W0> = <nat:2> \} \\ <var:o> := <var:W1> \\ \{ <var:A> = <var:n> \land <var:W0> = <nat:2> \land <var:o> = <nat:3> * <var:n> \} \\ <var:o> := <var:o> + <var:W0> \\ \{ <var:A> = <var:n> \land <var:o> = <nat:3> * <var:n> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:A> = <var:n> }} <var:W1> := <var:A> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:3> ; <var:o> := <var:W1> <var:o> := <var:o> + <var:W0> {{ <var:o> = <nat:3> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:W1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:W1> = <var:n> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:W1> = <nat:3> * <var:n> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:W0> = <nat:2> /\ <var:o> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:o> = <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 