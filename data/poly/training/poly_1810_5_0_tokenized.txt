\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:8> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:F> ; <var:p> := <var:f1> ; <var:p> := <var:p> + <var:f0> \end{verbatim} Assuming $ <var:F> = <var:K> $ before the execution of our series of instructions then $ <var:p> = <nat:1> \times <var:K> + <nat:8> $ once list of commands executes . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is demonstrated by typical Hoare logic . Advancing on , we see the variable binding command \verb | <var:f0> := <nat:8> ; | . This command transfers the precondition $ \{ <var:F> = <var:K> \} $ into $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \} $ . Honing in on the following piece of code seen in our set of instructions , we have the command \verb | <var:f1> := <nat:1> ; | . This command moves the condition $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \} $ toward $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:f1> = <nat:1> \} $ . This is guaranteed with the assignment inference rule of standard Hoare reasoning . Advancing on , the environment update code binding $ <var:f1> * <var:F> $ into $ <var:f1>$ . This moves the precondition $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:f1> = <nat:1> \} $ into $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:f1> = <nat:1> \times <var:K> \} $ . This is deduced with the assignment law obtained from usual Hoare techniques . Taking a look at the upcoming line of code contained in our list of instructions , we see the statement yielding $ <var:f1> $ as $ <var:p>$ . This forwards the precondition $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:f1> = <nat:1> \times <var:K> \} $ as $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:p> = <nat:1> \times <var:K> \} $ . Considering the next command found in the program , the assignment statement \verb | <var:p> := <var:p> + <var:f0> | . This takes the condition $ \{ <var:F> = <var:K> \land <var:f0> = <nat:8> \land <var:p> = <nat:1> \times <var:K> \} $ to the condition $ \{ <var:F> = <var:K> \land <var:p> = <nat:1> \times <var:K> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:f0> := <nat:8> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:F> ; <var:p> := <var:f1> ; <var:p> := <var:p> + <var:f0> {{ <var:p> = <nat:1> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:f0> = <nat:8> /\ <var:p> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:p> = <nat:1> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 