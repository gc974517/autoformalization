\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:f> ; <var:F> := <var:m1> ; <var:F> := <var:F> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assuming $ <var:f> = <var:d> $ ahead of the execution of this code it follows that we have $ <var:F> = <nat:1> \times <var:d> + <nat:7> $ when series of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:d> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:f> = <var:d> \land <var:m0> = <nat:7> \} \\ <var:m1> := <nat:1> ; \\ \{ <var:f> = <var:d> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> \} \\ <var:m1> := <var:m1> * <var:f> ; \\ \{ <var:f> = <var:d> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> \cdot <var:d> \} \\ <var:F> := <var:m1> ; \\ \{ <var:f> = <var:d> \land <var:m0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:d> \} \\ <var:F> := <var:F> + <var:m0> \\ \{ <var:f> = <var:d> \land <var:F> = <nat:1> \cdot <var:d> + <nat:7> \} \end{eqnarray} Using usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:7> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:f> ; <var:F> := <var:m1> ; <var:F> := <var:F> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:f> = <var:d> }} <def:poly> {{ <var:F> = <nat:1> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:m0> = <nat:7> /\ <var:F> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:d> /\ <var:F> = <nat:1> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 