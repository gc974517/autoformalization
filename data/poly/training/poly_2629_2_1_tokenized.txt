\begin{document} \begin{theorem} Let the following set of instructions such that \begin{verbatim} <var:o0> := <nat:3> ; <var:u> := <var:o0> \end{verbatim} Allow ( given some positive numbers $ <var:W> $ ) it to hold that $ <var:Y> = <var:W> $ prior to the execution of our code segment it must be that $ <var:u> = <nat:3> $ once code segment has exited . \end{theorem} \begin{proof} Proving correctness for this list of commands can be accomplished by typical Hoare techniques . Taking another step toward the next statements found in the set of instructions , \begin{eqnarray} \{ <var:Y> = <var:W> \} \, <var:o0> := <nat:3> \, \{ <var:Y> = <var:W> \land <var:o0> = <nat:3> \} \\ \{ <var:Y> = <var:W> \land <var:o0> = <nat:3> \} \, <var:u> := <var:o0\, \{ <var:Y> = <var:W> \land <var:u> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Y> = <var:W> }} <var:o0> := <nat:3> ; <var:u> := <var:o0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 