\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:V0> := <nat:2> ; <var:d> := <var:V0> \end{verbatim} Given that we have $ <var:j> = <var:D> $ prior to running our series of instructions then we see $ <var:d> = <nat:2> $ . \end{theorem} \begin{proof} See that the following decorated set of commands . \begin{eqnarray} \{ <var:j> = <var:D> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:j> = <var:D> \land <var:V0> = <nat:2> \} \\ <var:d> := <var:V0> \\ \{ <var:j> = <var:D> \land <var:d> = <nat:2> \} \end{eqnarray} Utilizing Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:j> = <var:D> }} <var:V0> := <nat:2> ; <var:d> := <var:V0> {{ <var:d> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:D> /\ <var:d> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 