\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:M> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:M> ; <var:A2> := <var:A2> * <var:M> ; <var:J> := <var:A2> ; <var:J> := <var:J> + <var:A1> ; <var:J> := <var:J> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given given all $ <var:W> \in \mathbb{N} $ it to be that $ <var:M> = <var:W> $ before running this code , then we have $ <var:J> = <nat:7> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:4> $ when segment of code has finished executing . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:M> = <var:W> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:3> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \} \\ <var:A1> := <var:A1> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \times <var:W> \} \\ <var:A2> := <nat:7> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \times <var:W> \land <var:A2> = <nat:7> \} \\ <var:A2> := <var:A2> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \times <var:W> \land <var:A2> = <nat:7> \times <var:W> \} \\ <var:A2> := <var:A2> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \times <var:W> \land <var:A2> = <nat:7> \times <var:W> ^ <nat:2> \} \\ <var:J> := <var:A2> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:A1> = <nat:3> \times <var:W> \land <var:J> = <nat:7> \times <var:W> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:A1> ; \\ \{ <var:M> = <var:W> \land <var:A0> = <nat:4> \land <var:J> = <nat:7> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> \} \\ <var:J> := <var:J> + <var:A0> \\ \{ <var:M> = <var:W> \land <var:J> = <nat:7> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:4> \} \end{eqnarray} Hence , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:M> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:M> ; <var:A2> := <var:A2> * <var:M> ; <var:J> := <var:A2> ; <var:J> := <var:J> + <var:A1> ; <var:J> := <var:J> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <def:poly> {{ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> * <var:W> /\ <var:A2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> * <var:W> /\ <var:A2> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> * <var:W> /\ <var:A2> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:3> * <var:W> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:A0> = <nat:4> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:J> = <nat:7> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 