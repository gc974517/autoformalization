\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:2> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <var:h> * <var:t> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> \end{verbatim} Given that we have $ <var:t> = <var:g> $ ahead of evaluating the series of commands , it follows that we see $ <var:h> = <nat:2> \times <var:g> ^ <nat:8> + <nat:4> \times <var:g> ^ <nat:7> + <nat:2> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives us : \begin{eqnarray} \{ <var:t> = <var:g> \} \\ <var:h> := <nat:2> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \} \\ <var:h> := <nat:4> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> + <nat:4> \} \\ <var:h> := <nat:2> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:2> + <nat:4> \cdot <var:g> + <nat:2> \} \\ <var:h> := <nat:4> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:4> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:4> \} \\ <var:h> := <nat:2> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:4> + <nat:4> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:4> \cdot <var:g> + <nat:2> \} \\ <var:h> := <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:5> + <nat:4> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:4> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + \} \\ <var:h> := <nat:4> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:6> + <nat:4> \cdot <var:g> ^ <nat:5> + <nat:2> \cdot <var:g> ^ <nat:4> + <nat:4> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:4> \} \\ <var:h> := <nat:3> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:7> + <nat:4> \cdot <var:g> ^ <nat:6> + <nat:2> \cdot <var:g> ^ <nat:5> + <nat:4> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:4> \cdot <var:g> + <nat:3> \} \\ <var:h> := <nat:3> + <var:h> * <var:t> \\ \{ <var:t> = <var:g> \land <var:h> = <nat:2> \cdot <var:g> ^ <nat:8> + <nat:4> \cdot <var:g> ^ <nat:7> + <nat:2> \cdot <var:g> ^ <nat:6> + <nat:4> \cdot <var:g> ^ <nat:5> + <nat:2> \cdot <var:g> ^ <nat:4> + <nat:4> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:3> \} \end{eqnarray} Hence , this series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:t> = <var:g> }} <var:h> := <nat:2> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <var:h> * <var:t> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> {{ <var:h> = <nat:2> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:h> = <nat:2> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 