\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:R0> := <nat:2> ; <var:y> := <var:R0> \end{verbatim} Allowing it to hold that $ <var:C> = <var:P> $ , for some $ <var:P> \in \mathbb{N} $ , before executing our code it follows that we have $ <var:y> = <nat:2> $ when program has exited . \end{theorem} \begin{proof} The method of proof for the series of commands can be shown through usual Hoare techniques . Going to the next step , we have the code letting $ <nat:2> $ into $ <var:R0>$ . This code moves the condition $ \{ <var:C> = <var:P> \} $ toward the postcondition $ \{ <var:C> = <var:P> \land <var:R0> = <nat:2> \} $ . Observing the proceeding step found in the series of instructions , the line assigning $ <var:R0$ to $ <var:y>$ . This command takes the precondition $ \{ <var:C> = <var:P> \land <var:R0> = <nat:2> \} $ to $ \{ <var:C> = <var:P> \land <var:y> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <var:R0> := <nat:2> ; <var:y> := <var:R0> {{ <var:y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 