\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:u> ; <var:s2> := <var:s1> * <var:u> ; <var:s3> := <var:s2> * <var:u> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:2> ; <var:V> := <var:s3> <var:V> := <var:V> + <var:s2> <var:V> := <var:V> + <var:s1> <var:V> := <var:V> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allow --- given $ <var:O> \in \mathbb{N} $ --- $ <var:u> = <var:O> $ ahead of the execution of our list of commands , then we see $ <var:V> = <nat:2> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is demonstrated through the below decorated series of instructions . \begin{eqnarray} \{ <var:u> = <var:O> \} \\ <var:s1> := <var:u> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <var:O> \} \\ <var:s2> := <var:s1> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <var:O> \land <var:s2> = <var:O> ^ <nat:2> \} \end{eqnarray} Furthering executing our code segment gives : \begin{eqnarray} <var:s3> := <var:s2> * <var:u> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <var:O> \land <var:s2> = <var:O> ^ <nat:2> \land <var:s3> = <var:O> ^ <nat:3> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <var:O> \land <var:s2> = <var:O> ^ <nat:2> \land <var:s3> = <var:O> ^ <nat:3> \land <var:s0> = <nat:3> \} \end{eqnarray} Furthering running this set of instructions returns : \begin{eqnarray} <var:s1> := <var:s1> * <nat:4> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <nat:4> * <var:O> \land <var:s2> = <var:O> ^ <nat:2> \land <var:s3> = <var:O> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:2> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <nat:4> * <var:O> \land <var:s2> = <nat:2> * <var:O> ^ <nat:2> \land <var:s3> = <var:O> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s3> := <var:s3> * <nat:2> ; \\ \{ <var:u> = <var:O> \land <var:s1> = <nat:4> * <var:O> \land <var:s2> = <nat:2> * <var:O> ^ <nat:2> \land <var:s3> = <nat:2> * <var:O> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:V> := <var:s3> \\ \{ <var:u> = <var:O> \land <var:s1> = <nat:4> * <var:O> \land <var:s2> = <nat:2> * <var:O> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:V> = <nat:2> * <var:O> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:s2> \\ \{ <var:u> = <var:O> \land <var:s1> = <nat:4> * <var:O> \land <var:s0> = <nat:3> \land <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:s1> \\ \{ <var:u> = <var:O> \land <var:s0> = <nat:3> \land <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> \} \\ <var:V> := <var:V> + <var:s0> \\ \{ <var:u> = <var:O> \land <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:u> ; <var:s2> := <var:s1> * <var:u> ; <var:s3> := <var:s2> * <var:u> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:2> ; <var:V> := <var:s3> <var:V> := <var:V> + <var:s2> <var:V> := <var:V> + <var:s1> <var:V> := <var:V> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:u> = <var:O> }} <def:poly> {{ <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <var:O> /\ <var:s2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <var:O> /\ <var:s2> = <var:O> ^ <nat:2> /\ <var:s3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <var:O> /\ <var:s2> = <var:O> ^ <nat:2> /\ <var:s3> = <var:O> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <nat:4> * <var:O> /\ <var:s2> = <var:O> ^ <nat:2> /\ <var:s3> = <var:O> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <nat:4> * <var:O> /\ <var:s2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:s3> = <var:O> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <nat:4> * <var:O> /\ <var:s2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:s3> = <nat:2> * <var:O> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <nat:4> * <var:O> /\ <var:s2> = <nat:2> * <var:O> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:V> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s1> = <nat:4> * <var:O> /\ <var:s0> = <nat:3> /\ <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:s0> = <nat:3> /\ <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:V> = <nat:2> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 