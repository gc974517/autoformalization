\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:5> ; <var:J> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Assume given all natural coefficients $ <var:j> $ it to be that $ <var:m> = <var:j> $ before executing our program , it holds that $ <var:J> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be accomplished with usual Hoare reasoning . Moving on to the proceeding statements found in the list of instructions , we have \verb | { <var:m> = <var:j> } <var:U0> := <nat:5> { <var:m> = <var:j> \land <var:U0> = <nat:5> } | and \verb | { <var:m> = <var:j> \land <var:U0> = <nat:5> } <var:J> := <var:U0{ <var:m> = <var:j> \land <var:J> = <nat:5> } | . This is shown using the variable assignmet law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:J> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <def:poly> {{ <var:J> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:J> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 