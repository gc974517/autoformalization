\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:1> ; <var:D> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given , assuming some positive integer coefficients $ <var:x> $ , that we have $ <var:E> = <var:x> $ before running the list of commands it follows that we see $ <var:D> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:x> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:E> = <var:x> \land <var:O0> = <nat:1> \} \\ <var:D> := <var:O0> \\ \{ <var:E> = <var:x> \land <var:D> = <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:D> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:E> = <var:x> }} <def:poly> {{ <var:D> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:D> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 