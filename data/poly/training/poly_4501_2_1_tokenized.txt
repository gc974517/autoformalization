\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:7> ; <var:z> := <var:g0> \end{verbatim} Assume that $ <var:f> = <var:b> $ before the execution of the list of instructions it must be that $ <var:z> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:b> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:f> = <var:b> \land <var:g0> = <nat:7> \} \\ <var:z> := <var:g0> \\ \{ <var:f> = <var:b> \land <var:z> = <nat:7> \} \end{eqnarray} Utilizing Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:f> = <var:b> }} <var:g0> := <nat:7> ; <var:z> := <var:g0> {{ <var:z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:b> /\ <var:z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 