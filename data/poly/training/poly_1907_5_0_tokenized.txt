\begin{document} \begin{theorem} Let the following code in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:9> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:X> ; <var:B> := <var:a1> ; <var:B> := <var:B> + <var:a0> \end{verbatim} Assume $ <var:X> = <var:J> $ prior to interpreting this list of instructions it must be that we see $ <var:B> = <nat:8> \cdot <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:X> = <var:J> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:X> = <var:J> \land <var:a0> = <nat:9> \} \\ <var:a1> := <nat:8> ; \\ \{ <var:X> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:8> \} \\ <var:a1> := <var:a1> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:8> \cdot <var:J> \} \\ <var:B> := <var:a1> ; \\ \{ <var:X> = <var:J> \land <var:a0> = <nat:9> \land <var:B> = <nat:8> \cdot <var:J> \} \\ <var:B> := <var:B> + <var:a0> \\ \{ <var:X> = <var:J> \land <var:B> = <nat:8> \cdot <var:J> + <nat:9> \} \end{eqnarray} Therefore , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:X> = <var:J> }} <var:a0> := <nat:9> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:X> ; <var:B> := <var:a1> ; <var:B> := <var:B> + <var:a0> {{ <var:B> = <nat:8> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:a0> = <nat:9> /\ <var:B> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:B> = <nat:8> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 