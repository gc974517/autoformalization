\begin{document} \begin{theorem} Consider a series of commands : \begin{verbatim} <var:a0> := <nat:9> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:V> ; <var:k> := <var:a1> ; <var:k> := <var:k> + <var:a0> \end{verbatim} Given $ <var:V> = <var:r> $ before the execution of the set of commands then we see $ <var:k> = <nat:6> * <var:r> + <nat:9> $ once set of commands exits . \end{theorem} \begin{proof} The proof of the code segment can be seen using Hoare reasoning . Immediately after , we have the environment update statement \verb | <var:a0> := <nat:9> ; | . This forwards the condition $ \{ <var:V> = <var:r> \} $ into $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \} $ . This is sound through the assignment inference rule defined by Hoare reasoning . Moving forward to the next step , we see the variable assignmet command assigning $ <nat:6> $ toward $ <var:a1>$ . This command redefines the precondition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \} $ toward the postcondition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:a1> = <nat:6> \} $ . Jumping to the proceeding statement found in the program , we have the assignment statement \verb | <var:a1> := <var:a1> * <var:V> ; | . This moves the precondition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:a1> = <nat:6> \} $ to $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:a1> = <nat:6> * <var:r> \} $ . Focusing on the upcoming step in our code segment , the variable binding code \verb | <var:k> := <var:a1> ; | . This transfers the precondition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:a1> = <nat:6> * <var:r> \} $ to $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:k> = <nat:6> * <var:r> \} $ . This is rigorously given through the assignment rule from typical Hoare logic . Focusing on the next step seen in the set of instructions , the assignment code giving $ <var:k> + <var:a0$ toward $ <var:k>$ . This redefines the condition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:9> \land <var:k> = <nat:6> * <var:r> \} $ as the condition $ \{ <var:V> = <var:r> \land <var:k> = <nat:6> * <var:r> + <nat:9> \} $ . This is known to be sound with the assignment inference rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:V> = <var:r> }} <var:a0> := <nat:9> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:V> ; <var:k> := <var:a1> ; <var:k> := <var:k> + <var:a0> {{ <var:k> = <nat:6> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a0> = <nat:9> /\ <var:k> = <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:k> = <nat:6> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 