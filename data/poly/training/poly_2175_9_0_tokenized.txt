\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:L> := <var:S2> ; <var:L> := <var:L> + <var:S1> ; <var:L> := <var:L> + <var:S0> \end{verbatim} Given that $ <var:Z> = <var:O> $ , given $ <var:O> \in \mathbb{Z}^+ $ , before interpreting this list of commands , it holds that we have $ <var:L> = <nat:1> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is given using typical Hoare reasoning . Immediately after , we have \begin{verbatim} { <var:Z> = <var:O> } <var:S0> := <nat:9> { <var:Z> = <var:O> \land <var:S0> = <nat:9> } { <var:Z> = <var:O> \land <var:S0> = <nat:9> } <var:S1> := <nat:8> { <var:Z> = <var:O> \land <var:S0> = <nat:9> \land <var:S1> = <nat:8> } { <var:Z> = <var:O> \land <var:S0> = <nat:9> \land <var:S1> = <nat:8> } <var:S1> := <var:S1> * <var:Z> { <var:Z> = <var:O> \land <var:S0> = <nat:9> \land <var:S1> = <nat:8> * <var:O> } \end{verbatim} Observing the subsequent bit of code in the list of instructions , \begin{verbatim} { <var:Z> = <var:O> } <var:S0> := <nat:9> { <var:Z> = <var:O> \land <var:S0> = <nat:9> } \end{verbatim} Advancing to the subsequent lines found in our program , we see \begin{verbatim} { <var:Z> = <var:O> } <var:S0> := <nat:9> { <var:Z> = <var:O> \land <var:S0> = <nat:9> } { <var:Z> = <var:O> \land <var:S0> = <nat:9> } <var:S1> := <nat:8> { <var:Z> = <var:O> \land <var:S0> = <nat:9> \land <var:S1> = <nat:8> } \end{verbatim} This is ensured by the binding rule given by standard Hoare reasoning . Taking a look at the proceeding bits of codecontained in the code segment , we have \begin{verbatim} { <var:Z> = <var:O> } <var:S0> := <nat:9> { <var:Z> = <var:O> \land <var:S0> = <nat:9> } { <var:Z> = <var:O> \land <var:S0> = <nat:9> } <var:S1> := <nat:8> { <var:Z> = <var:O> \land <var:S0> = <nat:9> \land <var:S1> = <nat:8> } \end{verbatim} This is shown to be logically sound with the scheme from typical Hoare reasoning . Shifting focus toward the following statement seen in the series of commands , \begin{verbatim} { <var:Z> = <var:O> } <var:S0> := <nat:9> { <var:Z> = <var:O> \land <var:S0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Z> = <var:O> }} <var:S0> := <nat:9> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:Z> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:Z> ; <var:S2> := <var:S2> * <var:Z> ; <var:L> := <var:S2> ; <var:L> := <var:L> + <var:S1> ; <var:L> := <var:L> + <var:S0> {{ <var:L> = <nat:1> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> * <var:O> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> * <var:O> /\ <var:S2> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> * <var:O> /\ <var:S2> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:8> * <var:O> /\ <var:L> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:S0> = <nat:9> /\ <var:L> = <nat:1> * <var:O> ^ <nat:2> + <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:O> /\ <var:L> = <nat:1> * <var:O> ^ <nat:2> + <nat:8> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 