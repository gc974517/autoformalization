\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:5> ; <var:u> := <var:C0> \end{verbatim} Assuming it to be that $ <var:Y> = <var:L> $ prior to interpreting this set of commands then $ <var:u> = <nat:5> $ after set of instructions exits . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be done using usual Hoare logic . Further , we see the variable assignmet statement \verb | <var:C0> := <nat:5> ; | . This forwards the condition $ \{ <var:Y> = <var:L> \} $ to the condition $ \{ <var:Y> = <var:L> \land <var:C0> = <nat:5> \} $ . Taking a look at the subsequent command found in our program , we see the environment update statement \verb | <var:u> := <var:C0> | . This command forwards the precondition $ \{ <var:Y> = <var:L> \land <var:C0> = <nat:5> \} $ as $ \{ <var:Y> = <var:L> \land <var:u> = <nat:5> \} $ . This is shown by the assignment inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Y> = <var:L> }} <var:C0> := <nat:5> ; <var:u> := <var:C0> {{ <var:u> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:L> /\ <var:u> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 