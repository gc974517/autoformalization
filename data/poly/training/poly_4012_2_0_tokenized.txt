\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:1> ; <var:j> := <var:i0> \end{verbatim} Assuming that we have $ <var:W> = <var:N> $ before interpreting this set of instructions it follows that we have $ <var:j> = <nat:1> $ when code is done . \end{theorem} \begin{proof} The course of logic for this code segment is done using Hoare techniques . Stepping forward , we see the variable binding command binding $ <nat:1> $ to $ <var:i0>$ . This forwards the precondition $ \{ <var:W> = <var:N> \} $ toward the postcondition $ \{ <var:W> = <var:N> \land <var:i0> = <nat:1> \} $ . This is guaranteed with the assignment scheme found in Hoare reasoning . Now , we have the assignment statement defining $ <var:i0$ toward $ <var:j>$ . This line redefines the condition $ \{ <var:W> = <var:N> \land <var:i0> = <nat:1> \} $ as the postcondition $ \{ <var:W> = <var:N> \land <var:j> = <nat:1> \} $ . This is given by the assignment rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:W> = <var:N> }} <var:i0> := <nat:1> ; <var:j> := <var:i0> {{ <var:j> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:j> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 