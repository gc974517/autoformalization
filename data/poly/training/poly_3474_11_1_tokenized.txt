\begin{document} \begin{theorem} We define the following code as follows \begin{verbatim} <var:k1> := <var:i> ; <var:k2> := <var:k1> * <var:i> ; <var:k3> := <var:k2> * <var:i> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:5> ; <var:U> := <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> \end{verbatim} Assume --- assuming some $ <var:r> $ --- $ <var:i> = <var:r> $ prior to executing the list of instructions , it follows that $ <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:k1> := <var:i> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <var:r> \} \\ <var:k2> := <var:k1> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <var:r> \land <var:k2> = <var:r> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <var:r> \land <var:k2> = <var:r> ^ <nat:2> \land <var:k3> = <var:r> ^ <nat:3> \} \\ <var:k0> := <nat:5> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <var:r> \land <var:k2> = <var:r> ^ <nat:2> \land <var:k3> = <var:r> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k1> := <var:k1> * <nat:4> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <nat:4> * <var:r> \land <var:k2> = <var:r> ^ <nat:2> \land <var:k3> = <var:r> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k2> := <var:k2> * <nat:7> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <nat:4> * <var:r> \land <var:k2> = <nat:7> * <var:r> ^ <nat:2> \land <var:k3> = <var:r> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:k3> := <var:k3> * <nat:5> ; \\ \{ <var:i> = <var:r> \land <var:k1> = <nat:4> * <var:r> \land <var:k2> = <nat:7> * <var:r> ^ <nat:2> \land <var:k3> = <nat:5> * <var:r> ^ <nat:3> \land <var:k0> = <nat:5> \} \\ <var:U> := <var:k3> \\ \{ <var:i> = <var:r> \land <var:k1> = <nat:4> * <var:r> \land <var:k2> = <nat:7> * <var:r> ^ <nat:2> \land <var:k0> = <nat:5> \land <var:U> = <nat:5> * <var:r> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:k2> \\ \{ <var:i> = <var:r> \land <var:k1> = <nat:4> * <var:r> \land <var:k0> = <nat:5> \land <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:k1> \\ \{ <var:i> = <var:r> \land <var:k0> = <nat:5> \land <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> \} \end{eqnarray} Allowing interpreting the segment of code returns : \begin{eqnarray} <var:U> := <var:U> + <var:k0> \\ \{ <var:i> = <var:r> \land <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> \} \end{eqnarray} Using Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <var:k1> := <var:i> ; <var:k2> := <var:k1> * <var:i> ; <var:k3> := <var:k2> * <var:i> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:5> ; <var:U> := <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> {{ <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <var:r> /\ <var:k2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <var:r> /\ <var:k2> = <var:r> ^ <nat:2> /\ <var:k3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <var:r> /\ <var:k2> = <var:r> ^ <nat:2> /\ <var:k3> = <var:r> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k2> = <var:r> ^ <nat:2> /\ <var:k3> = <var:r> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:k3> = <var:r> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:r> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:k0> = <nat:5> /\ <var:U> = <nat:5> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k1> = <nat:4> * <var:r> /\ <var:k0> = <nat:5> /\ <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:k0> = <nat:5> /\ <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:U> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 