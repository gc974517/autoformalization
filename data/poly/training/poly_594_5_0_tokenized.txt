\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:T> ; <var:v> := <var:Y1> ; <var:v> := <var:v> + <var:Y0> \end{verbatim} Given that we have $ <var:T> = <var:i> $ --- for any natural numbers $ <var:i> $ --- before evaluating this segment of code it holds that we see $ <var:v> = <nat:5> \times <var:i> + <nat:2> $ after list of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:T> = <var:i> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:T> = <var:i> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <nat:5> ; \\ \{ <var:T> = <var:i> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <var:T> ; \\ \{ <var:T> = <var:i> \land <var:Y0> = <nat:2> \land <var:Y1> = <nat:5> \times <var:i> \} \\ <var:v> := <var:Y1> ; \\ \{ <var:T> = <var:i> \land <var:Y0> = <nat:2> \land <var:v> = <nat:5> \times <var:i> \} \\ <var:v> := <var:v> + <var:Y0> \\ \{ <var:T> = <var:i> \land <var:v> = <nat:5> \times <var:i> + <nat:2> \} \end{eqnarray} Allowing interpreting this set of commands gives us : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:T> = <var:i> }} <var:Y0> := <nat:2> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:T> ; <var:v> := <var:Y1> ; <var:v> := <var:v> + <var:Y0> {{ <var:v> = <nat:5> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:Y0> = <nat:2> /\ <var:Y1> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:Y0> = <nat:2> /\ <var:v> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:i> /\ <var:v> = <nat:5> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 