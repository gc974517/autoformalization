\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D3> := <var:D2> * <var:v> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:2> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:8> ; <var:X> := <var:D3> <var:X> := <var:X> + <var:D2> <var:X> := <var:X> + <var:D1> <var:X> := <var:X> + <var:D0> \end{verbatim} Allowing it to hold that $ <var:v> = <var:k> $ ( for some $ <var:k> \in \mathbb{N} $ ) ahead of the execution of this series of instructions , then $ <var:X> = <nat:8> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:3> $ once series of commands has exited . \end{theorem} \begin{proof} The application of Hoare techniques gives us : \begin{eqnarray} \{ <var:v> = <var:k> \} \\ <var:D1> := <var:v> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <var:k> \} \\ <var:D2> := <var:D1> * <var:v> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <var:k> \land <var:D2> = <var:k> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:v> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <var:k> \land <var:D2> = <var:k> ^ <nat:2> \land <var:D3> = <var:k> ^ <nat:3> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <var:k> \land <var:D2> = <var:k> ^ <nat:2> \land <var:D3> = <var:k> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D1> := <var:D1> * <nat:2> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <nat:2> \times <var:k> \land <var:D2> = <var:k> ^ <nat:2> \land <var:D3> = <var:k> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D2> := <var:D2> * <nat:3> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <nat:2> \times <var:k> \land <var:D2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:D3> = <var:k> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:D3> := <var:D3> * <nat:8> ; \\ \{ <var:v> = <var:k> \land <var:D1> = <nat:2> \times <var:k> \land <var:D2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:D3> = <nat:8> \times <var:k> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ <var:X> := <var:D3> \\ \{ <var:v> = <var:k> \land <var:D1> = <nat:2> \times <var:k> \land <var:D2> = <nat:3> \times <var:k> ^ <nat:2> \land <var:D0> = <nat:3> \land <var:X> = <nat:8> \times <var:k> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:D2> \\ \{ <var:v> = <var:k> \land <var:D1> = <nat:2> \times <var:k> \land <var:D0> = <nat:3> \land <var:X> = <nat:8> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:D1> \\ \{ <var:v> = <var:k> \land <var:D0> = <nat:3> \land <var:X> = <nat:8> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> \} \\ <var:X> := <var:X> + <var:D0> \\ \{ <var:v> = <var:k> \land <var:X> = <nat:8> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:3> \} \end{eqnarray} Therefore , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:v> = <var:k> }} <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D3> := <var:D2> * <var:v> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:2> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:8> ; <var:X> := <var:D3> <var:X> := <var:X> + <var:D2> <var:X> := <var:X> + <var:D1> <var:X> := <var:X> + <var:D0> {{ <var:X> = <nat:8> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <var:k> /\ <var:D2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <var:k> /\ <var:D2> = <var:k> ^ <nat:2> /\ <var:D3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <var:k> /\ <var:D2> = <var:k> ^ <nat:2> /\ <var:D3> = <var:k> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <nat:2> * <var:k> /\ <var:D2> = <var:k> ^ <nat:2> /\ <var:D3> = <var:k> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <nat:2> * <var:k> /\ <var:D2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:D3> = <var:k> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <nat:2> * <var:k> /\ <var:D2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:D3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <nat:2> * <var:k> /\ <var:D2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:X> = <nat:8> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D1> = <nat:2> * <var:k> /\ <var:D0> = <nat:3> /\ <var:X> = <nat:8> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:D0> = <nat:3> /\ <var:X> = <nat:8> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:k> /\ <var:X> = <nat:8> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 