\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:R> ; <var:K> := <var:X1> ; <var:K> := <var:K> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for any $ <var:v> \in \mathbb{N} $ , it to hold that $ <var:R> = <var:v> $ ahead of interpreting this series of instructions , then $ <var:K> = <nat:9> \cdot <var:v> + <nat:3> $ once series of instructions exits . \end{theorem} \begin{proof} The proof of this segment of code can be seen by usual Hoare reasoning . Paying attention to the following statements contained in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:v> \} & <var:X0> := <nat:3> & \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \} \\ \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \} & <var:X1> := <nat:9> & \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \} \\ \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> \} & <var:X1> := <var:X1> * <var:R> & \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> * <var:v> \} \\ \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:X1> = <nat:9> * <var:v> \} & <var:K> := <var:X1> & \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:K> = <nat:9> * <var:v> \} \\ \{ <var:R> = <var:v> \land <var:X0> = <nat:3> \land <var:K> = <nat:9> * <var:v> \} & <var:K> := <var:K> + <var:X0& \{ <var:R> = <var:v> \land <var:K> = <nat:9> * <var:v> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:R> ; <var:K> := <var:X1> ; <var:K> := <var:K> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:R> = <var:v> }} <def:poly> {{ <var:K> = <nat:9> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:X0> = <nat:3> /\ <var:K> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:K> = <nat:9> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 