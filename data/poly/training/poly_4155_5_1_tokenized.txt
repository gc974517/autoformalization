\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:g1> := <var:w> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> \end{verbatim} Assuming --- for integers $ <var:o> $ --- $ <var:w> = <var:o> $ prior to the execution of the list of commands it holds that $ <var:q> = <nat:2> \times <var:o> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this set of instructions is evident through Hoare logic . Moving on , we see \begin{verbatim} { <var:w> = <var:o> } <var:g1> := <var:w> { <var:w> = <var:o> \land <var:g1> = <var:o> } { <var:w> = <var:o> \land <var:g1> = <var:o> } <var:g0> := <nat:1> { <var:w> = <var:o> \land <var:g1> = <var:o> \land <var:g0> = <nat:1> } { <var:w> = <var:o> \land <var:g1> = <var:o> \land <var:g0> = <nat:1> } <var:g1> := <var:g1> * <nat:2> { <var:w> = <var:o> \land <var:g1> = <nat:2> \cdot <var:o> \land <var:g0> = <nat:1> } { <var:w> = <var:o> \land <var:g1> = <nat:2> \cdot <var:o> \land <var:g0> = <nat:1> } <var:q> := <var:g1{ <var:w> = <var:o> \land <var:g0> = <nat:1> \land <var:q> = <nat:2> \cdot <var:o> } \end{verbatim} This is shown to be logically sound through the binding law given in Hoare logic . Considering the proceeding statement in the series of instructions , \begin{verbatim} { <var:w> = <var:o> } <var:g1> := <var:w> { <var:w> = <var:o> \land <var:g1> = <var:o> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <var:g1> := <var:w> ; <var:g0> := <nat:1> ; <var:g1> := <var:g1> * <nat:2> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> {{ <var:q> = <nat:2> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:g1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:g1> = <var:o> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:g1> = <nat:2> * <var:o> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:g0> = <nat:1> /\ <var:q> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:q> = <nat:2> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 