\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:X> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:X> ; <var:r2> := <var:r2> * <var:X> ; <var:S> := <var:r2> ; <var:S> := <var:S> + <var:r1> ; <var:S> := <var:S> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:X> = <var:f> $ before running our program it must be that we see $ <var:S> = <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this segment of code is demonstrated through Hoare reasoning . Shifting focus toward the following statements found in our segment of code , we have \begin{eqnarray} \{ <var:X> = <var:f> \} \, <var:r0> := <nat:2> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \\ \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \, <var:r1> := <nat:1> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \} \\ \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \} \, <var:r1> := <var:r1> * <var:X> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \times <var:f> \} \\ \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \times <var:f> \} \, <var:r2> := <nat:4> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \times <var:f> \land <var:r2> = <nat:4> \} \end{eqnarray} Now , we see \begin{eqnarray} \{ <var:X> = <var:f> \} \, <var:r0> := <nat:2> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \\ \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \, <var:r1> := <nat:1> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \} \\ \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \} \, <var:r1> := <var:r1> * <var:X> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \times <var:f> \} \end{eqnarray} This is shown with the variable binding inference rule found in usual Hoare reasoning . Going forward , we have \begin{eqnarray} \{ <var:X> = <var:f> \} \, <var:r0> := <nat:2> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \end{eqnarray} This is shown to be logically sound with the environment update rule of standard Hoare logic . Moving on to the subsequent bit of code found in our code , we see \begin{eqnarray} \{ <var:X> = <var:f> \} \, <var:r0> := <nat:2> \, \{ <var:X> = <var:f> \land <var:r0> = <nat:2> \} \end{eqnarray} This is deduced using the binding law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:X> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:X> ; <var:r2> := <var:r2> * <var:X> ; <var:S> := <var:r2> ; <var:S> := <var:S> + <var:r1> ; <var:S> := <var:S> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:X> = <var:f> }} <def:poly> {{ <var:S> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:f> /\ <var:r2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:f> /\ <var:r2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:f> /\ <var:r2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:f> /\ <var:S> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:r0> = <nat:2> /\ <var:S> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:S> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 