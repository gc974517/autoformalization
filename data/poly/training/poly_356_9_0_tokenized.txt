\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:P> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:P> ; <var:J2> := <var:J2> * <var:P> ; <var:Z> := <var:J2> ; <var:Z> := <var:Z> + <var:J1> ; <var:Z> := <var:Z> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Given that we have $ <var:P> = <var:a> $ ahead of the evaluation of our code segment it follows that we see $ <var:Z> = <nat:4> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:3> $ after set of instructions finishes . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:P> = <var:a> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> * <var:a> \} \\ <var:J2> := <nat:4> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> * <var:a> \land <var:J2> = <nat:4> \} \\ <var:J2> := <var:J2> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> * <var:a> \land <var:J2> = <nat:4> * <var:a> \} \\ <var:J2> := <var:J2> * <var:P> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> * <var:a> \land <var:J2> = <nat:4> * <var:a> ^ <nat:2> \} \\ <var:Z> := <var:J2> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:J1> = <nat:3> * <var:a> \land <var:Z> = <nat:4> * <var:a> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:J1> ; \\ \{ <var:P> = <var:a> \land <var:J0> = <nat:3> \land <var:Z> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> \} \\ <var:Z> := <var:Z> + <var:J0> \\ \{ <var:P> = <var:a> \land <var:Z> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:P> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:P> ; <var:J2> := <var:J2> * <var:P> ; <var:Z> := <var:J2> ; <var:Z> := <var:Z> + <var:J1> ; <var:Z> := <var:Z> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:P> = <var:a> }} <def:poly> {{ <var:Z> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> * <var:a> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> * <var:a> /\ <var:J2> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> * <var:a> /\ <var:J2> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:3> * <var:a> /\ <var:Z> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:J0> = <nat:3> /\ <var:Z> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:a> /\ <var:Z> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 