\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:1> ; <var:O> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Assuming it to be that $ <var:G> = <var:W> $ ahead of evaluating our series of commands , it holds that we see $ <var:O> = <nat:1> $ after program has exited . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is shown by standard Hoare techniques . Taking a look at the following commands in our series of commands , we have \begin{eqnarray} \{ <var:G> = <var:W> \} \, <var:T0> := <nat:1> \, \{ <var:G> = <var:W> \land <var:T0> = <nat:1> \} \\ \{ <var:G> = <var:W> \land <var:T0> = <nat:1> \} \, <var:O> := <var:T0\, \{ <var:G> = <var:W> \land <var:O> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:1> ; <var:O> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:G> = <var:W> }} <def:poly> {{ <var:O> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:O> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 