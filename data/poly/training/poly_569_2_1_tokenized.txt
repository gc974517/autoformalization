\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:7> ; <var:H> := <var:O0> \end{verbatim} Given it to be that $ <var:N> = <var:x> $ before evaluating the code , it follows that we see $ <var:H> = <nat:7> $ . \end{theorem} \begin{proof} Notice the following decorated code segment . \begin{eqnarray} \{ <var:N> = <var:x> \} \\ <var:O0> := <nat:7> ; \\ \{ <var:N> = <var:x> \land <var:O0> = <nat:7> \} \\ <var:H> := <var:O0> \\ \{ <var:N> = <var:x> \land <var:H> = <nat:7> \} \end{eqnarray} The application of typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <var:O0> := <nat:7> ; <var:H> := <var:O0> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 