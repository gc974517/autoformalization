\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:4> ; <var:p3> := <var:p3> * <nat:5> ; <var:C> := <var:p3> <var:C> := <var:C> + <var:p1> <var:C> := <var:C> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Given for every natural coefficients $ <var:a> $ it to be that $ <var:R> = <var:a> $ ahead of interpreting the series of commands , it follows that we see $ <var:C> = <nat:5> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> + <nat:4> $ after program has terminated . \end{theorem} \begin{proof} Observe that the below decorated set of commands . \begin{eqnarray} \{ <var:R> = <var:a> \} \\ <var:p1> := <var:R> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <var:a> \} \\ <var:p2> := <var:p1> * <var:R> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:R> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \} \end{eqnarray} Advancing running the series of instructions produces : \begin{eqnarray} <var:p0> := <nat:4> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p0> = <nat:4> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <nat:4> \times <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <var:a> ^ <nat:3> \land <var:p0> = <nat:4> \} \\ <var:p3> := <var:p3> * <nat:5> ; \\ \{ <var:R> = <var:a> \land <var:p1> = <nat:4> \times <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p3> = <nat:5> \times <var:a> ^ <nat:3> \land <var:p0> = <nat:4> \} \\ <var:C> := <var:p3> \\ \{ <var:R> = <var:a> \land <var:p1> = <nat:4> \times <var:a> \land <var:p2> = <var:a> ^ <nat:2> \land <var:p0> = <nat:4> \land <var:C> = <nat:5> \times <var:a> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:p1> \\ \{ <var:R> = <var:a> \land <var:p0> = <nat:4> \land <var:C> = <nat:5> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> \} \\ <var:C> := <var:C> + <var:p0> \\ \{ <var:R> = <var:a> \land <var:C> = <nat:5> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:4> ; <var:p3> := <var:p3> * <nat:5> ; <var:C> := <var:p3> <var:C> := <var:C> + <var:p1> <var:C> := <var:C> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:R> = <var:a> }} <def:poly> {{ <var:C> = <nat:5> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <nat:4> * <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <var:a> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <nat:4> * <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:a> ^ <nat:3> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p1> = <nat:4> * <var:a> /\ <var:p2> = <var:a> ^ <nat:2> /\ <var:p0> = <nat:4> /\ <var:C> = <nat:5> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:p0> = <nat:4> /\ <var:C> = <nat:5> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:C> = <nat:5> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 