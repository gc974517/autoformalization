\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:p> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:p> ; <var:H2> := <var:H2> * <var:p> ; <var:h> := <var:H2> ; <var:h> := <var:h> + <var:H1> ; <var:h> := <var:h> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:p> = <var:k> $ , for any positive numbers $ <var:k> $ , prior to interpreting the program then $ <var:h> = <nat:7> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> $ . \end{theorem} \begin{proof} See that the below decorated list of instructions . \begin{eqnarray} \{ <var:p> = <var:k> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \} \\ <var:H1> := <nat:3> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \} \\ <var:H1> := <var:H1> * <var:p> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \cdot <var:k> \} \\ <var:H2> := <nat:7> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \cdot <var:k> \land <var:H2> = <nat:7> \} \\ <var:H2> := <var:H2> * <var:p> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \cdot <var:k> \land <var:H2> = <nat:7> \cdot <var:k> \} \\ <var:H2> := <var:H2> * <var:p> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \cdot <var:k> \land <var:H2> = <nat:7> \cdot <var:k> ^ <nat:2> \} \\ <var:h> := <var:H2> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:H1> = <nat:3> \cdot <var:k> \land <var:h> = <nat:7> \cdot <var:k> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:H1> ; \\ \{ <var:p> = <var:k> \land <var:H0> = <nat:1> \land <var:h> = <nat:7> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> \} \\ <var:h> := <var:h> + <var:H0> \\ \{ <var:p> = <var:k> \land <var:h> = <nat:7> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:H1> := <nat:3> ; <var:H1> := <var:H1> * <var:p> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:p> ; <var:H2> := <var:H2> * <var:p> ; <var:h> := <var:H2> ; <var:h> := <var:h> + <var:H1> ; <var:h> := <var:h> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <def:poly> {{ <var:h> = <nat:7> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> * <var:k> /\ <var:H2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> * <var:k> /\ <var:H2> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> * <var:k> /\ <var:H2> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:3> * <var:k> /\ <var:h> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:H0> = <nat:1> /\ <var:h> = <nat:7> * <var:k> ^ <nat:2> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:h> = <nat:7> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 