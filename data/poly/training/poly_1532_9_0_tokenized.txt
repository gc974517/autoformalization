\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:a> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> \end{verbatim} Assume it to be that $ <var:a> = <var:l> $ , for all positive integer coefficients $ <var:l> $ , ahead of the execution of our series of instructions it follows that we have $ <var:k> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:3> $ when set of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:l> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> * <var:l> \} \\ <var:n2> := <nat:2> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> * <var:l> \land <var:n2> = <nat:2> \} \\ <var:n2> := <var:n2> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> * <var:l> \land <var:n2> = <nat:2> * <var:l> \} \\ <var:n2> := <var:n2> * <var:a> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> * <var:l> \land <var:n2> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:k> := <var:n2> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> * <var:l> \land <var:k> = <nat:2> * <var:l> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:n1> ; \\ \{ <var:a> = <var:l> \land <var:n0> = <nat:3> \land <var:k> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> \} \\ <var:k> := <var:k> + <var:n0> \\ \{ <var:a> = <var:l> \land <var:k> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:a> = <var:l> }} <var:n0> := <nat:3> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:a> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:k> := <var:n2> ; <var:k> := <var:k> + <var:n1> ; <var:k> := <var:k> + <var:n0> {{ <var:k> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:l> /\ <var:n2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:l> /\ <var:n2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:l> /\ <var:n2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:l> /\ <var:k> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:n0> = <nat:3> /\ <var:k> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:l> /\ <var:k> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 