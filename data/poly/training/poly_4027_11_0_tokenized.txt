\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:1> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:A> ; <var:F2> := <var:F2> * <var:A> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:A> ; <var:F3> := <var:F3> * <var:A> ; <var:F3> := <var:F3> * <var:A> ; <var:b> := <var:F3> ; <var:b> := <var:b> + <var:F2> ; <var:b> := <var:b> + <var:F0> \end{verbatim} Assume that we have $ <var:A> = <var:T> $ --- for all positive numbers $ <var:T> $ --- before evaluating the set of instructions , it follows that we see $ <var:b> = <nat:9> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> $ once series of instructions is done . \end{theorem} \begin{proof} The argument for this code can be done using usual Hoare logic . Jumping to the upcoming step in our segment of code , we have \verb | { <var:A> = <var:T> } <var:F0> := <nat:1> { <var:A> = <var:T> \land <var:F0> = <nat:1> } | . Taking another step toward the proceeding steps seen in the code segment , we have \verb | { <var:A> = <var:T> } <var:F0> := <nat:1> { <var:A> = <var:T> \land <var:F0> = <nat:1> } | , \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> } <var:F2> := <nat:4> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> } | , \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> } <var:F2> := <var:F2> * <var:A> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> * <var:T> } | , \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> * <var:T> } <var:F2> := <var:F2> * <var:A> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> * <var:T> ^ <nat:2> } | and \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> * <var:T> ^ <nat:2> } <var:F3> := <nat:9> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> * <var:T> ^ <nat:2> \land <var:F3> = <nat:9> } | . This is given with the scheme from usual Hoare reasoning . Considering the proceeding lines seen in our segment of code , we see \verb | { <var:A> = <var:T> } <var:F0> := <nat:1> { <var:A> = <var:T> \land <var:F0> = <nat:1> } | and \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> } <var:F2> := <nat:4> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> } | . Observing the following lines of codeseen in the list of commands , we see \verb | { <var:A> = <var:T> } <var:F0> := <nat:1> { <var:A> = <var:T> \land <var:F0> = <nat:1> } | and \verb | { <var:A> = <var:T> \land <var:F0> = <nat:1> } <var:F2> := <nat:4> { <var:A> = <var:T> \land <var:F0> = <nat:1> \land <var:F2> = <nat:4> } | . Moving on to the subsequent bit of code seen in the series of commands , we see \verb | { <var:A> = <var:T> } <var:F0> := <nat:1> { <var:A> = <var:T> \land <var:F0> = <nat:1> } | . This is ensured with the variable binding rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:A> = <var:T> }} <var:F0> := <nat:1> ; <var:F2> := <nat:4> ; <var:F2> := <var:F2> * <var:A> ; <var:F2> := <var:F2> * <var:A> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:A> ; <var:F3> := <var:F3> * <var:A> ; <var:F3> := <var:F3> * <var:A> ; <var:b> := <var:F3> ; <var:b> := <var:b> + <var:F2> ; <var:b> := <var:b> + <var:F0> {{ <var:b> = <nat:9> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:F3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:b> = <nat:9> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:F0> = <nat:1> /\ <var:b> = <nat:9> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:b> = <nat:9> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 