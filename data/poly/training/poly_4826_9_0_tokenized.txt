\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:k> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:k> ; <var:j2> := <var:j2> * <var:k> ; <var:F> := <var:j2> ; <var:F> := <var:F> + <var:j1> ; <var:F> := <var:F> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:k> = <var:B> $ before the execution of our set of commands then we have $ <var:F> = <nat:1> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> $ once list of commands has finished executing . \end{theorem} \begin{proof} The argument for the list of instructions can be demonstrated by Hoare techniques . Immediately following , we see the variable assignmet command \verb | <var:j0> := <nat:6> ; | . This line forwards the condition $ \{ <var:k> = <var:B> \} $ toward $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \} $ . Moving on to the next step , the variable assignmet code giving $ <nat:6> $ toward $ <var:j1>$ . This line transfers the condition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \} $ to the postcondition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \} $ . This is rigorously given with the assignment rule in usual Hoare logic . Going to the next step , we see the assignment statement \verb | <var:j1> := <var:j1> * <var:k> ; | . This advances $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \} $ toward the condition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \} $ . Further , we see the binding command defining $ <nat:1> $ as $ <var:j2>$ . This command transfers the precondition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \} $ into $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \} $ . This is rigorously given by the assignment scheme in Hoare reasoning . Moving on , the variable update command \verb | <var:j2> := <var:j2> * <var:k> ; | . This line redefines the precondition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \} $ into the condition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \cdot <var:B> \} $ . This is guaranteed with the assignment law defined in typical Hoare logic . Shifting focus toward the upcoming line contained in our list of commands , we have the binding code \verb | <var:j2> := <var:j2> * <var:k> ; | . This command transfers $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \cdot <var:B> \} $ into the postcondition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \cdot <var:B> ^ <nat:2> \} $ . Going forward , we see the command \verb | <var:F> := <var:j2> ; | . This redefines the precondition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:j2> = <nat:1> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:F> = <nat:1> \cdot <var:B> ^ <nat:2> \} $ . Moving forward to the upcoming line of code in our set of commands , we see the variable assignmet line yielding $ <var:F> + <var:j1> $ toward $ <var:F>$ . This line transfers $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:6> \cdot <var:B> \land <var:F> = <nat:1> \cdot <var:B> ^ <nat:2> \} $ toward the condition $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:F> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> \} $ . Focusing on the proceeding line of code found in the set of commands , we see the assignment code giving $ <var:F> + <var:j0$ as $ <var:F>$ . This line advances $ \{ <var:k> = <var:B> \land <var:j0> = <nat:6> \land <var:F> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> \} $ toward the condition $ \{ <var:k> = <var:B> \land <var:F> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:6> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:k> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:k> ; <var:j2> := <var:j2> * <var:k> ; <var:F> := <var:j2> ; <var:F> := <var:F> + <var:j1> ; <var:F> := <var:F> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <def:poly> {{ <var:F> = <nat:1> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> * <var:B> /\ <var:j2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> * <var:B> /\ <var:j2> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> * <var:B> /\ <var:j2> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:6> * <var:B> /\ <var:F> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:j0> = <nat:6> /\ <var:F> = <nat:1> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:F> = <nat:1> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 