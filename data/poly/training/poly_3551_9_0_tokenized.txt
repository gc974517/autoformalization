\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:1> ; <var:X1> := <var:X1> * <var:i> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:i> ; <var:X2> := <var:X2> * <var:i> ; <var:a> := <var:X2> ; <var:a> := <var:a> + <var:X1> ; <var:a> := <var:a> + <var:X0> \end{verbatim} Allowing it to hold that $ <var:i> = <var:I> $ ahead of the evaluation of the set of commands , it follows that $ <var:a> = <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:2> $ once program has terminated . \end{theorem} \begin{proof} Proving correctness for our series of commands can be given by Hoare reasoning . Advancing on , we have the assignment line \verb | <var:X0> := <nat:2> ; | . This code redefines the precondition $ \{ <var:i> = <var:I> \} $ as the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \} $ . Stepping through , the binding statement \verb | <var:X1> := <nat:1> ; | . This command forwards the precondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \} $ . Now , the variable update statement \verb | <var:X1> := <var:X1> * <var:i> ; | . This advances the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \} $ to $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \} $ . This is shown to be logically sound by the assignment scheme given by Hoare techniques . Paying attention to the subsequent line of code contained in our list of commands , we have the environment update command \verb | <var:X2> := <nat:3> ; | . This statement forwards $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \} $ into $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \} $ . This is known to be sound by the assignment law from typical Hoare techniques . Stepping forward , we have the binding line \verb | <var:X2> := <var:X2> * <var:i> ; | . This transfers the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \} $ as the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \times <var:I> \} $ . This is ensured by the assignment scheme found in usual Hoare logic . Shifting focus toward the next piece of code found in the segment of code , we have the command \verb | <var:X2> := <var:X2> * <var:i> ; | . This transfers the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \times <var:I> \} $ toward the postcondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \times <var:I> ^ <nat:2> \} $ . This is sound by the assignment rule defined in standard Hoare techniques . Taking a look at the subsequent line contained in the list of instructions , we see the statement \verb | <var:a> := <var:X2> ; | . This forwards the precondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:X2> = <nat:3> \times <var:I> ^ <nat:2> \} $ toward the postcondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:a> = <nat:3> \times <var:I> ^ <nat:2> \} $ . Looking at the following step contained in our segment of code , we have the variable assignmet command binding $ <var:a> + <var:X1> $ into $ <var:a>$ . This forwards the condition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:X1> = <nat:1> \times <var:I> \land <var:a> = <nat:3> \times <var:I> ^ <nat:2> \} $ toward the postcondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:a> = <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> \} $ . This is deduced by the assignment rule given by typical Hoare techniques . Taking a look at the next line found in the code , we have the code giving $ <var:a> + <var:X0$ toward $ <var:a>$ . This code forwards the precondition $ \{ <var:i> = <var:I> \land <var:X0> = <nat:2> \land <var:a> = <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> \} $ to the condition $ \{ <var:i> = <var:I> \land <var:a> = <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:i> = <var:I> }} <var:X0> := <nat:2> ; <var:X1> := <nat:1> ; <var:X1> := <var:X1> * <var:i> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:i> ; <var:X2> := <var:X2> * <var:i> ; <var:a> := <var:X2> ; <var:a> := <var:a> + <var:X1> ; <var:a> := <var:a> + <var:X0> {{ <var:a> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:I> /\ <var:X2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:I> /\ <var:X2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:I> /\ <var:X2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:1> * <var:I> /\ <var:a> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:X0> = <nat:2> /\ <var:a> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:a> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 