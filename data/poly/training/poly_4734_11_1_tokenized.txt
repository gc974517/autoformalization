\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U3> := <var:U2> * <var:z> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:6> ; <var:U3> := <var:U3> * <nat:8> ; <var:u> := <var:U3> <var:u> := <var:u> + <var:U2> <var:u> := <var:u> + <var:U1> <var:u> := <var:u> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given all integers $ <var:m> $ --- that we have $ <var:z> = <var:m> $ prior to evaluating this series of commands , it must be that $ <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be given by usual Hoare logic . Paying attention to the proceeding line in the segment of code , we see the environment update code \verb | <var:U1> := <var:z> ; | . This takes $ \{ <var:z> = <var:m> \} $ to the condition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \} $ . Focusing on the subsequent step found in the series of commands , we have the statement assigning $ <var:U1> * <var:z> $ as $ <var:U2>$ . This command forwards the precondition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \} $ to the postcondition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \} $ . This is deduced with the assignment scheme from standard Hoare logic . Focusing on the next line of code contained in the code , we have the variable binding code \verb | <var:U3> := <var:U2> * <var:z> ; | . This moves $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \} $ . Further , the line letting $ <nat:7> $ to $ <var:U0>$ . This command takes the condition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \} $ toward $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ . Stepping forward , we have the variable assignmet code assigning $ <var:U1> * <nat:4> $ as $ <var:U1>$ . This line redefines the precondition $ \{ <var:z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ into the condition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ . Advancing to the next step , the environment update line \verb | <var:U2> := <var:U2> * <nat:6> ; | . This takes the precondition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ toward $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ . This is known to be sound using the assignment inference rule defined by usual Hoare techniques . Honing in on the following statement found in our series of commands , we see the variable binding command yielding $ <var:U3> * <nat:8> $ toward $ <var:U3>$ . This forwards the condition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ into the condition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U3> = <nat:8> \times <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ . This is shown to be logically sound through the assignment scheme given by typical Hoare techniques . Moving forward , we see the statement \verb | <var:u> := <var:U3> | . This advances $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U3> = <nat:8> \times <var:m> ^ <nat:3> \land <var:U0> = <nat:7> \} $ into the condition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> \} $ . Shifting focus toward the next command found in the code , we have the environment update line \verb | <var:u> := <var:u> + <var:U2> | . This statement takes the condition $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U2> = <nat:6> \times <var:m> ^ <nat:2> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> \} $ to $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> \} $ . This is sound with the assignment rule given by typical Hoare reasoning . Considering the following line of code contained in our code , the binding command defining $ <var:u> + <var:U1$ as $ <var:u>$ . This code redefines $ \{ <var:z> = <var:m> \land <var:U1> = <nat:4> \times <var:m> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> \} $ to $ \{ <var:z> = <var:m> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> \} $ . Further , the variable binding statement \verb | <var:u> := <var:u> + <var:U0> | . This line transfers the condition $ \{ <var:z> = <var:m> \land <var:U0> = <nat:7> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> \} $ as $ \{ <var:z> = <var:m> \land <var:u> = <nat:8> \times <var:m> ^ <nat:3> + <nat:6> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U3> := <var:U2> * <var:z> ; <var:U0> := <nat:7> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:6> ; <var:U3> := <var:U3> * <nat:8> ; <var:u> := <var:U3> <var:u> := <var:u> + <var:U2> <var:u> := <var:u> + <var:U1> <var:u> := <var:u> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:z> = <var:m> }} <def:poly> {{ <var:u> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <nat:4> * <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <nat:4> * <var:m> /\ <var:U2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <nat:4> * <var:m> /\ <var:U2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:U3> = <nat:8> * <var:m> ^ <nat:3> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <nat:4> * <var:m> /\ <var:U2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:U0> = <nat:7> /\ <var:u> = <nat:8> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U1> = <nat:4> * <var:m> /\ <var:U0> = <nat:7> /\ <var:u> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:U0> = <nat:7> /\ <var:u> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:m> /\ <var:u> = <nat:8> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 