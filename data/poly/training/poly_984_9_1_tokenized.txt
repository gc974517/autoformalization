\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U3> := <var:U2> * <var:z> ; <var:U0> := <nat:2> ; <var:U2> := <var:U2> * <nat:4> ; <var:U3> := <var:U3> * <nat:4> ; <var:V> := <var:U3> <var:V> := <var:V> + <var:U2> <var:V> := <var:V> + <var:U0> \end{verbatim} Allowing that $ <var:z> = <var:Z> $ before evaluating our code , it follows that $ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:Z> \} \\ <var:U1> := <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \} \\ <var:U2> := <var:U1> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:U2> := <var:U2> * <nat:4> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:U3> := <var:U3> * <nat:4> ; \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:U3> = <nat:4> \times <var:Z> ^ <nat:3> \land <var:U0> = <nat:2> \} \\ <var:V> := <var:U3> \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:U0> = <nat:2> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:U2> \\ \{ <var:z> = <var:Z> \land <var:U1> = <var:Z> \land <var:U0> = <nat:2> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:U0> \\ \{ <var:z> = <var:Z> \land <var:V> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:z> = <var:Z> }} <var:U1> := <var:z> ; <var:U2> := <var:U1> * <var:z> ; <var:U3> := <var:U2> * <var:z> ; <var:U0> := <nat:2> ; <var:U2> := <var:U2> * <nat:4> ; <var:U3> := <var:U3> * <nat:4> ; <var:V> := <var:U3> <var:V> := <var:V> + <var:U2> <var:V> := <var:V> + <var:U0> {{ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:U3> = <nat:4> * <var:Z> ^ <nat:3> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:U0> = <nat:2> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U0> = <nat:2> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:V> = <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 