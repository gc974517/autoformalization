\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:5> ; <var:Y> := <var:N0> \end{verbatim} Allow , taking $ <var:T> \in \mathbb{N} $ , that we have $ <var:S> = <var:T> $ before executing our set of instructions , it must be that we see $ <var:Y> = <nat:5> $ when series of commands has exited . \end{theorem} \begin{proof} The proof of our set of commands can be demonstrated with standard Hoare techniques . Focusing on the following pieces of code seen in our series of instructions , we have \begin{verbatim} { <var:S> = <var:T> } <var:N0> := <nat:5> { <var:S> = <var:T> \land <var:N0> = <nat:5> } { <var:S> = <var:T> \land <var:N0> = <nat:5> } <var:Y> := <var:N0{ <var:S> = <var:T> \land <var:Y> = <nat:5> } \end{verbatim} This is known to be sound using the binding scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:S> = <var:T> }} <var:N0> := <nat:5> ; <var:Y> := <var:N0> {{ <var:Y> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:T> /\ <var:Y> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 