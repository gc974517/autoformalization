\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:X> ; <var:e2> := <var:e1> * <var:X> ; <var:e3> := <var:e2> * <var:X> ; <var:e0> := <nat:7> ; <var:e2> := <var:e2> * <nat:7> ; <var:e3> := <var:e3> * <nat:8> ; <var:w> := <var:e3> <var:w> := <var:w> + <var:e2> <var:w> := <var:w> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:X> = <var:E> $ ( given some $ <var:E> $ ) ahead of the evaluation of the series of instructions , then we have $ <var:w> = <nat:8> \times <var:E> ^ <nat:3> + <nat:7> \times <var:E> ^ <nat:2> + <nat:7> $ when series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:E> \} \\ <var:e1> := <var:X> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \} \\ <var:e2> := <var:e1> * <var:X> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <var:E> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:X> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <var:E> ^ <nat:2> \land <var:e3> = <var:E> ^ <nat:3> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <var:E> ^ <nat:2> \land <var:e3> = <var:E> ^ <nat:3> \land <var:e0> = <nat:7> \} \end{eqnarray} Continuing the evaluation of our list of commands produces : \begin{eqnarray} <var:e2> := <var:e2> * <nat:7> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:e3> = <var:E> ^ <nat:3> \land <var:e0> = <nat:7> \} \end{eqnarray} Continuing running our list of instructions returns : \begin{eqnarray} <var:e3> := <var:e3> * <nat:8> ; \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:e3> = <nat:8> \cdot <var:E> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:w> := <var:e3> \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:w> = <nat:8> \cdot <var:E> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:e2> \\ \{ <var:X> = <var:E> \land <var:e1> = <var:E> \land <var:e0> = <nat:7> \land <var:w> = <nat:8> \cdot <var:E> ^ <nat:3> + <nat:7> \cdot <var:E> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:e0> \\ \{ <var:X> = <var:E> \land <var:w> = <nat:8> \cdot <var:E> ^ <nat:3> + <nat:7> \cdot <var:E> ^ <nat:2> + <nat:7> \} \end{eqnarray} The application of Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:X> ; <var:e2> := <var:e1> * <var:X> ; <var:e3> := <var:e2> * <var:X> ; <var:e0> := <nat:7> ; <var:e2> := <var:e2> * <nat:7> ; <var:e3> := <var:e3> * <nat:8> ; <var:w> := <var:e3> <var:w> := <var:w> + <var:e2> <var:w> := <var:w> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:X> = <var:E> }} <def:poly> {{ <var:w> = <nat:8> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <var:E> ^ <nat:2> /\ <var:e3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <var:E> ^ <nat:2> /\ <var:e3> = <var:E> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:e3> = <var:E> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:E> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:w> = <nat:8> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:e1> = <var:E> /\ <var:e0> = <nat:7> /\ <var:w> = <nat:8> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:E> /\ <var:w> = <nat:8> * <var:E> ^ <nat:3> + <nat:7> * <var:E> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 