\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:v0> := <nat:1> ; <var:e> := <var:v0> \end{verbatim} Assuming --- given any positive integers $ <var:L> $ --- that we have $ <var:A> = <var:L> $ prior to executing this series of commands , it must be that we have $ <var:e> = <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques yields : \begin{eqnarray} \{ <var:A> = <var:L> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:A> = <var:L> \land <var:v0> = <nat:1> \} \\ <var:e> := <var:v0> \\ \{ <var:A> = <var:L> \land <var:e> = <nat:1> \} \end{eqnarray} Given the above , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:A> = <var:L> }} <var:v0> := <nat:1> ; <var:e> := <var:v0> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 