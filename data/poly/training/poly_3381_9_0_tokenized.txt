\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:d> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:d> ; <var:x2> := <var:x2> * <var:d> ; <var:z> := <var:x2> ; <var:z> := <var:z> + <var:x1> ; <var:z> := <var:z> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow letting positive numbers $ <var:P> $ that $ <var:d> = <var:P> $ before executing the list of commands , then we see $ <var:z> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the code can be given using typical Hoare techniques . Considering the following steps found in the code segment , we see \begin{eqnarray} \{ <var:d> = <var:P> \} \, <var:x0> := <nat:3> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:4> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> \} \, <var:x1> := <var:x1> * <var:d> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \} \, <var:x2> := <nat:3> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> \} \, <var:x2> := <var:x2> * <var:d> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> * <var:P> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> * <var:P> \} \, <var:x2> := <var:x2> * <var:d> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> * <var:P> ^ <nat:2> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:x2> = <nat:3> * <var:P> ^ <nat:2> \} \, <var:z> := <var:x2> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:z> = <nat:3> * <var:P> ^ <nat:2> \} \\ \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:x1> = <nat:4> * <var:P> \land <var:z> = <nat:3> * <var:P> ^ <nat:2> \} \, <var:z> := <var:z> + <var:x1> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \land <var:z> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> \} \end{eqnarray} Moving on to the next line contained in our segment of code , we see \begin{eqnarray} \{ <var:d> = <var:P> \} \, <var:x0> := <nat:3> \, \{ <var:d> = <var:P> \land <var:x0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:d> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:d> ; <var:x2> := <var:x2> * <var:d> ; <var:z> := <var:x2> ; <var:z> := <var:z> + <var:x1> ; <var:z> := <var:z> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:d> = <var:P> }} <def:poly> {{ <var:z> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> * <var:P> /\ <var:x2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> * <var:P> /\ <var:x2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> * <var:P> /\ <var:x2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:4> * <var:P> /\ <var:z> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:x0> = <nat:3> /\ <var:z> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:z> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 