\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:l> ; <var:g> := <var:w1> ; <var:g> := <var:g> + <var:w0> \end{verbatim} Allowing it to be that $ <var:l> = <var:W> $ , for natural coefficients $ <var:W> $ , prior to the evaluation of this list of instructions it follows that $ <var:g> = <nat:8> * <var:W> + <nat:3> $ once code is done . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is demonstrated with the following decorated series of commands . \begin{eqnarray} \{ <var:l> = <var:W> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:l> = <var:W> \land <var:w0> = <nat:3> \} \\ <var:w1> := <nat:8> ; \\ \{ <var:l> = <var:W> \land <var:w0> = <nat:3> \land <var:w1> = <nat:8> \} \\ <var:w1> := <var:w1> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:w0> = <nat:3> \land <var:w1> = <nat:8> * <var:W> \} \\ <var:g> := <var:w1> ; \\ \{ <var:l> = <var:W> \land <var:w0> = <nat:3> \land <var:g> = <nat:8> * <var:W> \} \\ <var:g> := <var:g> + <var:w0> \\ \{ <var:l> = <var:W> \land <var:g> = <nat:8> * <var:W> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <var:w0> := <nat:3> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:l> ; <var:g> := <var:w1> ; <var:g> := <var:g> + <var:w0> {{ <var:g> = <nat:8> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:w0> = <nat:3> /\ <var:g> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:g> = <nat:8> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 