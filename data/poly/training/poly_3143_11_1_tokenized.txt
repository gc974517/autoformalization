\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} : \begin{verbatim} <var:L1> := <var:p> ; <var:L2> := <var:L1> * <var:p> ; <var:L3> := <var:L2> * <var:p> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:3> ; <var:K> := <var:L3> <var:K> := <var:K> + <var:L2> <var:K> := <var:K> + <var:L1> <var:K> := <var:K> + <var:L0> \end{verbatim} Assume --- letting natural numbers $ <var:D> $ --- $ <var:p> = <var:D> $ ahead of interpreting our series of instructions it must be that $ <var:K> = <nat:3> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> + <nat:3> $ after series of commands has finished . \end{theorem} \begin{proof} The course of logic for the segment of code is accomplished through typical Hoare techniques . Considering the following step contained in the set of instructions , we see the variable binding command defining $ <var:p> $ to $ <var:L1>$ . This redefines the precondition $ \{ <var:p> = <var:D> \} $ to $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \} $ . This is shown to be logically sound using the assignment scheme found in Hoare reasoning . Taking another step toward the next command contained in the series of instructions , we see the variable binding command \verb | <var:L2> := <var:L1> * <var:p> ; | . This code takes the condition $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \} $ to the condition $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \} $ . This is guaranteed with the assignment inference rule in standard Hoare reasoning . After , we see the variable assignmet code \verb | <var:L3> := <var:L2> * <var:p> ; | . This takes the condition $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \} $ toward $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \} $ . This is guaranteed with the assignment inference rule given by standard Hoare reasoning . Advancing on , the variable update code letting $ <nat:3> $ into $ <var:L0>$ . This command forwards the condition $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \} $ as the condition $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . Keeping momentum , the command giving $ <var:L1> * <nat:5> $ into $ <var:L1>$ . This line forwards $ \{ <var:p> = <var:D> \land <var:L1> = <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ toward the postcondition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . Jumping to the proceeding line of code contained in our code , we see the assignment line binding $ <var:L2> * <nat:3> $ into $ <var:L2>$ . This command advances the precondition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ to the postcondition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . This is sound with the assignment inference rule obtained from Hoare logic . Observing the following bit of code in our series of instructions , we have the variable update statement \verb | <var:L3> := <var:L3> * <nat:3> ; | . This command advances the condition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L3> = <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ toward $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:3> \cdot <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ . Taking a look at the subsequent piece of code contained in the code , we see the assignment statement yielding $ <var:L3$ into $ <var:K>$ . This line transfers the condition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:3> \cdot <var:D> ^ <nat:3> \land <var:L0> = <nat:3> \} $ to $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> \} $ . Moving onward , we see the variable binding code \verb | <var:K> := <var:K> + <var:L2> | . This moves $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> \} $ to $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> \} $ . Paying attention to the proceeding line in our list of instructions , we have the binding statement \verb | <var:K> := <var:K> + <var:L1> | . This forwards the condition $ \{ <var:p> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> \} $ toward the postcondition $ \{ <var:p> = <var:D> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> \} $ . This is known to be sound with the assignment law from typical Hoare logic . Stepping through , we see the code letting $ <var:K> + <var:L0$ toward $ <var:K>$ . This redefines $ \{ <var:p> = <var:D> \land <var:L0> = <nat:3> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> \} $ as the postcondition $ \{ <var:p> = <var:D> \land <var:K> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <var:L1> := <var:p> ; <var:L2> := <var:L1> * <var:p> ; <var:L3> := <var:L2> * <var:p> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:3> ; <var:K> := <var:L3> <var:K> := <var:K> + <var:L2> <var:K> := <var:K> + <var:L1> <var:K> := <var:K> + <var:L0> {{ <var:K> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <var:D> /\ <var:L2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <var:D> /\ <var:L2> = <var:D> ^ <nat:2> /\ <var:L3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <var:D> /\ <var:L2> = <var:D> ^ <nat:2> /\ <var:L3> = <var:D> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L2> = <var:D> ^ <nat:2> /\ <var:L3> = <var:D> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:L3> = <var:D> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:K> = <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L0> = <nat:3> /\ <var:K> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:L0> = <nat:3> /\ <var:K> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 