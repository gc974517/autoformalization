\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:y> ; <var:W2> := <nat:9> ; <var:W2> := <var:W2> * <var:y> ; <var:W2> := <var:W2> * <var:y> ; <var:f> := <var:W2> ; <var:f> := <var:f> + <var:W1> ; <var:f> := <var:f> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:y> = <var:e> $ before running this set of commands , it holds that we have $ <var:f> = <nat:9> * <var:e> ^ <nat:2> + <nat:8> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be done with usual Hoare reasoning . Moving on to the next step , we have the binding command binding $ <nat:4> $ to $ <var:W0>$ . This forwards the condition $ \{ <var:y> = <var:e> \} $ to the postcondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \} $ . Jumping to the following step found in the list of commands , the variable update command \verb | <var:W1> := <nat:8> ; | . This command forwards $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \} $ to the condition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \} $ . This is deduced using the assignment rule found in Hoare techniques . Paying attention to the subsequent statement found in our set of instructions , we have the variable update code \verb | <var:W1> := <var:W1> * <var:y> ; | . This statement transfers $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \} $ to the postcondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \} $ . Immediately following , the variable update command giving $ <nat:9> $ toward $ <var:W2>$ . This command forwards the precondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \} $ to the postcondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \} $ . After , we have the variable update command \verb | <var:W2> := <var:W2> * <var:y> ; | . This redefines the condition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \} $ as the postcondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \cdot <var:e> \} $ . Advancing to the next piece of code seen in the segment of code , we have the variable assignmet statement \verb | <var:W2> := <var:W2> * <var:y> ; | . This code takes $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \cdot <var:e> \} $ as the postcondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \cdot <var:e> ^ <nat:2> \} $ . Moving on to the next step , the statement \verb | <var:f> := <var:W2> ; | . This redefines the condition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:W2> = <nat:9> \cdot <var:e> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:f> = <nat:9> \cdot <var:e> ^ <nat:2> \} $ . Keeping momentum , we see the variable assignmet command \verb | <var:f> := <var:f> + <var:W1> ; | . This takes $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:W1> = <nat:8> \cdot <var:e> \land <var:f> = <nat:9> \cdot <var:e> ^ <nat:2> \} $ as $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:f> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:8> \cdot <var:e> \} $ . This is given through the assignment rule given by Hoare techniques . Now , we have the environment update code defining $ <var:f> + <var:W0$ into $ <var:f>$ . This command redefines the precondition $ \{ <var:y> = <var:e> \land <var:W0> = <nat:4> \land <var:f> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:8> \cdot <var:e> \} $ to the condition $ \{ <var:y> = <var:e> \land <var:f> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:8> \cdot <var:e> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:y> ; <var:W2> := <nat:9> ; <var:W2> := <var:W2> * <var:y> ; <var:W2> := <var:W2> * <var:y> ; <var:f> := <var:W2> ; <var:f> := <var:f> + <var:W1> ; <var:f> := <var:f> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:y> = <var:e> }} <def:poly> {{ <var:f> = <nat:9> * <var:e> ^ <nat:2> + <nat:8> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> * <var:e> /\ <var:W2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> * <var:e> /\ <var:W2> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> * <var:e> /\ <var:W2> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:8> * <var:e> /\ <var:f> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:W0> = <nat:4> /\ <var:f> = <nat:9> * <var:e> ^ <nat:2> + <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:f> = <nat:9> * <var:e> ^ <nat:2> + <nat:8> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 