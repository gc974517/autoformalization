\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:D> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:3> ; <var:R> := <var:i1> <var:R> := <var:R> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:D> = <var:m> $ prior to the execution of the series of instructions , it holds that we see $ <var:R> = <nat:3> * <var:m> + <nat:3> $ when set of commands has exited . \end{theorem} \begin{proof} Proving correctness for this series of commands can be demonstrated with Hoare reasoning . Focusing on the next bit of code in our segment of code , we see \begin{verbatim} { <var:D> = <var:m> } <var:i1> := <var:D> { <var:D> = <var:m> \land <var:i1> = <var:m> } \end{verbatim} Advancing , we have \begin{verbatim} { <var:D> = <var:m> } <var:i1> := <var:D> { <var:D> = <var:m> \land <var:i1> = <var:m> } { <var:D> = <var:m> \land <var:i1> = <var:m> } <var:i0> := <nat:3> { <var:D> = <var:m> \land <var:i1> = <var:m> \land <var:i0> = <nat:3> } \end{verbatim} This is sound by the assignment scheme from usual Hoare logic . Moving forward , we have \begin{verbatim} { <var:D> = <var:m> } <var:i1> := <var:D> { <var:D> = <var:m> \land <var:i1> = <var:m> } { <var:D> = <var:m> \land <var:i1> = <var:m> } <var:i0> := <nat:3> { <var:D> = <var:m> \land <var:i1> = <var:m> \land <var:i0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:D> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:3> ; <var:R> := <var:i1> <var:R> := <var:R> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:D> = <var:m> }} <def:poly> {{ <var:R> = <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:i1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:i1> = <var:m> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:i1> = <nat:3> * <var:m> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:i0> = <nat:3> /\ <var:R> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:m> /\ <var:R> = <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 