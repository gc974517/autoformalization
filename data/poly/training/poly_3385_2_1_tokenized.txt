\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:7> ; <var:x> := <var:K0> \end{verbatim} Assume $ <var:y> = <var:W> $ ( with some $ <var:W> $ ) ahead of the evaluation of the series of commands then we see $ <var:x> = <nat:7> $ after series of instructions has exited . \end{theorem} \begin{proof} The course of logic for our series of instructions is evident through standard Hoare techniques . Going forward , the variable update command defining $ <nat:7> $ into $ <var:K0>$ . This redefines the precondition $ \{ <var:y> = <var:W> \} $ into $ \{ <var:y> = <var:W> \land <var:K0> = <nat:7> \} $ . Honing in on the next piece of code in our set of commands , the binding line \verb | <var:x> := <var:K0> | . This line forwards $ \{ <var:y> = <var:W> \land <var:K0> = <nat:7> \} $ to the postcondition $ \{ <var:y> = <var:W> \land <var:x> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:y> = <var:W> }} <var:K0> := <nat:7> ; <var:x> := <var:K0> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 