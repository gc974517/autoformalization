\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:1> ; <var:U> := <var:h0> \end{verbatim} Allow that we have $ <var:E> = <var:u> $ prior to the evaluation of the set of instructions it holds that we have $ <var:U> = <nat:1> $ once series of instructions terminates . \end{theorem} \begin{proof} The argument for this series of commands can be given by Hoare reasoning . Immediately after , the code \verb | <var:h0> := <nat:1> ; | . This line forwards $ \{ <var:E> = <var:u> \} $ to the postcondition $ \{ <var:E> = <var:u> \land <var:h0> = <nat:1> \} $ . Shifting focus toward the upcoming statement in our segment of code , we have the binding line \verb | <var:U> := <var:h0> | . This line forwards the condition $ \{ <var:E> = <var:u> \land <var:h0> = <nat:1> \} $ to the postcondition $ \{ <var:E> = <var:u> \land <var:U> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:E> = <var:u> }} <var:h0> := <nat:1> ; <var:U> := <var:h0> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 