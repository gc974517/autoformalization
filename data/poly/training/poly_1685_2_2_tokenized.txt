\begin{document} \begin{theorem} Consider a program as \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:3> + <var:H> * <var:e> \end{verbatim} Assuming that we have $ <var:e> = <var:I> $ before the evaluation of the segment of code it follows that we see $ <var:H> = <nat:3> * <var:I> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program is accomplished using Hoare techniques . Shifting focus toward the subsequent step in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:I> \} & <var:H> := <nat:3> & \{ <var:e> = <var:I> \land <var:H> = <nat:3> \} \end{tabular} This is shown with the variable update rule given by typical Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:I> \} & <var:H> := <nat:3> & \{ <var:e> = <var:I> \land <var:H> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:e> = <var:I> }} <var:H> := <nat:3> ; <var:H> := <nat:3> + <var:H> * <var:e> {{ <var:H> = <nat:3> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:I> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:I> /\ <var:H> = <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 