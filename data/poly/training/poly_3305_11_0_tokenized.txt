\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:4> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:h3> := <nat:8> ; <var:h3> := <var:h3> * <var:f> ; <var:h3> := <var:h3> * <var:f> ; <var:h3> := <var:h3> * <var:f> ; <var:q> := <var:h3> ; <var:q> := <var:q> + <var:h2> ; <var:q> := <var:q> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assume that we have $ <var:f> = <var:P> $ ahead of executing this program , it must be that $ <var:q> = <nat:8> \times <var:P> ^ <nat:3> + <nat:7> \times <var:P> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands can be demonstrated using standard Hoare techniques . Shifting focus toward the following piece of code found in the series of commands , we have the variable update command \verb | <var:h0> := <nat:4> ; | . This moves the precondition $ \{ <var:f> = <var:P> \} $ into the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \} $ . Moving on , we have the variable binding line letting $ <nat:7> $ to $ <var:h2>$ . This code advances $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \} $ toward the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> \} $ . Next , the code defining $ <var:h2> * <var:f> $ as $ <var:h2>$ . This command moves $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> \} $ as the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> \} $ . This is shown to be logically sound by the assignment rule defined in Hoare reasoning . Moving on , we see the variable binding line giving $ <var:h2> * <var:f> $ to $ <var:h2>$ . This statement moves the condition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> \} $ into $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \} $ . Now , the line \verb | <var:h3> := <nat:8> ; | . This takes the precondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \} $ as the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> \} $ . This is ensured through the assignment scheme given in standard Hoare logic . Advancing to the proceeding statement contained in the set of instructions , the binding command \verb | <var:h3> := <var:h3> * <var:f> ; | . This takes the precondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> \} $ as the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> \} $ . This is guaranteed with the assignment inference rule defined in typical Hoare techniques . Jumping to the proceeding command contained in the series of commands , we see the assignment statement \verb | <var:h3> := <var:h3> * <var:f> ; | . This moves the precondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> \} $ as the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> ^ <nat:2> \} $ . This is deduced by the assignment inference rule in usual Hoare techniques . Shifting focus toward the following bit of code found in our set of commands , we have the assignment line \verb | <var:h3> := <var:h3> * <var:f> ; | . This code redefines $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> ^ <nat:2> \} $ into $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> ^ <nat:3> \} $ . This is sound through the assignment scheme given in usual Hoare techniques . Moving onward , the variable update line giving $ <var:h3> $ into $ <var:q>$ . This command moves the condition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:h3> = <nat:8> * <var:P> ^ <nat:3> \} $ into the postcondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:q> = <nat:8> * <var:P> ^ <nat:3> \} $ . Taking a look at the upcoming piece of code in our series of instructions , the variable update line \verb | <var:q> := <var:q> + <var:h2> ; | . This transfers the precondition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:h2> = <nat:7> * <var:P> ^ <nat:2> \land <var:q> = <nat:8> * <var:P> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> \} $ . This is given through the assignment scheme given by Hoare reasoning . Moving on to the subsequent step in the segment of code , we see the environment update statement \verb | <var:q> := <var:q> + <var:h0> | . This transfers the condition $ \{ <var:f> = <var:P> \land <var:h0> = <nat:4> \land <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:P> \land <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:4> \} $ . This is known to be sound using the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:h2> := <nat:7> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:h3> := <nat:8> ; <var:h3> := <var:h3> * <var:f> ; <var:h3> := <var:h3> * <var:f> ; <var:h3> := <var:h3> * <var:f> ; <var:q> := <var:h3> ; <var:q> := <var:q> + <var:h2> ; <var:q> := <var:q> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:f> = <var:P> }} <def:poly> {{ <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:h3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:h2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:q> = <nat:8> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:h0> = <nat:4> /\ <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:q> = <nat:8> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 