\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:7> ; <var:F> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:e> = <var:b> $ , given every positive coefficients $ <var:b> $ , prior to running this series of instructions it must be that we see $ <var:F> = <nat:7> $ after series of commands exits . \end{theorem} \begin{proof} The way to prove correctness for our code segment is accomplished by typical Hoare reasoning . Taking another step toward the next statement in our segment of code , we see the variable assignmet line \verb | <var:z0> := <nat:7> ; | . This forwards the precondition $ \{ <var:e> = <var:b> \} $ to the condition $ \{ <var:e> = <var:b> \land <var:z0> = <nat:7> \} $ . This is shown using the assignment inference rule given by standard Hoare techniques . Moving forward to the next line of code in the list of commands , we have the environment update line \verb | <var:F> := <var:z0> | . This line advances the condition $ \{ <var:e> = <var:b> \land <var:z0> = <nat:7> \} $ as the postcondition $ \{ <var:e> = <var:b> \land <var:F> = <nat:7> \} $ . This is rigorously given with the assignment scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:7> ; <var:F> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:e> = <var:b> }} <def:poly> {{ <var:F> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:b> /\ <var:F> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 