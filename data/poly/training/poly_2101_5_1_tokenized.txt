\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:A1> := <var:q> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:4> ; <var:S> := <var:A1> <var:S> := <var:S> + <var:A0> \end{verbatim} Assume that we have $ <var:q> = <var:D> $ before interpreting this program then we see $ <var:S> = <nat:4> \times <var:D> + <nat:2> $ when code segment is done executing . \end{theorem} \begin{proof} The method of proof for the segment of code is given using Hoare reasoning . Advancing to the next step , we see the variable update statement letting $ <var:q> $ to $ <var:A1>$ . This redefines $ \{ <var:q> = <var:D> \} $ toward $ \{ <var:q> = <var:D> \land <var:A1> = <var:D> \} $ . Advancing to the next step , the variable assignmet command yielding $ <nat:2> $ into $ <var:A0>$ . This statement moves the condition $ \{ <var:q> = <var:D> \land <var:A1> = <var:D> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:A1> = <var:D> \land <var:A0> = <nat:2> \} $ . Looking at the proceeding line found in our set of instructions , the variable binding code \verb | <var:A1> := <var:A1> * <nat:4> ; | . This advances the condition $ \{ <var:q> = <var:D> \land <var:A1> = <var:D> \land <var:A0> = <nat:2> \} $ to the condition $ \{ <var:q> = <var:D> \land <var:A1> = <nat:4> \times <var:D> \land <var:A0> = <nat:2> \} $ . This is rigorously given by the assignment law obtained from standard Hoare techniques . Keeping momentum , we see the binding command \verb | <var:S> := <var:A1> | . This moves $ \{ <var:q> = <var:D> \land <var:A1> = <nat:4> \times <var:D> \land <var:A0> = <nat:2> \} $ as the condition $ \{ <var:q> = <var:D> \land <var:A0> = <nat:2> \land <var:S> = <nat:4> \times <var:D> \} $ . This is rigorously given with the assignment rule defined by typical Hoare techniques . Considering the proceeding piece of code found in our list of instructions , we see the variable update code assigning $ <var:S> + <var:A0$ into $ <var:S>$ . This code redefines the precondition $ \{ <var:q> = <var:D> \land <var:A0> = <nat:2> \land <var:S> = <nat:4> \times <var:D> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:S> = <nat:4> \times <var:D> + <nat:2> \} $ . This is shown to be logically sound with the assignment scheme in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <var:A1> := <var:q> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:4> ; <var:S> := <var:A1> <var:S> := <var:S> + <var:A0> {{ <var:S> = <nat:4> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:A1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:A1> = <var:D> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:A1> = <nat:4> * <var:D> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:A0> = <nat:2> /\ <var:S> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:S> = <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 