\begin{document} \begin{theorem} Consider a set of instructions as follows \begin{verbatim} <var:I1> := <var:w> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:4> ; <var:G> := <var:I1> <var:G> := <var:G> + <var:I0> \end{verbatim} Assuming it to be that $ <var:w> = <var:B> $ ( for all integers $ <var:B> $ ) ahead of the evaluation of this code , it holds that we have $ <var:G> = <nat:4> \cdot <var:B> + <nat:3> $ after series of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our code is given with typical Hoare reasoning . Immediately following , we see the variable binding command assigning $ <var:w> $ into $ <var:I1>$ . This command redefines the precondition $ \{ <var:w> = <var:B> \} $ as $ \{ <var:w> = <var:B> \land <var:I1> = <var:B> \} $ . Advancing to the proceeding command in our code segment , we see the command binding $ <nat:3> $ as $ <var:I0>$ . This command advances the precondition $ \{ <var:w> = <var:B> \land <var:I1> = <var:B> \} $ toward $ \{ <var:w> = <var:B> \land <var:I1> = <var:B> \land <var:I0> = <nat:3> \} $ . Shifting focus toward the proceeding line of code found in the series of commands , we have the variable update line \verb | <var:I1> := <var:I1> * <nat:4> ; | . This statement advances the condition $ \{ <var:w> = <var:B> \land <var:I1> = <var:B> \land <var:I0> = <nat:3> \} $ as the condition $ \{ <var:w> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I0> = <nat:3> \} $ . This is rigorously given by the assignment inference rule defined by typical Hoare techniques . Further , we see the variable update command \verb | <var:G> := <var:I1> | . This transfers the precondition $ \{ <var:w> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I0> = <nat:3> \} $ to the condition $ \{ <var:w> = <var:B> \land <var:I0> = <nat:3> \land <var:G> = <nat:4> * <var:B> \} $ . Going forward , we see the binding line assigning $ <var:G> + <var:I0$ into $ <var:G>$ . This moves $ \{ <var:w> = <var:B> \land <var:I0> = <nat:3> \land <var:G> = <nat:4> * <var:B> \} $ as the condition $ \{ <var:w> = <var:B> \land <var:G> = <nat:4> * <var:B> + <nat:3> \} $ . This is deduced by the assignment law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:w> = <var:B> }} <var:I1> := <var:w> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:4> ; <var:G> := <var:I1> <var:G> := <var:G> + <var:I0> {{ <var:G> = <nat:4> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:I1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:I1> = <var:B> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:I0> = <nat:3> /\ <var:G> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:B> /\ <var:G> = <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 