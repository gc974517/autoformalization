\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:o> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:o> ; <var:V2> := <var:V2> * <var:o> ; <var:t> := <var:V2> ; <var:t> := <var:t> + <var:V1> ; <var:t> := <var:t> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Assuming --- taking positive coefficients $ <var:F> $ --- it to hold that $ <var:o> = <var:F> $ ahead of the execution of the list of commands it holds that $ <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:4> $ when program finishes . \end{theorem} \begin{proof} Proving correctness for the set of instructions is shown with typical Hoare reasoning . After , we have the variable assignmet code \verb | <var:V0> := <nat:4> ; | . This line moves the condition $ \{ <var:o> = <var:F> \} $ as the postcondition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \} $ . This is deduced using the assignment rule defined by typical Hoare logic . Advancing , we have the assignment line \verb | <var:V1> := <nat:1> ; | . This advances the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \} $ as the postcondition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \} $ . Jumping to the following step seen in the segment of code , we see the variable binding command \verb | <var:V1> := <var:V1> * <var:o> ; | . This forwards $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \} $ to the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \} $ . This is guaranteed through the assignment law defined in Hoare reasoning . Focusing on the next statement seen in the list of instructions , we have the assignment command yielding $ <nat:9> $ to $ <var:V2>$ . This advances $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \} $ toward $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \} $ . Immediately after , we see the variable assignmet line defining $ <var:V2> * <var:o> $ into $ <var:V2>$ . This transfers the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \} $ into the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \cdot <var:F> \} $ . Going forward , we see the code \verb | <var:V2> := <var:V2> * <var:o> ; | . This moves the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \cdot <var:F> \} $ into the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \cdot <var:F> ^ <nat:2> \} $ . Jumping to the next piece of code seen in the set of instructions , the environment update line \verb | <var:t> := <var:V2> ; | . This line advances the precondition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:V2> = <nat:9> \cdot <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> \} $ . Moving onward , we see the variable binding line \verb | <var:t> := <var:t> + <var:V1> ; | . This moves the precondition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> \cdot <var:F> \land <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> \} $ . This is guaranteed with the assignment rule given by standard Hoare reasoning . Going forward , we have the binding code \verb | <var:t> := <var:t> + <var:V0> | . This command moves $ \{ <var:o> = <var:F> \land <var:V0> = <nat:4> \land <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> \} $ toward the postcondition $ \{ <var:o> = <var:F> \land <var:t> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:4> \} $ . This is shown to be logically sound through the assignment rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:o> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:o> ; <var:V2> := <var:V2> * <var:o> ; <var:t> := <var:V2> ; <var:t> := <var:t> + <var:V1> ; <var:t> := <var:t> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:o> = <var:F> }} <def:poly> {{ <var:t> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:F> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:F> /\ <var:V2> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:F> /\ <var:V2> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:F> /\ <var:t> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:V0> = <nat:4> /\ <var:t> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:t> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 