\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:1> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> \end{verbatim} Allowing given positive integer coefficients $ <var:w> $ that $ <var:Q> = <var:w> $ prior to interpreting our list of instructions then we see $ <var:a> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our code segment is evident through Hoare logic . Moving on to the next lines of codefound in our program , \begin{eqnarray} \{ <var:Q> = <var:w> \} \, <var:a> := <nat:1> \, \{ <var:Q> = <var:w> \land <var:a> = <nat:1> \} \\ \{ <var:Q> = <var:w> \land <var:a> = <nat:1> \} \, <var:a> := <nat:2> + <var:a> * <var:Q> \, \{ <var:Q> = <var:w> \land <var:a> = <nat:1> * <var:w> + <nat:2> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:Q> = <var:w> \} \, <var:a> := <nat:1> \, \{ <var:Q> = <var:w> \land <var:a> = <nat:1> \} \\ \{ <var:Q> = <var:w> \land <var:a> = <nat:1> \} \, <var:a> := <nat:2> + <var:a> * <var:Q> \, \{ <var:Q> = <var:w> \land <var:a> = <nat:1> * <var:w> + <nat:2> \} \end{eqnarray} This is ensured through the variable update rule defined in typical Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:Q> = <var:w> \} \, <var:a> := <nat:1> \, \{ <var:Q> = <var:w> \land <var:a> = <nat:1> \} \end{eqnarray} This is rigorously given by the variable update rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <var:a> := <nat:1> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:1> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> {{ <var:a> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a> = <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a> = <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a> = <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 