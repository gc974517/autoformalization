\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:Q> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:S> = <var:Y> $ --- given any $ <var:Y> \in \mathbb{N} $ --- prior to the evaluation of this list of commands it must be that we see $ <var:Q> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the series of instructions is accomplished with standard Hoare reasoning . Jumping to the next bit of code in our list of commands , we have \begin{eqnarray} \{ <var:S> = <var:Y> \} \, <var:j0> := <nat:4> \, \{ <var:S> = <var:Y> \land <var:j0> = <nat:4> \} \end{eqnarray} This is known to be sound with the assignment law found in usual Hoare techniques . Taking another step toward the proceeding statement in our series of instructions , we have \begin{eqnarray} \{ <var:S> = <var:Y> \} \, <var:j0> := <nat:4> \, \{ <var:S> = <var:Y> \land <var:j0> = <nat:4> \} \end{eqnarray} This is deduced with the variable binding law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:Q> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:S> = <var:Y> }} <def:poly> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Y> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Y> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 