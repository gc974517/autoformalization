\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:A> ; <var:i> := <var:o1> ; <var:i> := <var:i> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:A> = <var:c> $ prior to running our program , it follows that we have $ <var:i> = <nat:3> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:A> = <var:c> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:A> = <var:c> \land <var:o0> = <nat:1> \} \\ <var:o1> := <nat:3> ; \\ \{ <var:A> = <var:c> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> \cdot <var:c> \} \\ <var:i> := <var:o1> ; \\ \{ <var:A> = <var:c> \land <var:o0> = <nat:1> \land <var:i> = <nat:3> \cdot <var:c> \} \\ <var:i> := <var:i> + <var:o0> \\ \{ <var:A> = <var:c> \land <var:i> = <nat:3> \cdot <var:c> + <nat:1> \} \end{eqnarray} Thusly , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:1> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:A> ; <var:i> := <var:o1> ; <var:i> := <var:i> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:A> = <var:c> }} <def:poly> {{ <var:i> = <nat:3> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:o0> = <nat:1> /\ <var:i> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:i> = <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 