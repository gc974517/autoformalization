\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:G1> := <var:T> ; <var:G2> := <var:G1> * <var:T> ; <var:G3> := <var:G2> * <var:T> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:9> ; <var:G3> := <var:G3> * <nat:1> ; <var:x> := <var:G3> <var:x> := <var:x> + <var:G2> <var:x> := <var:x> + <var:G1> <var:x> := <var:x> + <var:G0> \end{verbatim} Given it to be that $ <var:T> = <var:s> $ prior to evaluating the list of instructions , it holds that we see $ <var:x> = <nat:1> \times <var:s> ^ <nat:3> + <nat:9> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is demonstrated using typical Hoare reasoning . Moving on to the next steps contained in our program , we have \verb | { <var:T> = <var:s> } <var:G1> := <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> } <var:G2> := <var:G1> * <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> } <var:G3> := <var:G2> * <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> } <var:G0> := <nat:9> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } <var:G1> := <var:G1> * <nat:4> { <var:T> = <var:s> \land <var:G1> = <nat:4> \times <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <nat:4> \times <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } <var:G2> := <var:G2> * <nat:9> { <var:T> = <var:s> \land <var:G1> = <nat:4> \times <var:s> \land <var:G2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } | and \verb | { <var:T> = <var:s> \land <var:G1> = <nat:4> \times <var:s> \land <var:G2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } <var:G3> := <var:G3> * <nat:1> { <var:T> = <var:s> \land <var:G1> = <nat:4> \times <var:s> \land <var:G2> = <nat:9> \times <var:s> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } | . This is guaranteed through the assignment rule given in standard Hoare logic . Moving forward , \verb | { <var:T> = <var:s> } <var:G1> := <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> } <var:G2> := <var:G1> * <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> } | , \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> } <var:G3> := <var:G2> * <var:T> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> } | and \verb | { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> } <var:G0> := <nat:9> { <var:T> = <var:s> \land <var:G1> = <var:s> \land <var:G2> = <var:s> ^ <nat:2> \land <var:G3> = <var:s> ^ <nat:3> \land <var:G0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:T> = <var:s> }} <var:G1> := <var:T> ; <var:G2> := <var:G1> * <var:T> ; <var:G3> := <var:G2> * <var:T> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:9> ; <var:G3> := <var:G3> * <nat:1> ; <var:x> := <var:G3> <var:x> := <var:x> + <var:G2> <var:x> := <var:x> + <var:G1> <var:x> := <var:x> + <var:G0> {{ <var:x> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <var:s> /\ <var:G2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <var:s> /\ <var:G2> = <var:s> ^ <nat:2> /\ <var:G3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <var:s> /\ <var:G2> = <var:s> ^ <nat:2> /\ <var:G3> = <var:s> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <nat:4> * <var:s> /\ <var:G2> = <var:s> ^ <nat:2> /\ <var:G3> = <var:s> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <nat:4> * <var:s> /\ <var:G2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:G3> = <var:s> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <nat:4> * <var:s> /\ <var:G2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <nat:4> * <var:s> /\ <var:G2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:G0> = <nat:9> /\ <var:x> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G1> = <nat:4> * <var:s> /\ <var:G0> = <nat:9> /\ <var:x> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:G0> = <nat:9> /\ <var:x> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:x> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 