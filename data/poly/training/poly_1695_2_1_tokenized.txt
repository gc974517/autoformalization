\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:8> ; <var:r> := <var:Z0> \end{verbatim} Allow $ <var:E> = <var:Y> $ ahead of the evaluation of our series of commands , then $ <var:r> = <nat:8> $ after code finishes . \end{theorem} \begin{proof} We can see that this decorated list of commands . \begin{eqnarray} \{ <var:E> = <var:Y> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:E> = <var:Y> \land <var:Z0> = <nat:8> \} \\ <var:r> := <var:Z0> \\ \{ <var:E> = <var:Y> \land <var:r> = <nat:8> \} \end{eqnarray} Utilizing Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:E> = <var:Y> }} <var:Z0> := <nat:8> ; <var:r> := <var:Z0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Y> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 