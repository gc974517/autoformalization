\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:s> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:7> ; <var:v> := <var:g1> <var:v> := <var:v> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:s> = <var:O> $ for integers $ <var:O> $ prior to the execution of our series of commands then we see $ <var:v> = <nat:7> \times <var:O> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this program is shown using usual Hoare reasoning . Going forward , we have the environment update command assigning $ <var:s> $ to $ <var:g1>$ . This code takes the condition $ \{ <var:s> = <var:O> \} $ as the postcondition $ \{ <var:s> = <var:O> \land <var:g1> = <var:O> \} $ . Going to the next step , we have the variable assignmet code letting $ <nat:2> $ into $ <var:g0>$ . This moves the precondition $ \{ <var:s> = <var:O> \land <var:g1> = <var:O> \} $ into $ \{ <var:s> = <var:O> \land <var:g1> = <var:O> \land <var:g0> = <nat:2> \} $ . This is shown using the assignment scheme given by standard Hoare techniques . Moving forward , we have the environment update command giving $ <var:g1> * <nat:7> $ as $ <var:g1>$ . This moves the precondition $ \{ <var:s> = <var:O> \land <var:g1> = <var:O> \land <var:g0> = <nat:2> \} $ into $ \{ <var:s> = <var:O> \land <var:g1> = <nat:7> \times <var:O> \land <var:g0> = <nat:2> \} $ . This is sound using the assignment law obtained from Hoare reasoning . Moving on , the assignment statement \verb | <var:v> := <var:g1> | . This transfers $ \{ <var:s> = <var:O> \land <var:g1> = <nat:7> \times <var:O> \land <var:g0> = <nat:2> \} $ to $ \{ <var:s> = <var:O> \land <var:g0> = <nat:2> \land <var:v> = <nat:7> \times <var:O> \} $ . This is given using the assignment scheme given by typical Hoare logic . Advancing on , we have the variable update command yielding $ <var:v> + <var:g0$ into $ <var:v>$ . This line transfers the condition $ \{ <var:s> = <var:O> \land <var:g0> = <nat:2> \land <var:v> = <nat:7> \times <var:O> \} $ toward the postcondition $ \{ <var:s> = <var:O> \land <var:v> = <nat:7> \times <var:O> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:s> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:7> ; <var:v> := <var:g1> <var:v> := <var:v> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:s> = <var:O> }} <def:poly> {{ <var:v> = <nat:7> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:g1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:g1> = <var:O> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:g1> = <nat:7> * <var:O> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:g0> = <nat:2> /\ <var:v> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:v> = <nat:7> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 