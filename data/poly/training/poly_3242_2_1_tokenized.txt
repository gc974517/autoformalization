\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:D0> := <nat:3> ; <var:F> := <var:D0> \end{verbatim} Assume it to hold that $ <var:P> = <var:A> $ before the evaluation of the program , it follows that we have $ <var:F> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is clear with typical Hoare reasoning . Keeping momentum , we have the environment update command \verb | <var:D0> := <nat:3> ; | . This command transfers the condition $ \{ <var:P> = <var:A> \} $ as the condition $ \{ <var:P> = <var:A> \land <var:D0> = <nat:3> \} $ . After , we see the variable binding line defining $ <var:D0$ toward $ <var:F>$ . This command takes the precondition $ \{ <var:P> = <var:A> \land <var:D0> = <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:A> \land <var:F> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:P> = <var:A> }} <var:D0> := <nat:3> ; <var:F> := <var:D0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 