\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:8> ; <var:U> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Allow it to be that $ <var:L> = <var:E> $ prior to interpreting our list of instructions , it follows that we have $ <var:U> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:E> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:L> = <var:E> \land <var:o0> = <nat:8> \} \\ <var:U> := <var:o0> \\ \{ <var:L> = <var:E> \land <var:U> = <nat:8> \} \end{eqnarray} Using Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:8> ; <var:U> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <def:poly> {{ <var:U> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:U> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 