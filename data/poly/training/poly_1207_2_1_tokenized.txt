\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:8> ; <var:x> := <var:M0> \end{verbatim} Assume that $ <var:e> = <var:C> $ before executing the set of instructions , it follows that we see $ <var:x> = <nat:8> $ when set of instructions is done . \end{theorem} \begin{proof} See that this decorated set of instructions . \begin{eqnarray} \{ <var:e> = <var:C> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:e> = <var:C> \land <var:M0> = <nat:8> \} \\ <var:x> := <var:M0> \\ \{ <var:e> = <var:C> \land <var:x> = <nat:8> \} \end{eqnarray} Applying typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:e> = <var:C> }} <var:M0> := <nat:8> ; <var:x> := <var:M0> {{ <var:x> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:C> /\ <var:x> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 