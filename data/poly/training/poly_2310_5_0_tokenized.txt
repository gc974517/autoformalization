\begin{document} \begin{theorem} Consider a segment of code : \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:S> ; <var:T> := <var:i1> ; <var:T> := <var:T> + <var:i0> \end{verbatim} Assuming that $ <var:S> = <var:y> $ prior to the execution of the series of instructions , it follows that $ <var:T> = <nat:4> * <var:y> + <nat:2> $ once set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:y> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:S> = <var:y> \land <var:i0> = <nat:2> \} \\ <var:i1> := <nat:4> ; \\ \{ <var:S> = <var:y> \land <var:i0> = <nat:2> \land <var:i1> = <nat:4> \} \\ <var:i1> := <var:i1> * <var:S> ; \\ \{ <var:S> = <var:y> \land <var:i0> = <nat:2> \land <var:i1> = <nat:4> \cdot <var:y> \} \\ <var:T> := <var:i1> ; \\ \{ <var:S> = <var:y> \land <var:i0> = <nat:2> \land <var:T> = <nat:4> \cdot <var:y> \} \\ <var:T> := <var:T> + <var:i0> \\ \{ <var:S> = <var:y> \land <var:T> = <nat:4> \cdot <var:y> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:S> = <var:y> }} <var:i0> := <nat:2> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:S> ; <var:T> := <var:i1> ; <var:T> := <var:T> + <var:i0> {{ <var:T> = <nat:4> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:i0> = <nat:2> /\ <var:T> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:y> /\ <var:T> = <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 