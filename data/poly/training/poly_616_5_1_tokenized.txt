\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:X1> := <var:a> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:6> ; <var:v> := <var:X1> <var:v> := <var:v> + <var:X0> \end{verbatim} Given --- given every $ <var:J> $ --- it to be that $ <var:a> = <var:J> $ before the evaluation of our series of instructions it follows that we have $ <var:v> = <nat:6> \times <var:J> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:J> \} \\ <var:X1> := <var:a> ; \\ \{ <var:a> = <var:J> \land <var:X1> = <var:J> \} \\ <var:X0> := <nat:6> ; \\ \{ <var:a> = <var:J> \land <var:X1> = <var:J> \land <var:X0> = <nat:6> \} \\ <var:X1> := <var:X1> * <nat:6> ; \\ \{ <var:a> = <var:J> \land <var:X1> = <nat:6> \times <var:J> \land <var:X0> = <nat:6> \} \\ <var:v> := <var:X1> \\ \{ <var:a> = <var:J> \land <var:X0> = <nat:6> \land <var:v> = <nat:6> \times <var:J> \} \\ <var:v> := <var:v> + <var:X0> \\ \{ <var:a> = <var:J> \land <var:v> = <nat:6> \times <var:J> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <var:X1> := <var:a> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:6> ; <var:v> := <var:X1> <var:v> := <var:v> + <var:X0> {{ <var:v> = <nat:6> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:X1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:X1> = <var:J> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:X1> = <nat:6> * <var:J> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:X0> = <nat:6> /\ <var:v> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:v> = <nat:6> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 