\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:k> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:k> ; <var:A2> := <var:A2> * <var:k> ; <var:z> := <var:A2> ; <var:z> := <var:z> + <var:A1> ; <var:z> := <var:z> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:k> = <var:T> $ before interpreting the set of commands , it must be that we have $ <var:z> = <nat:7> \cdot <var:T> ^ <nat:2> + <nat:3> \cdot <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be demonstrated by Hoare logic . Going forward , we have the variable assignmet line letting $ <nat:2> $ into $ <var:A0>$ . This advances $ \{ <var:k> = <var:T> \} $ into $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \} $ . Advancing , we see the variable update code binding $ <nat:3> $ into $ <var:A1>$ . This statement moves $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \} $ into $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> \} $ . Stepping forward , we see the variable binding line giving $ <var:A1> * <var:k> $ as $ <var:A1>$ . This command transfers $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \} $ . This is ensured through the assignment scheme found in standard Hoare techniques . Considering the next line of code found in our segment of code , we have the binding line binding $ <nat:7> $ as $ <var:A2>$ . This command advances $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \} $ into the condition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> \} $ . Next , we see the variable assignmet statement \verb | <var:A2> := <var:A2> * <var:k> ; | . This redefines $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> \} $ toward the postcondition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> * <var:T> \} $ . Moving on , we see the assignment statement \verb | <var:A2> := <var:A2> * <var:k> ; | . This redefines the condition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> * <var:T> \} $ toward the condition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> * <var:T> ^ <nat:2> \} $ . This is sound through the assignment inference rule defined by standard Hoare reasoning . Focusing on the subsequent line seen in the series of commands , we see the assignment statement \verb | <var:z> := <var:A2> ; | . This code forwards $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:A2> = <nat:7> * <var:T> ^ <nat:2> \} $ as $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:z> = <nat:7> * <var:T> ^ <nat:2> \} $ . After , we have the variable assignmet code \verb | <var:z> := <var:z> + <var:A1> ; | . This moves the precondition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:A1> = <nat:3> * <var:T> \land <var:z> = <nat:7> * <var:T> ^ <nat:2> \} $ as the condition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> \} $ . This is ensured by the assignment inference rule given in usual Hoare logic . Moving forward , we see the variable assignmet command binding $ <var:z> + <var:A0$ to $ <var:z>$ . This transfers the condition $ \{ <var:k> = <var:T> \land <var:A0> = <nat:2> \land <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> \} $ toward the postcondition $ \{ <var:k> = <var:T> \land <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> \} $ . This is deduced with the assignment inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:2> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:k> ; <var:A2> := <nat:7> ; <var:A2> := <var:A2> * <var:k> ; <var:A2> := <var:A2> * <var:k> ; <var:z> := <var:A2> ; <var:z> := <var:z> + <var:A1> ; <var:z> := <var:z> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:k> = <var:T> }} <def:poly> {{ <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> * <var:T> /\ <var:A2> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:3> * <var:T> /\ <var:z> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:A0> = <nat:2> /\ <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:z> = <nat:7> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 