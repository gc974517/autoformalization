\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:v> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:1> ; <var:z> := <var:B1> <var:z> := <var:z> + <var:B0> \end{verbatim} Allow $ <var:v> = <var:o> $ prior to running our set of instructions it must be that we see $ <var:z> = <nat:1> \times <var:o> + <nat:4> $ . \end{theorem} \begin{proof} See that the below decorated program . \begin{eqnarray} \{ <var:v> = <var:o> \} \\ <var:B1> := <var:v> ; \\ \{ <var:v> = <var:o> \land <var:B1> = <var:o> \} \\ <var:B0> := <nat:4> ; \\ \{ <var:v> = <var:o> \land <var:B1> = <var:o> \land <var:B0> = <nat:4> \} \\ <var:B1> := <var:B1> * <nat:1> ; \\ \{ <var:v> = <var:o> \land <var:B1> = <nat:1> \times <var:o> \land <var:B0> = <nat:4> \} \\ <var:z> := <var:B1> \\ \{ <var:v> = <var:o> \land <var:B0> = <nat:4> \land <var:z> = <nat:1> \times <var:o> \} \\ <var:z> := <var:z> + <var:B0> \\ \{ <var:v> = <var:o> \land <var:z> = <nat:1> \times <var:o> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:v> = <var:o> }} <var:B1> := <var:v> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:1> ; <var:z> := <var:B1> <var:z> := <var:z> + <var:B0> {{ <var:z> = <nat:1> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:B1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:B1> = <var:o> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:B1> = <nat:1> * <var:o> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:B0> = <nat:4> /\ <var:z> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:o> /\ <var:z> = <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 