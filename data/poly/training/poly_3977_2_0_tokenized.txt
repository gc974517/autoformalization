\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:9> ; <var:W> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given every positive integers $ <var:b> $ , $ <var:z> = <var:b> $ ahead of running the list of instructions then we have $ <var:W> = <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this program can be demonstrated using Hoare logic . Moving forward to the next step found in the segment of code , we have the environment update code \verb | <var:m0> := <nat:9> ; | . This moves $ \{ <var:z> = <var:b> \} $ to the condition $ \{ <var:z> = <var:b> \land <var:m0> = <nat:9> \} $ . This is guaranteed with the assignment scheme in usual Hoare logic . Further , the environment update command letting $ <var:m0$ toward $ <var:W>$ . This line takes the condition $ \{ <var:z> = <var:b> \land <var:m0> = <nat:9> \} $ toward the condition $ \{ <var:z> = <var:b> \land <var:W> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:9> ; <var:W> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:z> = <var:b> }} <def:poly> {{ <var:W> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:W> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 