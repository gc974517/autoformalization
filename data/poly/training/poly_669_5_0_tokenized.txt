\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:H> ; <var:a> := <var:S1> ; <var:a> := <var:a> + <var:S0> \end{verbatim} Assuming , given some positive coefficients $ <var:b> $ , it to be that $ <var:H> = <var:b> $ prior to running this program , it must be that $ <var:a> = <nat:8> \times <var:b> + <nat:8> $ once list of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for this program is evident through usual Hoare techniques . Looking at the next pieces of code contained in the set of commands , \begin{verbatim} { <var:H> = <var:b> } <var:S0> := <nat:8> { <var:H> = <var:b> \land <var:S0> = <nat:8> } { <var:H> = <var:b> \land <var:S0> = <nat:8> } <var:S1> := <nat:8> { <var:H> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> } \end{verbatim} This is shown to be logically sound with the binding rule found in Hoare reasoning . Taking another step toward the proceeding lines of codein our segment of code , we have \begin{verbatim} { <var:H> = <var:b> } <var:S0> := <nat:8> { <var:H> = <var:b> \land <var:S0> = <nat:8> } { <var:H> = <var:b> \land <var:S0> = <nat:8> } <var:S1> := <nat:8> { <var:H> = <var:b> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> } \end{verbatim} Jumping to the proceeding step found in the list of commands , \begin{verbatim} { <var:H> = <var:b> } <var:S0> := <nat:8> { <var:H> = <var:b> \land <var:S0> = <nat:8> } \end{verbatim} This is ensured with the variable assignmet rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:H> = <var:b> }} <var:S0> := <nat:8> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:H> ; <var:a> := <var:S1> ; <var:a> := <var:a> + <var:S0> {{ <var:a> = <nat:8> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:S0> = <nat:8> /\ <var:a> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:a> = <nat:8> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 