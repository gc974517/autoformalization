\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:2> ; <var:e> := <var:Z0> \end{verbatim} Assuming that we have $ <var:A> = <var:I> $ ( assuming some natural numbers $ <var:I> $ ) ahead of evaluating this program , then we see $ <var:e> = <nat:2> $ once segment of code has terminated . \end{theorem} \begin{proof} Proving correctness for the code segment can be given by standard Hoare logic . After , we see the statement \verb | <var:Z0> := <nat:2> ; | . This forwards the condition $ \{ <var:A> = <var:I> \} $ as $ \{ <var:A> = <var:I> \land <var:Z0> = <nat:2> \} $ . Keeping momentum , the binding statement \verb | <var:e> := <var:Z0> | . This command moves the precondition $ \{ <var:A> = <var:I> \land <var:Z0> = <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:I> \land <var:e> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:A> = <var:I> }} <var:Z0> := <nat:2> ; <var:e> := <var:Z0> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:I> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 