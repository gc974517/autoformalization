\begin{document} \begin{theorem} Consider a program as follows \begin{verbatim} <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G0> := <nat:3> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:4> ; <var:V> := <var:G3> <var:V> := <var:V> + <var:G2> <var:V> := <var:V> + <var:G0> \end{verbatim} Given ( taking positive integer coefficients $ <var:k> $ ) it to be that $ <var:e> = <var:k> $ ahead of interpreting the set of commands , then $ <var:V> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:e> = <var:k> \} \\ <var:G1> := <var:e> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \} \\ <var:G2> := <var:G1> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <var:k> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <var:k> ^ <nat:2> \land <var:G3> = <var:k> ^ <nat:3> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <var:k> ^ <nat:2> \land <var:G3> = <var:k> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:G2> := <var:G2> * <nat:2> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <nat:2> \cdot <var:k> ^ <nat:2> \land <var:G3> = <var:k> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:G3> := <var:G3> * <nat:4> ; \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <nat:2> \cdot <var:k> ^ <nat:2> \land <var:G3> = <nat:4> \cdot <var:k> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:V> := <var:G3> \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G2> = <nat:2> \cdot <var:k> ^ <nat:2> \land <var:G0> = <nat:3> \land <var:V> = <nat:4> \cdot <var:k> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:G2> \\ \{ <var:e> = <var:k> \land <var:G1> = <var:k> \land <var:G0> = <nat:3> \land <var:V> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:G0> \\ \{ <var:e> = <var:k> \land <var:V> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:3> \} \end{eqnarray} Given the above , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:e> = <var:k> }} <var:G1> := <var:e> ; <var:G2> := <var:G1> * <var:e> ; <var:G3> := <var:G2> * <var:e> ; <var:G0> := <nat:3> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:4> ; <var:V> := <var:G3> <var:V> := <var:V> + <var:G2> <var:V> := <var:V> + <var:G0> {{ <var:V> = <nat:4> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <var:k> ^ <nat:2> /\ <var:G3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <var:k> ^ <nat:2> /\ <var:G3> = <var:k> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:G3> = <var:k> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:k> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:G0> = <nat:3> /\ <var:V> = <nat:4> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:G1> = <var:k> /\ <var:G0> = <nat:3> /\ <var:V> = <nat:4> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:V> = <nat:4> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 