\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:1> ; <var:P> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Assume it to be that $ <var:E> = <var:w> $ , for some integers $ <var:w> $ , prior to the execution of the list of instructions , it follows that we have $ <var:P> = <nat:1> $ when series of commands is done . \end{theorem} \begin{proof} The course of logic for this series of instructions is evident by the below decorated program . \begin{eqnarray} \{ <var:E> = <var:w> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:E> = <var:w> \land <var:n0> = <nat:1> \} \\ <var:P> := <var:n0> \\ \{ <var:E> = <var:w> \land <var:P> = <nat:1> \} \end{eqnarray} The application of Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:P> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:E> = <var:w> }} <def:poly> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 