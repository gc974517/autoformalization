\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:5> ; <var:h> := <var:Y0> \end{verbatim} Assume that $ <var:w> = <var:J> $ ( assuming some $ <var:J> \in \mathbb{N} $ ) prior to running the program , it must be that we see $ <var:h> = <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:w> = <var:J> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:w> = <var:J> \land <var:Y0> = <nat:5> \} \\ <var:h> := <var:Y0> \\ \{ <var:w> = <var:J> \land <var:h> = <nat:5> \} \end{eqnarray} As a consequence , our list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:w> = <var:J> }} <var:Y0> := <nat:5> ; <var:h> := <var:Y0> {{ <var:h> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:J> /\ <var:h> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 