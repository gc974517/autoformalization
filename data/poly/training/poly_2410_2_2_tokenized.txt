\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:2> + <var:U> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Allowing it to be that $ <var:Q> = <var:L> $ before the evaluation of our code , it must be that we see $ <var:U> = <nat:3> * <var:L> + <nat:2> $ once code segment is done executing . \end{theorem} \begin{proof} Proving correctness for the list of instructions is accomplished through standard Hoare logic . Advancing on , we have the code \verb | <var:U> := <nat:3> ; | . This forwards $ \{ <var:Q> = <var:L> \} $ to the postcondition $ \{ <var:Q> = <var:L> \land <var:U> = <nat:3> \} $ . Now , the command binding $ <nat:2> + <var:U> * <var:Q$ to $ <var:U>$ . This code advances $ \{ <var:Q> = <var:L> \land <var:U> = <nat:3> \} $ as the condition $ \{ <var:Q> = <var:L> \land <var:U> = <nat:3> \cdot <var:L> + <nat:2> \} $ . This is ensured using the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:2> + <var:U> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <def:poly> {{ <var:U> = <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:U> = <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 