\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:7> ; <var:e> := <var:W0> \end{verbatim} Allow , given any whole numbers $ <var:b> $ , it to hold that $ <var:a> = <var:b> $ ahead of interpreting the series of instructions , it must be that we see $ <var:e> = <nat:7> $ after code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:b> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:a> = <var:b> \land <var:W0> = <nat:7> \} \end{eqnarray} Advancing running the series of commands produces : \begin{eqnarray} <var:e> := <var:W0> \\ \{ <var:a> = <var:b> \land <var:e> = <nat:7> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:a> = <var:b> }} <var:W0> := <nat:7> ; <var:e> := <var:W0> {{ <var:e> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 