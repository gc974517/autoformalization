\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:4> ; <var:Q> := <nat:4> + <var:Q> * <var:L> ; <var:Q> := <nat:2> + <var:Q> * <var:L> ; <var:Q> := <var:Q> * <var:L> ; <var:Q> := <nat:3> + <var:Q> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Assume that $ <var:L> = <var:w> $ ahead of the execution of this set of commands then $ <var:Q> = <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:w> \} \\ <var:Q> := <nat:4> ; \\ \{ <var:L> = <var:w> \land <var:Q> = <nat:4> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:L> ; \\ \{ <var:L> = <var:w> \land <var:Q> = <nat:4> \times <var:w> + <nat:4> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:L> ; \\ \{ <var:L> = <var:w> \land <var:Q> = <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:2> \} \\ <var:Q> := <var:Q> * <var:L> ; \\ \{ <var:L> = <var:w> \land <var:Q> = <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + \} \\ <var:Q> := <nat:3> + <var:Q> * <var:L> \\ \{ <var:L> = <var:w> \land <var:Q> = <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:4> ; <var:Q> := <nat:4> + <var:Q> * <var:L> ; <var:Q> := <nat:2> + <var:Q> * <var:L> ; <var:Q> := <var:Q> * <var:L> ; <var:Q> := <nat:3> + <var:Q> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:L> = <var:w> }} <def:poly> {{ <var:Q> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Q> = <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Q> = <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Q> = <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:Q> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 