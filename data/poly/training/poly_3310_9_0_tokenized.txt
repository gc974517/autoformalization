\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:z> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:z> ; <var:O2> := <var:O2> * <var:z> ; <var:s> := <var:O2> ; <var:s> := <var:s> + <var:O1> ; <var:s> := <var:s> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Allow , with some $ <var:N> $ , that we have $ <var:z> = <var:N> $ ahead of the execution of the program , then we have $ <var:s> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:z> = <var:N> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \} \\ <var:O1> := <nat:9> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \} \\ <var:O1> := <var:O1> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \times <var:N> \} \\ <var:O2> := <nat:1> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \times <var:N> \land <var:O2> = <nat:1> \} \\ <var:O2> := <var:O2> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \times <var:N> \land <var:O2> = <nat:1> \times <var:N> \} \\ <var:O2> := <var:O2> * <var:z> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \times <var:N> \land <var:O2> = <nat:1> \times <var:N> ^ <nat:2> \} \end{eqnarray} Furthering executing the series of instructions gives : \begin{eqnarray} <var:s> := <var:O2> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:O1> = <nat:9> \times <var:N> \land <var:s> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:O1> ; \\ \{ <var:z> = <var:N> \land <var:O0> = <nat:6> \land <var:s> = <nat:1> \times <var:N> ^ <nat:2> + <nat:9> \times <var:N> \} \\ <var:s> := <var:s> + <var:O0> \\ \{ <var:z> = <var:N> \land <var:s> = <nat:1> \times <var:N> ^ <nat:2> + <nat:9> \times <var:N> + <nat:6> \} \end{eqnarray} As a result , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:6> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:z> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:z> ; <var:O2> := <var:O2> * <var:z> ; <var:s> := <var:O2> ; <var:s> := <var:s> + <var:O1> ; <var:s> := <var:s> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:z> = <var:N> }} <def:poly> {{ <var:s> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> * <var:N> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> * <var:N> /\ <var:O2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> * <var:N> /\ <var:O2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:9> * <var:N> /\ <var:s> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:O0> = <nat:6> /\ <var:s> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:s> = <nat:1> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 