\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:5> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:E> ; <var:I> := <var:j1> ; <var:I> := <var:I> + <var:j0> \end{verbatim} Given $ <var:E> = <var:p> $ before running the code , then we have $ <var:I> = <nat:7> * <var:p> + <nat:5> $ once series of instructions finishes . \end{theorem} \begin{proof} The proof of the code segment is evident with typical Hoare logic . Moving on to the subsequent piece of code seen in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:p> \} & <var:j0> := <nat:5> & \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \} \end{tabular} This is shown to be logically sound by the assignment law given in usual Hoare logic . Taking another step toward the following statement found in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:p> \} & <var:j0> := <nat:5> & \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \} \end{tabular} This is ensured with the variable binding scheme given in standard Hoare techniques . Jumping to the next lines contained in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:E> = <var:p> \} & <var:j0> := <nat:5> & \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \} \\ \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \} & <var:j1> := <nat:7> & \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \land <var:j1> = <nat:7> \} \end{tabular} Focusing on the following line of code in the code , \[ \begin{tabular} {rcl} \{ <var:E> = <var:p> \} & <var:j0> := <nat:5> & \{ <var:E> = <var:p> \land <var:j0> = <nat:5> \} \end{tabular} This is shown to be logically sound using the rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:E> = <var:p> }} <var:j0> := <nat:5> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:E> ; <var:I> := <var:j1> ; <var:I> := <var:I> + <var:j0> {{ <var:I> = <nat:7> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:j0> = <nat:5> /\ <var:I> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:p> /\ <var:I> = <nat:7> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 