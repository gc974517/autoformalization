\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:Z> ; <var:s> := <var:o1> ; <var:s> := <var:s> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Z> = <var:b> $ before the execution of our program , then we have $ <var:s> = <nat:8> \times <var:b> + <nat:3> $ once set of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:b> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:Z> = <var:b> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:8> ; \\ \{ <var:Z> = <var:b> \land <var:o0> = <nat:3> \land <var:o1> = <nat:8> \} \\ <var:o1> := <var:o1> * <var:Z> ; \\ \{ <var:Z> = <var:b> \land <var:o0> = <nat:3> \land <var:o1> = <nat:8> \times <var:b> \} \\ <var:s> := <var:o1> ; \\ \{ <var:Z> = <var:b> \land <var:o0> = <nat:3> \land <var:s> = <nat:8> \times <var:b> \} \\ <var:s> := <var:s> + <var:o0> \\ \{ <var:Z> = <var:b> \land <var:s> = <nat:8> \times <var:b> + <nat:3> \} \end{eqnarray} Using standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:Z> ; <var:s> := <var:o1> ; <var:s> := <var:s> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Z> = <var:b> }} <def:poly> {{ <var:s> = <nat:8> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:o0> = <nat:3> /\ <var:s> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:b> /\ <var:s> = <nat:8> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 