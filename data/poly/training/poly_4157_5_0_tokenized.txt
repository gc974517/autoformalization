\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:8> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:v> ; <var:i> := <var:M1> ; <var:i> := <var:i> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:v> = <var:K> $ ahead of executing the set of commands , it holds that $ <var:i> = <nat:2> * <var:K> + <nat:8> $ when series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:K> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:v> = <var:K> \land <var:M0> = <nat:8> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:v> = <var:K> \land <var:M0> = <nat:8> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:v> ; \\ \{ <var:v> = <var:K> \land <var:M0> = <nat:8> \land <var:M1> = <nat:2> \cdot <var:K> \} \\ <var:i> := <var:M1> ; \\ \{ <var:v> = <var:K> \land <var:M0> = <nat:8> \land <var:i> = <nat:2> \cdot <var:K> \} \\ <var:i> := <var:i> + <var:M0> \\ \{ <var:v> = <var:K> \land <var:i> = <nat:2> \cdot <var:K> + <nat:8> \} \end{eqnarray} The application of usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:8> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:v> ; <var:i> := <var:M1> ; <var:i> := <var:i> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:v> = <var:K> }} <def:poly> {{ <var:i> = <nat:2> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:M0> = <nat:8> /\ <var:M1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:M0> = <nat:8> /\ <var:i> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:K> /\ <var:i> = <nat:2> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 