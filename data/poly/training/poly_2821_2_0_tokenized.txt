\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:3> ; <var:P> := <var:W0> \end{verbatim} Assume that $ <var:j> = <var:X> $ prior to evaluating this series of instructions , it holds that $ <var:P> = <nat:3> $ once set of commands has exited . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:j> = <var:X> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:j> = <var:X> \land <var:W0> = <nat:3> \} \\ <var:P> := <var:W0> \\ \{ <var:j> = <var:X> \land <var:P> = <nat:3> \} \end{eqnarray} As a consequence , this code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:j> = <var:X> }} <var:W0> := <nat:3> ; <var:P> := <var:W0> {{ <var:P> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:P> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 