\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:b> \end{verbatim} Assume it to hold that $ <var:b> = <var:a> $ prior to executing this set of instructions it follows that we have $ <var:e> = <nat:4> \times <var:a> + <nat:3> $ when code is done . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:b> = <var:a> \} \\ <var:e> := <nat:4> ; \\ \{ <var:b> = <var:a> \land <var:e> = <nat:4> \} \\ <var:e> := <nat:3> + <var:e> * <var:b> \\ \{ <var:b> = <var:a> \land <var:e> = <nat:4> \times <var:a> + <nat:3> \} \end{eqnarray} Given the above , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:b> = <var:a> }} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:b> {{ <var:e> = <nat:4> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:a> /\ <var:e> = <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 