\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:R0> := <nat:4> ; <var:x> := <var:R0> \end{verbatim} Assuming it to hold that $ <var:K> = <var:Q> $ with some natural coefficients $ <var:Q> $ ahead of executing the set of commands , it holds that we see $ <var:x> = <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be given through Hoare logic . Observing the subsequent line in the list of commands , we see \verb | { <var:K> = <var:Q> } <var:R0> := <nat:4> { <var:K> = <var:Q> \land <var:R0> = <nat:4> } | . This is shown to be logically sound by the variable assignmet rule from Hoare techniques . Advancing to the proceeding command found in our set of commands , we have \verb | { <var:K> = <var:Q> } <var:R0> := <nat:4> { <var:K> = <var:Q> \land <var:R0> = <nat:4> } | . This is guaranteed using the binding scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <var:R0> := <nat:4> ; <var:x> := <var:R0> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 