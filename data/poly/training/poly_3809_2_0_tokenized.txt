\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:7> ; <var:H> := <var:k0> \end{verbatim} Assume $ <var:l> = <var:C> $ prior to evaluating the program , it must be that $ <var:H> = <nat:7> $ after segment of code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:C> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:l> = <var:C> \land <var:k0> = <nat:7> \} \\ <var:H> := <var:k0> \\ \{ <var:l> = <var:C> \land <var:H> = <nat:7> \} \end{eqnarray} Using Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <var:k0> := <nat:7> ; <var:H> := <var:k0> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 