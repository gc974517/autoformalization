\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:4> ; <var:O> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given some $ <var:b> $ --- $ <var:A> = <var:b> $ prior to running the series of instructions then we have $ <var:O> = <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques results in : \begin{eqnarray} \{ <var:A> = <var:b> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:A> = <var:b> \land <var:S0> = <nat:4> \} \\ <var:O> := <var:S0> \\ \{ <var:A> = <var:b> \land <var:O> = <nat:4> \} \end{eqnarray} As a consequence , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:O> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:A> = <var:b> }} <def:poly> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:b> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:b> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 