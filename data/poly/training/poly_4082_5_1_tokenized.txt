\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:S> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing given every $ <var:N> \in \mathbb{N} $ it to be that $ <var:S> = <var:N> $ ahead of the execution of the series of instructions it must be that $ <var:v> = <nat:3> * <var:N> + <nat:6> $ when series of instructions exits . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:S> = <var:N> \} \\ <var:Y1> := <var:S> ; \\ \{ <var:S> = <var:N> \land <var:Y1> = <var:N> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:S> = <var:N> \land <var:Y1> = <var:N> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <var:Y1> * <nat:3> ; \\ \{ <var:S> = <var:N> \land <var:Y1> = <nat:3> \cdot <var:N> \land <var:Y0> = <nat:6> \} \\ <var:v> := <var:Y1> \\ \{ <var:S> = <var:N> \land <var:Y0> = <nat:6> \land <var:v> = <nat:3> \cdot <var:N> \} \\ <var:v> := <var:v> + <var:Y0> \\ \{ <var:S> = <var:N> \land <var:v> = <nat:3> \cdot <var:N> + <nat:6> \} \end{eqnarray} As a result , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:S> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:S> = <var:N> }} <def:poly> {{ <var:v> = <nat:3> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:Y1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:Y1> = <var:N> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:Y1> = <nat:3> * <var:N> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:Y0> = <nat:6> /\ <var:v> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:N> /\ <var:v> = <nat:3> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 