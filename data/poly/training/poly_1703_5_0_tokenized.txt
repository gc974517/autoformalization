\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:y> ; <var:R> := <var:J1> ; <var:R> := <var:R> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume that we have $ <var:y> = <var:F> $ ahead of interpreting this set of commands it follows that $ <var:R> = <nat:7> * <var:F> + <nat:6> $ after list of commands has executed . \end{theorem} \begin{proof} The method of proof for this list of commands can be accomplished using standard Hoare reasoning . Moving forward , we have the variable assignmet statement letting $ <nat:6> $ toward $ <var:J0>$ . This line redefines the precondition $ \{ <var:y> = <var:F> \} $ as $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \} $ . This is ensured using the assignment law given in typical Hoare reasoning . Advancing , we have the variable assignmet command binding $ <nat:7> $ to $ <var:J1>$ . This moves $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \} $ toward $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:J1> = <nat:7> \} $ . Moving forward , the variable assignmet code \verb | <var:J1> := <var:J1> * <var:y> ; | . This takes the precondition $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:J1> = <nat:7> \} $ into the postcondition $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:J1> = <nat:7> \times <var:F> \} $ . This is deduced through the assignment scheme defined by standard Hoare logic . Taking a look at the proceeding piece of code seen in the series of commands , we have the variable update statement \verb | <var:R> := <var:J1> ; | . This statement advances the condition $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:J1> = <nat:7> \times <var:F> \} $ toward $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:R> = <nat:7> \times <var:F> \} $ . Paying attention to the proceeding statement found in the list of commands , the line \verb | <var:R> := <var:R> + <var:J0> | . This code advances the precondition $ \{ <var:y> = <var:F> \land <var:J0> = <nat:6> \land <var:R> = <nat:7> \times <var:F> \} $ to the postcondition $ \{ <var:y> = <var:F> \land <var:R> = <nat:7> \times <var:F> + <nat:6> \} $ . This is shown to be logically sound through the assignment scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:y> ; <var:R> := <var:J1> ; <var:R> := <var:R> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:y> = <var:F> }} <def:poly> {{ <var:R> = <nat:7> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:F> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:F> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:F> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:F> /\ <var:J0> = <nat:6> /\ <var:R> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:F> /\ <var:R> = <nat:7> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 