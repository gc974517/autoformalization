\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:o> ; <var:T> := <nat:3> + <var:T> * <var:o> \end{verbatim} Allowing that we have $ <var:o> = <var:y> $ , for $ <var:y> \in \mathbb{Z}^+ $ , ahead of the execution of the series of commands , then we see $ <var:T> = <nat:1> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:3> $ once series of instructions executes . \end{theorem} \begin{proof} Applying Hoare techniques produces : \begin{eqnarray} \{ <var:o> = <var:y> \} \\ <var:T> := <nat:1> ; \\ \{ <var:o> = <var:y> \land <var:T> = <nat:1> \} \\ <var:T> := <nat:1> + <var:T> * <var:o> ; \\ \{ <var:o> = <var:y> \land <var:T> = <nat:1> * <var:y> + <nat:1> \} \\ <var:T> := <nat:3> + <var:T> * <var:o> \\ \{ <var:o> = <var:y> \land <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> \} \end{eqnarray} Thus , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:o> ; <var:T> := <nat:3> + <var:T> * <var:o> {{ <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:T> = <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:T> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 