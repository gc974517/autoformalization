\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:S1> := <var:J> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:3> ; <var:t> := <var:S1> <var:t> := <var:t> + <var:S0> \end{verbatim} Given it to hold that $ <var:J> = <var:Y> $ prior to the evaluation of this list of commands it holds that we have $ <var:t> = <nat:3> \cdot <var:Y> + <nat:9> $ once series of commands exits . \end{theorem} \begin{proof} The course of logic for this set of instructions can be accomplished using typical Hoare techniques . Moving on , we have the assignment code yielding $ <var:J> $ as $ <var:S1>$ . This takes $ \{ <var:J> = <var:Y> \} $ toward $ \{ <var:J> = <var:Y> \land <var:S1> = <var:Y> \} $ . Shifting focus toward the subsequent command found in the set of commands , the command letting $ <nat:9> $ into $ <var:S0>$ . This moves the precondition $ \{ <var:J> = <var:Y> \land <var:S1> = <var:Y> \} $ into $ \{ <var:J> = <var:Y> \land <var:S1> = <var:Y> \land <var:S0> = <nat:9> \} $ . Now , we have the command yielding $ <var:S1> * <nat:3> $ to $ <var:S1>$ . This command forwards the precondition $ \{ <var:J> = <var:Y> \land <var:S1> = <var:Y> \land <var:S0> = <nat:9> \} $ into the condition $ \{ <var:J> = <var:Y> \land <var:S1> = <nat:3> * <var:Y> \land <var:S0> = <nat:9> \} $ . This is shown using the assignment rule defined by standard Hoare reasoning . Taking another step toward the subsequent statement seen in our series of instructions , the variable binding command \verb | <var:t> := <var:S1> | . This redefines $ \{ <var:J> = <var:Y> \land <var:S1> = <nat:3> * <var:Y> \land <var:S0> = <nat:9> \} $ toward $ \{ <var:J> = <var:Y> \land <var:S0> = <nat:9> \land <var:t> = <nat:3> * <var:Y> \} $ . This is guaranteed by the assignment scheme of usual Hoare techniques . Going forward , the assignment command binding $ <var:t> + <var:S0$ toward $ <var:t>$ . This takes $ \{ <var:J> = <var:Y> \land <var:S0> = <nat:9> \land <var:t> = <nat:3> * <var:Y> \} $ toward the condition $ \{ <var:J> = <var:Y> \land <var:t> = <nat:3> * <var:Y> + <nat:9> \} $ . This is sound by the assignment rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:J> = <var:Y> }} <var:S1> := <var:J> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:3> ; <var:t> := <var:S1> <var:t> := <var:t> + <var:S0> {{ <var:t> = <nat:3> * <var:Y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S1> = <nat:3> * <var:Y> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:S0> = <nat:9> /\ <var:t> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:Y> /\ <var:t> = <nat:3> * <var:Y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 