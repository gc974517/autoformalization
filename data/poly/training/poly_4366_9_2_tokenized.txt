\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <var:x> * <var:Q> ; <var:x> := <nat:2> + <var:x> * <var:Q> ; <var:x> := <nat:3> + <var:x> * <var:Q> ; <var:x> := <nat:4> + <var:x> * <var:Q> ; <var:x> := <nat:3> + <var:x> * <var:Q> ; <var:x> := <nat:4> + <var:x> * <var:Q> ; <var:x> := <nat:1> + <var:x> * <var:Q> ; <var:x> := <nat:1> + <var:x> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:Q> = <var:z> $ before evaluating our set of commands , it must be that $ <var:x> = <nat:3> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> $ when series of instructions has exited . \end{theorem} \begin{proof} The course of logic for this code is given through standard Hoare reasoning . Immediately following , we have the statement \verb | <var:x> := <nat:3> ; | . This moves the precondition $ \{ <var:Q> = <var:z> \} $ as the condition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \} $ . This is given with the assignment scheme given in typical Hoare logic . Moving on to the following line of code seen in our list of instructions , the assignment statement giving $ <var:x> * <var:Q> $ toward $ <var:x>$ . This statement transfers $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \} $ as the postcondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> + \} $ . This is ensured by the assignment rule in Hoare logic . Going forward , we have the assignment statement defining $ <nat:2> + <var:x> * <var:Q> $ toward $ <var:x>$ . This code redefines the precondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> + \} $ toward the postcondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:2> \} $ . Further , we have the binding command \verb | <var:x> := <nat:3> + <var:x> * <var:Q> ; | . This redefines $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:2> \} $ toward $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> + <nat:3> \} $ . Considering the proceeding piece of code found in our program , we see the variable update statement yielding $ <nat:4> + <var:x> * <var:Q> $ as $ <var:x>$ . This forwards $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> + <nat:3> \} $ toward the postcondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ . This is given by the assignment inference rule given by usual Hoare logic . Moving on to the next step , we see the environment update line defining $ <nat:3> + <var:x> * <var:Q> $ into $ <var:x>$ . This takes the precondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ toward the postcondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule found in usual Hoare logic . Jumping to the following line of code contained in the series of instructions , the variable assignmet line \verb | <var:x> := <nat:4> + <var:x> * <var:Q> ; | . This redefines $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:3> \} $ into $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ . Honing in on the following line of code seen in the list of instructions , we see the variable binding code \verb | <var:x> := <nat:1> + <var:x> * <var:Q> ; | . This statement transfers the precondition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ to the condition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> \} $ . This is deduced using the assignment inference rule in standard Hoare reasoning . Stepping forward , we see the binding statement \verb | <var:x> := <nat:1> + <var:x> * <var:Q> | . This command moves the condition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> \} $ to the condition $ \{ <var:Q> = <var:z> \land <var:x> = <nat:3> \cdot <var:z> ^ <nat:8> + <nat:2> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:3> ; <var:x> := <var:x> * <var:Q> ; <var:x> := <nat:2> + <var:x> * <var:Q> ; <var:x> := <nat:3> + <var:x> * <var:Q> ; <var:x> := <nat:4> + <var:x> * <var:Q> ; <var:x> := <nat:3> + <var:x> * <var:Q> ; <var:x> := <nat:4> + <var:x> * <var:Q> ; <var:x> := <nat:1> + <var:x> * <var:Q> ; <var:x> := <nat:1> + <var:x> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Q> = <var:z> }} <def:poly> {{ <var:x> = <nat:3> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:x> = <nat:3> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 