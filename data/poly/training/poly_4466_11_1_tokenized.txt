\begin{document} \begin{theorem} Consider the following series of instructions such that \begin{verbatim} <var:L1> := <var:B> ; <var:L2> := <var:L1> * <var:B> ; <var:L3> := <var:L2> * <var:B> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:7> ; <var:L3> := <var:L3> * <nat:5> ; <var:R> := <var:L3> <var:R> := <var:R> + <var:L2> <var:R> := <var:R> + <var:L1> <var:R> := <var:R> + <var:L0> \end{verbatim} Assume it to be that $ <var:B> = <var:X> $ , given every $ <var:X> $ , before interpreting our code segment it must be that we have $ <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> $ once code segment is done executing . \end{theorem} \begin{proof} Let this decorated code . \begin{eqnarray} \{ <var:B> = <var:X> \} \\ <var:L1> := <var:B> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <var:X> \} \\ <var:L2> := <var:L1> * <var:B> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <var:X> \land <var:L2> = <var:X> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:B> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <var:X> \land <var:L2> = <var:X> ^ <nat:2> \land <var:L3> = <var:X> ^ <nat:3> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <var:X> \land <var:L2> = <var:X> ^ <nat:2> \land <var:L3> = <var:X> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:3> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <nat:3> * <var:X> \land <var:L2> = <var:X> ^ <nat:2> \land <var:L3> = <var:X> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L2> := <var:L2> * <nat:7> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <nat:3> * <var:X> \land <var:L2> = <nat:7> * <var:X> ^ <nat:2> \land <var:L3> = <var:X> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L3> := <var:L3> * <nat:5> ; \\ \{ <var:B> = <var:X> \land <var:L1> = <nat:3> * <var:X> \land <var:L2> = <nat:7> * <var:X> ^ <nat:2> \land <var:L3> = <nat:5> * <var:X> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:R> := <var:L3> \\ \{ <var:B> = <var:X> \land <var:L1> = <nat:3> * <var:X> \land <var:L2> = <nat:7> * <var:X> ^ <nat:2> \land <var:L0> = <nat:4> \land <var:R> = <nat:5> * <var:X> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:L2> \\ \{ <var:B> = <var:X> \land <var:L1> = <nat:3> * <var:X> \land <var:L0> = <nat:4> \land <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:L1> \\ \{ <var:B> = <var:X> \land <var:L0> = <nat:4> \land <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} \\ <var:R> := <var:R> + <var:L0> \\ \{ <var:B> = <var:X> \land <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} \end{eqnarray} Using typical Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:B> = <var:X> }} <var:L1> := <var:B> ; <var:L2> := <var:L1> * <var:B> ; <var:L3> := <var:L2> * <var:B> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:3> ; <var:L2> := <var:L2> * <nat:7> ; <var:L3> := <var:L3> * <nat:5> ; <var:R> := <var:L3> <var:R> := <var:R> + <var:L2> <var:R> := <var:R> + <var:L1> <var:R> := <var:R> + <var:L0> {{ <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <var:X> /\ <var:L2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <var:X> /\ <var:L2> = <var:X> ^ <nat:2> /\ <var:L3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <var:X> /\ <var:L2> = <var:X> ^ <nat:2> /\ <var:L3> = <var:X> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <nat:3> * <var:X> /\ <var:L2> = <var:X> ^ <nat:2> /\ <var:L3> = <var:X> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <nat:3> * <var:X> /\ <var:L2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:L3> = <var:X> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <nat:3> * <var:X> /\ <var:L2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:X> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <nat:3> * <var:X> /\ <var:L2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:L0> = <nat:4> /\ <var:R> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L1> = <nat:3> * <var:X> /\ <var:L0> = <nat:4> /\ <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:L0> = <nat:4> /\ <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:R> = <nat:5> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 