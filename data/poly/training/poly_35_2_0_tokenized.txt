\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:1> ; <var:k> := <var:a0> \end{verbatim} Given that we have $ <var:T> = <var:s> $ before evaluating our code segment it holds that we have $ <var:k> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program is clear using Hoare techniques . Following , we have the variable update statement defining $ <nat:1> $ as $ <var:a0>$ . This moves $ \{ <var:T> = <var:s> \} $ to the condition $ \{ <var:T> = <var:s> \land <var:a0> = <nat:1> \} $ . This is sound by the assignment law defined by usual Hoare logic . Considering the upcoming step contained in our list of commands , we see the variable assignmet code \verb | <var:k> := <var:a0> | . This code redefines the precondition $ \{ <var:T> = <var:s> \land <var:a0> = <nat:1> \} $ to the condition $ \{ <var:T> = <var:s> \land <var:k> = <nat:1> \} $ . This is ensured using the assignment scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:T> = <var:s> }} <var:a0> := <nat:1> ; <var:k> := <var:a0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 