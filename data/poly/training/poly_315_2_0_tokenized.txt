\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:y0> := <nat:6> ; <var:o> := <var:y0> \end{verbatim} Assume that we have $ <var:s> = <var:I> $ ahead of interpreting this code segment , it follows that we have $ <var:o> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:I> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:s> = <var:I> \land <var:y0> = <nat:6> \} \\ <var:o> := <var:y0> \\ \{ <var:s> = <var:I> \land <var:o> = <nat:6> \} \end{eqnarray} Utilizing usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:s> = <var:I> }} <var:y0> := <nat:6> ; <var:o> := <var:y0> {{ <var:o> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:o> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 