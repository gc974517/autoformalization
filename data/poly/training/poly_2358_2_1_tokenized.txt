\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:7> ; <var:p> := <var:Y0> \end{verbatim} Assume it to hold that $ <var:y> = <var:C> $ ahead of running the program it must be that we see $ <var:p> = <nat:7> $ . \end{theorem} \begin{proof} The proof of our set of commands is shown using Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:C> \} & <var:Y0> := <nat:7> & \{ <var:y> = <var:C> \land <var:Y0> = <nat:7> \} \end{tabular} This is ensured with the assignment law in usual Hoare logic . Advancing , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:C> \} & <var:Y0> := <nat:7> & \{ <var:y> = <var:C> \land <var:Y0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:y> = <var:C> }} <var:Y0> := <nat:7> ; <var:p> := <var:Y0> {{ <var:p> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:p> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 