\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:e1> := <var:N> ; <var:e2> := <var:e1> * <var:N> ; <var:e3> := <var:e2> * <var:N> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:6> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:2> ; <var:K> := <var:e3> <var:K> := <var:K> + <var:e2> <var:K> := <var:K> + <var:e1> <var:K> := <var:K> + <var:e0> \end{verbatim} Given given some natural numbers $ <var:b> $ that $ <var:N> = <var:b> $ before the execution of our list of instructions then we have $ <var:K> = <nat:2> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:6> \times <var:b> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be given with standard Hoare techniques . Following , we have \begin{verbatim} { <var:N> = <var:b> } <var:e1> := <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> } { <var:N> = <var:b> \land <var:e1> = <var:b> } <var:e2> := <var:e1> * <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> } \end{verbatim} Immediately after , we have \begin{verbatim} { <var:N> = <var:b> } <var:e1> := <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> } { <var:N> = <var:b> \land <var:e1> = <var:b> } <var:e2> := <var:e1> * <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> } { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> } <var:e3> := <var:e2> * <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> } { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> } <var:e0> := <nat:7> { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } { <var:N> = <var:b> \land <var:e1> = <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e1> := <var:e1> * <nat:6> { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e2> := <var:e2> * <nat:2> { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <nat:2> * <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <nat:2> * <var:b> ^ <nat:2> \land <var:e3> = <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e3> := <var:e3> * <nat:2> { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <nat:2> * <var:b> ^ <nat:2> \land <var:e3> = <nat:2> * <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } { <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <nat:2> * <var:b> ^ <nat:2> \land <var:e3> = <nat:2> * <var:b> ^ <nat:3> \land <var:e0> = <nat:7> } <var:K> := <var:e3{ <var:N> = <var:b> \land <var:e1> = <nat:6> * <var:b> \land <var:e2> = <nat:2> * <var:b> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:K> = <nat:2> * <var:b> ^ <nat:3> } \end{verbatim} Now , we see \begin{verbatim} { <var:N> = <var:b> } <var:e1> := <var:N> { <var:N> = <var:b> \land <var:e1> = <var:b> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:N> = <var:b> }} <var:e1> := <var:N> ; <var:e2> := <var:e1> * <var:N> ; <var:e3> := <var:e2> * <var:N> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:6> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:2> ; <var:K> := <var:e3> <var:K> := <var:K> + <var:e2> <var:K> := <var:K> + <var:e1> <var:K> := <var:K> + <var:e0> {{ <var:K> = <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <var:b> /\ <var:e2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <var:b> /\ <var:e2> = <var:b> ^ <nat:2> /\ <var:e3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <var:b> /\ <var:e2> = <var:b> ^ <nat:2> /\ <var:e3> = <var:b> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <nat:6> * <var:b> /\ <var:e2> = <var:b> ^ <nat:2> /\ <var:e3> = <var:b> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <nat:6> * <var:b> /\ <var:e2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:e3> = <var:b> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <nat:6> * <var:b> /\ <var:e2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <nat:6> * <var:b> /\ <var:e2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:K> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e1> = <nat:6> * <var:b> /\ <var:e0> = <nat:7> /\ <var:K> = <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:e0> = <nat:7> /\ <var:K> = <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:K> = <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 