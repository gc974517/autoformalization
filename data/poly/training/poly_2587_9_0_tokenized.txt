\begin{document} \begin{theorem} Consider the following list of instructions as \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:g> ; <var:Q2> := <nat:3> ; <var:Q2> := <var:Q2> * <var:g> ; <var:Q2> := <var:Q2> * <var:g> ; <var:F> := <var:Q2> ; <var:F> := <var:F> + <var:Q1> ; <var:F> := <var:F> + <var:Q0> \end{verbatim} Allow ( taking natural coefficients $ <var:r> $ ) that we have $ <var:g> = <var:r> $ before running the program it follows that we see $ <var:F> = <nat:3> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our code segment can be seen using standard Hoare logic . Focusing on the next piece of code found in the set of commands , the binding statement \verb | <var:Q0> := <nat:8> ; | . This takes $ \{ <var:g> = <var:r> \} $ into the postcondition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \} $ . This is guaranteed through the assignment rule given by Hoare reasoning . Looking at the next statement in our code , we see the variable assignmet command letting $ <nat:1> $ as $ <var:Q1>$ . This takes the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \} $ into the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> \} $ . This is given using the assignment inference rule defined by typical Hoare reasoning . Moving on to the next step , we have the command \verb | <var:Q1> := <var:Q1> * <var:g> ; | . This moves the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> \} $ toward $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \} $ . This is known to be sound with the assignment inference rule defined in Hoare techniques . Moving forward to the next step , we see the assignment code \verb | <var:Q2> := <nat:3> ; | . This moves the precondition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \} $ into $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> \} $ . Immediately following , the assignment command binding $ <var:Q2> * <var:g> $ as $ <var:Q2>$ . This redefines the precondition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> \} $ toward $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> * <var:r> \} $ . Honing in on the upcoming statement seen in the code segment , we see the statement \verb | <var:Q2> := <var:Q2> * <var:g> ; | . This redefines $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> * <var:r> \} $ as $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> * <var:r> ^ <nat:2> \} $ . This is shown with the assignment law from typical Hoare techniques . Advancing to the subsequent line seen in the series of commands , the command yielding $ <var:Q2> $ into $ <var:F>$ . This advances the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:Q2> = <nat:3> * <var:r> ^ <nat:2> \} $ toward the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:F> = <nat:3> * <var:r> ^ <nat:2> \} $ . Jumping to the following statement in the code , we see the assignment line \verb | <var:F> := <var:F> + <var:Q1> ; | . This forwards the condition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:r> \land <var:F> = <nat:3> * <var:r> ^ <nat:2> \} $ toward $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> \} $ . Advancing on , the variable binding statement binding $ <var:F> + <var:Q0$ as $ <var:F>$ . This command advances the precondition $ \{ <var:g> = <var:r> \land <var:Q0> = <nat:8> \land <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> \} $ as the postcondition $ \{ <var:g> = <var:r> \land <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> \} $ . This is given with the assignment rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:g> = <var:r> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:g> ; <var:Q2> := <nat:3> ; <var:Q2> := <var:Q2> * <var:g> ; <var:Q2> := <var:Q2> * <var:g> ; <var:F> := <var:Q2> ; <var:F> := <var:F> + <var:Q1> ; <var:F> := <var:F> + <var:Q0> {{ <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:r> /\ <var:Q2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:r> /\ <var:Q2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:r> /\ <var:Q2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:r> /\ <var:F> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:Q0> = <nat:8> /\ <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:F> = <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 