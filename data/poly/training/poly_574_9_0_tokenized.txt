\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:9> ; <var:A1> := <var:A1> * <var:E> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:E> ; <var:A2> := <var:A2> * <var:E> ; <var:f> := <var:A2> ; <var:f> := <var:f> + <var:A1> ; <var:f> := <var:f> + <var:A0> \end{verbatim} Given , for any positive integers $ <var:Q> $ , that $ <var:E> = <var:Q> $ prior to running this series of instructions it follows that $ <var:f> = <nat:8> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:1> $ when code exits . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands can be accomplished by this decorated series of commands . \begin{eqnarray} \{ <var:E> = <var:Q> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \} \\ <var:A1> := <nat:9> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \} \\ <var:A1> := <var:A1> * <var:E> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \times <var:Q> \} \\ <var:A2> := <nat:8> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \times <var:Q> \land <var:A2> = <nat:8> \} \\ <var:A2> := <var:A2> * <var:E> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \times <var:Q> \land <var:A2> = <nat:8> \times <var:Q> \} \\ <var:A2> := <var:A2> * <var:E> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \times <var:Q> \land <var:A2> = <nat:8> \times <var:Q> ^ <nat:2> \} \\ <var:f> := <var:A2> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:A1> = <nat:9> \times <var:Q> \land <var:f> = <nat:8> \times <var:Q> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:A1> ; \\ \{ <var:E> = <var:Q> \land <var:A0> = <nat:1> \land <var:f> = <nat:8> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> \} \\ <var:f> := <var:f> + <var:A0> \\ \{ <var:E> = <var:Q> \land <var:f> = <nat:8> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:E> = <var:Q> }} <var:A0> := <nat:1> ; <var:A1> := <nat:9> ; <var:A1> := <var:A1> * <var:E> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:E> ; <var:A2> := <var:A2> * <var:E> ; <var:f> := <var:A2> ; <var:f> := <var:f> + <var:A1> ; <var:f> := <var:f> + <var:A0> {{ <var:f> = <nat:8> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> * <var:Q> /\ <var:A2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> * <var:Q> /\ <var:A2> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> * <var:Q> /\ <var:A2> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:9> * <var:Q> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:A0> = <nat:1> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Q> /\ <var:f> = <nat:8> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 