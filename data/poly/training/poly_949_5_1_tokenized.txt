\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:1> ; <var:H> := <var:I1> <var:H> := <var:H> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow that $ <var:k> = <var:X> $ prior to the execution of this program it must be that we have $ <var:H> = <nat:1> \times <var:X> + <nat:9> $ when segment of code executes . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:k> = <var:X> \} \\ <var:I1> := <var:k> ; \\ \{ <var:k> = <var:X> \land <var:I1> = <var:X> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:k> = <var:X> \land <var:I1> = <var:X> \land <var:I0> = <nat:9> \} \\ <var:I1> := <var:I1> * <nat:1> ; \\ \{ <var:k> = <var:X> \land <var:I1> = <nat:1> * <var:X> \land <var:I0> = <nat:9> \} \\ <var:H> := <var:I1> \\ \{ <var:k> = <var:X> \land <var:I0> = <nat:9> \land <var:H> = <nat:1> * <var:X> \} \\ <var:H> := <var:H> + <var:I0> \\ \{ <var:k> = <var:X> \land <var:H> = <nat:1> * <var:X> + <nat:9> \} \end{eqnarray} Given the above , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:1> ; <var:H> := <var:I1> <var:H> := <var:H> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:k> = <var:X> }} <def:poly> {{ <var:H> = <nat:1> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:I1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:I1> = <var:X> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:I0> = <nat:9> /\ <var:H> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:X> /\ <var:H> = <nat:1> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 