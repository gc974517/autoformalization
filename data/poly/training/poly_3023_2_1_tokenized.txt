\begin{document} \begin{theorem} Define the following series of commands as follows \begin{verbatim} <var:X0> := <nat:1> ; <var:w> := <var:X0> \end{verbatim} Assume it to be that $ <var:N> = <var:r> $ for any integers $ <var:r> $ ahead of evaluating this list of commands , it follows that $ <var:w> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is given with typical Hoare logic . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:r> \} & <var:X0> := <nat:1> & \{ <var:N> = <var:r> \land <var:X0> = <nat:1> \} \end{tabular} Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:r> \} & <var:X0> := <nat:1> & \{ <var:N> = <var:r> \land <var:X0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:N> = <var:r> }} <var:X0> := <nat:1> ; <var:w> := <var:X0> {{ <var:w> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:w> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 