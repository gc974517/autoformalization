\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:h0> := <nat:5> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:z> ; <var:J> := <var:h1> ; <var:J> := <var:J> + <var:h0> \end{verbatim} Assume --- with some positive coefficients $ <var:o> $ --- that $ <var:z> = <var:o> $ prior to evaluating this series of instructions it must be that we have $ <var:J> = <nat:5> \times <var:o> + <nat:5> $ once code is done executing . \end{theorem} \begin{proof} Applying standard Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:h0> := <nat:5> ; \\ \{ <var:z> = <var:o> \land <var:h0> = <nat:5> \} \\ <var:h1> := <nat:5> ; \\ \{ <var:z> = <var:o> \land <var:h0> = <nat:5> \land <var:h1> = <nat:5> \} \\ <var:h1> := <var:h1> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:h0> = <nat:5> \land <var:h1> = <nat:5> \times <var:o> \} \\ <var:J> := <var:h1> ; \\ \{ <var:z> = <var:o> \land <var:h0> = <nat:5> \land <var:J> = <nat:5> \times <var:o> \} \\ <var:J> := <var:J> + <var:h0> \\ \{ <var:z> = <var:o> \land <var:J> = <nat:5> \times <var:o> + <nat:5> \} \end{eqnarray} Thus , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:h0> := <nat:5> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:z> ; <var:J> := <var:h1> ; <var:J> := <var:J> + <var:h0> {{ <var:J> = <nat:5> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:h0> = <nat:5> /\ <var:J> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:J> = <nat:5> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 