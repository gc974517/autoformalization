\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:6> ; <var:S> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:N> = <var:D> $ for positive coefficients $ <var:D> $ ahead of evaluating this set of instructions then we see $ <var:S> = <nat:6> $ when segment of code executes . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:N> = <var:D> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:N> = <var:D> \land <var:l0> = <nat:6> \} \\ <var:S> := <var:l0> \\ \{ <var:N> = <var:D> \land <var:S> = <nat:6> \} \end{eqnarray} As a result , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:S> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:N> = <var:D> }} <def:poly> {{ <var:S> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:S> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 