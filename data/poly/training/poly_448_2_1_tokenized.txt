\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:Y0> := <nat:1> ; <var:Q> := <var:Y0> \end{verbatim} Assume that we have $ <var:p> = <var:F> $ ahead of evaluating the code , then we see $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Observe the below decorated set of instructions . \begin{eqnarray} \{ <var:p> = <var:F> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:p> = <var:F> \land <var:Y0> = <nat:1> \} \\ <var:Q> := <var:Y0> \\ \{ <var:p> = <var:F> \land <var:Q> = <nat:1> \} \end{eqnarray} Applying usual Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:p> = <var:F> }} <var:Y0> := <nat:1> ; <var:Q> := <var:Y0> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 