\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z1> := <var:c> ; <var:z2> := <var:z1> * <var:c> ; <var:z3> := <var:z2> * <var:c> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:1> ; <var:z3> := <var:z3> * <nat:3> ; <var:B> := <var:z3> <var:B> := <var:B> + <var:z1> <var:B> := <var:B> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:c> = <var:G> $ ahead of the evaluation of our code then we have $ <var:B> = <nat:3> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> + <nat:1> $ when list of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be demonstrated using this decorated set of instructions . \begin{eqnarray} \{ <var:c> = <var:G> \} \\ <var:z1> := <var:c> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <var:G> \} \\ <var:z2> := <var:z1> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <var:G> \land <var:z2> = <var:G> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:c> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <var:G> \land <var:z2> = <var:G> ^ <nat:2> \land <var:z3> = <var:G> ^ <nat:3> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <var:G> \land <var:z2> = <var:G> ^ <nat:2> \land <var:z3> = <var:G> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ <var:z1> := <var:z1> * <nat:1> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <nat:1> * <var:G> \land <var:z2> = <var:G> ^ <nat:2> \land <var:z3> = <var:G> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ <var:z3> := <var:z3> * <nat:3> ; \\ \{ <var:c> = <var:G> \land <var:z1> = <nat:1> * <var:G> \land <var:z2> = <var:G> ^ <nat:2> \land <var:z3> = <nat:3> * <var:G> ^ <nat:3> \land <var:z0> = <nat:1> \} \\ <var:B> := <var:z3> \\ \{ <var:c> = <var:G> \land <var:z1> = <nat:1> * <var:G> \land <var:z2> = <var:G> ^ <nat:2> \land <var:z0> = <nat:1> \land <var:B> = <nat:3> * <var:G> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:z1> \\ \{ <var:c> = <var:G> \land <var:z0> = <nat:1> \land <var:B> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> \} \\ <var:B> := <var:B> + <var:z0> \\ \{ <var:c> = <var:G> \land <var:B> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z1> := <var:c> ; <var:z2> := <var:z1> * <var:c> ; <var:z3> := <var:z2> * <var:c> ; <var:z0> := <nat:1> ; <var:z1> := <var:z1> * <nat:1> ; <var:z3> := <var:z3> * <nat:3> ; <var:B> := <var:z3> <var:B> := <var:B> + <var:z1> <var:B> := <var:B> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:c> = <var:G> }} <def:poly> {{ <var:B> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <var:G> /\ <var:z2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <var:G> /\ <var:z2> = <var:G> ^ <nat:2> /\ <var:z3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <var:G> /\ <var:z2> = <var:G> ^ <nat:2> /\ <var:z3> = <var:G> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <nat:1> * <var:G> /\ <var:z2> = <var:G> ^ <nat:2> /\ <var:z3> = <var:G> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <nat:1> * <var:G> /\ <var:z2> = <var:G> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:G> ^ <nat:3> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z1> = <nat:1> * <var:G> /\ <var:z2> = <var:G> ^ <nat:2> /\ <var:z0> = <nat:1> /\ <var:B> = <nat:3> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:z0> = <nat:1> /\ <var:B> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 