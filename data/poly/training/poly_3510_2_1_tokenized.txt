\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:5> ; <var:r> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:x> = <var:l> $ prior to running the series of instructions , it follows that we have $ <var:r> = <nat:5> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:x> = <var:l> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:x> = <var:l> \land <var:y0> = <nat:5> \} \\ <var:r> := <var:y0> \\ \{ <var:x> = <var:l> \land <var:r> = <nat:5> \} \end{eqnarray} Given the above , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:r> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:x> = <var:l> }} <def:poly> {{ <var:r> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:r> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 