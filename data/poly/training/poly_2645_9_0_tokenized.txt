\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:V> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:V> ; <var:L2> := <var:L2> * <var:V> ; <var:t> := <var:L2> ; <var:t> := <var:t> + <var:L1> ; <var:t> := <var:t> + <var:L0> \end{verbatim} Given that $ <var:V> = <var:N> $ prior to the execution of our set of instructions it follows that we have $ <var:t> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:4> $ after list of commands has terminated . \end{theorem} \begin{proof} The flow of logic for this segment of code is shown by standard Hoare techniques . Paying attention to the following line of code seen in the set of commands , we see the variable binding line giving $ <nat:4> $ into $ <var:L0>$ . This statement redefines the precondition $ \{ <var:V> = <var:N> \} $ toward the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \} $ . This is rigorously given through the assignment inference rule given in typical Hoare techniques . Paying attention to the following line found in the set of instructions , the environment update statement assigning $ <nat:6> $ to $ <var:L1>$ . This command forwards the precondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \} $ to the postcondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \} $ . Going forward , the variable update command binding $ <var:L1> * <var:V> $ into $ <var:L1>$ . This advances the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \} $ as the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \} $ . This is shown to be logically sound through the assignment inference rule defined by standard Hoare logic . Taking a look at the following step contained in the set of instructions , the variable assignmet command \verb | <var:L2> := <nat:7> ; | . This code moves the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \} $ as the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \} $ . This is sound with the assignment law defined by typical Hoare reasoning . Stepping forward , we have the variable update code \verb | <var:L2> := <var:L2> * <var:V> ; | . This takes the precondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \cdot <var:N> \} $ . Immediately following , the binding code \verb | <var:L2> := <var:L2> * <var:V> ; | . This command takes the precondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \cdot <var:N> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \cdot <var:N> ^ <nat:2> \} $ . Moving forward to the following step in our segment of code , the variable binding statement letting $ <var:L2> $ into $ <var:t>$ . This moves the precondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:L2> = <nat:7> \cdot <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:t> = <nat:7> \cdot <var:N> ^ <nat:2> \} $ . Going to the next step , the variable update line \verb | <var:t> := <var:t> + <var:L1> ; | . This transfers the precondition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:L1> = <nat:6> \cdot <var:N> \land <var:t> = <nat:7> \cdot <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:t> = <nat:7> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> \} $ . This is known to be sound with the assignment law found in Hoare logic . Moving forward , the assignment command defining $ <var:t> + <var:L0$ toward $ <var:t>$ . This advances the condition $ \{ <var:V> = <var:N> \land <var:L0> = <nat:4> \land <var:t> = <nat:7> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> \} $ into the condition $ \{ <var:V> = <var:N> \land <var:t> = <nat:7> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:4> \} $ . This is shown to be logically sound using the assignment rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:V> = <var:N> }} <var:L0> := <nat:4> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:V> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:V> ; <var:L2> := <var:L2> * <var:V> ; <var:t> := <var:L2> ; <var:t> := <var:t> + <var:L1> ; <var:t> := <var:t> + <var:L0> {{ <var:t> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> * <var:N> /\ <var:L2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> * <var:N> /\ <var:L2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> * <var:N> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:6> * <var:N> /\ <var:t> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:L0> = <nat:4> /\ <var:t> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:t> = <nat:7> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 