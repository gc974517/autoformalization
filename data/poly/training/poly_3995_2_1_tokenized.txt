\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:8> ; <var:U> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:P> = <var:E> $ for all natural coefficients $ <var:E> $ before evaluating the segment of code , then we have $ <var:U> = <nat:8> $ after segment of code has executed . \end{theorem} \begin{proof} The course of logic for our program is given by standard Hoare reasoning . Advancing on , we see the statement defining $ <nat:8> $ into $ <var:A0>$ . This line forwards $ \{ <var:P> = <var:E> \} $ toward the condition $ \{ <var:P> = <var:E> \land <var:A0> = <nat:8> \} $ . This is deduced using the assignment scheme given by standard Hoare logic . Keeping momentum , the binding command \verb | <var:U> := <var:A0> | . This advances $ \{ <var:P> = <var:E> \land <var:A0> = <nat:8> \} $ as the condition $ \{ <var:P> = <var:E> \land <var:U> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:8> ; <var:U> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <def:poly> {{ <var:U> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:U> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 