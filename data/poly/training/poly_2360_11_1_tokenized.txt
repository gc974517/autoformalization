\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:h> ; <var:f2> := <var:f1> * <var:h> ; <var:f3> := <var:f2> * <var:h> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:3> ; <var:f3> := <var:f3> * <nat:6> ; <var:m> := <var:f3> <var:m> := <var:m> + <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Assume it to hold that $ <var:h> = <var:w> $ before evaluating this set of commands , then $ <var:m> = <nat:6> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:8> \cdot <var:w> + <nat:9> $ once set of instructions terminates . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:h> = <var:w> \} \\ <var:f1> := <var:h> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <var:w> \} \\ <var:f2> := <var:f1> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <var:w> \land <var:f2> = <var:w> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <var:w> \land <var:f2> = <var:w> ^ <nat:2> \land <var:f3> = <var:w> ^ <nat:3> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <var:w> \land <var:f2> = <var:w> ^ <nat:2> \land <var:f3> = <var:w> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f1> := <var:f1> * <nat:8> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <nat:8> \cdot <var:w> \land <var:f2> = <var:w> ^ <nat:2> \land <var:f3> = <var:w> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f2> := <var:f2> * <nat:3> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <nat:8> \cdot <var:w> \land <var:f2> = <nat:3> \cdot <var:w> ^ <nat:2> \land <var:f3> = <var:w> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f3> := <var:f3> * <nat:6> ; \\ \{ <var:h> = <var:w> \land <var:f1> = <nat:8> \cdot <var:w> \land <var:f2> = <nat:3> \cdot <var:w> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:w> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:m> := <var:f3> \\ \{ <var:h> = <var:w> \land <var:f1> = <nat:8> \cdot <var:w> \land <var:f2> = <nat:3> \cdot <var:w> ^ <nat:2> \land <var:f0> = <nat:9> \land <var:m> = <nat:6> \cdot <var:w> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:f2> \\ \{ <var:h> = <var:w> \land <var:f1> = <nat:8> \cdot <var:w> \land <var:f0> = <nat:9> \land <var:m> = <nat:6> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:f1> \\ \{ <var:h> = <var:w> \land <var:f0> = <nat:9> \land <var:m> = <nat:6> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:8> \cdot <var:w> \} \\ <var:m> := <var:m> + <var:f0> \\ \{ <var:h> = <var:w> \land <var:m> = <nat:6> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:8> \cdot <var:w> + <nat:9> \} \end{eqnarray} Therefore , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:h> ; <var:f2> := <var:f1> * <var:h> ; <var:f3> := <var:f2> * <var:h> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:3> ; <var:f3> := <var:f3> * <nat:6> ; <var:m> := <var:f3> <var:m> := <var:m> + <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:h> = <var:w> }} <def:poly> {{ <var:m> = <nat:6> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <var:w> /\ <var:f2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <var:w> /\ <var:f2> = <var:w> ^ <nat:2> /\ <var:f3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <var:w> /\ <var:f2> = <var:w> ^ <nat:2> /\ <var:f3> = <var:w> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <nat:8> * <var:w> /\ <var:f2> = <var:w> ^ <nat:2> /\ <var:f3> = <var:w> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <nat:8> * <var:w> /\ <var:f2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:f3> = <var:w> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <nat:8> * <var:w> /\ <var:f2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:w> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <nat:8> * <var:w> /\ <var:f2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:f0> = <nat:9> /\ <var:m> = <nat:6> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f1> = <nat:8> * <var:w> /\ <var:f0> = <nat:9> /\ <var:m> = <nat:6> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:f0> = <nat:9> /\ <var:m> = <nat:6> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:m> = <nat:6> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 