\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:7> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:n> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:n> ; <var:t2> := <var:t2> * <var:n> ; <var:p> := <var:t2> ; <var:p> := <var:p> + <var:t1> ; <var:p> := <var:p> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assume that $ <var:n> = <var:h> $ letting positive integers $ <var:h> $ before running this series of commands , it must be that we have $ <var:p> = <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> $ once code segment has finished executing . \end{theorem} \begin{proof} The course of logic for our code is done through this decorated series of instructions . \begin{eqnarray} \{ <var:n> = <var:h> \} \\ <var:t0> := <nat:7> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \} \\ <var:t1> := <nat:3> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \} \\ <var:t1> := <var:t1> * <var:n> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \times <var:h> \} \\ <var:t2> := <nat:9> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \times <var:h> \land <var:t2> = <nat:9> \} \\ <var:t2> := <var:t2> * <var:n> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \times <var:h> \land <var:t2> = <nat:9> \times <var:h> \} \\ <var:t2> := <var:t2> * <var:n> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \times <var:h> \land <var:t2> = <nat:9> \times <var:h> ^ <nat:2> \} \\ <var:p> := <var:t2> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:t1> = <nat:3> \times <var:h> \land <var:p> = <nat:9> \times <var:h> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:t1> ; \\ \{ <var:n> = <var:h> \land <var:t0> = <nat:7> \land <var:p> = <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} \\ <var:p> := <var:p> + <var:t0> \\ \{ <var:n> = <var:h> \land <var:p> = <nat:9> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:7> \} \end{eqnarray} Applying typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:7> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:n> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:n> ; <var:t2> := <var:t2> * <var:n> ; <var:p> := <var:t2> ; <var:p> := <var:p> + <var:t1> ; <var:p> := <var:p> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:n> = <var:h> }} <def:poly> {{ <var:p> = <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> * <var:h> /\ <var:t2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> * <var:h> /\ <var:t2> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> * <var:h> /\ <var:t2> = <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:t1> = <nat:3> * <var:h> /\ <var:p> = <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:t0> = <nat:7> /\ <var:p> = <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:p> = <nat:9> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 