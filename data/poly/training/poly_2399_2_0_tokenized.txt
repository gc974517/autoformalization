\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:P0> := <nat:2> ; <var:h> := <var:P0> \end{verbatim} Given that $ <var:f> = <var:n> $ --- for any $ <var:n> \in \mathbb{Z}^+ $ --- ahead of evaluating the list of instructions , it holds that we see $ <var:h> = <nat:2> $ after program finishes . \end{theorem} \begin{proof} Arguing the correctness of this program can be seen through Hoare logic . Going forward , we see \begin{eqnarray} \{ <var:f> = <var:n> \} \, <var:P0> := <nat:2> \, \{ <var:f> = <var:n> \land <var:P0> = <nat:2> \} \\ \{ <var:f> = <var:n> \land <var:P0> = <nat:2> \} \, <var:h> := <var:P0\, \{ <var:f> = <var:n> \land <var:h> = <nat:2> \} \end{eqnarray} This is shown to be logically sound using the environment update law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:f> = <var:n> }} <var:P0> := <nat:2> ; <var:h> := <var:P0> {{ <var:h> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:h> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 