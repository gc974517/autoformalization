\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:G1> := <var:R> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:j> := <var:G1> <var:j> := <var:j> + <var:G0> \end{verbatim} Assume it to hold that $ <var:R> = <var:m> $ prior to interpreting this code , it follows that $ <var:j> = <nat:2> \times <var:m> + <nat:1> $ once list of instructions executes . \end{theorem} \begin{proof} The method of proof for the segment of code can be demonstrated by standard Hoare logic . Immediately after , we have \begin{verbatim} { <var:R> = <var:m> } <var:G1> := <var:R> { <var:R> = <var:m> \land <var:G1> = <var:m> } { <var:R> = <var:m> \land <var:G1> = <var:m> } <var:G0> := <nat:1> { <var:R> = <var:m> \land <var:G1> = <var:m> \land <var:G0> = <nat:1> } { <var:R> = <var:m> \land <var:G1> = <var:m> \land <var:G0> = <nat:1> } <var:G1> := <var:G1> * <nat:2> { <var:R> = <var:m> \land <var:G1> = <nat:2> * <var:m> \land <var:G0> = <nat:1> } { <var:R> = <var:m> \land <var:G1> = <nat:2> * <var:m> \land <var:G0> = <nat:1> } <var:j> := <var:G1{ <var:R> = <var:m> \land <var:G0> = <nat:1> \land <var:j> = <nat:2> * <var:m> } { <var:R> = <var:m> \land <var:G0> = <nat:1> \land <var:j> = <nat:2> * <var:m> } <var:j> := <var:j> + <var:G0{ <var:R> = <var:m> \land <var:j> = <nat:2> * <var:m> + <nat:1> } \end{verbatim} This is ensured using the variable assignmet law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:G1> := <var:R> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:j> := <var:G1> <var:j> := <var:j> + <var:G0> {{ <var:j> = <nat:2> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:G1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:G1> = <var:m> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:G1> = <nat:2> * <var:m> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:G0> = <nat:1> /\ <var:j> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:j> = <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 