\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:u> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:u> ; <var:F2> := <var:F2> * <var:u> ; <var:H> := <var:F2> ; <var:H> := <var:H> + <var:F1> ; <var:H> := <var:H> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:u> = <var:x> $ ahead of the evaluation of this series of instructions it follows that $ <var:H> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> $ after set of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is done through usual Hoare techniques . Shifting focus toward the subsequent lines found in our segment of code , we have \begin{verbatim} { <var:u> = <var:x> } <var:F0> := <nat:2> { <var:u> = <var:x> \land <var:F0> = <nat:2> } { <var:u> = <var:x> \land <var:F0> = <nat:2> } <var:F1> := <nat:4> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> } { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> } <var:F1> := <var:F1> * <var:u> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> } { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> } <var:F2> := <nat:9> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> } { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> } <var:F2> := <var:F2> * <var:u> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> * <var:x> } { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> * <var:x> } <var:F2> := <var:F2> * <var:u> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> * <var:x> ^ <nat:2> } { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:F2> = <nat:9> * <var:x> ^ <nat:2> } <var:H> := <var:F2> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> * <var:x> \land <var:H> = <nat:9> * <var:x> ^ <nat:2> } \end{verbatim} Next , we have \begin{verbatim} { <var:u> = <var:x> } <var:F0> := <nat:2> { <var:u> = <var:x> \land <var:F0> = <nat:2> } { <var:u> = <var:x> \land <var:F0> = <nat:2> } <var:F1> := <nat:4> { <var:u> = <var:x> \land <var:F0> = <nat:2> \land <var:F1> = <nat:4> } \end{verbatim} This is guaranteed through the assignment rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:u> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:u> ; <var:F2> := <var:F2> * <var:u> ; <var:H> := <var:F2> ; <var:H> := <var:H> + <var:F1> ; <var:H> := <var:H> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <def:poly> {{ <var:H> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:x> /\ <var:F2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:x> /\ <var:F2> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:x> /\ <var:F2> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:4> * <var:x> /\ <var:H> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:F0> = <nat:2> /\ <var:H> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:H> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 