\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <var:B> * <var:b> ; <var:B> := <var:B> * <var:b> ; <var:B> := <nat:1> + <var:B> * <var:b> ; <var:B> := <nat:2> + <var:B> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:b> = <var:d> $ ( given all $ <var:d> \in \mathbb{Z}^+ $ ) prior to evaluating this series of commands then we see $ <var:B> = <nat:2> \times <var:d> ^ <nat:4> + <nat:1> \times <var:d> + <nat:2> $ after list of commands is done executing . \end{theorem} \begin{proof} The method of proof for our code is shown using usual Hoare logic . Jumping to the upcoming step seen in our code segment , the variable update line \verb | <var:B> := <nat:2> ; | . This code takes the precondition $ \{ <var:b> = <var:d> \} $ as $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> \} $ . This is given by the assignment scheme from Hoare logic . Moving on , the variable binding command \verb | <var:B> := <var:B> * <var:b> ; | . This transfers the precondition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> \} $ toward $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> + \} $ . This is shown with the assignment law from usual Hoare techniques . Moving forward , we see the environment update line \verb | <var:B> := <var:B> * <var:b> ; | . This command redefines the precondition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> + \} $ as the postcondition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> ^ <nat:2> + \} $ . Moving onward , we have the variable assignmet command yielding $ <nat:1> + <var:B> * <var:b> $ into $ <var:B>$ . This command takes the condition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> ^ <nat:2> + \} $ as the condition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> \} $ . This is guaranteed through the assignment rule given by standard Hoare techniques . Further , the line letting $ <nat:2> + <var:B> * <var:b$ into $ <var:B>$ . This advances the condition $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> \} $ as $ \{ <var:b> = <var:d> \land <var:B> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> + <nat:2> \} $ . This is known to be sound using the assignment law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:2> ; <var:B> := <var:B> * <var:b> ; <var:B> := <var:B> * <var:b> ; <var:B> := <nat:1> + <var:B> * <var:b> ; <var:B> := <nat:2> + <var:B> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:b> = <var:d> }} <def:poly> {{ <var:B> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:2> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:2> * <var:d> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:B> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 