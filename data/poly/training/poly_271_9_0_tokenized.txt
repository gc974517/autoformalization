\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:w> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:w> ; <var:k2> := <var:k2> * <var:w> ; <var:p> := <var:k2> ; <var:p> := <var:p> + <var:k1> ; <var:p> := <var:p> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for all whole numbers $ <var:A> $ --- that $ <var:w> = <var:A> $ ahead of evaluating our series of instructions then $ <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> $ once set of instructions has executed . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:w> = <var:A> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \} \\ <var:k1> := <nat:5> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> \} \\ <var:k1> := <var:k1> * <var:w> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> * <var:A> \} \\ <var:k2> := <nat:4> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> * <var:A> \land <var:k2> = <nat:4> \} \\ <var:k2> := <var:k2> * <var:w> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> * <var:A> \land <var:k2> = <nat:4> * <var:A> \} \\ <var:k2> := <var:k2> * <var:w> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> * <var:A> \land <var:k2> = <nat:4> * <var:A> ^ <nat:2> \} \\ <var:p> := <var:k2> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> * <var:A> \land <var:p> = <nat:4> * <var:A> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:k1> ; \\ \{ <var:w> = <var:A> \land <var:k0> = <nat:4> \land <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} \\ <var:p> := <var:p> + <var:k0> \\ \{ <var:w> = <var:A> \land <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:w> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:w> ; <var:k2> := <var:k2> * <var:w> ; <var:p> := <var:k2> ; <var:p> := <var:p> + <var:k1> ; <var:p> := <var:p> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:w> = <var:A> }} <def:poly> {{ <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:A> /\ <var:k2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:A> /\ <var:k2> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:A> /\ <var:k2> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:A> /\ <var:p> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:k0> = <nat:4> /\ <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:p> = <nat:4> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 