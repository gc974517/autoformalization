\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:M1> := <var:l> ; <var:M2> := <var:M1> * <var:l> ; <var:M3> := <var:M2> * <var:l> ; <var:M0> := <nat:8> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:4> ; <var:y> := <var:M3> <var:y> := <var:y> + <var:M2> <var:y> := <var:y> + <var:M0> \end{verbatim} Allowing $ <var:l> = <var:u> $ prior to executing our set of commands it holds that $ <var:y> = <nat:4> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:l> = <var:u> \} \\ <var:M1> := <var:l> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \} \\ <var:M2> := <var:M1> * <var:l> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:l> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ <var:M2> := <var:M2> * <nat:5> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <nat:5> * <var:u> ^ <nat:2> \land <var:M3> = <var:u> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ <var:M3> := <var:M3> * <nat:4> ; \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <nat:5> * <var:u> ^ <nat:2> \land <var:M3> = <nat:4> * <var:u> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ <var:y> := <var:M3> \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M2> = <nat:5> * <var:u> ^ <nat:2> \land <var:M0> = <nat:8> \land <var:y> = <nat:4> * <var:u> ^ <nat:3> \} \end{eqnarray} Advancing executing our set of commands results in : \begin{eqnarray} <var:y> := <var:y> + <var:M2> \\ \{ <var:l> = <var:u> \land <var:M1> = <var:u> \land <var:M0> = <nat:8> \land <var:y> = <nat:4> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:M0> \\ \{ <var:l> = <var:u> \land <var:y> = <nat:4> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:8> \} \end{eqnarray} Therefore , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:l> = <var:u> }} <var:M1> := <var:l> ; <var:M2> := <var:M1> * <var:l> ; <var:M3> := <var:M2> * <var:l> ; <var:M0> := <nat:8> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:4> ; <var:y> := <var:M3> <var:y> := <var:y> + <var:M2> <var:y> := <var:y> + <var:M0> {{ <var:y> = <nat:4> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:M3> = <var:u> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:u> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:M0> = <nat:8> /\ <var:y> = <nat:4> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:M1> = <var:u> /\ <var:M0> = <nat:8> /\ <var:y> = <nat:4> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:u> /\ <var:y> = <nat:4> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 