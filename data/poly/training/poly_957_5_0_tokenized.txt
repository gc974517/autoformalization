\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:D> ; <var:E> := <var:e1> ; <var:E> := <var:E> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allowing that $ <var:D> = <var:g> $ ahead of interpreting our code , it follows that $ <var:E> = <nat:1> \cdot <var:g> + <nat:7> $ once list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is given with this decorated list of instructions . \begin{eqnarray} \{ <var:D> = <var:g> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:D> = <var:g> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:D> = <var:g> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:D> ; \\ \{ <var:D> = <var:g> \land <var:e0> = <nat:7> \land <var:e1> = <nat:1> \cdot <var:g> \} \\ <var:E> := <var:e1> ; \\ \{ <var:D> = <var:g> \land <var:e0> = <nat:7> \land <var:E> = <nat:1> \cdot <var:g> \} \\ <var:E> := <var:E> + <var:e0> \\ \{ <var:D> = <var:g> \land <var:E> = <nat:1> \cdot <var:g> + <nat:7> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:D> ; <var:E> := <var:e1> ; <var:E> := <var:E> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:D> = <var:g> }} <def:poly> {{ <var:E> = <nat:1> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:e0> = <nat:7> /\ <var:E> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:E> = <nat:1> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 