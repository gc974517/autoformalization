\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:n> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:n> ; <var:e2> := <var:e2> * <var:n> ; <var:D> := <var:e2> ; <var:D> := <var:D> + <var:e1> ; <var:D> := <var:D> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Given $ <var:n> = <var:b> $ given any integers $ <var:b> $ ahead of interpreting our set of instructions , it holds that we have $ <var:D> = <nat:6> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:7> $ once series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:b> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \} \\ <var:e1> := <nat:3> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \} \\ <var:e1> := <var:e1> * <var:n> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:b> \} \\ <var:e2> := <nat:6> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:b> \land <var:e2> = <nat:6> \} \\ <var:e2> := <var:e2> * <var:n> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:b> \land <var:e2> = <nat:6> \times <var:b> \} \\ <var:e2> := <var:e2> * <var:n> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:b> \land <var:e2> = <nat:6> \times <var:b> ^ <nat:2> \} \\ <var:D> := <var:e2> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:b> \land <var:D> = <nat:6> \times <var:b> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:e1> ; \\ \{ <var:n> = <var:b> \land <var:e0> = <nat:7> \land <var:D> = <nat:6> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> \} \\ <var:D> := <var:D> + <var:e0> \\ \{ <var:n> = <var:b> \land <var:D> = <nat:6> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:n> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:n> ; <var:e2> := <var:e2> * <var:n> ; <var:D> := <var:e2> ; <var:D> := <var:D> + <var:e1> ; <var:D> := <var:D> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:n> = <var:b> }} <def:poly> {{ <var:D> = <nat:6> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:b> /\ <var:e2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:b> /\ <var:e2> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:b> /\ <var:e2> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:b> /\ <var:D> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:e0> = <nat:7> /\ <var:D> = <nat:6> * <var:b> ^ <nat:2> + <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:b> /\ <var:D> = <nat:6> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 