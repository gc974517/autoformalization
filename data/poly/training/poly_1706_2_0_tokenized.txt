\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:1> ; <var:M> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:r> = <var:e> $ given some natural numbers $ <var:e> $ ahead of interpreting this series of commands , it holds that $ <var:M> = <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:r> = <var:e> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:r> = <var:e> \land <var:C0> = <nat:1> \} \\ <var:M> := <var:C0> \\ \{ <var:r> = <var:e> \land <var:M> = <nat:1> \} \end{eqnarray} As a result , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:M> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:r> = <var:e> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 