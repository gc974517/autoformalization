\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:C> ; <var:P> := <var:O1> ; <var:P> := <var:P> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given , with some whole numbers $ <var:j> $ , that we have $ <var:C> = <var:j> $ ahead of executing the list of instructions , it follows that we have $ <var:P> = <nat:8> \times <var:j> + <nat:3> $ after code has finished executing . \end{theorem} \begin{proof} The method of proof for this set of instructions can be accomplished using this decorated set of commands . \begin{eqnarray} \{ <var:C> = <var:j> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:C> = <var:j> \land <var:O0> = <nat:3> \} \\ <var:O1> := <nat:8> ; \\ \{ <var:C> = <var:j> \land <var:O0> = <nat:3> \land <var:O1> = <nat:8> \} \\ <var:O1> := <var:O1> * <var:C> ; \\ \{ <var:C> = <var:j> \land <var:O0> = <nat:3> \land <var:O1> = <nat:8> \cdot <var:j> \} \\ <var:P> := <var:O1> ; \\ \{ <var:C> = <var:j> \land <var:O0> = <nat:3> \land <var:P> = <nat:8> \cdot <var:j> \} \\ <var:P> := <var:P> + <var:O0> \\ \{ <var:C> = <var:j> \land <var:P> = <nat:8> \cdot <var:j> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:C> ; <var:P> := <var:O1> ; <var:P> := <var:P> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:C> = <var:j> }} <def:poly> {{ <var:P> = <nat:8> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:O0> = <nat:3> /\ <var:P> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:j> /\ <var:P> = <nat:8> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 