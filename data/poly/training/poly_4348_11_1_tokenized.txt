\begin{document} \begin{theorem} Take a code segment in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:G> ; <var:A2> := <var:A1> * <var:G> ; <var:A3> := <var:A2> * <var:G> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:7> ; <var:O> := <var:A3> <var:O> := <var:O> + <var:A2> <var:O> := <var:O> + <var:A1> <var:O> := <var:O> + <var:A0> \end{verbatim} Assuming that we have $ <var:G> = <var:V> $ ahead of running the set of instructions , it follows that $ <var:O> = <nat:7> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> $ after set of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is evident by standard Hoare logic . Moving on , we have the binding code binding $ <var:G> $ as $ <var:A1>$ . This transfers the precondition $ \{ <var:G> = <var:V> \} $ into the condition $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \} $ . This is guaranteed through the assignment scheme defined by standard Hoare techniques . Paying attention to the following statement found in the code , we see the variable assignmet code \verb | <var:A2> := <var:A1> * <var:G> ; | . This transfers the precondition $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \} $ into the postcondition $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \} $ . Moving forward to the subsequent statement contained in the code segment , we have the variable binding code giving $ <var:A2> * <var:G> $ into $ <var:A3>$ . This redefines $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \} $ toward the condition $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \} $ . Immediately after , we have the variable assignmet command \verb | <var:A0> := <nat:9> ; | . This code redefines $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \} $ into $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . Moving onward , we have the assignment code binding $ <var:A1> * <nat:8> $ toward $ <var:A1>$ . This statement forwards $ \{ <var:G> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ into $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . Looking at the proceeding piece of code seen in our segment of code , we see the variable update statement \verb | <var:A2> := <var:A2> * <nat:1> ; | . This advances $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ as $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . This is known to be sound by the assignment inference rule given in typical Hoare reasoning . Following , the environment update statement \verb | <var:A3> := <var:A3> * <nat:7> ; | . This statement redefines the condition $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ as the condition $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ . Looking at the proceeding line of code found in the list of instructions , we have the variable update line letting $ <var:A3$ into $ <var:O>$ . This advances $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A3> = <nat:7> \times <var:V> ^ <nat:3> \land <var:A0> = <nat:9> \} $ to $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> \} $ . This is known to be sound through the assignment rule given by Hoare techniques . Shifting focus toward the subsequent line seen in our segment of code , we see the environment update statement assigning $ <var:O> + <var:A2$ to $ <var:O>$ . This code redefines $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> \} $ to the condition $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> \} $ . Honing in on the subsequent bit of code contained in the set of instructions , we see the assignment command assigning $ <var:O> + <var:A1$ toward $ <var:O>$ . This code takes the condition $ \{ <var:G> = <var:V> \land <var:A1> = <nat:8> \times <var:V> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> \} $ as the postcondition $ \{ <var:G> = <var:V> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> \} $ . Stepping through , we see the variable update command defining $ <var:O> + <var:A0$ toward $ <var:O>$ . This command forwards $ \{ <var:G> = <var:V> \land <var:A0> = <nat:9> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> \} $ into $ \{ <var:G> = <var:V> \land <var:O> = <nat:7> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> + <nat:9> \} $ . This is given with the assignment rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:G> = <var:V> }} <var:A1> := <var:G> ; <var:A2> := <var:A1> * <var:G> ; <var:A3> := <var:A2> * <var:G> ; <var:A0> := <nat:9> ; <var:A1> := <var:A1> * <nat:8> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:7> ; <var:O> := <var:A3> <var:O> := <var:O> + <var:A2> <var:O> := <var:O> + <var:A1> <var:O> := <var:O> + <var:A0> {{ <var:O> = <nat:7> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <nat:8> * <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <nat:8> * <var:V> /\ <var:A2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <nat:8> * <var:V> /\ <var:A2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:A3> = <nat:7> * <var:V> ^ <nat:3> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <nat:8> * <var:V> /\ <var:A2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:A0> = <nat:9> /\ <var:O> = <nat:7> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A1> = <nat:8> * <var:V> /\ <var:A0> = <nat:9> /\ <var:O> = <nat:7> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:A0> = <nat:9> /\ <var:O> = <nat:7> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:O> = <nat:7> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 