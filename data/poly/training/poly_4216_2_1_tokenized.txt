\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:7> ; <var:g> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:w> = <var:E> $ --- for some $ <var:E> \in \mathbb{Z}^+ $ --- ahead of interpreting our code , it must be that we have $ <var:g> = <nat:7> $ when list of instructions terminates . \end{theorem} \begin{proof} Proving correctness for our series of instructions is done through usual Hoare logic . Taking a look at the subsequent line found in the code segment , we see the variable binding command \verb | <var:Y0> := <nat:7> ; | . This redefines $ \{ <var:w> = <var:E> \} $ to $ \{ <var:w> = <var:E> \land <var:Y0> = <nat:7> \} $ . Moving onward , the binding statement letting $ <var:Y0$ as $ <var:g>$ . This line redefines $ \{ <var:w> = <var:E> \land <var:Y0> = <nat:7> \} $ to the condition $ \{ <var:w> = <var:E> \land <var:g> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:g> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:w> = <var:E> }} <def:poly> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:E> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:E> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 