\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:9> ; <var:a> := <var:E0> \end{verbatim} Given --- for positive integers $ <var:y> $ --- that we have $ <var:G> = <var:y> $ ahead of the execution of this series of commands it holds that we have $ <var:a> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our code segment can be done using standard Hoare reasoning . Moving on to the next step , \verb | { <var:G> = <var:y> } <var:E0> := <nat:9> { <var:G> = <var:y> \land <var:E0> = <nat:9> } | . Stepping forward , we have \verb | { <var:G> = <var:y> } <var:E0> := <nat:9> { <var:G> = <var:y> \land <var:E0> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:G> = <var:y> }} <var:E0> := <nat:9> ; <var:a> := <var:E0> {{ <var:a> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:a> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 