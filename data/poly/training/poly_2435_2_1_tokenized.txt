\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:5> ; <var:G> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:V> = <var:d> $ before running our set of commands , it must be that we have $ <var:G> = <nat:5> $ when program exits . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is demonstrated using the below decorated list of commands . \begin{eqnarray} \{ <var:V> = <var:d> \} \\ <var:l0> := <nat:5> ; \\ \{ <var:V> = <var:d> \land <var:l0> = <nat:5> \} \\ <var:G> := <var:l0> \\ \{ <var:V> = <var:d> \land <var:G> = <nat:5> \} \end{eqnarray} Using Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:5> ; <var:G> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:V> = <var:d> }} <def:poly> {{ <var:G> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:G> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 