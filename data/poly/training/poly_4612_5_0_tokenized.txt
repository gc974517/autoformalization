\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:7> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:R> ; <var:i> := <var:M1> ; <var:i> := <var:i> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:R> = <var:a> $ given every integers $ <var:a> $ prior to evaluating this series of instructions , it follows that we see $ <var:i> = <nat:8> * <var:a> + <nat:7> $ when list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:a> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:R> = <var:a> \land <var:M0> = <nat:7> \} \\ <var:M1> := <nat:8> ; \\ \{ <var:R> = <var:a> \land <var:M0> = <nat:7> \land <var:M1> = <nat:8> \} \\ <var:M1> := <var:M1> * <var:R> ; \\ \{ <var:R> = <var:a> \land <var:M0> = <nat:7> \land <var:M1> = <nat:8> * <var:a> \} \\ <var:i> := <var:M1> ; \\ \{ <var:R> = <var:a> \land <var:M0> = <nat:7> \land <var:i> = <nat:8> * <var:a> \} \\ <var:i> := <var:i> + <var:M0> \\ \{ <var:R> = <var:a> \land <var:i> = <nat:8> * <var:a> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:7> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:R> ; <var:i> := <var:M1> ; <var:i> := <var:i> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:R> = <var:a> }} <def:poly> {{ <var:i> = <nat:8> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:M0> = <nat:7> /\ <var:i> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:i> = <nat:8> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 