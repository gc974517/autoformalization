\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:H> ; <var:k2> := <var:k1> * <var:H> ; <var:k3> := <var:k2> * <var:H> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:5> ; <var:k3> := <var:k3> * <nat:3> ; <var:V> := <var:k3> <var:V> := <var:V> + <var:k2> <var:V> := <var:V> + <var:k1> <var:V> := <var:V> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:H> = <var:D> $ before evaluating our code segment it holds that we see $ <var:V> = <nat:3> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> + <nat:7> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:H> = <var:D> \} \\ <var:k1> := <var:H> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <var:D> \} \\ <var:k2> := <var:k1> * <var:H> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:H> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k1> := <var:k1> * <nat:5> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <nat:5> * <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k2> := <var:k2> * <nat:5> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <nat:5> * <var:D> \land <var:k2> = <nat:5> * <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:k3> := <var:k3> * <nat:3> ; \\ \{ <var:H> = <var:D> \land <var:k1> = <nat:5> * <var:D> \land <var:k2> = <nat:5> * <var:D> ^ <nat:2> \land <var:k3> = <nat:3> * <var:D> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ <var:V> := <var:k3> \\ \{ <var:H> = <var:D> \land <var:k1> = <nat:5> * <var:D> \land <var:k2> = <nat:5> * <var:D> ^ <nat:2> \land <var:k0> = <nat:7> \land <var:V> = <nat:3> * <var:D> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:k2> \\ \{ <var:H> = <var:D> \land <var:k1> = <nat:5> * <var:D> \land <var:k0> = <nat:7> \land <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:k1> \\ \{ <var:H> = <var:D> \land <var:k0> = <nat:7> \land <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} \\ <var:V> := <var:V> + <var:k0> \\ \{ <var:H> = <var:D> \land <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:7> \} \end{eqnarray} Given the above , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:H> ; <var:k2> := <var:k1> * <var:H> ; <var:k3> := <var:k2> * <var:H> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:5> ; <var:k3> := <var:k3> * <nat:3> ; <var:V> := <var:k3> <var:V> := <var:V> + <var:k2> <var:V> := <var:V> + <var:k1> <var:V> := <var:V> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:H> = <var:D> }} <def:poly> {{ <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <nat:5> * <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <nat:5> * <var:D> /\ <var:k2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <nat:5> * <var:D> /\ <var:k2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <nat:5> * <var:D> /\ <var:k2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:k0> = <nat:7> /\ <var:V> = <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k1> = <nat:5> * <var:D> /\ <var:k0> = <nat:7> /\ <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:k0> = <nat:7> /\ <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:D> /\ <var:V> = <nat:3> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 