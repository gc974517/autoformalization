\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:N> ; <var:h2> := <var:h1> * <var:N> ; <var:h3> := <var:h2> * <var:N> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:4> ; <var:h3> := <var:h3> * <nat:8> ; <var:j> := <var:h3> <var:j> := <var:j> + <var:h2> <var:j> := <var:j> + <var:h1> <var:j> := <var:j> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assuming it to hold that $ <var:N> = <var:Y> $ prior to the execution of this list of instructions , it holds that we see $ <var:j> = <nat:8> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:6> \times <var:Y> + <nat:2> $ when set of commands executes . \end{theorem} \begin{proof} Proving correctness for the series of commands is given through usual Hoare logic . Immediately after , the variable assignmet statement defining $ <var:N> $ toward $ <var:h1>$ . This line takes $ \{ <var:N> = <var:Y> \} $ into the postcondition $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \} $ . Advancing to the next piece of code found in our set of commands , we see the variable assignmet line \verb | <var:h2> := <var:h1> * <var:N> ; | . This moves the precondition $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \} $ as $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \} $ . Shifting focus toward the subsequent statement found in the segment of code , the command \verb | <var:h3> := <var:h2> * <var:N> ; | . This statement transfers $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \} $ . Moving forward , we have the statement \verb | <var:h0> := <nat:2> ; | . This line moves $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \} $ toward $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . This is guaranteed with the assignment scheme defined in Hoare logic . Moving forward to the next command found in the series of commands , the variable assignmet statement \verb | <var:h1> := <var:h1> * <nat:6> ; | . This command moves $ \{ <var:N> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ into $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . This is shown by the assignment rule defined by typical Hoare logic . Advancing , we have the variable binding command letting $ <var:h2> * <nat:4> $ toward $ <var:h2>$ . This moves $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ to the condition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . Paying attention to the following piece of code contained in the list of instructions , we have the environment update command assigning $ <var:h3> * <nat:8> $ as $ <var:h3>$ . This takes the precondition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ to the postcondition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . Moving on , the binding statement \verb | <var:j> := <var:h3> | . This forwards the precondition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:Y> ^ <nat:3> \land <var:h0> = <nat:2> \} $ as $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> \} $ . Moving on to the next step , we see the assignment code defining $ <var:j> + <var:h2$ as $ <var:j>$ . This code advances the precondition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h2> = <nat:4> \cdot <var:Y> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> \} $ to the condition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> \} $ . This is given with the assignment rule given by usual Hoare techniques . Taking a look at the next command in the series of instructions , the environment update line assigning $ <var:j> + <var:h1$ toward $ <var:j>$ . This takes the condition $ \{ <var:N> = <var:Y> \land <var:h1> = <nat:6> \cdot <var:Y> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> \} $ toward the condition $ \{ <var:N> = <var:Y> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:6> \cdot <var:Y> \} $ . Focusing on the proceeding step found in the set of instructions , the variable assignmet statement \verb | <var:j> := <var:j> + <var:h0> | . This code redefines the condition $ \{ <var:N> = <var:Y> \land <var:h0> = <nat:2> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:6> \cdot <var:Y> \} $ as the condition $ \{ <var:N> = <var:Y> \land <var:j> = <nat:8> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:6> \cdot <var:Y> + <nat:2> \} $ . This is rigorously given through the assignment scheme obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:N> ; <var:h2> := <var:h1> * <var:N> ; <var:h3> := <var:h2> * <var:N> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:4> ; <var:h3> := <var:h3> * <nat:8> ; <var:j> := <var:h3> <var:j> := <var:j> + <var:h2> <var:j> := <var:j> + <var:h1> <var:j> := <var:j> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:N> = <var:Y> }} <def:poly> {{ <var:j> = <nat:8> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:Y> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:4> * <var:Y> ^ <nat:2> /\ <var:h0> = <nat:2> /\ <var:j> = <nat:8> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h0> = <nat:2> /\ <var:j> = <nat:8> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:h0> = <nat:2> /\ <var:j> = <nat:8> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:j> = <nat:8> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 