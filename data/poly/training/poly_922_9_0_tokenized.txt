\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:q> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:q> ; <var:u2> := <var:u2> * <var:q> ; <var:M> := <var:u2> ; <var:M> := <var:M> + <var:u1> ; <var:M> := <var:M> + <var:u0> \end{verbatim} Allow , for all natural coefficients $ <var:p> $ , that we have $ <var:q> = <var:p> $ before running the list of instructions , then we see $ <var:M> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> $ when set of commands exits . \end{theorem} \begin{proof} The method of proof for the segment of code can be demonstrated using typical Hoare techniques . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:q> = <var:p> \} & <var:u0> := <nat:3> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \} & <var:u1> := <nat:3> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \} & <var:u1> := <var:u1> * <var:q> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \} & <var:u2> := <nat:2> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \land <var:u2> = <nat:2> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \land <var:u2> = <nat:2> \} & <var:u2> := <var:u2> * <var:q> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \land <var:u2> = <nat:2> \times <var:p> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \land <var:u2> = <nat:2> \times <var:p> \} & <var:u2> := <var:u2> * <var:q> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \times <var:p> \land <var:u2> = <nat:2> \times <var:p> ^ <nat:2> \} \end{tabular} Focusing on the proceeding pieces of code seen in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:p> \} & <var:u0> := <nat:3> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \} \\ \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \} & <var:u1> := <nat:3> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \land <var:u1> = <nat:3> \} \end{tabular} Moving on , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:p> \} & <var:u0> := <nat:3> & \{ <var:q> = <var:p> \land <var:u0> = <nat:3> \} \end{tabular} This is known to be sound through the binding law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:q> = <var:p> }} <var:u0> := <nat:3> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:q> ; <var:u2> := <nat:2> ; <var:u2> := <var:u2> * <var:q> ; <var:u2> := <var:u2> * <var:q> ; <var:M> := <var:u2> ; <var:M> := <var:M> + <var:u1> ; <var:M> := <var:M> + <var:u0> {{ <var:M> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> * <var:p> /\ <var:u2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> * <var:p> /\ <var:u2> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> * <var:p> /\ <var:u2> = <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:3> * <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:u0> = <nat:3> /\ <var:M> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 