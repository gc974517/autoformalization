\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:l0> := <nat:9> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:O> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:O> ; <var:l2> := <var:l2> * <var:O> ; <var:t> := <var:l2> ; <var:t> := <var:t> + <var:l1> ; <var:t> := <var:t> + <var:l0> \end{verbatim} Allow $ <var:O> = <var:K> $ --- given positive integers $ <var:K> $ --- ahead of the evaluation of this series of commands , then $ <var:t> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:9> $ when code terminates . \end{theorem} \begin{proof} The argument for the code segment can be accomplished by usual Hoare logic . Next , we see the code letting $ <nat:9> $ to $ <var:l0>$ . This takes $ \{ <var:O> = <var:K> \} $ toward the postcondition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \} $ . This is shown to be logically sound by the assignment law from usual Hoare reasoning . Going to the next step , we see the variable binding command defining $ <nat:3> $ into $ <var:l1>$ . This moves the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \} $ into the postcondition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \} $ . This is guaranteed using the assignment law defined in standard Hoare reasoning . Moving forward , we see the assignment command giving $ <var:l1> * <var:O> $ into $ <var:l1>$ . This moves $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \} $ into $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \} $ . Moving on to the proceeding command found in our series of instructions , the line letting $ <nat:4> $ to $ <var:l2>$ . This command moves the precondition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \} $ toward the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \} $ . This is known to be sound by the assignment law given in typical Hoare reasoning . Moving on , the variable assignmet code yielding $ <var:l2> * <var:O> $ into $ <var:l2>$ . This redefines the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \} $ into $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \times <var:K> \} $ . Moving forward to the next step , we have the environment update line \verb | <var:l2> := <var:l2> * <var:O> ; | . This transfers the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \times <var:K> \} $ as the postcondition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \times <var:K> ^ <nat:2> \} $ . This is deduced by the assignment law from typical Hoare logic . Taking a look at the proceeding bit of code seen in the code , we see the variable update code \verb | <var:t> := <var:l2> ; | . This code transfers the precondition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:l2> = <nat:4> \times <var:K> ^ <nat:2> \} $ to the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:t> = <nat:4> \times <var:K> ^ <nat:2> \} $ . This is deduced with the assignment law defined in standard Hoare logic . Moving onward , the assignment command \verb | <var:t> := <var:t> + <var:l1> ; | . This transfers the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:l1> = <nat:3> \times <var:K> \land <var:t> = <nat:4> \times <var:K> ^ <nat:2> \} $ as the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:t> = <nat:4> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> \} $ . This is guaranteed through the assignment law found in Hoare reasoning . Jumping to the following bit of code seen in our set of commands , the binding statement letting $ <var:t> + <var:l0$ toward $ <var:t>$ . This advances the condition $ \{ <var:O> = <var:K> \land <var:l0> = <nat:9> \land <var:t> = <nat:4> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> \} $ to $ \{ <var:O> = <var:K> \land <var:t> = <nat:4> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:O> = <var:K> }} <var:l0> := <nat:9> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:O> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:O> ; <var:l2> := <var:l2> * <var:O> ; <var:t> := <var:l2> ; <var:t> := <var:t> + <var:l1> ; <var:t> := <var:t> + <var:l0> {{ <var:t> = <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> * <var:K> /\ <var:l2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> * <var:K> /\ <var:l2> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> * <var:K> /\ <var:l2> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:3> * <var:K> /\ <var:t> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:l0> = <nat:9> /\ <var:t> = <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:K> /\ <var:t> = <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 