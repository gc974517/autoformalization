\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:7> ; <var:v> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:c> = <var:k> $ prior to executing the list of commands , it follows that $ <var:v> = <nat:7> $ . \end{theorem} \begin{proof} The argument for the list of commands is accomplished by typical Hoare techniques . Moving on to the next step , we see the environment update line \verb | <var:u0> := <nat:7> ; | . This statement transfers the precondition $ \{ <var:c> = <var:k> \} $ as $ \{ <var:c> = <var:k> \land <var:u0> = <nat:7> \} $ . This is known to be sound through the assignment inference rule found in Hoare techniques . Going to the next step , we have the variable binding line \verb | <var:v> := <var:u0> | . This takes the precondition $ \{ <var:c> = <var:k> \land <var:u0> = <nat:7> \} $ as the postcondition $ \{ <var:c> = <var:k> \land <var:v> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:7> ; <var:v> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:c> = <var:k> }} <def:poly> {{ <var:v> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:v> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 