\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:E> ; <var:T> := <var:m1> ; <var:T> := <var:T> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:E> = <var:L> $ ahead of executing the series of instructions , it holds that $ <var:T> = <nat:3> * <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is demonstrated by Hoare techniques . Taking a look at the following command in our set of instructions , we see the environment update statement \verb | <var:m0> := <nat:3> ; | . This redefines the precondition $ \{ <var:E> = <var:L> \} $ to the postcondition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \} $ . This is sound with the assignment law given in standard Hoare techniques . Considering the proceeding line of code found in our program , the variable binding code assigning $ <nat:3> $ toward $ <var:m1>$ . This redefines the precondition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \} $ as the condition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:m1> = <nat:3> \} $ . After , the line defining $ <var:m1> * <var:E> $ into $ <var:m1>$ . This statement advances the condition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:m1> = <nat:3> \} $ to $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:m1> = <nat:3> \cdot <var:L> \} $ . Taking another step toward the following command found in the code , we see the environment update command \verb | <var:T> := <var:m1> ; | . This statement advances the precondition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:m1> = <nat:3> \cdot <var:L> \} $ into the postcondition $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:L> \} $ . This is shown to be logically sound using the assignment inference rule found in typical Hoare logic . Looking at the proceeding statement found in our list of commands , we have the binding command yielding $ <var:T> + <var:m0$ toward $ <var:T>$ . This line moves $ \{ <var:E> = <var:L> \land <var:m0> = <nat:3> \land <var:T> = <nat:3> \cdot <var:L> \} $ as $ \{ <var:E> = <var:L> \land <var:T> = <nat:3> \cdot <var:L> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:E> ; <var:T> := <var:m1> ; <var:T> := <var:T> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:E> = <var:L> }} <def:poly> {{ <var:T> = <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:m0> = <nat:3> /\ <var:T> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:T> = <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 