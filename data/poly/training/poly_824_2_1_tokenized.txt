\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:4> ; <var:U> := <var:W0> \end{verbatim} Assume that $ <var:Q> = <var:T> $ before the execution of this code segment , then we see $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of commands is given with usual Hoare reasoning . Going to the next step , we see the variable assignmet line \verb | <var:W0> := <nat:4> ; | . This statement moves the precondition $ \{ <var:Q> = <var:T> \} $ to $ \{ <var:Q> = <var:T> \land <var:W0> = <nat:4> \} $ . This is shown using the assignment law obtained from usual Hoare techniques . Moving on to the next bit of code in our code segment , we have the variable assignmet line \verb | <var:U> := <var:W0> | . This advances the condition $ \{ <var:Q> = <var:T> \land <var:W0> = <nat:4> \} $ into $ \{ <var:Q> = <var:T> \land <var:U> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Q> = <var:T> }} <var:W0> := <nat:4> ; <var:U> := <var:W0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 