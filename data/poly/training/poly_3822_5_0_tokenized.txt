\begin{document} \begin{theorem} Take a code segment in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:k> ; <var:N> := <var:y1> ; <var:N> := <var:N> + <var:y0> \end{verbatim} Assume it to hold that $ <var:k> = <var:G> $ prior to the evaluation of our list of instructions , it holds that $ <var:N> = <nat:6> * <var:G> + <nat:7> $ once series of commands has exited . \end{theorem} \begin{proof} Proving correctness for this segment of code is clear by Hoare reasoning . Considering the next line found in our code , we see \begin{eqnarray} \{ <var:k> = <var:G> \} \, <var:y0> := <nat:7> \, \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \} \end{eqnarray} Moving forward , \begin{eqnarray} \{ <var:k> = <var:G> \} \, <var:y0> := <nat:7> \, \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \} \\ \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \} \, <var:y1> := <nat:6> \, \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \land <var:y1> = <nat:6> \} \\ \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \land <var:y1> = <nat:6> \} \, <var:y1> := <var:y1> * <var:k> \, \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \land <var:y1> = <nat:6> * <var:G> \} \\ \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \land <var:y1> = <nat:6> * <var:G> \} \, <var:N> := <var:y1> \, \{ <var:k> = <var:G> \land <var:y0> = <nat:7> \land <var:N> = <nat:6> * <var:G> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:k> = <var:G> }} <var:y0> := <nat:7> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:k> ; <var:N> := <var:y1> ; <var:N> := <var:N> + <var:y0> {{ <var:N> = <nat:6> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:y0> = <nat:7> /\ <var:N> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:G> /\ <var:N> = <nat:6> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 