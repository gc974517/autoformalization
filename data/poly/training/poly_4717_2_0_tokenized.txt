\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:9> ; <var:P> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allowing --- given any positive coefficients $ <var:l> $ --- that we have $ <var:q> = <var:l> $ ahead of evaluating this series of instructions it must be that we see $ <var:P> = <nat:9> $ after segment of code is done executing . \end{theorem} \begin{proof} Proving correctness for our set of commands can be done by Hoare logic . Advancing to the next step , we have the environment update statement letting $ <nat:9> $ as $ <var:A0>$ . This statement moves $ \{ <var:q> = <var:l> \} $ to the postcondition $ \{ <var:q> = <var:l> \land <var:A0> = <nat:9> \} $ . Advancing on , we see the variable binding command \verb | <var:P> := <var:A0> | . This redefines $ \{ <var:q> = <var:l> \land <var:A0> = <nat:9> \} $ into the condition $ \{ <var:q> = <var:l> \land <var:P> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:9> ; <var:P> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:q> = <var:l> }} <def:poly> {{ <var:P> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:P> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 