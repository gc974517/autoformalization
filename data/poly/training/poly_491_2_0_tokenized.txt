\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:6> ; <var:q> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- with some natural coefficients $ <var:e> $ --- $ <var:S> = <var:e> $ before evaluating our series of commands it must be that $ <var:q> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be seen through usual Hoare logic . Observing the next commands in the segment of code , we have \begin{verbatim} { <var:S> = <var:e> } <var:R0> := <nat:6> { <var:S> = <var:e> \land <var:R0> = <nat:6> } { <var:S> = <var:e> \land <var:R0> = <nat:6> } <var:q> := <var:R0{ <var:S> = <var:e> \land <var:q> = <nat:6> } \end{verbatim} This is deduced using the variable binding scheme from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:q> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <def:poly> {{ <var:q> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:q> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 