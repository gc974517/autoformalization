\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:3> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:i> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:i> ; <var:v2> := <var:v2> * <var:i> ; <var:j> := <var:v2> ; <var:j> := <var:j> + <var:v1> ; <var:j> := <var:j> + <var:v0> \end{verbatim} Given it to be that $ <var:i> = <var:m> $ prior to evaluating our series of instructions , then $ <var:j> = <nat:8> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:m> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \} \\ <var:v1> := <nat:5> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \} \\ <var:v1> := <var:v1> * <var:i> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \cdot <var:m> \} \\ <var:v2> := <nat:8> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \cdot <var:m> \land <var:v2> = <nat:8> \} \\ <var:v2> := <var:v2> * <var:i> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \cdot <var:m> \land <var:v2> = <nat:8> \cdot <var:m> \} \\ <var:v2> := <var:v2> * <var:i> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \cdot <var:m> \land <var:v2> = <nat:8> \cdot <var:m> ^ <nat:2> \} \\ <var:j> := <var:v2> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:v1> = <nat:5> \cdot <var:m> \land <var:j> = <nat:8> \cdot <var:m> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:v1> ; \\ \{ <var:i> = <var:m> \land <var:v0> = <nat:3> \land <var:j> = <nat:8> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> \} \\ <var:j> := <var:j> + <var:v0> \\ \{ <var:i> = <var:m> \land <var:j> = <nat:8> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:i> = <var:m> }} <var:v0> := <nat:3> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:i> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:i> ; <var:v2> := <var:v2> * <var:i> ; <var:j> := <var:v2> ; <var:j> := <var:j> + <var:v1> ; <var:j> := <var:j> + <var:v0> {{ <var:j> = <nat:8> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> * <var:m> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> * <var:m> /\ <var:v2> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:v1> = <nat:5> * <var:m> /\ <var:j> = <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:v0> = <nat:3> /\ <var:j> = <nat:8> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:j> = <nat:8> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 