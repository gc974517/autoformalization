\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:t> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:5> ; <var:V> := <var:B1> <var:V> := <var:V> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:t> = <var:N> $ before running our segment of code , it must be that $ <var:V> = <nat:5> \times <var:N> + <nat:5> $ once segment of code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be given using typical Hoare reasoning . Observing the next steps seen in the segment of code , \begin{eqnarray} \{ <var:t> = <var:N> \} \, <var:B1> := <var:t> \, \{ <var:t> = <var:N> \land <var:B1> = <var:N> \} \\ \{ <var:t> = <var:N> \land <var:B1> = <var:N> \} \, <var:B0> := <nat:5> \, \{ <var:t> = <var:N> \land <var:B1> = <var:N> \land <var:B0> = <nat:5> \} \\ \{ <var:t> = <var:N> \land <var:B1> = <var:N> \land <var:B0> = <nat:5> \} \, <var:B1> := <var:B1> * <nat:5> \, \{ <var:t> = <var:N> \land <var:B1> = <nat:5> * <var:N> \land <var:B0> = <nat:5> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:t> = <var:N> \} \, <var:B1> := <var:t> \, \{ <var:t> = <var:N> \land <var:B1> = <var:N> \} \\ \{ <var:t> = <var:N> \land <var:B1> = <var:N> \} \, <var:B0> := <nat:5> \, \{ <var:t> = <var:N> \land <var:B1> = <var:N> \land <var:B0> = <nat:5> \} \end{eqnarray} This is shown to be logically sound through the environment update rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:t> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:5> ; <var:V> := <var:B1> <var:V> := <var:V> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <def:poly> {{ <var:V> = <nat:5> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:B1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:B1> = <var:N> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:B1> = <nat:5> * <var:N> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:B0> = <nat:5> /\ <var:V> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:V> = <nat:5> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 