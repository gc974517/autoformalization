\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:T> := <var:H2> ; <var:T> := <var:T> + <var:H1> ; <var:T> := <var:T> + <var:H0> \end{verbatim} Assuming given any positive integers $ <var:g> $ it to hold that $ <var:s> = <var:g> $ prior to running the series of commands then we see $ <var:T> = <nat:6> \times <var:g> ^ <nat:2> + <nat:5> \times <var:g> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be demonstrated using usual Hoare techniques . Immediately after , we have \begin{verbatim} { <var:s> = <var:g> } <var:H0> := <nat:7> { <var:s> = <var:g> \land <var:H0> = <nat:7> } { <var:s> = <var:g> \land <var:H0> = <nat:7> } <var:H1> := <nat:5> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> } { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> } <var:H1> := <var:H1> * <var:s> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> } { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> } <var:H2> := <nat:6> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> \land <var:H2> = <nat:6> } \end{verbatim} This is rigorously given by the variable assignmet inference rule given by standard Hoare reasoning . Moving forward , \begin{verbatim} { <var:s> = <var:g> } <var:H0> := <nat:7> { <var:s> = <var:g> \land <var:H0> = <nat:7> } { <var:s> = <var:g> \land <var:H0> = <nat:7> } <var:H1> := <nat:5> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> } { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> } <var:H1> := <var:H1> * <var:s> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> } { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> } <var:H2> := <nat:6> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> \land <var:H2> = <nat:6> } { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> \land <var:H2> = <nat:6> } <var:H2> := <var:H2> * <var:s> { <var:s> = <var:g> \land <var:H0> = <nat:7> \land <var:H1> = <nat:5> \cdot <var:g> \land <var:H2> = <nat:6> \cdot <var:g> } \end{verbatim} This is guaranteed with the variable update inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:s> = <var:g> }} <var:H0> := <nat:7> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:T> := <var:H2> ; <var:T> := <var:T> + <var:H1> ; <var:T> := <var:T> + <var:H0> {{ <var:T> = <nat:6> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> * <var:g> /\ <var:H2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> * <var:g> /\ <var:H2> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> * <var:g> /\ <var:H2> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:5> * <var:g> /\ <var:T> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:H0> = <nat:7> /\ <var:T> = <nat:6> * <var:g> ^ <nat:2> + <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:T> = <nat:6> * <var:g> ^ <nat:2> + <nat:5> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 