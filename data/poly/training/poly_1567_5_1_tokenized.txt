\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:A1> := <var:c> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:2> ; <var:Y> := <var:A1> <var:Y> := <var:Y> + <var:A0> \end{verbatim} Assuming it to be that $ <var:c> = <var:q> $ , taking positive integers $ <var:q> $ , ahead of evaluating the list of commands , it must be that we see $ <var:Y> = <nat:2> \cdot <var:q> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is given through usual Hoare reasoning . Advancing , we have the variable assignmet code \verb | <var:A1> := <var:c> ; | . This code advances the condition $ \{ <var:c> = <var:q> \} $ into the postcondition $ \{ <var:c> = <var:q> \land <var:A1> = <var:q> \} $ . This is shown to be logically sound using the assignment law from typical Hoare logic . Focusing on the proceeding statement contained in the segment of code , we see the variable assignmet code \verb | <var:A0> := <nat:7> ; | . This redefines the condition $ \{ <var:c> = <var:q> \land <var:A1> = <var:q> \} $ to $ \{ <var:c> = <var:q> \land <var:A1> = <var:q> \land <var:A0> = <nat:7> \} $ . Advancing to the next step , the environment update code \verb | <var:A1> := <var:A1> * <nat:2> ; | . This transfers the precondition $ \{ <var:c> = <var:q> \land <var:A1> = <var:q> \land <var:A0> = <nat:7> \} $ as $ \{ <var:c> = <var:q> \land <var:A1> = <nat:2> \cdot <var:q> \land <var:A0> = <nat:7> \} $ . This is shown to be logically sound using the assignment rule obtained from usual Hoare logic . Jumping to the upcoming command in our code , the variable update code letting $ <var:A1$ into $ <var:Y>$ . This code redefines the precondition $ \{ <var:c> = <var:q> \land <var:A1> = <nat:2> \cdot <var:q> \land <var:A0> = <nat:7> \} $ into $ \{ <var:c> = <var:q> \land <var:A0> = <nat:7> \land <var:Y> = <nat:2> \cdot <var:q> \} $ . This is rigorously given by the assignment law from usual Hoare techniques . Keeping momentum , we have the assignment code yielding $ <var:Y> + <var:A0$ into $ <var:Y>$ . This advances the condition $ \{ <var:c> = <var:q> \land <var:A0> = <nat:7> \land <var:Y> = <nat:2> \cdot <var:q> \} $ to the condition $ \{ <var:c> = <var:q> \land <var:Y> = <nat:2> \cdot <var:q> + <nat:7> \} $ . This is known to be sound using the assignment rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:c> = <var:q> }} <var:A1> := <var:c> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:2> ; <var:Y> := <var:A1> <var:Y> := <var:Y> + <var:A0> {{ <var:Y> = <nat:2> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:A1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:A1> = <var:q> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:A1> = <nat:2> * <var:q> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:A0> = <nat:7> /\ <var:Y> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:Y> = <nat:2> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 