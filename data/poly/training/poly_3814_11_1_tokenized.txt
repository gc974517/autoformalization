\begin{document} \begin{theorem} We define the following code in \emph{Imp} : \begin{verbatim} <var:g1> := <var:B> ; <var:g2> := <var:g1> * <var:B> ; <var:g3> := <var:g2> * <var:B> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:9> ; <var:o> := <var:g3> <var:o> := <var:o> + <var:g2> <var:o> := <var:o> + <var:g1> <var:o> := <var:o> + <var:g0> \end{verbatim} Assuming that we have $ <var:B> = <var:w> $ before interpreting our code , it must be that we see $ <var:o> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:B> = <var:w> \} \\ <var:g1> := <var:B> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <var:w> \} \\ <var:g2> := <var:g1> * <var:B> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <var:w> \land <var:g2> = <var:w> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:B> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <var:w> \land <var:g2> = <var:w> ^ <nat:2> \land <var:g3> = <var:w> ^ <nat:3> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <var:w> \land <var:g2> = <var:w> ^ <nat:2> \land <var:g3> = <var:w> ^ <nat:3> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:1> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <nat:1> \cdot <var:w> \land <var:g2> = <var:w> ^ <nat:2> \land <var:g3> = <var:w> ^ <nat:3> \land <var:g0> = <nat:3> \} \\ <var:g2> := <var:g2> * <nat:9> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <nat:1> \cdot <var:w> \land <var:g2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:g3> = <var:w> ^ <nat:3> \land <var:g0> = <nat:3> \} \\ <var:g3> := <var:g3> * <nat:9> ; \\ \{ <var:B> = <var:w> \land <var:g1> = <nat:1> \cdot <var:w> \land <var:g2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:w> ^ <nat:3> \land <var:g0> = <nat:3> \} \\ <var:o> := <var:g3> \\ \{ <var:B> = <var:w> \land <var:g1> = <nat:1> \cdot <var:w> \land <var:g2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:g0> = <nat:3> \land <var:o> = <nat:9> \cdot <var:w> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:g2> \\ \{ <var:B> = <var:w> \land <var:g1> = <nat:1> \cdot <var:w> \land <var:g0> = <nat:3> \land <var:o> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:g1> \\ \{ <var:B> = <var:w> \land <var:g0> = <nat:3> \land <var:o> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> \} \\ <var:o> := <var:o> + <var:g0> \\ \{ <var:B> = <var:w> \land <var:o> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> \} \end{eqnarray} Given the above , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:B> = <var:w> }} <var:g1> := <var:B> ; <var:g2> := <var:g1> * <var:B> ; <var:g3> := <var:g2> * <var:B> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:9> ; <var:o> := <var:g3> <var:o> := <var:o> + <var:g2> <var:o> := <var:o> + <var:g1> <var:o> := <var:o> + <var:g0> {{ <var:o> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <var:w> /\ <var:g2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <var:w> /\ <var:g2> = <var:w> ^ <nat:2> /\ <var:g3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <var:w> /\ <var:g2> = <var:w> ^ <nat:2> /\ <var:g3> = <var:w> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <nat:1> * <var:w> /\ <var:g2> = <var:w> ^ <nat:2> /\ <var:g3> = <var:w> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <nat:1> * <var:w> /\ <var:g2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:g3> = <var:w> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <nat:1> * <var:w> /\ <var:g2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:w> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <nat:1> * <var:w> /\ <var:g2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:g0> = <nat:3> /\ <var:o> = <nat:9> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g1> = <nat:1> * <var:w> /\ <var:g0> = <nat:3> /\ <var:o> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:g0> = <nat:3> /\ <var:o> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 