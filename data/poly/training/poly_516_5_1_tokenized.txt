\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:9> ; <var:F> := <var:q1> <var:F> := <var:F> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allow that $ <var:M> = <var:B> $ before running the code segment , it follows that we see $ <var:F> = <nat:9> * <var:B> + <nat:3> $ after series of commands finishes . \end{theorem} \begin{proof} Using standard Hoare techniques results in : \begin{eqnarray} \{ <var:M> = <var:B> \} \\ <var:q1> := <var:M> ; \\ \{ <var:M> = <var:B> \land <var:q1> = <var:B> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:M> = <var:B> \land <var:q1> = <var:B> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:9> ; \\ \{ <var:M> = <var:B> \land <var:q1> = <nat:9> \times <var:B> \land <var:q0> = <nat:3> \} \\ <var:F> := <var:q1> \\ \{ <var:M> = <var:B> \land <var:q0> = <nat:3> \land <var:F> = <nat:9> \times <var:B> \} \\ <var:F> := <var:F> + <var:q0> \\ \{ <var:M> = <var:B> \land <var:F> = <nat:9> \times <var:B> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:9> ; <var:F> := <var:q1> <var:F> := <var:F> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <def:poly> {{ <var:F> = <nat:9> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:q1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:q1> = <var:B> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:q1> = <nat:9> * <var:B> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:q0> = <nat:3> /\ <var:F> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:F> = <nat:9> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 