\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:3> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:g> ; <var:i> := <var:K1> ; <var:i> := <var:i> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Allow taking positive coefficients $ <var:p> $ that $ <var:g> = <var:p> $ prior to evaluating the set of instructions , it must be that we have $ <var:i> = <nat:2> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:p> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:g> = <var:p> \land <var:K0> = <nat:3> \} \\ <var:K1> := <nat:2> ; \\ \{ <var:g> = <var:p> \land <var:K0> = <nat:3> \land <var:K1> = <nat:2> \} \\ <var:K1> := <var:K1> * <var:g> ; \\ \{ <var:g> = <var:p> \land <var:K0> = <nat:3> \land <var:K1> = <nat:2> \cdot <var:p> \} \\ <var:i> := <var:K1> ; \\ \{ <var:g> = <var:p> \land <var:K0> = <nat:3> \land <var:i> = <nat:2> \cdot <var:p> \} \\ <var:i> := <var:i> + <var:K0> \\ \{ <var:g> = <var:p> \land <var:i> = <nat:2> \cdot <var:p> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:3> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:g> ; <var:i> := <var:K1> ; <var:i> := <var:i> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <def:poly> {{ <var:i> = <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:K0> = <nat:3> /\ <var:i> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:i> = <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 