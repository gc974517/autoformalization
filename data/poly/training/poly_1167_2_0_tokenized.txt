\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:a0> := <nat:6> ; <var:e> := <var:a0> \end{verbatim} Allow that we have $ <var:m> = <var:k> $ prior to the execution of our set of commands then we have $ <var:e> = <nat:6> $ when set of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be done with usual Hoare techniques . Stepping through , \[ \begin{tabular} {rcl} \{ <var:m> = <var:k> \} & <var:a0> := <nat:6> & \{ <var:m> = <var:k> \land <var:a0> = <nat:6> \} \\ \{ <var:m> = <var:k> \land <var:a0> = <nat:6> \} & <var:e> := <var:a0& \{ <var:m> = <var:k> \land <var:e> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:m> = <var:k> }} <var:a0> := <nat:6> ; <var:e> := <var:a0> {{ <var:e> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:e> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 