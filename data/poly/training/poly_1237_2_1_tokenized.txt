\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:9> ; <var:f> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Given --- letting $ <var:X> $ --- it to hold that $ <var:Y> = <var:X> $ before interpreting this segment of code it holds that $ <var:f> = <nat:9> $ once code segment has exited . \end{theorem} \begin{proof} The argument for our list of instructions is demonstrated through typical Hoare techniques . Moving onward , we see \begin{eqnarray} \{ <var:Y> = <var:X> \} \, <var:x0> := <nat:9> \, \{ <var:Y> = <var:X> \land <var:x0> = <nat:9> \} \end{eqnarray} Moving on , we see \begin{eqnarray} \{ <var:Y> = <var:X> \} \, <var:x0> := <nat:9> \, \{ <var:Y> = <var:X> \land <var:x0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:f> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Y> = <var:X> }} <def:poly> {{ <var:f> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:f> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 