\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:K> ; <var:Z> := <var:b1> ; <var:Z> := <var:Z> + <var:b0> \end{verbatim} Allowing that we have $ <var:K> = <var:W> $ ( for positive integer coefficients $ <var:W> $ ) ahead of running this set of commands then $ <var:Z> = <nat:7> * <var:W> + <nat:8> $ once series of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is given with typical Hoare logic . Considering the upcoming bits of codeseen in our set of instructions , \verb | { <var:K> = <var:W> } <var:b0> := <nat:8> { <var:K> = <var:W> \land <var:b0> = <nat:8> } | , \verb | { <var:K> = <var:W> \land <var:b0> = <nat:8> } <var:b1> := <nat:7> { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:7> } | , \verb | { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:7> } <var:b1> := <var:b1> * <var:K> { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:7> * <var:W> } | , \verb | { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:b1> = <nat:7> * <var:W> } <var:Z> := <var:b1> { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:Z> = <nat:7> * <var:W> } | and \verb | { <var:K> = <var:W> \land <var:b0> = <nat:8> \land <var:Z> = <nat:7> * <var:W> } <var:Z> := <var:Z> + <var:b0{ <var:K> = <var:W> \land <var:Z> = <nat:7> * <var:W> + <nat:8> } | . This is deduced using the environment update inference rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:K> = <var:W> }} <var:b0> := <nat:8> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:K> ; <var:Z> := <var:b1> ; <var:Z> := <var:Z> + <var:b0> {{ <var:Z> = <nat:7> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:b0> = <nat:8> /\ <var:Z> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:W> /\ <var:Z> = <nat:7> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 