\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:A1> := <var:S> ; <var:A2> := <var:A1> * <var:S> ; <var:A3> := <var:A2> * <var:S> ; <var:A0> := <nat:2> ; <var:A3> := <var:A3> * <nat:1> ; <var:N> := <var:A3> <var:N> := <var:N> + <var:A0> \end{verbatim} Given ( assuming some natural coefficients $ <var:V> $ ) that $ <var:S> = <var:V> $ ahead of the evaluation of the program then we see $ <var:N> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> $ once code segment has finished executing . \end{theorem} \begin{proof} Proving correctness for our series of instructions is shown using standard Hoare techniques . Honing in on the proceeding pieces of code seen in the list of instructions , we see \verb | { <var:S> = <var:V> } <var:A1> := <var:S> { <var:S> = <var:V> \land <var:A1> = <var:V> } | , \verb | { <var:S> = <var:V> \land <var:A1> = <var:V> } <var:A2> := <var:A1> * <var:S> { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> } | , \verb | { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> } <var:A3> := <var:A2> * <var:S> { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> } | , \verb | { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> } <var:A0> := <nat:2> { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:2> } | and \verb | { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <var:V> ^ <nat:3> \land <var:A0> = <nat:2> } <var:A3> := <var:A3> * <nat:1> { <var:S> = <var:V> \land <var:A1> = <var:V> \land <var:A2> = <var:V> ^ <nat:2> \land <var:A3> = <nat:1> * <var:V> ^ <nat:3> \land <var:A0> = <nat:2> } | . This is rigorously given using the assignment law defined in typical Hoare techniques . Moving on to the subsequent line of code in our segment of code , we have \verb | { <var:S> = <var:V> } <var:A1> := <var:S> { <var:S> = <var:V> \land <var:A1> = <var:V> } | . Moving forward , we see \verb | { <var:S> = <var:V> } <var:A1> := <var:S> { <var:S> = <var:V> \land <var:A1> = <var:V> } | . This is deduced by the binding scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:S> = <var:V> }} <var:A1> := <var:S> ; <var:A2> := <var:A1> * <var:S> ; <var:A3> := <var:A2> * <var:S> ; <var:A0> := <nat:2> ; <var:A3> := <var:A3> * <nat:1> ; <var:N> := <var:A3> <var:N> := <var:N> + <var:A0> {{ <var:N> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <var:V> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A3> = <nat:1> * <var:V> ^ <nat:3> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:A1> = <var:V> /\ <var:A2> = <var:V> ^ <nat:2> /\ <var:A0> = <nat:2> /\ <var:N> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:V> /\ <var:N> = <nat:1> * <var:V> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 