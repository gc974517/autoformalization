\begin{document} \begin{theorem} Consider a program in \emph{Imp} as \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:2> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <var:r> * <var:k> ; <var:r> := <nat:2> + <var:r> * <var:k> \end{verbatim} Assuming it to hold that $ <var:k> = <var:B> $ before evaluating the code segment then $ <var:r> = <nat:2> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare techniques yields : \begin{eqnarray} \{ <var:k> = <var:B> \} \\ <var:r> := <nat:2> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \} \\ <var:r> := <nat:2> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> + <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \\ <var:r> := <nat:1> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \\ <var:r> := <nat:1> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \\ <var:r> := <nat:1> + <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:8> + <nat:2> \times <var:B> ^ <nat:7> + <nat:1> \times <var:B> ^ <nat:6> + <nat:3> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:1> \} \\ <var:r> := <var:r> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:9> + <nat:2> \times <var:B> ^ <nat:8> + <nat:1> \times <var:B> ^ <nat:7> + <nat:3> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + \} \\ <var:r> := <nat:2> + <var:r> * <var:k> \\ \{ <var:k> = <var:B> \land <var:r> = <nat:2> \times <var:B> ^ <nat:10> + <nat:2> \times <var:B> ^ <nat:9> + <nat:1> \times <var:B> ^ <nat:8> + <nat:3> \times <var:B> ^ <nat:7> + <nat:1> \times <var:B> ^ <nat:6> + <nat:3> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the above , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <var:r> := <nat:2> ; <var:r> := <nat:2> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <var:r> * <var:k> ; <var:r> := <nat:2> + <var:r> * <var:k> {{ <var:r> = <nat:2> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:2> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 