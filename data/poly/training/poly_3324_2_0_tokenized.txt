\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:2> ; <var:i> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:u> = <var:n> $ ( for any positive integer coefficients $ <var:n> $ ) ahead of executing our segment of code , it holds that $ <var:i> = <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of instructions is evident by standard Hoare logic . Advancing to the next step , we see \begin{eqnarray} \{ <var:u> = <var:n> \} \, <var:K0> := <nat:2> \, \{ <var:u> = <var:n> \land <var:K0> = <nat:2> \} \\ \{ <var:u> = <var:n> \land <var:K0> = <nat:2> \} \, <var:i> := <var:K0\, \{ <var:u> = <var:n> \land <var:i> = <nat:2> \} \end{eqnarray} This is given with the variable binding inference rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:2> ; <var:i> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:u> = <var:n> }} <def:poly> {{ <var:i> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:i> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 