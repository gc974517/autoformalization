\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:3> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:b> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:b> ; <var:r2> := <var:r2> * <var:b> ; <var:p> := <var:r2> ; <var:p> := <var:p> + <var:r1> ; <var:p> := <var:p> + <var:r0> \end{verbatim} Assume that we have $ <var:b> = <var:B> $ prior to interpreting this series of instructions , it follows that we have $ <var:p> = <nat:3> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:3> $ once segment of code has executed . \end{theorem} \begin{proof} See that the below decorated series of instructions . \begin{eqnarray} \{ <var:b> = <var:B> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \} \\ <var:r1> := <nat:5> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \} \\ <var:r1> := <var:r1> * <var:b> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \cdot <var:B> \} \\ <var:r2> := <nat:3> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \cdot <var:B> \land <var:r2> = <nat:3> \} \\ <var:r2> := <var:r2> * <var:b> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \cdot <var:B> \land <var:r2> = <nat:3> \cdot <var:B> \} \\ <var:r2> := <var:r2> * <var:b> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \cdot <var:B> \land <var:r2> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:p> := <var:r2> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:r1> = <nat:5> \cdot <var:B> \land <var:p> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:r1> ; \\ \{ <var:b> = <var:B> \land <var:r0> = <nat:3> \land <var:p> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} \\ <var:p> := <var:p> + <var:r0> \\ \{ <var:b> = <var:B> \land <var:p> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:3> \} \end{eqnarray} Continuing interpreting our code gives : \begin{eqnarray} \end{eqnarray} The application of standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:b> = <var:B> }} <var:r0> := <nat:3> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:b> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:b> ; <var:r2> := <var:r2> * <var:b> ; <var:p> := <var:r2> ; <var:p> := <var:p> + <var:r1> ; <var:p> := <var:p> + <var:r0> {{ <var:p> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> * <var:B> /\ <var:r2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> * <var:B> /\ <var:r2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> * <var:B> /\ <var:r2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:5> * <var:B> /\ <var:p> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:r0> = <nat:3> /\ <var:p> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:p> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 