\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:1> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:h> ; <var:j> := <var:L1> ; <var:j> := <var:j> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:h> = <var:F> $ ahead of running this series of instructions it must be that $ <var:j> = <nat:6> * <var:F> + <nat:1> $ once program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:F> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:h> = <var:F> \land <var:L0> = <nat:1> \} \end{eqnarray} Allowing the evaluation of this set of instructions returns : \begin{eqnarray} <var:L1> := <nat:6> ; \\ \{ <var:h> = <var:F> \land <var:L0> = <nat:1> \land <var:L1> = <nat:6> \} \\ <var:L1> := <var:L1> * <var:h> ; \\ \{ <var:h> = <var:F> \land <var:L0> = <nat:1> \land <var:L1> = <nat:6> * <var:F> \} \\ <var:j> := <var:L1> ; \\ \{ <var:h> = <var:F> \land <var:L0> = <nat:1> \land <var:j> = <nat:6> * <var:F> \} \\ <var:j> := <var:j> + <var:L0> \\ \{ <var:h> = <var:F> \land <var:j> = <nat:6> * <var:F> + <nat:1> \} \end{eqnarray} Using standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:h> ; <var:j> := <var:L1> ; <var:j> := <var:j> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <def:poly> {{ <var:j> = <nat:6> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:L0> = <nat:1> /\ <var:j> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:j> = <nat:6> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 