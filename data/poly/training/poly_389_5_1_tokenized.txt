\begin{document} \begin{theorem} Define the following series of commands : \begin{verbatim} <var:j1> := <var:R> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:7> ; <var:w> := <var:j1> <var:w> := <var:w> + <var:j0> \end{verbatim} Assume --- given any positive integers $ <var:u> $ --- it to hold that $ <var:R> = <var:u> $ before interpreting this segment of code , it must be that we see $ <var:w> = <nat:7> * <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Notice the following decorated code . \begin{eqnarray} \{ <var:R> = <var:u> \} \\ <var:j1> := <var:R> ; \\ \{ <var:R> = <var:u> \land <var:j1> = <var:u> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:R> = <var:u> \land <var:j1> = <var:u> \land <var:j0> = <nat:3> \} \\ <var:j1> := <var:j1> * <nat:7> ; \\ \{ <var:R> = <var:u> \land <var:j1> = <nat:7> \times <var:u> \land <var:j0> = <nat:3> \} \\ <var:w> := <var:j1> \\ \{ <var:R> = <var:u> \land <var:j0> = <nat:3> \land <var:w> = <nat:7> \times <var:u> \} \\ <var:w> := <var:w> + <var:j0> \\ \{ <var:R> = <var:u> \land <var:w> = <nat:7> \times <var:u> + <nat:3> \} \end{eqnarray} Applying typical Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:R> = <var:u> }} <var:j1> := <var:R> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:7> ; <var:w> := <var:j1> <var:w> := <var:w> + <var:j0> {{ <var:w> = <nat:7> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:j1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:j1> = <var:u> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:j1> = <nat:7> * <var:u> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:j0> = <nat:3> /\ <var:w> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:w> = <nat:7> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 