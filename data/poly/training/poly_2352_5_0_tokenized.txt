\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:n> ; <var:V> := <var:k1> ; <var:V> := <var:V> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Allowing ( given every positive integer coefficients $ <var:H> $ ) it to hold that $ <var:n> = <var:H> $ before running this series of commands , then we have $ <var:V> = <nat:7> * <var:H> + <nat:3> $ once list of instructions executes . \end{theorem} \begin{proof} Proving correctness for our list of commands is clear through typical Hoare logic . Next , the variable update statement yielding $ <nat:3> $ into $ <var:k0>$ . This redefines $ \{ <var:n> = <var:H> \} $ toward $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \} $ . This is guaranteed through the assignment scheme in usual Hoare reasoning . Shifting focus toward the subsequent step contained in the program , the variable update statement \verb | <var:k1> := <nat:7> ; | . This forwards the precondition $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \} $ into the postcondition $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \} $ . This is shown through the assignment law defined in Hoare reasoning . Moving on , the environment update command \verb | <var:k1> := <var:k1> * <var:n> ; | . This redefines the precondition $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \} $ as the condition $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:H> \} $ . This is ensured through the assignment inference rule from usual Hoare logic . Jumping to the proceeding step found in our series of commands , we see the binding command \verb | <var:V> := <var:k1> ; | . This line redefines $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:k1> = <nat:7> \times <var:H> \} $ into $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:V> = <nat:7> \times <var:H> \} $ . This is known to be sound using the assignment scheme given in typical Hoare techniques . Taking a look at the proceeding line seen in our series of instructions , we see the variable update code \verb | <var:V> := <var:V> + <var:k0> | . This statement takes the condition $ \{ <var:n> = <var:H> \land <var:k0> = <nat:3> \land <var:V> = <nat:7> \times <var:H> \} $ into $ \{ <var:n> = <var:H> \land <var:V> = <nat:7> \times <var:H> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:3> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:n> ; <var:V> := <var:k1> ; <var:V> := <var:V> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:n> = <var:H> }} <def:poly> {{ <var:V> = <nat:7> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:k0> = <nat:3> /\ <var:V> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:V> = <nat:7> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 