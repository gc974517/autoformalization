\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as \begin{verbatim} <var:v1> := <var:g> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:3> ; <var:G> := <var:v1> <var:G> := <var:G> + <var:v0> \end{verbatim} Allow $ <var:g> = <var:k> $ before interpreting our series of instructions , it follows that $ <var:G> = <nat:3> * <var:k> + <nat:5> $ . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:g> = <var:k> \} \\ <var:v1> := <var:g> ; \\ \{ <var:g> = <var:k> \land <var:v1> = <var:k> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:g> = <var:k> \land <var:v1> = <var:k> \land <var:v0> = <nat:5> \} \\ <var:v1> := <var:v1> * <nat:3> ; \\ \{ <var:g> = <var:k> \land <var:v1> = <nat:3> \cdot <var:k> \land <var:v0> = <nat:5> \} \\ <var:G> := <var:v1> \\ \{ <var:g> = <var:k> \land <var:v0> = <nat:5> \land <var:G> = <nat:3> \cdot <var:k> \} \\ <var:G> := <var:G> + <var:v0> \\ \{ <var:g> = <var:k> \land <var:G> = <nat:3> \cdot <var:k> + <nat:5> \} \end{eqnarray} Given the preceding argument , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:g> = <var:k> }} <var:v1> := <var:g> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:3> ; <var:G> := <var:v1> <var:G> := <var:G> + <var:v0> {{ <var:G> = <nat:3> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:v1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:v1> = <var:k> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:v1> = <nat:3> * <var:k> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:v0> = <nat:5> /\ <var:G> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:k> /\ <var:G> = <nat:3> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 