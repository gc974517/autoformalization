\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:3> ; <var:H> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:G> = <var:l> $ prior to the execution of our code it holds that we have $ <var:H> = <nat:3> $ when series of instructions terminates . \end{theorem} \begin{proof} The argument for the segment of code can be done with usual Hoare logic . Paying attention to the subsequent bit of code in our set of instructions , we have \begin{verbatim} { <var:G> = <var:l> } <var:h0> := <nat:3> { <var:G> = <var:l> \land <var:h0> = <nat:3> } \end{verbatim} This is known to be sound with the variable update law given in standard Hoare techniques . Advancing , \begin{verbatim} { <var:G> = <var:l> } <var:h0> := <nat:3> { <var:G> = <var:l> \land <var:h0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:H> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:G> = <var:l> }} <def:poly> {{ <var:H> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:l> /\ <var:H> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 