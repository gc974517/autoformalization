\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:w> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:1> ; <var:h> := <var:d1> <var:h> := <var:h> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:w> = <var:I> $ ( given all $ <var:I> \in \mathbb{Z}^+ $ ) before interpreting this program then we have $ <var:h> = <nat:1> \cdot <var:I> + <nat:2> $ after code segment finishes . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:w> = <var:I> \} \\ <var:d1> := <var:w> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <var:I> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <var:I> \land <var:d0> = <nat:2> \} \\ <var:d1> := <var:d1> * <nat:1> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <nat:1> \cdot <var:I> \land <var:d0> = <nat:2> \} \\ <var:h> := <var:d1> \\ \{ <var:w> = <var:I> \land <var:d0> = <nat:2> \land <var:h> = <nat:1> \cdot <var:I> \} \\ <var:h> := <var:h> + <var:d0> \\ \{ <var:w> = <var:I> \land <var:h> = <nat:1> \cdot <var:I> + <nat:2> \} \end{eqnarray} Thusly , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:w> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:1> ; <var:h> := <var:d1> <var:h> := <var:h> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:w> = <var:I> }} <def:poly> {{ <var:h> = <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <var:I> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <nat:1> * <var:I> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d0> = <nat:2> /\ <var:h> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:h> = <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 