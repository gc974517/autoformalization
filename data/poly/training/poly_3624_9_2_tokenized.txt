\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:4> ; <var:C> := <nat:2> + <var:C> * <var:J> ; <var:C> := <nat:3> + <var:C> * <var:J> ; <var:C> := <nat:1> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <var:C> * <var:J> ; <var:C> := <nat:1> + <var:C> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:J> = <var:w> $ ahead of the execution of this list of instructions , it holds that we have $ <var:C> = <nat:4> \times <var:w> ^ <nat:8> + <nat:2> \times <var:w> ^ <nat:7> + <nat:3> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} The flow of logic for the set of instructions is demonstrated with typical Hoare logic . Honing in on the following statement in the series of instructions , the environment update code \verb | <var:C> := <nat:4> ; | . This moves $ \{ <var:J> = <var:w> \} $ to $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \} $ . This is given by the assignment rule obtained from standard Hoare logic . Stepping forward , we see the command binding $ <nat:2> + <var:C> * <var:J> $ toward $ <var:C>$ . This statement transfers $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \} $ as $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> + <nat:2> \} $ . Stepping through , we see the assignment statement \verb | <var:C> := <nat:3> + <var:C> * <var:J> ; | . This command forwards the precondition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> + <nat:2> \} $ as $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:3> \} $ . This is known to be sound with the assignment inference rule defined by standard Hoare techniques . Moving on to the next bit of code seen in our list of instructions , the binding code \verb | <var:C> := <nat:1> + <var:C> * <var:J> ; | . This moves the precondition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:1> \} $ . This is shown by the assignment scheme found in Hoare techniques . Looking at the proceeding statement in our set of commands , the variable update statement \verb | <var:C> := <nat:4> + <var:C> * <var:J> ; | . This code moves the precondition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:1> \} $ to the condition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:4> + <nat:2> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} $ . This is deduced through the assignment law defined in usual Hoare logic . Moving on to the subsequent statement in our set of commands , the variable update line giving $ <nat:4> + <var:C> * <var:J> $ as $ <var:C>$ . This command forwards the precondition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:4> + <nat:2> \times <var:w> ^ <nat:3> + <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} $ as the condition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ . This is given with the assignment law found in standard Hoare techniques . Stepping through , we have the assignment command \verb | <var:C> := <nat:4> + <var:C> * <var:J> ; | . This command moves $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:1> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ to the condition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ . Further , the environment update statement \verb | <var:C> := <var:C> * <var:J> ; | . This command forwards $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:6> + <nat:2> \times <var:w> ^ <nat:5> + <nat:3> \times <var:w> ^ <nat:4> + <nat:1> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + <nat:4> \} $ to the condition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:3> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + \} $ . After , we have the variable update command letting $ <nat:1> + <var:C> * <var:J$ as $ <var:C>$ . This moves $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:7> + <nat:2> \times <var:w> ^ <nat:6> + <nat:3> \times <var:w> ^ <nat:5> + <nat:1> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:4> \times <var:w> + \} $ toward the condition $ \{ <var:J> = <var:w> \land <var:C> = <nat:4> \times <var:w> ^ <nat:8> + <nat:2> \times <var:w> ^ <nat:7> + <nat:3> \times <var:w> ^ <nat:6> + <nat:1> \times <var:w> ^ <nat:5> + <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:4> \times <var:w> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:4> ; <var:C> := <nat:2> + <var:C> * <var:J> ; <var:C> := <nat:3> + <var:C> * <var:J> ; <var:C> := <nat:1> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <nat:4> + <var:C> * <var:J> ; <var:C> := <var:C> * <var:J> ; <var:C> := <nat:1> + <var:C> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <def:poly> {{ <var:C> = <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:C> = <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 