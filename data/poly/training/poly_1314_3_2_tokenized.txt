\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <var:d> * <var:C> ; <var:d> := <nat:4> + <var:d> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:C> = <var:Y> $ before evaluating our set of commands it follows that we have $ <var:d> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:4> $ when list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:Y> \} \\ <var:d> := <nat:1> ; \\ \{ <var:C> = <var:Y> \land <var:d> = <nat:1> \} \\ <var:d> := <var:d> * <var:C> ; \\ \{ <var:C> = <var:Y> \land <var:d> = <nat:1> \cdot <var:Y> + \} \\ <var:d> := <nat:4> + <var:d> * <var:C> \\ \{ <var:C> = <var:Y> \land <var:d> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <var:d> * <var:C> ; <var:d> := <nat:4> + <var:d> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:C> = <var:Y> }} <def:poly> {{ <var:d> = <nat:1> * <var:Y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:d> = <nat:1> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:d> = <nat:1> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 