\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:w> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> \end{verbatim} Allowing that $ <var:w> = <var:m> $ ahead of the evaluation of this series of commands it must be that $ <var:l> = <nat:3> * <var:m> + <nat:8> $ after program terminates . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:w> = <var:m> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:w> = <var:m> \land <var:J0> = <nat:8> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:w> = <var:m> \land <var:J0> = <nat:8> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:w> ; \\ \{ <var:w> = <var:m> \land <var:J0> = <nat:8> \land <var:J1> = <nat:3> * <var:m> \} \\ <var:l> := <var:J1> ; \\ \{ <var:w> = <var:m> \land <var:J0> = <nat:8> \land <var:l> = <nat:3> * <var:m> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:w> = <var:m> \land <var:l> = <nat:3> * <var:m> + <nat:8> \} \end{eqnarray} Given the above , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:w> = <var:m> }} <var:J0> := <nat:8> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:w> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> {{ <var:l> = <nat:3> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:J0> = <nat:8> /\ <var:l> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:m> /\ <var:l> = <nat:3> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 