\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:g1> := <var:q> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:1> ; <var:s> := <var:g1> <var:s> := <var:s> + <var:g0> \end{verbatim} Allow $ <var:q> = <var:m> $ before the execution of our segment of code , it must be that $ <var:s> = <nat:1> \times <var:m> + <nat:4> $ once set of instructions terminates . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:m> \} \\ <var:g1> := <var:q> ; \\ \{ <var:q> = <var:m> \land <var:g1> = <var:m> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:q> = <var:m> \land <var:g1> = <var:m> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:1> ; \\ \{ <var:q> = <var:m> \land <var:g1> = <nat:1> * <var:m> \land <var:g0> = <nat:4> \} \\ <var:s> := <var:g1> \\ \{ <var:q> = <var:m> \land <var:g0> = <nat:4> \land <var:s> = <nat:1> * <var:m> \} \\ <var:s> := <var:s> + <var:g0> \\ \{ <var:q> = <var:m> \land <var:s> = <nat:1> * <var:m> + <nat:4> \} \end{eqnarray} Thusly , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:q> = <var:m> }} <var:g1> := <var:q> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:1> ; <var:s> := <var:g1> <var:s> := <var:s> + <var:g0> {{ <var:s> = <nat:1> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:g1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:g1> = <var:m> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:g1> = <nat:1> * <var:m> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:g0> = <nat:4> /\ <var:s> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:m> /\ <var:s> = <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 