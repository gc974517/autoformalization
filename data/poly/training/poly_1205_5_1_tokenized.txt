\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:c1> := <var:o> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:3> ; <var:q> := <var:c1> <var:q> := <var:q> + <var:c0> \end{verbatim} Assuming that $ <var:o> = <var:z> $ prior to interpreting our list of instructions , then $ <var:q> = <nat:3> * <var:z> + <nat:8> $ once code segment has executed . \end{theorem} \begin{proof} The argument for our set of commands is clear using Hoare techniques . After , we have \begin{verbatim} { <var:o> = <var:z> } <var:c1> := <var:o> { <var:o> = <var:z> \land <var:c1> = <var:z> } { <var:o> = <var:z> \land <var:c1> = <var:z> } <var:c0> := <nat:8> { <var:o> = <var:z> \land <var:c1> = <var:z> \land <var:c0> = <nat:8> } { <var:o> = <var:z> \land <var:c1> = <var:z> \land <var:c0> = <nat:8> } <var:c1> := <var:c1> * <nat:3> { <var:o> = <var:z> \land <var:c1> = <nat:3> \times <var:z> \land <var:c0> = <nat:8> } { <var:o> = <var:z> \land <var:c1> = <nat:3> \times <var:z> \land <var:c0> = <nat:8> } <var:q> := <var:c1{ <var:o> = <var:z> \land <var:c0> = <nat:8> \land <var:q> = <nat:3> \times <var:z> } { <var:o> = <var:z> \land <var:c0> = <nat:8> \land <var:q> = <nat:3> \times <var:z> } <var:q> := <var:q> + <var:c0{ <var:o> = <var:z> \land <var:q> = <nat:3> \times <var:z> + <nat:8> } \end{verbatim} This is ensured using the variable binding inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:o> = <var:z> }} <var:c1> := <var:o> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:3> ; <var:q> := <var:c1> <var:q> := <var:q> + <var:c0> {{ <var:q> = <nat:3> * <var:z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:c1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:c1> = <var:z> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:c1> = <nat:3> * <var:z> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:c0> = <nat:8> /\ <var:q> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:q> = <nat:3> * <var:z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 