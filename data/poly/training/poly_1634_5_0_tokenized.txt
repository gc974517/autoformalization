\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:6> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:K> ; <var:t> := <var:s1> ; <var:t> := <var:t> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:K> = <var:m> $ ahead of interpreting our list of commands it follows that we see $ <var:t> = <nat:5> \cdot <var:m> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is demonstrated using the below decorated segment of code . \begin{eqnarray} \{ <var:K> = <var:m> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:K> = <var:m> \land <var:s0> = <nat:6> \} \\ <var:s1> := <nat:5> ; \\ \{ <var:K> = <var:m> \land <var:s0> = <nat:6> \land <var:s1> = <nat:5> \} \\ <var:s1> := <var:s1> * <var:K> ; \\ \{ <var:K> = <var:m> \land <var:s0> = <nat:6> \land <var:s1> = <nat:5> \times <var:m> \} \\ <var:t> := <var:s1> ; \\ \{ <var:K> = <var:m> \land <var:s0> = <nat:6> \land <var:t> = <nat:5> \times <var:m> \} \\ <var:t> := <var:t> + <var:s0> \\ \{ <var:K> = <var:m> \land <var:t> = <nat:5> \times <var:m> + <nat:6> \} \end{eqnarray} Applying typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:6> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:K> ; <var:t> := <var:s1> ; <var:t> := <var:t> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:K> = <var:m> }} <def:poly> {{ <var:t> = <nat:5> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:s0> = <nat:6> /\ <var:t> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:t> = <nat:5> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 