\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:C> ; <var:y2> := <var:y1> * <var:C> ; <var:y3> := <var:y2> * <var:C> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:3> ; <var:O> := <var:y3> <var:O> := <var:O> + <var:y2> <var:O> := <var:O> + <var:y1> <var:O> := <var:O> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow $ <var:C> = <var:k> $ before running this code then we see $ <var:O> = <nat:3> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:C> = <var:k> \} \\ <var:y1> := <var:C> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <var:k> \} \\ <var:y2> := <var:y1> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y1> := <var:y1> * <nat:3> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <nat:3> \times <var:k> \land <var:y2> = <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y2> := <var:y2> * <nat:9> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <nat:3> \times <var:k> \land <var:y2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:y3> = <var:k> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:y3> := <var:y3> * <nat:3> ; \\ \{ <var:C> = <var:k> \land <var:y1> = <nat:3> \times <var:k> \land <var:y2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:y3> = <nat:3> \times <var:k> ^ <nat:3> \land <var:y0> = <nat:8> \} \\ <var:O> := <var:y3> \\ \{ <var:C> = <var:k> \land <var:y1> = <nat:3> \times <var:k> \land <var:y2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:y0> = <nat:8> \land <var:O> = <nat:3> \times <var:k> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:y2> \\ \{ <var:C> = <var:k> \land <var:y1> = <nat:3> \times <var:k> \land <var:y0> = <nat:8> \land <var:O> = <nat:3> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:y1> \\ \{ <var:C> = <var:k> \land <var:y0> = <nat:8> \land <var:O> = <nat:3> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> \} \\ <var:O> := <var:O> + <var:y0> \\ \{ <var:C> = <var:k> \land <var:O> = <nat:3> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:8> \} \end{eqnarray} As a consequence , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:C> ; <var:y2> := <var:y1> * <var:C> ; <var:y3> := <var:y2> * <var:C> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:9> ; <var:y3> := <var:y3> * <nat:3> ; <var:O> := <var:y3> <var:O> := <var:O> + <var:y2> <var:O> := <var:O> + <var:y1> <var:O> := <var:O> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:C> = <var:k> }} <def:poly> {{ <var:O> = <nat:3> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <nat:3> * <var:k> /\ <var:y2> = <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <nat:3> * <var:k> /\ <var:y2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:y3> = <var:k> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <nat:3> * <var:k> /\ <var:y2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:y3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <nat:3> * <var:k> /\ <var:y2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:y0> = <nat:8> /\ <var:O> = <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y1> = <nat:3> * <var:k> /\ <var:y0> = <nat:8> /\ <var:O> = <nat:3> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:y0> = <nat:8> /\ <var:O> = <nat:3> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:O> = <nat:3> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 