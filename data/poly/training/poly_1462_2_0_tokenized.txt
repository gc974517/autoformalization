\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:4> ; <var:t> := <var:P0> \end{verbatim} Assume that $ <var:T> = <var:J> $ before evaluating the list of commands , it holds that $ <var:t> = <nat:4> $ when list of commands executes . \end{theorem} \begin{proof} The proof of the segment of code is demonstrated by Hoare techniques . Focusing on the following lines of codefound in our series of instructions , \verb | { <var:T> = <var:J> } <var:P0> := <nat:4> { <var:T> = <var:J> \land <var:P0> = <nat:4> } | and \verb | { <var:T> = <var:J> \land <var:P0> = <nat:4> } <var:t> := <var:P0{ <var:T> = <var:J> \land <var:t> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:T> = <var:J> }} <var:P0> := <nat:4> ; <var:t> := <var:P0> {{ <var:t> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:t> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 