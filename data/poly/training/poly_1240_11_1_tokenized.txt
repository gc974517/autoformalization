\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:O1> := <var:Y> ; <var:O2> := <var:O1> * <var:Y> ; <var:O3> := <var:O2> * <var:Y> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:9> ; <var:l> := <var:O3> <var:l> := <var:l> + <var:O2> <var:l> := <var:l> + <var:O1> <var:l> := <var:l> + <var:O0> \end{verbatim} Given , given every positive numbers $ <var:H> $ , it to hold that $ <var:Y> = <var:H> $ before interpreting our list of instructions , it follows that we have $ <var:l> = <nat:9> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:5> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:O1> := <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <var:H> \} \\ <var:O2> := <var:O1> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <var:H> \land <var:O2> = <var:H> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <var:H> \land <var:O2> = <var:H> ^ <nat:2> \land <var:O3> = <var:H> ^ <nat:3> \} \\ <var:O0> := <nat:5> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <var:H> \land <var:O2> = <var:H> ^ <nat:2> \land <var:O3> = <var:H> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ <var:O1> := <var:O1> * <nat:2> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <nat:2> * <var:H> \land <var:O2> = <var:H> ^ <nat:2> \land <var:O3> = <var:H> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ <var:O2> := <var:O2> * <nat:7> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <nat:2> * <var:H> \land <var:O2> = <nat:7> * <var:H> ^ <nat:2> \land <var:O3> = <var:H> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ <var:O3> := <var:O3> * <nat:9> ; \\ \{ <var:Y> = <var:H> \land <var:O1> = <nat:2> * <var:H> \land <var:O2> = <nat:7> * <var:H> ^ <nat:2> \land <var:O3> = <nat:9> * <var:H> ^ <nat:3> \land <var:O0> = <nat:5> \} \\ <var:l> := <var:O3> \\ \{ <var:Y> = <var:H> \land <var:O1> = <nat:2> * <var:H> \land <var:O2> = <nat:7> * <var:H> ^ <nat:2> \land <var:O0> = <nat:5> \land <var:l> = <nat:9> * <var:H> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:O2> \\ \{ <var:Y> = <var:H> \land <var:O1> = <nat:2> * <var:H> \land <var:O0> = <nat:5> \land <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:O1> \\ \{ <var:Y> = <var:H> \land <var:O0> = <nat:5> \land <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> \} \\ <var:l> := <var:l> + <var:O0> \\ \{ <var:Y> = <var:H> \land <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:5> \} \end{eqnarray} As a result , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <var:O1> := <var:Y> ; <var:O2> := <var:O1> * <var:Y> ; <var:O3> := <var:O2> * <var:Y> ; <var:O0> := <nat:5> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:9> ; <var:l> := <var:O3> <var:l> := <var:l> + <var:O2> <var:l> := <var:l> + <var:O1> <var:l> := <var:l> + <var:O0> {{ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <var:H> /\ <var:O2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <var:H> /\ <var:O2> = <var:H> ^ <nat:2> /\ <var:O3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <var:H> /\ <var:O2> = <var:H> ^ <nat:2> /\ <var:O3> = <var:H> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <nat:2> * <var:H> /\ <var:O2> = <var:H> ^ <nat:2> /\ <var:O3> = <var:H> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <nat:2> * <var:H> /\ <var:O2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:O3> = <var:H> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <nat:2> * <var:H> /\ <var:O2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:O3> = <nat:9> * <var:H> ^ <nat:3> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <nat:2> * <var:H> /\ <var:O2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:O0> = <nat:5> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O1> = <nat:2> * <var:H> /\ <var:O0> = <nat:5> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:O0> = <nat:5> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:l> = <nat:9> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 