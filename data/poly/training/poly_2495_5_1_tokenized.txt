\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:Z1> := <var:R> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:5> ; <var:S> := <var:Z1> <var:S> := <var:S> + <var:Z0> \end{verbatim} Allowing --- letting positive coefficients $ <var:m> $ --- it to hold that $ <var:R> = <var:m> $ prior to evaluating the list of instructions then $ <var:S> = <nat:5> \times <var:m> + <nat:2> $ when set of instructions finishes . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:Z1> := <var:R> ; \\ \{ <var:R> = <var:m> \land <var:Z1> = <var:m> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:R> = <var:m> \land <var:Z1> = <var:m> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <nat:5> ; \\ \{ <var:R> = <var:m> \land <var:Z1> = <nat:5> * <var:m> \land <var:Z0> = <nat:2> \} \\ <var:S> := <var:Z1> \\ \{ <var:R> = <var:m> \land <var:Z0> = <nat:2> \land <var:S> = <nat:5> * <var:m> \} \\ <var:S> := <var:S> + <var:Z0> \\ \{ <var:R> = <var:m> \land <var:S> = <nat:5> * <var:m> + <nat:2> \} \end{eqnarray} Given the above , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:Z1> := <var:R> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:5> ; <var:S> := <var:Z1> <var:S> := <var:S> + <var:Z0> {{ <var:S> = <nat:5> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:Z1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:Z1> = <var:m> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:Z1> = <nat:5> * <var:m> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:Z0> = <nat:2> /\ <var:S> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:S> = <nat:5> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 