\begin{document} \begin{theorem} Take a segment of code such that \begin{verbatim} <var:y0> := <nat:1> ; <var:d> := <var:y0> \end{verbatim} Assuming it to hold that $ <var:n> = <var:l> $ prior to the evaluation of our list of commands it follows that $ <var:d> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:l> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:n> = <var:l> \land <var:y0> = <nat:1> \} \\ <var:d> := <var:y0> \\ \{ <var:n> = <var:l> \land <var:d> = <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <var:y0> := <nat:1> ; <var:d> := <var:y0> {{ <var:d> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:d> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 