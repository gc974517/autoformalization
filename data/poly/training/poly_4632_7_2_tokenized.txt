\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:4> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> \end{verbatim} Assume that we have $ <var:H> = <var:s> $ before the evaluation of this list of commands it must be that we have $ <var:T> = <nat:4> \times <var:s> ^ <nat:6> + <nat:2> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the list of instructions can be given with Hoare logic . Focusing on the next command contained in the segment of code , we see the binding statement \verb | <var:T> := <nat:4> ; | . This takes the condition $ \{ <var:H> = <var:s> \} $ as $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \} $ . This is known to be sound through the assignment law given by standard Hoare logic . Taking a look at the upcoming step seen in our segment of code , we see the binding line \verb | <var:T> := <nat:2> + <var:T> * <var:H> ; | . This forwards the condition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \} $ toward $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> + <nat:2> \} $ . Advancing to the next step , we see the environment update command \verb | <var:T> := <nat:2> + <var:T> * <var:H> ; | . This takes $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> + <nat:2> \} $ to the condition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:2> \} $ . This is ensured by the assignment inference rule from standard Hoare logic . Following , the variable assignmet command \verb | <var:T> := <nat:3> + <var:T> * <var:H> ; | . This redefines the precondition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:2> \} $ to $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> \} $ . Keeping momentum , the assignment line letting $ <var:T> * <var:H> $ as $ <var:T>$ . This code forwards $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:3> \} $ as the condition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + \} $ . This is guaranteed by the assignment rule obtained from Hoare reasoning . Immediately following , the command defining $ <nat:4> + <var:T> * <var:H> $ to $ <var:T>$ . This line moves the precondition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + \} $ into the condition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \} $ . This is rigorously given through the assignment law from typical Hoare logic . Taking another step toward the proceeding statement found in our segment of code , we have the environment update statement defining $ <nat:3> + <var:T> * <var:H$ as $ <var:T>$ . This line advances the precondition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:H> = <var:s> \land <var:T> = <nat:4> \times <var:s> ^ <nat:6> + <nat:2> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:H> = <var:s> }} <var:T> := <nat:4> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:2> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> ; <var:T> := <var:T> * <var:H> ; <var:T> := <nat:4> + <var:T> * <var:H> ; <var:T> := <nat:3> + <var:T> * <var:H> {{ <var:T> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:s> /\ <var:T> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 