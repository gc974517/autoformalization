\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:L> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:5> ; <var:a> := <var:y1> <var:a> := <var:a> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:L> = <var:B> $ prior to the execution of this code segment it follows that $ <var:a> = <nat:5> \times <var:B> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be accomplished with usual Hoare reasoning . Now , we have the variable binding statement \verb | <var:y1> := <var:L> ; | . This redefines $ \{ <var:L> = <var:B> \} $ into the condition $ \{ <var:L> = <var:B> \land <var:y1> = <var:B> \} $ . This is shown to be logically sound through the assignment inference rule defined by usual Hoare techniques . Moving forward to the proceeding statement contained in the series of instructions , the variable update command \verb | <var:y0> := <nat:4> ; | . This advances the condition $ \{ <var:L> = <var:B> \land <var:y1> = <var:B> \} $ into $ \{ <var:L> = <var:B> \land <var:y1> = <var:B> \land <var:y0> = <nat:4> \} $ . This is shown with the assignment scheme defined by usual Hoare techniques . Next , we see the variable update statement letting $ <var:y1> * <nat:5> $ to $ <var:y1>$ . This advances the precondition $ \{ <var:L> = <var:B> \land <var:y1> = <var:B> \land <var:y0> = <nat:4> \} $ to the condition $ \{ <var:L> = <var:B> \land <var:y1> = <nat:5> \times <var:B> \land <var:y0> = <nat:4> \} $ . This is sound using the assignment rule given in usual Hoare reasoning . Moving on to the following command in the list of instructions , we have the environment update command \verb | <var:a> := <var:y1> | . This redefines the precondition $ \{ <var:L> = <var:B> \land <var:y1> = <nat:5> \times <var:B> \land <var:y0> = <nat:4> \} $ into the postcondition $ \{ <var:L> = <var:B> \land <var:y0> = <nat:4> \land <var:a> = <nat:5> \times <var:B> \} $ . This is ensured with the assignment rule defined by usual Hoare reasoning . Moving forward , we see the assignment command assigning $ <var:a> + <var:y0$ as $ <var:a>$ . This transfers the precondition $ \{ <var:L> = <var:B> \land <var:y0> = <nat:4> \land <var:a> = <nat:5> \times <var:B> \} $ into $ \{ <var:L> = <var:B> \land <var:a> = <nat:5> \times <var:B> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:L> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:5> ; <var:a> := <var:y1> <var:a> := <var:a> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:L> = <var:B> }} <def:poly> {{ <var:a> = <nat:5> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:y1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:y1> = <var:B> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:y1> = <nat:5> * <var:B> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:y0> = <nat:4> /\ <var:a> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:a> = <nat:5> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 