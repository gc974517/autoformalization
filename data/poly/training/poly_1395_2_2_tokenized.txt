\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:Z> := <nat:2> ; <var:Z> := <nat:3> + <var:Z> * <var:K> \end{verbatim} Assuming --- given natural coefficients $ <var:P> $ --- that $ <var:K> = <var:P> $ before executing the set of instructions , it must be that we see $ <var:Z> = <nat:2> \cdot <var:P> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} The flow of logic for the code segment is demonstrated by typical Hoare techniques . Observing the following command found in our segment of code , we have the environment update command \verb | <var:Z> := <nat:2> ; | . This code takes the precondition $ \{ <var:K> = <var:P> \} $ as the condition $ \{ <var:K> = <var:P> \land <var:Z> = <nat:2> \} $ . Honing in on the following command in the segment of code , we have the environment update code \verb | <var:Z> := <nat:3> + <var:Z> * <var:K> | . This statement forwards $ \{ <var:K> = <var:P> \land <var:Z> = <nat:2> \} $ as the condition $ \{ <var:K> = <var:P> \land <var:Z> = <nat:2> \times <var:P> + <nat:3> \} $ . This is guaranteed by the assignment law given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:K> = <var:P> }} <var:Z> := <nat:2> ; <var:Z> := <nat:3> + <var:Z> * <var:K> {{ <var:Z> = <nat:2> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:Z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:Z> = <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 