\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:B1> := <var:q> ; <var:B2> := <var:B1> * <var:q> ; <var:B3> := <var:B2> * <var:q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:8> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:2> ; <var:o> := <var:B3> <var:o> := <var:o> + <var:B2> <var:o> := <var:o> + <var:B1> <var:o> := <var:o> + <var:B0> \end{verbatim} Assuming $ <var:q> = <var:A> $ , with some $ <var:A> \in \mathbb{N} $ , ahead of the execution of the series of commands it follows that $ <var:o> = <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the set of commands is done using the below decorated series of instructions . \begin{eqnarray} \{ <var:q> = <var:A> \} \\ <var:B1> := <var:q> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <var:A> \} \\ <var:B2> := <var:B1> * <var:q> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:q> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B1> := <var:B1> * <nat:8> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <nat:8> \cdot <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B2> := <var:B2> * <nat:2> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <nat:8> \cdot <var:A> \land <var:B2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:B3> := <var:B3> * <nat:2> ; \\ \{ <var:q> = <var:A> \land <var:B1> = <nat:8> \cdot <var:A> \land <var:B2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:B3> = <nat:2> \cdot <var:A> ^ <nat:3> \land <var:B0> = <nat:7> \} \\ <var:o> := <var:B3> \\ \{ <var:q> = <var:A> \land <var:B1> = <nat:8> \cdot <var:A> \land <var:B2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:B0> = <nat:7> \land <var:o> = <nat:2> \cdot <var:A> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:B2> \\ \{ <var:q> = <var:A> \land <var:B1> = <nat:8> \cdot <var:A> \land <var:B0> = <nat:7> \land <var:o> = <nat:2> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:B1> \\ \{ <var:q> = <var:A> \land <var:B0> = <nat:7> \land <var:o> = <nat:2> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> \} \\ <var:o> := <var:o> + <var:B0> \\ \{ <var:q> = <var:A> \land <var:o> = <nat:2> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:7> \} \end{eqnarray} The application of standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:q> = <var:A> }} <var:B1> := <var:q> ; <var:B2> := <var:B1> * <var:q> ; <var:B3> := <var:B2> * <var:q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:8> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:2> ; <var:o> := <var:B3> <var:o> := <var:o> + <var:B2> <var:o> := <var:o> + <var:B1> <var:o> := <var:o> + <var:B0> {{ <var:o> = <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <nat:8> * <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <nat:8> * <var:A> /\ <var:B2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <nat:8> * <var:A> /\ <var:B2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <nat:8> * <var:A> /\ <var:B2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:B0> = <nat:7> /\ <var:o> = <nat:2> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B1> = <nat:8> * <var:A> /\ <var:B0> = <nat:7> /\ <var:o> = <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:B0> = <nat:7> /\ <var:o> = <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:o> = <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 