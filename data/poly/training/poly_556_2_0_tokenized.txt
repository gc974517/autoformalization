\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:5> ; <var:d> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing that $ <var:F> = <var:c> $ before the execution of this list of instructions it must be that we have $ <var:d> = <nat:5> $ after set of instructions has finished . \end{theorem} \begin{proof} The argument for our code segment is clear through standard Hoare reasoning . Moving forward , we have the binding line \verb | <var:q0> := <nat:5> ; | . This statement redefines the condition $ \{ <var:F> = <var:c> \} $ into the postcondition $ \{ <var:F> = <var:c> \land <var:q0> = <nat:5> \} $ . This is rigorously given using the assignment law defined by standard Hoare reasoning . Going forward , we see the variable assignmet statement \verb | <var:d> := <var:q0> | . This command forwards $ \{ <var:F> = <var:c> \land <var:q0> = <nat:5> \} $ toward the postcondition $ \{ <var:F> = <var:c> \land <var:d> = <nat:5> \} $ . This is known to be sound with the assignment law found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:d> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:F> = <var:c> }} <def:poly> {{ <var:d> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:d> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 