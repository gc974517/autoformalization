\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:d> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:d> ; <var:W2> := <var:W2> * <var:d> ; <var:p> := <var:W2> ; <var:p> := <var:p> + <var:W1> ; <var:p> := <var:p> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume , assuming some positive integer coefficients $ <var:Y> $ , $ <var:d> = <var:Y> $ ahead of running this segment of code it follows that we see $ <var:p> = <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} Let this decorated set of commands . \begin{eqnarray} \{ <var:d> = <var:Y> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \} \\ <var:W1> := <nat:1> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \} \\ <var:W1> := <var:W1> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \cdot <var:Y> \} \\ <var:W2> := <nat:8> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \cdot <var:Y> \land <var:W2> = <nat:8> \} \\ <var:W2> := <var:W2> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \cdot <var:Y> \land <var:W2> = <nat:8> \cdot <var:Y> \} \\ <var:W2> := <var:W2> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \cdot <var:Y> \land <var:W2> = <nat:8> \cdot <var:Y> ^ <nat:2> \} \\ <var:p> := <var:W2> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:W1> = <nat:1> \cdot <var:Y> \land <var:p> = <nat:8> \cdot <var:Y> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:W1> ; \\ \{ <var:d> = <var:Y> \land <var:W0> = <nat:3> \land <var:p> = <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> \} \\ <var:p> := <var:p> + <var:W0> \\ \{ <var:d> = <var:Y> \land <var:p> = <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> \} \end{eqnarray} Using standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:3> ; <var:W1> := <nat:1> ; <var:W1> := <var:W1> * <var:d> ; <var:W2> := <nat:8> ; <var:W2> := <var:W2> * <var:d> ; <var:W2> := <var:W2> * <var:d> ; <var:p> := <var:W2> ; <var:p> := <var:p> + <var:W1> ; <var:p> := <var:p> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:d> = <var:Y> }} <def:poly> {{ <var:p> = <nat:8> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> * <var:Y> /\ <var:W2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> * <var:Y> /\ <var:W2> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> * <var:Y> /\ <var:W2> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:1> * <var:Y> /\ <var:p> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:W0> = <nat:3> /\ <var:p> = <nat:8> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:p> = <nat:8> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 