\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:C> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:C> ; <var:o2> := <var:o2> * <var:C> ; <var:O> := <var:o2> ; <var:O> := <var:O> + <var:o1> ; <var:O> := <var:O> + <var:o0> \end{verbatim} Assume $ <var:C> = <var:t> $ ahead of executing the list of commands it follows that we see $ <var:O> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be seen using usual Hoare techniques . Observing the following line in our series of commands , we have the environment update line \verb | <var:o0> := <nat:3> ; | . This takes $ \{ <var:C> = <var:t> \} $ as $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \} $ . Advancing to the next step , the variable assignmet statement binding $ <nat:1> $ to $ <var:o1>$ . This line forwards the precondition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \} $ into the postcondition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} $ . Stepping forward , we see the variable update statement \verb | <var:o1> := <var:o1> * <var:C> ; | . This line transfers $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} $ to the postcondition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \} $ . Honing in on the following step found in the set of instructions , we have the environment update line giving $ <nat:4> $ into $ <var:o2>$ . This line takes the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \} $ into the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \} $ . This is rigorously given through the assignment scheme defined by Hoare techniques . Taking another step toward the subsequent statement in the list of commands , we have the variable binding statement \verb | <var:o2> := <var:o2> * <var:C> ; | . This forwards the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \} $ as $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \cdot <var:t> \} $ . This is shown using the assignment scheme obtained from typical Hoare logic . Moving on to the next command contained in the code segment , we have the binding statement \verb | <var:o2> := <var:o2> * <var:C> ; | . This redefines the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \cdot <var:t> \} $ as the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ . Advancing to the next step , we have the variable update line \verb | <var:O> := <var:o2> ; | . This line redefines the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:o2> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:O> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule obtained from Hoare logic . Now , the binding command \verb | <var:O> := <var:O> + <var:o1> ; | . This command forwards the precondition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:t> \land <var:O> = <nat:4> \cdot <var:t> ^ <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> \} $ . Taking a look at the subsequent line of code found in our list of commands , we have the variable update line binding $ <var:O> + <var:o0$ into $ <var:O>$ . This redefines $ \{ <var:C> = <var:t> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> \} $ as the condition $ \{ <var:C> = <var:t> \land <var:O> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:C> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:C> ; <var:o2> := <var:o2> * <var:C> ; <var:O> := <var:o2> ; <var:O> := <var:O> + <var:o1> ; <var:O> := <var:O> + <var:o0> {{ <var:O> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:t> /\ <var:o2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:t> /\ <var:o2> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:t> /\ <var:o2> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:t> /\ <var:O> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:o0> = <nat:3> /\ <var:O> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:O> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 