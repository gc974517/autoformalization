\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:U> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:U> ; <var:F2> := <var:F2> * <var:U> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F1> ; <var:i> := <var:i> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:U> = <var:r> $ prior to evaluating the series of commands , then we have $ <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is shown by usual Hoare logic . Going to the next step , we have the command \verb | <var:F0> := <nat:1> ; | . This command moves $ \{ <var:U> = <var:r> \} $ toward the condition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \} $ . Observing the following step contained in the code , the binding statement \verb | <var:F1> := <nat:4> ; | . This takes $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \} $ as the postcondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \} $ . Going forward , we have the environment update code \verb | <var:F1> := <var:F1> * <var:U> ; | . This statement forwards the precondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare techniques . Considering the following command in the program , the variable assignmet line \verb | <var:F2> := <nat:1> ; | . This forwards $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \} $ to the condition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \} $ . Taking a look at the upcoming line of code seen in the list of instructions , we have the variable binding line \verb | <var:F2> := <var:F2> * <var:U> ; | . This line redefines the precondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \} $ toward the condition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \cdot <var:r> \} $ . Paying attention to the next line in the set of instructions , the variable binding code \verb | <var:F2> := <var:F2> * <var:U> ; | . This forwards $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \cdot <var:r> \} $ as the postcondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \cdot <var:r> ^ <nat:2> \} $ . This is sound using the assignment inference rule given in standard Hoare logic . Paying attention to the subsequent bit of code seen in the set of commands , the variable assignmet statement yielding $ <var:F2> $ as $ <var:i>$ . This statement forwards the precondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:F2> = <nat:1> \cdot <var:r> ^ <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> \} $ . Moving forward , the environment update statement giving $ <var:i> + <var:F1> $ as $ <var:i>$ . This statement takes the precondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:F1> = <nat:4> \cdot <var:r> \land <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} $ . Moving forward , the assignment code binding $ <var:i> + <var:F0$ into $ <var:i>$ . This transfers the condition $ \{ <var:U> = <var:r> \land <var:F0> = <nat:1> \land <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} $ as the postcondition $ \{ <var:U> = <var:r> \land <var:i> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:U> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:U> ; <var:F2> := <var:F2> * <var:U> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F1> ; <var:i> := <var:i> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <def:poly> {{ <var:i> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:r> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:r> /\ <var:F2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:r> /\ <var:F2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:4> * <var:r> /\ <var:i> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:F0> = <nat:1> /\ <var:i> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:i> = <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 