\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:3> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:I> ; <var:z> := <var:P1> ; <var:z> := <var:z> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:I> = <var:M> $ , for any positive numbers $ <var:M> $ , before evaluating our series of instructions then $ <var:z> = <nat:4> * <var:M> + <nat:3> $ . \end{theorem} \begin{proof} We can see that the below decorated set of instructions . \begin{eqnarray} \{ <var:I> = <var:M> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:I> = <var:M> \land <var:P0> = <nat:3> \} \\ <var:P1> := <nat:4> ; \\ \{ <var:I> = <var:M> \land <var:P0> = <nat:3> \land <var:P1> = <nat:4> \} \\ <var:P1> := <var:P1> * <var:I> ; \\ \{ <var:I> = <var:M> \land <var:P0> = <nat:3> \land <var:P1> = <nat:4> \cdot <var:M> \} \\ <var:z> := <var:P1> ; \\ \{ <var:I> = <var:M> \land <var:P0> = <nat:3> \land <var:z> = <nat:4> \cdot <var:M> \} \\ <var:z> := <var:z> + <var:P0> \\ \{ <var:I> = <var:M> \land <var:z> = <nat:4> \cdot <var:M> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:3> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:I> ; <var:z> := <var:P1> ; <var:z> := <var:z> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:I> = <var:M> }} <def:poly> {{ <var:z> = <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:P0> = <nat:3> /\ <var:P1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:P0> = <nat:3> /\ <var:z> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:M> /\ <var:z> = <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 