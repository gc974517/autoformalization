\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:5> ; <var:P> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Assuming that $ <var:Z> = <var:r> $ --- for any integers $ <var:r> $ --- before the evaluation of this set of commands , then $ <var:P> = <nat:5> $ once set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for the set of commands is evident with usual Hoare techniques . Now , we have \begin{verbatim} { <var:Z> = <var:r> } <var:S0> := <nat:5> { <var:Z> = <var:r> \land <var:S0> = <nat:5> } { <var:Z> = <var:r> \land <var:S0> = <nat:5> } <var:P> := <var:S0{ <var:Z> = <var:r> \land <var:P> = <nat:5> } \end{verbatim} This is given through the binding scheme obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:5> ; <var:P> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:P> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:P> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 