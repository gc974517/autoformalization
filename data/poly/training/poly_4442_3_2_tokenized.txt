\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:3> + <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:c> = <var:j> $ ahead of interpreting our series of instructions it must be that we see $ <var:i> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:1> $ once segment of code has executed . \end{theorem} \begin{proof} The argument for our series of commands is evident by usual Hoare logic . Observing the upcoming line found in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:j> \} & <var:i> := <nat:2> & \{ <var:c> = <var:j> \land <var:i> = <nat:2> \} \end{tabular} This is sound by the variable binding inference rule from usual Hoare reasoning . Honing in on the proceeding line of code contained in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:c> = <var:j> \} & <var:i> := <nat:2> & \{ <var:c> = <var:j> \land <var:i> = <nat:2> \} \end{tabular} Paying attention to the proceeding piece of code found in our series of commands , \[ \begin{tabular} {rcl} \{ <var:c> = <var:j> \} & <var:i> := <nat:2> & \{ <var:c> = <var:j> \land <var:i> = <nat:2> \} \end{tabular} This is ensured through the binding inference rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:2> ; <var:i> := <nat:3> + <var:i> * <var:c> ; <var:i> := <nat:1> + <var:i> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:c> = <var:j> }} <def:poly> {{ <var:i> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:j> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:j> /\ <var:i> = <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:j> /\ <var:i> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 