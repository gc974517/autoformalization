\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:C1> := <var:N> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:4> ; <var:W> := <var:C1> <var:W> := <var:W> + <var:C0> \end{verbatim} Allowing that $ <var:N> = <var:y> $ before the evaluation of the series of commands then $ <var:W> = <nat:4> \cdot <var:y> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:y> \} \\ <var:C1> := <var:N> ; \\ \{ <var:N> = <var:y> \land <var:C1> = <var:y> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:N> = <var:y> \land <var:C1> = <var:y> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:4> ; \\ \{ <var:N> = <var:y> \land <var:C1> = <nat:4> \times <var:y> \land <var:C0> = <nat:1> \} \\ <var:W> := <var:C1> \\ \{ <var:N> = <var:y> \land <var:C0> = <nat:1> \land <var:W> = <nat:4> \times <var:y> \} \\ <var:W> := <var:W> + <var:C0> \\ \{ <var:N> = <var:y> \land <var:W> = <nat:4> \times <var:y> + <nat:1> \} \end{eqnarray} Advancing executing our program yields : \begin{eqnarray} \end{eqnarray} Given the above , the list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:N> = <var:y> }} <var:C1> := <var:N> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:4> ; <var:W> := <var:C1> <var:W> := <var:W> + <var:C0> {{ <var:W> = <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:C1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:C1> = <var:y> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:C1> = <nat:4> * <var:y> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:C0> = <nat:1> /\ <var:W> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:W> = <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 