\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:6> ; <var:t> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:d> = <var:i> $ --- for every integers $ <var:i> $ --- ahead of running this series of instructions it must be that $ <var:t> = <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:d> = <var:i> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:d> = <var:i> \land <var:g0> = <nat:6> \} \\ <var:t> := <var:g0> \\ \{ <var:d> = <var:i> \land <var:t> = <nat:6> \} \end{eqnarray} Hence , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:t> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:d> = <var:i> }} <def:poly> {{ <var:t> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:t> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 