\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:Q> ; <var:i> := <var:A1> ; <var:i> := <var:i> + <var:A0> \end{verbatim} Assuming that $ <var:Q> = <var:v> $ , given some positive integer coefficients $ <var:v> $ , before running the series of instructions , it holds that we see $ <var:i> = <nat:1> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:Q> = <var:v> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:Q> = <var:v> \land <var:A0> = <nat:4> \} \\ <var:A1> := <nat:1> ; \\ \{ <var:Q> = <var:v> \land <var:A0> = <nat:4> \land <var:A1> = <nat:1> \} \\ <var:A1> := <var:A1> * <var:Q> ; \\ \{ <var:Q> = <var:v> \land <var:A0> = <nat:4> \land <var:A1> = <nat:1> * <var:v> \} \\ <var:i> := <var:A1> ; \\ \{ <var:Q> = <var:v> \land <var:A0> = <nat:4> \land <var:i> = <nat:1> * <var:v> \} \\ <var:i> := <var:i> + <var:A0> \\ \{ <var:Q> = <var:v> \land <var:i> = <nat:1> * <var:v> + <nat:4> \} \end{eqnarray} Thusly , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:Q> = <var:v> }} <var:A0> := <nat:4> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:Q> ; <var:i> := <var:A1> ; <var:i> := <var:i> + <var:A0> {{ <var:i> = <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:A0> = <nat:4> /\ <var:i> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:v> /\ <var:i> = <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 