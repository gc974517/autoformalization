\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:G> ; <var:k2> := <var:k1> * <var:G> ; <var:k3> := <var:k2> * <var:G> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:1> ; <var:L> := <var:k3> <var:L> := <var:L> + <var:k2> <var:L> := <var:L> + <var:k1> <var:L> := <var:L> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:G> = <var:i> $ , assuming some positive integers $ <var:i> $ , prior to executing this segment of code it holds that $ <var:L> = <nat:1> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is given by Hoare logic . Focusing on the following steps seen in our code , we see \begin{eqnarray} \{ <var:G> = <var:i> \} \, <var:k1> := <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <var:i> \} \, <var:k2> := <var:k1> * <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \} \end{eqnarray} Moving onward , we have \begin{eqnarray} \{ <var:G> = <var:i> \} \, <var:k1> := <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <var:i> \} \, <var:k2> := <var:k1> * <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \} \, <var:k0> := <nat:3> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \, <var:k1> := <var:k1> * <nat:4> \, \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \, <var:k2> := <var:k2> * <nat:4> \, \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:k3> = <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \, <var:k3> := <var:k3> * <nat:1> \, \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:k3> = <nat:1> \times <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:k3> = <nat:1> \times <var:i> ^ <nat:3> \land <var:k0> = <nat:3> \} \, <var:L> := <var:k3\, \{ <var:G> = <var:i> \land <var:k1> = <nat:4> \times <var:i> \land <var:k2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:L> = <nat:1> \times <var:i> ^ <nat:3> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:G> = <var:i> \} \, <var:k1> := <var:G> \, \{ <var:G> = <var:i> \land <var:k1> = <var:i> \} \end{eqnarray} This is ensured using the variable binding law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:G> ; <var:k2> := <var:k1> * <var:G> ; <var:k3> := <var:k2> * <var:G> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:1> ; <var:L> := <var:k3> <var:L> := <var:L> + <var:k2> <var:L> := <var:L> + <var:k1> <var:L> := <var:L> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <def:poly> {{ <var:L> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <var:i> /\ <var:k2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <var:i> /\ <var:k2> = <var:i> ^ <nat:2> /\ <var:k3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <var:i> /\ <var:k2> = <var:i> ^ <nat:2> /\ <var:k3> = <var:i> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <nat:4> * <var:i> /\ <var:k2> = <var:i> ^ <nat:2> /\ <var:k3> = <var:i> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <nat:4> * <var:i> /\ <var:k2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:k3> = <var:i> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <nat:4> * <var:i> /\ <var:k2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <nat:4> * <var:i> /\ <var:k2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:L> = <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k1> = <nat:4> * <var:i> /\ <var:k0> = <nat:3> /\ <var:L> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:k0> = <nat:3> /\ <var:L> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:L> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 