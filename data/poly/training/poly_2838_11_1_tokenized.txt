\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:m1> := <var:D> ; <var:m2> := <var:m1> * <var:D> ; <var:m3> := <var:m2> * <var:D> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:2> ; <var:K> := <var:m3> <var:K> := <var:K> + <var:m2> <var:K> := <var:K> + <var:m1> <var:K> := <var:K> + <var:m0> \end{verbatim} Allowing that we have $ <var:D> = <var:M> $ ahead of running our list of commands it follows that we see $ <var:K> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:9> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be demonstrated through typical Hoare reasoning . Moving on to the next step , the code giving $ <var:D> $ to $ <var:m1>$ . This takes the condition $ \{ <var:D> = <var:M> \} $ toward the condition $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \} $ . This is shown with the assignment inference rule defined in standard Hoare reasoning . Looking at the next line in our set of instructions , we have the binding command \verb | <var:m2> := <var:m1> * <var:D> ; | . This redefines the precondition $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \} $ into the condition $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \} $ . Further , we see the variable assignmet statement \verb | <var:m3> := <var:m2> * <var:D> ; | . This advances the precondition $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \} $ as $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \} $ . This is guaranteed with the assignment rule defined by typical Hoare techniques . Jumping to the upcoming step contained in the code segment , we see the environment update line \verb | <var:m0> := <nat:4> ; | . This code moves $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \} $ toward $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ . This is rigorously given using the assignment rule defined by Hoare techniques . Advancing on , we have the environment update line defining $ <var:m1> * <nat:7> $ to $ <var:m1>$ . This line moves the precondition $ \{ <var:D> = <var:M> \land <var:m1> = <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ as the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ . This is given by the assignment scheme obtained from Hoare logic . Honing in on the subsequent command seen in our set of commands , the binding statement letting $ <var:m2> * <nat:9> $ toward $ <var:m2>$ . This code moves the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ into the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ . This is ensured using the assignment law found in usual Hoare reasoning . Next , we see the binding command giving $ <var:m3> * <nat:2> $ into $ <var:m3>$ . This moves the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m3> = <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ as the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m3> = <nat:2> * <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ . Advancing on , we see the assignment command yielding $ <var:m3$ toward $ <var:K>$ . This statement transfers $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m3> = <nat:2> * <var:M> ^ <nat:3> \land <var:m0> = <nat:4> \} $ as the postcondition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> \} $ . This is deduced by the assignment rule of typical Hoare reasoning . Advancing to the subsequent line in our series of instructions , we have the code binding $ <var:K> + <var:m2$ into $ <var:K>$ . This line moves the precondition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m2> = <nat:9> * <var:M> ^ <nat:2> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> \} $ to $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> \} $ . This is known to be sound with the assignment rule found in typical Hoare techniques . Honing in on the next line in our code , we see the variable binding line assigning $ <var:K> + <var:m1$ as $ <var:K>$ . This moves the condition $ \{ <var:D> = <var:M> \land <var:m1> = <nat:7> * <var:M> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> \} $ toward the condition $ \{ <var:D> = <var:M> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> \} $ . Moving forward , we see the code binding $ <var:K> + <var:m0$ to $ <var:K>$ . This command advances the precondition $ \{ <var:D> = <var:M> \land <var:m0> = <nat:4> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> \} $ to $ \{ <var:D> = <var:M> \land <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <var:m1> := <var:D> ; <var:m2> := <var:m1> * <var:D> ; <var:m3> := <var:m2> * <var:D> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:7> ; <var:m2> := <var:m2> * <nat:9> ; <var:m3> := <var:m3> * <nat:2> ; <var:K> := <var:m3> <var:K> := <var:K> + <var:m2> <var:K> := <var:K> + <var:m1> <var:K> := <var:K> + <var:m0> {{ <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <var:M> /\ <var:m2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <var:M> /\ <var:m2> = <var:M> ^ <nat:2> /\ <var:m3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <var:M> /\ <var:m2> = <var:M> ^ <nat:2> /\ <var:m3> = <var:M> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <var:M> ^ <nat:2> /\ <var:m3> = <var:M> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:m3> = <var:M> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:m0> = <nat:4> /\ <var:K> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m0> = <nat:4> /\ <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:m0> = <nat:4> /\ <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:K> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 