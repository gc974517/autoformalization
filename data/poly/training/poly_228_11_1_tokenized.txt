\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:y> ; <var:H2> := <var:H1> * <var:y> ; <var:H3> := <var:H2> * <var:y> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:4> ; <var:H2> := <var:H2> * <nat:4> ; <var:H3> := <var:H3> * <nat:6> ; <var:M> := <var:H3> <var:M> := <var:M> + <var:H2> <var:M> := <var:M> + <var:H1> <var:M> := <var:M> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Allowing that we have $ <var:y> = <var:O> $ before the execution of the list of commands , it follows that we have $ <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:7> $ once set of instructions has finished . \end{theorem} \begin{proof} The proof of our segment of code can be seen by usual Hoare techniques . Keeping momentum , we have the variable assignmet code binding $ <var:y> $ toward $ <var:H1>$ . This line redefines the condition $ \{ <var:y> = <var:O> \} $ toward $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \} $ . Advancing to the next step , we see the assignment statement binding $ <var:H1> * <var:y> $ toward $ <var:H2>$ . This line redefines the precondition $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \} $ to $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \} $ . Taking a look at the upcoming bit of code contained in the code segment , we see the environment update statement \verb | <var:H3> := <var:H2> * <var:y> ; | . This redefines the condition $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \} $ into $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \} $ . This is rigorously given through the assignment scheme defined in standard Hoare techniques . Moving on to the subsequent piece of code found in our set of instructions , we see the code \verb | <var:H0> := <nat:7> ; | . This takes the condition $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \} $ to the postcondition $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ . This is sound with the assignment law defined by typical Hoare logic . Moving on to the following command seen in our set of instructions , we have the variable update code giving $ <var:H1> * <nat:4> $ toward $ <var:H1>$ . This command advances $ \{ <var:y> = <var:O> \land <var:H1> = <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ toward $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ . Moving forward to the proceeding bit of code seen in our series of instructions , the assignment statement letting $ <var:H2> * <nat:4> $ into $ <var:H2>$ . This code takes the precondition $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ as the condition $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ . Moving on to the following bit of code in our series of instructions , we see the assignment code yielding $ <var:H3> * <nat:6> $ as $ <var:H3>$ . This moves $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H3> = <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ into $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H3> = <nat:6> \times <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ . This is deduced through the assignment scheme defined in Hoare logic . Moving on to the next step , we see the variable assignmet line binding $ <var:H3$ to $ <var:M>$ . This transfers the condition $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H3> = <nat:6> \times <var:O> ^ <nat:3> \land <var:H0> = <nat:7> \} $ into $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> \} $ . Considering the subsequent statement in the series of instructions , we see the environment update statement defining $ <var:M> + <var:H2$ as $ <var:M>$ . This advances the precondition $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H2> = <nat:4> \times <var:O> ^ <nat:2> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> \} $ into $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> \} $ . Further , we see the assignment line \verb | <var:M> := <var:M> + <var:H1> | . This line forwards the precondition $ \{ <var:y> = <var:O> \land <var:H1> = <nat:4> \times <var:O> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> \} $ as $ \{ <var:y> = <var:O> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> \} $ . This is deduced with the assignment inference rule found in Hoare logic . Advancing to the following bit of code in the set of instructions , the variable binding line assigning $ <var:M> + <var:H0$ into $ <var:M>$ . This statement advances the precondition $ \{ <var:y> = <var:O> \land <var:H0> = <nat:7> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> \} $ as $ \{ <var:y> = <var:O> \land <var:M> = <nat:6> \times <var:O> ^ <nat:3> + <nat:4> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:y> ; <var:H2> := <var:H1> * <var:y> ; <var:H3> := <var:H2> * <var:y> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:4> ; <var:H2> := <var:H2> * <nat:4> ; <var:H3> := <var:H3> * <nat:6> ; <var:M> := <var:H3> <var:M> := <var:M> + <var:H2> <var:M> := <var:M> + <var:H1> <var:M> := <var:M> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:y> = <var:O> }} <def:poly> {{ <var:M> = <nat:6> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <var:O> /\ <var:H2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <var:O> /\ <var:H2> = <var:O> ^ <nat:2> /\ <var:H3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <var:O> /\ <var:H2> = <var:O> ^ <nat:2> /\ <var:H3> = <var:O> ^ <nat:3> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <nat:4> * <var:O> /\ <var:H2> = <var:O> ^ <nat:2> /\ <var:H3> = <var:O> ^ <nat:3> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <nat:4> * <var:O> /\ <var:H2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:H3> = <var:O> ^ <nat:3> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <nat:4> * <var:O> /\ <var:H2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:O> ^ <nat:3> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <nat:4> * <var:O> /\ <var:H2> = <nat:4> * <var:O> ^ <nat:2> /\ <var:H0> = <nat:7> /\ <var:M> = <nat:6> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H1> = <nat:4> * <var:O> /\ <var:H0> = <nat:7> /\ <var:M> = <nat:6> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:H0> = <nat:7> /\ <var:M> = <nat:6> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:M> = <nat:6> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 