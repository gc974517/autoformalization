\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:M> := <var:c2> ; <var:M> := <var:M> + <var:c1> ; <var:M> := <var:M> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Allowing it to be that $ <var:B> = <var:I> $ ahead of evaluating this list of commands , it follows that we have $ <var:M> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:B> = <var:I> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \} \\ <var:c1> := <nat:2> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \} \\ <var:c1> := <var:c1> * <var:B> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \times <var:I> \} \\ <var:c2> := <nat:3> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \times <var:I> \land <var:c2> = <nat:3> \} \end{eqnarray} Allowing the execution of our series of commands results in : \begin{eqnarray} <var:c2> := <var:c2> * <var:B> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \times <var:I> \land <var:c2> = <nat:3> \times <var:I> \} \\ <var:c2> := <var:c2> * <var:B> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \times <var:I> \land <var:c2> = <nat:3> \times <var:I> ^ <nat:2> \} \\ <var:M> := <var:c2> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:c1> = <nat:2> \times <var:I> \land <var:M> = <nat:3> \times <var:I> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:c1> ; \\ \{ <var:B> = <var:I> \land <var:c0> = <nat:9> \land <var:M> = <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> \} \\ <var:M> := <var:M> + <var:c0> \\ \{ <var:B> = <var:I> \land <var:M> = <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:9> \} \end{eqnarray} As a consequence , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:9> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:M> := <var:c2> ; <var:M> := <var:M> + <var:c1> ; <var:M> := <var:M> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:B> = <var:I> }} <def:poly> {{ <var:M> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:I> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:I> /\ <var:c2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:I> /\ <var:c2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:2> * <var:I> /\ <var:M> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:c0> = <nat:9> /\ <var:M> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:M> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 