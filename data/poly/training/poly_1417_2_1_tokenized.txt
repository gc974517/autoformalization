\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:1> ; <var:A> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:j> = <var:l> $ before the execution of the code segment it must be that we have $ <var:A> = <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} See that the following decorated code segment . \begin{eqnarray} \{ <var:j> = <var:l> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:j> = <var:l> \land <var:g0> = <nat:1> \} \\ <var:A> := <var:g0> \\ \{ <var:j> = <var:l> \land <var:A> = <nat:1> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:A> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:j> = <var:l> }} <def:poly> {{ <var:A> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:A> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 