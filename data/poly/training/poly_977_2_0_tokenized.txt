\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:2> ; <var:D> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Allowing that we have $ <var:C> = <var:T> $ before interpreting our program , it holds that $ <var:D> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands can be given with Hoare logic . Advancing , we have \verb | { <var:C> = <var:T> } <var:l0> := <nat:2> { <var:C> = <var:T> \land <var:l0> = <nat:2> } | . Focusing on the subsequent statement in the list of commands , \verb | { <var:C> = <var:T> } <var:l0> := <nat:2> { <var:C> = <var:T> \land <var:l0> = <nat:2> } | . This is guaranteed by the variable update inference rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:D> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <def:poly> {{ <var:D> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:D> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 