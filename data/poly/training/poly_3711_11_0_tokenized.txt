\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:7> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:F> ; <var:n2> := <var:n2> * <var:F> ; <var:n3> := <nat:4> ; <var:n3> := <var:n3> * <var:F> ; <var:n3> := <var:n3> * <var:F> ; <var:n3> := <var:n3> * <var:F> ; <var:m> := <var:n3> ; <var:m> := <var:m> + <var:n2> ; <var:m> := <var:m> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:F> = <var:W> $ before executing this segment of code , then $ <var:m> = <nat:4> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:7> $ once series of instructions finishes . \end{theorem} \begin{proof} The course of logic for the series of commands is demonstrated using standard Hoare reasoning . Looking at the upcoming pieces of code contained in our set of commands , \begin{verbatim} { <var:F> = <var:W> } <var:n0> := <nat:7> { <var:F> = <var:W> \land <var:n0> = <nat:7> } { <var:F> = <var:W> \land <var:n0> = <nat:7> } <var:n2> := <nat:4> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> } \end{verbatim} Immediately after , we see \begin{verbatim} { <var:F> = <var:W> } <var:n0> := <nat:7> { <var:F> = <var:W> \land <var:n0> = <nat:7> } { <var:F> = <var:W> \land <var:n0> = <nat:7> } <var:n2> := <nat:4> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> } <var:n2> := <var:n2> * <var:F> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> } <var:n2> := <var:n2> * <var:F> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> } <var:n3> := <nat:4> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> } <var:n3> := <var:n3> * <var:F> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> } <var:n3> := <var:n3> * <var:F> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> ^ <nat:2> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> ^ <nat:2> } <var:n3> := <var:n3> * <var:F> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> ^ <nat:3> } { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:W> ^ <nat:3> } <var:m> := <var:n3> { <var:F> = <var:W> \land <var:n0> = <nat:7> \land <var:n2> = <nat:4> \cdot <var:W> ^ <nat:2> \land <var:m> = <nat:4> \cdot <var:W> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n0> := <nat:7> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:F> ; <var:n2> := <var:n2> * <var:F> ; <var:n3> := <nat:4> ; <var:n3> := <var:n3> * <var:F> ; <var:n3> := <var:n3> * <var:F> ; <var:n3> := <var:n3> * <var:F> ; <var:m> := <var:n3> ; <var:m> := <var:m> + <var:n2> ; <var:m> := <var:m> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:F> = <var:W> }} <def:poly> {{ <var:m> = <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:n3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:n2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:m> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:n0> = <nat:7> /\ <var:m> = <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:W> /\ <var:m> = <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 