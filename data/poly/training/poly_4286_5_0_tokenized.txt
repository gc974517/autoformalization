\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:H> ; <var:q> := <var:O1> ; <var:q> := <var:q> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given positive integer coefficients $ <var:L> $ ) $ <var:H> = <var:L> $ prior to interpreting our code segment , it must be that we have $ <var:q> = <nat:8> * <var:L> + <nat:6> $ when program is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is given through Hoare techniques . Considering the following lines of codeseen in our list of instructions , we see \begin{verbatim} { <var:H> = <var:L> } <var:O0> := <nat:6> { <var:H> = <var:L> \land <var:O0> = <nat:6> } { <var:H> = <var:L> \land <var:O0> = <nat:6> } <var:O1> := <nat:8> { <var:H> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> } { <var:H> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> } <var:O1> := <var:O1> * <var:H> { <var:H> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> } \end{verbatim} This is shown to be logically sound through the inference rule of typical Hoare reasoning . Next , \begin{verbatim} { <var:H> = <var:L> } <var:O0> := <nat:6> { <var:H> = <var:L> \land <var:O0> = <nat:6> } { <var:H> = <var:L> \land <var:O0> = <nat:6> } <var:O1> := <nat:8> { <var:H> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> } \end{verbatim} This is shown to be logically sound using the binding rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:H> ; <var:q> := <var:O1> ; <var:q> := <var:q> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:H> = <var:L> }} <def:poly> {{ <var:q> = <nat:8> * <var:L> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:O0> = <nat:6> /\ <var:q> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:L> /\ <var:q> = <nat:8> * <var:L> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 