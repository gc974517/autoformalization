\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:x1> := <var:o> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:3> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> \end{verbatim} Allowing that $ <var:o> = <var:n> $ ( given integers $ <var:n> $ ) before executing our segment of code it must be that we see $ <var:D> = <nat:3> \cdot <var:n> + <nat:4> $ when segment of code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:n> \} \\ <var:x1> := <var:o> ; \\ \{ <var:o> = <var:n> \land <var:x1> = <var:n> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:o> = <var:n> \land <var:x1> = <var:n> \land <var:x0> = <nat:4> \} \\ <var:x1> := <var:x1> * <nat:3> ; \\ \{ <var:o> = <var:n> \land <var:x1> = <nat:3> \times <var:n> \land <var:x0> = <nat:4> \} \\ <var:D> := <var:x1> \\ \{ <var:o> = <var:n> \land <var:x0> = <nat:4> \land <var:D> = <nat:3> \times <var:n> \} \\ <var:D> := <var:D> + <var:x0> \\ \{ <var:o> = <var:n> \land <var:D> = <nat:3> \times <var:n> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:o> = <var:n> }} <var:x1> := <var:o> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:3> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> {{ <var:D> = <nat:3> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:x1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:x1> = <var:n> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:x1> = <nat:3> * <var:n> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:x0> = <nat:4> /\ <var:D> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:n> /\ <var:D> = <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 