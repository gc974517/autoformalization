\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:Y> ; <var:V> := <var:T1> ; <var:V> := <var:V> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow ( with some positive integers $ <var:E> $ ) that $ <var:Y> = <var:E> $ before interpreting our set of instructions it follows that we see $ <var:V> = <nat:2> \cdot <var:E> + <nat:2> $ after segment of code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:E> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:Y> = <var:E> \land <var:T0> = <nat:2> \} \\ <var:T1> := <nat:2> ; \\ \{ <var:Y> = <var:E> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \} \\ <var:T1> := <var:T1> * <var:Y> ; \\ \{ <var:Y> = <var:E> \land <var:T0> = <nat:2> \land <var:T1> = <nat:2> \cdot <var:E> \} \\ <var:V> := <var:T1> ; \\ \{ <var:Y> = <var:E> \land <var:T0> = <nat:2> \land <var:V> = <nat:2> \cdot <var:E> \} \\ <var:V> := <var:V> + <var:T0> \\ \{ <var:Y> = <var:E> \land <var:V> = <nat:2> \cdot <var:E> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:Y> ; <var:V> := <var:T1> ; <var:V> := <var:V> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <def:poly> {{ <var:V> = <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:T0> = <nat:2> /\ <var:V> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V> = <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 