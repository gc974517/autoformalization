\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:N0> := <nat:7> ; <var:G> := <var:N0> \end{verbatim} Assuming , given all integers $ <var:z> $ , that we have $ <var:B> = <var:z> $ ahead of the execution of our set of instructions , it holds that we see $ <var:G> = <nat:7> $ once list of instructions has finished . \end{theorem} \begin{proof} The proof of this set of commands is shown using Hoare techniques . Going to the next step , we have the variable update command \verb | <var:N0> := <nat:7> ; | . This takes the precondition $ \{ <var:B> = <var:z> \} $ as $ \{ <var:B> = <var:z> \land <var:N0> = <nat:7> \} $ . This is rigorously given through the assignment law given by typical Hoare techniques . Paying attention to the proceeding piece of code contained in the program , we see the variable assignmet statement defining $ <var:N0$ into $ <var:G>$ . This command moves the condition $ \{ <var:B> = <var:z> \land <var:N0> = <nat:7> \} $ as the condition $ \{ <var:B> = <var:z> \land <var:G> = <nat:7> \} $ . This is rigorously given by the assignment rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:B> = <var:z> }} <var:N0> := <nat:7> ; <var:G> := <var:N0> {{ <var:G> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:G> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 