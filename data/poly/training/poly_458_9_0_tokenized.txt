\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:S> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:S> ; <var:w2> := <var:w2> * <var:S> ; <var:b> := <var:w2> ; <var:b> := <var:b> + <var:w1> ; <var:b> := <var:b> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:S> = <var:c> $ ahead of executing this code segment , then $ <var:b> = <nat:5> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions can be seen through Hoare reasoning . Taking another step toward the proceeding lines of codefound in our set of instructions , we have \begin{eqnarray} \{ <var:S> = <var:c> \} \, <var:w0> := <nat:3> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \} \, <var:w1> := <nat:4> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \} \, <var:w1> := <var:w1> * <var:S> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \} \, <var:w2> := <nat:5> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \} \, <var:w2> := <var:w2> * <var:S> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \cdot <var:c> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \cdot <var:c> \} \, <var:w2> := <var:w2> * <var:S> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \cdot <var:c> ^ <nat:2> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:w2> = <nat:5> \cdot <var:c> ^ <nat:2> \} \, <var:b> := <var:w2> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:b> = <nat:5> \cdot <var:c> ^ <nat:2> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:w1> = <nat:4> \cdot <var:c> \land <var:b> = <nat:5> \cdot <var:c> ^ <nat:2> \} \, <var:b> := <var:b> + <var:w1> \, \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:b> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} \\ \{ <var:S> = <var:c> \land <var:w0> = <nat:3> \land <var:b> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} \, <var:b> := <var:b> + <var:w0\, \{ <var:S> = <var:c> \land <var:b> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:S> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:S> ; <var:w2> := <var:w2> * <var:S> ; <var:b> := <var:w2> ; <var:b> := <var:b> + <var:w1> ; <var:b> := <var:b> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:S> = <var:c> }} <def:poly> {{ <var:b> = <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:c> /\ <var:w2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:c> /\ <var:w2> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:c> /\ <var:w2> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:4> * <var:c> /\ <var:b> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:w0> = <nat:3> /\ <var:b> = <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:b> = <nat:5> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 