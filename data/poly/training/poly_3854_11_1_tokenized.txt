\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:s> ; <var:q2> := <var:q1> * <var:s> ; <var:q3> := <var:q2> * <var:s> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:x> := <var:q3> <var:x> := <var:x> + <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allowing it to hold that $ <var:s> = <var:i> $ ahead of executing our code segment then we have $ <var:x> = <nat:6> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> $ when set of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be done by the following decorated segment of code . \begin{eqnarray} \{ <var:s> = <var:i> \} \\ <var:q1> := <var:s> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <var:i> \} \\ <var:q2> := <var:q1> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <var:i> \land <var:q2> = <var:i> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <var:i> \land <var:q2> = <var:i> ^ <nat:2> \land <var:q3> = <var:i> ^ <nat:3> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <var:i> \land <var:q2> = <var:i> ^ <nat:2> \land <var:q3> = <var:i> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <nat:2> \times <var:i> \land <var:q2> = <var:i> ^ <nat:2> \land <var:q3> = <var:i> ^ <nat:3> \land <var:q0> = <nat:2> \} \end{eqnarray} Continuing the evaluation of our program produces : \begin{eqnarray} <var:q2> := <var:q2> * <nat:7> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <nat:2> \times <var:i> \land <var:q2> = <nat:7> \times <var:i> ^ <nat:2> \land <var:q3> = <var:i> ^ <nat:3> \land <var:q0> = <nat:2> \} \\ <var:q3> := <var:q3> * <nat:6> ; \\ \{ <var:s> = <var:i> \land <var:q1> = <nat:2> \times <var:i> \land <var:q2> = <nat:7> \times <var:i> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:i> ^ <nat:3> \land <var:q0> = <nat:2> \} \end{eqnarray} Continuing running our set of instructions results in : \begin{eqnarray} <var:x> := <var:q3> \\ \{ <var:s> = <var:i> \land <var:q1> = <nat:2> \times <var:i> \land <var:q2> = <nat:7> \times <var:i> ^ <nat:2> \land <var:q0> = <nat:2> \land <var:x> = <nat:6> \times <var:i> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:q2> \\ \{ <var:s> = <var:i> \land <var:q1> = <nat:2> \times <var:i> \land <var:q0> = <nat:2> \land <var:x> = <nat:6> \times <var:i> ^ <nat:3> + <nat:7> \times <var:i> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:q1> \\ \{ <var:s> = <var:i> \land <var:q0> = <nat:2> \land <var:x> = <nat:6> \times <var:i> ^ <nat:3> + <nat:7> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> \} \\ <var:x> := <var:x> + <var:q0> \\ \{ <var:s> = <var:i> \land <var:x> = <nat:6> \times <var:i> ^ <nat:3> + <nat:7> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:s> ; <var:q2> := <var:q1> * <var:s> ; <var:q3> := <var:q2> * <var:s> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:6> ; <var:x> := <var:q3> <var:x> := <var:x> + <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:s> = <var:i> }} <def:poly> {{ <var:x> = <nat:6> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <var:i> /\ <var:q2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <var:i> /\ <var:q2> = <var:i> ^ <nat:2> /\ <var:q3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <var:i> /\ <var:q2> = <var:i> ^ <nat:2> /\ <var:q3> = <var:i> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q2> = <var:i> ^ <nat:2> /\ <var:q3> = <var:i> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:q3> = <var:i> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:i> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:q0> = <nat:2> /\ <var:x> = <nat:6> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q1> = <nat:2> * <var:i> /\ <var:q0> = <nat:2> /\ <var:x> = <nat:6> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:q0> = <nat:2> /\ <var:x> = <nat:6> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:x> = <nat:6> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 