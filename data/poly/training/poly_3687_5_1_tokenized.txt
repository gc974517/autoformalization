\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:X> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:9> ; <var:N> := <var:R1> <var:N> := <var:N> + <var:R0> \end{verbatim} Assume it to be that $ <var:X> = <var:o> $ ahead of interpreting our list of commands , it follows that we have $ <var:N> = <nat:9> \times <var:o> + <nat:7> $ after segment of code terminates . \end{theorem} \begin{proof} The proof of the list of instructions can be accomplished using Hoare reasoning . Moving on to the next step , we see the statement \verb | <var:R1> := <var:X> ; | . This redefines the condition $ \{ <var:X> = <var:o> \} $ as the condition $ \{ <var:X> = <var:o> \land <var:R1> = <var:o> \} $ . This is shown with the assignment inference rule defined by Hoare techniques . Immediately after , we have the variable update code \verb | <var:R0> := <nat:7> ; | . This command moves the condition $ \{ <var:X> = <var:o> \land <var:R1> = <var:o> \} $ as the postcondition $ \{ <var:X> = <var:o> \land <var:R1> = <var:o> \land <var:R0> = <nat:7> \} $ . Immediately following , we see the code assigning $ <var:R1> * <nat:9> $ toward $ <var:R1>$ . This moves the condition $ \{ <var:X> = <var:o> \land <var:R1> = <var:o> \land <var:R0> = <nat:7> \} $ as the postcondition $ \{ <var:X> = <var:o> \land <var:R1> = <nat:9> \cdot <var:o> \land <var:R0> = <nat:7> \} $ . This is shown with the assignment scheme of typical Hoare reasoning . Shifting focus toward the subsequent line seen in the set of commands , the statement \verb | <var:N> := <var:R1> | . This statement redefines $ \{ <var:X> = <var:o> \land <var:R1> = <nat:9> \cdot <var:o> \land <var:R0> = <nat:7> \} $ to the postcondition $ \{ <var:X> = <var:o> \land <var:R0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:o> \} $ . This is guaranteed through the assignment law found in usual Hoare techniques . Moving forward , the assignment line \verb | <var:N> := <var:N> + <var:R0> | . This line redefines the condition $ \{ <var:X> = <var:o> \land <var:R0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:o> \} $ as the condition $ \{ <var:X> = <var:o> \land <var:N> = <nat:9> \cdot <var:o> + <nat:7> \} $ . This is given using the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <var:R1> := <var:X> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:9> ; <var:N> := <var:R1> <var:N> := <var:N> + <var:R0> {{ <var:N> = <nat:9> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:R1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:R1> = <var:o> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:R1> = <nat:9> * <var:o> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:R0> = <nat:7> /\ <var:N> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:N> = <nat:9> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 