\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:1> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:b> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> \end{verbatim} Assume that $ <var:b> = <var:U> $ before the execution of our set of instructions it follows that $ <var:t> = <nat:5> * <var:U> + <nat:1> $ when program has executed . \end{theorem} \begin{proof} The flow of logic for our code is evident using standard Hoare techniques . Paying attention to the following line of code contained in our series of instructions , the environment update code binding $ <nat:1> $ as $ <var:P0>$ . This command forwards the condition $ \{ <var:b> = <var:U> \} $ toward $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \} $ . This is rigorously given using the assignment law in typical Hoare logic . Stepping forward , we have the environment update statement giving $ <nat:5> $ as $ <var:P1>$ . This forwards $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \} $ as the postcondition $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:P1> = <nat:5> \} $ . Stepping forward , we see the variable assignmet command giving $ <var:P1> * <var:b> $ to $ <var:P1>$ . This takes $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:P1> = <nat:5> \} $ as the postcondition $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:P1> = <nat:5> \times <var:U> \} $ . This is shown through the assignment inference rule in standard Hoare logic . Focusing on the proceeding line of code contained in our list of commands , we see the variable binding line giving $ <var:P1> $ toward $ <var:t>$ . This line advances the precondition $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:P1> = <nat:5> \times <var:U> \} $ as the condition $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:t> = <nat:5> \times <var:U> \} $ . This is deduced using the assignment law defined in usual Hoare techniques . Next , we have the assignment code yielding $ <var:t> + <var:P0$ toward $ <var:t>$ . This command moves $ \{ <var:b> = <var:U> \land <var:P0> = <nat:1> \land <var:t> = <nat:5> \times <var:U> \} $ into the condition $ \{ <var:b> = <var:U> \land <var:t> = <nat:5> \times <var:U> + <nat:1> \} $ . This is ensured through the assignment inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:b> = <var:U> }} <var:P0> := <nat:1> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:b> ; <var:t> := <var:P1> ; <var:t> := <var:t> + <var:P0> {{ <var:t> = <nat:5> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:P0> = <nat:1> /\ <var:t> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:t> = <nat:5> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 