\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:z> ; <var:R2> := <var:R1> * <var:z> ; <var:R3> := <var:R2> * <var:z> ; <var:R0> := <nat:9> ; <var:R1> := <var:R1> * <nat:8> ; <var:R3> := <var:R3> * <nat:2> ; <var:O> := <var:R3> <var:O> := <var:O> + <var:R1> <var:O> := <var:O> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:z> = <var:k> $ before running the series of instructions it follows that $ <var:O> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:z> = <var:k> \} \\ <var:R1> := <var:z> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <var:k> \} \\ <var:R2> := <var:R1> * <var:z> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:z> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \} \\ <var:R0> := <nat:9> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \land <var:R0> = <nat:9> \} \\ <var:R1> := <var:R1> * <nat:8> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <nat:8> \times <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <var:k> ^ <nat:3> \land <var:R0> = <nat:9> \} \\ <var:R3> := <var:R3> * <nat:2> ; \\ \{ <var:z> = <var:k> \land <var:R1> = <nat:8> \times <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R3> = <nat:2> \times <var:k> ^ <nat:3> \land <var:R0> = <nat:9> \} \\ <var:O> := <var:R3> \\ \{ <var:z> = <var:k> \land <var:R1> = <nat:8> \times <var:k> \land <var:R2> = <var:k> ^ <nat:2> \land <var:R0> = <nat:9> \land <var:O> = <nat:2> \times <var:k> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:R1> \\ \{ <var:z> = <var:k> \land <var:R0> = <nat:9> \land <var:O> = <nat:2> \times <var:k> ^ <nat:3> + <nat:8> \times <var:k> \} \\ <var:O> := <var:O> + <var:R0> \\ \{ <var:z> = <var:k> \land <var:O> = <nat:2> \times <var:k> ^ <nat:3> + <nat:8> \times <var:k> + <nat:9> \} \end{eqnarray} Considering the preceding argument , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:z> ; <var:R2> := <var:R1> * <var:z> ; <var:R3> := <var:R2> * <var:z> ; <var:R0> := <nat:9> ; <var:R1> := <var:R1> * <nat:8> ; <var:R3> := <var:R3> * <nat:2> ; <var:O> := <var:R3> <var:O> := <var:O> + <var:R1> <var:O> := <var:O> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <def:poly> {{ <var:O> = <nat:2> * <var:k> ^ <nat:3> + <nat:8> * <var:k> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <nat:8> * <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <var:k> ^ <nat:3> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <nat:8> * <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R3> = <nat:2> * <var:k> ^ <nat:3> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R1> = <nat:8> * <var:k> /\ <var:R2> = <var:k> ^ <nat:2> /\ <var:R0> = <nat:9> /\ <var:O> = <nat:2> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:R0> = <nat:9> /\ <var:O> = <nat:2> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:O> = <nat:2> * <var:k> ^ <nat:3> + <nat:8> * <var:k> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 