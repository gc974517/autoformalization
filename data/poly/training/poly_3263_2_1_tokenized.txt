\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:1> ; <var:V> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given for any whole numbers $ <var:h> $ that $ <var:L> = <var:h> $ prior to evaluating our code it follows that we see $ <var:V> = <nat:1> $ after series of commands has finished . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:L> = <var:h> \land <var:p0> = <nat:1> \} \\ <var:V> := <var:p0> \\ \{ <var:L> = <var:h> \land <var:V> = <nat:1> \} \end{eqnarray} Applying typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:V> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 