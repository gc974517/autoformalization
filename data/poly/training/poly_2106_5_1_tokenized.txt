\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:v> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:3> ; <var:X> := <var:q1> <var:X> := <var:X> + <var:q0> \end{verbatim} Assume $ <var:v> = <var:j> $ ahead of interpreting this segment of code then we have $ <var:X> = <nat:3> \times <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:v> = <var:j> \} \\ <var:q1> := <var:v> ; \\ \{ <var:v> = <var:j> \land <var:q1> = <var:j> \} \end{eqnarray} Advancing evaluating our list of commands yields : \begin{eqnarray} <var:q0> := <nat:4> ; \\ \{ <var:v> = <var:j> \land <var:q1> = <var:j> \land <var:q0> = <nat:4> \} \\ <var:q1> := <var:q1> * <nat:3> ; \\ \{ <var:v> = <var:j> \land <var:q1> = <nat:3> \times <var:j> \land <var:q0> = <nat:4> \} \\ <var:X> := <var:q1> \\ \{ <var:v> = <var:j> \land <var:q0> = <nat:4> \land <var:X> = <nat:3> \times <var:j> \} \\ <var:X> := <var:X> + <var:q0> \\ \{ <var:v> = <var:j> \land <var:X> = <nat:3> \times <var:j> + <nat:4> \} \end{eqnarray} As a result , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <var:q1> := <var:v> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:3> ; <var:X> := <var:q1> <var:X> := <var:X> + <var:q0> {{ <var:X> = <nat:3> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:q1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:q1> = <var:j> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:q1> = <nat:3> * <var:j> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:q0> = <nat:4> /\ <var:X> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:X> = <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 