\begin{document} \begin{theorem} Consider the following code in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:3> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:p> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:p> ; <var:C2> := <var:C2> * <var:p> ; <var:d> := <var:C2> ; <var:d> := <var:d> + <var:C1> ; <var:d> := <var:d> + <var:C0> \end{verbatim} Assume that $ <var:p> = <var:f> $ ahead of interpreting our code segment , it must be that $ <var:d> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment is given through usual Hoare techniques . Moving onward , we have the environment update code \verb | <var:C0> := <nat:3> ; | . This command redefines the precondition $ \{ <var:p> = <var:f> \} $ toward the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \} $ . Looking at the proceeding command found in our series of commands , we have the assignment line defining $ <nat:1> $ to $ <var:C1>$ . This line forwards the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \} $ . This is ensured by the assignment rule of usual Hoare reasoning . Honing in on the upcoming line of code in the set of commands , we see the assignment code letting $ <var:C1> * <var:p> $ toward $ <var:C1>$ . This statement redefines the precondition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \} $ into the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \} $ . This is known to be sound with the assignment inference rule given by usual Hoare techniques . Advancing to the next step , we have the variable update command giving $ <nat:3> $ to $ <var:C2>$ . This statement moves the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \} $ toward $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \} $ . Jumping to the following command contained in the list of commands , the variable update command giving $ <var:C2> * <var:p> $ to $ <var:C2>$ . This forwards the precondition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \} $ to $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \times <var:f> \} $ . Looking at the proceeding bit of code contained in our program , we have the variable assignmet line \verb | <var:C2> := <var:C2> * <var:p> ; | . This advances the precondition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \times <var:f> \} $ toward the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \times <var:f> ^ <nat:2> \} $ . This is guaranteed with the assignment rule defined in usual Hoare reasoning . Immediately after , we have the variable binding line yielding $ <var:C2> $ into $ <var:d>$ . This advances the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:C2> = <nat:3> \times <var:f> ^ <nat:2> \} $ into the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:d> = <nat:3> \times <var:f> ^ <nat:2> \} $ . This is rigorously given through the assignment inference rule defined by typical Hoare reasoning . After , we see the variable binding line binding $ <var:d> + <var:C1> $ into $ <var:d>$ . This moves $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:C1> = <nat:1> \times <var:f> \land <var:d> = <nat:3> \times <var:f> ^ <nat:2> \} $ as the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:d> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> \} $ . Jumping to the upcoming line of code found in the segment of code , the environment update statement yielding $ <var:d> + <var:C0$ toward $ <var:d>$ . This statement transfers the condition $ \{ <var:p> = <var:f> \land <var:C0> = <nat:3> \land <var:d> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> \} $ to $ \{ <var:p> = <var:f> \land <var:d> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:3> \} $ . This is deduced with the assignment law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:C0> := <nat:3> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:p> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:p> ; <var:C2> := <var:C2> * <var:p> ; <var:d> := <var:C2> ; <var:d> := <var:d> + <var:C1> ; <var:d> := <var:d> + <var:C0> {{ <var:d> = <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:f> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:f> /\ <var:C2> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:f> /\ <var:C2> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:1> * <var:f> /\ <var:d> = <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:C0> = <nat:3> /\ <var:d> = <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:d> = <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 