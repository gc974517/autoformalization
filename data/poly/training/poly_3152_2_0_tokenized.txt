\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:7> ; <var:V> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Given --- given all positive integer coefficients $ <var:U> $ --- that we have $ <var:Y> = <var:U> $ ahead of the evaluation of our set of commands it must be that we have $ <var:V> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is evident using Hoare logic . Moving on to the next step , \begin{eqnarray} \{ <var:Y> = <var:U> \} \, <var:E0> := <nat:7> \, \{ <var:Y> = <var:U> \land <var:E0> = <nat:7> \} \end{eqnarray} Moving forward to the following command found in our code segment , we have \begin{eqnarray} \{ <var:Y> = <var:U> \} \, <var:E0> := <nat:7> \, \{ <var:Y> = <var:U> \land <var:E0> = <nat:7> \} \end{eqnarray} This is shown through the variable binding rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:7> ; <var:V> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Y> = <var:U> }} <def:poly> {{ <var:V> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:V> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 