\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:e1> := <var:q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:9> ; <var:T> := <var:e1> <var:T> := <var:T> + <var:e0> \end{verbatim} Assuming given any whole numbers $ <var:M> $ it to be that $ <var:q> = <var:M> $ ahead of evaluating our code then we see $ <var:T> = <nat:9> * <var:M> + <nat:3> $ after segment of code has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands is demonstrated with Hoare reasoning . Going to the next step , the variable update line \verb | <var:e1> := <var:q> ; | . This line moves $ \{ <var:q> = <var:M> \} $ to $ \{ <var:q> = <var:M> \land <var:e1> = <var:M> \} $ . Observing the next line of code seen in the code , we see the variable update line \verb | <var:e0> := <nat:3> ; | . This statement transfers $ \{ <var:q> = <var:M> \land <var:e1> = <var:M> \} $ into $ \{ <var:q> = <var:M> \land <var:e1> = <var:M> \land <var:e0> = <nat:3> \} $ . This is known to be sound using the assignment law defined by typical Hoare logic . Advancing to the next step , the command assigning $ <var:e1> * <nat:9> $ toward $ <var:e1>$ . This takes the condition $ \{ <var:q> = <var:M> \land <var:e1> = <var:M> \land <var:e0> = <nat:3> \} $ to the condition $ \{ <var:q> = <var:M> \land <var:e1> = <nat:9> * <var:M> \land <var:e0> = <nat:3> \} $ . After , we have the variable binding line \verb | <var:T> := <var:e1> | . This takes the precondition $ \{ <var:q> = <var:M> \land <var:e1> = <nat:9> * <var:M> \land <var:e0> = <nat:3> \} $ into the condition $ \{ <var:q> = <var:M> \land <var:e0> = <nat:3> \land <var:T> = <nat:9> * <var:M> \} $ . Advancing , the variable assignmet statement binding $ <var:T> + <var:e0$ toward $ <var:T>$ . This command transfers $ \{ <var:q> = <var:M> \land <var:e0> = <nat:3> \land <var:T> = <nat:9> * <var:M> \} $ toward $ \{ <var:q> = <var:M> \land <var:T> = <nat:9> * <var:M> + <nat:3> \} $ . This is rigorously given using the assignment law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:q> = <var:M> }} <var:e1> := <var:q> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:9> ; <var:T> := <var:e1> <var:T> := <var:T> + <var:e0> {{ <var:T> = <nat:9> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:e1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:e1> = <var:M> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:e1> = <nat:9> * <var:M> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:e0> = <nat:3> /\ <var:T> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:M> /\ <var:T> = <nat:9> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 