\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:7> ; <var:l> := <var:P0> \end{verbatim} Assume --- taking $ <var:t> \in \mathbb{Z}^+ $ --- it to hold that $ <var:r> = <var:t> $ before running this set of commands it must be that we see $ <var:l> = <nat:7> $ . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:r> = <var:t> \} \\ <var:P0> := <nat:7> ; \\ \{ <var:r> = <var:t> \land <var:P0> = <nat:7> \} \\ <var:l> := <var:P0> \\ \{ <var:r> = <var:t> \land <var:l> = <nat:7> \} \end{eqnarray} The application of typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:P0> := <nat:7> ; <var:l> := <var:P0> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 