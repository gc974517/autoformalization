\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:5> ; <var:E> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:y> = <var:T> $ ahead of running our series of instructions , it must be that $ <var:E> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:T> \} \\ <var:b0> := <nat:5> ; \\ \{ <var:y> = <var:T> \land <var:b0> = <nat:5> \} \\ <var:E> := <var:b0> \\ \{ <var:y> = <var:T> \land <var:E> = <nat:5> \} \end{eqnarray} The application of standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:5> ; <var:E> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <def:poly> {{ <var:E> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:E> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 