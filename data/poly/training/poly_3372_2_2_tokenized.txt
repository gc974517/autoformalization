\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:3> + <var:B> * <var:V> \end{verbatim} Allow --- letting positive integer coefficients $ <var:C> $ --- that $ <var:V> = <var:C> $ prior to the execution of this segment of code it must be that we see $ <var:B> = <nat:2> \cdot <var:C> + <nat:3> $ after series of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is evident using usual Hoare techniques . Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:C> \} & <var:B> := <nat:2> & \{ <var:V> = <var:C> \land <var:B> = <nat:2> \} \\ \{ <var:V> = <var:C> \land <var:B> = <nat:2> \} & <var:B> := <nat:3> + <var:B> * <var:V& \{ <var:V> = <var:C> \land <var:B> = <nat:2> * <var:C> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <var:B> := <nat:2> ; <var:B> := <nat:3> + <var:B> * <var:V> {{ <var:B> = <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:B> = <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 