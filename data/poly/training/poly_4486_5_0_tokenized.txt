\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:2> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:z> ; <var:w> := <var:d1> ; <var:w> := <var:w> + <var:d0> \end{verbatim} Allow that we have $ <var:z> = <var:I> $ before executing the program , it must be that $ <var:w> = <nat:6> * <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is done by typical Hoare logic . Honing in on the proceeding line of code contained in our program , we see the command \verb | <var:d0> := <nat:2> ; | . This line forwards the condition $ \{ <var:z> = <var:I> \} $ into the postcondition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \} $ . Advancing to the subsequent bit of code contained in the series of commands , the binding statement \verb | <var:d1> := <nat:6> ; | . This transfers the precondition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \} $ into the condition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:d1> = <nat:6> \} $ . Immediately following , the variable assignmet command \verb | <var:d1> := <var:d1> * <var:z> ; | . This transfers the precondition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:d1> = <nat:6> \} $ toward the postcondition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:d1> = <nat:6> \cdot <var:I> \} $ . This is rigorously given by the assignment scheme defined by typical Hoare reasoning . Jumping to the subsequent line of code seen in our series of commands , we have the environment update code defining $ <var:d1> $ as $ <var:w>$ . This takes the condition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:d1> = <nat:6> \cdot <var:I> \} $ to the condition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:w> = <nat:6> \cdot <var:I> \} $ . This is given through the assignment law of typical Hoare techniques . Moving on , we see the environment update command \verb | <var:w> := <var:w> + <var:d0> | . This statement advances the precondition $ \{ <var:z> = <var:I> \land <var:d0> = <nat:2> \land <var:w> = <nat:6> \cdot <var:I> \} $ as the condition $ \{ <var:z> = <var:I> \land <var:w> = <nat:6> \cdot <var:I> + <nat:2> \} $ . This is shown to be logically sound using the assignment law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:z> = <var:I> }} <var:d0> := <nat:2> ; <var:d1> := <nat:6> ; <var:d1> := <var:d1> * <var:z> ; <var:w> := <var:d1> ; <var:w> := <var:w> + <var:d0> {{ <var:w> = <nat:6> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:d0> = <nat:2> /\ <var:w> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:w> = <nat:6> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 