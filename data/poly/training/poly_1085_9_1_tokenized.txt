\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:W1> := <var:o> ; <var:W2> := <var:W1> * <var:o> ; <var:W3> := <var:W2> * <var:o> ; <var:W0> := <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:7> ; <var:K> := <var:W3> <var:K> := <var:K> + <var:W2> <var:K> := <var:K> + <var:W0> \end{verbatim} Assuming it to be that $ <var:o> = <var:f> $ prior to the execution of our series of instructions , it holds that we see $ <var:K> = <nat:7> \cdot <var:f> ^ <nat:3> + <nat:5> \cdot <var:f> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:f> \} \\ <var:W1> := <var:o> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \} \\ <var:W2> := <var:W1> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \land <var:W0> = <nat:9> \} \\ <var:W2> := <var:W2> * <nat:5> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <nat:5> \cdot <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \land <var:W0> = <nat:9> \} \\ <var:W3> := <var:W3> * <nat:7> ; \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <nat:5> \cdot <var:f> ^ <nat:2> \land <var:W3> = <nat:7> \cdot <var:f> ^ <nat:3> \land <var:W0> = <nat:9> \} \\ <var:K> := <var:W3> \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <nat:5> \cdot <var:f> ^ <nat:2> \land <var:W0> = <nat:9> \land <var:K> = <nat:7> \cdot <var:f> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:W2> \\ \{ <var:o> = <var:f> \land <var:W1> = <var:f> \land <var:W0> = <nat:9> \land <var:K> = <nat:7> \cdot <var:f> ^ <nat:3> + <nat:5> \cdot <var:f> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:W0> \\ \{ <var:o> = <var:f> \land <var:K> = <nat:7> \cdot <var:f> ^ <nat:3> + <nat:5> \cdot <var:f> ^ <nat:2> + <nat:9> \} \end{eqnarray} Using standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:o> = <var:f> }} <var:W1> := <var:o> ; <var:W2> := <var:W1> * <var:o> ; <var:W3> := <var:W2> * <var:o> ; <var:W0> := <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:7> ; <var:K> := <var:W3> <var:K> := <var:K> + <var:W2> <var:K> := <var:K> + <var:W0> {{ <var:K> = <nat:7> * <var:f> ^ <nat:3> + <nat:5> * <var:f> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <nat:5> * <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <nat:5> * <var:f> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:f> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <nat:5> * <var:f> ^ <nat:2> /\ <var:W0> = <nat:9> /\ <var:K> = <nat:7> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:W1> = <var:f> /\ <var:W0> = <nat:9> /\ <var:K> = <nat:7> * <var:f> ^ <nat:3> + <nat:5> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:K> = <nat:7> * <var:f> ^ <nat:3> + <nat:5> * <var:f> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 