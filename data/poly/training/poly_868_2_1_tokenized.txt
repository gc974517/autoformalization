\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:1> ; <var:b> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Given it to be that $ <var:j> = <var:Y> $ before running our segment of code it must be that we see $ <var:b> = <nat:1> $ after set of commands is done . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:j> = <var:Y> \} \\ <var:c0> := <nat:1> ; \\ \{ <var:j> = <var:Y> \land <var:c0> = <nat:1> \} \\ <var:b> := <var:c0> \\ \{ <var:j> = <var:Y> \land <var:b> = <nat:1> \} \end{eqnarray} Given the above , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:1> ; <var:b> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:j> = <var:Y> }} <def:poly> {{ <var:b> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:b> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 