\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:E0> := <nat:1> ; <var:U> := <var:E0> \end{verbatim} Assuming ( with some $ <var:w> \in \mathbb{N} $ ) that we have $ <var:o> = <var:w> $ prior to the execution of this program it follows that we have $ <var:U> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:o> = <var:w> \land <var:E0> = <nat:1> \} \\ <var:U> := <var:E0> \\ \{ <var:o> = <var:w> \land <var:U> = <nat:1> \} \end{eqnarray} Using usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <var:E0> := <nat:1> ; <var:U> := <var:E0> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 