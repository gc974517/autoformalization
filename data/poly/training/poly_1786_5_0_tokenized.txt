\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:B> ; <var:j> := <var:P1> ; <var:j> := <var:j> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Given $ <var:B> = <var:A> $ --- for positive integers $ <var:A> $ --- prior to interpreting this program , it must be that $ <var:j> = <nat:1> * <var:A> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:B> = <var:A> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:B> = <var:A> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:1> ; \\ \{ <var:B> = <var:A> \land <var:P0> = <nat:2> \land <var:P1> = <nat:1> \} \\ <var:P1> := <var:P1> * <var:B> ; \\ \{ <var:B> = <var:A> \land <var:P0> = <nat:2> \land <var:P1> = <nat:1> \times <var:A> \} \\ <var:j> := <var:P1> ; \\ \{ <var:B> = <var:A> \land <var:P0> = <nat:2> \land <var:j> = <nat:1> \times <var:A> \} \\ <var:j> := <var:j> + <var:P0> \\ \{ <var:B> = <var:A> \land <var:j> = <nat:1> \times <var:A> + <nat:2> \} \end{eqnarray} Thus , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:B> ; <var:j> := <var:P1> ; <var:j> := <var:j> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:B> = <var:A> }} <def:poly> {{ <var:j> = <nat:1> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:P0> = <nat:2> /\ <var:j> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:j> = <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 