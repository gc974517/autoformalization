\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:4> + <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:4> + <var:V> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Assuming , taking natural coefficients $ <var:q> $ , it to hold that $ <var:U> = <var:q> $ prior to executing our series of instructions it holds that we have $ <var:V> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> $ when segment of code is done executing . \end{theorem} \begin{proof} The argument for this program is demonstrated through typical Hoare logic . Paying attention to the proceeding step found in the set of instructions , we have the binding statement yielding $ <nat:4> $ to $ <var:V>$ . This moves the condition $ \{ <var:U> = <var:q> \} $ into $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \} $ . Advancing to the proceeding piece of code contained in the list of commands , we see the variable assignmet statement \verb | <var:V> := <nat:4> + <var:V> * <var:U> ; | . This takes $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \} $ to the condition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> + <nat:4> \} $ . Following , the assignment code defining $ <nat:2> + <var:V> * <var:U> $ toward $ <var:V>$ . This command takes $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> + <nat:4> \} $ toward the postcondition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> \} $ . This is rigorously given using the assignment scheme from usual Hoare logic . Going forward , the environment update statement yielding $ <nat:3> + <var:V> * <var:U> $ as $ <var:V>$ . This statement moves $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> \} $ into $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:3> \} $ . Jumping to the upcoming line of code in the series of instructions , the environment update code letting $ <nat:3> + <var:V> * <var:U> $ to $ <var:V>$ . This code redefines the condition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:3> \} $ into the postcondition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:3> \} $ . This is shown to be logically sound through the assignment scheme found in typical Hoare reasoning . Going forward , the environment update line defining $ <nat:1> + <var:V> * <var:U> $ as $ <var:V>$ . This command advances $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:3> \} $ as the condition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:5> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:1> \} $ . Focusing on the following bit of code seen in the series of instructions , we have the variable update statement \verb | <var:V> := <nat:4> + <var:V> * <var:U> | . This code redefines $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:5> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:1> \} $ into the condition $ \{ <var:U> = <var:q> \land <var:V> = <nat:4> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:5> + <nat:2> \cdot <var:q> ^ <nat:4> + <nat:3> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:4> \} $ . This is rigorously given through the assignment inference rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:4> + <var:V> * <var:U> ; <var:V> := <nat:2> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:3> + <var:V> * <var:U> ; <var:V> := <nat:1> + <var:V> * <var:U> ; <var:V> := <nat:4> + <var:V> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:U> = <var:q> }} <def:poly> {{ <var:V> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:V> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 