\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:q1> := <var:g> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:G> := <var:q1> <var:G> := <var:G> + <var:q0> \end{verbatim} Given it to be that $ <var:g> = <var:E> $ prior to interpreting this set of instructions , it holds that we see $ <var:G> = <nat:4> \times <var:E> + <nat:2> $ when set of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is clear by this decorated list of commands . \begin{eqnarray} \{ <var:g> = <var:E> \} \\ <var:q1> := <var:g> ; \\ \{ <var:g> = <var:E> \land <var:q1> = <var:E> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:g> = <var:E> \land <var:q1> = <var:E> \land <var:q0> = <nat:2> \} \\ <var:q1> := <var:q1> * <nat:4> ; \\ \{ <var:g> = <var:E> \land <var:q1> = <nat:4> \times <var:E> \land <var:q0> = <nat:2> \} \\ <var:G> := <var:q1> \\ \{ <var:g> = <var:E> \land <var:q0> = <nat:2> \land <var:G> = <nat:4> \times <var:E> \} \\ <var:G> := <var:G> + <var:q0> \\ \{ <var:g> = <var:E> \land <var:G> = <nat:4> \times <var:E> + <nat:2> \} \end{eqnarray} Continuing running our code segment gives : \begin{eqnarray} \end{eqnarray} The application of Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:g> = <var:E> }} <var:q1> := <var:g> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:G> := <var:q1> <var:G> := <var:G> + <var:q0> {{ <var:G> = <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:q1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:q1> = <var:E> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:q1> = <nat:4> * <var:E> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:q0> = <nat:2> /\ <var:G> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:E> /\ <var:G> = <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 