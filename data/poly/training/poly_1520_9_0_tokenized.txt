\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:7> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:R> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:R> ; <var:E2> := <var:E2> * <var:R> ; <var:g> := <var:E2> ; <var:g> := <var:g> + <var:E1> ; <var:g> := <var:g> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assuming that $ <var:R> = <var:v> $ ahead of interpreting the code segment it follows that $ <var:g> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:7> \cdot <var:v> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the program is shown with standard Hoare reasoning . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:v> \} & <var:E0> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} \end{tabular} This is shown to be logically sound through the environment update scheme of typical Hoare techniques . Taking a look at the following pieces of code found in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:v> \} & <var:E0> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} \\ \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} & <var:E1> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \} \\ \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \} & <var:E1> := <var:E1> * <var:R> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \times <var:v> \} \end{tabular} Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:v> \} & <var:E0> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} \end{tabular} This is shown by the variable assignmet rule defined by typical Hoare reasoning . Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:v> \} & <var:E0> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} \\ \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \} & <var:E1> := <nat:7> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \} \\ \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \} & <var:E1> := <var:E1> * <var:R> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \times <var:v> \} \\ \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \times <var:v> \} & <var:E2> := <nat:1> & \{ <var:R> = <var:v> \land <var:E0> = <nat:7> \land <var:E1> = <nat:7> \times <var:v> \land <var:E2> = <nat:1> \} \end{tabular} This is guaranteed through the variable binding scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:7> ; <var:E1> := <nat:7> ; <var:E1> := <var:E1> * <var:R> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:R> ; <var:E2> := <var:E2> * <var:R> ; <var:g> := <var:E2> ; <var:g> := <var:g> + <var:E1> ; <var:g> := <var:g> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:R> = <var:v> }} <def:poly> {{ <var:g> = <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> * <var:v> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> * <var:v> /\ <var:E2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:7> * <var:v> /\ <var:g> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:E0> = <nat:7> /\ <var:g> = <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g> = <nat:1> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 