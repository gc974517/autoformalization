\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:Q> ; <var:A2> := <var:A1> * <var:Q> ; <var:A3> := <var:A2> * <var:Q> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:3> ; <var:o> := <var:A3> <var:o> := <var:o> + <var:A2> <var:o> := <var:o> + <var:A1> <var:o> := <var:o> + <var:A0> \end{verbatim} Allowing it to be that $ <var:Q> = <var:b> $ , given all whole numbers $ <var:b> $ , prior to interpreting the program , it holds that we see $ <var:o> = <nat:3> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:6> $ when list of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be shown using typical Hoare techniques . Advancing on , the variable assignmet line \verb | <var:A1> := <var:Q> ; | . This takes the precondition $ \{ <var:Q> = <var:b> \} $ into $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare logic . Now , the binding command letting $ <var:A1> * <var:Q> $ to $ <var:A2>$ . This code takes the condition $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \} $ as $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \} $ . After , we see the assignment command letting $ <var:A2> * <var:Q> $ to $ <var:A3>$ . This takes $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \} $ to $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \} $ . Advancing on , the variable assignmet command \verb | <var:A0> := <nat:6> ; | . This forwards the precondition $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \} $ to the condition $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . Looking at the following command in the list of commands , the assignment statement \verb | <var:A1> := <var:A1> * <nat:2> ; | . This line forwards $ \{ <var:Q> = <var:b> \land <var:A1> = <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ to $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is known to be sound through the assignment law from Hoare reasoning . Looking at the following statement contained in our code segment , we see the environment update line \verb | <var:A2> := <var:A2> * <nat:9> ; | . This command forwards the condition $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ into $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . This is sound by the assignment inference rule given in typical Hoare reasoning . Observing the upcoming bit of code seen in the set of instructions , we have the variable update line \verb | <var:A3> := <var:A3> * <nat:3> ; | . This line takes the condition $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A3> = <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ to the postcondition $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ . Moving forward to the next step , we have the variable update code \verb | <var:o> := <var:A3> | . This line forwards $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:b> ^ <nat:3> \land <var:A0> = <nat:6> \} $ toward $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> \} $ . Considering the subsequent line found in the series of commands , we have the binding line \verb | <var:o> := <var:o> + <var:A2> | . This transfers the condition $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A2> = <nat:9> \cdot <var:b> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> \} $ into the postcondition $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> ^ <nat:2> \} $ . This is sound using the assignment rule found in standard Hoare logic . Moving on , the variable assignmet line giving $ <var:o> + <var:A1$ into $ <var:o>$ . This redefines $ \{ <var:Q> = <var:b> \land <var:A1> = <nat:2> \cdot <var:b> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> ^ <nat:2> \} $ toward $ \{ <var:Q> = <var:b> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} $ . Focusing on the subsequent command seen in the series of commands , the environment update code defining $ <var:o> + <var:A0$ as $ <var:o>$ . This code redefines the precondition $ \{ <var:Q> = <var:b> \land <var:A0> = <nat:6> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} $ toward the postcondition $ \{ <var:Q> = <var:b> \land <var:o> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Q> = <var:b> }} <var:A1> := <var:Q> ; <var:A2> := <var:A1> * <var:Q> ; <var:A3> := <var:A2> * <var:Q> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:2> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:3> ; <var:o> := <var:A3> <var:o> := <var:o> + <var:A2> <var:o> := <var:o> + <var:A1> <var:o> := <var:o> + <var:A0> {{ <var:o> = <nat:3> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <nat:2> * <var:b> /\ <var:A2> = <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <nat:2> * <var:b> /\ <var:A2> = <nat:9> * <var:b> ^ <nat:2> /\ <var:A3> = <var:b> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <nat:2> * <var:b> /\ <var:A2> = <nat:9> * <var:b> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <nat:2> * <var:b> /\ <var:A2> = <nat:9> * <var:b> ^ <nat:2> /\ <var:A0> = <nat:6> /\ <var:o> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A1> = <nat:2> * <var:b> /\ <var:A0> = <nat:6> /\ <var:o> = <nat:3> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:A0> = <nat:6> /\ <var:o> = <nat:3> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:o> = <nat:3> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 