\begin{document} \begin{theorem} Define the following set of commands such that \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:O> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:O> ; <var:j2> := <var:j2> * <var:O> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> \end{verbatim} Allow that we have $ <var:O> = <var:V> $ prior to the evaluation of the series of instructions , then we see $ <var:N> = <nat:9> \times <var:V> ^ <nat:2> + <nat:7> \times <var:V> + <nat:6> $ when code segment executes . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is accomplished by the below decorated code segment . \begin{eqnarray} \{ <var:O> = <var:V> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \} \\ <var:j1> := <nat:7> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> \} \\ <var:j1> := <var:j1> * <var:O> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> * <var:V> \} \\ <var:j2> := <nat:9> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> * <var:V> \land <var:j2> = <nat:9> \} \\ <var:j2> := <var:j2> * <var:O> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> * <var:V> \land <var:j2> = <nat:9> * <var:V> \} \\ <var:j2> := <var:j2> * <var:O> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> * <var:V> \land <var:j2> = <nat:9> * <var:V> ^ <nat:2> \} \\ <var:N> := <var:j2> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:j1> = <nat:7> * <var:V> \land <var:N> = <nat:9> * <var:V> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:j1> ; \\ \{ <var:O> = <var:V> \land <var:j0> = <nat:6> \land <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> * <var:V> \} \\ <var:N> := <var:N> + <var:j0> \\ \{ <var:O> = <var:V> \land <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:6> \} \end{eqnarray} Applying Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:O> = <var:V> }} <var:j0> := <nat:6> ; <var:j1> := <nat:7> ; <var:j1> := <var:j1> * <var:O> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:O> ; <var:j2> := <var:j2> * <var:O> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> {{ <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> * <var:V> /\ <var:j2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> * <var:V> /\ <var:j2> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> * <var:V> /\ <var:j2> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:7> * <var:V> /\ <var:N> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:j0> = <nat:6> /\ <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:N> = <nat:9> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 