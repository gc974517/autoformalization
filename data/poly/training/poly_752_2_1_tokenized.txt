\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:7> ; <var:o> := <var:H0> \end{verbatim} Allowing that $ <var:T> = <var:X> $ before executing our code it follows that we have $ <var:o> = <nat:7> $ once series of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for our program is demonstrated by typical Hoare techniques . Focusing on the subsequent statement found in our series of instructions , we have the variable binding command \verb | <var:H0> := <nat:7> ; | . This code redefines the precondition $ \{ <var:T> = <var:X> \} $ toward the condition $ \{ <var:T> = <var:X> \land <var:H0> = <nat:7> \} $ . This is ensured with the assignment law defined by typical Hoare logic . Further , the code defining $ <var:H0$ as $ <var:o>$ . This command transfers the condition $ \{ <var:T> = <var:X> \land <var:H0> = <nat:7> \} $ toward $ \{ <var:T> = <var:X> \land <var:o> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <var:H0> := <nat:7> ; <var:o> := <var:H0> {{ <var:o> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:o> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 