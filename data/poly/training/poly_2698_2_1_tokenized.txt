\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:2> ; <var:N> := <var:r0> \end{verbatim} Allow $ <var:o> = <var:k> $ ahead of executing this series of instructions , it must be that we have $ <var:N> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is done through Hoare techniques . Moving on to the subsequent piece of code seen in the list of commands , we have \begin{eqnarray} \{ <var:o> = <var:k> \} \, <var:r0> := <nat:2> \, \{ <var:o> = <var:k> \land <var:r0> = <nat:2> \} \end{eqnarray} Advancing to the subsequent step found in the code , we see \begin{eqnarray} \{ <var:o> = <var:k> \} \, <var:r0> := <nat:2> \, \{ <var:o> = <var:k> \land <var:r0> = <nat:2> \} \end{eqnarray} This is guaranteed using the environment update inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:o> = <var:k> }} <var:r0> := <nat:2> ; <var:N> := <var:r0> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:k> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 