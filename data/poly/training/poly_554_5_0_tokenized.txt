\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:P> ; <var:k> := <var:a1> ; <var:k> := <var:k> + <var:a0> \end{verbatim} Allow it to hold that $ <var:P> = <var:V> $ ( given $ <var:V> \in \mathbb{N} $ ) ahead of the evaluation of the series of instructions it follows that we see $ <var:k> = <nat:3> \cdot <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:P> = <var:V> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:P> = <var:V> \land <var:a0> = <nat:3> \} \\ <var:a1> := <nat:3> ; \\ \{ <var:P> = <var:V> \land <var:a0> = <nat:3> \land <var:a1> = <nat:3> \} \\ <var:a1> := <var:a1> * <var:P> ; \\ \{ <var:P> = <var:V> \land <var:a0> = <nat:3> \land <var:a1> = <nat:3> * <var:V> \} \\ <var:k> := <var:a1> ; \\ \{ <var:P> = <var:V> \land <var:a0> = <nat:3> \land <var:k> = <nat:3> * <var:V> \} \\ <var:k> := <var:k> + <var:a0> \\ \{ <var:P> = <var:V> \land <var:k> = <nat:3> * <var:V> + <nat:3> \} \end{eqnarray} Given the above , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:P> = <var:V> }} <var:a0> := <nat:3> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:P> ; <var:k> := <var:a1> ; <var:k> := <var:k> + <var:a0> {{ <var:k> = <nat:3> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:a0> = <nat:3> /\ <var:k> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:V> /\ <var:k> = <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 