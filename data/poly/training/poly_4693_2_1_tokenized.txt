\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:5> ; <var:j> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:G> = <var:W> $ letting integers $ <var:W> $ prior to the execution of our list of instructions , it holds that we have $ <var:j> = <nat:5> $ when code segment is done . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is done using usual Hoare logic . Stepping through , we have the variable assignmet code \verb | <var:Y0> := <nat:5> ; | . This statement forwards $ \{ <var:G> = <var:W> \} $ toward the condition $ \{ <var:G> = <var:W> \land <var:Y0> = <nat:5> \} $ . This is given with the assignment rule from typical Hoare techniques . Moving on to the next step , the variable assignmet line \verb | <var:j> := <var:Y0> | . This transfers the precondition $ \{ <var:G> = <var:W> \land <var:Y0> = <nat:5> \} $ as the postcondition $ \{ <var:G> = <var:W> \land <var:j> = <nat:5> \} $ . This is sound with the assignment scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:5> ; <var:j> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:G> = <var:W> }} <def:poly> {{ <var:j> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:W> /\ <var:j> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 