\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:8> ; <var:Z> := <var:o0> \end{verbatim} Given it to hold that $ <var:H> = <var:U> $ before evaluating this segment of code then we have $ <var:Z> = <nat:8> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is evident through Hoare logic . Moving forward to the following statement in our segment of code , we see the variable update code letting $ <nat:8> $ as $ <var:o0>$ . This statement advances $ \{ <var:H> = <var:U> \} $ as $ \{ <var:H> = <var:U> \land <var:o0> = <nat:8> \} $ . This is known to be sound with the assignment inference rule in standard Hoare techniques . Stepping through , we have the variable assignmet statement letting $ <var:o0$ into $ <var:Z>$ . This statement advances $ \{ <var:H> = <var:U> \land <var:o0> = <nat:8> \} $ to the postcondition $ \{ <var:H> = <var:U> \land <var:Z> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:H> = <var:U> }} <var:o0> := <nat:8> ; <var:Z> := <var:o0> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 