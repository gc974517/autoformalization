\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:V> ; <var:M> := <var:b1> ; <var:M> := <var:M> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:V> = <var:A> $ prior to the execution of this list of instructions it holds that $ <var:M> = <nat:7> * <var:A> + <nat:4> $ once segment of code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is shown with Hoare reasoning . Stepping through , \[ \begin{tabular} {rcl} \{ <var:V> = <var:A> \} & <var:b0> := <nat:4> & \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:A> \} & <var:b0> := <nat:4> & \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \} \\ \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \} & <var:b1> := <nat:7> & \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:7> \} \\ \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:7> \} & <var:b1> := <var:b1> * <var:V> & \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:7> * <var:A> \} \\ \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \land <var:b1> = <nat:7> * <var:A> \} & <var:M> := <var:b1> & \{ <var:V> = <var:A> \land <var:b0> = <nat:4> \land <var:M> = <nat:7> * <var:A> \} \end{tabular} This is known to be sound using the variable update scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:b1> := <nat:7> ; <var:b1> := <var:b1> * <var:V> ; <var:M> := <var:b1> ; <var:M> := <var:M> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:V> = <var:A> }} <def:poly> {{ <var:M> = <nat:7> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:b0> = <nat:4> /\ <var:M> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:M> = <nat:7> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 