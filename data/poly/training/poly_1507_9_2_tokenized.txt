\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:2> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Assuming , for positive numbers $ <var:T> $ , it to hold that $ <var:L> = <var:T> $ before executing our code segment , then we see $ <var:u> = <nat:1> \times <var:T> ^ <nat:8> + <nat:4> \times <var:T> ^ <nat:7> + <nat:3> \times <var:T> ^ <nat:6> + <nat:3> \times <var:T> ^ <nat:5> + <nat:4> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:2> + <nat:1> \times <var:T> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:T> \} \\ <var:u> := <nat:1> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> \} \\ <var:u> := <nat:3> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> \} \\ <var:u> := <nat:4> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> \} \\ <var:u> := <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + \} \\ <var:u> := <nat:2> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:L> \\ \{ <var:L> = <var:T> \land <var:u> = <nat:1> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:2> + <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:3> + <var:u> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:L> = <var:T> }} <def:poly> {{ <var:u> = <nat:1> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:T> /\ <var:u> = <nat:1> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 