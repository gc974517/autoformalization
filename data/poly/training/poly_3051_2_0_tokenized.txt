\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:2> ; <var:O> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:D> = <var:d> $ prior to interpreting the set of commands , then $ <var:O> = <nat:2> $ . \end{theorem} \begin{proof} The proof of our list of commands is given by usual Hoare reasoning . Advancing to the subsequent step found in the series of instructions , we see \begin{eqnarray} \{ <var:D> = <var:d> \} \, <var:N0> := <nat:2> \, \{ <var:D> = <var:d> \land <var:N0> = <nat:2> \} \end{eqnarray} Taking another step toward the proceeding step seen in our program , we see \begin{eqnarray} \{ <var:D> = <var:d> \} \, <var:N0> := <nat:2> \, \{ <var:D> = <var:d> \land <var:N0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:2> ; <var:O> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:D> = <var:d> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 