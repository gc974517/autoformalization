\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:Z> ; <var:K2> := <var:K1> * <var:Z> ; <var:K3> := <var:K2> * <var:Z> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:6> ; <var:Q> := <var:K3> <var:Q> := <var:Q> + <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:Z> = <var:x> $ taking positive numbers $ <var:x> $ before the evaluation of our code it follows that $ <var:Q> = <nat:6> \times <var:x> ^ <nat:3> + <nat:8> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> $ after segment of code terminates . \end{theorem} \begin{proof} Notice the below decorated series of commands . \begin{eqnarray} \{ <var:Z> = <var:x> \} \\ <var:K1> := <var:Z> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <var:x> \} \\ <var:K2> := <var:K1> * <var:Z> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <var:x> \land <var:K2> = <var:x> ^ <nat:2> \} \end{eqnarray} Advancing executing the series of instructions results in : \begin{eqnarray} <var:K3> := <var:K2> * <var:Z> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <var:x> \land <var:K2> = <var:x> ^ <nat:2> \land <var:K3> = <var:x> ^ <nat:3> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <var:x> \land <var:K2> = <var:x> ^ <nat:2> \land <var:K3> = <var:x> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:5> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <nat:5> \cdot <var:x> \land <var:K2> = <var:x> ^ <nat:2> \land <var:K3> = <var:x> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ <var:K2> := <var:K2> * <nat:8> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <nat:5> \cdot <var:x> \land <var:K2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:K3> = <var:x> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ <var:K3> := <var:K3> * <nat:6> ; \\ \{ <var:Z> = <var:x> \land <var:K1> = <nat:5> \cdot <var:x> \land <var:K2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:K3> = <nat:6> \cdot <var:x> ^ <nat:3> \land <var:K0> = <nat:7> \} \\ <var:Q> := <var:K3> \\ \{ <var:Z> = <var:x> \land <var:K1> = <nat:5> \cdot <var:x> \land <var:K2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:Q> = <nat:6> \cdot <var:x> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:K2> \\ \{ <var:Z> = <var:x> \land <var:K1> = <nat:5> \cdot <var:x> \land <var:K0> = <nat:7> \land <var:Q> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:8> \cdot <var:x> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:K1> \\ \{ <var:Z> = <var:x> \land <var:K0> = <nat:7> \land <var:Q> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> \} \\ <var:Q> := <var:Q> + <var:K0> \\ \{ <var:Z> = <var:x> \land <var:Q> = <nat:6> \cdot <var:x> ^ <nat:3> + <nat:8> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:7> \} \end{eqnarray} The application of standard Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:Z> ; <var:K2> := <var:K1> * <var:Z> ; <var:K3> := <var:K2> * <var:Z> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:6> ; <var:Q> := <var:K3> <var:Q> := <var:Q> + <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Z> = <var:x> }} <def:poly> {{ <var:Q> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <var:x> /\ <var:K2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <var:x> /\ <var:K2> = <var:x> ^ <nat:2> /\ <var:K3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <var:x> /\ <var:K2> = <var:x> ^ <nat:2> /\ <var:K3> = <var:x> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <nat:5> * <var:x> /\ <var:K2> = <var:x> ^ <nat:2> /\ <var:K3> = <var:x> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <nat:5> * <var:x> /\ <var:K2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:K3> = <var:x> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <nat:5> * <var:x> /\ <var:K2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:K3> = <nat:6> * <var:x> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <nat:5> * <var:x> /\ <var:K2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:K0> = <nat:7> /\ <var:Q> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K1> = <nat:5> * <var:x> /\ <var:K0> = <nat:7> /\ <var:Q> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:K0> = <nat:7> /\ <var:Q> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:Q> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 