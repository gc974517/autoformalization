\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:1> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:H> ; <var:w> := <var:C1> ; <var:w> := <var:w> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Allow --- given $ <var:r> \in \mathbb{Z}^+ $ --- that $ <var:H> = <var:r> $ before the evaluation of this set of commands then we see $ <var:w> = <nat:3> * <var:r> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:r> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:H> = <var:r> \land <var:C0> = <nat:1> \} \\ <var:C1> := <nat:3> ; \\ \{ <var:H> = <var:r> \land <var:C0> = <nat:1> \land <var:C1> = <nat:3> \} \\ <var:C1> := <var:C1> * <var:H> ; \\ \{ <var:H> = <var:r> \land <var:C0> = <nat:1> \land <var:C1> = <nat:3> \times <var:r> \} \\ <var:w> := <var:C1> ; \\ \{ <var:H> = <var:r> \land <var:C0> = <nat:1> \land <var:w> = <nat:3> \times <var:r> \} \\ <var:w> := <var:w> + <var:C0> \\ \{ <var:H> = <var:r> \land <var:w> = <nat:3> \times <var:r> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:H> ; <var:w> := <var:C1> ; <var:w> := <var:w> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:H> = <var:r> }} <def:poly> {{ <var:w> = <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:C0> = <nat:1> /\ <var:w> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:w> = <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 