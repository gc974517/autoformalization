\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:H0> := <nat:6> ; <var:X> := <var:H0> \end{verbatim} Assume --- assuming some positive numbers $ <var:i> $ --- it to be that $ <var:y> = <var:i> $ ahead of executing the code , it follows that we see $ <var:X> = <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the list of commands can be accomplished with usual Hoare reasoning . Focusing on the next bit of code in our series of instructions , we see \begin{verbatim} { <var:y> = <var:i> } <var:H0> := <nat:6> { <var:y> = <var:i> \land <var:H0> = <nat:6> } \end{verbatim} Moving forward to the next line of code in our program , we have \begin{verbatim} { <var:y> = <var:i> } <var:H0> := <nat:6> { <var:y> = <var:i> \land <var:H0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <var:H0> := <nat:6> ; <var:X> := <var:H0> {{ <var:X> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:X> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 