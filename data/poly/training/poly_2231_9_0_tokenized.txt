\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:L0> := <nat:6> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:v> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:v> ; <var:L2> := <var:L2> * <var:v> ; <var:H> := <var:L2> ; <var:H> := <var:H> + <var:L1> ; <var:H> := <var:H> + <var:L0> \end{verbatim} Assume that $ <var:v> = <var:e> $ , with some $ <var:e> $ , before evaluating the program , it must be that $ <var:H> = <nat:3> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:6> $ when list of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be seen through Hoare logic . Taking another step toward the proceeding command seen in our set of commands , \begin{eqnarray} \{ <var:v> = <var:e> \} \, <var:L0> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \end{eqnarray} This is rigorously given by the environment update inference rule in usual Hoare logic . Moving on to the next bit of code seen in our list of commands , we have \begin{eqnarray} \{ <var:v> = <var:e> \} \, <var:L0> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet rule obtained from typical Hoare techniques . Moving onward , we see \begin{eqnarray} \{ <var:v> = <var:e> \} \, <var:L0> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \\ \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \, <var:L1> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \} \\ \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \} \, <var:L1> := <var:L1> * <var:v> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \cdot <var:e> \} \\ \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \cdot <var:e> \} \, <var:L2> := <nat:3> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \cdot <var:e> \land <var:L2> = <nat:3> \} \end{eqnarray} This is shown to be logically sound using the variable assignmet rule given in Hoare techniques . Immediately after , \begin{eqnarray} \{ <var:v> = <var:e> \} \, <var:L0> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \end{eqnarray} This is given through the variable assignmet law found in Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:v> = <var:e> \} \, <var:L0> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \\ \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \} \, <var:L1> := <nat:6> \, \{ <var:v> = <var:e> \land <var:L0> = <nat:6> \land <var:L1> = <nat:6> \} \end{eqnarray} This is shown to be logically sound using the variable update law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <var:L0> := <nat:6> ; <var:L1> := <nat:6> ; <var:L1> := <var:L1> * <var:v> ; <var:L2> := <nat:3> ; <var:L2> := <var:L2> * <var:v> ; <var:L2> := <var:L2> * <var:v> ; <var:H> := <var:L2> ; <var:H> := <var:H> + <var:L1> ; <var:H> := <var:H> + <var:L0> {{ <var:H> = <nat:3> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> * <var:e> /\ <var:L2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> * <var:e> /\ <var:L2> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> * <var:e> /\ <var:L2> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:6> * <var:e> /\ <var:H> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:L0> = <nat:6> /\ <var:H> = <nat:3> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:H> = <nat:3> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 