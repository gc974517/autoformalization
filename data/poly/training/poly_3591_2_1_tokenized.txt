\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:2> ; <var:L> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:i> = <var:E> $ prior to the evaluation of our code , it must be that $ <var:L> = <nat:2> $ once program is done . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be accomplished with standard Hoare logic . Following , we have \verb | { <var:i> = <var:E> } <var:Q0> := <nat:2> { <var:i> = <var:E> \land <var:Q0> = <nat:2> } | and \verb | { <var:i> = <var:E> \land <var:Q0> = <nat:2> } <var:L> := <var:Q0{ <var:i> = <var:E> \land <var:L> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:2> ; <var:L> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:i> = <var:E> }} <def:poly> {{ <var:L> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:E> /\ <var:L> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 