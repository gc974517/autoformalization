\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:r1> := <var:o> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:1> ; <var:m> := <var:r1> <var:m> := <var:m> + <var:r0> \end{verbatim} Allowing $ <var:o> = <var:q> $ ahead of running our segment of code , it must be that $ <var:m> = <nat:1> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be seen by standard Hoare logic . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:q> \} & <var:r1> := <var:o> & \{ <var:o> = <var:q> \land <var:r1> = <var:q> \} \\ \{ <var:o> = <var:q> \land <var:r1> = <var:q> \} & <var:r0> := <nat:2> & \{ <var:o> = <var:q> \land <var:r1> = <var:q> \land <var:r0> = <nat:2> \} \\ \{ <var:o> = <var:q> \land <var:r1> = <var:q> \land <var:r0> = <nat:2> \} & <var:r1> := <var:r1> * <nat:1> & \{ <var:o> = <var:q> \land <var:r1> = <nat:1> \times <var:q> \land <var:r0> = <nat:2> \} \\ \{ <var:o> = <var:q> \land <var:r1> = <nat:1> \times <var:q> \land <var:r0> = <nat:2> \} & <var:m> := <var:r1& \{ <var:o> = <var:q> \land <var:r0> = <nat:2> \land <var:m> = <nat:1> \times <var:q> \} \\ \{ <var:o> = <var:q> \land <var:r0> = <nat:2> \land <var:m> = <nat:1> \times <var:q> \} & <var:m> := <var:m> + <var:r0& \{ <var:o> = <var:q> \land <var:m> = <nat:1> \times <var:q> + <nat:2> \} \end{tabular} This is ensured by the law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:o> = <var:q> }} <var:r1> := <var:o> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:1> ; <var:m> := <var:r1> <var:m> := <var:m> + <var:r0> {{ <var:m> = <nat:1> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:q> /\ <var:r1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:q> /\ <var:r1> = <var:q> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:q> /\ <var:r1> = <nat:1> * <var:q> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:q> /\ <var:r0> = <nat:2> /\ <var:m> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:q> /\ <var:m> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 