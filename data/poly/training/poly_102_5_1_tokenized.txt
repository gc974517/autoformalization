\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:j1> := <var:n> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:3> ; <var:G> := <var:j1> <var:G> := <var:G> + <var:j0> \end{verbatim} Assume it to hold that $ <var:n> = <var:Z> $ prior to evaluating the list of commands , then we have $ <var:G> = <nat:3> \cdot <var:Z> + <nat:5> $ after code segment exits . \end{theorem} \begin{proof} The course of logic for our code segment can be accomplished with Hoare logic . Moving on to the next step , we have the variable assignmet line letting $ <var:n> $ as $ <var:j1>$ . This transfers the condition $ \{ <var:n> = <var:Z> \} $ to the condition $ \{ <var:n> = <var:Z> \land <var:j1> = <var:Z> \} $ . This is given using the assignment rule obtained from typical Hoare reasoning . Considering the subsequent step in the code , we see the assignment command letting $ <nat:5> $ toward $ <var:j0>$ . This line moves the precondition $ \{ <var:n> = <var:Z> \land <var:j1> = <var:Z> \} $ to the condition $ \{ <var:n> = <var:Z> \land <var:j1> = <var:Z> \land <var:j0> = <nat:5> \} $ . Advancing on , we see the variable binding code \verb | <var:j1> := <var:j1> * <nat:3> ; | . This moves the precondition $ \{ <var:n> = <var:Z> \land <var:j1> = <var:Z> \land <var:j0> = <nat:5> \} $ into $ \{ <var:n> = <var:Z> \land <var:j1> = <nat:3> \cdot <var:Z> \land <var:j0> = <nat:5> \} $ . Advancing to the following line seen in our series of commands , we have the assignment line \verb | <var:G> := <var:j1> | . This forwards the condition $ \{ <var:n> = <var:Z> \land <var:j1> = <nat:3> \cdot <var:Z> \land <var:j0> = <nat:5> \} $ as the postcondition $ \{ <var:n> = <var:Z> \land <var:j0> = <nat:5> \land <var:G> = <nat:3> \cdot <var:Z> \} $ . This is sound by the assignment scheme in typical Hoare techniques . Moving on to the next step , the binding statement letting $ <var:G> + <var:j0$ into $ <var:G>$ . This statement moves the precondition $ \{ <var:n> = <var:Z> \land <var:j0> = <nat:5> \land <var:G> = <nat:3> \cdot <var:Z> \} $ toward the condition $ \{ <var:n> = <var:Z> \land <var:G> = <nat:3> \cdot <var:Z> + <nat:5> \} $ . This is shown to be logically sound with the assignment law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:j1> := <var:n> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:3> ; <var:G> := <var:j1> <var:G> := <var:G> + <var:j0> {{ <var:G> = <nat:3> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:j1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:j1> = <var:Z> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:j1> = <nat:3> * <var:Z> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:j0> = <nat:5> /\ <var:G> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:G> = <nat:3> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 