\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:8> ; <var:S> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:f> = <var:O> $ ahead of executing the code , it holds that $ <var:S> = <nat:8> $ once code has executed . \end{theorem} \begin{proof} The method of proof for the set of commands can be done with usual Hoare reasoning . Observing the upcoming statement found in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:O> \} & <var:A0> := <nat:8> & \{ <var:f> = <var:O> \land <var:A0> = <nat:8> \} \end{tabular} This is guaranteed using the variable update law defined by usual Hoare reasoning . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:f> = <var:O> \} & <var:A0> := <nat:8> & \{ <var:f> = <var:O> \land <var:A0> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:8> ; <var:S> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:f> = <var:O> }} <def:poly> {{ <var:S> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:O> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:O> /\ <var:S> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 