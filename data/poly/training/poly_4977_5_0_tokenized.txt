\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:c> ; <var:J> := <var:U1> ; <var:J> := <var:J> + <var:U0> \end{verbatim} Assuming for all $ <var:H> \in \mathbb{N} $ it to be that $ <var:c> = <var:H> $ ahead of executing the code , then we have $ <var:J> = <nat:4> * <var:H> + <nat:7> $ once series of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is done by typical Hoare reasoning . Stepping forward , we have \begin{verbatim} { <var:c> = <var:H> } <var:U0> := <nat:7> { <var:c> = <var:H> \land <var:U0> = <nat:7> } { <var:c> = <var:H> \land <var:U0> = <nat:7> } <var:U1> := <nat:4> { <var:c> = <var:H> \land <var:U0> = <nat:7> \land <var:U1> = <nat:4> } \end{verbatim} Focusing on the proceeding statements in our program , \begin{verbatim} { <var:c> = <var:H> } <var:U0> := <nat:7> { <var:c> = <var:H> \land <var:U0> = <nat:7> } { <var:c> = <var:H> \land <var:U0> = <nat:7> } <var:U1> := <nat:4> { <var:c> = <var:H> \land <var:U0> = <nat:7> \land <var:U1> = <nat:4> } { <var:c> = <var:H> \land <var:U0> = <nat:7> \land <var:U1> = <nat:4> } <var:U1> := <var:U1> * <var:c> { <var:c> = <var:H> \land <var:U0> = <nat:7> \land <var:U1> = <nat:4> * <var:H> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:U0> := <nat:7> ; <var:U1> := <nat:4> ; <var:U1> := <var:U1> * <var:c> ; <var:J> := <var:U1> ; <var:J> := <var:J> + <var:U0> {{ <var:J> = <nat:4> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:U0> = <nat:7> /\ <var:J> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:J> = <nat:4> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 