\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:c> ; <var:Z> := <var:S1> ; <var:Z> := <var:Z> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:c> = <var:p> $ before evaluating our list of instructions , it holds that we have $ <var:Z> = <nat:3> \times <var:p> + <nat:9> $ once code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is accomplished by Hoare techniques . Taking another step toward the subsequent line of code contained in our series of commands , we see \begin{eqnarray} \{ <var:c> = <var:p> \} \, <var:S0> := <nat:9> \, \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \} \end{eqnarray} This is guaranteed using the variable assignmet law obtained from typical Hoare techniques . Focusing on the subsequent lines seen in our set of commands , we see \begin{eqnarray} \{ <var:c> = <var:p> \} \, <var:S0> := <nat:9> \, \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \} \\ \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \} \, <var:S1> := <nat:3> \, \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \land <var:S1> = <nat:3> \} \end{eqnarray} This is known to be sound with the variable binding inference rule given in usual Hoare logic . Looking at the upcoming lines in our code segment , \begin{eqnarray} \{ <var:c> = <var:p> \} \, <var:S0> := <nat:9> \, \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \} \\ \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \} \, <var:S1> := <nat:3> \, \{ <var:c> = <var:p> \land <var:S0> = <nat:9> \land <var:S1> = <nat:3> \} \end{eqnarray} This is ensured with the binding rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:9> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:c> ; <var:Z> := <var:S1> ; <var:Z> := <var:Z> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:c> = <var:p> }} <def:poly> {{ <var:Z> = <nat:3> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:S0> = <nat:9> /\ <var:Z> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:p> /\ <var:Z> = <nat:3> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 