\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:l1> := <var:Z> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:7> ; <var:y> := <var:l1> <var:y> := <var:y> + <var:l0> \end{verbatim} Assume that $ <var:Z> = <var:w> $ given all $ <var:w> $ before the evaluation of this segment of code it follows that we see $ <var:y> = <nat:7> \cdot <var:w> + <nat:3> $ once set of commands executes . \end{theorem} \begin{proof} Proving correctness for this list of instructions can be given by typical Hoare techniques . Now , we see \begin{verbatim} { <var:Z> = <var:w> } <var:l1> := <var:Z> { <var:Z> = <var:w> \land <var:l1> = <var:w> } { <var:Z> = <var:w> \land <var:l1> = <var:w> } <var:l0> := <nat:3> { <var:Z> = <var:w> \land <var:l1> = <var:w> \land <var:l0> = <nat:3> } \end{verbatim} Advancing to the next step , we see \begin{verbatim} { <var:Z> = <var:w> } <var:l1> := <var:Z> { <var:Z> = <var:w> \land <var:l1> = <var:w> } { <var:Z> = <var:w> \land <var:l1> = <var:w> } <var:l0> := <nat:3> { <var:Z> = <var:w> \land <var:l1> = <var:w> \land <var:l0> = <nat:3> } \end{verbatim} Moving on to the next step , \begin{verbatim} { <var:Z> = <var:w> } <var:l1> := <var:Z> { <var:Z> = <var:w> \land <var:l1> = <var:w> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <var:l1> := <var:Z> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:7> ; <var:y> := <var:l1> <var:y> := <var:y> + <var:l0> {{ <var:y> = <nat:7> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:l1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:l1> = <var:w> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:l1> = <nat:7> * <var:w> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:l0> = <nat:3> /\ <var:y> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:y> = <nat:7> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 