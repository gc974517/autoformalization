\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J1> := <var:o> ; <var:J2> := <var:J1> * <var:o> ; <var:J3> := <var:J2> * <var:o> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:9> ; <var:b> := <var:J3> <var:b> := <var:b> + <var:J2> <var:b> := <var:b> + <var:J1> <var:b> := <var:b> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow that $ <var:o> = <var:c> $ before evaluating the set of commands then we see $ <var:b> = <nat:9> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:9> \times <var:c> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:c> \} \\ <var:J1> := <var:o> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <var:c> \} \\ <var:J2> := <var:J1> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <var:c> \land <var:J2> = <var:c> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:o> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <var:c> \land <var:J2> = <var:c> ^ <nat:2> \land <var:J3> = <var:c> ^ <nat:3> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <var:c> \land <var:J2> = <var:c> ^ <nat:2> \land <var:J3> = <var:c> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <nat:9> * <var:c> \land <var:J2> = <var:c> ^ <nat:2> \land <var:J3> = <var:c> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J2> := <var:J2> * <nat:1> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <nat:9> * <var:c> \land <var:J2> = <nat:1> * <var:c> ^ <nat:2> \land <var:J3> = <var:c> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J3> := <var:J3> * <nat:9> ; \\ \{ <var:o> = <var:c> \land <var:J1> = <nat:9> * <var:c> \land <var:J2> = <nat:1> * <var:c> ^ <nat:2> \land <var:J3> = <nat:9> * <var:c> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:b> := <var:J3> \\ \{ <var:o> = <var:c> \land <var:J1> = <nat:9> * <var:c> \land <var:J2> = <nat:1> * <var:c> ^ <nat:2> \land <var:J0> = <nat:8> \land <var:b> = <nat:9> * <var:c> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:J2> \\ \{ <var:o> = <var:c> \land <var:J1> = <nat:9> * <var:c> \land <var:J0> = <nat:8> \land <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:J1> \\ \{ <var:o> = <var:c> \land <var:J0> = <nat:8> \land <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:9> * <var:c> \} \\ <var:b> := <var:b> + <var:J0> \\ \{ <var:o> = <var:c> \land <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:o> ; <var:J2> := <var:J1> * <var:o> ; <var:J3> := <var:J2> * <var:o> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:9> ; <var:b> := <var:J3> <var:b> := <var:b> + <var:J2> <var:b> := <var:b> + <var:J1> <var:b> := <var:b> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:o> = <var:c> }} <def:poly> {{ <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <var:c> /\ <var:J2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <var:c> /\ <var:J2> = <var:c> ^ <nat:2> /\ <var:J3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <var:c> /\ <var:J2> = <var:c> ^ <nat:2> /\ <var:J3> = <var:c> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <nat:9> * <var:c> /\ <var:J2> = <var:c> ^ <nat:2> /\ <var:J3> = <var:c> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <nat:9> * <var:c> /\ <var:J2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:J3> = <var:c> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <nat:9> * <var:c> /\ <var:J2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:J3> = <nat:9> * <var:c> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <nat:9> * <var:c> /\ <var:J2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:J0> = <nat:8> /\ <var:b> = <nat:9> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J1> = <nat:9> * <var:c> /\ <var:J0> = <nat:8> /\ <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:J0> = <nat:8> /\ <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:c> /\ <var:b> = <nat:9> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:9> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 