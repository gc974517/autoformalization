\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:h> ; <var:m2> := <var:m1> * <var:h> ; <var:m3> := <var:m2> * <var:h> ; <var:m0> := <nat:7> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:5> ; <var:P> := <var:m3> <var:P> := <var:P> + <var:m2> <var:P> := <var:P> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given with some positive integers $ <var:B> $ that $ <var:h> = <var:B> $ ahead of evaluating our series of commands , it follows that we see $ <var:P> = <nat:5> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:7> $ after series of instructions executes . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:B> \} \\ <var:m1> := <var:h> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \} \\ <var:m2> := <var:m1> * <var:h> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <var:B> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:h> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <var:B> ^ <nat:2> \land <var:m3> = <var:B> ^ <nat:3> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <var:B> ^ <nat:2> \land <var:m3> = <var:B> ^ <nat:3> \land <var:m0> = <nat:7> \} \\ <var:m2> := <var:m2> * <nat:2> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:m3> = <var:B> ^ <nat:3> \land <var:m0> = <nat:7> \} \\ <var:m3> := <var:m3> * <nat:5> ; \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:B> ^ <nat:3> \land <var:m0> = <nat:7> \} \\ <var:P> := <var:m3> \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m2> = <nat:2> \times <var:B> ^ <nat:2> \land <var:m0> = <nat:7> \land <var:P> = <nat:5> \times <var:B> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:m2> \\ \{ <var:h> = <var:B> \land <var:m1> = <var:B> \land <var:m0> = <nat:7> \land <var:P> = <nat:5> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:m0> \\ \{ <var:h> = <var:B> \land <var:P> = <nat:5> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:7> \} \end{eqnarray} Considering the above , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:h> ; <var:m2> := <var:m1> * <var:h> ; <var:m3> := <var:m2> * <var:h> ; <var:m0> := <nat:7> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:5> ; <var:P> := <var:m3> <var:P> := <var:P> + <var:m2> <var:P> := <var:P> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:h> = <var:B> }} <def:poly> {{ <var:P> = <nat:5> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <var:B> ^ <nat:2> /\ <var:m3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <var:B> ^ <nat:2> /\ <var:m3> = <var:B> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:m3> = <var:B> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:B> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:m0> = <nat:7> /\ <var:P> = <nat:5> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:m1> = <var:B> /\ <var:m0> = <nat:7> /\ <var:P> = <nat:5> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:P> = <nat:5> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 