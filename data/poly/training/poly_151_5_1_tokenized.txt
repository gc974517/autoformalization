\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:M> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:P> := <var:y1> <var:P> := <var:P> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Given $ <var:M> = <var:x> $ before interpreting our program then $ <var:P> = <nat:8> \cdot <var:x> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our segment of code is evident by this decorated list of instructions . \begin{eqnarray} \{ <var:M> = <var:x> \} \\ <var:y1> := <var:M> ; \\ \{ <var:M> = <var:x> \land <var:y1> = <var:x> \} \end{eqnarray} Continuing the execution of our list of commands results in : \begin{eqnarray} <var:y0> := <nat:1> ; \\ \{ <var:M> = <var:x> \land <var:y1> = <var:x> \land <var:y0> = <nat:1> \} \\ <var:y1> := <var:y1> * <nat:8> ; \\ \{ <var:M> = <var:x> \land <var:y1> = <nat:8> * <var:x> \land <var:y0> = <nat:1> \} \\ <var:P> := <var:y1> \\ \{ <var:M> = <var:x> \land <var:y0> = <nat:1> \land <var:P> = <nat:8> * <var:x> \} \\ <var:P> := <var:P> + <var:y0> \\ \{ <var:M> = <var:x> \land <var:P> = <nat:8> * <var:x> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:M> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:P> := <var:y1> <var:P> := <var:P> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:M> = <var:x> }} <def:poly> {{ <var:P> = <nat:8> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:y1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:y1> = <var:x> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:y1> = <nat:8> * <var:x> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:y0> = <nat:1> /\ <var:P> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:P> = <nat:8> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 