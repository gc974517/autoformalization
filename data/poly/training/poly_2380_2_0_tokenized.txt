\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:7> ; <var:y> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Assuming it to hold that $ <var:L> = <var:i> $ ahead of interpreting our set of instructions , then we see $ <var:y> = <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning produces : \begin{eqnarray} \{ <var:L> = <var:i> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:L> = <var:i> \land <var:Y0> = <nat:7> \} \\ <var:y> := <var:Y0> \\ \{ <var:L> = <var:i> \land <var:y> = <nat:7> \} \end{eqnarray} Given the preceding argument , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:y> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <def:poly> {{ <var:y> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:y> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 