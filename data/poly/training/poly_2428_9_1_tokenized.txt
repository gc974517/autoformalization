\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:u1> := <var:O> ; <var:u2> := <var:u1> * <var:O> ; <var:u3> := <var:u2> * <var:O> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:4> ; <var:J> := <var:u3> <var:J> := <var:J> + <var:u1> <var:J> := <var:J> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given --- for every positive integers $ <var:g> $ --- that we have $ <var:O> = <var:g> $ prior to the execution of our program it must be that $ <var:J> = <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> + <nat:2> $ when code finishes . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:O> = <var:g> \} \\ <var:u1> := <var:O> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <var:g> \} \\ <var:u2> := <var:u1> * <var:O> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:O> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \} \\ <var:u0> := <nat:2> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:u1> := <var:u1> * <nat:1> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <nat:1> \cdot <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <var:g> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:u3> := <var:u3> * <nat:4> ; \\ \{ <var:O> = <var:g> \land <var:u1> = <nat:1> \cdot <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u3> = <nat:4> \cdot <var:g> ^ <nat:3> \land <var:u0> = <nat:2> \} \\ <var:J> := <var:u3> \\ \{ <var:O> = <var:g> \land <var:u1> = <nat:1> \cdot <var:g> \land <var:u2> = <var:g> ^ <nat:2> \land <var:u0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:g> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:u1> \\ \{ <var:O> = <var:g> \land <var:u0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> \} \\ <var:J> := <var:J> + <var:u0> \\ \{ <var:O> = <var:g> \land <var:J> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> + <nat:2> \} \end{eqnarray} Given the above , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:O> ; <var:u2> := <var:u1> * <var:O> ; <var:u3> := <var:u2> * <var:O> ; <var:u0> := <nat:2> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:4> ; <var:J> := <var:u3> <var:J> := <var:J> + <var:u1> <var:J> := <var:J> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:O> = <var:g> }} <def:poly> {{ <var:J> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <nat:1> * <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <var:g> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <nat:1> * <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u3> = <nat:4> * <var:g> ^ <nat:3> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u1> = <nat:1> * <var:g> /\ <var:u2> = <var:g> ^ <nat:2> /\ <var:u0> = <nat:2> /\ <var:J> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u0> = <nat:2> /\ <var:J> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:J> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 