\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:g> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:g> ; <var:T2> := <var:T2> * <var:g> ; <var:O> := <var:T2> ; <var:O> := <var:O> + <var:T1> ; <var:O> := <var:O> + <var:T0> \end{verbatim} Allow it to be that $ <var:g> = <var:x> $ letting $ <var:x> \in \mathbb{N} $ prior to executing this set of commands , it must be that we see $ <var:O> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be seen with the following decorated set of commands . \begin{eqnarray} \{ <var:g> = <var:x> \} \\ <var:T0> := <nat:1> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \} \\ <var:T1> := <nat:1> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \} \\ <var:T1> := <var:T1> * <var:g> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \cdot <var:x> \} \\ <var:T2> := <nat:7> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \cdot <var:x> \land <var:T2> = <nat:7> \} \\ <var:T2> := <var:T2> * <var:g> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \cdot <var:x> \land <var:T2> = <nat:7> \cdot <var:x> \} \\ <var:T2> := <var:T2> * <var:g> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \cdot <var:x> \land <var:T2> = <nat:7> \cdot <var:x> ^ <nat:2> \} \\ <var:O> := <var:T2> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:T1> = <nat:1> \cdot <var:x> \land <var:O> = <nat:7> \cdot <var:x> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:T1> ; \\ \{ <var:g> = <var:x> \land <var:T0> = <nat:1> \land <var:O> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:O> := <var:O> + <var:T0> \\ \{ <var:g> = <var:x> \land <var:O> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:1> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:g> = <var:x> }} <var:T0> := <nat:1> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:g> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:g> ; <var:T2> := <var:T2> * <var:g> ; <var:O> := <var:T2> ; <var:O> := <var:O> + <var:T1> ; <var:O> := <var:O> + <var:T0> {{ <var:O> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:x> /\ <var:T2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:x> /\ <var:T2> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:x> /\ <var:T2> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:T1> = <nat:1> * <var:x> /\ <var:O> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:T0> = <nat:1> /\ <var:O> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:O> = <nat:7> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 