\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:w> ; <var:b2> := <var:b1> * <var:w> ; <var:b3> := <var:b2> * <var:w> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:9> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assume that $ <var:w> = <var:K> $ , for some positive coefficients $ <var:K> $ , prior to the execution of our set of commands it follows that we have $ <var:T> = <nat:9> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:3> $ after list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:K> \} \\ <var:b1> := <var:w> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <var:K> \} \\ <var:b2> := <var:b1> * <var:w> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <var:K> \land <var:b2> = <var:K> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:w> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <var:K> \land <var:b2> = <var:K> ^ <nat:2> \land <var:b3> = <var:K> ^ <nat:3> \} \end{eqnarray} Allowing the execution of our list of commands produces : \begin{eqnarray} <var:b0> := <nat:3> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <var:K> \land <var:b2> = <var:K> ^ <nat:2> \land <var:b3> = <var:K> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:8> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <nat:8> \times <var:K> \land <var:b2> = <var:K> ^ <nat:2> \land <var:b3> = <var:K> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <nat:8> \times <var:K> \land <var:b2> = <nat:1> \times <var:K> ^ <nat:2> \land <var:b3> = <var:K> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b3> := <var:b3> * <nat:9> ; \\ \{ <var:w> = <var:K> \land <var:b1> = <nat:8> \times <var:K> \land <var:b2> = <nat:1> \times <var:K> ^ <nat:2> \land <var:b3> = <nat:9> \times <var:K> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:T> := <var:b3> \\ \{ <var:w> = <var:K> \land <var:b1> = <nat:8> \times <var:K> \land <var:b2> = <nat:1> \times <var:K> ^ <nat:2> \land <var:b0> = <nat:3> \land <var:T> = <nat:9> \times <var:K> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:b2> \\ \{ <var:w> = <var:K> \land <var:b1> = <nat:8> \times <var:K> \land <var:b0> = <nat:3> \land <var:T> = <nat:9> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:b1> \\ \{ <var:w> = <var:K> \land <var:b0> = <nat:3> \land <var:T> = <nat:9> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> \} \\ <var:T> := <var:T> + <var:b0> \\ \{ <var:w> = <var:K> \land <var:T> = <nat:9> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:w> ; <var:b2> := <var:b1> * <var:w> ; <var:b3> := <var:b2> * <var:w> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:9> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <def:poly> {{ <var:T> = <nat:9> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <var:K> /\ <var:b2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <var:K> /\ <var:b2> = <var:K> ^ <nat:2> /\ <var:b3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <var:K> /\ <var:b2> = <var:K> ^ <nat:2> /\ <var:b3> = <var:K> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <nat:8> * <var:K> /\ <var:b2> = <var:K> ^ <nat:2> /\ <var:b3> = <var:K> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <nat:8> * <var:K> /\ <var:b2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:b3> = <var:K> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <nat:8> * <var:K> /\ <var:b2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:b3> = <nat:9> * <var:K> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <nat:8> * <var:K> /\ <var:b2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:9> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b1> = <nat:8> * <var:K> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:9> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:9> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:T> = <nat:9> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 