\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:8> ; <var:w> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Assume $ <var:k> = <var:C> $ ahead of the execution of the program it follows that $ <var:w> = <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be done through standard Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:k> = <var:C> \} \, <var:R0> := <nat:8> \, \{ <var:k> = <var:C> \land <var:R0> = <nat:8> \} \end{eqnarray} This is given by the assignment inference rule from Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:k> = <var:C> \} \, <var:R0> := <nat:8> \, \{ <var:k> = <var:C> \land <var:R0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:w> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:k> = <var:C> }} <def:poly> {{ <var:w> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:w> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 