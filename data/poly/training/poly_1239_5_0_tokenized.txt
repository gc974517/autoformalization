\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:x> ; <var:z> := <var:t1> ; <var:z> := <var:z> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:x> = <var:P> $ , given all positive integers $ <var:P> $ , ahead of interpreting the code , it follows that $ <var:z> = <nat:1> * <var:P> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:x> = <var:P> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:x> = <var:P> \land <var:t0> = <nat:6> \} \\ <var:t1> := <nat:1> ; \\ \{ <var:x> = <var:P> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \} \\ <var:t1> := <var:t1> * <var:x> ; \\ \{ <var:x> = <var:P> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> * <var:P> \} \\ <var:z> := <var:t1> ; \\ \{ <var:x> = <var:P> \land <var:t0> = <nat:6> \land <var:z> = <nat:1> * <var:P> \} \\ <var:z> := <var:z> + <var:t0> \\ \{ <var:x> = <var:P> \land <var:z> = <nat:1> * <var:P> + <nat:6> \} \end{eqnarray} Hence , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:x> ; <var:z> := <var:t1> ; <var:z> := <var:z> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:x> = <var:P> }} <def:poly> {{ <var:z> = <nat:1> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:t0> = <nat:6> /\ <var:z> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:P> /\ <var:z> = <nat:1> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 