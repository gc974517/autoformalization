\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:7> ; <var:x> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assuming that $ <var:b> = <var:S> $ ahead of executing this series of instructions , then we see $ <var:x> = <nat:7> $ once code segment is done . \end{theorem} \begin{proof} The proof of our series of instructions is demonstrated through usual Hoare techniques . Advancing to the proceeding piece of code contained in our series of instructions , the variable update statement \verb | <var:c0> := <nat:7> ; | . This advances the precondition $ \{ <var:b> = <var:S> \} $ into $ \{ <var:b> = <var:S> \land <var:c0> = <nat:7> \} $ . Taking a look at the following command found in the segment of code , we have the environment update statement \verb | <var:x> := <var:c0> | . This transfers $ \{ <var:b> = <var:S> \land <var:c0> = <nat:7> \} $ to the postcondition $ \{ <var:b> = <var:S> \land <var:x> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:7> ; <var:x> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 