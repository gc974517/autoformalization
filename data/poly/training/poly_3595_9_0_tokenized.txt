\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:5> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:H> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:H> ; <var:v2> := <var:v2> * <var:H> ; <var:D> := <var:v2> ; <var:D> := <var:D> + <var:v1> ; <var:D> := <var:D> + <var:v0> \end{verbatim} Allow that $ <var:H> = <var:w> $ before executing this list of instructions , then $ <var:D> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:5> $ . \end{theorem} \begin{proof} The proof of our set of instructions is given with standard Hoare reasoning . Advancing to the next step , we have \begin{eqnarray} \{ <var:H> = <var:w> \} \, <var:v0> := <nat:5> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \} \, <var:v1> := <nat:1> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} \, <var:v1> := <var:v1> * <var:H> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \} \, <var:v2> := <nat:6> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \land <var:v2> = <nat:6> \} \end{eqnarray} Immediately following , \begin{eqnarray} \{ <var:H> = <var:w> \} \, <var:v0> := <nat:5> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \} \, <var:v1> := <nat:1> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \} \, <var:v1> := <var:v1> * <var:H> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \} \\ \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \} \, <var:v2> := <nat:6> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \land <var:v1> = <nat:1> \times <var:w> \land <var:v2> = <nat:6> \} \end{eqnarray} Advancing to the next step , we have \begin{eqnarray} \{ <var:H> = <var:w> \} \, <var:v0> := <nat:5> \, \{ <var:H> = <var:w> \land <var:v0> = <nat:5> \} \end{eqnarray} This is given by the environment update law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:H> = <var:w> }} <var:v0> := <nat:5> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:H> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:H> ; <var:v2> := <var:v2> * <var:H> ; <var:D> := <var:v2> ; <var:D> := <var:D> + <var:v1> ; <var:D> := <var:D> + <var:v0> {{ <var:D> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:w> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:w> /\ <var:v2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:w> /\ <var:v2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:1> * <var:w> /\ <var:D> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:v0> = <nat:5> /\ <var:D> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:w> /\ <var:D> = <nat:6> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 