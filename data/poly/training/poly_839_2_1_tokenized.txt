\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:5> ; <var:A> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:z> = <var:S> $ prior to executing the set of instructions , it holds that we have $ <var:A> = <nat:5> $ once series of commands has exited . \end{theorem} \begin{proof} Proving correctness for the segment of code can be seen using Hoare logic . Immediately following , we see the assignment code \verb | <var:i0> := <nat:5> ; | . This forwards $ \{ <var:z> = <var:S> \} $ to $ \{ <var:z> = <var:S> \land <var:i0> = <nat:5> \} $ . This is shown to be logically sound through the assignment law defined in typical Hoare logic . Immediately following , the variable update command \verb | <var:A> := <var:i0> | . This advances the precondition $ \{ <var:z> = <var:S> \land <var:i0> = <nat:5> \} $ into $ \{ <var:z> = <var:S> \land <var:A> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:5> ; <var:A> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:z> = <var:S> }} <def:poly> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 