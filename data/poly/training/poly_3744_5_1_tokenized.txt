\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:n1> := <var:c> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:7> ; <var:J> := <var:n1> <var:J> := <var:J> + <var:n0> \end{verbatim} Assume letting positive integer coefficients $ <var:F> $ $ <var:c> = <var:F> $ prior to interpreting this series of commands it holds that we see $ <var:J> = <nat:7> \cdot <var:F> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:F> \} \\ <var:n1> := <var:c> ; \\ \{ <var:c> = <var:F> \land <var:n1> = <var:F> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:c> = <var:F> \land <var:n1> = <var:F> \land <var:n0> = <nat:8> \} \\ <var:n1> := <var:n1> * <nat:7> ; \\ \{ <var:c> = <var:F> \land <var:n1> = <nat:7> \times <var:F> \land <var:n0> = <nat:8> \} \\ <var:J> := <var:n1> \\ \{ <var:c> = <var:F> \land <var:n0> = <nat:8> \land <var:J> = <nat:7> \times <var:F> \} \\ <var:J> := <var:J> + <var:n0> \\ \{ <var:c> = <var:F> \land <var:J> = <nat:7> \times <var:F> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <var:n1> := <var:c> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:7> ; <var:J> := <var:n1> <var:J> := <var:J> + <var:n0> {{ <var:J> = <nat:7> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:n1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:n1> = <var:F> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:n1> = <nat:7> * <var:F> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:n0> = <nat:8> /\ <var:J> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:J> = <nat:7> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 