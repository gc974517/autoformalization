\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:o> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> \end{verbatim} Given that we have $ <var:o> = <var:z> $ for any natural numbers $ <var:z> $ prior to interpreting our code , it holds that we see $ <var:m> = <nat:4> \cdot <var:z> + <nat:9> $ . \end{theorem} \begin{proof} The argument for the code segment is given by Hoare reasoning . Paying attention to the next command in the program , the variable update line binding $ <nat:9> $ toward $ <var:G0>$ . This line transfers the precondition $ \{ <var:o> = <var:z> \} $ to $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \} $ . This is rigorously given with the assignment rule from usual Hoare reasoning . Next , we see the variable update statement letting $ <nat:4> $ as $ <var:G1>$ . This takes the precondition $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \} $ to the condition $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \} $ . Stepping through , we see the variable binding code \verb | <var:G1> := <var:G1> * <var:o> ; | . This command forwards the precondition $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> \} $ as the postcondition $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> * <var:z> \} $ . Moving onward , we see the binding line letting $ <var:G1> $ toward $ <var:m>$ . This forwards $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:G1> = <nat:4> * <var:z> \} $ toward $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:m> = <nat:4> * <var:z> \} $ . Advancing on , the binding command giving $ <var:m> + <var:G0$ as $ <var:m>$ . This takes the precondition $ \{ <var:o> = <var:z> \land <var:G0> = <nat:9> \land <var:m> = <nat:4> * <var:z> \} $ toward $ \{ <var:o> = <var:z> \land <var:m> = <nat:4> * <var:z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:o> = <var:z> }} <var:G0> := <nat:9> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:o> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> {{ <var:m> = <nat:4> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:G0> = <nat:9> /\ <var:m> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:m> = <nat:4> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 