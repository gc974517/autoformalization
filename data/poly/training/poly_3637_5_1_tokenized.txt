\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:Z> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:Q> := <var:Y1> <var:Q> := <var:Q> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:Z> = <var:e> $ ahead of the execution of the segment of code it follows that $ <var:Q> = <nat:6> \times <var:e> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:e> \} \\ <var:Y1> := <var:Z> ; \\ \{ <var:Z> = <var:e> \land <var:Y1> = <var:e> \} \\ <var:Y0> := <nat:3> ; \\ \{ <var:Z> = <var:e> \land <var:Y1> = <var:e> \land <var:Y0> = <nat:3> \} \\ <var:Y1> := <var:Y1> * <nat:6> ; \\ \{ <var:Z> = <var:e> \land <var:Y1> = <nat:6> * <var:e> \land <var:Y0> = <nat:3> \} \\ <var:Q> := <var:Y1> \\ \{ <var:Z> = <var:e> \land <var:Y0> = <nat:3> \land <var:Q> = <nat:6> * <var:e> \} \\ <var:Q> := <var:Q> + <var:Y0> \\ \{ <var:Z> = <var:e> \land <var:Q> = <nat:6> * <var:e> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:Z> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:Q> := <var:Y1> <var:Q> := <var:Q> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Z> = <var:e> }} <def:poly> {{ <var:Q> = <nat:6> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:Y1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:Y1> = <var:e> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:Y1> = <nat:6> * <var:e> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:Y0> = <nat:3> /\ <var:Q> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:Q> = <nat:6> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 