\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:3> ; <var:W> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:x> = <var:c> $ ahead of executing the list of instructions it holds that we have $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} Let this decorated segment of code . \begin{eqnarray} \{ <var:x> = <var:c> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:x> = <var:c> \land <var:a0> = <nat:3> \} \end{eqnarray} Continuing the execution of our code returns : \begin{eqnarray} <var:W> := <var:a0> \\ \{ <var:x> = <var:c> \land <var:W> = <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:W> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:x> = <var:c> }} <def:poly> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 