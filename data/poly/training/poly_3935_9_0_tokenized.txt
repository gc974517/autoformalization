\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:5> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:S> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:S> ; <var:O2> := <var:O2> * <var:S> ; <var:V> := <var:O2> ; <var:V> := <var:V> + <var:O1> ; <var:V> := <var:V> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Allowing for any natural numbers $ <var:f> $ that $ <var:S> = <var:f> $ prior to executing our list of commands , then we have $ <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions can be demonstrated by standard Hoare techniques . Taking another step toward the subsequent step contained in the series of commands , we have the command binding $ <nat:5> $ toward $ <var:O0>$ . This statement transfers the precondition $ \{ <var:S> = <var:f> \} $ toward $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \} $ . This is shown by the assignment law in Hoare reasoning . Observing the subsequent piece of code in the list of instructions , the assignment code binding $ <nat:1> $ toward $ <var:O1>$ . This forwards $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \} $ as the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \} $ . Moving on to the upcoming statement seen in the code , the command yielding $ <var:O1> * <var:S> $ as $ <var:O1>$ . This command advances the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \} $ into the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \} $ . Immediately following , we see the binding command \verb | <var:O2> := <nat:1> ; | . This transfers $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \} $ into $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \} $ . This is given using the assignment inference rule found in Hoare logic . Now , we see the assignment statement \verb | <var:O2> := <var:O2> * <var:S> ; | . This forwards $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \} $ into the postcondition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \cdot <var:f> \} $ . After , the variable assignmet line \verb | <var:O2> := <var:O2> * <var:S> ; | . This line takes the precondition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \cdot <var:f> \} $ to the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \cdot <var:f> ^ <nat:2> \} $ . Looking at the next bit of code seen in our series of commands , we see the assignment line binding $ <var:O2> $ toward $ <var:V>$ . This redefines the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:O2> = <nat:1> \cdot <var:f> ^ <nat:2> \} $ into the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme given in typical Hoare techniques . Looking at the following statement seen in the series of instructions , we have the variable binding line \verb | <var:V> := <var:V> + <var:O1> ; | . This statement takes the precondition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:O1> = <nat:1> \cdot <var:f> \land <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> \} $ as $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> \} $ . Looking at the following line found in our code segment , we see the variable binding statement \verb | <var:V> := <var:V> + <var:O0> | . This statement advances the condition $ \{ <var:S> = <var:f> \land <var:O0> = <nat:5> \land <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> \} $ into the condition $ \{ <var:S> = <var:f> \land <var:V> = <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:5> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:S> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:S> ; <var:O2> := <var:O2> * <var:S> ; <var:V> := <var:O2> ; <var:V> := <var:V> + <var:O1> ; <var:V> := <var:V> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:S> = <var:f> }} <def:poly> {{ <var:V> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> * <var:f> /\ <var:O2> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:O1> = <nat:1> * <var:f> /\ <var:V> = <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:O0> = <nat:5> /\ <var:V> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:V> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 