\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:4> ; <var:G> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:o> = <var:K> $ ahead of interpreting this set of commands it holds that $ <var:G> = <nat:4> $ once code segment has finished . \end{theorem} \begin{proof} Proving correctness for our set of commands is evident with Hoare techniques . After , we see \begin{verbatim} { <var:o> = <var:K> } <var:R0> := <nat:4> { <var:o> = <var:K> \land <var:R0> = <nat:4> } \end{verbatim} Advancing to the next statement in our list of instructions , \begin{verbatim} { <var:o> = <var:K> } <var:R0> := <nat:4> { <var:o> = <var:K> \land <var:R0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:4> ; <var:G> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:o> = <var:K> }} <def:poly> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 