\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:3> ; <var:I3> := <var:I3> * <nat:1> ; <var:c> := <var:I3> <var:c> := <var:c> + <var:I2> <var:c> := <var:c> + <var:I1> <var:c> := <var:c> + <var:I0> \end{verbatim} Assuming that we have $ <var:R> = <var:B> $ ahead of executing this code , it follows that we have $ <var:c> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:1> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this code segment is given with standard Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:R> = <var:B> \} & <var:I1> := <var:R> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <var:B> \} & <var:I2> := <var:I1> * <var:R> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \} & <var:I3> := <var:I2> * <var:R> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \} & <var:I0> := <nat:1> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} & <var:I1> := <var:I1> * <nat:4> & \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} & <var:I2> := <var:I2> * <nat:3> & \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} & <var:I3> := <var:I3> * <nat:1> & \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I3> = <nat:1> * <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I3> = <nat:1> * <var:B> ^ <nat:3> \land <var:I0> = <nat:1> \} & <var:c> := <var:I3& \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:c> = <nat:1> * <var:B> ^ <nat:3> \} \\ \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I2> = <nat:3> * <var:B> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:c> = <nat:1> * <var:B> ^ <nat:3> \} & <var:c> := <var:c> + <var:I2& \{ <var:R> = <var:B> \land <var:I1> = <nat:4> * <var:B> \land <var:I0> = <nat:1> \land <var:c> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> \} \end{tabular} Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:B> \} & <var:I1> := <var:R> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \} \end{tabular} This is given by the variable assignmet inference rule given by Hoare logic . Looking at the upcoming statement found in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:B> \} & <var:I1> := <var:R> & \{ <var:R> = <var:B> \land <var:I1> = <var:B> \} \end{tabular} This is guaranteed by the environment update law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:R> = <var:B> }} <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:3> ; <var:I3> := <var:I3> * <nat:1> ; <var:c> := <var:I3> <var:c> := <var:c> + <var:I2> <var:c> := <var:c> + <var:I1> <var:c> := <var:c> + <var:I0> {{ <var:c> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:I3> = <nat:1> * <var:B> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:I0> = <nat:1> /\ <var:c> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I1> = <nat:4> * <var:B> /\ <var:I0> = <nat:1> /\ <var:c> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:I0> = <nat:1> /\ <var:c> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:c> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 