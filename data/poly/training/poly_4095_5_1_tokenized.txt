\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:C> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:F> := <var:Z1> <var:F> := <var:F> + <var:Z0> \end{verbatim} Assuming it to be that $ <var:C> = <var:K> $ prior to the execution of the set of commands it holds that we see $ <var:F> = <nat:3> \times <var:K> + <nat:8> $ after series of commands has executed . \end{theorem} \begin{proof} Observe this decorated segment of code . \begin{eqnarray} \{ <var:C> = <var:K> \} \\ <var:Z1> := <var:C> ; \\ \{ <var:C> = <var:K> \land <var:Z1> = <var:K> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:C> = <var:K> \land <var:Z1> = <var:K> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:C> = <var:K> \land <var:Z1> = <nat:3> \times <var:K> \land <var:Z0> = <nat:8> \} \\ <var:F> := <var:Z1> \\ \{ <var:C> = <var:K> \land <var:Z0> = <nat:8> \land <var:F> = <nat:3> \times <var:K> \} \\ <var:F> := <var:F> + <var:Z0> \\ \{ <var:C> = <var:K> \land <var:F> = <nat:3> \times <var:K> + <nat:8> \} \end{eqnarray} Using typical Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <var:Z1> := <var:C> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:F> := <var:Z1> <var:F> := <var:F> + <var:Z0> {{ <var:F> = <nat:3> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z1> = <var:K> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z1> = <nat:3> * <var:K> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:Z0> = <nat:8> /\ <var:F> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:F> = <nat:3> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 