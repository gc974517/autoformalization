\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:7> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:E> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:E> ; <var:X2> := <var:X2> * <var:E> ; <var:U> := <var:X2> ; <var:U> := <var:U> + <var:X1> ; <var:U> := <var:U> + <var:X0> \end{verbatim} Assuming that we have $ <var:E> = <var:H> $ , assuming some positive coefficients $ <var:H> $ , prior to the evaluation of this program , it must be that $ <var:U> = <nat:6> \times <var:H> ^ <nat:2> + <nat:9> \times <var:H> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is shown using Hoare techniques . Observing the upcoming piece of code contained in the list of commands , we have the assignment command giving $ <nat:7> $ to $ <var:X0>$ . This advances the condition $ \{ <var:E> = <var:H> \} $ as the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \} $ . Going forward , the variable assignmet code \verb | <var:X1> := <nat:9> ; | . This command advances the precondition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \} $ toward the postcondition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> \} $ . This is ensured through the assignment rule given by typical Hoare reasoning . Jumping to the proceeding statement in the list of instructions , we have the variable update code defining $ <var:X1> * <var:E> $ toward $ <var:X1>$ . This command takes the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> \} $ to the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \} $ . This is given using the assignment scheme defined by standard Hoare techniques . Now , the variable assignmet command \verb | <var:X2> := <nat:6> ; | . This moves the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \} $ toward the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> \} $ . This is guaranteed with the assignment scheme from Hoare logic . Advancing on , the variable binding line \verb | <var:X2> := <var:X2> * <var:E> ; | . This line redefines the precondition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> \} $ toward the postcondition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> * <var:H> \} $ . Moving on to the next step , we see the variable assignmet command \verb | <var:X2> := <var:X2> * <var:E> ; | . This transfers the precondition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> * <var:H> \} $ into $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> * <var:H> ^ <nat:2> \} $ . Observing the subsequent line of code contained in our set of instructions , the assignment command \verb | <var:U> := <var:X2> ; | . This takes the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:X2> = <nat:6> * <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:U> = <nat:6> * <var:H> ^ <nat:2> \} $ . This is known to be sound with the assignment law of typical Hoare techniques . Jumping to the subsequent bit of code found in our segment of code , we see the assignment command binding $ <var:U> + <var:X1> $ into $ <var:U>$ . This takes $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:X1> = <nat:9> * <var:H> \land <var:U> = <nat:6> * <var:H> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> \} $ . Honing in on the following line found in the program , we have the command \verb | <var:U> := <var:U> + <var:X0> | . This transfers the condition $ \{ <var:E> = <var:H> \land <var:X0> = <nat:7> \land <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> \} $ into $ \{ <var:E> = <var:H> \land <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:E> = <var:H> }} <var:X0> := <nat:7> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:E> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:E> ; <var:X2> := <var:X2> * <var:E> ; <var:U> := <var:X2> ; <var:U> := <var:U> + <var:X1> ; <var:U> := <var:U> + <var:X0> {{ <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> * <var:H> /\ <var:X2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> * <var:H> /\ <var:X2> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> * <var:H> /\ <var:X2> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:9> * <var:H> /\ <var:U> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:X0> = <nat:7> /\ <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:U> = <nat:6> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 