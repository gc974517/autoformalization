\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:2> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:x> := <var:E2> ; <var:x> := <var:x> + <var:E1> ; <var:x> := <var:x> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Given it to hold that $ <var:O> = <var:d> $ for positive integers $ <var:d> $ before executing the code segment it must be that we have $ <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:O> = <var:d> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \} \\ <var:E1> := <nat:6> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> \} \\ <var:E1> := <var:E1> * <var:O> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> * <var:d> \} \\ <var:E2> := <nat:2> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> * <var:d> \land <var:E2> = <nat:2> \} \\ <var:E2> := <var:E2> * <var:O> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> * <var:d> \land <var:E2> = <nat:2> * <var:d> \} \\ <var:E2> := <var:E2> * <var:O> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> * <var:d> \land <var:E2> = <nat:2> * <var:d> ^ <nat:2> \} \\ <var:x> := <var:E2> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:E1> = <nat:6> * <var:d> \land <var:x> = <nat:2> * <var:d> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:E1> ; \\ \{ <var:O> = <var:d> \land <var:E0> = <nat:2> \land <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> \} \\ <var:x> := <var:x> + <var:E0> \\ \{ <var:O> = <var:d> \land <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:2> \} \end{eqnarray} As a result , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:2> ; <var:E1> := <nat:6> ; <var:E1> := <var:E1> * <var:O> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:O> ; <var:E2> := <var:E2> * <var:O> ; <var:x> := <var:E2> ; <var:x> := <var:x> + <var:E1> ; <var:x> := <var:x> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:O> = <var:d> }} <def:poly> {{ <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> * <var:d> /\ <var:E2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> * <var:d> /\ <var:E2> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> * <var:d> /\ <var:E2> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:E1> = <nat:6> * <var:d> /\ <var:x> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:E0> = <nat:2> /\ <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:x> = <nat:2> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 