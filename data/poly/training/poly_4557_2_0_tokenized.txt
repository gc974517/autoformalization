\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:7> ; <var:l> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Assume that we have $ <var:L> = <var:S> $ before the execution of our program it holds that we have $ <var:l> = <nat:7> $ after set of instructions exits . \end{theorem} \begin{proof} The flow of logic for our series of commands can be seen with usual Hoare reasoning . Advancing to the next lines in our list of instructions , we see \begin{eqnarray} \{ <var:L> = <var:S> \} \, <var:y0> := <nat:7> \, \{ <var:L> = <var:S> \land <var:y0> = <nat:7> \} \\ \{ <var:L> = <var:S> \land <var:y0> = <nat:7> \} \, <var:l> := <var:y0\, \{ <var:L> = <var:S> \land <var:l> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:l> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:L> = <var:S> }} <def:poly> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:S> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 