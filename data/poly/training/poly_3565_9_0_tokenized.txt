\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:C0> := <nat:1> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:P> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:P> ; <var:C2> := <var:C2> * <var:P> ; <var:h> := <var:C2> ; <var:h> := <var:h> + <var:C1> ; <var:h> := <var:h> + <var:C0> \end{verbatim} Assuming that $ <var:P> = <var:H> $ --- given any whole numbers $ <var:H> $ --- before evaluating the program , it must be that we see $ <var:h> = <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:P> = <var:H> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> * <var:H> \} \\ <var:C2> := <nat:3> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> * <var:H> \land <var:C2> = <nat:3> \} \\ <var:C2> := <var:C2> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> * <var:H> \land <var:C2> = <nat:3> * <var:H> \} \\ <var:C2> := <var:C2> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> * <var:H> \land <var:C2> = <nat:3> * <var:H> ^ <nat:2> \} \\ <var:h> := <var:C2> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> * <var:H> \land <var:h> = <nat:3> * <var:H> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:C1> ; \\ \{ <var:P> = <var:H> \land <var:C0> = <nat:1> \land <var:h> = <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> \} \\ <var:h> := <var:h> + <var:C0> \\ \{ <var:P> = <var:H> \land <var:h> = <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} \end{eqnarray} As a result , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:P> = <var:H> }} <var:C0> := <nat:1> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:P> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:P> ; <var:C2> := <var:C2> * <var:P> ; <var:h> := <var:C2> ; <var:h> := <var:h> + <var:C1> ; <var:h> := <var:h> + <var:C0> {{ <var:h> = <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:H> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:H> /\ <var:C2> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:H> /\ <var:C2> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:H> /\ <var:h> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:C0> = <nat:1> /\ <var:h> = <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:h> = <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 