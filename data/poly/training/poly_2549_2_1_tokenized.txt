\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:9> ; <var:p> := <var:P0> \end{verbatim} Assuming that we have $ <var:i> = <var:g> $ before the evaluation of our segment of code then $ <var:p> = <nat:9> $ when list of commands executes . \end{theorem} \begin{proof} The method of proof for our list of commands is evident through standard Hoare techniques . Considering the next pieces of code in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:g> \} & <var:P0> := <nat:9> & \{ <var:i> = <var:g> \land <var:P0> = <nat:9> \} \\ \{ <var:i> = <var:g> \land <var:P0> = <nat:9> \} & <var:p> := <var:P0& \{ <var:i> = <var:g> \land <var:p> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:P0> := <nat:9> ; <var:p> := <var:P0> {{ <var:p> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:p> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 