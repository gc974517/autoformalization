\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:g> ; <var:Z2> := <var:Z1> * <var:g> ; <var:Z3> := <var:Z2> * <var:g> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:c> := <var:Z3> <var:c> := <var:c> + <var:Z2> <var:c> := <var:c> + <var:Z1> <var:c> := <var:c> + <var:Z0> \end{verbatim} Given it to hold that $ <var:g> = <var:h> $ ahead of the evaluation of the set of instructions it follows that $ <var:c> = <nat:6> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> $ after list of instructions has executed . \end{theorem} \begin{proof} The proof of this series of commands can be demonstrated using typical Hoare logic . Shifting focus toward the subsequent line seen in the program , the variable update command \verb | <var:Z1> := <var:g> ; | . This statement redefines the precondition $ \{ <var:g> = <var:h> \} $ toward the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \} $ . Observing the next statement contained in the segment of code , we see the environment update command \verb | <var:Z2> := <var:Z1> * <var:g> ; | . This command takes $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \} $ to the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ . Keeping momentum , the line assigning $ <var:Z2> * <var:g> $ as $ <var:Z3>$ . This transfers the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \} $ to the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ . This is given by the assignment inference rule defined by standard Hoare techniques . Moving on to the next step , we have the variable update line defining $ <nat:5> $ to $ <var:Z0>$ . This command forwards the precondition $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \} $ into $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ . Moving on to the upcoming line of code contained in the program , the binding line letting $ <var:Z1> * <nat:3> $ into $ <var:Z1>$ . This line transfers $ \{ <var:g> = <var:h> \land <var:Z1> = <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ . Taking another step toward the following command contained in our set of commands , we have the assignment code \verb | <var:Z2> := <var:Z2> * <nat:5> ; | . This statement redefines the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ toward the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ . This is guaranteed through the assignment rule given in typical Hoare logic . Moving forward to the next step , the variable update line assigning $ <var:Z3> * <nat:6> $ toward $ <var:Z3>$ . This code takes the condition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z3> = <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ toward the postcondition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ . After , the variable assignmet code \verb | <var:c> := <var:Z3> | . This redefines the precondition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z3> = <nat:6> \times <var:h> ^ <nat:3> \land <var:Z0> = <nat:5> \} $ to the postcondition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> \} $ . This is sound by the assignment scheme from standard Hoare techniques . Taking a look at the next step in the code segment , we have the environment update command \verb | <var:c> := <var:c> + <var:Z2> | . This moves the precondition $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> \} $ to $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> \} $ . Focusing on the following piece of code in the list of commands , we have the variable binding statement \verb | <var:c> := <var:c> + <var:Z1> | . This forwards $ \{ <var:g> = <var:h> \land <var:Z1> = <nat:3> \times <var:h> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:h> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} $ . Considering the proceeding command seen in our code , we see the variable binding command binding $ <var:c> + <var:Z0$ as $ <var:c>$ . This code redefines $ \{ <var:g> = <var:h> \land <var:Z0> = <nat:5> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> \} $ as $ \{ <var:g> = <var:h> \land <var:c> = <nat:6> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:5> \} $ . This is rigorously given by the assignment inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <var:Z1> := <var:g> ; <var:Z2> := <var:Z1> * <var:g> ; <var:Z3> := <var:Z2> * <var:g> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:c> := <var:Z3> <var:c> := <var:c> + <var:Z2> <var:c> := <var:c> + <var:Z1> <var:c> := <var:c> + <var:Z0> {{ <var:c> = <nat:6> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <nat:3> * <var:h> /\ <var:Z2> = <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <nat:3> * <var:h> /\ <var:Z2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:Z3> = <var:h> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <nat:3> * <var:h> /\ <var:Z2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:h> ^ <nat:3> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <nat:3> * <var:h> /\ <var:Z2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:Z0> = <nat:5> /\ <var:c> = <nat:6> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z1> = <nat:3> * <var:h> /\ <var:Z0> = <nat:5> /\ <var:c> = <nat:6> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:Z0> = <nat:5> /\ <var:c> = <nat:6> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:c> = <nat:6> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 