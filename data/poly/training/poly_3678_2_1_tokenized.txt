\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:9> ; <var:f> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:x> = <var:Z> $ prior to evaluating the segment of code then $ <var:f> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this segment of code can be done by typical Hoare techniques . Taking another step toward the proceeding commands in our set of instructions , we see \verb | { <var:x> = <var:Z> } <var:I0> := <nat:9> { <var:x> = <var:Z> \land <var:I0> = <nat:9> } | and \verb | { <var:x> = <var:Z> \land <var:I0> = <nat:9> } <var:f> := <var:I0{ <var:x> = <var:Z> \land <var:f> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:f> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <def:poly> {{ <var:f> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:f> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 