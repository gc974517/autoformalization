\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:E> := <var:i0> \end{verbatim} Assuming --- assuming some whole numbers $ <var:q> $ --- that we have $ <var:j> = <var:q> $ before interpreting the code segment it holds that we see $ <var:E> = <nat:4> $ when segment of code is done . \end{theorem} \begin{proof} The argument for this program is given through the following decorated program . \begin{eqnarray} \{ <var:j> = <var:q> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:j> = <var:q> \land <var:i0> = <nat:4> \} \\ <var:E> := <var:i0> \\ \{ <var:j> = <var:q> \land <var:E> = <nat:4> \} \end{eqnarray} Applying standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <var:i0> := <nat:4> ; <var:E> := <var:i0> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 