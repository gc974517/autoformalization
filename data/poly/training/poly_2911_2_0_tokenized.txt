\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:2> ; <var:X> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Allowing $ <var:e> = <var:W> $ before the evaluation of our program it must be that we have $ <var:X> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:e> = <var:W> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:e> = <var:W> \land <var:y0> = <nat:2> \} \\ <var:X> := <var:y0> \\ \{ <var:e> = <var:W> \land <var:X> = <nat:2> \} \end{eqnarray} Allowing evaluating this code gives : \begin{eqnarray} \end{eqnarray} Given the above , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:X> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 