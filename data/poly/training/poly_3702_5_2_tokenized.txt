\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given that $ <var:g> = <var:I> $ prior to evaluating this series of instructions , then $ <var:o> = <nat:2> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:1> $ after series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be demonstrated using typical Hoare reasoning . Moving onward , we have \begin{verbatim} { <var:g> = <var:I> } <var:o> := <nat:2> { <var:g> = <var:I> \land <var:o> = <nat:2> } { <var:g> = <var:I> \land <var:o> = <nat:2> } <var:o> := <nat:3> + <var:o> * <var:g> { <var:g> = <var:I> \land <var:o> = <nat:2> \times <var:I> + <nat:3> } { <var:g> = <var:I> \land <var:o> = <nat:2> \times <var:I> + <nat:3> } <var:o> := <nat:1> + <var:o> * <var:g> { <var:g> = <var:I> \land <var:o> = <nat:2> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:1> } { <var:g> = <var:I> \land <var:o> = <nat:2> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:1> } <var:o> := <nat:2> + <var:o> * <var:g> { <var:g> = <var:I> \land <var:o> = <nat:2> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:1> \times <var:I> + <nat:2> } \end{verbatim} This is sound with the environment update law from usual Hoare reasoning . Jumping to the next line found in the program , \begin{verbatim} { <var:g> = <var:I> } <var:o> := <nat:2> { <var:g> = <var:I> \land <var:o> = <nat:2> } \end{verbatim} This is known to be sound through the variable assignmet law defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:2> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:g> = <var:I> }} <def:poly> {{ <var:o> = <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:o> = <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:o> = <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:o> = <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:I> /\ <var:o> = <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 