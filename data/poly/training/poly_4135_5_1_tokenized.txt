\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:D> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:2> ; <var:k> := <var:f1> <var:k> := <var:k> + <var:f0> \end{verbatim} Allow it to be that $ <var:D> = <var:T> $ , for natural coefficients $ <var:T> $ , ahead of evaluating our code , it must be that we have $ <var:k> = <nat:2> * <var:T> + <nat:3> $ when code executes . \end{theorem} \begin{proof} The course of logic for our code is shown using standard Hoare techniques . Advancing on , we see \begin{eqnarray} \{ <var:D> = <var:T> \} \, <var:f1> := <var:D> \, \{ <var:D> = <var:T> \land <var:f1> = <var:T> \} \\ \{ <var:D> = <var:T> \land <var:f1> = <var:T> \} \, <var:f0> := <nat:3> \, \{ <var:D> = <var:T> \land <var:f1> = <var:T> \land <var:f0> = <nat:3> \} \end{eqnarray} Going forward , we see \begin{eqnarray} \{ <var:D> = <var:T> \} \, <var:f1> := <var:D> \, \{ <var:D> = <var:T> \land <var:f1> = <var:T> \} \\ \{ <var:D> = <var:T> \land <var:f1> = <var:T> \} \, <var:f0> := <nat:3> \, \{ <var:D> = <var:T> \land <var:f1> = <var:T> \land <var:f0> = <nat:3> \} \end{eqnarray} This is deduced through the rule defined by typical Hoare techniques . Advancing to the following line of code found in our series of instructions , we have \begin{eqnarray} \{ <var:D> = <var:T> \} \, <var:f1> := <var:D> \, \{ <var:D> = <var:T> \land <var:f1> = <var:T> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:D> = <var:T> }} <var:f1> := <var:D> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:2> ; <var:k> := <var:f1> <var:k> := <var:k> + <var:f0> {{ <var:k> = <nat:2> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:f1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:f1> = <var:T> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:f1> = <nat:2> * <var:T> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:f0> = <nat:3> /\ <var:k> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:T> /\ <var:k> = <nat:2> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 