\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:s1> := <var:U> ; <var:s0> := <nat:5> ; <var:s1> := <var:s1> * <nat:5> ; <var:b> := <var:s1> <var:b> := <var:b> + <var:s0> \end{verbatim} Assuming $ <var:U> = <var:R> $ before the execution of the list of commands it follows that $ <var:b> = <nat:5> \times <var:R> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is shown through Hoare logic . After , we see \verb | { <var:U> = <var:R> } <var:s1> := <var:U> { <var:U> = <var:R> \land <var:s1> = <var:R> } | , \verb | { <var:U> = <var:R> \land <var:s1> = <var:R> } <var:s0> := <nat:5> { <var:U> = <var:R> \land <var:s1> = <var:R> \land <var:s0> = <nat:5> } | , \verb | { <var:U> = <var:R> \land <var:s1> = <var:R> \land <var:s0> = <nat:5> } <var:s1> := <var:s1> * <nat:5> { <var:U> = <var:R> \land <var:s1> = <nat:5> * <var:R> \land <var:s0> = <nat:5> } | , \verb | { <var:U> = <var:R> \land <var:s1> = <nat:5> * <var:R> \land <var:s0> = <nat:5> } <var:b> := <var:s1{ <var:U> = <var:R> \land <var:s0> = <nat:5> \land <var:b> = <nat:5> * <var:R> } | and \verb | { <var:U> = <var:R> \land <var:s0> = <nat:5> \land <var:b> = <nat:5> * <var:R> } <var:b> := <var:b> + <var:s0{ <var:U> = <var:R> \land <var:b> = <nat:5> * <var:R> + <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:U> = <var:R> }} <var:s1> := <var:U> ; <var:s0> := <nat:5> ; <var:s1> := <var:s1> * <nat:5> ; <var:b> := <var:s1> <var:b> := <var:b> + <var:s0> {{ <var:b> = <nat:5> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:s1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:s1> = <var:R> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:s1> = <nat:5> * <var:R> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:s0> = <nat:5> /\ <var:b> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:b> = <nat:5> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 