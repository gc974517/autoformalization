\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:K> ; <var:a> := <var:P1> ; <var:a> := <var:a> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Given $ <var:K> = <var:m> $ prior to interpreting this list of instructions it holds that we see $ <var:a> = <nat:5> \cdot <var:m> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is demonstrated by typical Hoare techniques . Moving forward , the binding line binding $ <nat:8> $ toward $ <var:P0>$ . This line transfers the condition $ \{ <var:K> = <var:m> \} $ to the postcondition $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \} $ . Considering the subsequent bit of code contained in our code segment , the assignment code \verb | <var:P1> := <nat:5> ; | . This line advances $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \} $ toward $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:P1> = <nat:5> \} $ . This is sound with the assignment law in typical Hoare reasoning . Moving on to the upcoming line of code contained in our code segment , we see the variable update line \verb | <var:P1> := <var:P1> * <var:K> ; | . This advances $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:P1> = <nat:5> \} $ toward $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:P1> = <nat:5> \cdot <var:m> \} $ . Moving on , we have the variable update line binding $ <var:P1> $ into $ <var:a>$ . This code redefines $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:P1> = <nat:5> \cdot <var:m> \} $ as the postcondition $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:a> = <nat:5> \cdot <var:m> \} $ . This is known to be sound through the assignment scheme defined by usual Hoare reasoning . Focusing on the proceeding piece of code in our set of commands , we see the environment update code letting $ <var:a> + <var:P0$ into $ <var:a>$ . This command transfers the precondition $ \{ <var:K> = <var:m> \land <var:P0> = <nat:8> \land <var:a> = <nat:5> \cdot <var:m> \} $ as $ \{ <var:K> = <var:m> \land <var:a> = <nat:5> \cdot <var:m> + <nat:8> \} $ . This is guaranteed with the assignment rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:8> ; <var:P1> := <nat:5> ; <var:P1> := <var:P1> * <var:K> ; <var:a> := <var:P1> ; <var:a> := <var:a> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:K> = <var:m> }} <def:poly> {{ <var:a> = <nat:5> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:P0> = <nat:8> /\ <var:a> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:a> = <nat:5> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 