\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:U> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:8> ; <var:D> := <var:m1> <var:D> := <var:D> + <var:m0> \end{verbatim} Allow that $ <var:U> = <var:J> $ before running this set of instructions then we have $ <var:D> = <nat:8> * <var:J> + <nat:6> $ once set of commands has terminated . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:U> = <var:J> \} \\ <var:m1> := <var:U> ; \\ \{ <var:U> = <var:J> \land <var:m1> = <var:J> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:U> = <var:J> \land <var:m1> = <var:J> \land <var:m0> = <nat:6> \} \\ <var:m1> := <var:m1> * <nat:8> ; \\ \{ <var:U> = <var:J> \land <var:m1> = <nat:8> \cdot <var:J> \land <var:m0> = <nat:6> \} \\ <var:D> := <var:m1> \\ \{ <var:U> = <var:J> \land <var:m0> = <nat:6> \land <var:D> = <nat:8> \cdot <var:J> \} \\ <var:D> := <var:D> + <var:m0> \\ \{ <var:U> = <var:J> \land <var:D> = <nat:8> \cdot <var:J> + <nat:6> \} \end{eqnarray} The application of standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:U> = <var:J> }} <var:m1> := <var:U> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:8> ; <var:D> := <var:m1> <var:D> := <var:D> + <var:m0> {{ <var:D> = <nat:8> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:m1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:m1> = <var:J> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:m1> = <nat:8> * <var:J> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:m0> = <nat:6> /\ <var:D> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:D> = <nat:8> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 