\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:9> ; <var:Y> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:b> = <var:c> $ prior to running our series of commands , it holds that $ <var:Y> = <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is evident by Hoare reasoning . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:c> \} & <var:Q0> := <nat:9> & \{ <var:b> = <var:c> \land <var:Q0> = <nat:9> \} \\ \{ <var:b> = <var:c> \land <var:Q0> = <nat:9> \} & <var:Y> := <var:Q0& \{ <var:b> = <var:c> \land <var:Y> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:9> ; <var:Y> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:b> = <var:c> }} <def:poly> {{ <var:Y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:c> /\ <var:Y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 