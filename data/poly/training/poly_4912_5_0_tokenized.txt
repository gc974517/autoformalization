\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:8> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:d> ; <var:t> := <var:D1> ; <var:t> := <var:t> + <var:D0> \end{verbatim} Assume ( for natural coefficients $ <var:l> $ ) $ <var:d> = <var:l> $ ahead of the evaluation of this code , then we have $ <var:t> = <nat:7> \times <var:l> + <nat:8> $ when series of instructions finishes . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is clear through typical Hoare techniques . Honing in on the upcoming pieces of code in the list of instructions , we have \verb | { <var:d> = <var:l> } <var:D0> := <nat:8> { <var:d> = <var:l> \land <var:D0> = <nat:8> } | , \verb | { <var:d> = <var:l> \land <var:D0> = <nat:8> } <var:D1> := <nat:7> { <var:d> = <var:l> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> } | , \verb | { <var:d> = <var:l> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> } <var:D1> := <var:D1> * <var:d> { <var:d> = <var:l> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \cdot <var:l> } | and \verb | { <var:d> = <var:l> \land <var:D0> = <nat:8> \land <var:D1> = <nat:7> \cdot <var:l> } <var:t> := <var:D1> { <var:d> = <var:l> \land <var:D0> = <nat:8> \land <var:t> = <nat:7> \cdot <var:l> } | . Jumping to the upcoming command contained in the code segment , we have \verb | { <var:d> = <var:l> } <var:D0> := <nat:8> { <var:d> = <var:l> \land <var:D0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <var:D0> := <nat:8> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:d> ; <var:t> := <var:D1> ; <var:t> := <var:t> + <var:D0> {{ <var:t> = <nat:7> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:D0> = <nat:8> /\ <var:D1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:D0> = <nat:8> /\ <var:t> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:t> = <nat:7> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 