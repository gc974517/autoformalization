\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:F0> := <nat:2> ; <var:L> := <var:F0> \end{verbatim} Given $ <var:z> = <var:C> $ prior to interpreting this code segment , it must be that we have $ <var:L> = <nat:2> $ . \end{theorem} \begin{proof} The proof of the code segment is given through Hoare reasoning . Honing in on the upcoming lines of codein our program , we have \verb | { <var:z> = <var:C> } <var:F0> := <nat:2> { <var:z> = <var:C> \land <var:F0> = <nat:2> } | and \verb | { <var:z> = <var:C> \land <var:F0> = <nat:2> } <var:L> := <var:F0{ <var:z> = <var:C> \land <var:L> = <nat:2> } | . This is guaranteed using the environment update law obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:z> = <var:C> }} <var:F0> := <nat:2> ; <var:L> := <var:F0> {{ <var:L> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:L> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 