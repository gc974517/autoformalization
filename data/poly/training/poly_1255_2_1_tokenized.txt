\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:3> ; <var:k> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:v> = <var:g> $ --- for every natural numbers $ <var:g> $ --- before interpreting our program , it must be that $ <var:k> = <nat:3> $ after set of instructions is done executing . \end{theorem} \begin{proof} The application of Hoare reasoning results in : \begin{eqnarray} \{ <var:v> = <var:g> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:v> = <var:g> \land <var:L0> = <nat:3> \} \\ <var:k> := <var:L0> \\ \{ <var:v> = <var:g> \land <var:k> = <nat:3> \} \end{eqnarray} Thus , this program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:k> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:v> = <var:g> }} <def:poly> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 