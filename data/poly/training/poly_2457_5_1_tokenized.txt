\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:q1> := <var:J> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:1> ; <var:l> := <var:q1> <var:l> := <var:l> + <var:q0> \end{verbatim} Assuming $ <var:J> = <var:K> $ ahead of the evaluation of our list of commands , it follows that $ <var:l> = <nat:1> \cdot <var:K> + <nat:7> $ when program has terminated . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:J> = <var:K> \} \\ <var:q1> := <var:J> ; \\ \{ <var:J> = <var:K> \land <var:q1> = <var:K> \} \\ <var:q0> := <nat:7> ; \\ \{ <var:J> = <var:K> \land <var:q1> = <var:K> \land <var:q0> = <nat:7> \} \\ <var:q1> := <var:q1> * <nat:1> ; \\ \{ <var:J> = <var:K> \land <var:q1> = <nat:1> \times <var:K> \land <var:q0> = <nat:7> \} \\ <var:l> := <var:q1> \\ \{ <var:J> = <var:K> \land <var:q0> = <nat:7> \land <var:l> = <nat:1> \times <var:K> \} \\ <var:l> := <var:l> + <var:q0> \\ \{ <var:J> = <var:K> \land <var:l> = <nat:1> \times <var:K> + <nat:7> \} \end{eqnarray} As a result , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <var:q1> := <var:J> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:1> ; <var:l> := <var:q1> <var:l> := <var:l> + <var:q0> {{ <var:l> = <nat:1> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:q1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:q1> = <var:K> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:q1> = <nat:1> * <var:K> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:q0> = <nat:7> /\ <var:l> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:l> = <nat:1> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 