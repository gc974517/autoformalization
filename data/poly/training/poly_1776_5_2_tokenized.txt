\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:g> ; <var:e> := <nat:3> + <var:e> * <var:g> ; <var:e> := <nat:1> + <var:e> * <var:g> ; <var:e> := <nat:3> + <var:e> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Assuming it to hold that $ <var:g> = <var:c> $ ( given every natural numbers $ <var:c> $ ) before interpreting our series of instructions it must be that $ <var:e> = <nat:4> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:3> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:3> $ after set of instructions is done . \end{theorem} \begin{proof} The argument for this series of commands is shown using typical Hoare reasoning . Stepping forward , we see the command \verb | <var:e> := <nat:4> ; | . This moves the precondition $ \{ <var:g> = <var:c> \} $ to the condition $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \} $ . This is shown with the assignment inference rule found in usual Hoare reasoning . Observing the next line of code seen in the segment of code , the environment update line assigning $ <nat:4> + <var:e> * <var:g> $ toward $ <var:e>$ . This forwards $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \} $ to the postcondition $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> + <nat:4> \} $ . Moving forward to the next statement found in the list of commands , the statement \verb | <var:e> := <nat:3> + <var:e> * <var:g> ; | . This forwards $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> + <nat:4> \} $ to the condition $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> \} $ . This is known to be sound through the assignment law obtained from standard Hoare techniques . Going forward , the binding line \verb | <var:e> := <nat:1> + <var:e> * <var:g> ; | . This redefines $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:3> \} $ toward the condition $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:1> \} $ . This is shown with the assignment law found in typical Hoare logic . Moving on to the next step , we have the variable binding statement binding $ <nat:3> + <var:e> * <var:g$ to $ <var:e>$ . This redefines $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:1> \} $ toward $ \{ <var:g> = <var:c> \land <var:e> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + <nat:3> \} $ . This is ensured by the assignment law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:g> ; <var:e> := <nat:3> + <var:e> * <var:g> ; <var:e> := <nat:1> + <var:e> * <var:g> ; <var:e> := <nat:3> + <var:e> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:g> = <var:c> }} <def:poly> {{ <var:e> = <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:e> = <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:e> = <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:e> = <nat:4> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:e> = <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 