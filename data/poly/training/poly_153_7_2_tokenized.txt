\begin{document} \begin{theorem} We define the following series of instructions as follows \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:3> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:2> + <var:F> * <var:A> \end{verbatim} Given , for every natural coefficients $ <var:y> $ , it to hold that $ <var:A> = <var:y> $ before the evaluation of our list of instructions , it holds that we have $ <var:F> = <nat:1> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be shown by Hoare reasoning . Going forward , \begin{eqnarray} \{ <var:A> = <var:y> \} \, <var:F> := <nat:1> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \} \\ \{ <var:A> = <var:y> \land <var:F> = <nat:1> \} \, <var:F> := <nat:4> + <var:F> * <var:A> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> + <nat:4> \} \\ \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> + <nat:4> \} \, <var:F> := <nat:4> + <var:F> * <var:A> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \\ \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \, <var:F> := <nat:3> + <var:F> * <var:A> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:3> \} \end{eqnarray} Shifting focus toward the next pieces of code in the code segment , we see \begin{eqnarray} \{ <var:A> = <var:y> \} \, <var:F> := <nat:1> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \} \\ \{ <var:A> = <var:y> \land <var:F> = <nat:1> \} \, <var:F> := <nat:4> + <var:F> * <var:A> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \cdot <var:y> + <nat:4> \} \end{eqnarray} This is ensured using the law found in standard Hoare reasoning . Going forward , we have \begin{eqnarray} \{ <var:A> = <var:y> \} \, <var:F> := <nat:1> \, \{ <var:A> = <var:y> \land <var:F> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:A> = <var:y> }} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:3> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:4> + <var:F> * <var:A> ; <var:F> := <nat:2> + <var:F> * <var:A> {{ <var:F> = <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:F> = <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 