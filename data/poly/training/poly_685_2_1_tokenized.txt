\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:3> ; <var:I> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Z> = <var:X> $ --- given some positive integers $ <var:X> $ --- before evaluating this set of instructions then $ <var:I> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our series of commands can be given with usual Hoare reasoning . Observing the next commands contained in the set of instructions , \begin{verbatim} { <var:Z> = <var:X> } <var:T0> := <nat:3> { <var:Z> = <var:X> \land <var:T0> = <nat:3> } { <var:Z> = <var:X> \land <var:T0> = <nat:3> } <var:I> := <var:T0{ <var:Z> = <var:X> \land <var:I> = <nat:3> } \end{verbatim} This is deduced with the variable update law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:3> ; <var:I> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <def:poly> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 