\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:1> ; <var:r> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:y> = <var:K> $ ahead of running this set of instructions it must be that we see $ <var:r> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment can be demonstrated using standard Hoare logic . Now , the binding command binding $ <nat:1> $ toward $ <var:X0>$ . This transfers the precondition $ \{ <var:y> = <var:K> \} $ as the condition $ \{ <var:y> = <var:K> \land <var:X0> = <nat:1> \} $ . This is deduced with the assignment rule given in Hoare reasoning . Advancing , we have the assignment statement defining $ <var:X0$ toward $ <var:r>$ . This redefines the precondition $ \{ <var:y> = <var:K> \land <var:X0> = <nat:1> \} $ toward the condition $ \{ <var:y> = <var:K> \land <var:r> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:r> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:y> = <var:K> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:K> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 