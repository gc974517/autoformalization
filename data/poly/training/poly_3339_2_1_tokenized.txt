\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:Y0> := <nat:2> ; <var:N> := <var:Y0> \end{verbatim} Assume it to be that $ <var:n> = <var:u> $ ahead of interpreting the list of instructions it holds that we have $ <var:N> = <nat:2> $ when set of commands terminates . \end{theorem} \begin{proof} The proof of the set of instructions can be demonstrated with typical Hoare reasoning . Moving forward to the following pieces of code found in our list of commands , \begin{eqnarray} \{ <var:n> = <var:u> \} \, <var:Y0> := <nat:2> \, \{ <var:n> = <var:u> \land <var:Y0> = <nat:2> \} \\ \{ <var:n> = <var:u> \land <var:Y0> = <nat:2> \} \, <var:N> := <var:Y0\, \{ <var:n> = <var:u> \land <var:N> = <nat:2> \} \end{eqnarray} This is shown to be logically sound with the binding scheme of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:n> = <var:u> }} <var:Y0> := <nat:2> ; <var:N> := <var:Y0> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 