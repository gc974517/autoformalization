\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:8> ; <var:v> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Allow that we have $ <var:F> = <var:b> $ before interpreting the series of commands then we see $ <var:v> = <nat:8> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing Hoare reasoning returns : \begin{eqnarray} \{ <var:F> = <var:b> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:F> = <var:b> \land <var:Q0> = <nat:8> \} \\ <var:v> := <var:Q0> \\ \{ <var:F> = <var:b> \land <var:v> = <nat:8> \} \end{eqnarray} Thus , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:v> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:F> = <var:b> }} <def:poly> {{ <var:v> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:b> /\ <var:v> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 