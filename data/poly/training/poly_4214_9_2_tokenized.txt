\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <nat:4> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:1> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:4> + <var:p> * <var:i> ; <var:p> := <nat:3> + <var:p> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:i> = <var:B> $ prior to the execution of this series of commands then we have $ <var:p> = <nat:1> \times <var:B> ^ <nat:8> + <nat:4> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is demonstrated using standard Hoare reasoning . Paying attention to the upcoming statement found in our set of instructions , we see the line \verb | <var:p> := <nat:1> ; | . This statement moves $ \{ <var:i> = <var:B> \} $ toward the postcondition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> \} $ . Moving on to the next step , the variable update statement letting $ <nat:4> + <var:p> * <var:i> $ into $ <var:p>$ . This forwards the precondition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> \} $ into the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> + <nat:4> \} $ . Stepping forward , we see the environment update line \verb | <var:p> := <var:p> * <var:i> ; | . This code redefines the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> + <nat:4> \} $ as $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + \} $ . This is shown to be logically sound with the assignment law given in Hoare logic . Moving on to the following line of code in the list of instructions , the assignment line \verb | <var:p> := <nat:2> + <var:p> * <var:i> ; | . This moves the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + \} $ as $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> \} $ . This is sound with the assignment inference rule defined in Hoare reasoning . Stepping through , we see the environment update command \verb | <var:p> := <nat:1> + <var:p> * <var:i> ; | . This line forwards the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> \} $ into the postcondition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:1> \} $ . Honing in on the proceeding line in the set of instructions , we have the binding line assigning $ <var:p> * <var:i> $ into $ <var:p>$ . This statement forwards the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:1> \} $ as $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + \} $ . Moving forward , we see the variable update code letting $ <nat:2> + <var:p> * <var:i> $ toward $ <var:p>$ . This advances $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + \} $ to the postcondition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> \} $ . Moving on , the binding command \verb | <var:p> := <nat:4> + <var:p> * <var:i> ; | . This forwards the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> \} $ toward $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:4> \} $ . This is shown to be logically sound using the assignment law from usual Hoare techniques . Immediately following , we have the assignment command \verb | <var:p> := <nat:3> + <var:p> * <var:i> | . This command redefines the precondition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:4> \} $ to the condition $ \{ <var:i> = <var:B> \land <var:p> = <nat:1> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <nat:4> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:1> + <var:p> * <var:i> ; <var:p> := <var:p> * <var:i> ; <var:p> := <nat:2> + <var:p> * <var:i> ; <var:p> := <nat:4> + <var:p> * <var:i> ; <var:p> := <nat:3> + <var:p> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:i> = <var:B> }} <def:poly> {{ <var:p> = <nat:1> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:B> /\ <var:p> = <nat:1> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 