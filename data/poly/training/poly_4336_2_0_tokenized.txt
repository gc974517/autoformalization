\begin{document} \begin{theorem} Take the following program as \begin{verbatim} <var:M0> := <nat:6> ; <var:y> := <var:M0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:w> $ ( given every $ <var:w> $ ) ahead of interpreting this set of commands then $ <var:y> = <nat:6> $ once list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:w> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:E> = <var:w> \land <var:M0> = <nat:6> \} \end{eqnarray} Allowing the execution of the segment of code returns : \begin{eqnarray} <var:y> := <var:M0> \\ \{ <var:E> = <var:w> \land <var:y> = <nat:6> \} \end{eqnarray} Using Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:E> = <var:w> }} <var:M0> := <nat:6> ; <var:y> := <var:M0> {{ <var:y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 