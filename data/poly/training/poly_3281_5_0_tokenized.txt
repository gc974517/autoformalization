\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:O> ; <var:Y> := <var:L1> ; <var:Y> := <var:Y> + <var:L0> \end{verbatim} Allowing it to hold that $ <var:O> = <var:W> $ before running the segment of code it must be that we have $ <var:Y> = <nat:7> * <var:W> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:W> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:O> = <var:W> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:7> ; \\ \{ <var:O> = <var:W> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \} \\ <var:L1> := <var:L1> * <var:O> ; \\ \{ <var:O> = <var:W> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:W> \} \\ <var:Y> := <var:L1> ; \\ \{ <var:O> = <var:W> \land <var:L0> = <nat:4> \land <var:Y> = <nat:7> \cdot <var:W> \} \\ <var:Y> := <var:Y> + <var:L0> \\ \{ <var:O> = <var:W> \land <var:Y> = <nat:7> \cdot <var:W> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:L0> := <nat:4> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:O> ; <var:Y> := <var:L1> ; <var:Y> := <var:Y> + <var:L0> {{ <var:Y> = <nat:7> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:L0> = <nat:4> /\ <var:Y> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:Y> = <nat:7> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 