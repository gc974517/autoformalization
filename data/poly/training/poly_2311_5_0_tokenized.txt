\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:B0> := <nat:2> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:q> ; <var:d> := <var:B1> ; <var:d> := <var:d> + <var:B0> \end{verbatim} Assume that $ <var:q> = <var:C> $ ahead of executing the program , it follows that $ <var:d> = <nat:2> * <var:C> + <nat:2> $ once code has terminated . \end{theorem} \begin{proof} Proving correctness for this list of commands can be seen by Hoare techniques . Taking another step toward the next statement in the series of commands , we see the environment update code \verb | <var:B0> := <nat:2> ; | . This line forwards the precondition $ \{ <var:q> = <var:C> \} $ toward the postcondition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \} $ . This is ensured with the assignment rule found in standard Hoare techniques . Honing in on the proceeding step found in the list of instructions , we see the binding statement \verb | <var:B1> := <nat:2> ; | . This transfers $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \} $ as the postcondition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \} $ . This is shown to be logically sound with the assignment rule defined by Hoare logic . Moving forward to the upcoming step seen in the set of commands , the statement letting $ <var:B1> * <var:q> $ as $ <var:B1>$ . This line advances $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \} $ as the condition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> * <var:C> \} $ . Further , we have the binding command \verb | <var:d> := <var:B1> ; | . This advances the condition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> * <var:C> \} $ toward the condition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:d> = <nat:2> * <var:C> \} $ . Now , we see the environment update line giving $ <var:d> + <var:B0$ as $ <var:d>$ . This line redefines the precondition $ \{ <var:q> = <var:C> \land <var:B0> = <nat:2> \land <var:d> = <nat:2> * <var:C> \} $ to $ \{ <var:q> = <var:C> \land <var:d> = <nat:2> * <var:C> + <nat:2> \} $ . This is given by the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:q> = <var:C> }} <var:B0> := <nat:2> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:q> ; <var:d> := <var:B1> ; <var:d> := <var:d> + <var:B0> {{ <var:d> = <nat:2> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:B0> = <nat:2> /\ <var:d> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:d> = <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 