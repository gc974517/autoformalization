\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:q1> := <var:C> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:k> := <var:q1> <var:k> := <var:k> + <var:q0> \end{verbatim} Given that $ <var:C> = <var:O> $ before the evaluation of this set of instructions it holds that $ <var:k> = <nat:4> \times <var:O> + <nat:2> $ when set of commands has finished . \end{theorem} \begin{proof} Using usual Hoare techniques produces : \begin{eqnarray} \{ <var:C> = <var:O> \} \\ <var:q1> := <var:C> ; \\ \{ <var:C> = <var:O> \land <var:q1> = <var:O> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:C> = <var:O> \land <var:q1> = <var:O> \land <var:q0> = <nat:2> \} \\ <var:q1> := <var:q1> * <nat:4> ; \\ \{ <var:C> = <var:O> \land <var:q1> = <nat:4> * <var:O> \land <var:q0> = <nat:2> \} \\ <var:k> := <var:q1> \\ \{ <var:C> = <var:O> \land <var:q0> = <nat:2> \land <var:k> = <nat:4> * <var:O> \} \\ <var:k> := <var:k> + <var:q0> \\ \{ <var:C> = <var:O> \land <var:k> = <nat:4> * <var:O> + <nat:2> \} \end{eqnarray} Furthering running this list of commands yields : \begin{eqnarray} \end{eqnarray} Thusly , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:C> = <var:O> }} <var:q1> := <var:C> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:k> := <var:q1> <var:k> := <var:k> + <var:q0> {{ <var:k> = <nat:4> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:q1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:q1> = <var:O> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:q1> = <nat:4> * <var:O> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:q0> = <nat:2> /\ <var:k> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:k> = <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 