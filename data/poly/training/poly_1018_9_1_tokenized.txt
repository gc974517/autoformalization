\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:h> ; <var:G2> := <var:G1> * <var:h> ; <var:G3> := <var:G2> * <var:h> ; <var:G0> := <nat:3> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:3> ; <var:I> := <var:G3> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assuming $ <var:h> = <var:y> $ , for every integers $ <var:y> $ , before evaluating this list of instructions it holds that we see $ <var:I> = <nat:3> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:3> $ once list of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:y> \} \\ <var:G1> := <var:h> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \} \\ <var:G2> := <var:G1> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:h> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:G2> := <var:G2> * <nat:3> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:G3> = <var:y> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:G3> := <var:G3> * <nat:3> ; \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:G3> = <nat:3> \cdot <var:y> ^ <nat:3> \land <var:G0> = <nat:3> \} \\ <var:I> := <var:G3> \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:G0> = <nat:3> \land <var:I> = <nat:3> \cdot <var:y> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:G2> \\ \{ <var:h> = <var:y> \land <var:G1> = <var:y> \land <var:G0> = <nat:3> \land <var:I> = <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:G0> \\ \{ <var:h> = <var:y> \land <var:I> = <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:h> ; <var:G2> := <var:G1> * <var:h> ; <var:G3> := <var:G2> * <var:h> ; <var:G0> := <nat:3> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:3> ; <var:I> := <var:G3> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:h> = <var:y> }} <def:poly> {{ <var:I> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:G3> = <var:y> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:G3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:G0> = <nat:3> /\ <var:I> = <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:G1> = <var:y> /\ <var:G0> = <nat:3> /\ <var:I> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:y> /\ <var:I> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 