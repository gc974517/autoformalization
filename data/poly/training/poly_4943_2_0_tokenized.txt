\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:3> ; <var:U> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:t> = <var:e> $ ahead of interpreting the series of instructions , it must be that we see $ <var:U> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is evident using usual Hoare techniques . Moving forward , \[ \begin{tabular} {rcl} \{ <var:t> = <var:e> \} & <var:f0> := <nat:3> & \{ <var:t> = <var:e> \land <var:f0> = <nat:3> \} \end{tabular} This is guaranteed through the inference rule defined by standard Hoare techniques . Observing the following line of code seen in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:e> \} & <var:f0> := <nat:3> & \{ <var:t> = <var:e> \land <var:f0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:3> ; <var:U> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:t> = <var:e> }} <def:poly> {{ <var:U> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:e> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:e> /\ <var:U> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 