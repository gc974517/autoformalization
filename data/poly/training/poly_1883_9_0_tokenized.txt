\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:w> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:w> ; <var:S2> := <var:S2> * <var:w> ; <var:Y> := <var:S2> ; <var:Y> := <var:Y> + <var:S1> ; <var:Y> := <var:Y> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assume ( taking positive coefficients $ <var:y> $ ) $ <var:w> = <var:y> $ prior to executing this list of commands , then we see $ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:6> $ after list of commands has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:w> = <var:y> \} \\ <var:S0> := <nat:6> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \} \\ <var:S1> := <nat:9> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} \\ <var:S1> := <var:S1> * <var:w> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:y> \} \\ <var:S2> := <nat:3> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:y> \land <var:S2> = <nat:3> \} \\ <var:S2> := <var:S2> * <var:w> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:y> \land <var:S2> = <nat:3> \times <var:y> \} \\ <var:S2> := <var:S2> * <var:w> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:y> \land <var:S2> = <nat:3> \times <var:y> ^ <nat:2> \} \end{eqnarray} Continuing interpreting our list of commands returns : \begin{eqnarray} <var:Y> := <var:S2> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:y> \land <var:Y> = <nat:3> \times <var:y> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:S1> ; \\ \{ <var:w> = <var:y> \land <var:S0> = <nat:6> \land <var:Y> = <nat:3> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> \} \\ <var:Y> := <var:Y> + <var:S0> \\ \{ <var:w> = <var:y> \land <var:Y> = <nat:3> \times <var:y> ^ <nat:2> + <nat:9> \times <var:y> + <nat:6> \} \end{eqnarray} Hence , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:w> ; <var:S2> := <nat:3> ; <var:S2> := <var:S2> * <var:w> ; <var:S2> := <var:S2> * <var:w> ; <var:Y> := <var:S2> ; <var:Y> := <var:Y> + <var:S1> ; <var:Y> := <var:Y> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:w> = <var:y> }} <def:poly> {{ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:y> /\ <var:S2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:y> /\ <var:S2> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:y> /\ <var:S2> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:y> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:S0> = <nat:6> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:y> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 