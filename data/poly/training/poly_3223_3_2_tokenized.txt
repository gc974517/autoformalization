\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:1> + <var:c> * <var:m> ; <var:c> := <nat:2> + <var:c> * <var:m> \end{verbatim} Assuming --- given positive coefficients $ <var:d> $ --- it to be that $ <var:m> = <var:d> $ prior to the execution of our list of instructions then we have $ <var:c> = <nat:2> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be seen using Hoare logic . Taking a look at the proceeding bit of code contained in our program , we have the assignment command giving $ <nat:2> $ toward $ <var:c>$ . This command takes $ \{ <var:m> = <var:d> \} $ toward the condition $ \{ <var:m> = <var:d> \land <var:c> = <nat:2> \} $ . This is given using the assignment rule obtained from typical Hoare techniques . Honing in on the upcoming line of code contained in our list of instructions , we see the statement \verb | <var:c> := <nat:1> + <var:c> * <var:m> ; | . This statement forwards the precondition $ \{ <var:m> = <var:d> \land <var:c> = <nat:2> \} $ to the condition $ \{ <var:m> = <var:d> \land <var:c> = <nat:2> \times <var:d> + <nat:1> \} $ . This is rigorously given with the assignment inference rule found in Hoare reasoning . Moving on to the following piece of code in our program , the environment update command binding $ <nat:2> + <var:c> * <var:m$ into $ <var:c>$ . This statement forwards the precondition $ \{ <var:m> = <var:d> \land <var:c> = <nat:2> \times <var:d> + <nat:1> \} $ as the condition $ \{ <var:m> = <var:d> \land <var:c> = <nat:2> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:m> = <var:d> }} <var:c> := <nat:2> ; <var:c> := <nat:1> + <var:c> * <var:m> ; <var:c> := <nat:2> + <var:c> * <var:m> {{ <var:c> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:c> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:c> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 