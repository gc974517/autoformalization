\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:c> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:P> := <var:W1> <var:P> := <var:P> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:c> = <var:y> $ before evaluating our set of commands it must be that we have $ <var:P> = <nat:6> \times <var:y> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:c> = <var:y> \} \\ <var:W1> := <var:c> ; \\ \{ <var:c> = <var:y> \land <var:W1> = <var:y> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:c> = <var:y> \land <var:W1> = <var:y> \land <var:W0> = <nat:1> \} \\ <var:W1> := <var:W1> * <nat:6> ; \\ \{ <var:c> = <var:y> \land <var:W1> = <nat:6> \times <var:y> \land <var:W0> = <nat:1> \} \\ <var:P> := <var:W1> \\ \{ <var:c> = <var:y> \land <var:W0> = <nat:1> \land <var:P> = <nat:6> \times <var:y> \} \\ <var:P> := <var:P> + <var:W0> \\ \{ <var:c> = <var:y> \land <var:P> = <nat:6> \times <var:y> + <nat:1> \} \end{eqnarray} Therefore , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:c> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:P> := <var:W1> <var:P> := <var:P> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:c> = <var:y> }} <def:poly> {{ <var:P> = <nat:6> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:W1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:W1> = <var:y> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:W1> = <nat:6> * <var:y> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:W0> = <nat:1> /\ <var:P> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:P> = <nat:6> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 