\begin{document} \begin{theorem} Define a set of instructions as \begin{verbatim} <var:M1> := <var:r> ; <var:M2> := <var:M1> * <var:r> ; <var:M3> := <var:M2> * <var:r> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:1> ; <var:e> := <var:M3> <var:e> := <var:e> + <var:M2> <var:e> := <var:e> + <var:M1> <var:e> := <var:e> + <var:M0> \end{verbatim} Assuming ( for any $ <var:t> \in \mathbb{Z}^+ $ ) that we have $ <var:r> = <var:t> $ ahead of running the list of commands then we have $ <var:e> = <nat:1> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:t> \} \\ <var:M1> := <var:r> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <var:t> \} \\ <var:M2> := <var:M1> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \} \end{eqnarray} Furthering running our series of commands yields : \begin{eqnarray} <var:M3> := <var:M2> * <var:r> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M0> = <nat:5> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <nat:4> \times <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M0> = <nat:5> \} \\ <var:M2> := <var:M2> * <nat:6> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <nat:4> \times <var:t> \land <var:M2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M0> = <nat:5> \} \\ <var:M3> := <var:M3> * <nat:1> ; \\ \{ <var:r> = <var:t> \land <var:M1> = <nat:4> \times <var:t> \land <var:M2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:M3> = <nat:1> \times <var:t> ^ <nat:3> \land <var:M0> = <nat:5> \} \\ <var:e> := <var:M3> \\ \{ <var:r> = <var:t> \land <var:M1> = <nat:4> \times <var:t> \land <var:M2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:M0> = <nat:5> \land <var:e> = <nat:1> \times <var:t> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:M2> \\ \{ <var:r> = <var:t> \land <var:M1> = <nat:4> \times <var:t> \land <var:M0> = <nat:5> \land <var:e> = <nat:1> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:M1> \\ \{ <var:r> = <var:t> \land <var:M0> = <nat:5> \land <var:e> = <nat:1> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> \} \\ <var:e> := <var:e> + <var:M0> \\ \{ <var:r> = <var:t> \land <var:e> = <nat:1> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:5> \} \end{eqnarray} Utilizing Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <var:M1> := <var:r> ; <var:M2> := <var:M1> * <var:r> ; <var:M3> := <var:M2> * <var:r> ; <var:M0> := <nat:5> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:1> ; <var:e> := <var:M3> <var:e> := <var:e> + <var:M2> <var:e> := <var:e> + <var:M1> <var:e> := <var:e> + <var:M0> {{ <var:e> = <nat:1> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <nat:4> * <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <nat:4> * <var:t> /\ <var:M2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <nat:4> * <var:t> /\ <var:M2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:t> ^ <nat:3> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <nat:4> * <var:t> /\ <var:M2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:M0> = <nat:5> /\ <var:e> = <nat:1> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M1> = <nat:4> * <var:t> /\ <var:M0> = <nat:5> /\ <var:e> = <nat:1> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M0> = <nat:5> /\ <var:e> = <nat:1> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:e> = <nat:1> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 