\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:h> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:3> ; <var:C> := <var:s1> <var:C> := <var:C> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allowing ( for all positive coefficients $ <var:O> $ ) it to hold that $ <var:h> = <var:O> $ ahead of executing the set of instructions , then we see $ <var:C> = <nat:3> \times <var:O> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is shown by usual Hoare reasoning . Moving forward to the next step , we see the code \verb | <var:s1> := <var:h> ; | . This moves the precondition $ \{ <var:h> = <var:O> \} $ toward the condition $ \{ <var:h> = <var:O> \land <var:s1> = <var:O> \} $ . Taking a look at the proceeding statement found in our segment of code , we see the variable binding code assigning $ <nat:4> $ to $ <var:s0>$ . This redefines the condition $ \{ <var:h> = <var:O> \land <var:s1> = <var:O> \} $ toward $ \{ <var:h> = <var:O> \land <var:s1> = <var:O> \land <var:s0> = <nat:4> \} $ . Considering the subsequent piece of code in the set of commands , we have the environment update command \verb | <var:s1> := <var:s1> * <nat:3> ; | . This line transfers the condition $ \{ <var:h> = <var:O> \land <var:s1> = <var:O> \land <var:s0> = <nat:4> \} $ toward the postcondition $ \{ <var:h> = <var:O> \land <var:s1> = <nat:3> \cdot <var:O> \land <var:s0> = <nat:4> \} $ . This is known to be sound through the assignment rule defined by standard Hoare logic . Moving forward to the next step , we have the environment update code giving $ <var:s1$ as $ <var:C>$ . This line redefines the precondition $ \{ <var:h> = <var:O> \land <var:s1> = <nat:3> \cdot <var:O> \land <var:s0> = <nat:4> \} $ to the postcondition $ \{ <var:h> = <var:O> \land <var:s0> = <nat:4> \land <var:C> = <nat:3> \cdot <var:O> \} $ . Paying attention to the subsequent statement seen in the set of commands , we see the environment update code assigning $ <var:C> + <var:s0$ as $ <var:C>$ . This code forwards the condition $ \{ <var:h> = <var:O> \land <var:s0> = <nat:4> \land <var:C> = <nat:3> \cdot <var:O> \} $ as the postcondition $ \{ <var:h> = <var:O> \land <var:C> = <nat:3> \cdot <var:O> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s1> := <var:h> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:3> ; <var:C> := <var:s1> <var:C> := <var:C> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:h> = <var:O> }} <def:poly> {{ <var:C> = <nat:3> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:s1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:s1> = <var:O> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:s1> = <nat:3> * <var:O> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:s0> = <nat:4> /\ <var:C> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:C> = <nat:3> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 