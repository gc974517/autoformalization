\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:1> ; <var:K> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assuming that $ <var:L> = <var:E> $ prior to interpreting our series of commands , it follows that $ <var:K> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is shown using Hoare reasoning . Advancing to the next step , we have the variable update command \verb | <var:d0> := <nat:1> ; | . This advances $ \{ <var:L> = <var:E> \} $ to $ \{ <var:L> = <var:E> \land <var:d0> = <nat:1> \} $ . This is shown with the assignment law given in Hoare reasoning . Looking at the next step in the set of instructions , the environment update statement letting $ <var:d0$ toward $ <var:K>$ . This forwards the condition $ \{ <var:L> = <var:E> \land <var:d0> = <nat:1> \} $ into the postcondition $ \{ <var:L> = <var:E> \land <var:K> = <nat:1> \} $ . This is sound by the assignment law from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:K> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <def:poly> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 