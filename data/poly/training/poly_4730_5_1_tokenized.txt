\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:Z1> := <var:H> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:P> := <var:Z1> <var:P> := <var:P> + <var:Z0> \end{verbatim} Assuming it to hold that $ <var:H> = <var:k> $ before executing the series of commands , then we have $ <var:P> = <nat:7> * <var:k> + <nat:4> $ once code segment has terminated . \end{theorem} \begin{proof} The proof of this list of commands can be accomplished by usual Hoare logic . Jumping to the following bit of code in our set of instructions , we see the binding command defining $ <var:H> $ toward $ <var:Z1>$ . This redefines the precondition $ \{ <var:H> = <var:k> \} $ as the postcondition $ \{ <var:H> = <var:k> \land <var:Z1> = <var:k> \} $ . This is guaranteed through the assignment scheme defined by standard Hoare reasoning . Moving on , we see the binding code letting $ <nat:4> $ toward $ <var:Z0>$ . This statement redefines the precondition $ \{ <var:H> = <var:k> \land <var:Z1> = <var:k> \} $ as the postcondition $ \{ <var:H> = <var:k> \land <var:Z1> = <var:k> \land <var:Z0> = <nat:4> \} $ . This is shown to be logically sound by the assignment scheme of Hoare techniques . Moving forward to the following line of code contained in our series of commands , we see the variable binding line giving $ <var:Z1> * <nat:7> $ as $ <var:Z1>$ . This command advances $ \{ <var:H> = <var:k> \land <var:Z1> = <var:k> \land <var:Z0> = <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:k> \land <var:Z1> = <nat:7> \times <var:k> \land <var:Z0> = <nat:4> \} $ . This is guaranteed through the assignment scheme obtained from standard Hoare techniques . Moving on to the subsequent command in the code , we have the binding statement giving $ <var:Z1$ into $ <var:P>$ . This code advances the precondition $ \{ <var:H> = <var:k> \land <var:Z1> = <nat:7> \times <var:k> \land <var:Z0> = <nat:4> \} $ to the postcondition $ \{ <var:H> = <var:k> \land <var:Z0> = <nat:4> \land <var:P> = <nat:7> \times <var:k> \} $ . Keeping momentum , we have the code binding $ <var:P> + <var:Z0$ as $ <var:P>$ . This command forwards the precondition $ \{ <var:H> = <var:k> \land <var:Z0> = <nat:4> \land <var:P> = <nat:7> \times <var:k> \} $ into the postcondition $ \{ <var:H> = <var:k> \land <var:P> = <nat:7> \times <var:k> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <var:Z1> := <var:H> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:7> ; <var:P> := <var:Z1> <var:P> := <var:P> + <var:Z0> {{ <var:P> = <nat:7> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:Z1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:Z1> = <var:k> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:Z1> = <nat:7> * <var:k> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:Z0> = <nat:4> /\ <var:P> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:P> = <nat:7> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 