\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:6> ; <var:d> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing for any positive integers $ <var:o> $ it to be that $ <var:E> = <var:o> $ prior to evaluating this set of commands , it follows that $ <var:d> = <nat:6> $ . \end{theorem} \begin{proof} The argument for this segment of code can be given using typical Hoare reasoning . Observing the subsequent command contained in the set of commands , we see \begin{eqnarray} \{ <var:E> = <var:o> \} \, <var:k0> := <nat:6> \, \{ <var:E> = <var:o> \land <var:k0> = <nat:6> \} \end{eqnarray} Advancing on , we have \begin{eqnarray} \{ <var:E> = <var:o> \} \, <var:k0> := <nat:6> \, \{ <var:E> = <var:o> \land <var:k0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:d> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:E> = <var:o> }} <def:poly> {{ <var:d> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:o> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:o> /\ <var:d> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 