\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:6> ; <var:C1> := <nat:7> ; <var:C1> := <var:C1> * <var:y> ; <var:m> := <var:C1> ; <var:m> := <var:m> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allow that $ <var:y> = <var:J> $ ahead of executing the list of commands , it must be that we see $ <var:m> = <nat:7> \cdot <var:J> + <nat:6> $ after list of commands is done . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:J> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:y> = <var:J> \land <var:C0> = <nat:6> \} \\ <var:C1> := <nat:7> ; \\ \{ <var:y> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:7> \} \\ <var:C1> := <var:C1> * <var:y> ; \\ \{ <var:y> = <var:J> \land <var:C0> = <nat:6> \land <var:C1> = <nat:7> \cdot <var:J> \} \\ <var:m> := <var:C1> ; \\ \{ <var:y> = <var:J> \land <var:C0> = <nat:6> \land <var:m> = <nat:7> \cdot <var:J> \} \\ <var:m> := <var:m> + <var:C0> \\ \{ <var:y> = <var:J> \land <var:m> = <nat:7> \cdot <var:J> + <nat:6> \} \end{eqnarray} Hence , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:6> ; <var:C1> := <nat:7> ; <var:C1> := <var:C1> * <var:y> ; <var:m> := <var:C1> ; <var:m> := <var:m> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:y> = <var:J> }} <def:poly> {{ <var:m> = <nat:7> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:C0> = <nat:6> /\ <var:C1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:C0> = <nat:6> /\ <var:m> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:m> = <nat:7> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 