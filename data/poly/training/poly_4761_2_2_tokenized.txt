\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <nat:3> + <var:T> * <var:W> \end{verbatim} Allowing that $ <var:W> = <var:k> $ ahead of running the segment of code , it must be that $ <var:T> = <nat:1> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this code is demonstrated using usual Hoare logic . Paying attention to the proceeding statement found in our list of instructions , we have \begin{eqnarray} \{ <var:W> = <var:k> \} \, <var:T> := <nat:1> \, \{ <var:W> = <var:k> \land <var:T> = <nat:1> \} \end{eqnarray} Moving forward to the following line seen in our code , we see \begin{eqnarray} \{ <var:W> = <var:k> \} \, <var:T> := <nat:1> \, \{ <var:W> = <var:k> \land <var:T> = <nat:1> \} \end{eqnarray} This is shown to be logically sound through the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:W> = <var:k> }} <var:T> := <nat:1> ; <var:T> := <nat:3> + <var:T> * <var:W> {{ <var:T> = <nat:1> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:k> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:k> /\ <var:T> = <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 