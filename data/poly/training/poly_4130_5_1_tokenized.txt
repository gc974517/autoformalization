\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:q> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:9> ; <var:Y> := <var:G1> <var:Y> := <var:Y> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:q> = <var:d> $ ( for every positive numbers $ <var:d> $ ) before running the set of instructions it follows that we have $ <var:Y> = <nat:9> \times <var:d> + <nat:9> $ once code finishes . \end{theorem} \begin{proof} The proof of this set of commands is accomplished using usual Hoare logic . Moving on , we see \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:G1> := <var:q> \, \{ <var:q> = <var:d> \land <var:G1> = <var:d> \} \end{eqnarray} This is deduced through the binding rule defined by standard Hoare techniques . Considering the following bits of codeseen in our list of instructions , \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:G1> := <var:q> \, \{ <var:q> = <var:d> \land <var:G1> = <var:d> \} \\ \{ <var:q> = <var:d> \land <var:G1> = <var:d> \} \, <var:G0> := <nat:9> \, \{ <var:q> = <var:d> \land <var:G1> = <var:d> \land <var:G0> = <nat:9> \} \\ \{ <var:q> = <var:d> \land <var:G1> = <var:d> \land <var:G0> = <nat:9> \} \, <var:G1> := <var:G1> * <nat:9> \, \{ <var:q> = <var:d> \land <var:G1> = <nat:9> \times <var:d> \land <var:G0> = <nat:9> \} \end{eqnarray} This is shown to be logically sound using the variable binding law found in usual Hoare reasoning . Moving on to the proceeding command found in our list of commands , we see \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:G1> := <var:q> \, \{ <var:q> = <var:d> \land <var:G1> = <var:d> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:q> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:9> ; <var:Y> := <var:G1> <var:Y> := <var:Y> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:q> = <var:d> }} <def:poly> {{ <var:Y> = <nat:9> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:G1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:G1> = <var:d> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:G1> = <nat:9> * <var:d> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:G0> = <nat:9> /\ <var:Y> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:Y> = <nat:9> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 