\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:4> ; <var:I> := <var:B0> \end{verbatim} Given ( given some $ <var:h> \in \mathbb{Z}^+ $ ) that $ <var:n> = <var:h> $ prior to evaluating our set of commands then $ <var:I> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be demonstrated with typical Hoare logic . Next , we see \verb | { <var:n> = <var:h> } <var:B0> := <nat:4> { <var:n> = <var:h> \land <var:B0> = <nat:4> } | . This is known to be sound with the variable binding rule given by standard Hoare reasoning . Moving forward to the next line of code contained in the list of commands , \verb | { <var:n> = <var:h> } <var:B0> := <nat:4> { <var:n> = <var:h> \land <var:B0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:n> = <var:h> }} <var:B0> := <nat:4> ; <var:I> := <var:B0> {{ <var:I> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:I> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 