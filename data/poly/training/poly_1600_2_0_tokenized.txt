\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:2> ; <var:O> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assuming --- given any $ <var:S> $ --- it to be that $ <var:m> = <var:S> $ ahead of executing our series of commands , it follows that $ <var:O> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the code is evident using the following decorated program . \begin{eqnarray} \{ <var:m> = <var:S> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:m> = <var:S> \land <var:A0> = <nat:2> \} \\ <var:O> := <var:A0> \\ \{ <var:m> = <var:S> \land <var:O> = <nat:2> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:2> ; <var:O> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:m> = <var:S> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 