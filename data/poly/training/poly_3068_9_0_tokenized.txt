\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:a> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:a> ; <var:e2> := <var:e2> * <var:a> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:a> = <var:b> $ for every natural numbers $ <var:b> $ before running this set of commands then $ <var:j> = <nat:7> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be done using Hoare logic . Advancing on , we see the variable assignmet command yielding $ <nat:2> $ to $ <var:e0>$ . This moves the precondition $ \{ <var:a> = <var:b> \} $ to the postcondition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \} $ . Paying attention to the upcoming command contained in the program , we see the environment update line letting $ <nat:5> $ into $ <var:e1>$ . This statement takes the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \} $ into the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \} $ . This is guaranteed by the assignment rule defined by typical Hoare techniques . Stepping forward , we have the assignment statement \verb | <var:e1> := <var:e1> * <var:a> ; | . This code advances the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \} $ toward the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \} $ . This is shown by the assignment law given in standard Hoare logic . Looking at the proceeding statement seen in our series of commands , the variable assignmet code giving $ <nat:7> $ to $ <var:e2>$ . This forwards the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \} $ toward the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \} $ . Paying attention to the following command contained in our list of commands , we see the variable assignmet code \verb | <var:e2> := <var:e2> * <var:a> ; | . This command transfers the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \} $ into $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \times <var:b> \} $ . Looking at the following bit of code contained in the set of instructions , the variable binding command yielding $ <var:e2> * <var:a> $ toward $ <var:e2>$ . This command forwards the precondition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \times <var:b> \} $ into the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \times <var:b> ^ <nat:2> \} $ . Taking a look at the next statement seen in the series of commands , the variable assignmet code defining $ <var:e2> $ to $ <var:j>$ . This command advances $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:e2> = <nat:7> \times <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:j> = <nat:7> \times <var:b> ^ <nat:2> \} $ . After , we see the variable assignmet line \verb | <var:j> := <var:j> + <var:e1> ; | . This transfers $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:b> \land <var:j> = <nat:7> \times <var:b> ^ <nat:2> \} $ to the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:j> = <nat:7> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> \} $ . Shifting focus toward the upcoming step seen in our segment of code , we see the binding line defining $ <var:j> + <var:e0$ to $ <var:j>$ . This moves the condition $ \{ <var:a> = <var:b> \land <var:e0> = <nat:2> \land <var:j> = <nat:7> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> \} $ toward $ \{ <var:a> = <var:b> \land <var:j> = <nat:7> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:a> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:a> ; <var:e2> := <var:e2> * <var:a> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:a> = <var:b> }} <def:poly> {{ <var:j> = <nat:7> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:b> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:b> /\ <var:e2> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:b> /\ <var:e2> = <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:b> /\ <var:j> = <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:e0> = <nat:2> /\ <var:j> = <nat:7> * <var:b> ^ <nat:2> + <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:b> /\ <var:j> = <nat:7> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 