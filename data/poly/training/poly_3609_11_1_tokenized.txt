\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:c> ; <var:m2> := <var:m1> * <var:c> ; <var:m3> := <var:m2> * <var:c> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:1> ; <var:v> := <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:c> = <var:R> $ ( assuming some integers $ <var:R> $ ) prior to interpreting this list of commands , then we have $ <var:v> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:5> $ after code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:R> \} \\ <var:m1> := <var:c> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <var:R> \} \\ <var:m2> := <var:m1> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <var:R> \land <var:m2> = <var:R> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:c> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <var:R> \land <var:m2> = <var:R> ^ <nat:2> \land <var:m3> = <var:R> ^ <nat:3> \} \\ <var:m0> := <nat:5> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <var:R> \land <var:m2> = <var:R> ^ <nat:2> \land <var:m3> = <var:R> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:m1> := <var:m1> * <nat:2> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <nat:2> \cdot <var:R> \land <var:m2> = <var:R> ^ <nat:2> \land <var:m3> = <var:R> ^ <nat:3> \land <var:m0> = <nat:5> \} \end{eqnarray} Furthering the execution of this segment of code returns : \begin{eqnarray} <var:m2> := <var:m2> * <nat:6> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <nat:2> \cdot <var:R> \land <var:m2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:m3> = <var:R> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:m3> := <var:m3> * <nat:1> ; \\ \{ <var:c> = <var:R> \land <var:m1> = <nat:2> \cdot <var:R> \land <var:m2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:R> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ <var:v> := <var:m3> \\ \{ <var:c> = <var:R> \land <var:m1> = <nat:2> \cdot <var:R> \land <var:m2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:m0> = <nat:5> \land <var:v> = <nat:1> \cdot <var:R> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:m2> \\ \{ <var:c> = <var:R> \land <var:m1> = <nat:2> \cdot <var:R> \land <var:m0> = <nat:5> \land <var:v> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:m1> \\ \{ <var:c> = <var:R> \land <var:m0> = <nat:5> \land <var:v> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> \} \end{eqnarray} Advancing the evaluation of this segment of code yields : \begin{eqnarray} <var:v> := <var:v> + <var:m0> \\ \{ <var:c> = <var:R> \land <var:v> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:5> \} \end{eqnarray} Using typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:c> ; <var:m2> := <var:m1> * <var:c> ; <var:m3> := <var:m2> * <var:c> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:2> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:1> ; <var:v> := <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:c> = <var:R> }} <def:poly> {{ <var:v> = <nat:1> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <var:R> /\ <var:m2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <var:R> /\ <var:m2> = <var:R> ^ <nat:2> /\ <var:m3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <var:R> /\ <var:m2> = <var:R> ^ <nat:2> /\ <var:m3> = <var:R> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <nat:2> * <var:R> /\ <var:m2> = <var:R> ^ <nat:2> /\ <var:m3> = <var:R> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <nat:2> * <var:R> /\ <var:m2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:m3> = <var:R> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <nat:2> * <var:R> /\ <var:m2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:R> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <nat:2> * <var:R> /\ <var:m2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:m0> = <nat:5> /\ <var:v> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m1> = <nat:2> * <var:R> /\ <var:m0> = <nat:5> /\ <var:v> = <nat:1> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:m0> = <nat:5> /\ <var:v> = <nat:1> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:R> /\ <var:v> = <nat:1> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 