\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:3> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:S> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:S> ; <var:B2> := <var:B2> * <var:S> ; <var:P> := <var:B2> ; <var:P> := <var:P> + <var:B1> ; <var:P> := <var:P> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:S> = <var:g> $ ( assuming some natural numbers $ <var:g> $ ) prior to interpreting our series of instructions then we see $ <var:P> = <nat:7> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> $ after series of commands has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be done through Hoare logic . Observing the following line of code contained in the program , \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:B0> := <nat:3> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \end{eqnarray} Observing the subsequent lines found in the series of instructions , we see \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:B0> := <nat:3> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \, <var:B1> := <nat:7> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \} \end{eqnarray} This is known to be sound through the binding scheme given by Hoare reasoning . Following , we have \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:B0> := <nat:3> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \, <var:B1> := <nat:7> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \} \end{eqnarray} This is deduced through the variable binding rule obtained from standard Hoare techniques . Advancing to the next step , we have \begin{eqnarray} \{ <var:S> = <var:g> \} \, <var:B0> := <nat:3> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \\ \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \} \, <var:B1> := <nat:7> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \} \\ \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \} \, <var:B1> := <var:B1> * <var:S> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \cdot <var:g> \} \\ \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \cdot <var:g> \} \, <var:B2> := <nat:7> \, \{ <var:S> = <var:g> \land <var:B0> = <nat:3> \land <var:B1> = <nat:7> \cdot <var:g> \land <var:B2> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:B1> := <nat:7> ; <var:B1> := <var:B1> * <var:S> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:S> ; <var:B2> := <var:B2> * <var:S> ; <var:P> := <var:B2> ; <var:P> := <var:P> + <var:B1> ; <var:P> := <var:P> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <def:poly> {{ <var:P> = <nat:7> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> * <var:g> /\ <var:B2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> * <var:g> /\ <var:B2> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> * <var:g> /\ <var:B2> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:7> * <var:g> /\ <var:P> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:B0> = <nat:3> /\ <var:P> = <nat:7> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:P> = <nat:7> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 