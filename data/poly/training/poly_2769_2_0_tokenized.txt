\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:5> ; <var:P> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:q> = <var:h> $ ahead of evaluating this set of commands , it must be that we have $ <var:P> = <nat:5> $ when code segment has finished . \end{theorem} \begin{proof} See that the following decorated series of commands . \begin{eqnarray} \{ <var:q> = <var:h> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:q> = <var:h> \land <var:y0> = <nat:5> \} \\ <var:P> := <var:y0> \\ \{ <var:q> = <var:h> \land <var:P> = <nat:5> \} \end{eqnarray} Applying typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:P> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <def:poly> {{ <var:P> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:P> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 