\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:l> ; <var:S> := <nat:2> + <var:S> * <var:l> ; <var:S> := <nat:1> + <var:S> * <var:l> ; <var:S> := <nat:3> + <var:S> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allow it to be that $ <var:l> = <var:r> $ before evaluating the series of commands it must be that we see $ <var:S> = <nat:2> \cdot <var:r> ^ <nat:4> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:l> = <var:r> \} \\ <var:S> := <nat:2> ; \\ \{ <var:l> = <var:r> \land <var:S> = <nat:2> \} \\ <var:S> := <nat:3> + <var:S> * <var:l> ; \\ \{ <var:l> = <var:r> \land <var:S> = <nat:2> * <var:r> + <nat:3> \} \\ <var:S> := <nat:2> + <var:S> * <var:l> ; \\ \{ <var:l> = <var:r> \land <var:S> = <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:2> \} \\ <var:S> := <nat:1> + <var:S> * <var:l> ; \\ \{ <var:l> = <var:r> \land <var:S> = <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> \} \\ <var:S> := <nat:3> + <var:S> * <var:l> \\ \{ <var:l> = <var:r> \land <var:S> = <nat:2> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> \} \end{eqnarray} Considering the above , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:2> ; <var:S> := <nat:3> + <var:S> * <var:l> ; <var:S> := <nat:2> + <var:S> * <var:l> ; <var:S> := <nat:1> + <var:S> * <var:l> ; <var:S> := <nat:3> + <var:S> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:l> = <var:r> }} <def:poly> {{ <var:S> = <nat:2> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:S> = <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:S> = <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:S> = <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:S> = <nat:2> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 