\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:8> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:o> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:o> ; <var:J2> := <var:J2> * <var:o> ; <var:O> := <var:J2> ; <var:O> := <var:O> + <var:J1> ; <var:O> := <var:O> + <var:J0> \end{verbatim} Assume it to be that $ <var:o> = <var:Y> $ ahead of interpreting this list of commands it holds that we see $ <var:O> = <nat:5> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:8> $ when series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:Y> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \} \\ <var:J1> := <nat:4> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> \} \\ <var:J1> := <var:J1> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> * <var:Y> \} \\ <var:J2> := <nat:5> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> * <var:Y> \land <var:J2> = <nat:5> \} \\ <var:J2> := <var:J2> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> * <var:Y> \land <var:J2> = <nat:5> * <var:Y> \} \\ <var:J2> := <var:J2> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> * <var:Y> \land <var:J2> = <nat:5> * <var:Y> ^ <nat:2> \} \\ <var:O> := <var:J2> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:J1> = <nat:4> * <var:Y> \land <var:O> = <nat:5> * <var:Y> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:J1> ; \\ \{ <var:o> = <var:Y> \land <var:J0> = <nat:8> \land <var:O> = <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> \} \\ <var:O> := <var:O> + <var:J0> \\ \{ <var:o> = <var:Y> \land <var:O> = <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:8> \} \end{eqnarray} Using typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:o> = <var:Y> }} <var:J0> := <nat:8> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:o> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:o> ; <var:J2> := <var:J2> * <var:o> ; <var:O> := <var:J2> ; <var:O> := <var:O> + <var:J1> ; <var:O> := <var:O> + <var:J0> {{ <var:O> = <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> * <var:Y> /\ <var:J2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> * <var:Y> /\ <var:J2> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> * <var:Y> /\ <var:J2> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:J1> = <nat:4> * <var:Y> /\ <var:O> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:J0> = <nat:8> /\ <var:O> = <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:O> = <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 