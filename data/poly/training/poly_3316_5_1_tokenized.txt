\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:S> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:7> ; <var:L> := <var:A1> <var:L> := <var:L> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Given , given all integers $ <var:z> $ , $ <var:S> = <var:z> $ before the evaluation of the code segment , then $ <var:L> = <nat:7> * <var:z> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:S> = <var:z> \} \\ <var:A1> := <var:S> ; \\ \{ <var:S> = <var:z> \land <var:A1> = <var:z> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:S> = <var:z> \land <var:A1> = <var:z> \land <var:A0> = <nat:5> \} \\ <var:A1> := <var:A1> * <nat:7> ; \\ \{ <var:S> = <var:z> \land <var:A1> = <nat:7> \cdot <var:z> \land <var:A0> = <nat:5> \} \\ <var:L> := <var:A1> \\ \{ <var:S> = <var:z> \land <var:A0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:z> \} \\ <var:L> := <var:L> + <var:A0> \\ \{ <var:S> = <var:z> \land <var:L> = <nat:7> \cdot <var:z> + <nat:5> \} \end{eqnarray} Given the above , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:S> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:7> ; <var:L> := <var:A1> <var:L> := <var:L> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:S> = <var:z> }} <def:poly> {{ <var:L> = <nat:7> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:A1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:A1> = <var:z> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:A1> = <nat:7> * <var:z> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:A0> = <nat:5> /\ <var:L> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:z> /\ <var:L> = <nat:7> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 