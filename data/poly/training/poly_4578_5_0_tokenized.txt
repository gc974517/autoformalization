\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:G> ; <var:H> := <var:V1> ; <var:H> := <var:H> + <var:V0> \end{verbatim} Allowing it to hold that $ <var:G> = <var:t> $ before the evaluation of our series of instructions , it holds that $ <var:H> = <nat:9> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:G> = <var:t> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:G> = <var:t> \land <var:V0> = <nat:4> \} \\ <var:V1> := <nat:9> ; \\ \{ <var:G> = <var:t> \land <var:V0> = <nat:4> \land <var:V1> = <nat:9> \} \\ <var:V1> := <var:V1> * <var:G> ; \\ \{ <var:G> = <var:t> \land <var:V0> = <nat:4> \land <var:V1> = <nat:9> \times <var:t> \} \\ <var:H> := <var:V1> ; \\ \{ <var:G> = <var:t> \land <var:V0> = <nat:4> \land <var:H> = <nat:9> \times <var:t> \} \\ <var:H> := <var:H> + <var:V0> \\ \{ <var:G> = <var:t> \land <var:H> = <nat:9> \times <var:t> + <nat:4> \} \end{eqnarray} As a result , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <var:V0> := <nat:4> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:G> ; <var:H> := <var:V1> ; <var:H> := <var:H> + <var:V0> {{ <var:H> = <nat:9> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:V0> = <nat:4> /\ <var:H> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:H> = <nat:9> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 