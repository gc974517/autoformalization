\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:f> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:f> ; <var:y2> := <var:y2> * <var:f> ; <var:L> := <var:y2> ; <var:L> := <var:L> + <var:y1> ; <var:L> := <var:L> + <var:y0> \end{verbatim} Assuming it to hold that $ <var:f> = <var:X> $ ahead of the evaluation of the series of commands it follows that $ <var:L> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:9> \cdot <var:X> + <nat:1> $ when set of instructions executes . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:f> = <var:X> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \} \\ <var:y1> := <nat:9> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> \} \\ <var:y1> := <var:y1> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:X> \} \\ <var:y2> := <nat:3> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:X> \land <var:y2> = <nat:3> \} \\ <var:y2> := <var:y2> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:X> \land <var:y2> = <nat:3> * <var:X> \} \\ <var:y2> := <var:y2> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:X> \land <var:y2> = <nat:3> * <var:X> ^ <nat:2> \} \\ <var:L> := <var:y2> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:y1> = <nat:9> * <var:X> \land <var:L> = <nat:3> * <var:X> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:y1> ; \\ \{ <var:f> = <var:X> \land <var:y0> = <nat:1> \land <var:L> = <nat:3> * <var:X> ^ <nat:2> + <nat:9> * <var:X> \} \\ <var:L> := <var:L> + <var:y0> \\ \{ <var:f> = <var:X> \land <var:L> = <nat:3> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> \} \end{eqnarray} Given the above , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:y0> := <nat:1> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:f> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:f> ; <var:y2> := <var:y2> * <var:f> ; <var:L> := <var:y2> ; <var:L> := <var:L> + <var:y1> ; <var:L> := <var:L> + <var:y0> {{ <var:L> = <nat:3> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:X> /\ <var:y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:X> /\ <var:y2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:X> /\ <var:y2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:9> * <var:X> /\ <var:L> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:y0> = <nat:1> /\ <var:L> = <nat:3> * <var:X> ^ <nat:2> + <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:L> = <nat:3> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 