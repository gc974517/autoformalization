\begin{document} \begin{theorem} Let the following set of instructions : \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:W> ; <var:q> := <var:R1> ; <var:q> := <var:q> + <var:R0> \end{verbatim} Assume given some integers $ <var:V> $ that we have $ <var:W> = <var:V> $ prior to evaluating our series of instructions , it must be that $ <var:q> = <nat:4> \cdot <var:V> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:V> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:W> = <var:V> \land <var:R0> = <nat:8> \} \\ <var:R1> := <nat:4> ; \\ \{ <var:W> = <var:V> \land <var:R0> = <nat:8> \land <var:R1> = <nat:4> \} \\ <var:R1> := <var:R1> * <var:W> ; \\ \{ <var:W> = <var:V> \land <var:R0> = <nat:8> \land <var:R1> = <nat:4> * <var:V> \} \\ <var:q> := <var:R1> ; \\ \{ <var:W> = <var:V> \land <var:R0> = <nat:8> \land <var:q> = <nat:4> * <var:V> \} \\ <var:q> := <var:q> + <var:R0> \\ \{ <var:W> = <var:V> \land <var:q> = <nat:4> * <var:V> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <var:R0> := <nat:8> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:W> ; <var:q> := <var:R1> ; <var:q> := <var:q> + <var:R0> {{ <var:q> = <nat:4> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:R0> = <nat:8> /\ <var:q> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:q> = <nat:4> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 