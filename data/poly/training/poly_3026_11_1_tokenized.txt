\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:f> ; <var:U2> := <var:U1> * <var:f> ; <var:U3> := <var:U2> * <var:f> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:2> ; <var:D> := <var:U3> <var:D> := <var:D> + <var:U2> <var:D> := <var:D> + <var:U1> <var:D> := <var:D> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Given that $ <var:f> = <var:a> $ before interpreting the segment of code , then $ <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> $ once set of commands exits . \end{theorem} \begin{proof} Proving correctness for this list of commands is evident using the following decorated code . \begin{eqnarray} \{ <var:f> = <var:a> \} \\ <var:U1> := <var:f> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <var:a> \} \\ <var:U2> := <var:U1> * <var:f> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <var:a> \land <var:U2> = <var:a> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:f> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <var:a> \land <var:U2> = <var:a> ^ <nat:2> \land <var:U3> = <var:a> ^ <nat:3> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <var:a> \land <var:U2> = <var:a> ^ <nat:2> \land <var:U3> = <var:a> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <nat:4> * <var:a> \land <var:U2> = <var:a> ^ <nat:2> \land <var:U3> = <var:a> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:U2> := <var:U2> * <nat:1> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <nat:4> * <var:a> \land <var:U2> = <nat:1> * <var:a> ^ <nat:2> \land <var:U3> = <var:a> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:U3> := <var:U3> * <nat:2> ; \\ \{ <var:f> = <var:a> \land <var:U1> = <nat:4> * <var:a> \land <var:U2> = <nat:1> * <var:a> ^ <nat:2> \land <var:U3> = <nat:2> * <var:a> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:D> := <var:U3> \\ \{ <var:f> = <var:a> \land <var:U1> = <nat:4> * <var:a> \land <var:U2> = <nat:1> * <var:a> ^ <nat:2> \land <var:U0> = <nat:3> \land <var:D> = <nat:2> * <var:a> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:U2> \\ \{ <var:f> = <var:a> \land <var:U1> = <nat:4> * <var:a> \land <var:U0> = <nat:3> \land <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:U1> \\ \{ <var:f> = <var:a> \land <var:U0> = <nat:3> \land <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> \} \\ <var:D> := <var:D> + <var:U0> \\ \{ <var:f> = <var:a> \land <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:f> ; <var:U2> := <var:U1> * <var:f> ; <var:U3> := <var:U2> * <var:f> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:2> ; <var:D> := <var:U3> <var:D> := <var:D> + <var:U2> <var:D> := <var:D> + <var:U1> <var:D> := <var:D> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:f> = <var:a> }} <def:poly> {{ <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <var:a> /\ <var:U2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <var:a> /\ <var:U2> = <var:a> ^ <nat:2> /\ <var:U3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <var:a> /\ <var:U2> = <var:a> ^ <nat:2> /\ <var:U3> = <var:a> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <nat:4> * <var:a> /\ <var:U2> = <var:a> ^ <nat:2> /\ <var:U3> = <var:a> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <nat:4> * <var:a> /\ <var:U2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:U3> = <var:a> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <nat:4> * <var:a> /\ <var:U2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:a> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <nat:4> * <var:a> /\ <var:U2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:U0> = <nat:3> /\ <var:D> = <nat:2> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U1> = <nat:4> * <var:a> /\ <var:U0> = <nat:3> /\ <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:U0> = <nat:3> /\ <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:a> /\ <var:D> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 