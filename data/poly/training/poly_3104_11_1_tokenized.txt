\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:y1> := <var:t> ; <var:y2> := <var:y1> * <var:t> ; <var:y3> := <var:y2> * <var:t> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:6> ; <var:Q> := <var:y3> <var:Q> := <var:Q> + <var:y2> <var:Q> := <var:Q> + <var:y1> <var:Q> := <var:Q> + <var:y0> \end{verbatim} Assume that $ <var:t> = <var:s> $ prior to executing our code then $ <var:Q> = <nat:6> \cdot <var:s> ^ <nat:3> + <nat:6> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:t> = <var:s> \} \\ <var:y1> := <var:t> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <var:s> \} \\ <var:y2> := <var:y1> * <var:t> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <var:s> \land <var:y2> = <var:s> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:t> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <var:s> \land <var:y2> = <var:s> ^ <nat:2> \land <var:y3> = <var:s> ^ <nat:3> \} \\ <var:y0> := <nat:9> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <var:s> \land <var:y2> = <var:s> ^ <nat:2> \land <var:y3> = <var:s> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:y1> := <var:y1> * <nat:8> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <nat:8> \times <var:s> \land <var:y2> = <var:s> ^ <nat:2> \land <var:y3> = <var:s> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:y2> := <var:y2> * <nat:6> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <nat:8> \times <var:s> \land <var:y2> = <nat:6> \times <var:s> ^ <nat:2> \land <var:y3> = <var:s> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:y3> := <var:y3> * <nat:6> ; \\ \{ <var:t> = <var:s> \land <var:y1> = <nat:8> \times <var:s> \land <var:y2> = <nat:6> \times <var:s> ^ <nat:2> \land <var:y3> = <nat:6> \times <var:s> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ <var:Q> := <var:y3> \\ \{ <var:t> = <var:s> \land <var:y1> = <nat:8> \times <var:s> \land <var:y2> = <nat:6> \times <var:s> ^ <nat:2> \land <var:y0> = <nat:9> \land <var:Q> = <nat:6> \times <var:s> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:y2> \\ \{ <var:t> = <var:s> \land <var:y1> = <nat:8> \times <var:s> \land <var:y0> = <nat:9> \land <var:Q> = <nat:6> \times <var:s> ^ <nat:3> + <nat:6> \times <var:s> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:y1> \\ \{ <var:t> = <var:s> \land <var:y0> = <nat:9> \land <var:Q> = <nat:6> \times <var:s> ^ <nat:3> + <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> \} \\ <var:Q> := <var:Q> + <var:y0> \\ \{ <var:t> = <var:s> \land <var:Q> = <nat:6> \times <var:s> ^ <nat:3> + <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> + <nat:9> \} \end{eqnarray} Therefore , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <var:y1> := <var:t> ; <var:y2> := <var:y1> * <var:t> ; <var:y3> := <var:y2> * <var:t> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:6> ; <var:Q> := <var:y3> <var:Q> := <var:Q> + <var:y2> <var:Q> := <var:Q> + <var:y1> <var:Q> := <var:Q> + <var:y0> {{ <var:Q> = <nat:6> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <var:s> /\ <var:y2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <var:s> /\ <var:y2> = <var:s> ^ <nat:2> /\ <var:y3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <var:s> /\ <var:y2> = <var:s> ^ <nat:2> /\ <var:y3> = <var:s> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <nat:8> * <var:s> /\ <var:y2> = <var:s> ^ <nat:2> /\ <var:y3> = <var:s> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <nat:8> * <var:s> /\ <var:y2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:y3> = <var:s> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <nat:8> * <var:s> /\ <var:y2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:s> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <nat:8> * <var:s> /\ <var:y2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:y0> = <nat:9> /\ <var:Q> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y1> = <nat:8> * <var:s> /\ <var:y0> = <nat:9> /\ <var:Q> = <nat:6> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:y0> = <nat:9> /\ <var:Q> = <nat:6> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:Q> = <nat:6> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 