\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:3> ; <var:m> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Assuming $ <var:G> = <var:C> $ ( given some $ <var:C> \in \mathbb{N} $ ) ahead of the execution of the code it holds that we see $ <var:m> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:G> = <var:C> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:G> = <var:C> \land <var:o0> = <nat:3> \} \\ <var:m> := <var:o0> \\ \{ <var:G> = <var:C> \land <var:m> = <nat:3> \} \end{eqnarray} Thus , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:m> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:G> = <var:C> }} <def:poly> {{ <var:m> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:m> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 