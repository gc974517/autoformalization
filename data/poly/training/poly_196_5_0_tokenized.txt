\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:o> ; <var:f> := <var:O1> ; <var:f> := <var:f> + <var:O0> \end{verbatim} Allowing it to be that $ <var:o> = <var:e> $ ( given positive integers $ <var:e> $ ) ahead of interpreting this segment of code then $ <var:f> = <nat:6> \times <var:e> + <nat:3> $ once code segment is done . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be given using typical Hoare logic . Honing in on the next steps seen in our set of instructions , we have \verb | { <var:o> = <var:e> } <var:O0> := <nat:3> { <var:o> = <var:e> \land <var:O0> = <nat:3> } | , \verb | { <var:o> = <var:e> \land <var:O0> = <nat:3> } <var:O1> := <nat:6> { <var:o> = <var:e> \land <var:O0> = <nat:3> \land <var:O1> = <nat:6> } | , \verb | { <var:o> = <var:e> \land <var:O0> = <nat:3> \land <var:O1> = <nat:6> } <var:O1> := <var:O1> * <var:o> { <var:o> = <var:e> \land <var:O0> = <nat:3> \land <var:O1> = <nat:6> \times <var:e> } | and \verb | { <var:o> = <var:e> \land <var:O0> = <nat:3> \land <var:O1> = <nat:6> \times <var:e> } <var:f> := <var:O1> { <var:o> = <var:e> \land <var:O0> = <nat:3> \land <var:f> = <nat:6> \times <var:e> } | . This is sound using the assignment rule obtained from standard Hoare logic . Shifting focus toward the subsequent piece of code contained in the program , we see \verb | { <var:o> = <var:e> } <var:O0> := <nat:3> { <var:o> = <var:e> \land <var:O0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:o> = <var:e> }} <var:O0> := <nat:3> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:o> ; <var:f> := <var:O1> ; <var:f> := <var:f> + <var:O0> {{ <var:f> = <nat:6> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:O0> = <nat:3> /\ <var:f> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:e> /\ <var:f> = <nat:6> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 