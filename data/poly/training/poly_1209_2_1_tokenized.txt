\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:1> ; <var:e> := <var:m0> \end{verbatim} Assuming letting positive integers $ <var:z> $ it to be that $ <var:x> = <var:z> $ prior to the evaluation of this set of instructions , then we have $ <var:e> = <nat:1> $ after code segment terminates . \end{theorem} \begin{proof} The course of logic for our series of instructions can be given by usual Hoare techniques . Focusing on the upcoming statement found in the segment of code , the assignment code \verb | <var:m0> := <nat:1> ; | . This command advances $ \{ <var:x> = <var:z> \} $ as $ \{ <var:x> = <var:z> \land <var:m0> = <nat:1> \} $ . Honing in on the following bit of code seen in our code , we have the variable assignmet command binding $ <var:m0$ as $ <var:e>$ . This advances $ \{ <var:x> = <var:z> \land <var:m0> = <nat:1> \} $ toward the condition $ \{ <var:x> = <var:z> \land <var:e> = <nat:1> \} $ . This is rigorously given by the assignment law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:x> = <var:z> }} <var:m0> := <nat:1> ; <var:e> := <var:m0> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:z> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 