\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:g0> := <nat:3> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:A> ; <var:g2> := <var:g2> * <var:A> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:A> ; <var:g3> := <var:g3> * <var:A> ; <var:g3> := <var:g3> * <var:A> ; <var:Y> := <var:g3> ; <var:Y> := <var:Y> + <var:g2> ; <var:Y> := <var:Y> + <var:g0> \end{verbatim} Given it to be that $ <var:A> = <var:G> $ ahead of the evaluation of the series of instructions it must be that we have $ <var:Y> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:A> = <var:G> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \} \\ <var:g2> := <nat:8> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \} \\ <var:g2> := <var:g2> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> \} \\ <var:g2> := <var:g2> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \} \\ <var:g3> := <nat:1> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:g3> = <nat:1> \} \\ <var:g3> := <var:g3> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:G> \} \\ <var:g3> := <var:g3> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:G> ^ <nat:2> \} \\ <var:g3> := <var:g3> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:G> ^ <nat:3> \} \\ <var:Y> := <var:g3> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:g2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:Y> = <nat:1> \cdot <var:G> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:g2> ; \\ \{ <var:A> = <var:G> \land <var:g0> = <nat:3> \land <var:Y> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:g0> \\ \{ <var:A> = <var:G> \land <var:Y> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> + <nat:3> \} \end{eqnarray} Hence , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:A> = <var:G> }} <var:g0> := <nat:3> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:A> ; <var:g2> := <var:g2> * <var:A> ; <var:g3> := <nat:1> ; <var:g3> := <var:g3> * <var:A> ; <var:g3> := <var:g3> * <var:A> ; <var:g3> := <var:g3> * <var:A> ; <var:Y> := <var:g3> ; <var:Y> := <var:Y> + <var:g2> ; <var:Y> := <var:Y> + <var:g0> {{ <var:Y> = <nat:1> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:g3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:g2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:Y> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:g0> = <nat:3> /\ <var:Y> = <nat:1> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:Y> = <nat:1> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 