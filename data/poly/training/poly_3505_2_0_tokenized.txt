\begin{document} \begin{theorem} Take the following list of instructions such that \begin{verbatim} <var:x0> := <nat:1> ; <var:t> := <var:x0> \end{verbatim} Assume it to hold that $ <var:I> = <var:N> $ prior to the evaluation of the segment of code , it follows that we have $ <var:t> = <nat:1> $ when series of commands has finished . \end{theorem} \begin{proof} The flow of logic for our code segment can be given with usual Hoare logic . Jumping to the next statement seen in the program , \verb | { <var:I> = <var:N> } <var:x0> := <nat:1> { <var:I> = <var:N> \land <var:x0> = <nat:1> } | . This is shown to be logically sound through the variable binding rule of typical Hoare logic . Moving on to the next step , \verb | { <var:I> = <var:N> } <var:x0> := <nat:1> { <var:I> = <var:N> \land <var:x0> = <nat:1> } | . This is sound by the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <var:x0> := <nat:1> ; <var:t> := <var:x0> {{ <var:t> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:t> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 