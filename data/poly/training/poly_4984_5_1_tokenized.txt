\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:L> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:1> ; <var:n> := <var:v1> <var:n> := <var:n> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:L> = <var:M> $ , for every positive numbers $ <var:M> $ , before the execution of the set of instructions , it holds that $ <var:n> = <nat:1> \cdot <var:M> + <nat:2> $ . \end{theorem} \begin{proof} See that this decorated list of commands . \begin{eqnarray} \{ <var:L> = <var:M> \} \\ <var:v1> := <var:L> ; \\ \{ <var:L> = <var:M> \land <var:v1> = <var:M> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:L> = <var:M> \land <var:v1> = <var:M> \land <var:v0> = <nat:2> \} \\ <var:v1> := <var:v1> * <nat:1> ; \\ \{ <var:L> = <var:M> \land <var:v1> = <nat:1> * <var:M> \land <var:v0> = <nat:2> \} \\ <var:n> := <var:v1> \\ \{ <var:L> = <var:M> \land <var:v0> = <nat:2> \land <var:n> = <nat:1> * <var:M> \} \\ <var:n> := <var:n> + <var:v0> \\ \{ <var:L> = <var:M> \land <var:n> = <nat:1> * <var:M> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:L> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:1> ; <var:n> := <var:v1> <var:n> := <var:n> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <def:poly> {{ <var:n> = <nat:1> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:v1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:v1> = <var:M> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:v1> = <nat:1> * <var:M> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:v0> = <nat:2> /\ <var:n> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:n> = <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 