\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:O> ; <var:g2> := <var:g1> * <var:O> ; <var:g3> := <var:g2> * <var:O> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:6> ; <var:E> := <var:g3> <var:E> := <var:E> + <var:g2> <var:E> := <var:E> + <var:g1> <var:E> := <var:E> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:O> = <var:B> $ ( given some $ <var:B> $ ) ahead of the execution of this code , it must be that we have $ <var:E> = <nat:6> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:2> $ after program finishes . \end{theorem} \begin{proof} The proof of this code segment can be shown using typical Hoare reasoning . Immediately after , \begin{eqnarray} \{ <var:O> = <var:B> \} \, <var:g1> := <var:O> \, \{ <var:O> = <var:B> \land <var:g1> = <var:B> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <var:B> \} \, <var:g2> := <var:g1> * <var:O> \, \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \} \, <var:g3> := <var:g2> * <var:O> \, \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \} \, <var:g0> := <nat:2> \, \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \, <var:g1> := <var:g1> * <nat:1> \, \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \, <var:g2> := <var:g2> * <nat:9> \, \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g3> = <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \, <var:g3> := <var:g3> * <nat:6> \, \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g3> = <nat:6> \cdot <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g3> = <nat:6> \cdot <var:B> ^ <nat:3> \land <var:g0> = <nat:2> \} \, <var:E> := <var:g3\, \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> \} \, <var:E> := <var:E> + <var:g2\, \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> \} \\ \{ <var:O> = <var:B> \land <var:g1> = <nat:1> \cdot <var:B> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> \} \, <var:E> := <var:E> + <var:g1\, \{ <var:O> = <var:B> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> \} \\ \{ <var:O> = <var:B> \land <var:g0> = <nat:2> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> \} \, <var:E> := <var:E> + <var:g0\, \{ <var:O> = <var:B> \land <var:E> = <nat:6> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} \end{eqnarray} This is known to be sound through the binding scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:O> ; <var:g2> := <var:g1> * <var:O> ; <var:g3> := <var:g2> * <var:O> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:6> ; <var:E> := <var:g3> <var:E> := <var:E> + <var:g2> <var:E> := <var:E> + <var:g1> <var:E> := <var:E> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:O> = <var:B> }} <def:poly> {{ <var:E> = <nat:6> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <var:B> /\ <var:g2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <var:B> /\ <var:g2> = <var:B> ^ <nat:2> /\ <var:g3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <var:B> /\ <var:g2> = <var:B> ^ <nat:2> /\ <var:g3> = <var:B> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <nat:1> * <var:B> /\ <var:g2> = <var:B> ^ <nat:2> /\ <var:g3> = <var:B> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <nat:1> * <var:B> /\ <var:g2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:g3> = <var:B> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <nat:1> * <var:B> /\ <var:g2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:g3> = <nat:6> * <var:B> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <nat:1> * <var:B> /\ <var:g2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:E> = <nat:6> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g1> = <nat:1> * <var:B> /\ <var:g0> = <nat:2> /\ <var:E> = <nat:6> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:g0> = <nat:2> /\ <var:E> = <nat:6> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:B> /\ <var:E> = <nat:6> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 