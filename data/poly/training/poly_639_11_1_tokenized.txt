\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:W1> := <var:A> ; <var:W2> := <var:W1> * <var:A> ; <var:W3> := <var:W2> * <var:A> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:9> ; <var:n> := <var:W3> <var:n> := <var:n> + <var:W2> <var:n> := <var:n> + <var:W1> <var:n> := <var:n> + <var:W0> \end{verbatim} Allow that $ <var:A> = <var:S> $ ahead of running our list of commands , it follows that we see $ <var:n> = <nat:9> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions is demonstrated by usual Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:S> \} & <var:W1> := <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} \end{tabular} This is guaranteed with the environment update inference rule given in Hoare reasoning . Moving on to the next steps contained in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:S> \} & <var:W1> := <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} & <var:W2> := <var:W1> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} & <var:W3> := <var:W2> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \land <var:W3> = <var:S> ^ <nat:3> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \land <var:W3> = <var:S> ^ <nat:3> \} & <var:W0> := <nat:2> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \land <var:W3> = <var:S> ^ <nat:3> \land <var:W0> = <nat:2> \} \end{tabular} Moving on to the following lines of codein the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:S> \} & <var:W1> := <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} & <var:W2> := <var:W1> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} & <var:W3> := <var:W2> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \land <var:W3> = <var:S> ^ <nat:3> \} \end{tabular} Shifting focus toward the subsequent lines found in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:S> \} & <var:W1> := <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \} & <var:W2> := <var:W1> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} \\ \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \} & <var:W3> := <var:W2> * <var:A> & \{ <var:A> = <var:S> \land <var:W1> = <var:S> \land <var:W2> = <var:S> ^ <nat:2> \land <var:W3> = <var:S> ^ <nat:3> \} \end{tabular} This is guaranteed by the variable assignmet rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <var:W1> := <var:A> ; <var:W2> := <var:W1> * <var:A> ; <var:W3> := <var:W2> * <var:A> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:4> ; <var:W3> := <var:W3> * <nat:9> ; <var:n> := <var:W3> <var:n> := <var:n> + <var:W2> <var:n> := <var:n> + <var:W1> <var:n> := <var:n> + <var:W0> {{ <var:n> = <nat:9> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <var:S> /\ <var:W2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <var:S> /\ <var:W2> = <var:S> ^ <nat:2> /\ <var:W3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <var:S> /\ <var:W2> = <var:S> ^ <nat:2> /\ <var:W3> = <var:S> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <nat:3> * <var:S> /\ <var:W2> = <var:S> ^ <nat:2> /\ <var:W3> = <var:S> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <nat:3> * <var:S> /\ <var:W2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:W3> = <var:S> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <nat:3> * <var:S> /\ <var:W2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:S> ^ <nat:3> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <nat:3> * <var:S> /\ <var:W2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:W0> = <nat:2> /\ <var:n> = <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W1> = <nat:3> * <var:S> /\ <var:W0> = <nat:2> /\ <var:n> = <nat:9> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:W0> = <nat:2> /\ <var:n> = <nat:9> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:n> = <nat:9> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 