\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:O> ; <var:J> := <var:z1> ; <var:J> := <var:J> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming for any whole numbers $ <var:g> $ that we have $ <var:O> = <var:g> $ prior to evaluating this set of commands it must be that we see $ <var:J> = <nat:8> \cdot <var:g> + <nat:1> $ when series of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:g> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:O> = <var:g> \land <var:z0> = <nat:1> \} \\ <var:z1> := <nat:8> ; \\ \{ <var:O> = <var:g> \land <var:z0> = <nat:1> \land <var:z1> = <nat:8> \} \\ <var:z1> := <var:z1> * <var:O> ; \\ \{ <var:O> = <var:g> \land <var:z0> = <nat:1> \land <var:z1> = <nat:8> * <var:g> \} \\ <var:J> := <var:z1> ; \\ \{ <var:O> = <var:g> \land <var:z0> = <nat:1> \land <var:J> = <nat:8> * <var:g> \} \\ <var:J> := <var:J> + <var:z0> \\ \{ <var:O> = <var:g> \land <var:J> = <nat:8> * <var:g> + <nat:1> \} \end{eqnarray} Using Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:O> ; <var:J> := <var:z1> ; <var:J> := <var:J> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:O> = <var:g> }} <def:poly> {{ <var:J> = <nat:8> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:z0> = <nat:1> /\ <var:J> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:J> = <nat:8> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 