\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:4> ; <var:n1> := <var:n1> * <var:X> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:X> ; <var:n2> := <var:n2> * <var:X> ; <var:q> := <var:n2> ; <var:q> := <var:q> + <var:n1> ; <var:q> := <var:q> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:X> = <var:Z> $ before the execution of this code segment , it follows that we have $ <var:q> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> $ when list of instructions is done executing . \end{theorem} \begin{proof} Note that the following decorated series of instructions . \begin{eqnarray} \{ <var:X> = <var:Z> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \} \\ <var:n1> := <nat:4> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \} \\ <var:n1> := <var:n1> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \cdot <var:Z> \} \\ <var:n2> := <nat:1> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \cdot <var:Z> \land <var:n2> = <nat:1> \} \\ <var:n2> := <var:n2> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \cdot <var:Z> \land <var:n2> = <nat:1> \cdot <var:Z> \} \\ <var:n2> := <var:n2> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \cdot <var:Z> \land <var:n2> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:q> := <var:n2> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:n1> = <nat:4> \cdot <var:Z> \land <var:q> = <nat:1> \cdot <var:Z> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:n1> ; \\ \{ <var:X> = <var:Z> \land <var:n0> = <nat:3> \land <var:q> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} \\ <var:q> := <var:q> + <var:n0> \\ \{ <var:X> = <var:Z> \land <var:q> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:3> ; <var:n1> := <nat:4> ; <var:n1> := <var:n1> * <var:X> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:X> ; <var:n2> := <var:n2> * <var:X> ; <var:q> := <var:n2> ; <var:q> := <var:q> + <var:n1> ; <var:q> := <var:q> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <def:poly> {{ <var:q> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> * <var:Z> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> * <var:Z> /\ <var:n2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> * <var:Z> /\ <var:n2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:4> * <var:Z> /\ <var:q> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:n0> = <nat:3> /\ <var:q> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:q> = <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 