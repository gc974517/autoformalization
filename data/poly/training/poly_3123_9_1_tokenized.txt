\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:X> ; <var:H2> := <var:H1> * <var:X> ; <var:H3> := <var:H2> * <var:X> ; <var:H0> := <nat:2> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:7> ; <var:A> := <var:H3> <var:A> := <var:A> + <var:H2> <var:A> := <var:A> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:X> = <var:l> $ letting $ <var:l> \in \mathbb{N} $ prior to the execution of this program , then $ <var:A> = <nat:7> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is given through typical Hoare reasoning . Advancing to the next step , we have \verb | { <var:X> = <var:l> } <var:H1> := <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> } | , \verb | { <var:X> = <var:l> \land <var:H1> = <var:l> } <var:H2> := <var:H1> * <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> } | and \verb | { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> } <var:H3> := <var:H2> * <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> \land <var:H3> = <var:l> ^ <nat:3> } | . Focusing on the subsequent bits of codein our set of commands , \verb | { <var:X> = <var:l> } <var:H1> := <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> } | , \verb | { <var:X> = <var:l> \land <var:H1> = <var:l> } <var:H2> := <var:H1> * <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> } | and \verb | { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> } <var:H3> := <var:H2> * <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> \land <var:H3> = <var:l> ^ <nat:3> } | . This is deduced by the scheme defined by standard Hoare techniques . Moving forward , we have \verb | { <var:X> = <var:l> } <var:H1> := <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> } | and \verb | { <var:X> = <var:l> \land <var:H1> = <var:l> } <var:H2> := <var:H1> * <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> \land <var:H2> = <var:l> ^ <nat:2> } | . This is rigorously given by the assignment scheme given by Hoare techniques . Immediately after , \verb | { <var:X> = <var:l> } <var:H1> := <var:X> { <var:X> = <var:l> \land <var:H1> = <var:l> } | . This is deduced with the variable binding scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:X> ; <var:H2> := <var:H1> * <var:X> ; <var:H3> := <var:H2> * <var:X> ; <var:H0> := <nat:2> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:7> ; <var:A> := <var:H3> <var:A> := <var:A> + <var:H2> <var:A> := <var:A> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:X> = <var:l> }} <def:poly> {{ <var:A> = <nat:7> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <var:l> ^ <nat:2> /\ <var:H3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <var:l> ^ <nat:2> /\ <var:H3> = <var:l> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:H3> = <var:l> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:l> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:H0> = <nat:2> /\ <var:A> = <nat:7> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:H1> = <var:l> /\ <var:H0> = <nat:2> /\ <var:A> = <nat:7> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:l> /\ <var:A> = <nat:7> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 