\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:d1> := <var:V> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:9> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> \end{verbatim} Assume that we have $ <var:V> = <var:p> $ ahead of evaluating the series of instructions , it must be that we have $ <var:o> = <nat:9> \cdot <var:p> + <nat:4> $ once code segment has finished . \end{theorem} \begin{proof} The flow of logic for our set of instructions is evident using Hoare logic . Paying attention to the subsequent commands contained in the list of instructions , \begin{verbatim} { <var:V> = <var:p> } <var:d1> := <var:V> { <var:V> = <var:p> \land <var:d1> = <var:p> } { <var:V> = <var:p> \land <var:d1> = <var:p> } <var:d0> := <nat:4> { <var:V> = <var:p> \land <var:d1> = <var:p> \land <var:d0> = <nat:4> } { <var:V> = <var:p> \land <var:d1> = <var:p> \land <var:d0> = <nat:4> } <var:d1> := <var:d1> * <nat:9> { <var:V> = <var:p> \land <var:d1> = <nat:9> \times <var:p> \land <var:d0> = <nat:4> } { <var:V> = <var:p> \land <var:d1> = <nat:9> \times <var:p> \land <var:d0> = <nat:4> } <var:o> := <var:d1{ <var:V> = <var:p> \land <var:d0> = <nat:4> \land <var:o> = <nat:9> \times <var:p> } { <var:V> = <var:p> \land <var:d0> = <nat:4> \land <var:o> = <nat:9> \times <var:p> } <var:o> := <var:o> + <var:d0{ <var:V> = <var:p> \land <var:o> = <nat:9> \times <var:p> + <nat:4> } \end{verbatim} This is known to be sound through the assignment inference rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <var:d1> := <var:V> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:9> ; <var:o> := <var:d1> <var:o> := <var:o> + <var:d0> {{ <var:o> = <nat:9> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:d1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:d1> = <var:p> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:d1> = <nat:9> * <var:p> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:d0> = <nat:4> /\ <var:o> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:o> = <nat:9> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 