\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:9> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:Z> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:Z> ; <var:i2> := <var:i2> * <var:Z> ; <var:U> := <var:i2> ; <var:U> := <var:U> + <var:i1> ; <var:U> := <var:U> + <var:i0> \end{verbatim} Assume it to be that $ <var:Z> = <var:X> $ prior to the evaluation of our series of instructions , then $ <var:U> = <nat:4> \times <var:X> ^ <nat:2> + <nat:6> \times <var:X> + <nat:9> $ after code has exited . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:Z> = <var:X> \} \\ <var:i0> := <nat:9> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \} \\ <var:i1> := <nat:6> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> \} \\ <var:i1> := <var:i1> * <var:Z> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> * <var:X> \} \\ <var:i2> := <nat:4> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> * <var:X> \land <var:i2> = <nat:4> \} \\ <var:i2> := <var:i2> * <var:Z> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> * <var:X> \land <var:i2> = <nat:4> * <var:X> \} \\ <var:i2> := <var:i2> * <var:Z> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> * <var:X> \land <var:i2> = <nat:4> * <var:X> ^ <nat:2> \} \\ <var:U> := <var:i2> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:i1> = <nat:6> * <var:X> \land <var:U> = <nat:4> * <var:X> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:i1> ; \\ \{ <var:Z> = <var:X> \land <var:i0> = <nat:9> \land <var:U> = <nat:4> * <var:X> ^ <nat:2> + <nat:6> * <var:X> \} \\ <var:U> := <var:U> + <var:i0> \\ \{ <var:Z> = <var:X> \land <var:U> = <nat:4> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> \} \end{eqnarray} Given the above , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <var:i0> := <nat:9> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:Z> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:Z> ; <var:i2> := <var:i2> * <var:Z> ; <var:U> := <var:i2> ; <var:U> := <var:U> + <var:i1> ; <var:U> := <var:U> + <var:i0> {{ <var:U> = <nat:4> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> * <var:X> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> * <var:X> /\ <var:i2> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> * <var:X> /\ <var:i2> = <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:i1> = <nat:6> * <var:X> /\ <var:U> = <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:i0> = <nat:9> /\ <var:U> = <nat:4> * <var:X> ^ <nat:2> + <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:U> = <nat:4> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 