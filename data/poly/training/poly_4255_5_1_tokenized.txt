\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:q> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:4> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> \end{verbatim} Allowing , taking natural numbers $ <var:D> $ , it to hold that $ <var:q> = <var:D> $ prior to the execution of the set of instructions , it follows that $ <var:n> = <nat:4> \cdot <var:D> + <nat:1> $ once segment of code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our code segment is clear using usual Hoare techniques . Moving forward to the next step , we see the variable binding statement \verb | <var:k1> := <var:q> ; | . This transfers the precondition $ \{ <var:q> = <var:D> \} $ as $ \{ <var:q> = <var:D> \land <var:k1> = <var:D> \} $ . This is rigorously given by the assignment rule given by standard Hoare reasoning . Further , we see the variable update line \verb | <var:k0> := <nat:1> ; | . This code redefines the precondition $ \{ <var:q> = <var:D> \land <var:k1> = <var:D> \} $ into the condition $ \{ <var:q> = <var:D> \land <var:k1> = <var:D> \land <var:k0> = <nat:1> \} $ . Advancing to the proceeding step seen in the code segment , we have the environment update command \verb | <var:k1> := <var:k1> * <nat:4> ; | . This takes the condition $ \{ <var:q> = <var:D> \land <var:k1> = <var:D> \land <var:k0> = <nat:1> \} $ toward $ \{ <var:q> = <var:D> \land <var:k1> = <nat:4> \cdot <var:D> \land <var:k0> = <nat:1> \} $ . This is given by the assignment inference rule given in Hoare logic . Moving forward to the next step , we have the variable binding line letting $ <var:k1$ into $ <var:n>$ . This redefines the precondition $ \{ <var:q> = <var:D> \land <var:k1> = <nat:4> \cdot <var:D> \land <var:k0> = <nat:1> \} $ to $ \{ <var:q> = <var:D> \land <var:k0> = <nat:1> \land <var:n> = <nat:4> \cdot <var:D> \} $ . This is shown with the assignment scheme found in Hoare reasoning . Paying attention to the subsequent line of code seen in our code , we have the binding statement giving $ <var:n> + <var:k0$ toward $ <var:n>$ . This code forwards $ \{ <var:q> = <var:D> \land <var:k0> = <nat:1> \land <var:n> = <nat:4> \cdot <var:D> \} $ to $ \{ <var:q> = <var:D> \land <var:n> = <nat:4> \cdot <var:D> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <var:k1> := <var:q> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:4> ; <var:n> := <var:k1> <var:n> := <var:n> + <var:k0> {{ <var:n> = <nat:4> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:k1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:k1> = <var:D> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:k1> = <nat:4> * <var:D> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:k0> = <nat:1> /\ <var:n> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:n> = <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 