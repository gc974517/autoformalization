\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:1> ; <var:r> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assume that we have $ <var:y> = <var:i> $ before the execution of the code it must be that $ <var:r> = <nat:1> $ once set of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for the list of commands is clear by standard Hoare techniques . Jumping to the proceeding pieces of code in the series of commands , we see \verb | { <var:y> = <var:i> } <var:D0> := <nat:1> { <var:y> = <var:i> \land <var:D0> = <nat:1> } | and \verb | { <var:y> = <var:i> \land <var:D0> = <nat:1> } <var:r> := <var:D0{ <var:y> = <var:i> \land <var:r> = <nat:1> } | . This is known to be sound through the binding rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:1> ; <var:r> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 