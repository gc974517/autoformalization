\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:6> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:o> ; <var:E> := <var:c1> ; <var:E> := <var:E> + <var:c0> \end{verbatim} Assuming $ <var:o> = <var:d> $ prior to the evaluation of the set of instructions , it follows that $ <var:E> = <nat:4> \cdot <var:d> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:o> = <var:d> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:o> = <var:d> \land <var:c0> = <nat:6> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:o> = <var:d> \land <var:c0> = <nat:6> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:o> ; \\ \{ <var:o> = <var:d> \land <var:c0> = <nat:6> \land <var:c1> = <nat:4> * <var:d> \} \\ <var:E> := <var:c1> ; \\ \{ <var:o> = <var:d> \land <var:c0> = <nat:6> \land <var:E> = <nat:4> * <var:d> \} \\ <var:E> := <var:E> + <var:c0> \\ \{ <var:o> = <var:d> \land <var:E> = <nat:4> * <var:d> + <nat:6> \} \end{eqnarray} As a result , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:o> = <var:d> }} <var:c0> := <nat:6> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:o> ; <var:E> := <var:c1> ; <var:E> := <var:E> + <var:c0> {{ <var:E> = <nat:4> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:c0> = <nat:6> /\ <var:E> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:E> = <nat:4> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 