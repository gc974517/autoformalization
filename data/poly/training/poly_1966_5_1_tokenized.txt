\begin{document} \begin{theorem} We define the following segment of code as \begin{verbatim} <var:O1> := <var:m> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:2> ; <var:J> := <var:O1> <var:J> := <var:J> + <var:O0> \end{verbatim} Allowing it to hold that $ <var:m> = <var:Y> $ , given positive integers $ <var:Y> $ , ahead of evaluating the series of instructions , it must be that $ <var:J> = <nat:2> \times <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} The proof of our series of commands is demonstrated with standard Hoare reasoning . After , the environment update statement \verb | <var:O1> := <var:m> ; | . This transfers $ \{ <var:m> = <var:Y> \} $ as $ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \} $ . Advancing on , we have the assignment command \verb | <var:O0> := <nat:7> ; | . This moves the condition $ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \} $ to the condition $ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O0> = <nat:7> \} $ . This is given with the assignment scheme defined by Hoare reasoning . Advancing on , we have the code assigning $ <var:O1> * <nat:2> $ to $ <var:O1>$ . This redefines $ \{ <var:m> = <var:Y> \land <var:O1> = <var:Y> \land <var:O0> = <nat:7> \} $ to the condition $ \{ <var:m> = <var:Y> \land <var:O1> = <nat:2> * <var:Y> \land <var:O0> = <nat:7> \} $ . After , we see the variable binding command \verb | <var:J> := <var:O1> | . This transfers the precondition $ \{ <var:m> = <var:Y> \land <var:O1> = <nat:2> * <var:Y> \land <var:O0> = <nat:7> \} $ into $ \{ <var:m> = <var:Y> \land <var:O0> = <nat:7> \land <var:J> = <nat:2> * <var:Y> \} $ . Moving on to the next step , we have the variable assignmet code \verb | <var:J> := <var:J> + <var:O0> | . This line transfers $ \{ <var:m> = <var:Y> \land <var:O0> = <nat:7> \land <var:J> = <nat:2> * <var:Y> \} $ as $ \{ <var:m> = <var:Y> \land <var:J> = <nat:2> * <var:Y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:m> = <var:Y> }} <var:O1> := <var:m> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:2> ; <var:J> := <var:O1> <var:J> := <var:J> + <var:O0> {{ <var:J> = <nat:2> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <var:Y> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O1> = <nat:2> * <var:Y> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:O0> = <nat:7> /\ <var:J> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Y> /\ <var:J> = <nat:2> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 