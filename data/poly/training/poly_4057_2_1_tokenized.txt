\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:5> ; <var:P> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given every positive coefficients $ <var:f> $ --- it to be that $ <var:G> = <var:f> $ before running our segment of code , then we see $ <var:P> = <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be seen through standard Hoare techniques . Shifting focus toward the next line of code contained in our code segment , we see the assignment command yielding $ <nat:5> $ as $ <var:H0>$ . This transfers the precondition $ \{ <var:G> = <var:f> \} $ to $ \{ <var:G> = <var:f> \land <var:H0> = <nat:5> \} $ . This is sound using the assignment inference rule found in usual Hoare techniques . Taking another step toward the upcoming command in our list of commands , the assignment line \verb | <var:P> := <var:H0> | . This command redefines the condition $ \{ <var:G> = <var:f> \land <var:H0> = <nat:5> \} $ into the condition $ \{ <var:G> = <var:f> \land <var:P> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:5> ; <var:P> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:G> = <var:f> }} <def:poly> {{ <var:P> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:f> /\ <var:H0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:f> /\ <var:P> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 