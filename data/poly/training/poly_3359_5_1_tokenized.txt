\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:j> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:1> ; <var:f> := <var:e1> <var:f> := <var:f> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- taking positive integers $ <var:J> $ --- it to hold that $ <var:j> = <var:J> $ before evaluating this series of instructions , then we have $ <var:f> = <nat:1> \cdot <var:J> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:j> = <var:J> \} \\ <var:e1> := <var:j> ; \\ \{ <var:j> = <var:J> \land <var:e1> = <var:J> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:j> = <var:J> \land <var:e1> = <var:J> \land <var:e0> = <nat:6> \} \\ <var:e1> := <var:e1> * <nat:1> ; \\ \{ <var:j> = <var:J> \land <var:e1> = <nat:1> \cdot <var:J> \land <var:e0> = <nat:6> \} \\ <var:f> := <var:e1> \\ \{ <var:j> = <var:J> \land <var:e0> = <nat:6> \land <var:f> = <nat:1> \cdot <var:J> \} \\ <var:f> := <var:f> + <var:e0> \\ \{ <var:j> = <var:J> \land <var:f> = <nat:1> \cdot <var:J> + <nat:6> \} \end{eqnarray} Given the preceding argument , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:j> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:1> ; <var:f> := <var:e1> <var:f> := <var:f> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:j> = <var:J> }} <def:poly> {{ <var:f> = <nat:1> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:e1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:e1> = <var:J> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:e1> = <nat:1> * <var:J> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:e0> = <nat:6> /\ <var:f> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:f> = <nat:1> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 