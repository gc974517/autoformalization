\begin{document} \begin{theorem} We define the following series of instructions as follows \begin{verbatim} <var:h0> := <nat:7> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:f> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:E> := <var:h2> ; <var:E> := <var:E> + <var:h1> ; <var:E> := <var:E> + <var:h0> \end{verbatim} Allowing --- for any positive integers $ <var:U> $ --- it to hold that $ <var:f> = <var:U> $ prior to executing this list of instructions then we see $ <var:E> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:5> \cdot <var:U> + <nat:7> $ when program executes . \end{theorem} \begin{proof} Proving correctness for this segment of code is clear using standard Hoare techniques . Advancing to the next step , we see the environment update statement \verb | <var:h0> := <nat:7> ; | . This code moves the condition $ \{ <var:f> = <var:U> \} $ into the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \} $ . Observing the upcoming statement seen in the list of instructions , we see the binding command assigning $ <nat:5> $ to $ <var:h1>$ . This code moves the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \} $ as the postcondition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \} $ . Immediately following , we see the variable update statement \verb | <var:h1> := <var:h1> * <var:f> ; | . This redefines the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> \} $ to $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \} $ . This is deduced with the assignment scheme defined in typical Hoare reasoning . Keeping momentum , the assignment statement \verb | <var:h2> := <nat:6> ; | . This forwards the precondition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \} $ to $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> \} $ . This is guaranteed using the assignment law given in Hoare logic . Shifting focus toward the following command contained in our series of commands , the assignment command \verb | <var:h2> := <var:h2> * <var:f> ; | . This takes the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> \} $ to the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> * <var:U> \} $ . This is sound through the assignment law defined in Hoare techniques . Advancing to the next step , we have the assignment command letting $ <var:h2> * <var:f> $ to $ <var:h2>$ . This code moves the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> * <var:U> \} $ as $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> * <var:U> ^ <nat:2> \} $ . Looking at the proceeding line found in the list of commands , we have the environment update line yielding $ <var:h2> $ to $ <var:E>$ . This statement redefines the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:h2> = <nat:6> * <var:U> ^ <nat:2> \} $ to $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:E> = <nat:6> * <var:U> ^ <nat:2> \} $ . This is given with the assignment inference rule of typical Hoare logic . Considering the upcoming step in our set of commands , we have the assignment statement \verb | <var:E> := <var:E> + <var:h1> ; | . This statement takes the precondition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:h1> = <nat:5> * <var:U> \land <var:E> = <nat:6> * <var:U> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> \} $ . This is given by the assignment inference rule from standard Hoare logic . Immediately after , the variable assignmet statement \verb | <var:E> := <var:E> + <var:h0> | . This statement forwards the precondition $ \{ <var:f> = <var:U> \land <var:h0> = <nat:7> \land <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> \} $ as the postcondition $ \{ <var:f> = <var:U> \land <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:f> = <var:U> }} <var:h0> := <nat:7> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:f> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:f> ; <var:h2> := <var:h2> * <var:f> ; <var:E> := <var:h2> ; <var:E> := <var:E> + <var:h1> ; <var:E> := <var:E> + <var:h0> {{ <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:U> /\ <var:h2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:U> /\ <var:h2> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:U> /\ <var:h2> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:5> * <var:U> /\ <var:E> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:h0> = <nat:7> /\ <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:E> = <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 