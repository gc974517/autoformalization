\begin{document} \begin{theorem} Consider a series of commands as follows \begin{verbatim} <var:I0> := <nat:7> ; <var:K> := <var:I0> \end{verbatim} Assume it to hold that $ <var:i> = <var:a> $ ahead of the execution of this series of instructions it follows that we see $ <var:K> = <nat:7> $ when segment of code exits . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:i> = <var:a> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:i> = <var:a> \land <var:I0> = <nat:7> \} \\ <var:K> := <var:I0> \\ \{ <var:i> = <var:a> \land <var:K> = <nat:7> \} \end{eqnarray} Using Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:i> = <var:a> }} <var:I0> := <nat:7> ; <var:K> := <var:I0> {{ <var:K> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:K> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 