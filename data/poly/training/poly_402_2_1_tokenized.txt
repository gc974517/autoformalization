\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:6> ; <var:s> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assume it to be that $ <var:m> = <var:F> $ prior to running this list of commands , it holds that $ <var:s> = <nat:6> $ once series of instructions is done executing . \end{theorem} \begin{proof} The argument for the list of instructions can be accomplished with standard Hoare logic . Shifting focus toward the following step in our list of instructions , the assignment command \verb | <var:f0> := <nat:6> ; | . This code takes $ \{ <var:m> = <var:F> \} $ toward $ \{ <var:m> = <var:F> \land <var:f0> = <nat:6> \} $ . This is shown by the assignment inference rule obtained from Hoare techniques . Next , the variable update statement \verb | <var:s> := <var:f0> | . This advances the condition $ \{ <var:m> = <var:F> \land <var:f0> = <nat:6> \} $ into the postcondition $ \{ <var:m> = <var:F> \land <var:s> = <nat:6> \} $ . This is deduced through the assignment scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:s> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:m> = <var:F> }} <def:poly> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 