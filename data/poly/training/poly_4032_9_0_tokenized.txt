\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:J> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:J> ; <var:m2> := <var:m2> * <var:J> ; <var:e> := <var:m2> ; <var:e> := <var:e> + <var:m1> ; <var:e> := <var:e> + <var:m0> \end{verbatim} Assume for any $ <var:X> \in \mathbb{N} $ it to hold that $ <var:J> = <var:X> $ before the evaluation of our set of instructions , it holds that we see $ <var:e> = <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:6> $ after list of instructions finishes . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:J> = <var:X> \} \\ <var:m0> := <nat:6> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \} \\ <var:m1> := <nat:3> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} \\ <var:m1> := <var:m1> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> * <var:X> \} \\ <var:m2> := <nat:1> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> * <var:X> \land <var:m2> = <nat:1> \} \\ <var:m2> := <var:m2> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> * <var:X> \land <var:m2> = <nat:1> * <var:X> \} \end{eqnarray} Advancing the evaluation of the set of commands gives : \begin{eqnarray} <var:m2> := <var:m2> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> * <var:X> \land <var:m2> = <nat:1> * <var:X> ^ <nat:2> \} \\ <var:e> := <var:m2> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> * <var:X> \land <var:e> = <nat:1> * <var:X> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:m1> ; \\ \{ <var:J> = <var:X> \land <var:m0> = <nat:6> \land <var:e> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} \end{eqnarray} Furthering the evaluation of the segment of code results in : \begin{eqnarray} <var:e> := <var:e> + <var:m0> \\ \{ <var:J> = <var:X> \land <var:e> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:J> = <var:X> }} <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:J> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:J> ; <var:m2> := <var:m2> * <var:J> ; <var:e> := <var:m2> ; <var:e> := <var:e> + <var:m1> ; <var:e> := <var:e> + <var:m0> {{ <var:e> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:X> /\ <var:m2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:X> /\ <var:m2> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:X> /\ <var:m2> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:X> /\ <var:e> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:m0> = <nat:6> /\ <var:e> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:e> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 