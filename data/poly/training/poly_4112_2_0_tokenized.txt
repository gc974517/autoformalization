\begin{document} \begin{theorem} Consider the following program in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:5> ; <var:i> := <var:O0> \end{verbatim} Given that we have $ <var:a> = <var:Z> $ , given some $ <var:Z> \in \mathbb{N} $ , ahead of the evaluation of the series of commands it follows that we have $ <var:i> = <nat:5> $ after series of commands is done executing . \end{theorem} \begin{proof} The flow of logic for the set of commands is accomplished by Hoare techniques . Jumping to the proceeding step found in our series of commands , the variable binding command giving $ <nat:5> $ into $ <var:O0>$ . This statement redefines the condition $ \{ <var:a> = <var:Z> \} $ toward $ \{ <var:a> = <var:Z> \land <var:O0> = <nat:5> \} $ . Following , we see the variable assignmet statement \verb | <var:i> := <var:O0> | . This statement advances the condition $ \{ <var:a> = <var:Z> \land <var:O0> = <nat:5> \} $ toward the condition $ \{ <var:a> = <var:Z> \land <var:i> = <nat:5> \} $ . This is rigorously given with the assignment inference rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:a> = <var:Z> }} <var:O0> := <nat:5> ; <var:i> := <var:O0> {{ <var:i> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:O0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:i> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 