\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:W> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:3> ; <var:f> := <var:d1> <var:f> := <var:f> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:W> = <var:r> $ before executing our segment of code , it must be that $ <var:f> = <nat:3> \cdot <var:r> + <nat:4> $ once code segment has finished . \end{theorem} \begin{proof} The flow of logic for this code is given by the below decorated segment of code . \begin{eqnarray} \{ <var:W> = <var:r> \} \\ <var:d1> := <var:W> ; \\ \{ <var:W> = <var:r> \land <var:d1> = <var:r> \} \end{eqnarray} Advancing the execution of this series of commands results in : \begin{eqnarray} <var:d0> := <nat:4> ; \\ \{ <var:W> = <var:r> \land <var:d1> = <var:r> \land <var:d0> = <nat:4> \} \\ <var:d1> := <var:d1> * <nat:3> ; \\ \{ <var:W> = <var:r> \land <var:d1> = <nat:3> \times <var:r> \land <var:d0> = <nat:4> \} \\ <var:f> := <var:d1> \\ \{ <var:W> = <var:r> \land <var:d0> = <nat:4> \land <var:f> = <nat:3> \times <var:r> \} \\ <var:f> := <var:f> + <var:d0> \\ \{ <var:W> = <var:r> \land <var:f> = <nat:3> \times <var:r> + <nat:4> \} \end{eqnarray} Utilizing Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:W> ; <var:d0> := <nat:4> ; <var:d1> := <var:d1> * <nat:3> ; <var:f> := <var:d1> <var:f> := <var:f> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:W> = <var:r> }} <def:poly> {{ <var:f> = <nat:3> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:d1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:d1> = <var:r> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:d1> = <nat:3> * <var:r> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:d0> = <nat:4> /\ <var:f> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:f> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 