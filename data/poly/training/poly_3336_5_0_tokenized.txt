\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:1> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:X> ; <var:U> := <var:q1> ; <var:U> := <var:U> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Allowing it to be that $ <var:X> = <var:O> $ ( given all integers $ <var:O> $ ) prior to executing our set of commands it holds that we see $ <var:U> = <nat:2> * <var:O> + <nat:1> $ after set of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:1> \} \\ <var:q1> := <nat:2> ; \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:1> \land <var:q1> = <nat:2> \} \\ <var:q1> := <var:q1> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:1> \land <var:q1> = <nat:2> * <var:O> \} \\ <var:U> := <var:q1> ; \\ \{ <var:X> = <var:O> \land <var:q0> = <nat:1> \land <var:U> = <nat:2> * <var:O> \} \\ <var:U> := <var:U> + <var:q0> \\ \{ <var:X> = <var:O> \land <var:U> = <nat:2> * <var:O> + <nat:1> \} \end{eqnarray} Using Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:X> ; <var:U> := <var:q1> ; <var:U> := <var:U> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:U> = <nat:2> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:q0> = <nat:1> /\ <var:U> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 