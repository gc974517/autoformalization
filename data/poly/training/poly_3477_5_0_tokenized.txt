\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:m> ; <var:r> := <var:S1> ; <var:r> := <var:r> + <var:S0> \end{verbatim} Allowing it to hold that $ <var:m> = <var:v> $ ahead of running the series of commands , it must be that we see $ <var:r> = <nat:9> * <var:v> + <nat:6> $ once code has finished . \end{theorem} \begin{proof} The argument for the program is accomplished by usual Hoare reasoning . Keeping momentum , we have the variable update code letting $ <nat:6> $ as $ <var:S0>$ . This redefines the precondition $ \{ <var:m> = <var:v> \} $ toward the condition $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \} $ . This is known to be sound by the assignment law of Hoare reasoning . Next , the binding line \verb | <var:S1> := <nat:9> ; | . This redefines the condition $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \} $ toward the condition $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} $ . Moving forward , we have the environment update command \verb | <var:S1> := <var:S1> * <var:m> ; | . This command takes the precondition $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} $ to $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:v> \} $ . This is shown to be logically sound using the assignment rule given by usual Hoare reasoning . Moving on , we see the variable update statement giving $ <var:S1> $ into $ <var:r>$ . This statement takes $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:v> \} $ toward $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:r> = <nat:9> * <var:v> \} $ . This is guaranteed by the assignment scheme in usual Hoare logic . Taking a look at the next piece of code contained in our program , we have the variable binding line \verb | <var:r> := <var:r> + <var:S0> | . This moves the condition $ \{ <var:m> = <var:v> \land <var:S0> = <nat:6> \land <var:r> = <nat:9> * <var:v> \} $ into $ \{ <var:m> = <var:v> \land <var:r> = <nat:9> * <var:v> + <nat:6> \} $ . This is shown through the assignment scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:m> = <var:v> }} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:m> ; <var:r> := <var:S1> ; <var:r> := <var:r> + <var:S0> {{ <var:r> = <nat:9> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:S0> = <nat:6> /\ <var:r> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:r> = <nat:9> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 