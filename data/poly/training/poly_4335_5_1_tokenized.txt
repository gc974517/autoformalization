\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:m> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:6> ; <var:B> := <var:r1> <var:B> := <var:B> + <var:r0> \end{verbatim} Given it to be that $ <var:m> = <var:l> $ prior to executing this series of commands it follows that $ <var:B> = <nat:6> \times <var:l> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is demonstrated with the below decorated set of instructions . \begin{eqnarray} \{ <var:m> = <var:l> \} \\ <var:r1> := <var:m> ; \\ \{ <var:m> = <var:l> \land <var:r1> = <var:l> \} \\ <var:r0> := <nat:7> ; \\ \{ <var:m> = <var:l> \land <var:r1> = <var:l> \land <var:r0> = <nat:7> \} \\ <var:r1> := <var:r1> * <nat:6> ; \\ \{ <var:m> = <var:l> \land <var:r1> = <nat:6> \times <var:l> \land <var:r0> = <nat:7> \} \\ <var:B> := <var:r1> \\ \{ <var:m> = <var:l> \land <var:r0> = <nat:7> \land <var:B> = <nat:6> \times <var:l> \} \\ <var:B> := <var:B> + <var:r0> \\ \{ <var:m> = <var:l> \land <var:B> = <nat:6> \times <var:l> + <nat:7> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:m> = <var:l> }} <var:r1> := <var:m> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:6> ; <var:B> := <var:r1> <var:B> := <var:B> + <var:r0> {{ <var:B> = <nat:6> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:r1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:r1> = <var:l> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:r1> = <nat:6> * <var:l> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:r0> = <nat:7> /\ <var:B> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:B> = <nat:6> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 