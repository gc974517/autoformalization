\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> ; <var:G> := <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> \end{verbatim} Allow that we have $ <var:Y> = <var:C> $ before evaluating our code segment , it follows that we see $ <var:G> = <nat:2> \times <var:C> ^ <nat:10> + <nat:3> \times <var:C> ^ <nat:9> + <nat:3> \times <var:C> ^ <nat:8> + <nat:1> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be done using usual Hoare reasoning . Taking a look at the subsequent bit of code seen in the segment of code , we see the environment update code \verb | <var:G> := <nat:2> ; | . This moves $ \{ <var:Y> = <var:C> \} $ to the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \} $ . Going forward , we see the variable update command \verb | <var:G> := <nat:3> + <var:G> * <var:Y> ; | . This statement takes the precondition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \} $ to $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> + <nat:3> \} $ . Taking another step toward the following bit of code in the set of instructions , we see the environment update line assigning $ <nat:3> + <var:G> * <var:Y> $ into $ <var:G>$ . This moves the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> + <nat:3> \} $ as $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:3> \} $ . This is known to be sound using the assignment law obtained from standard Hoare logic . Advancing on , we see the binding command \verb | <var:G> := <nat:1> + <var:G> * <var:Y> ; | . This code transfers $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:3> \} $ to the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:1> \} $ . Moving on to the proceeding line found in the list of commands , we have the variable assignmet code assigning $ <nat:2> + <var:G> * <var:Y> $ into $ <var:G>$ . This advances the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:1> \} $ as the postcondition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ . Immediately following , we see the variable assignmet code \verb | <var:G> := <var:G> * <var:Y> ; | . This statement advances $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ to the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + \} $ . This is known to be sound using the assignment rule given in typical Hoare reasoning . Looking at the next bit of code found in our segment of code , the binding command \verb | <var:G> := <nat:1> + <var:G> * <var:Y> ; | . This line forwards $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + \} $ as the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:1> \} $ . Considering the proceeding line of code in our list of commands , we see the assignment command assigning $ <nat:3> + <var:G> * <var:Y> $ into $ <var:G>$ . This code moves $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> + <nat:3> \} $ . This is given by the assignment inference rule obtained from standard Hoare techniques . Advancing to the upcoming step in the set of instructions , we see the variable assignmet statement \verb | <var:G> := <nat:1> + <var:G> * <var:Y> ; | . This statement redefines $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> + <nat:3> \} $ as the postcondition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:1> \} $ . Honing in on the following piece of code found in the list of instructions , the assignment command yielding $ <nat:2> + <var:G> * <var:Y> $ to $ <var:G>$ . This command forwards $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:1> \} $ toward $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:9> + <nat:3> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:1> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ . Now , we see the variable binding code giving $ <nat:2> + <var:G> * <var:Y$ as $ <var:G>$ . This moves $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:9> + <nat:3> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:1> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ into the condition $ \{ <var:Y> = <var:C> \land <var:G> = <nat:2> \times <var:C> ^ <nat:10> + <nat:3> \times <var:C> ^ <nat:9> + <nat:3> \times <var:C> ^ <nat:8> + <nat:1> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:Y> = <var:C> }} <var:G> := <nat:2> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> ; <var:G> := <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:3> + <var:G> * <var:Y> ; <var:G> := <nat:1> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> ; <var:G> := <nat:2> + <var:G> * <var:Y> {{ <var:G> = <nat:2> * <var:C> ^ <nat:10> + <nat:3> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:G> = <nat:2> * <var:C> ^ <nat:10> + <nat:3> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 