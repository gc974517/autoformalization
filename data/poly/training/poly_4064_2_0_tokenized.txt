\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:3> ; <var:w> := <var:P0> \end{verbatim} Assuming that $ <var:G> = <var:K> $ before evaluating the code , it must be that $ <var:w> = <nat:3> $ when series of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is accomplished through the below decorated set of commands . \begin{eqnarray} \{ <var:G> = <var:K> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:G> = <var:K> \land <var:P0> = <nat:3> \} \\ <var:w> := <var:P0> \\ \{ <var:G> = <var:K> \land <var:w> = <nat:3> \} \end{eqnarray} Utilizing usual Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:G> = <var:K> }} <var:P0> := <nat:3> ; <var:w> := <var:P0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 