\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:c> ; <var:G2> := <var:G1> * <var:c> ; <var:G3> := <var:G2> * <var:c> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:1> ; <var:y> := <var:G3> <var:y> := <var:y> + <var:G2> <var:y> := <var:y> + <var:G1> <var:y> := <var:y> + <var:G0> \end{verbatim} Allowing that we have $ <var:c> = <var:H> $ prior to the evaluation of this segment of code , it holds that $ <var:y> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:2> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:1> $ when set of commands executes . \end{theorem} \begin{proof} The proof of our program is evident by typical Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:c> = <var:H> \} \, <var:G1> := <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \, <var:G2> := <var:G1> * <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \} \, <var:G3> := <var:G2> * <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \} \, <var:G0> := <nat:1> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \, <var:G1> := <var:G1> * <nat:1> \, \{ <var:c> = <var:H> \land <var:G1> = <nat:1> \cdot <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <nat:1> \cdot <var:H> \land <var:G2> = <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \, <var:G2> := <var:G2> * <nat:2> \, \{ <var:c> = <var:H> \land <var:G1> = <nat:1> \cdot <var:H> \land <var:G2> = <nat:2> \cdot <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <nat:1> \cdot <var:H> \land <var:G2> = <nat:2> \cdot <var:H> ^ <nat:2> \land <var:G3> = <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \, <var:G3> := <var:G3> * <nat:1> \, \{ <var:c> = <var:H> \land <var:G1> = <nat:1> \cdot <var:H> \land <var:G2> = <nat:2> \cdot <var:H> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:H> ^ <nat:3> \land <var:G0> = <nat:1> \} \end{eqnarray} Advancing to the next pieces of code found in the series of commands , we see \begin{eqnarray} \{ <var:c> = <var:H> \} \, <var:G1> := <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \, <var:G2> := <var:G1> * <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \} \end{eqnarray} Advancing to the upcoming steps found in the code , we have \begin{eqnarray} \{ <var:c> = <var:H> \} \, <var:G1> := <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \\ \{ <var:c> = <var:H> \land <var:G1> = <var:H> \} \, <var:G2> := <var:G1> * <var:c> \, \{ <var:c> = <var:H> \land <var:G1> = <var:H> \land <var:G2> = <var:H> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:G1> := <var:c> ; <var:G2> := <var:G1> * <var:c> ; <var:G3> := <var:G2> * <var:c> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:1> ; <var:y> := <var:G3> <var:y> := <var:y> + <var:G2> <var:y> := <var:y> + <var:G1> <var:y> := <var:y> + <var:G0> {{ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <var:H> /\ <var:G2> = <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <nat:1> * <var:H> /\ <var:G2> = <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <nat:1> * <var:H> /\ <var:G2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:G3> = <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <nat:1> * <var:H> /\ <var:G2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:H> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <nat:1> * <var:H> /\ <var:G2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:G0> = <nat:1> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G1> = <nat:1> * <var:H> /\ <var:G0> = <nat:1> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:G0> = <nat:1> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:y> = <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 