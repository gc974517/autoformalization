\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:p0> := <nat:4> ; <var:H> := <var:p0> \end{verbatim} Allow $ <var:i> = <var:q> $ ahead of interpreting this set of commands , it must be that we see $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:q> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:i> = <var:q> \land <var:p0> = <nat:4> \} \\ <var:H> := <var:p0> \\ \{ <var:i> = <var:q> \land <var:H> = <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:i> = <var:q> }} <var:p0> := <nat:4> ; <var:H> := <var:p0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 