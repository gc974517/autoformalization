\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:W> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:4> ; <var:t> := <var:L1> <var:t> := <var:t> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assume for some positive integers $ <var:P> $ it to be that $ <var:W> = <var:P> $ prior to running this series of instructions , it follows that we have $ <var:t> = <nat:4> * <var:P> + <nat:6> $ when set of instructions exits . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:W> = <var:P> \} \\ <var:L1> := <var:W> ; \\ \{ <var:W> = <var:P> \land <var:L1> = <var:P> \} \\ <var:L0> := <nat:6> ; \\ \{ <var:W> = <var:P> \land <var:L1> = <var:P> \land <var:L0> = <nat:6> \} \\ <var:L1> := <var:L1> * <nat:4> ; \\ \{ <var:W> = <var:P> \land <var:L1> = <nat:4> \times <var:P> \land <var:L0> = <nat:6> \} \\ <var:t> := <var:L1> \\ \{ <var:W> = <var:P> \land <var:L0> = <nat:6> \land <var:t> = <nat:4> \times <var:P> \} \\ <var:t> := <var:t> + <var:L0> \\ \{ <var:W> = <var:P> \land <var:t> = <nat:4> \times <var:P> + <nat:6> \} \end{eqnarray} Given the above , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:W> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:4> ; <var:t> := <var:L1> <var:t> := <var:t> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:W> = <var:P> }} <def:poly> {{ <var:t> = <nat:4> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:L1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:L1> = <var:P> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:L1> = <nat:4> * <var:P> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:L0> = <nat:6> /\ <var:t> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:t> = <nat:4> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 