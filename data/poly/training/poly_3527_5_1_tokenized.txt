\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:E> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:7> ; <var:q> := <var:o1> <var:q> := <var:q> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:E> = <var:j> $ ahead of the execution of our series of commands , it holds that we see $ <var:q> = <nat:7> \cdot <var:j> + <nat:9> $ . \end{theorem} \begin{proof} The argument for the segment of code is given using standard Hoare techniques . Going to the next step , we see the variable update code assigning $ <var:E> $ toward $ <var:o1>$ . This transfers the precondition $ \{ <var:E> = <var:j> \} $ as the condition $ \{ <var:E> = <var:j> \land <var:o1> = <var:j> \} $ . Taking a look at the following line of code in our segment of code , we have the environment update command letting $ <nat:9> $ to $ <var:o0>$ . This redefines the precondition $ \{ <var:E> = <var:j> \land <var:o1> = <var:j> \} $ to the postcondition $ \{ <var:E> = <var:j> \land <var:o1> = <var:j> \land <var:o0> = <nat:9> \} $ . This is guaranteed with the assignment rule given in Hoare reasoning . Moving on to the next step , we see the command yielding $ <var:o1> * <nat:7> $ toward $ <var:o1>$ . This forwards the precondition $ \{ <var:E> = <var:j> \land <var:o1> = <var:j> \land <var:o0> = <nat:9> \} $ toward the condition $ \{ <var:E> = <var:j> \land <var:o1> = <nat:7> * <var:j> \land <var:o0> = <nat:9> \} $ . Moving forward , the variable assignmet code \verb | <var:q> := <var:o1> | . This command forwards the condition $ \{ <var:E> = <var:j> \land <var:o1> = <nat:7> * <var:j> \land <var:o0> = <nat:9> \} $ toward $ \{ <var:E> = <var:j> \land <var:o0> = <nat:9> \land <var:q> = <nat:7> * <var:j> \} $ . Honing in on the subsequent piece of code found in the list of commands , we have the code yielding $ <var:q> + <var:o0$ toward $ <var:q>$ . This takes the precondition $ \{ <var:E> = <var:j> \land <var:o0> = <nat:9> \land <var:q> = <nat:7> * <var:j> \} $ into $ \{ <var:E> = <var:j> \land <var:q> = <nat:7> * <var:j> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:E> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:7> ; <var:q> := <var:o1> <var:q> := <var:q> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:E> = <var:j> }} <def:poly> {{ <var:q> = <nat:7> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:o1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:o1> = <var:j> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:o1> = <nat:7> * <var:j> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:o0> = <nat:9> /\ <var:q> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:q> = <nat:7> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 