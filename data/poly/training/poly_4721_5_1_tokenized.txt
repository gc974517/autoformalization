\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:Y1> := <var:T> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:m> := <var:Y1> <var:m> := <var:m> + <var:Y0> \end{verbatim} Allowing $ <var:T> = <var:a> $ --- given $ <var:a> \in \mathbb{N} $ --- prior to the execution of this series of instructions , then $ <var:m> = <nat:3> * <var:a> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this segment of code can be accomplished through usual Hoare reasoning . Moving on to the next line found in the set of commands , we see the environment update statement yielding $ <var:T> $ to $ <var:Y1>$ . This statement advances the condition $ \{ <var:T> = <var:a> \} $ into the condition $ \{ <var:T> = <var:a> \land <var:Y1> = <var:a> \} $ . This is sound through the assignment inference rule of usual Hoare reasoning . Honing in on the proceeding bit of code in our series of commands , we have the environment update code \verb | <var:Y0> := <nat:9> ; | . This command takes the condition $ \{ <var:T> = <var:a> \land <var:Y1> = <var:a> \} $ to the postcondition $ \{ <var:T> = <var:a> \land <var:Y1> = <var:a> \land <var:Y0> = <nat:9> \} $ . This is rigorously given with the assignment inference rule given in standard Hoare techniques . Jumping to the upcoming piece of code seen in the code , we have the variable assignmet command \verb | <var:Y1> := <var:Y1> * <nat:3> ; | . This advances the condition $ \{ <var:T> = <var:a> \land <var:Y1> = <var:a> \land <var:Y0> = <nat:9> \} $ as $ \{ <var:T> = <var:a> \land <var:Y1> = <nat:3> \cdot <var:a> \land <var:Y0> = <nat:9> \} $ . Stepping forward , we see the variable assignmet code \verb | <var:m> := <var:Y1> | . This forwards $ \{ <var:T> = <var:a> \land <var:Y1> = <nat:3> \cdot <var:a> \land <var:Y0> = <nat:9> \} $ into the postcondition $ \{ <var:T> = <var:a> \land <var:Y0> = <nat:9> \land <var:m> = <nat:3> \cdot <var:a> \} $ . Now , the assignment code yielding $ <var:m> + <var:Y0$ as $ <var:m>$ . This line forwards $ \{ <var:T> = <var:a> \land <var:Y0> = <nat:9> \land <var:m> = <nat:3> \cdot <var:a> \} $ into the postcondition $ \{ <var:T> = <var:a> \land <var:m> = <nat:3> \cdot <var:a> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:T> = <var:a> }} <var:Y1> := <var:T> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:m> := <var:Y1> <var:m> := <var:m> + <var:Y0> {{ <var:m> = <nat:3> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:Y1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:Y1> = <var:a> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:Y1> = <nat:3> * <var:a> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:Y0> = <nat:9> /\ <var:m> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:m> = <nat:3> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 