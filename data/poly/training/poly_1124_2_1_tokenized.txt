\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:5> ; <var:F> := <var:K0> \end{verbatim} Allow $ <var:I> = <var:g> $ ahead of executing our series of instructions it must be that we have $ <var:F> = <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:g> \} \\ <var:K0> := <nat:5> ; \\ \{ <var:I> = <var:g> \land <var:K0> = <nat:5> \} \\ <var:F> := <var:K0> \\ \{ <var:I> = <var:g> \land <var:F> = <nat:5> \} \end{eqnarray} Applying usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:I> = <var:g> }} <var:K0> := <nat:5> ; <var:F> := <var:K0> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 