\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:R> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:7> ; <var:l> := <var:L1> <var:l> := <var:l> + <var:L0> \end{verbatim} Given $ <var:R> = <var:O> $ prior to running this set of commands , it holds that we have $ <var:l> = <nat:7> * <var:O> + <nat:7> $ once set of commands has exited . \end{theorem} \begin{proof} The course of logic for our code is evident by standard Hoare logic . Paying attention to the proceeding line of code contained in the segment of code , the assignment line \verb | <var:L1> := <var:R> ; | . This line transfers the precondition $ \{ <var:R> = <var:O> \} $ to the condition $ \{ <var:R> = <var:O> \land <var:L1> = <var:O> \} $ . After , we see the variable update statement \verb | <var:L0> := <nat:7> ; | . This statement advances $ \{ <var:R> = <var:O> \land <var:L1> = <var:O> \} $ toward $ \{ <var:R> = <var:O> \land <var:L1> = <var:O> \land <var:L0> = <nat:7> \} $ . This is ensured using the assignment law given in Hoare logic . Paying attention to the subsequent line of code found in the code segment , we have the variable update statement letting $ <var:L1> * <nat:7> $ toward $ <var:L1>$ . This code moves the precondition $ \{ <var:R> = <var:O> \land <var:L1> = <var:O> \land <var:L0> = <nat:7> \} $ toward the condition $ \{ <var:R> = <var:O> \land <var:L1> = <nat:7> \cdot <var:O> \land <var:L0> = <nat:7> \} $ . Moving on to the upcoming command contained in the segment of code , we see the environment update code binding $ <var:L1$ toward $ <var:l>$ . This transfers $ \{ <var:R> = <var:O> \land <var:L1> = <nat:7> \cdot <var:O> \land <var:L0> = <nat:7> \} $ as the postcondition $ \{ <var:R> = <var:O> \land <var:L0> = <nat:7> \land <var:l> = <nat:7> \cdot <var:O> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare techniques . Focusing on the next line in the list of instructions , we have the binding line yielding $ <var:l> + <var:L0$ to $ <var:l>$ . This statement takes the condition $ \{ <var:R> = <var:O> \land <var:L0> = <nat:7> \land <var:l> = <nat:7> \cdot <var:O> \} $ as $ \{ <var:R> = <var:O> \land <var:l> = <nat:7> \cdot <var:O> + <nat:7> \} $ . This is sound with the assignment inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:R> = <var:O> }} <var:L1> := <var:R> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:7> ; <var:l> := <var:L1> <var:l> := <var:l> + <var:L0> {{ <var:l> = <nat:7> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:L1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:L1> = <var:O> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:L1> = <nat:7> * <var:O> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:L0> = <nat:7> /\ <var:l> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:l> = <nat:7> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 