\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:g> ; <var:A> := <nat:4> + <var:A> * <var:g> ; <var:A> := <var:A> * <var:g> ; <var:A> := <nat:1> + <var:A> * <var:g> \end{verbatim} Allowing that we have $ <var:g> = <var:M> $ for all positive coefficients $ <var:M> $ ahead of the execution of our series of instructions , it must be that we see $ <var:A> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Observe that the below decorated code . \begin{eqnarray} \{ <var:g> = <var:M> \} \\ <var:A> := <nat:4> ; \\ \{ <var:g> = <var:M> \land <var:A> = <nat:4> \} \\ <var:A> := <nat:4> + <var:A> * <var:g> ; \\ \{ <var:g> = <var:M> \land <var:A> = <nat:4> \times <var:M> + <nat:4> \} \\ <var:A> := <nat:4> + <var:A> * <var:g> ; \\ \{ <var:g> = <var:M> \land <var:A> = <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:4> \} \\ <var:A> := <var:A> * <var:g> ; \\ \{ <var:g> = <var:M> \land <var:A> = <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + \} \\ <var:A> := <nat:1> + <var:A> * <var:g> \\ \{ <var:g> = <var:M> \land <var:A> = <nat:4> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:g> = <var:M> }} <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:g> ; <var:A> := <nat:4> + <var:A> * <var:g> ; <var:A> := <var:A> * <var:g> ; <var:A> := <nat:1> + <var:A> * <var:g> {{ <var:A> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:A> = <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:A> = <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:A> = <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:M> /\ <var:A> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 