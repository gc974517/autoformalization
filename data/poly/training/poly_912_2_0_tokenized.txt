\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:1> ; <var:P> := <var:a0> \end{verbatim} Allowing it to be that $ <var:s> = <var:F> $ --- given all $ <var:F> \in \mathbb{N} $ --- before interpreting the list of commands then we see $ <var:P> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions is accomplished by Hoare logic . Taking another step toward the subsequent command in the series of instructions , we see the line \verb | <var:a0> := <nat:1> ; | . This transfers $ \{ <var:s> = <var:F> \} $ into the condition $ \{ <var:s> = <var:F> \land <var:a0> = <nat:1> \} $ . This is given with the assignment rule found in typical Hoare reasoning . Following , the binding line binding $ <var:a0$ as $ <var:P>$ . This takes the condition $ \{ <var:s> = <var:F> \land <var:a0> = <nat:1> \} $ to $ \{ <var:s> = <var:F> \land <var:P> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <var:a0> := <nat:1> ; <var:P> := <var:a0> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 