\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:1> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:O> ; <var:k> := <var:U1> ; <var:k> := <var:k> + <var:U0> \end{verbatim} Assuming that $ <var:O> = <var:M> $ , for any $ <var:M> \in \mathbb{N} $ , prior to executing the set of instructions it must be that $ <var:k> = <nat:5> \times <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be shown using standard Hoare techniques . Observing the next command seen in our code segment , the command assigning $ <nat:1> $ to $ <var:U0>$ . This statement redefines the precondition $ \{ <var:O> = <var:M> \} $ toward $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \} $ . This is shown to be logically sound by the assignment scheme of Hoare reasoning . Looking at the proceeding line in the series of instructions , we see the code binding $ <nat:5> $ into $ <var:U1>$ . This code takes $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \} $ toward $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:5> \} $ . Going to the next step , we have the environment update code \verb | <var:U1> := <var:U1> * <var:O> ; | . This takes $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:5> \} $ to the postcondition $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:5> \cdot <var:M> \} $ . Moving on to the next step , we have the assignment command \verb | <var:k> := <var:U1> ; | . This advances $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:U1> = <nat:5> \cdot <var:M> \} $ toward the postcondition $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:k> = <nat:5> \cdot <var:M> \} $ . Moving on , we have the binding code yielding $ <var:k> + <var:U0$ as $ <var:k>$ . This command advances the precondition $ \{ <var:O> = <var:M> \land <var:U0> = <nat:1> \land <var:k> = <nat:5> \cdot <var:M> \} $ into the condition $ \{ <var:O> = <var:M> \land <var:k> = <nat:5> \cdot <var:M> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:O> = <var:M> }} <var:U0> := <nat:1> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:O> ; <var:k> := <var:U1> ; <var:k> := <var:k> + <var:U0> {{ <var:k> = <nat:5> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:U0> = <nat:1> /\ <var:k> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:k> = <nat:5> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 