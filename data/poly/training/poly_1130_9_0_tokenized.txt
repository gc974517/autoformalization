\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:U> ; <var:X2> := <nat:7> ; <var:X2> := <var:X2> * <var:U> ; <var:X2> := <var:X2> * <var:U> ; <var:m> := <var:X2> ; <var:m> := <var:m> + <var:X1> ; <var:m> := <var:m> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assuming ( given all natural coefficients $ <var:F> $ ) $ <var:U> = <var:F> $ ahead of the evaluation of our segment of code it follows that we see $ <var:m> = <nat:7> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> + <nat:2> $ after set of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is clear using usual Hoare techniques . Keeping momentum , we have the assignment code \verb | <var:X0> := <nat:2> ; | . This command moves $ \{ <var:U> = <var:F> \} $ as the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \} $ . This is given through the assignment inference rule given in Hoare logic . Moving on , we have the variable binding statement letting $ <nat:9> $ to $ <var:X1>$ . This code transfers $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \} $ to the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \} $ . Looking at the following command found in our segment of code , the variable binding line \verb | <var:X1> := <var:X1> * <var:U> ; | . This command redefines the precondition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \} $ into the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \} $ . This is shown by the assignment law defined in Hoare reasoning . Moving forward , we see the variable binding statement binding $ <nat:7> $ toward $ <var:X2>$ . This advances the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \} $ as the postcondition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \} $ . This is given by the assignment inference rule of Hoare reasoning . Moving on to the upcoming line found in our code segment , the variable binding code \verb | <var:X2> := <var:X2> * <var:U> ; | . This moves $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \} $ to the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \times <var:F> \} $ . This is ensured with the assignment rule from Hoare reasoning . Further , the variable assignmet command \verb | <var:X2> := <var:X2> * <var:U> ; | . This line takes the precondition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \times <var:F> \} $ toward $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \times <var:F> ^ <nat:2> \} $ . Going forward , we have the command \verb | <var:m> := <var:X2> ; | . This advances the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:X2> = <nat:7> \times <var:F> ^ <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:m> = <nat:7> \times <var:F> ^ <nat:2> \} $ . This is deduced using the assignment scheme given in Hoare logic . Moving forward to the next step , the variable update command \verb | <var:m> := <var:m> + <var:X1> ; | . This takes the precondition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:X1> = <nat:9> \times <var:F> \land <var:m> = <nat:7> \times <var:F> ^ <nat:2> \} $ as the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:m> = <nat:7> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} $ . Advancing to the subsequent piece of code in the program , the binding statement \verb | <var:m> := <var:m> + <var:X0> | . This code redefines the condition $ \{ <var:U> = <var:F> \land <var:X0> = <nat:2> \land <var:m> = <nat:7> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} $ as the condition $ \{ <var:U> = <var:F> \land <var:m> = <nat:7> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:U> ; <var:X2> := <nat:7> ; <var:X2> := <var:X2> * <var:U> ; <var:X2> := <var:X2> * <var:U> ; <var:m> := <var:X2> ; <var:m> := <var:m> + <var:X1> ; <var:m> := <var:m> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:U> = <var:F> }} <def:poly> {{ <var:m> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> * <var:F> /\ <var:X2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> * <var:F> /\ <var:X2> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> * <var:F> /\ <var:X2> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:9> * <var:F> /\ <var:m> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:X0> = <nat:2> /\ <var:m> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:m> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 