\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:8> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:n> ; <var:R> := <var:j1> ; <var:R> := <var:R> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allowing $ <var:n> = <var:y> $ ahead of evaluating this set of commands it holds that $ <var:R> = <nat:5> \times <var:y> + <nat:8> $ when segment of code exits . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is given using standard Hoare logic . Going to the next step , we see \begin{eqnarray} \{ <var:n> = <var:y> \} \, <var:j0> := <nat:8> \, \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \} \\ \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \} \, <var:j1> := <nat:5> \, \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \land <var:j1> = <nat:5> \} \\ \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \land <var:j1> = <nat:5> \} \, <var:j1> := <var:j1> * <var:n> \, \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \land <var:j1> = <nat:5> * <var:y> \} \end{eqnarray} Moving forward to the next pieces of code contained in the list of commands , we have \begin{eqnarray} \{ <var:n> = <var:y> \} \, <var:j0> := <nat:8> \, \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \} \\ \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \} \, <var:j1> := <nat:5> \, \{ <var:n> = <var:y> \land <var:j0> = <nat:8> \land <var:j1> = <nat:5> \} \end{eqnarray} This is deduced by the rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:8> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:n> ; <var:R> := <var:j1> ; <var:R> := <var:R> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <def:poly> {{ <var:R> = <nat:5> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:j0> = <nat:8> /\ <var:R> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:R> = <nat:5> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 