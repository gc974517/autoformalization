\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:4> ; <var:c> := <var:R0> \end{verbatim} Allowing it to be that $ <var:r> = <var:O> $ assuming some integers $ <var:O> $ ahead of the execution of the segment of code , it holds that $ <var:c> = <nat:4> $ . \end{theorem} \begin{proof} Notice the below decorated series of commands . \begin{eqnarray} \{ <var:r> = <var:O> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:r> = <var:O> \land <var:R0> = <nat:4> \} \\ <var:c> := <var:R0> \\ \{ <var:r> = <var:O> \land <var:c> = <nat:4> \} \end{eqnarray} The application of Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:r> = <var:O> }} <var:R0> := <nat:4> ; <var:c> := <var:R0> {{ <var:c> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:c> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 