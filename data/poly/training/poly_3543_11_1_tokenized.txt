\begin{document} \begin{theorem} Consider a segment of code as follows \begin{verbatim} <var:j1> := <var:z> ; <var:j2> := <var:j1> * <var:z> ; <var:j3> := <var:j2> * <var:z> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:1> ; <var:U> := <var:j3> <var:U> := <var:U> + <var:j2> <var:U> := <var:U> + <var:j1> <var:U> := <var:U> + <var:j0> \end{verbatim} Allowing for all $ <var:J> $ it to hold that $ <var:z> = <var:J> $ ahead of executing our series of instructions , it follows that we see $ <var:U> = <nat:1> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:5> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:J> \} \\ <var:j1> := <var:z> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <var:J> \} \\ <var:j2> := <var:j1> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:5> \} \\ <var:j1> := <var:j1> * <nat:1> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <nat:1> \times <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:5> \} \\ <var:j2> := <var:j2> * <nat:1> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <nat:1> \times <var:J> \land <var:j2> = <nat:1> \times <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:5> \} \\ <var:j3> := <var:j3> * <nat:1> ; \\ \{ <var:z> = <var:J> \land <var:j1> = <nat:1> \times <var:J> \land <var:j2> = <nat:1> \times <var:J> ^ <nat:2> \land <var:j3> = <nat:1> \times <var:J> ^ <nat:3> \land <var:j0> = <nat:5> \} \\ <var:U> := <var:j3> \\ \{ <var:z> = <var:J> \land <var:j1> = <nat:1> \times <var:J> \land <var:j2> = <nat:1> \times <var:J> ^ <nat:2> \land <var:j0> = <nat:5> \land <var:U> = <nat:1> \times <var:J> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:j2> \\ \{ <var:z> = <var:J> \land <var:j1> = <nat:1> \times <var:J> \land <var:j0> = <nat:5> \land <var:U> = <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:j1> \\ \{ <var:z> = <var:J> \land <var:j0> = <nat:5> \land <var:U> = <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> \} \\ <var:U> := <var:U> + <var:j0> \\ \{ <var:z> = <var:J> \land <var:U> = <nat:1> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:5> \} \end{eqnarray} Therefore , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <var:j1> := <var:z> ; <var:j2> := <var:j1> * <var:z> ; <var:j3> := <var:j2> * <var:z> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:1> ; <var:U> := <var:j3> <var:U> := <var:U> + <var:j2> <var:U> := <var:U> + <var:j1> <var:U> := <var:U> + <var:j0> {{ <var:U> = <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <nat:1> * <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <nat:1> * <var:J> /\ <var:j2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <nat:1> * <var:J> /\ <var:j2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:j3> = <nat:1> * <var:J> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <nat:1> * <var:J> /\ <var:j2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:j0> = <nat:5> /\ <var:U> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j1> = <nat:1> * <var:J> /\ <var:j0> = <nat:5> /\ <var:U> = <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:j0> = <nat:5> /\ <var:U> = <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:U> = <nat:1> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 