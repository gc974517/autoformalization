\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s3> := <var:s2> * <var:j> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:M> := <var:s3> <var:M> := <var:M> + <var:s2> <var:M> := <var:M> + <var:s1> <var:M> := <var:M> + <var:s0> \end{verbatim} Given it to hold that $ <var:j> = <var:C> $ ( given some natural coefficients $ <var:C> $ ) prior to the execution of the series of instructions it must be that we see $ <var:M> = <nat:3> \times <var:C> ^ <nat:3> + <nat:6> \times <var:C> ^ <nat:2> + <nat:7> \times <var:C> + <nat:2> $ when set of commands has terminated . \end{theorem} \begin{proof} The course of logic for this segment of code is demonstrated by standard Hoare techniques . Moving on to the upcoming step found in the set of instructions , we see the variable binding line \verb | <var:s1> := <var:j> ; | . This forwards the condition $ \{ <var:j> = <var:C> \} $ to the postcondition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \} $ . This is sound through the assignment rule from Hoare techniques . Moving forward , we see the assignment line \verb | <var:s2> := <var:s1> * <var:j> ; | . This redefines the precondition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \} $ as $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \} $ . Taking another step toward the subsequent bit of code contained in our set of instructions , the variable assignmet statement \verb | <var:s3> := <var:s2> * <var:j> ; | . This code moves the condition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \} $ into the condition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \} $ . Following , the binding code \verb | <var:s0> := <nat:2> ; | . This command moves $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \} $ as the condition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ . This is shown using the assignment rule given by typical Hoare reasoning . Moving forward to the next step , we see the line assigning $ <var:s1> * <nat:7> $ to $ <var:s1>$ . This redefines the precondition $ \{ <var:j> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ toward $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule defined by usual Hoare logic . Moving on , we see the assignment statement binding $ <var:s2> * <nat:6> $ as $ <var:s2>$ . This redefines the precondition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ toward $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ . This is guaranteed through the assignment scheme obtained from typical Hoare techniques . Moving on , we have the variable assignmet command \verb | <var:s3> := <var:s3> * <nat:3> ; | . This forwards the condition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ toward $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s3> = <nat:3> * <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ . This is deduced through the assignment rule of Hoare logic . Considering the following step in our series of instructions , the code letting $ <var:s3$ into $ <var:M>$ . This takes the condition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s3> = <nat:3> * <var:C> ^ <nat:3> \land <var:s0> = <nat:2> \} $ to the condition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> \} $ . This is deduced through the assignment inference rule given by Hoare reasoning . Moving forward to the next step , we have the variable update command \verb | <var:M> := <var:M> + <var:s2> | . This command forwards $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s2> = <nat:6> * <var:C> ^ <nat:2> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> \} $ . This is sound by the assignment scheme given in standard Hoare techniques . Advancing on , the variable binding line assigning $ <var:M> + <var:s1$ to $ <var:M>$ . This forwards the precondition $ \{ <var:j> = <var:C> \land <var:s1> = <nat:7> * <var:C> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> \} $ into the postcondition $ \{ <var:j> = <var:C> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> \} $ . Immediately after , we see the environment update command defining $ <var:M> + <var:s0$ to $ <var:M>$ . This statement advances $ \{ <var:j> = <var:C> \land <var:s0> = <nat:2> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> \} $ into $ \{ <var:j> = <var:C> \land <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> \} $ . This is given by the assignment inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <var:s1> := <var:j> ; <var:s2> := <var:s1> * <var:j> ; <var:s3> := <var:s2> * <var:j> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:7> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:M> := <var:s3> <var:M> := <var:M> + <var:s2> <var:M> := <var:M> + <var:s1> <var:M> := <var:M> + <var:s0> {{ <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <nat:7> * <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <nat:7> * <var:C> /\ <var:s2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <nat:7> * <var:C> /\ <var:s2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <nat:7> * <var:C> /\ <var:s2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:s0> = <nat:2> /\ <var:M> = <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s1> = <nat:7> * <var:C> /\ <var:s0> = <nat:2> /\ <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:s0> = <nat:2> /\ <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:M> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:7> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 