\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:u> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:u> ; <var:e2> := <var:e2> * <var:u> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:y> $ ahead of running the code segment it holds that we have $ <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> $ . \end{theorem} \begin{proof} Observe the below decorated code . \begin{eqnarray} \{ <var:u> = <var:y> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:2> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \} \\ <var:e1> := <var:e1> * <var:u> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \times <var:y> \} \\ <var:e2> := <nat:4> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \times <var:y> \land <var:e2> = <nat:4> \} \\ <var:e2> := <var:e2> * <var:u> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \times <var:y> \land <var:e2> = <nat:4> \times <var:y> \} \\ <var:e2> := <var:e2> * <var:u> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \times <var:y> \land <var:e2> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:G> := <var:e2> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:e1> = <nat:2> \times <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:e1> ; \\ \{ <var:u> = <var:y> \land <var:e0> = <nat:3> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> \} \\ <var:G> := <var:G> + <var:e0> \\ \{ <var:u> = <var:y> \land <var:G> = <nat:4> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:u> = <var:y> }} <var:e0> := <nat:3> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:u> ; <var:e2> := <nat:4> ; <var:e2> := <var:e2> * <var:u> ; <var:e2> := <var:e2> * <var:u> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> {{ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:y> /\ <var:e2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:y> /\ <var:e2> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:y> /\ <var:e2> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:2> * <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:e0> = <nat:3> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:G> = <nat:4> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 