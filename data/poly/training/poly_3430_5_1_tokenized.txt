\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:X> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:3> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Given given any natural coefficients $ <var:Z> $ that $ <var:X> = <var:Z> $ ahead of evaluating our code , it holds that we have $ <var:m> = <nat:3> \cdot <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:Z> \} \\ <var:K1> := <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:K1> = <var:Z> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:X> = <var:Z> \land <var:K1> = <var:Z> \land <var:K0> = <nat:9> \} \\ <var:K1> := <var:K1> * <nat:3> ; \\ \{ <var:X> = <var:Z> \land <var:K1> = <nat:3> * <var:Z> \land <var:K0> = <nat:9> \} \\ <var:m> := <var:K1> \\ \{ <var:X> = <var:Z> \land <var:K0> = <nat:9> \land <var:m> = <nat:3> * <var:Z> \} \\ <var:m> := <var:m> + <var:K0> \\ \{ <var:X> = <var:Z> \land <var:m> = <nat:3> * <var:Z> + <nat:9> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:X> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:3> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <def:poly> {{ <var:m> = <nat:3> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:K1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:K1> = <var:Z> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:K1> = <nat:3> * <var:Z> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:K0> = <nat:9> /\ <var:m> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:m> = <nat:3> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 