\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:7> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:Y> ; <var:x> := <var:M1> ; <var:x> := <var:x> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing for every natural numbers $ <var:Z> $ it to hold that $ <var:Y> = <var:Z> $ before running this series of commands it follows that we see $ <var:x> = <nat:2> * <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} The application of Hoare logic yields : \begin{eqnarray} \{ <var:Y> = <var:Z> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:Y> = <var:Z> \land <var:M0> = <nat:7> \} \\ <var:M1> := <nat:2> ; \\ \{ <var:Y> = <var:Z> \land <var:M0> = <nat:7> \land <var:M1> = <nat:2> \} \\ <var:M1> := <var:M1> * <var:Y> ; \\ \{ <var:Y> = <var:Z> \land <var:M0> = <nat:7> \land <var:M1> = <nat:2> \cdot <var:Z> \} \\ <var:x> := <var:M1> ; \\ \{ <var:Y> = <var:Z> \land <var:M0> = <nat:7> \land <var:x> = <nat:2> \cdot <var:Z> \} \\ <var:x> := <var:x> + <var:M0> \\ \{ <var:Y> = <var:Z> \land <var:x> = <nat:2> \cdot <var:Z> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M0> := <nat:7> ; <var:M1> := <nat:2> ; <var:M1> := <var:M1> * <var:Y> ; <var:x> := <var:M1> ; <var:x> := <var:x> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Y> = <var:Z> }} <def:poly> {{ <var:x> = <nat:2> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:M0> = <nat:7> /\ <var:M1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:M0> = <nat:7> /\ <var:x> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Z> /\ <var:x> = <nat:2> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 