\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <nat:2> + <var:G> * <var:c> ; <var:G> := <nat:4> + <var:G> * <var:c> \end{verbatim} Assuming $ <var:c> = <var:o> $ ahead of the execution of our code , it holds that we see $ <var:G> = <nat:2> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:o> \} \\ <var:G> := <nat:2> ; \\ \{ <var:c> = <var:o> \land <var:G> = <nat:2> \} \\ <var:G> := <nat:2> + <var:G> * <var:c> ; \\ \{ <var:c> = <var:o> \land <var:G> = <nat:2> \times <var:o> + <nat:2> \} \\ <var:G> := <nat:4> + <var:G> * <var:c> \\ \{ <var:c> = <var:o> \land <var:G> = <nat:2> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:4> \} \end{eqnarray} The application of Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:c> = <var:o> }} <var:G> := <nat:2> ; <var:G> := <nat:2> + <var:G> * <var:c> ; <var:G> := <nat:4> + <var:G> * <var:c> {{ <var:G> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:G> = <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:o> /\ <var:G> = <nat:2> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 