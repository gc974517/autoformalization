\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:7> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:u> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:u> ; <var:R2> := <var:R2> * <var:u> ; <var:U> := <var:R2> ; <var:U> := <var:U> + <var:R1> ; <var:U> := <var:U> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume --- letting positive coefficients $ <var:n> $ --- it to hold that $ <var:u> = <var:n> $ ahead of evaluating our segment of code , then $ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:7> $ when series of commands exits . \end{theorem} \begin{proof} The proof of the set of instructions is given by standard Hoare reasoning . Going forward , \[ \begin{tabular} {rcl} \{ <var:u> = <var:n> \} & <var:R0> := <nat:7> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} & <var:R1> := <nat:2> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} & <var:R1> := <var:R1> * <var:u> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \cdot <var:n> \} \end{tabular} This is sound by the variable assignmet law defined in usual Hoare reasoning . Moving forward to the upcoming lines of codefound in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:u> = <var:n> \} & <var:R0> := <nat:7> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} & <var:R1> := <nat:2> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} & <var:R1> := <var:R1> * <var:u> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \cdot <var:n> \} \end{tabular} This is shown to be logically sound through the variable binding law of Hoare reasoning . Jumping to the subsequent lines of codecontained in our program , \[ \begin{tabular} {rcl} \{ <var:u> = <var:n> \} & <var:R0> := <nat:7> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \} & <var:R1> := <nat:2> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} \\ \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \} & <var:R1> := <var:R1> * <var:u> & \{ <var:u> = <var:n> \land <var:R0> = <nat:7> \land <var:R1> = <nat:2> \cdot <var:n> \} \end{tabular} This is known to be sound by the environment update rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:7> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:u> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:u> ; <var:R2> := <var:R2> * <var:u> ; <var:U> := <var:R2> ; <var:U> := <var:U> + <var:R1> ; <var:U> := <var:U> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:u> = <var:n> }} <def:poly> {{ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> * <var:n> /\ <var:R2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:2> * <var:n> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:R0> = <nat:7> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:n> /\ <var:U> = <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 