\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:C> ; <var:I> := <var:Q1> ; <var:I> := <var:I> + <var:Q0> \end{verbatim} Assume it to hold that $ <var:C> = <var:R> $ , assuming some positive integer coefficients $ <var:R> $ , ahead of evaluating the series of instructions , then we have $ <var:I> = <nat:5> \cdot <var:R> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:C> = <var:R> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:C> = <var:R> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <nat:5> ; \\ \{ <var:C> = <var:R> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <var:C> ; \\ \{ <var:C> = <var:R> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:5> \times <var:R> \} \\ <var:I> := <var:Q1> ; \\ \{ <var:C> = <var:R> \land <var:Q0> = <nat:1> \land <var:I> = <nat:5> \times <var:R> \} \\ <var:I> := <var:I> + <var:Q0> \\ \{ <var:C> = <var:R> \land <var:I> = <nat:5> \times <var:R> + <nat:1> \} \end{eqnarray} Given the preceding argument , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:C> = <var:R> }} <var:Q0> := <nat:1> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:C> ; <var:I> := <var:Q1> ; <var:I> := <var:I> + <var:Q0> {{ <var:I> = <nat:5> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:Q0> = <nat:1> /\ <var:I> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:I> = <nat:5> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 