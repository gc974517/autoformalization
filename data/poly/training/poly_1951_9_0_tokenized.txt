\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:e> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:e> ; <var:m2> := <var:m2> * <var:e> ; <var:a> := <var:m2> ; <var:a> := <var:a> + <var:m1> ; <var:a> := <var:a> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Given ( letting positive integer coefficients $ <var:p> $ ) that $ <var:e> = <var:p> $ ahead of the execution of the list of instructions then $ <var:a> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> + <nat:7> $ when set of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for our code is done using typical Hoare logic . Immediately following , we have \verb | { <var:e> = <var:p> } <var:m0> := <nat:7> { <var:e> = <var:p> \land <var:m0> = <nat:7> } | , \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> } <var:m1> := <nat:5> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> } | , \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> } <var:m1> := <var:m1> * <var:e> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> } | , \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> } <var:m2> := <nat:3> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> \land <var:m2> = <nat:3> } | , \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> \land <var:m2> = <nat:3> } <var:m2> := <var:m2> * <var:e> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> \land <var:m2> = <nat:3> * <var:p> } | and \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> \land <var:m2> = <nat:3> * <var:p> } <var:m2> := <var:m2> * <var:e> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> * <var:p> \land <var:m2> = <nat:3> * <var:p> ^ <nat:2> } | . Next , \verb | { <var:e> = <var:p> } <var:m0> := <nat:7> { <var:e> = <var:p> \land <var:m0> = <nat:7> } | and \verb | { <var:e> = <var:p> \land <var:m0> = <nat:7> } <var:m1> := <nat:5> { <var:e> = <var:p> \land <var:m0> = <nat:7> \land <var:m1> = <nat:5> } | . This is given with the assignment scheme from typical Hoare reasoning . Paying attention to the upcoming line of code contained in the program , \verb | { <var:e> = <var:p> } <var:m0> := <nat:7> { <var:e> = <var:p> \land <var:m0> = <nat:7> } | . This is shown to be logically sound with the variable update law given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m0> := <nat:7> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:e> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:e> ; <var:m2> := <var:m2> * <var:e> ; <var:a> := <var:m2> ; <var:a> := <var:a> + <var:m1> ; <var:a> := <var:a> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:e> = <var:p> }} <def:poly> {{ <var:a> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:p> /\ <var:m2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:p> /\ <var:m2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:p> /\ <var:m2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:5> * <var:p> /\ <var:a> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:m0> = <nat:7> /\ <var:a> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:p> /\ <var:a> = <nat:3> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 