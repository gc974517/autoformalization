\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:N> ; <var:e> := <var:Y1> ; <var:e> := <var:e> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Assuming that we have $ <var:N> = <var:B> $ before evaluating the list of commands it must be that we see $ <var:e> = <nat:4> \times <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be accomplished through Hoare techniques . Taking another step toward the upcoming lines seen in the series of instructions , \verb | { <var:N> = <var:B> } <var:Y0> := <nat:7> { <var:N> = <var:B> \land <var:Y0> = <nat:7> } | , \verb | { <var:N> = <var:B> \land <var:Y0> = <nat:7> } <var:Y1> := <nat:4> { <var:N> = <var:B> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> } | and \verb | { <var:N> = <var:B> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> } <var:Y1> := <var:Y1> * <var:N> { <var:N> = <var:B> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> * <var:B> } | . This is rigorously given using the variable binding inference rule given by standard Hoare techniques . Keeping momentum , \verb | { <var:N> = <var:B> } <var:Y0> := <nat:7> { <var:N> = <var:B> \land <var:Y0> = <nat:7> } | and \verb | { <var:N> = <var:B> \land <var:Y0> = <nat:7> } <var:Y1> := <nat:4> { <var:N> = <var:B> \land <var:Y0> = <nat:7> \land <var:Y1> = <nat:4> } | . This is known to be sound by the environment update law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:N> ; <var:e> := <var:Y1> ; <var:e> := <var:e> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:N> = <var:B> }} <def:poly> {{ <var:e> = <nat:4> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:Y0> = <nat:7> /\ <var:Y1> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:Y0> = <nat:7> /\ <var:e> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:B> /\ <var:e> = <nat:4> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 