\begin{document} \begin{theorem} We define a segment of code as follows \begin{verbatim} <var:Q1> := <var:L> ; <var:Q2> := <var:Q1> * <var:L> ; <var:Q3> := <var:Q2> * <var:L> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:g> := <var:Q3> <var:g> := <var:g> + <var:Q2> <var:g> := <var:g> + <var:Q1> <var:g> := <var:g> + <var:Q0> \end{verbatim} Given it to be that $ <var:L> = <var:M> $ ahead of interpreting this series of instructions it follows that we have $ <var:g> = <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:8> \times <var:M> + <nat:8> $ after program executes . \end{theorem} \begin{proof} Proving correctness for the code segment is clear with standard Hoare reasoning . Moving onward , we see the code defining $ <var:L> $ to $ <var:Q1>$ . This takes the precondition $ \{ <var:L> = <var:M> \} $ into the postcondition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \} $ . Advancing to the following piece of code contained in our code , we have the variable update command \verb | <var:Q2> := <var:Q1> * <var:L> ; | . This command moves $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \} $ to the postcondition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \} $ . Advancing on , the code \verb | <var:Q3> := <var:Q2> * <var:L> ; | . This statement forwards the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \} $ . This is deduced with the assignment rule of Hoare techniques . Keeping momentum , we have the variable update statement yielding $ <nat:8> $ as $ <var:Q0>$ . This moves $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \} $ as the postcondition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ . This is sound by the assignment law obtained from usual Hoare logic . Now , we have the variable binding line letting $ <var:Q1> * <nat:8> $ into $ <var:Q1>$ . This statement forwards the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ as the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ . Immediately after , the variable binding line \verb | <var:Q2> := <var:Q2> * <nat:2> ; | . This code transfers $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ into $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ . Advancing to the upcoming line of code seen in the segment of code , we see the variable assignmet command \verb | <var:Q3> := <var:Q3> * <nat:1> ; | . This command transfers the precondition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q3> = <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ as the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q3> = <nat:1> * <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ . This is ensured by the assignment scheme given in standard Hoare logic . Observing the proceeding piece of code in the list of commands , we have the variable update command \verb | <var:g> := <var:Q3> | . This line advances the precondition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q3> = <nat:1> * <var:M> ^ <nat:3> \land <var:Q0> = <nat:8> \} $ toward $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment law in typical Hoare techniques . Advancing to the next statement seen in our list of instructions , the environment update code \verb | <var:g> := <var:g> + <var:Q2> | . This transfers the precondition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q2> = <nat:2> * <var:M> ^ <nat:2> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> \} $ into the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> \} $ . This is deduced with the assignment rule defined in Hoare reasoning . Further , we have the binding line \verb | <var:g> := <var:g> + <var:Q1> | . This statement forwards the condition $ \{ <var:L> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> \} $ into $ \{ <var:L> = <var:M> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> \} $ . This is deduced by the assignment scheme in standard Hoare reasoning . Looking at the following step found in our segment of code , the variable update command \verb | <var:g> := <var:g> + <var:Q0> | . This forwards the precondition $ \{ <var:L> = <var:M> \land <var:Q0> = <nat:8> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> \} $ to the condition $ \{ <var:L> = <var:M> \land <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:8> \} $ . This is rigorously given with the assignment inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <var:Q1> := <var:L> ; <var:Q2> := <var:Q1> * <var:L> ; <var:Q3> := <var:Q2> * <var:L> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:g> := <var:Q3> <var:g> := <var:g> + <var:Q2> <var:g> := <var:g> + <var:Q1> <var:g> := <var:g> + <var:Q0> {{ <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q2> = <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:Q3> = <var:M> ^ <nat:3> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:Q3> = <nat:1> * <var:M> ^ <nat:3> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:Q0> = <nat:8> /\ <var:g> = <nat:1> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q0> = <nat:8> /\ <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:Q0> = <nat:8> /\ <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:g> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 