\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:2> ; <var:d> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:V> = <var:R> $ prior to evaluating this series of commands it follows that we have $ <var:d> = <nat:2> $ . \end{theorem} \begin{proof} Observe the below decorated set of instructions . \begin{eqnarray} \{ <var:V> = <var:R> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:V> = <var:R> \land <var:X0> = <nat:2> \} \\ <var:d> := <var:X0> \\ \{ <var:V> = <var:R> \land <var:d> = <nat:2> \} \end{eqnarray} The application of standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:d> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:V> = <var:R> }} <def:poly> {{ <var:d> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:d> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 