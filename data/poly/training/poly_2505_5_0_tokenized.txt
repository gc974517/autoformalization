\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:C> ; <var:r> := <var:H1> ; <var:r> := <var:r> + <var:H0> \end{verbatim} Assume $ <var:C> = <var:X> $ , given integers $ <var:X> $ , prior to the execution of our series of instructions then we see $ <var:r> = <nat:2> \times <var:X> + <nat:1> $ once segment of code has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is evident with the following decorated segment of code . \begin{eqnarray} \{ <var:C> = <var:X> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:C> = <var:X> \land <var:H0> = <nat:1> \} \\ <var:H1> := <nat:2> ; \\ \{ <var:C> = <var:X> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \} \\ <var:H1> := <var:H1> * <var:C> ; \\ \{ <var:C> = <var:X> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:X> \} \\ <var:r> := <var:H1> ; \\ \{ <var:C> = <var:X> \land <var:H0> = <nat:1> \land <var:r> = <nat:2> \times <var:X> \} \\ <var:r> := <var:r> + <var:H0> \\ \{ <var:C> = <var:X> \land <var:r> = <nat:2> \times <var:X> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:C> = <var:X> }} <var:H0> := <nat:1> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:C> ; <var:r> := <var:H1> ; <var:r> := <var:r> + <var:H0> {{ <var:r> = <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:H0> = <nat:1> /\ <var:r> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:r> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 