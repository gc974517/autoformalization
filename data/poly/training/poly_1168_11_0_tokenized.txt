\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:j> ; <var:y4> := <nat:5> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:V> := <var:y4> ; <var:V> := <var:V> + <var:y1> ; <var:V> := <var:V> + <var:y0> \end{verbatim} Assuming ( given all whole numbers $ <var:L> $ ) $ <var:j> = <var:L> $ ahead of interpreting this set of commands it follows that we have $ <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:L> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \} \\ <var:y1> := <nat:6> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> \} \\ <var:y1> := <var:y1> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \} \\ <var:y4> := <nat:5> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:y4> = <nat:5> \} \\ <var:y4> := <var:y4> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:y4> = <nat:5> * <var:L> \} \\ <var:y4> := <var:y4> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:y4> = <nat:5> * <var:L> ^ <nat:2> \} \\ <var:y4> := <var:y4> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:y4> = <nat:5> * <var:L> ^ <nat:3> \} \\ <var:y4> := <var:y4> * <var:j> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:y4> = <nat:5> * <var:L> ^ <nat:4> \} \\ <var:V> := <var:y4> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:L> \land <var:V> = <nat:5> * <var:L> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:y1> ; \\ \{ <var:j> = <var:L> \land <var:y0> = <nat:4> \land <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> \} \\ <var:V> := <var:V> + <var:y0> \\ \{ <var:j> = <var:L> \land <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y4> : string := " <var:y4> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:j> ; <var:y4> := <nat:5> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:y4> := <var:y4> * <var:j> ; <var:V> := <var:y4> ; <var:V> := <var:V> + <var:y1> ; <var:V> := <var:V> + <var:y0> {{ <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y4> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y4> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y4> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y4> = <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:y4> = <nat:5> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:L> /\ <var:V> = <nat:5> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:y0> = <nat:4> /\ <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:V> = <nat:5> * <var:L> ^ <nat:4> + <nat:6> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 