\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:T0> := <nat:8> ; <var:Y> := <var:T0> \end{verbatim} Allow that $ <var:z> = <var:W> $ prior to evaluating the series of commands it follows that we see $ <var:Y> = <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is evident using this decorated set of instructions . \begin{eqnarray} \{ <var:z> = <var:W> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:z> = <var:W> \land <var:T0> = <nat:8> \} \\ <var:Y> := <var:T0> \\ \{ <var:z> = <var:W> \land <var:Y> = <nat:8> \} \end{eqnarray} Applying Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:z> = <var:W> }} <var:T0> := <nat:8> ; <var:Y> := <var:T0> {{ <var:Y> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:Y> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 