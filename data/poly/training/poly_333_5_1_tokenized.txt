\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:t> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:7> ; <var:W> := <var:o1> <var:W> := <var:W> + <var:o0> \end{verbatim} Assuming , letting positive coefficients $ <var:V> $ , that $ <var:t> = <var:V> $ prior to executing this series of instructions , it must be that we have $ <var:W> = <nat:7> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Note that the following decorated series of commands . \begin{eqnarray} \{ <var:t> = <var:V> \} \\ <var:o1> := <var:t> ; \\ \{ <var:t> = <var:V> \land <var:o1> = <var:V> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:t> = <var:V> \land <var:o1> = <var:V> \land <var:o0> = <nat:2> \} \\ <var:o1> := <var:o1> * <nat:7> ; \\ \{ <var:t> = <var:V> \land <var:o1> = <nat:7> \cdot <var:V> \land <var:o0> = <nat:2> \} \\ <var:W> := <var:o1> \\ \{ <var:t> = <var:V> \land <var:o0> = <nat:2> \land <var:W> = <nat:7> \cdot <var:V> \} \\ <var:W> := <var:W> + <var:o0> \\ \{ <var:t> = <var:V> \land <var:W> = <nat:7> \cdot <var:V> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:t> = <var:V> }} <var:o1> := <var:t> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:7> ; <var:W> := <var:o1> <var:W> := <var:W> + <var:o0> {{ <var:W> = <nat:7> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:o1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:o1> = <var:V> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:o1> = <nat:7> * <var:V> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:o0> = <nat:2> /\ <var:W> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:W> = <nat:7> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 