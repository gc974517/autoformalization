\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:7> ; <var:s> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allowing that we have $ <var:b> = <var:Z> $ ahead of running our code , it must be that $ <var:s> = <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be seen through Hoare logic . Moving on , we see the variable assignmet line \verb | <var:r0> := <nat:7> ; | . This line moves the precondition $ \{ <var:b> = <var:Z> \} $ as the postcondition $ \{ <var:b> = <var:Z> \land <var:r0> = <nat:7> \} $ . This is shown through the assignment law given by typical Hoare reasoning . Considering the proceeding command found in our series of instructions , we see the variable update command \verb | <var:s> := <var:r0> | . This line redefines the precondition $ \{ <var:b> = <var:Z> \land <var:r0> = <nat:7> \} $ into $ \{ <var:b> = <var:Z> \land <var:s> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:s> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:b> = <var:Z> }} <def:poly> {{ <var:s> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Z> /\ <var:s> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 