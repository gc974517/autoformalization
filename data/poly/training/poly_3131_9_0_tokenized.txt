\begin{document} \begin{theorem} We define a list of instructions as follows \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:a> ; <var:J2> := <nat:3> ; <var:J2> := <var:J2> * <var:a> ; <var:J2> := <var:J2> * <var:a> ; <var:K> := <var:J2> ; <var:K> := <var:K> + <var:J1> ; <var:K> := <var:K> + <var:J0> \end{verbatim} Allow that we have $ <var:a> = <var:u> $ before the execution of this segment of code , it follows that $ <var:K> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is shown using typical Hoare logic . Shifting focus toward the subsequent statements seen in the code , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:u> \} & <var:J0> := <nat:4> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \} & <var:J1> := <nat:4> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} & <var:J1> := <var:J1> * <var:a> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \} & <var:J2> := <nat:3> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:3> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:3> \} & <var:J2> := <var:J2> * <var:a> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:3> \times <var:u> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:3> \times <var:u> \} & <var:J2> := <var:J2> * <var:a> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \times <var:u> \land <var:J2> = <nat:3> \times <var:u> ^ <nat:2> \} \end{tabular} Observing the following pieces of code found in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:u> \} & <var:J0> := <nat:4> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \} \\ \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \} & <var:J1> := <nat:4> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \land <var:J1> = <nat:4> \} \end{tabular} This is deduced with the assignment scheme in standard Hoare reasoning . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:u> \} & <var:J0> := <nat:4> & \{ <var:a> = <var:u> \land <var:J0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:a> = <var:u> }} <var:J0> := <nat:4> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:a> ; <var:J2> := <nat:3> ; <var:J2> := <var:J2> * <var:a> ; <var:J2> := <var:J2> * <var:a> ; <var:K> := <var:J2> ; <var:K> := <var:K> + <var:J1> ; <var:K> := <var:K> + <var:J0> {{ <var:K> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:4> * <var:u> /\ <var:K> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:J0> = <nat:4> /\ <var:K> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:K> = <nat:3> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 