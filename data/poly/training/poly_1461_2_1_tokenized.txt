\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:9> ; <var:N> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:A> = <var:L> $ --- given every positive integers $ <var:L> $ --- prior to running the series of commands it must be that we have $ <var:N> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions is evident through Hoare reasoning . Stepping forward , we see the variable assignmet line letting $ <nat:9> $ as $ <var:f0>$ . This line moves the precondition $ \{ <var:A> = <var:L> \} $ into $ \{ <var:A> = <var:L> \land <var:f0> = <nat:9> \} $ . This is rigorously given by the assignment scheme in typical Hoare reasoning . Observing the subsequent piece of code in the series of commands , we see the variable assignmet command \verb | <var:N> := <var:f0> | . This advances the condition $ \{ <var:A> = <var:L> \land <var:f0> = <nat:9> \} $ into $ \{ <var:A> = <var:L> \land <var:N> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:N> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:A> = <var:L> }} <def:poly> {{ <var:N> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:L> /\ <var:N> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 