\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:s> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Allowing that $ <var:h> = <var:X> $ , for every natural coefficients $ <var:X> $ , ahead of executing our program it holds that we have $ <var:s> = <nat:4> $ once list of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be seen with usual Hoare reasoning . Shifting focus toward the proceeding line of code in our program , we see the assignment statement \verb | <var:F0> := <nat:4> ; | . This code moves $ \{ <var:h> = <var:X> \} $ as $ \{ <var:h> = <var:X> \land <var:F0> = <nat:4> \} $ . This is ensured with the assignment law obtained from Hoare logic . Advancing to the next step , we see the code \verb | <var:s> := <var:F0> | . This takes the condition $ \{ <var:h> = <var:X> \land <var:F0> = <nat:4> \} $ into the condition $ \{ <var:h> = <var:X> \land <var:s> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:s> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 