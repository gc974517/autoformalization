\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:w> ; <var:m2> := <var:m1> * <var:w> ; <var:m3> := <var:m2> * <var:w> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:1> ; <var:m3> := <var:m3> * <nat:6> ; <var:r> := <var:m3> <var:r> := <var:r> + <var:m2> <var:r> := <var:r> + <var:m1> <var:r> := <var:r> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Assuming $ <var:w> = <var:C> $ prior to running this code , it holds that we have $ <var:r> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be seen using usual Hoare techniques . Considering the following bit of code in our list of instructions , we see \begin{eqnarray} \{ <var:w> = <var:C> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \} \end{eqnarray} This is guaranteed by the binding scheme given by standard Hoare reasoning . Taking a look at the upcoming lines of codeseen in our set of instructions , \begin{eqnarray} \{ <var:w> = <var:C> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <var:C> \} \, <var:m2> := <var:m1> * <var:w> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:w> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} \, <var:m0> := <nat:5> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m1> := <var:m1> * <nat:4> \, \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m2> := <var:m2> * <nat:1> \, \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:m3> := <var:m3> * <nat:6> \, \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m3> = <nat:6> \cdot <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m3> = <nat:6> \cdot <var:C> ^ <nat:3> \land <var:m0> = <nat:5> \} \, <var:r> := <var:m3\, \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m0> = <nat:5> \land <var:r> = <nat:6> \cdot <var:C> ^ <nat:3> \} \\ \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:m0> = <nat:5> \land <var:r> = <nat:6> \cdot <var:C> ^ <nat:3> \} \, <var:r> := <var:r> + <var:m2\, \{ <var:w> = <var:C> \land <var:m1> = <nat:4> \cdot <var:C> \land <var:m0> = <nat:5> \land <var:r> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> \} \end{eqnarray} This is rigorously given using the assignment rule defined by typical Hoare logic . Considering the subsequent statement in the series of instructions , we see \begin{eqnarray} \{ <var:w> = <var:C> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:C> \land <var:m1> = <var:C> \} \end{eqnarray} This is deduced by the environment update rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:w> ; <var:m2> := <var:m1> * <var:w> ; <var:m3> := <var:m2> * <var:w> ; <var:m0> := <nat:5> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:1> ; <var:m3> := <var:m3> * <nat:6> ; <var:r> := <var:m3> <var:r> := <var:r> + <var:m2> <var:r> := <var:r> + <var:m1> <var:r> := <var:r> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:w> = <var:C> }} <def:poly> {{ <var:r> = <nat:6> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <nat:4> * <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <nat:4> * <var:C> /\ <var:m2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <nat:4> * <var:C> /\ <var:m2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:m3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <nat:4> * <var:C> /\ <var:m2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:m0> = <nat:5> /\ <var:r> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m1> = <nat:4> * <var:C> /\ <var:m0> = <nat:5> /\ <var:r> = <nat:6> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:m0> = <nat:5> /\ <var:r> = <nat:6> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:C> /\ <var:r> = <nat:6> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 