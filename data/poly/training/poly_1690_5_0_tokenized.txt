\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:x> ; <var:R> := <var:P1> ; <var:R> := <var:R> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume given all natural coefficients $ <var:l> $ that $ <var:x> = <var:l> $ prior to interpreting the list of commands then we see $ <var:R> = <nat:3> * <var:l> + <nat:2> $ when program executes . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is given using standard Hoare reasoning . After , we have the variable assignmet line \verb | <var:P0> := <nat:2> ; | . This forwards $ \{ <var:x> = <var:l> \} $ as $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \} $ . Now , the assignment statement defining $ <nat:3> $ as $ <var:P1>$ . This statement redefines $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \} $ as the postcondition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule of standard Hoare reasoning . Immediately after , we see the binding command \verb | <var:P1> := <var:P1> * <var:x> ; | . This moves the precondition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \} $ toward the condition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \cdot <var:l> \} $ . This is ensured with the assignment rule defined in typical Hoare techniques . Looking at the upcoming bit of code seen in the program , we have the environment update statement defining $ <var:P1> $ to $ <var:R>$ . This moves the condition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \cdot <var:l> \} $ to the condition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:l> \} $ . Observing the following command in our code segment , we have the binding line \verb | <var:R> := <var:R> + <var:P0> | . This line advances the precondition $ \{ <var:x> = <var:l> \land <var:P0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:l> \} $ to the postcondition $ \{ <var:x> = <var:l> \land <var:R> = <nat:3> \cdot <var:l> + <nat:2> \} $ . This is guaranteed through the assignment rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:x> ; <var:R> := <var:P1> ; <var:R> := <var:R> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:x> = <var:l> }} <def:poly> {{ <var:R> = <nat:3> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:P0> = <nat:2> /\ <var:R> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:R> = <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 