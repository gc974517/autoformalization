\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:z> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:8> ; <var:e> := <var:a1> <var:e> := <var:e> + <var:a0> \end{verbatim} Assume that we have $ <var:z> = <var:l> $ for positive integers $ <var:l> $ ahead of running this list of instructions then we see $ <var:e> = <nat:8> * <var:l> + <nat:5> $ when list of instructions finishes . \end{theorem} \begin{proof} Note that this decorated code segment . \begin{eqnarray} \{ <var:z> = <var:l> \} \\ <var:a1> := <var:z> ; \\ \{ <var:z> = <var:l> \land <var:a1> = <var:l> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:z> = <var:l> \land <var:a1> = <var:l> \land <var:a0> = <nat:5> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:z> = <var:l> \land <var:a1> = <nat:8> \cdot <var:l> \land <var:a0> = <nat:5> \} \\ <var:e> := <var:a1> \\ \{ <var:z> = <var:l> \land <var:a0> = <nat:5> \land <var:e> = <nat:8> \cdot <var:l> \} \\ <var:e> := <var:e> + <var:a0> \\ \{ <var:z> = <var:l> \land <var:e> = <nat:8> \cdot <var:l> + <nat:5> \} \end{eqnarray} Utilizing standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:z> = <var:l> }} <var:a1> := <var:z> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:8> ; <var:e> := <var:a1> <var:e> := <var:e> + <var:a0> {{ <var:e> = <nat:8> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:a1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:a1> = <var:l> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:a1> = <nat:8> * <var:l> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:a0> = <nat:5> /\ <var:e> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:e> = <nat:8> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 