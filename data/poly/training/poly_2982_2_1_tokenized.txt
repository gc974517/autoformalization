\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:A0> := <nat:2> ; <var:g> := <var:A0> \end{verbatim} Allow $ <var:L> = <var:t> $ --- given some natural coefficients $ <var:t> $ --- before the evaluation of the list of commands it must be that we have $ <var:g> = <nat:2> $ after code segment has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is evident through Hoare logic . Advancing , we see \verb | { <var:L> = <var:t> } <var:A0> := <nat:2> { <var:L> = <var:t> \land <var:A0> = <nat:2> } | . This is sound through the variable update law found in usual Hoare reasoning . Stepping through , we have \verb | { <var:L> = <var:t> } <var:A0> := <nat:2> { <var:L> = <var:t> \land <var:A0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:L> = <var:t> }} <var:A0> := <nat:2> ; <var:g> := <var:A0> {{ <var:g> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:g> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 