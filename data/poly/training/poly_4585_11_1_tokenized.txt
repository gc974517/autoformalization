\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:g> ; <var:y2> := <var:y1> * <var:g> ; <var:y3> := <var:y2> * <var:g> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:2> ; <var:o> := <var:y3> <var:o> := <var:o> + <var:y2> <var:o> := <var:o> + <var:y1> <var:o> := <var:o> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:g> = <var:x> $ prior to the evaluation of the code , then $ <var:o> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:x> \} \\ <var:y1> := <var:g> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <var:x> \} \\ <var:y2> := <var:y1> * <var:g> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:g> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y1> := <var:y1> * <nat:2> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <nat:2> * <var:x> \land <var:y2> = <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y2> := <var:y2> * <nat:3> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <nat:2> * <var:x> \land <var:y2> = <nat:3> * <var:x> ^ <nat:2> \land <var:y3> = <var:x> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:y3> := <var:y3> * <nat:2> ; \\ \{ <var:g> = <var:x> \land <var:y1> = <nat:2> * <var:x> \land <var:y2> = <nat:3> * <var:x> ^ <nat:2> \land <var:y3> = <nat:2> * <var:x> ^ <nat:3> \land <var:y0> = <nat:5> \} \\ <var:o> := <var:y3> \\ \{ <var:g> = <var:x> \land <var:y1> = <nat:2> * <var:x> \land <var:y2> = <nat:3> * <var:x> ^ <nat:2> \land <var:y0> = <nat:5> \land <var:o> = <nat:2> * <var:x> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:y2> \\ \{ <var:g> = <var:x> \land <var:y1> = <nat:2> * <var:x> \land <var:y0> = <nat:5> \land <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:y1> \\ \{ <var:g> = <var:x> \land <var:y0> = <nat:5> \land <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} \\ <var:o> := <var:o> + <var:y0> \\ \{ <var:g> = <var:x> \land <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:5> \} \end{eqnarray} Applying Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:g> ; <var:y2> := <var:y1> * <var:g> ; <var:y3> := <var:y2> * <var:g> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:2> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:2> ; <var:o> := <var:y3> <var:o> := <var:o> + <var:y2> <var:o> := <var:o> + <var:y1> <var:o> := <var:o> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:g> = <var:x> }} <def:poly> {{ <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <nat:2> * <var:x> /\ <var:y2> = <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <nat:2> * <var:x> /\ <var:y2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:y3> = <var:x> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <nat:2> * <var:x> /\ <var:y2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:x> ^ <nat:3> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <nat:2> * <var:x> /\ <var:y2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:y0> = <nat:5> /\ <var:o> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y1> = <nat:2> * <var:x> /\ <var:y0> = <nat:5> /\ <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:y0> = <nat:5> /\ <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:x> /\ <var:o> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 