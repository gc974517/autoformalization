\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:S> ; <var:e> := <var:A1> ; <var:e> := <var:e> + <var:A0> \end{verbatim} Assume that $ <var:S> = <var:w> $ before the evaluation of the segment of code it must be that we have $ <var:e> = <nat:6> * <var:w> + <nat:7> $ after list of commands finishes . \end{theorem} \begin{proof} Proving correctness for this code is demonstrated using Hoare reasoning . Advancing to the proceeding statements seen in the code , we have \verb | { <var:S> = <var:w> } <var:A0> := <nat:7> { <var:S> = <var:w> \land <var:A0> = <nat:7> } | , \verb | { <var:S> = <var:w> \land <var:A0> = <nat:7> } <var:A1> := <nat:6> { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> } | , \verb | { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> } <var:A1> := <var:A1> * <var:S> { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> \cdot <var:w> } | , \verb | { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:6> \cdot <var:w> } <var:e> := <var:A1> { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:e> = <nat:6> \cdot <var:w> } | and \verb | { <var:S> = <var:w> \land <var:A0> = <nat:7> \land <var:e> = <nat:6> \cdot <var:w> } <var:e> := <var:e> + <var:A0{ <var:S> = <var:w> \land <var:e> = <nat:6> \cdot <var:w> + <nat:7> } | . This is shown to be logically sound with the assignment scheme in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:S> = <var:w> }} <var:A0> := <nat:7> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:S> ; <var:e> := <var:A1> ; <var:e> := <var:e> + <var:A0> {{ <var:e> = <nat:6> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:A0> = <nat:7> /\ <var:e> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:e> = <nat:6> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 