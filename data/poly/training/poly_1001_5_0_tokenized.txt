\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:i> ; <var:d> := <var:F1> ; <var:d> := <var:d> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given positive numbers $ <var:H> $ --- that $ <var:i> = <var:H> $ prior to running our list of instructions it follows that we see $ <var:d> = <nat:2> \times <var:H> + <nat:3> $ when code segment has executed . \end{theorem} \begin{proof} The proof of this set of commands can be given by Hoare logic . Immediately following , we see the variable binding statement letting $ <nat:3> $ as $ <var:F0>$ . This command takes the precondition $ \{ <var:i> = <var:H> \} $ to the postcondition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \} $ . Paying attention to the next line found in the code , we see the variable assignmet code \verb | <var:F1> := <nat:2> ; | . This command transfers the condition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \} $ to the condition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \} $ . Taking a look at the subsequent line of code found in our program , we have the variable update command defining $ <var:F1> * <var:i> $ into $ <var:F1>$ . This line redefines the condition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:H> \} $ . Immediately after , we see the variable update code \verb | <var:d> := <var:F1> ; | . This forwards $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:H> \} $ toward the condition $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:d> = <nat:2> \times <var:H> \} $ . This is sound through the assignment inference rule obtained from Hoare logic . Stepping forward , we see the binding statement giving $ <var:d> + <var:F0$ to $ <var:d>$ . This statement transfers $ \{ <var:i> = <var:H> \land <var:F0> = <nat:3> \land <var:d> = <nat:2> \times <var:H> \} $ as the condition $ \{ <var:i> = <var:H> \land <var:d> = <nat:2> \times <var:H> + <nat:3> \} $ . This is rigorously given through the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:i> ; <var:d> := <var:F1> ; <var:d> := <var:d> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:i> = <var:H> }} <def:poly> {{ <var:d> = <nat:2> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:F0> = <nat:3> /\ <var:d> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:d> = <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 