\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:b> ; <var:K2> := <var:K1> * <var:b> ; <var:K3> := <var:K2> * <var:b> ; <var:K0> := <nat:3> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:4> ; <var:E> := <var:K3> <var:E> := <var:E> + <var:K2> <var:E> := <var:E> + <var:K0> \end{verbatim} Given $ <var:b> = <var:n> $ prior to the evaluation of this list of instructions then $ <var:E> = <nat:4> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this program is done using usual Hoare reasoning . Going to the next step , the variable assignmet code binding $ <var:b> $ to $ <var:K1>$ . This takes the precondition $ \{ <var:b> = <var:n> \} $ into $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \} $ . This is guaranteed by the assignment law from standard Hoare logic . Stepping through , we have the environment update code \verb | <var:K2> := <var:K1> * <var:b> ; | . This forwards the precondition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \} $ toward $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \} $ . This is deduced through the assignment law given by Hoare reasoning . Going forward , we have the line defining $ <var:K2> * <var:b> $ toward $ <var:K3>$ . This moves the precondition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \} $ . Jumping to the proceeding command found in the code , we see the variable binding code giving $ <nat:3> $ to $ <var:K0>$ . This statement takes the precondition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \} $ into $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ . Moving onward , the assignment statement binding $ <var:K2> * <nat:2> $ to $ <var:K2>$ . This moves $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ toward the condition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ . This is ensured by the assignment inference rule in usual Hoare logic . Considering the proceeding piece of code found in our series of commands , we have the assignment command giving $ <var:K3> * <nat:4> $ to $ <var:K3>$ . This moves $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ toward $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K3> = <nat:4> * <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ . Focusing on the following piece of code seen in our set of instructions , we have the variable update line giving $ <var:K3$ to $ <var:E>$ . This moves the condition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K3> = <nat:4> * <var:n> ^ <nat:3> \land <var:K0> = <nat:3> \} $ as the condition $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K0> = <nat:3> \land <var:E> = <nat:4> * <var:n> ^ <nat:3> \} $ . This is shown with the assignment scheme given in usual Hoare techniques . Jumping to the subsequent step found in the series of commands , we have the assignment command giving $ <var:E> + <var:K2$ to $ <var:E>$ . This line forwards $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <nat:2> * <var:n> ^ <nat:2> \land <var:K0> = <nat:3> \land <var:E> = <nat:4> * <var:n> ^ <nat:3> \} $ as $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K0> = <nat:3> \land <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> \} $ . Moving on to the upcoming line seen in our segment of code , the environment update code giving $ <var:E> + <var:K0$ to $ <var:E>$ . This line advances $ \{ <var:b> = <var:n> \land <var:K1> = <var:n> \land <var:K0> = <nat:3> \land <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> \} $ as $ \{ <var:b> = <var:n> \land <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:b> = <var:n> }} <var:K1> := <var:b> ; <var:K2> := <var:K1> * <var:b> ; <var:K3> := <var:K2> * <var:b> ; <var:K0> := <nat:3> ; <var:K2> := <var:K2> * <nat:2> ; <var:K3> := <var:K3> * <nat:4> ; <var:E> := <var:K3> <var:E> := <var:E> + <var:K2> <var:E> := <var:E> + <var:K0> {{ <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:K0> = <nat:3> /\ <var:E> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:K1> = <var:n> /\ <var:K0> = <nat:3> /\ <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 