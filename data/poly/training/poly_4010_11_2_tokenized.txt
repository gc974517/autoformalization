\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> \end{verbatim} Assuming it to be that $ <var:d> = <var:E> $ prior to running the code , then $ <var:y> = <nat:3> \cdot <var:E> ^ <nat:10> + <nat:2> \cdot <var:E> ^ <nat:9> + <nat:1> \cdot <var:E> ^ <nat:6> + <nat:3> \cdot <var:E> ^ <nat:5> + <nat:2> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:2> $ when series of instructions executes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is evident using standard Hoare logic . Advancing on , we have the assignment line binding $ <nat:3> $ as $ <var:y>$ . This moves the condition $ \{ <var:d> = <var:E> \} $ toward $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \} $ . Observing the following step contained in our program , we see the variable assignmet command defining $ <nat:2> + <var:y> * <var:d> $ as $ <var:y>$ . This advances the precondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \} $ into $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> + <nat:2> \} $ . This is known to be sound with the assignment law from standard Hoare reasoning . Immediately after , we see the environment update statement \verb | <var:y> := <var:y> * <var:d> ; | . This redefines the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> + <nat:2> \} $ toward the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + \} $ . This is sound with the assignment inference rule of Hoare logic . Following , the variable update command giving $ <var:y> * <var:d> $ toward $ <var:y>$ . This advances the precondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + \} $ to the postcondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + \} $ . This is known to be sound by the assignment rule found in typical Hoare techniques . Advancing to the proceeding statement seen in our list of commands , the code giving $ <nat:1> + <var:y> * <var:d> $ into $ <var:y>$ . This command forwards the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + \} $ toward $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \} $ . Focusing on the next statement seen in the series of instructions , the variable assignmet statement \verb | <var:y> := <nat:3> + <var:y> * <var:d> ; | . This command redefines the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \} $ toward the postcondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule defined in typical Hoare reasoning . Keeping momentum , we see the variable binding line yielding $ <nat:2> + <var:y> * <var:d> $ toward $ <var:y>$ . This redefines the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> + <nat:3> \} $ toward the postcondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> \} $ . Advancing on , we have the variable binding command yielding $ <nat:1> + <var:y> * <var:d> $ as $ <var:y>$ . This takes $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> \} $ toward the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> \} $ . This is guaranteed through the assignment law defined in standard Hoare logic . Advancing on , the variable binding command \verb | <var:y> := <nat:3> + <var:y> * <var:d> ; | . This code moves the precondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> \} $ into $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:3> \} $ . Going to the next step , we see the code yielding $ <nat:1> + <var:y> * <var:d> $ toward $ <var:y>$ . This code forwards the precondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:3> \} $ to the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:9> + <nat:2> \times <var:E> ^ <nat:8> + <nat:1> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:1> \} $ . Moving on , we see the variable assignmet command assigning $ <nat:2> + <var:y> * <var:d$ toward $ <var:y>$ . This forwards the precondition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:9> + <nat:2> \times <var:E> ^ <nat:8> + <nat:1> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:1> \} $ into the condition $ \{ <var:d> = <var:E> \land <var:y> = <nat:3> \times <var:E> ^ <nat:10> + <nat:2> \times <var:E> ^ <nat:9> + <nat:1> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:2> \} $ . This is rigorously given with the assignment law given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:d> = <var:E> }} <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:3> + <var:y> * <var:d> ; <var:y> := <nat:1> + <var:y> * <var:d> ; <var:y> := <nat:2> + <var:y> * <var:d> {{ <var:y> = <nat:3> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:9> + <nat:2> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:y> = <nat:3> * <var:E> ^ <nat:10> + <nat:2> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 