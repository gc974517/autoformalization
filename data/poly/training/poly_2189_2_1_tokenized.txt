\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:4> ; <var:B> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Allowing that $ <var:x> = <var:m> $ before running this code segment , then $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be shown by Hoare reasoning . Looking at the proceeding statements contained in the series of commands , \[ \begin{tabular} {rcl} \{ <var:x> = <var:m> \} & <var:h0> := <nat:4> & \{ <var:x> = <var:m> \land <var:h0> = <nat:4> \} \\ \{ <var:x> = <var:m> \land <var:h0> = <nat:4> \} & <var:B> := <var:h0& \{ <var:x> = <var:m> \land <var:B> = <nat:4> \} \end{tabular} This is deduced by the inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:B> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:x> = <var:m> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 