\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:6> ; <var:r> := <var:b0> \end{verbatim} Assume that we have $ <var:L> = <var:v> $ ahead of evaluating our segment of code it must be that we see $ <var:r> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our list of commands can be seen by standard Hoare logic . Paying attention to the next line in our set of commands , \begin{verbatim} { <var:L> = <var:v> } <var:b0> := <nat:6> { <var:L> = <var:v> \land <var:b0> = <nat:6> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:L> = <var:v> } <var:b0> := <nat:6> { <var:L> = <var:v> \land <var:b0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:L> = <var:v> }} <var:b0> := <nat:6> ; <var:r> := <var:b0> {{ <var:r> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 