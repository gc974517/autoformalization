\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:4> ; <var:H> := <var:s0> \end{verbatim} Allowing that we have $ <var:e> = <var:h> $ ahead of the evaluation of our code segment , it must be that we have $ <var:H> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment can be done using the below decorated code segment . \begin{eqnarray} \{ <var:e> = <var:h> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:e> = <var:h> \land <var:s0> = <nat:4> \} \\ <var:H> := <var:s0> \\ \{ <var:e> = <var:h> \land <var:H> = <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:e> = <var:h> }} <var:s0> := <nat:4> ; <var:H> := <var:s0> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 