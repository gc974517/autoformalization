\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:j> ; <var:u> := <var:T1> ; <var:u> := <var:u> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:j> = <var:s> $ prior to the execution of our code segment it must be that we have $ <var:u> = <nat:1> * <var:s> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands can be done through the below decorated program . \begin{eqnarray} \{ <var:j> = <var:s> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:j> = <var:s> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:1> ; \\ \{ <var:j> = <var:s> \land <var:T0> = <nat:9> \land <var:T1> = <nat:1> \} \\ <var:T1> := <var:T1> * <var:j> ; \\ \{ <var:j> = <var:s> \land <var:T0> = <nat:9> \land <var:T1> = <nat:1> * <var:s> \} \\ <var:u> := <var:T1> ; \\ \{ <var:j> = <var:s> \land <var:T0> = <nat:9> \land <var:u> = <nat:1> * <var:s> \} \\ <var:u> := <var:u> + <var:T0> \\ \{ <var:j> = <var:s> \land <var:u> = <nat:1> * <var:s> + <nat:9> \} \end{eqnarray} Using typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:j> ; <var:u> := <var:T1> ; <var:u> := <var:u> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:j> = <var:s> }} <def:poly> {{ <var:u> = <nat:1> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:T0> = <nat:9> /\ <var:u> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:s> /\ <var:u> = <nat:1> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 