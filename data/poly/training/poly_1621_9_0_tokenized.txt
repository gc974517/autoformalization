\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:i> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:i> ; <var:L2> := <var:L2> * <var:i> ; <var:I> := <var:L2> ; <var:I> := <var:I> + <var:L1> ; <var:I> := <var:I> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:i> = <var:V> $ prior to the execution of the list of commands , it follows that $ <var:I> = <nat:1> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:i> = <var:V> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \} \\ <var:L1> := <nat:3> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> \} \\ <var:L1> := <var:L1> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:V> \} \\ <var:L2> := <nat:1> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:V> \land <var:L2> = <nat:1> \} \\ <var:L2> := <var:L2> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:V> \land <var:L2> = <nat:1> * <var:V> \} \\ <var:L2> := <var:L2> * <var:i> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:V> \land <var:L2> = <nat:1> * <var:V> ^ <nat:2> \} \\ <var:I> := <var:L2> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:V> \land <var:I> = <nat:1> * <var:V> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:L1> ; \\ \{ <var:i> = <var:V> \land <var:L0> = <nat:3> \land <var:I> = <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> \} \\ <var:I> := <var:I> + <var:L0> \\ \{ <var:i> = <var:V> \land <var:I> = <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> \} \end{eqnarray} Thus , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:i> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:i> ; <var:L2> := <var:L2> * <var:i> ; <var:I> := <var:L2> ; <var:I> := <var:I> + <var:L1> ; <var:I> := <var:I> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <def:poly> {{ <var:I> = <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:V> /\ <var:L2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:V> /\ <var:L2> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:V> /\ <var:L2> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:V> /\ <var:I> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:L0> = <nat:3> /\ <var:I> = <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:I> = <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 