\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:i> ; <var:k2> := <nat:6> ; <var:k2> := <var:k2> * <var:i> ; <var:k2> := <var:k2> * <var:i> ; <var:g> := <var:k2> ; <var:g> := <var:g> + <var:k1> ; <var:g> := <var:g> + <var:k0> \end{verbatim} Assume that $ <var:i> = <var:O> $ ahead of the execution of the segment of code it holds that $ <var:g> = <nat:6> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> + <nat:7> $ once list of commands exits . \end{theorem} \begin{proof} The application of Hoare techniques results in : \begin{eqnarray} \{ <var:i> = <var:O> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \} \\ <var:k1> := <nat:7> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \} \\ <var:k1> := <var:k1> * <var:i> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \times <var:O> \} \\ <var:k2> := <nat:6> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \times <var:O> \land <var:k2> = <nat:6> \} \\ <var:k2> := <var:k2> * <var:i> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \times <var:O> \land <var:k2> = <nat:6> \times <var:O> \} \\ <var:k2> := <var:k2> * <var:i> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \times <var:O> \land <var:k2> = <nat:6> \times <var:O> ^ <nat:2> \} \\ <var:g> := <var:k2> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:k1> = <nat:7> \times <var:O> \land <var:g> = <nat:6> \times <var:O> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:k1> ; \\ \{ <var:i> = <var:O> \land <var:k0> = <nat:7> \land <var:g> = <nat:6> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} \\ <var:g> := <var:g> + <var:k0> \\ \{ <var:i> = <var:O> \land <var:g> = <nat:6> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:7> \} \end{eqnarray} Considering the above , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:i> = <var:O> }} <var:k0> := <nat:7> ; <var:k1> := <nat:7> ; <var:k1> := <var:k1> * <var:i> ; <var:k2> := <nat:6> ; <var:k2> := <var:k2> * <var:i> ; <var:k2> := <var:k2> * <var:i> ; <var:g> := <var:k2> ; <var:g> := <var:g> + <var:k1> ; <var:g> := <var:g> + <var:k0> {{ <var:g> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:O> /\ <var:k2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:O> /\ <var:k2> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:O> /\ <var:k2> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:7> * <var:O> /\ <var:g> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:k0> = <nat:7> /\ <var:g> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:O> /\ <var:g> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 