\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:X> ; <var:a2> := <var:a1> * <var:X> ; <var:a3> := <var:a2> * <var:X> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:4> ; <var:c> := <var:a3> <var:c> := <var:c> + <var:a2> <var:c> := <var:c> + <var:a1> <var:c> := <var:c> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:X> = <var:m> $ assuming some positive integers $ <var:m> $ ahead of running this code segment then we see $ <var:c> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions can be seen using the below decorated program . \begin{eqnarray} \{ <var:X> = <var:m> \} \\ <var:a1> := <var:X> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <var:m> \} \\ <var:a2> := <var:a1> * <var:X> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:X> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a2> := <var:a2> * <nat:2> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:a3> := <var:a3> * <nat:4> ; \\ \{ <var:X> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:a3> = <nat:4> \times <var:m> ^ <nat:3> \land <var:a0> = <nat:3> \} \\ <var:c> := <var:a3> \\ \{ <var:X> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:a0> = <nat:3> \land <var:c> = <nat:4> \times <var:m> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:a2> \\ \{ <var:X> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a0> = <nat:3> \land <var:c> = <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:a1> \\ \{ <var:X> = <var:m> \land <var:a0> = <nat:3> \land <var:c> = <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> \} \\ <var:c> := <var:c> + <var:a0> \\ \{ <var:X> = <var:m> \land <var:c> = <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:X> ; <var:a2> := <var:a1> * <var:X> ; <var:a3> := <var:a2> * <var:X> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:4> ; <var:c> := <var:a3> <var:c> := <var:c> + <var:a2> <var:c> := <var:c> + <var:a1> <var:c> := <var:c> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:c> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:m> ^ <nat:3> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:a0> = <nat:3> /\ <var:c> = <nat:4> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a0> = <nat:3> /\ <var:c> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:a0> = <nat:3> /\ <var:c> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:c> = <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 