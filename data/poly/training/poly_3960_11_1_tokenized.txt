\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:B> ; <var:N2> := <var:N1> * <var:B> ; <var:N3> := <var:N2> * <var:B> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:2> ; <var:g> := <var:N3> <var:g> := <var:g> + <var:N2> <var:g> := <var:g> + <var:N1> <var:g> := <var:g> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Allowing $ <var:B> = <var:X> $ prior to the execution of the set of instructions it follows that $ <var:g> = <nat:2> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:9> $ when program has executed . \end{theorem} \begin{proof} The flow of logic for this code is given using usual Hoare reasoning . Moving forward to the subsequent line of code seen in the list of instructions , we have the variable assignmet code letting $ <var:B> $ to $ <var:N1>$ . This transfers $ \{ <var:B> = <var:X> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \} $ . This is shown through the assignment inference rule defined in usual Hoare logic . Shifting focus toward the following bit of code seen in the list of instructions , we see the variable update code yielding $ <var:N1> * <var:B> $ as $ <var:N2>$ . This line transfers $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \} $ toward $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \} $ . This is ensured using the assignment rule defined by typical Hoare techniques . Going forward , the binding line letting $ <var:N2> * <var:B> $ as $ <var:N3>$ . This takes the condition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \} $ . This is sound with the assignment inference rule found in standard Hoare techniques . Focusing on the next line found in our list of instructions , the variable assignmet line letting $ <nat:9> $ as $ <var:N0>$ . This line transfers the condition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \} $ into the condition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ . This is shown through the assignment law found in typical Hoare techniques . Moving forward , the variable binding code defining $ <var:N1> * <nat:1> $ to $ <var:N1>$ . This moves the condition $ \{ <var:B> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ to the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ . Moving on to the next step , the environment update command \verb | <var:N2> := <var:N2> * <nat:7> ; | . This line forwards the precondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ as $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ . This is sound by the assignment scheme in usual Hoare logic . Moving forward to the next step , we have the environment update statement \verb | <var:N3> := <var:N3> * <nat:2> ; | . This moves the precondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N3> = <nat:2> * <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ . Moving forward to the next bit of code in the list of instructions , we have the assignment statement \verb | <var:g> := <var:N3> | . This command takes $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N3> = <nat:2> * <var:X> ^ <nat:3> \land <var:N0> = <nat:9> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> \} $ . Advancing to the next step , we see the environment update command \verb | <var:g> := <var:g> + <var:N2> | . This line advances $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N2> = <nat:7> * <var:X> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> \} $ to the postcondition $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} $ . This is shown by the assignment rule found in standard Hoare reasoning . Moving on to the proceeding line contained in our set of commands , we have the line \verb | <var:g> := <var:g> + <var:N1> | . This statement moves $ \{ <var:B> = <var:X> \land <var:N1> = <nat:1> * <var:X> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:X> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> \} $ . Honing in on the following bit of code found in our program , we have the variable assignmet line \verb | <var:g> := <var:g> + <var:N0> | . This redefines $ \{ <var:B> = <var:X> \land <var:N0> = <nat:9> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> \} $ as the postcondition $ \{ <var:B> = <var:X> \land <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:B> ; <var:N2> := <var:N1> * <var:B> ; <var:N3> := <var:N2> * <var:B> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:2> ; <var:g> := <var:N3> <var:g> := <var:g> + <var:N2> <var:g> := <var:g> + <var:N1> <var:g> := <var:g> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:B> = <var:X> }} <def:poly> {{ <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <nat:1> * <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <nat:1> * <var:X> /\ <var:N2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <nat:1> * <var:X> /\ <var:N2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <nat:1> * <var:X> /\ <var:N2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:N0> = <nat:9> /\ <var:g> = <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N1> = <nat:1> * <var:X> /\ <var:N0> = <nat:9> /\ <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:N0> = <nat:9> /\ <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:X> /\ <var:g> = <nat:2> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 