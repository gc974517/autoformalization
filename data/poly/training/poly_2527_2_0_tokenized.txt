\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:9> ; <var:T> := <var:L0> \end{verbatim} Assuming that we have $ <var:M> = <var:u> $ before running our code segment , it must be that we have $ <var:T> = <nat:9> $ . \end{theorem} \begin{proof} Let the following decorated set of commands . \begin{eqnarray} \{ <var:M> = <var:u> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:M> = <var:u> \land <var:L0> = <nat:9> \} \\ <var:T> := <var:L0> \\ \{ <var:M> = <var:u> \land <var:T> = <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <var:L0> := <nat:9> ; <var:T> := <var:L0> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 