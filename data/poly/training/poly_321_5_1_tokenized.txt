\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:i> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:m> := <var:I1> <var:m> := <var:m> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:i> = <var:C> $ , letting positive coefficients $ <var:C> $ , ahead of interpreting this series of commands it holds that we have $ <var:m> = <nat:4> \cdot <var:C> + <nat:1> $ when program is done . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be done through usual Hoare techniques . Moving forward to the subsequent lines contained in our program , \begin{verbatim} { <var:i> = <var:C> } <var:I1> := <var:i> { <var:i> = <var:C> \land <var:I1> = <var:C> } { <var:i> = <var:C> \land <var:I1> = <var:C> } <var:I0> := <nat:1> { <var:i> = <var:C> \land <var:I1> = <var:C> \land <var:I0> = <nat:1> } { <var:i> = <var:C> \land <var:I1> = <var:C> \land <var:I0> = <nat:1> } <var:I1> := <var:I1> * <nat:4> { <var:i> = <var:C> \land <var:I1> = <nat:4> * <var:C> \land <var:I0> = <nat:1> } { <var:i> = <var:C> \land <var:I1> = <nat:4> * <var:C> \land <var:I0> = <nat:1> } <var:m> := <var:I1{ <var:i> = <var:C> \land <var:I0> = <nat:1> \land <var:m> = <nat:4> * <var:C> } \end{verbatim} This is rigorously given using the variable update law given by usual Hoare techniques . Moving on to the next step in our list of instructions , \begin{verbatim} { <var:i> = <var:C> } <var:I1> := <var:i> { <var:i> = <var:C> \land <var:I1> = <var:C> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:i> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:m> := <var:I1> <var:m> := <var:m> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:i> = <var:C> }} <def:poly> {{ <var:m> = <nat:4> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:I1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:I1> = <var:C> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:I1> = <nat:4> * <var:C> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:I0> = <nat:1> /\ <var:m> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:m> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 