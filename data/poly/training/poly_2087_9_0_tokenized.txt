\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:C> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:C> ; <var:U2> := <var:U2> * <var:C> ; <var:f> := <var:U2> ; <var:f> := <var:f> + <var:U1> ; <var:f> := <var:f> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Allowing , assuming some positive numbers $ <var:c> $ , it to be that $ <var:C> = <var:c> $ ahead of the execution of this code segment it holds that we have $ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> $ when series of instructions has terminated . \end{theorem} \begin{proof} The method of proof for this series of instructions is done with Hoare logic . Taking a look at the proceeding bit of code seen in the code segment , the variable assignmet code assigning $ <nat:4> $ as $ <var:U0>$ . This redefines $ \{ <var:C> = <var:c> \} $ toward the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \} $ . Advancing , we see the variable update code \verb | <var:U1> := <nat:1> ; | . This takes the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \} $ as the postcondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> \} $ . This is ensured with the assignment inference rule given in usual Hoare techniques . Moving on to the proceeding line of code in the segment of code , the line \verb | <var:U1> := <var:U1> * <var:C> ; | . This advances the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> \} $ to the postcondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \} $ . After , we have the environment update command \verb | <var:U2> := <nat:4> ; | . This command forwards $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \} $ toward the postcondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> \} $ . This is given using the assignment inference rule defined in typical Hoare techniques . Immediately after , we have the variable update statement binding $ <var:U2> * <var:C> $ as $ <var:U2>$ . This code transfers the precondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> \} $ into $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> * <var:c> \} $ . This is rigorously given with the assignment inference rule given in standard Hoare reasoning . Further , the environment update code \verb | <var:U2> := <var:U2> * <var:C> ; | . This forwards the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> * <var:c> \} $ to the postcondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> * <var:c> ^ <nat:2> \} $ . Moving forward , we have the binding command assigning $ <var:U2> $ to $ <var:f>$ . This code transfers the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:U2> = <nat:4> * <var:c> ^ <nat:2> \} $ toward $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:f> = <nat:4> * <var:c> ^ <nat:2> \} $ . This is given by the assignment inference rule obtained from typical Hoare logic . Advancing to the following bit of code in our program , we see the environment update code \verb | <var:f> := <var:f> + <var:U1> ; | . This statement transfers the condition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> * <var:c> \land <var:f> = <nat:4> * <var:c> ^ <nat:2> \} $ as $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare logic . Moving on to the next step , the binding code defining $ <var:f> + <var:U0$ to $ <var:f>$ . This takes the precondition $ \{ <var:C> = <var:c> \land <var:U0> = <nat:4> \land <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> \} $ as the condition $ \{ <var:C> = <var:c> \land <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> \} $ . This is given with the assignment inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:C> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:C> ; <var:U2> := <var:U2> * <var:C> ; <var:f> := <var:U2> ; <var:f> := <var:f> + <var:U1> ; <var:f> := <var:f> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:C> = <var:c> }} <def:poly> {{ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:c> /\ <var:U2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:c> /\ <var:U2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:c> /\ <var:U2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:c> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:U0> = <nat:4> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:c> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 