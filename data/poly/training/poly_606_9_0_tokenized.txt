\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:M> := <var:C2> ; <var:M> := <var:M> + <var:C1> ; <var:M> := <var:M> + <var:C0> \end{verbatim} Assume $ <var:Z> = <var:h> $ ahead of the execution of our segment of code it follows that $ <var:M> = <nat:2> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is demonstrated with standard Hoare logic . Advancing to the upcoming piece of code found in the segment of code , we have the assignment code \verb | <var:C0> := <nat:8> ; | . This line moves the condition $ \{ <var:Z> = <var:h> \} $ as the postcondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \} $ . This is ensured by the assignment inference rule from usual Hoare reasoning . Focusing on the subsequent step contained in the list of instructions , we have the variable update command assigning $ <nat:1> $ to $ <var:C1>$ . This code forwards the precondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \} $ to the postcondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \} $ . This is deduced by the assignment scheme found in usual Hoare reasoning . Moving on to the following statement found in the series of instructions , we have the assignment line giving $ <var:C1> * <var:Z> $ into $ <var:C1>$ . This statement takes the precondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \} $ to $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \} $ . This is ensured through the assignment rule given in Hoare techniques . Immediately following , we have the environment update code letting $ <nat:2> $ toward $ <var:C2>$ . This command transfers $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \} $ toward the condition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \} $ . Moving on to the next step , we have the assignment code assigning $ <var:C2> * <var:Z> $ to $ <var:C2>$ . This statement transfers the condition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \cdot <var:h> \} $ . This is ensured with the assignment law given by usual Hoare reasoning . Taking another step toward the subsequent step found in the series of instructions , we have the line \verb | <var:C2> := <var:C2> * <var:Z> ; | . This advances $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \cdot <var:h> \} $ into the postcondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \cdot <var:h> ^ <nat:2> \} $ . This is known to be sound using the assignment law in typical Hoare logic . Paying attention to the following piece of code contained in the list of instructions , we have the binding code \verb | <var:M> := <var:C2> ; | . This statement takes $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:C2> = <nat:2> \cdot <var:h> ^ <nat:2> \} $ toward $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:M> = <nat:2> \cdot <var:h> ^ <nat:2> \} $ . Looking at the following command contained in our list of instructions , we have the variable update statement \verb | <var:M> := <var:M> + <var:C1> ; | . This statement advances the precondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:C1> = <nat:1> \cdot <var:h> \land <var:M> = <nat:2> \cdot <var:h> ^ <nat:2> \} $ as the postcondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:M> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> \} $ . This is ensured through the assignment inference rule of Hoare logic . Moving on , we see the variable assignmet code \verb | <var:M> := <var:M> + <var:C0> | . This transfers the precondition $ \{ <var:Z> = <var:h> \land <var:C0> = <nat:8> \land <var:M> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> \} $ into the postcondition $ \{ <var:Z> = <var:h> \land <var:M> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Z> = <var:h> }} <var:C0> := <nat:8> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:Z> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:Z> ; <var:C2> := <var:C2> * <var:Z> ; <var:M> := <var:C2> ; <var:M> := <var:M> + <var:C1> ; <var:M> := <var:M> + <var:C0> {{ <var:M> = <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> * <var:h> /\ <var:C2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> * <var:h> /\ <var:C2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> * <var:h> /\ <var:C2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:1> * <var:h> /\ <var:M> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:C0> = <nat:8> /\ <var:M> = <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:M> = <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 