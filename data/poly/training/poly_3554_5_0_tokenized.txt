\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:4> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:G> ; <var:r> := <var:j1> ; <var:r> := <var:r> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allowing that $ <var:G> = <var:t> $ ahead of the evaluation of this code , then we see $ <var:r> = <nat:3> * <var:t> + <nat:4> $ once list of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be shown through usual Hoare logic . Advancing on , we see \verb | { <var:G> = <var:t> } <var:j0> := <nat:4> { <var:G> = <var:t> \land <var:j0> = <nat:4> } | . This is shown by the variable binding rule defined in usual Hoare logic . Immediately following , we have \verb | { <var:G> = <var:t> } <var:j0> := <nat:4> { <var:G> = <var:t> \land <var:j0> = <nat:4> } | , \verb | { <var:G> = <var:t> \land <var:j0> = <nat:4> } <var:j1> := <nat:3> { <var:G> = <var:t> \land <var:j0> = <nat:4> \land <var:j1> = <nat:3> } | and \verb | { <var:G> = <var:t> \land <var:j0> = <nat:4> \land <var:j1> = <nat:3> } <var:j1> := <var:j1> * <var:G> { <var:G> = <var:t> \land <var:j0> = <nat:4> \land <var:j1> = <nat:3> \cdot <var:t> } | . This is sound through the variable assignmet rule in Hoare logic . Going to the next step , we see \verb | { <var:G> = <var:t> } <var:j0> := <nat:4> { <var:G> = <var:t> \land <var:j0> = <nat:4> } | . This is ensured with the law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:4> ; <var:j1> := <nat:3> ; <var:j1> := <var:j1> * <var:G> ; <var:r> := <var:j1> ; <var:r> := <var:r> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <def:poly> {{ <var:r> = <nat:3> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:j0> = <nat:4> /\ <var:j1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:j0> = <nat:4> /\ <var:r> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:r> = <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 