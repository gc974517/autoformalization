\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:8> ; <var:n> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:k> = <var:i> $ --- for $ <var:i> \in \mathbb{Z}^+ $ --- ahead of running this program it follows that we have $ <var:n> = <nat:8> $ when segment of code has finished . \end{theorem} \begin{proof} The proof of this code segment is given by typical Hoare techniques . Focusing on the following lines of codefound in our list of commands , we see \verb | { <var:k> = <var:i> } <var:W0> := <nat:8> { <var:k> = <var:i> \land <var:W0> = <nat:8> } | and \verb | { <var:k> = <var:i> \land <var:W0> = <nat:8> } <var:n> := <var:W0{ <var:k> = <var:i> \land <var:n> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:8> ; <var:n> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:k> = <var:i> }} <def:poly> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 