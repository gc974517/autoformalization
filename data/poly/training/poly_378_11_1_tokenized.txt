\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:9> ; <var:c> := <var:O3> <var:c> := <var:c> + <var:O2> <var:c> := <var:c> + <var:O1> <var:c> := <var:c> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Assuming $ <var:X> = <var:U> $ prior to interpreting our list of instructions it must be that we see $ <var:c> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> $ once series of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:U> \} \\ <var:O1> := <var:X> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <var:U> \} \\ <var:O2> := <var:O1> * <var:X> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <var:U> \land <var:O2> = <var:U> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:X> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <var:U> \land <var:O2> = <var:U> ^ <nat:2> \land <var:O3> = <var:U> ^ <nat:3> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <var:U> \land <var:O2> = <var:U> ^ <nat:2> \land <var:O3> = <var:U> ^ <nat:3> \land <var:O0> = <nat:1> \} \end{eqnarray} Advancing executing the list of commands yields : \begin{eqnarray} <var:O1> := <var:O1> * <nat:5> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <nat:5> \cdot <var:U> \land <var:O2> = <var:U> ^ <nat:2> \land <var:O3> = <var:U> ^ <nat:3> \land <var:O0> = <nat:1> \} \end{eqnarray} Advancing evaluating this code segment results in : \begin{eqnarray} <var:O2> := <var:O2> * <nat:6> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <nat:5> \cdot <var:U> \land <var:O2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:O3> = <var:U> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:O3> := <var:O3> * <nat:9> ; \\ \{ <var:X> = <var:U> \land <var:O1> = <nat:5> \cdot <var:U> \land <var:O2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:O3> = <nat:9> \cdot <var:U> ^ <nat:3> \land <var:O0> = <nat:1> \} \\ <var:c> := <var:O3> \\ \{ <var:X> = <var:U> \land <var:O1> = <nat:5> \cdot <var:U> \land <var:O2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:O0> = <nat:1> \land <var:c> = <nat:9> \cdot <var:U> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:O2> \\ \{ <var:X> = <var:U> \land <var:O1> = <nat:5> \cdot <var:U> \land <var:O0> = <nat:1> \land <var:c> = <nat:9> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:O1> \\ \{ <var:X> = <var:U> \land <var:O0> = <nat:1> \land <var:c> = <nat:9> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:5> \cdot <var:U> \} \\ <var:c> := <var:c> + <var:O0> \\ \{ <var:X> = <var:U> \land <var:c> = <nat:9> \cdot <var:U> ^ <nat:3> + <nat:6> \cdot <var:U> ^ <nat:2> + <nat:5> \cdot <var:U> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:X> ; <var:O2> := <var:O1> * <var:X> ; <var:O3> := <var:O2> * <var:X> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:5> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:9> ; <var:c> := <var:O3> <var:c> := <var:c> + <var:O2> <var:c> := <var:c> + <var:O1> <var:c> := <var:c> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:X> = <var:U> }} <def:poly> {{ <var:c> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <var:U> /\ <var:O2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <var:U> /\ <var:O2> = <var:U> ^ <nat:2> /\ <var:O3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <var:U> /\ <var:O2> = <var:U> ^ <nat:2> /\ <var:O3> = <var:U> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <nat:5> * <var:U> /\ <var:O2> = <var:U> ^ <nat:2> /\ <var:O3> = <var:U> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <nat:5> * <var:U> /\ <var:O2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:O3> = <var:U> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <nat:5> * <var:U> /\ <var:O2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:O3> = <nat:9> * <var:U> ^ <nat:3> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <nat:5> * <var:U> /\ <var:O2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:O0> = <nat:1> /\ <var:c> = <nat:9> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O1> = <nat:5> * <var:U> /\ <var:O0> = <nat:1> /\ <var:c> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:O0> = <nat:1> /\ <var:c> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:U> /\ <var:c> = <nat:9> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 