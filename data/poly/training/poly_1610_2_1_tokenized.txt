\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:N> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:V> = <var:E> $ prior to interpreting this series of instructions it holds that $ <var:N> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is accomplished with Hoare logic . Advancing on , the environment update code letting $ <nat:1> $ to $ <var:x0>$ . This moves the precondition $ \{ <var:V> = <var:E> \} $ into $ \{ <var:V> = <var:E> \land <var:x0> = <nat:1> \} $ . Immediately following , we have the variable assignmet statement \verb | <var:N> := <var:x0> | . This takes the precondition $ \{ <var:V> = <var:E> \land <var:x0> = <nat:1> \} $ to $ \{ <var:V> = <var:E> \land <var:N> = <nat:1> \} $ . This is sound by the assignment law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:N> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:V> = <var:E> }} <def:poly> {{ <var:N> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:N> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 