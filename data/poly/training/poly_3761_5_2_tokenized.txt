\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:2> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allowing it to be that $ <var:L> = <var:Q> $ , with some natural coefficients $ <var:Q> $ , before the execution of this set of instructions , it holds that we have $ <var:U> = <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:L> = <var:Q> \} \\ <var:U> := <nat:3> ; \\ \{ <var:L> = <var:Q> \land <var:U> = <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:U> = <nat:3> \times <var:Q> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:U> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:Q> \land <var:U> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:3> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> \\ \{ <var:L> = <var:Q> \land <var:U> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> \} \end{eqnarray} Thusly , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:2> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:L> = <var:Q> }} <def:poly> {{ <var:U> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:U> = <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:U> = <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:U> = <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:U> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 