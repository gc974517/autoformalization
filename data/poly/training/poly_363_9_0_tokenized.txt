\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:W> ; <var:O2> := <nat:6> ; <var:O2> := <var:O2> * <var:W> ; <var:O2> := <var:O2> * <var:W> ; <var:n> := <var:O2> ; <var:n> := <var:n> + <var:O1> ; <var:n> := <var:n> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Given , given any $ <var:I> \in \mathbb{N} $ , that we have $ <var:W> = <var:I> $ ahead of the execution of this series of commands then we see $ <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> $ when code is done executing . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is given with Hoare logic . Advancing on , we see the variable binding code giving $ <nat:8> $ as $ <var:O0>$ . This line takes the precondition $ \{ <var:W> = <var:I> \} $ to $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \} $ . This is given using the assignment rule in usual Hoare techniques . Focusing on the next line of code in the list of commands , we have the assignment line \verb | <var:O1> := <nat:8> ; | . This line forwards $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \} $ toward the postcondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> \} $ . Shifting focus toward the next line contained in the series of commands , we have the variable update line assigning $ <var:O1> * <var:W> $ to $ <var:O1>$ . This transfers $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> \} $ to the postcondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \} $ . This is rigorously given through the assignment rule defined in usual Hoare logic . Moving on to the next step , we have the environment update code binding $ <nat:6> $ into $ <var:O2>$ . This transfers the condition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \} $ as $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> \} $ . This is shown to be logically sound through the assignment rule in typical Hoare logic . Honing in on the following piece of code contained in the set of instructions , we have the binding line giving $ <var:O2> * <var:W> $ into $ <var:O2>$ . This forwards $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> \} $ as the postcondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> * <var:I> \} $ . This is deduced through the assignment inference rule given by typical Hoare logic . Moving on to the proceeding statement in the code , we see the assignment statement defining $ <var:O2> * <var:W> $ into $ <var:O2>$ . This command forwards the precondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> * <var:I> \} $ as $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \} $ . This is shown using the assignment law from usual Hoare reasoning . Honing in on the subsequent line in the list of instructions , we have the environment update code defining $ <var:O2> $ into $ <var:n>$ . This code redefines the precondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:O2> = <nat:6> * <var:I> ^ <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:n> = <nat:6> * <var:I> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule from standard Hoare logic . Immediately after , we have the variable assignmet statement \verb | <var:n> := <var:n> + <var:O1> ; | . This redefines $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:O1> = <nat:8> * <var:I> \land <var:n> = <nat:6> * <var:I> ^ <nat:2> \} $ as the condition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> \} $ . Moving on to the upcoming command seen in the set of instructions , the assignment line \verb | <var:n> := <var:n> + <var:O0> | . This redefines the condition $ \{ <var:W> = <var:I> \land <var:O0> = <nat:8> \land <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> \} $ into the postcondition $ \{ <var:W> = <var:I> \land <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:W> ; <var:O2> := <nat:6> ; <var:O2> := <var:O2> * <var:W> ; <var:O2> := <var:O2> * <var:W> ; <var:n> := <var:O2> ; <var:n> := <var:n> + <var:O1> ; <var:n> := <var:n> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:W> = <var:I> }} <def:poly> {{ <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:I> /\ <var:O2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:I> /\ <var:O2> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:8> * <var:I> /\ <var:n> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:O0> = <nat:8> /\ <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:n> = <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 