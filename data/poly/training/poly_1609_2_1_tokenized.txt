\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:7> ; <var:x> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:T> = <var:F> $ before the execution of the code it must be that we have $ <var:x> = <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be given with Hoare techniques . Advancing , we have the binding statement binding $ <nat:7> $ as $ <var:Q0>$ . This takes the condition $ \{ <var:T> = <var:F> \} $ into $ \{ <var:T> = <var:F> \land <var:Q0> = <nat:7> \} $ . Moving forward to the next step , we have the environment update command giving $ <var:Q0$ toward $ <var:x>$ . This line forwards the condition $ \{ <var:T> = <var:F> \land <var:Q0> = <nat:7> \} $ toward the condition $ \{ <var:T> = <var:F> \land <var:x> = <nat:7> \} $ . This is shown with the assignment rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:7> ; <var:x> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:T> = <var:F> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:F> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 