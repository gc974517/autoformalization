\begin{document} \begin{theorem} Take the following list of instructions as \begin{verbatim} <var:M1> := <var:e> ; <var:M2> := <var:M1> * <var:e> ; <var:M3> := <var:M2> * <var:e> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:7> ; <var:F> := <var:M3> <var:F> := <var:F> + <var:M2> <var:F> := <var:F> + <var:M1> <var:F> := <var:F> + <var:M0> \end{verbatim} Allowing --- for all integers $ <var:g> $ --- $ <var:e> = <var:g> $ ahead of running our code , it holds that $ <var:F> = <nat:7> \times <var:g> ^ <nat:3> + <nat:8> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:4> $ once segment of code is done executing . \end{theorem} \begin{proof} We can see that the below decorated series of commands . \begin{eqnarray} \{ <var:e> = <var:g> \} \\ <var:M1> := <var:e> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <var:g> \} \\ <var:M2> := <var:M1> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <var:g> \land <var:M2> = <var:g> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <var:g> \land <var:M2> = <var:g> ^ <nat:2> \land <var:M3> = <var:g> ^ <nat:3> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <var:g> \land <var:M2> = <var:g> ^ <nat:2> \land <var:M3> = <var:g> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <nat:4> * <var:g> \land <var:M2> = <var:g> ^ <nat:2> \land <var:M3> = <var:g> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M2> := <var:M2> * <nat:8> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <nat:4> * <var:g> \land <var:M2> = <nat:8> * <var:g> ^ <nat:2> \land <var:M3> = <var:g> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M3> := <var:M3> * <nat:7> ; \\ \{ <var:e> = <var:g> \land <var:M1> = <nat:4> * <var:g> \land <var:M2> = <nat:8> * <var:g> ^ <nat:2> \land <var:M3> = <nat:7> * <var:g> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:F> := <var:M3> \\ \{ <var:e> = <var:g> \land <var:M1> = <nat:4> * <var:g> \land <var:M2> = <nat:8> * <var:g> ^ <nat:2> \land <var:M0> = <nat:4> \land <var:F> = <nat:7> * <var:g> ^ <nat:3> \} \end{eqnarray} Allowing the execution of this code segment produces : \begin{eqnarray} <var:F> := <var:F> + <var:M2> \\ \{ <var:e> = <var:g> \land <var:M1> = <nat:4> * <var:g> \land <var:M0> = <nat:4> \land <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:M1> \\ \{ <var:e> = <var:g> \land <var:M0> = <nat:4> \land <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:4> * <var:g> \} \\ <var:F> := <var:F> + <var:M0> \\ \{ <var:e> = <var:g> \land <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> \} \end{eqnarray} Applying usual Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <var:M1> := <var:e> ; <var:M2> := <var:M1> * <var:e> ; <var:M3> := <var:M2> * <var:e> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:4> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:7> ; <var:F> := <var:M3> <var:F> := <var:F> + <var:M2> <var:F> := <var:F> + <var:M1> <var:F> := <var:F> + <var:M0> {{ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <var:g> /\ <var:M2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <var:g> /\ <var:M2> = <var:g> ^ <nat:2> /\ <var:M3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <var:g> /\ <var:M2> = <var:g> ^ <nat:2> /\ <var:M3> = <var:g> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <nat:4> * <var:g> /\ <var:M2> = <var:g> ^ <nat:2> /\ <var:M3> = <var:g> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <nat:4> * <var:g> /\ <var:M2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:M3> = <var:g> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <nat:4> * <var:g> /\ <var:M2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:M3> = <nat:7> * <var:g> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <nat:4> * <var:g> /\ <var:M2> = <nat:8> * <var:g> ^ <nat:2> /\ <var:M0> = <nat:4> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M1> = <nat:4> * <var:g> /\ <var:M0> = <nat:4> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:M0> = <nat:4> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:F> = <nat:7> * <var:g> ^ <nat:3> + <nat:8> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 