\begin{document} \begin{theorem} Define a program in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:3> ; <var:d> := <var:b0> \end{verbatim} Assuming that we have $ <var:z> = <var:L> $ prior to the execution of this program , it holds that we see $ <var:d> = <nat:3> $ when code has finished . \end{theorem} \begin{proof} Arguing the correctness of our code can be done using Hoare techniques . After , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:L> \} & <var:b0> := <nat:3> & \{ <var:z> = <var:L> \land <var:b0> = <nat:3> \} \end{tabular} Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:L> \} & <var:b0> := <nat:3> & \{ <var:z> = <var:L> \land <var:b0> = <nat:3> \} \end{tabular} This is shown to be logically sound with the environment update inference rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <var:b0> := <nat:3> ; <var:d> := <var:b0> {{ <var:d> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 