\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:9> ; <var:T> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:B> = <var:N> $ , for all $ <var:N> $ , ahead of interpreting the segment of code then we see $ <var:T> = <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:B> = <var:N> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:B> = <var:N> \land <var:z0> = <nat:9> \} \\ <var:T> := <var:z0> \\ \{ <var:B> = <var:N> \land <var:T> = <nat:9> \} \end{eqnarray} Hence , the list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:9> ; <var:T> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <def:poly> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 