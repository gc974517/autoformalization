\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:X0> := <nat:6> ; <var:h> := <var:X0> \end{verbatim} Assuming $ <var:j> = <var:B> $ ahead of the evaluation of the list of instructions , then we see $ <var:h> = <nat:6> $ when segment of code exits . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is given using standard Hoare techniques . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:j> = <var:B> \} & <var:X0> := <nat:6> & \{ <var:j> = <var:B> \land <var:X0> = <nat:6> \} \end{tabular} Taking another step toward the proceeding command in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:j> = <var:B> \} & <var:X0> := <nat:6> & \{ <var:j> = <var:B> \land <var:X0> = <nat:6> \} \end{tabular} This is known to be sound through the variable update scheme defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:j> = <var:B> }} <var:X0> := <nat:6> ; <var:h> := <var:X0> {{ <var:h> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:B> /\ <var:h> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 