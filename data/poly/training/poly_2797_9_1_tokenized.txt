\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:u> ; <var:f2> := <var:f1> * <var:u> ; <var:f3> := <var:f2> * <var:u> ; <var:f0> := <nat:3> ; <var:f2> := <var:f2> * <nat:8> ; <var:f3> := <var:f3> * <nat:9> ; <var:w> := <var:f3> <var:w> := <var:w> + <var:f2> <var:w> := <var:w> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume $ <var:u> = <var:L> $ prior to interpreting our list of commands it holds that we have $ <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Observe that the following decorated series of commands . \begin{eqnarray} \{ <var:u> = <var:L> \} \\ <var:f1> := <var:u> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \} \\ <var:f2> := <var:f1> * <var:u> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <var:L> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:u> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <var:L> ^ <nat:2> \land <var:f3> = <var:L> ^ <nat:3> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <var:L> ^ <nat:2> \land <var:f3> = <var:L> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f2> := <var:f2> * <nat:8> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <nat:8> * <var:L> ^ <nat:2> \land <var:f3> = <var:L> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f3> := <var:f3> * <nat:9> ; \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <nat:8> * <var:L> ^ <nat:2> \land <var:f3> = <nat:9> * <var:L> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:w> := <var:f3> \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f2> = <nat:8> * <var:L> ^ <nat:2> \land <var:f0> = <nat:3> \land <var:w> = <nat:9> * <var:L> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:f2> \\ \{ <var:u> = <var:L> \land <var:f1> = <var:L> \land <var:f0> = <nat:3> \land <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:f0> \\ \{ <var:u> = <var:L> \land <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:3> \} \end{eqnarray} The application of standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:u> ; <var:f2> := <var:f1> * <var:u> ; <var:f3> := <var:f2> * <var:u> ; <var:f0> := <nat:3> ; <var:f2> := <var:f2> * <nat:8> ; <var:f3> := <var:f3> * <nat:9> ; <var:w> := <var:f3> <var:w> := <var:w> + <var:f2> <var:w> := <var:w> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:u> = <var:L> }} <def:poly> {{ <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <var:L> ^ <nat:2> /\ <var:f3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <var:L> ^ <nat:2> /\ <var:f3> = <var:L> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:f3> = <var:L> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:L> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:f0> = <nat:3> /\ <var:w> = <nat:9> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:f1> = <var:L> /\ <var:f0> = <nat:3> /\ <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:w> = <nat:9> * <var:L> ^ <nat:3> + <nat:8> * <var:L> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 