\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:5> ; <var:Z> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:R> = <var:Q> $ ahead of the evaluation of the set of instructions , then $ <var:Z> = <nat:5> $ once series of instructions has executed . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:Q> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:R> = <var:Q> \land <var:M0> = <nat:5> \} \\ <var:Z> := <var:M0> \\ \{ <var:R> = <var:Q> \land <var:Z> = <nat:5> \} \end{eqnarray} Therefore , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:5> ; <var:Z> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:R> = <var:Q> }} <def:poly> {{ <var:Z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:Z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 