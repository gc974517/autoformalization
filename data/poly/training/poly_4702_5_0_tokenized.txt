\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:5> ; <var:G1> := <var:G1> * <var:Z> ; <var:X> := <var:G1> ; <var:X> := <var:X> + <var:G0> \end{verbatim} Assume it to be that $ <var:Z> = <var:H> $ prior to evaluating the code , it holds that we have $ <var:X> = <nat:5> \times <var:H> + <nat:8> $ after series of instructions is done . \end{theorem} \begin{proof} The proof of the set of commands can be shown by typical Hoare logic . Moving on to the proceeding lines of codefound in the code segment , \verb | { <var:Z> = <var:H> } <var:G0> := <nat:8> { <var:Z> = <var:H> \land <var:G0> = <nat:8> } | , \verb | { <var:Z> = <var:H> \land <var:G0> = <nat:8> } <var:G1> := <nat:5> { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:G1> = <nat:5> } | , \verb | { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:G1> = <nat:5> } <var:G1> := <var:G1> * <var:Z> { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:G1> = <nat:5> * <var:H> } | , \verb | { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:G1> = <nat:5> * <var:H> } <var:X> := <var:G1> { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:X> = <nat:5> * <var:H> } | and \verb | { <var:Z> = <var:H> \land <var:G0> = <nat:8> \land <var:X> = <nat:5> * <var:H> } <var:X> := <var:X> + <var:G0{ <var:Z> = <var:H> \land <var:X> = <nat:5> * <var:H> + <nat:8> } | . This is given by the variable assignmet inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Z> = <var:H> }} <var:G0> := <nat:8> ; <var:G1> := <nat:5> ; <var:G1> := <var:G1> * <var:Z> ; <var:X> := <var:G1> ; <var:X> := <var:X> + <var:G0> {{ <var:X> = <nat:5> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:G0> = <nat:8> /\ <var:X> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:X> = <nat:5> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 