\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:4> ; <var:W> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:o> = <var:L> $ , assuming some natural coefficients $ <var:L> $ , ahead of executing this code segment it follows that we have $ <var:W> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code segment is demonstrated by Hoare logic . Keeping momentum , we have \begin{eqnarray} \{ <var:o> = <var:L> \} \, <var:V0> := <nat:4> \, \{ <var:o> = <var:L> \land <var:V0> = <nat:4> \} \end{eqnarray} Moving on to the proceeding statement in our program , we see \begin{eqnarray} \{ <var:o> = <var:L> \} \, <var:V0> := <nat:4> \, \{ <var:o> = <var:L> \land <var:V0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound by the law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:W> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <def:poly> {{ <var:W> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:W> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 