\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:M> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:M> ; <var:h2> := <var:h2> * <var:M> ; <var:a> := <var:h2> ; <var:a> := <var:a> + <var:h1> ; <var:a> := <var:a> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Given $ <var:M> = <var:N> $ before evaluating our segment of code it follows that we see $ <var:a> = <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> $ when series of commands has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our code can be demonstrated using usual Hoare techniques . Focusing on the following statements seen in the series of commands , we see \begin{eqnarray} \{ <var:M> = <var:N> \} \, <var:h0> := <nat:8> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \, <var:h1> := <nat:6> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> \} \, <var:h1> := <var:h1> * <var:M> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> * <var:N> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> * <var:N> \} \, <var:h2> := <nat:4> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> * <var:N> \land <var:h2> = <nat:4> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> * <var:N> \land <var:h2> = <nat:4> \} \, <var:h2> := <var:h2> * <var:M> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> * <var:N> \land <var:h2> = <nat:4> * <var:N> \} \end{eqnarray} This is rigorously given using the binding inference rule of typical Hoare reasoning . Shifting focus toward the subsequent commands seen in the list of commands , \begin{eqnarray} \{ <var:M> = <var:N> \} \, <var:h0> := <nat:8> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \, <var:h1> := <nat:6> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> \} \end{eqnarray} Following , we have \begin{eqnarray} \{ <var:M> = <var:N> \} \, <var:h0> := <nat:8> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \\ \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \} \, <var:h1> := <nat:6> \, \{ <var:M> = <var:N> \land <var:h0> = <nat:8> \land <var:h1> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:8> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:M> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:M> ; <var:h2> := <var:h2> * <var:M> ; <var:a> := <var:h2> ; <var:a> := <var:a> + <var:h1> ; <var:a> := <var:a> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:M> = <var:N> }} <def:poly> {{ <var:a> = <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> * <var:N> /\ <var:h2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> * <var:N> /\ <var:h2> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> * <var:N> /\ <var:h2> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:6> * <var:N> /\ <var:a> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:h0> = <nat:8> /\ <var:a> = <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:a> = <nat:4> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 