\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:9> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:v> ; <var:c> := <var:K1> ; <var:c> := <var:c> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:v> = <var:l> $ before interpreting the list of commands then we see $ <var:c> = <nat:4> \cdot <var:l> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives us : \begin{eqnarray} \{ <var:v> = <var:l> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:v> = <var:l> \land <var:K0> = <nat:9> \} \\ <var:K1> := <nat:4> ; \\ \{ <var:v> = <var:l> \land <var:K0> = <nat:9> \land <var:K1> = <nat:4> \} \\ <var:K1> := <var:K1> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:K0> = <nat:9> \land <var:K1> = <nat:4> \times <var:l> \} \\ <var:c> := <var:K1> ; \\ \{ <var:v> = <var:l> \land <var:K0> = <nat:9> \land <var:c> = <nat:4> \times <var:l> \} \\ <var:c> := <var:c> + <var:K0> \\ \{ <var:v> = <var:l> \land <var:c> = <nat:4> \times <var:l> + <nat:9> \} \end{eqnarray} Hence , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:9> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:v> ; <var:c> := <var:K1> ; <var:c> := <var:c> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:c> = <nat:4> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:K0> = <nat:9> /\ <var:c> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:c> = <nat:4> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 