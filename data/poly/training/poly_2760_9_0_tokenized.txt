\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:4> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:N> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:N> ; <var:Q2> := <var:Q2> * <var:N> ; <var:m> := <var:Q2> ; <var:m> := <var:m> + <var:Q1> ; <var:m> := <var:m> + <var:Q0> \end{verbatim} Given that $ <var:N> = <var:q> $ ( for all $ <var:q> $ ) before executing the code then we have $ <var:m> = <nat:9> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:4> $ once set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:q> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <nat:9> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <var:N> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \times <var:q> \} \\ <var:Q2> := <nat:9> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \times <var:q> \land <var:Q2> = <nat:9> \} \\ <var:Q2> := <var:Q2> * <var:N> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \times <var:q> \land <var:Q2> = <nat:9> \times <var:q> \} \\ <var:Q2> := <var:Q2> * <var:N> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \times <var:q> \land <var:Q2> = <nat:9> \times <var:q> ^ <nat:2> \} \\ <var:m> := <var:Q2> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \times <var:q> \land <var:m> = <nat:9> \times <var:q> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:Q1> ; \\ \{ <var:N> = <var:q> \land <var:Q0> = <nat:4> \land <var:m> = <nat:9> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> \} \\ <var:m> := <var:m> + <var:Q0> \\ \{ <var:N> = <var:q> \land <var:m> = <nat:9> \times <var:q> ^ <nat:2> + <nat:9> \times <var:q> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:N> = <var:q> }} <var:Q0> := <nat:4> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:N> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:N> ; <var:Q2> := <var:Q2> * <var:N> ; <var:m> := <var:Q2> ; <var:m> := <var:m> + <var:Q1> ; <var:m> := <var:m> + <var:Q0> {{ <var:m> = <nat:9> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:q> /\ <var:Q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:q> /\ <var:Q2> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:q> /\ <var:Q2> = <nat:9> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:q> /\ <var:m> = <nat:9> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q0> = <nat:4> /\ <var:m> = <nat:9> * <var:q> ^ <nat:2> + <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:m> = <nat:9> * <var:q> ^ <nat:2> + <nat:9> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 