\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:k> ; <var:N> := <var:i1> ; <var:N> := <var:N> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:k> = <var:m> $ ahead of interpreting the program , it follows that we have $ <var:N> = <nat:4> * <var:m> + <nat:7> $ . \end{theorem} \begin{proof} The argument for this series of commands is evident with typical Hoare techniques . Now , the code yielding $ <nat:7> $ into $ <var:i0>$ . This code redefines the precondition $ \{ <var:k> = <var:m> \} $ as $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \} $ . This is rigorously given with the assignment rule obtained from Hoare reasoning . Immediately following , the binding statement \verb | <var:i1> := <nat:4> ; | . This transfers the condition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \} $ as the postcondition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \} $ . This is deduced through the assignment law given by typical Hoare logic . After , we see the command letting $ <var:i1> * <var:k> $ to $ <var:i1>$ . This statement takes the precondition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \} $ toward the postcondition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \times <var:m> \} $ . Advancing , the assignment statement \verb | <var:N> := <var:i1> ; | . This command takes $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:i1> = <nat:4> \times <var:m> \} $ to the postcondition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:N> = <nat:4> \times <var:m> \} $ . Advancing on , we see the binding statement \verb | <var:N> := <var:N> + <var:i0> | . This statement forwards the condition $ \{ <var:k> = <var:m> \land <var:i0> = <nat:7> \land <var:N> = <nat:4> \times <var:m> \} $ toward the postcondition $ \{ <var:k> = <var:m> \land <var:N> = <nat:4> \times <var:m> + <nat:7> \} $ . This is shown to be logically sound with the assignment inference rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:k> ; <var:N> := <var:i1> ; <var:N> := <var:N> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:k> = <var:m> }} <def:poly> {{ <var:N> = <nat:4> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:i0> = <nat:7> /\ <var:N> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:N> = <nat:4> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 