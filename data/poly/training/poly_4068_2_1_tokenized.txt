\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:6> ; <var:m> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Assume --- with some positive integer coefficients $ <var:G> $ --- it to be that $ <var:j> = <var:G> $ ahead of interpreting the program , it holds that we see $ <var:m> = <nat:6> $ once set of instructions has executed . \end{theorem} \begin{proof} Observe this decorated program . \begin{eqnarray} \{ <var:j> = <var:G> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:j> = <var:G> \land <var:q0> = <nat:6> \} \\ <var:m> := <var:q0> \\ \{ <var:j> = <var:G> \land <var:m> = <nat:6> \} \end{eqnarray} Using usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:m> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:j> = <var:G> }} <def:poly> {{ <var:m> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:G> /\ <var:m> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 