\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:G> ; <var:u> := <var:u> * <var:G> ; <var:u> := <nat:4> + <var:u> * <var:G> ; <var:u> := <nat:1> + <var:u> * <var:G> ; <var:u> := <nat:3> + <var:u> * <var:G> ; <var:u> := <nat:4> + <var:u> * <var:G> \end{verbatim} Allowing that we have $ <var:G> = <var:M> $ before running our code , it follows that $ <var:u> = <nat:2> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our list of commands can be given by usual Hoare techniques . Observing the subsequent step found in our list of instructions , we see the variable binding command \verb | <var:u> := <nat:2> ; | . This command transfers the precondition $ \{ <var:G> = <var:M> \} $ into the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> \} $ . This is deduced using the assignment scheme given by typical Hoare techniques . Honing in on the following line in the set of commands , the environment update statement giving $ <var:u> * <var:G> $ to $ <var:u>$ . This advances the precondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> \} $ to the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> + \} $ . This is sound through the assignment inference rule given by typical Hoare logic . Immediately after , we have the variable update line \verb | <var:u> := <var:u> * <var:G> ; | . This forwards the condition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> + \} $ as the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:2> + \} $ . This is shown to be logically sound using the assignment rule defined in typical Hoare reasoning . Advancing on , we have the assignment code giving $ <nat:4> + <var:u> * <var:G> $ as $ <var:u>$ . This code transfers the condition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:2> + \} $ to the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> \} $ . Taking a look at the upcoming line contained in the series of instructions , we see the variable assignmet code letting $ <nat:1> + <var:u> * <var:G> $ toward $ <var:u>$ . This transfers the condition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> \} $ to the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> + <nat:1> \} $ . Following , we see the command yielding $ <nat:3> + <var:u> * <var:G> $ into $ <var:u>$ . This takes $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> + <nat:1> \} $ into $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> \} $ . Moving on , we see the binding statement yielding $ <nat:4> + <var:u> * <var:G$ as $ <var:u>$ . This line redefines the precondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> \} $ into the postcondition $ \{ <var:G> = <var:M> \land <var:u> = <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> \} $ . This is shown with the assignment law obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:G> = <var:M> }} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:G> ; <var:u> := <var:u> * <var:G> ; <var:u> := <nat:4> + <var:u> * <var:G> ; <var:u> := <nat:1> + <var:u> * <var:G> ; <var:u> := <nat:3> + <var:u> * <var:G> ; <var:u> := <nat:4> + <var:u> * <var:G> {{ <var:u> = <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> ^ <nat:4> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:u> = <nat:2> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 