\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <var:f> * <var:Y> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:1> + <var:f> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Given ( for some integers $ <var:H> $ ) that we have $ <var:Y> = <var:H> $ ahead of executing the segment of code , then we have $ <var:f> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> $ once series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:f> := <nat:3> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:4> \} \\ <var:f> := <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + \} \\ <var:f> := <nat:4> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:4> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:3> + <var:f> * <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:f> := <nat:1> + <var:f> * <var:Y> \\ \{ <var:Y> = <var:H> \land <var:f> = <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:9> + <nat:4> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:1> \} \end{eqnarray} Using typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:3> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <var:f> * <var:Y> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:3> + <var:f> * <var:Y> ; <var:f> := <nat:1> + <var:f> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <def:poly> {{ <var:f> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:f> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 