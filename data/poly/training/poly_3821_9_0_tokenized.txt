\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:O> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:O> ; <var:w2> := <var:w2> * <var:O> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> \end{verbatim} Given it to be that $ <var:O> = <var:e> $ prior to running our set of commands then we have $ <var:g> = <nat:9> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:3> $ . \end{theorem} \begin{proof} Observe the below decorated series of commands . \begin{eqnarray} \{ <var:O> = <var:e> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:O> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:e> \} \\ <var:w2> := <nat:9> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:e> \land <var:w2> = <nat:9> \} \\ <var:w2> := <var:w2> * <var:O> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:e> \land <var:w2> = <nat:9> \times <var:e> \} \\ <var:w2> := <var:w2> * <var:O> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:e> \land <var:w2> = <nat:9> \times <var:e> ^ <nat:2> \} \\ <var:g> := <var:w2> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \times <var:e> \land <var:g> = <nat:9> \times <var:e> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:w1> ; \\ \{ <var:O> = <var:e> \land <var:w0> = <nat:3> \land <var:g> = <nat:9> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> \} \\ <var:g> := <var:g> + <var:w0> \\ \{ <var:O> = <var:e> \land <var:g> = <nat:9> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:3> \} \end{eqnarray} The application of Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:O> = <var:e> }} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:O> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:O> ; <var:w2> := <var:w2> * <var:O> ; <var:g> := <var:w2> ; <var:g> := <var:g> + <var:w1> ; <var:g> := <var:g> + <var:w0> {{ <var:g> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:e> /\ <var:w2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:e> /\ <var:w2> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:e> /\ <var:w2> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:e> /\ <var:g> = <nat:9> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:w0> = <nat:3> /\ <var:g> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:g> = <nat:9> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 