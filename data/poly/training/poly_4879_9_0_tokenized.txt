\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:L> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:L> ; <var:b2> := <var:b2> * <var:L> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> \end{verbatim} Assuming that we have $ <var:L> = <var:j> $ letting integers $ <var:j> $ before executing the code , it follows that we see $ <var:h> = <nat:2> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:L> = <var:j> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:2> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> \} \\ <var:b1> := <var:b1> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> * <var:j> \} \\ <var:b2> := <nat:2> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> * <var:j> \land <var:b2> = <nat:2> \} \\ <var:b2> := <var:b2> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> * <var:j> \land <var:b2> = <nat:2> * <var:j> \} \\ <var:b2> := <var:b2> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> * <var:j> \land <var:b2> = <nat:2> * <var:j> ^ <nat:2> \} \\ <var:h> := <var:b2> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:b1> = <nat:2> * <var:j> \land <var:h> = <nat:2> * <var:j> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:b1> ; \\ \{ <var:L> = <var:j> \land <var:b0> = <nat:3> \land <var:h> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> \} \\ <var:h> := <var:h> + <var:b0> \\ \{ <var:L> = <var:j> \land <var:h> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> \} \end{eqnarray} Hence , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:L> = <var:j> }} <var:b0> := <nat:3> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:L> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:L> ; <var:b2> := <var:b2> * <var:L> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> {{ <var:h> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> * <var:j> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> * <var:j> /\ <var:b2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> * <var:j> /\ <var:b2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:2> * <var:j> /\ <var:h> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:b0> = <nat:3> /\ <var:h> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:h> = <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 