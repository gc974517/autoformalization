\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:8> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:a> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:a> ; <var:x2> := <var:x2> * <var:a> ; <var:X> := <var:x2> ; <var:X> := <var:X> + <var:x1> ; <var:X> := <var:X> + <var:x0> \end{verbatim} Assuming $ <var:a> = <var:h> $ ahead of evaluating the code segment then we see $ <var:X> = <nat:8> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be done by standard Hoare reasoning . Honing in on the subsequent lines of codein the program , we have \begin{verbatim} { <var:a> = <var:h> } <var:x0> := <nat:8> { <var:a> = <var:h> \land <var:x0> = <nat:8> } { <var:a> = <var:h> \land <var:x0> = <nat:8> } <var:x1> := <nat:4> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> } <var:x1> := <var:x1> * <var:a> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> } <var:x2> := <nat:8> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> } <var:x2> := <var:x2> * <var:a> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> * <var:h> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> * <var:h> } <var:x2> := <var:x2> * <var:a> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> * <var:h> ^ <nat:2> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:x2> = <nat:8> * <var:h> ^ <nat:2> } <var:X> := <var:x2> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:X> = <nat:8> * <var:h> ^ <nat:2> } { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:x1> = <nat:4> * <var:h> \land <var:X> = <nat:8> * <var:h> ^ <nat:2> } <var:X> := <var:X> + <var:x1> { <var:a> = <var:h> \land <var:x0> = <nat:8> \land <var:X> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> * <var:h> } \end{verbatim} This is shown to be logically sound with the variable binding inference rule in usual Hoare techniques . Moving onward , \begin{verbatim} { <var:a> = <var:h> } <var:x0> := <nat:8> { <var:a> = <var:h> \land <var:x0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <var:x0> := <nat:8> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:a> ; <var:x2> := <nat:8> ; <var:x2> := <var:x2> * <var:a> ; <var:x2> := <var:x2> * <var:a> ; <var:X> := <var:x2> ; <var:X> := <var:X> + <var:x1> ; <var:X> := <var:X> + <var:x0> {{ <var:X> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> * <var:h> /\ <var:x2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> * <var:h> /\ <var:x2> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> * <var:h> /\ <var:x2> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:4> * <var:h> /\ <var:X> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x0> = <nat:8> /\ <var:X> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:X> = <nat:8> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 