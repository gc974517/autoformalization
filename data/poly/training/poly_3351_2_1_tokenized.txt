\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:4> ; <var:I> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given , for some positive numbers $ <var:m> $ , that $ <var:V> = <var:m> $ ahead of evaluating this code segment , it holds that we see $ <var:I> = <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:V> = <var:m> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:V> = <var:m> \land <var:P0> = <nat:4> \} \\ <var:I> := <var:P0> \\ \{ <var:V> = <var:m> \land <var:I> = <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:4> ; <var:I> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <def:poly> {{ <var:I> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:I> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 