\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:2> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:d> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:d> ; <var:v2> := <var:v2> * <var:d> ; <var:f> := <var:v2> ; <var:f> := <var:f> + <var:v1> ; <var:f> := <var:f> + <var:v0> \end{verbatim} Assume $ <var:d> = <var:q> $ ( given some positive numbers $ <var:q> $ ) before the evaluation of our list of instructions it must be that $ <var:f> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:2> $ once segment of code executes . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:d> = <var:q> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \} \\ <var:v1> := <nat:6> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \} \\ <var:v1> := <var:v1> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \times <var:q> \} \\ <var:v2> := <nat:6> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \times <var:q> \land <var:v2> = <nat:6> \} \\ <var:v2> := <var:v2> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \times <var:q> \land <var:v2> = <nat:6> \times <var:q> \} \\ <var:v2> := <var:v2> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \times <var:q> \land <var:v2> = <nat:6> \times <var:q> ^ <nat:2> \} \\ <var:f> := <var:v2> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:v1> = <nat:6> \times <var:q> \land <var:f> = <nat:6> \times <var:q> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:v1> ; \\ \{ <var:d> = <var:q> \land <var:v0> = <nat:2> \land <var:f> = <nat:6> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> \} \\ <var:f> := <var:f> + <var:v0> \\ \{ <var:d> = <var:q> \land <var:f> = <nat:6> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> + <nat:2> \} \end{eqnarray} Thus , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <var:v0> := <nat:2> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:d> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:d> ; <var:v2> := <var:v2> * <var:d> ; <var:f> := <var:v2> ; <var:f> := <var:f> + <var:v1> ; <var:f> := <var:f> + <var:v0> {{ <var:f> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v2> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v2> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:v1> = <nat:6> * <var:q> /\ <var:f> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:v0> = <nat:2> /\ <var:f> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:f> = <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 