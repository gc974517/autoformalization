\begin{document} \begin{theorem} We define a code in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:3> ; <var:Z> := <var:X0> \end{verbatim} Given it to be that $ <var:O> = <var:q> $ given every natural numbers $ <var:q> $ before running our list of commands it must be that we see $ <var:Z> = <nat:3> $ once segment of code finishes . \end{theorem} \begin{proof} The proof of this segment of code can be shown through usual Hoare techniques . Going forward , we have \verb | { <var:O> = <var:q> } <var:X0> := <nat:3> { <var:O> = <var:q> \land <var:X0> = <nat:3> } | and \verb | { <var:O> = <var:q> \land <var:X0> = <nat:3> } <var:Z> := <var:X0{ <var:O> = <var:q> \land <var:Z> = <nat:3> } | . This is ensured through the variable update inference rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:O> = <var:q> }} <var:X0> := <nat:3> ; <var:Z> := <var:X0> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 