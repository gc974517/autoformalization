\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> \end{verbatim} Assume it to be that $ <var:w> = <var:D> $ with some $ <var:D> \in \mathbb{N} $ prior to evaluating this set of commands it follows that we have $ <var:W> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:4> $ when list of commands has finished . \end{theorem} \begin{proof} The method of proof for our segment of code is given through Hoare logic . Advancing on , \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:W> := <nat:3> & \{ <var:w> = <var:D> \land <var:W> = <nat:3> \} \end{tabular} This is sound through the variable binding law given in standard Hoare techniques . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:W> := <nat:3> & \{ <var:w> = <var:D> \land <var:W> = <nat:3> \} \end{tabular} This is given using the variable assignmet law defined by usual Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:w> = <var:D> \} & <var:W> := <nat:3> & \{ <var:w> = <var:D> \land <var:W> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <var:W> := <nat:3> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> {{ <var:W> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:W> = <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:W> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 