\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:f1> := <var:H> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:4> ; <var:d> := <var:f1> <var:d> := <var:d> + <var:f0> \end{verbatim} Assuming that we have $ <var:H> = <var:a> $ prior to executing this set of commands , it must be that $ <var:d> = <nat:4> \cdot <var:a> + <nat:2> $ when segment of code finishes . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:H> = <var:a> \} \\ <var:f1> := <var:H> ; \\ \{ <var:H> = <var:a> \land <var:f1> = <var:a> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:H> = <var:a> \land <var:f1> = <var:a> \land <var:f0> = <nat:2> \} \\ <var:f1> := <var:f1> * <nat:4> ; \\ \{ <var:H> = <var:a> \land <var:f1> = <nat:4> \times <var:a> \land <var:f0> = <nat:2> \} \\ <var:d> := <var:f1> \\ \{ <var:H> = <var:a> \land <var:f0> = <nat:2> \land <var:d> = <nat:4> \times <var:a> \} \\ <var:d> := <var:d> + <var:f0> \\ \{ <var:H> = <var:a> \land <var:d> = <nat:4> \times <var:a> + <nat:2> \} \end{eqnarray} Given the preceding argument , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:H> = <var:a> }} <var:f1> := <var:H> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:4> ; <var:d> := <var:f1> <var:d> := <var:d> + <var:f0> {{ <var:d> = <nat:4> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:f1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:f1> = <var:a> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:f1> = <nat:4> * <var:a> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:f0> = <nat:2> /\ <var:d> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:d> = <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 