\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:V> ; <var:a2> := <var:a1> * <var:V> ; <var:a3> := <var:a2> * <var:V> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:a3> := <var:a3> * <nat:4> ; <var:b> := <var:a3> <var:b> := <var:b> + <var:a2> <var:b> := <var:b> + <var:a1> <var:b> := <var:b> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Allowing it to hold that $ <var:V> = <var:r> $ before running this code then we see $ <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the program is done with typical Hoare reasoning . Moving forward to the next step , the environment update command \verb | <var:a1> := <var:V> ; | . This advances the precondition $ \{ <var:V> = <var:r> \} $ as $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \} $ . Considering the subsequent line of code seen in our segment of code , the variable assignmet code giving $ <var:a1> * <var:V> $ to $ <var:a2>$ . This redefines $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \} $ toward $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \} $ . This is sound by the assignment inference rule of Hoare techniques . Taking another step toward the subsequent line found in our code segment , we see the binding code \verb | <var:a3> := <var:a2> * <var:V> ; | . This code forwards the condition $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \} $ to $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme given by standard Hoare reasoning . Immediately following , the assignment line binding $ <nat:1> $ toward $ <var:a0>$ . This statement forwards $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \} $ as the condition $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ . This is sound with the assignment scheme in Hoare logic . Focusing on the proceeding line of code contained in the list of instructions , we see the variable binding command assigning $ <var:a1> * <nat:2> $ into $ <var:a1>$ . This moves the precondition $ \{ <var:V> = <var:r> \land <var:a1> = <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ as the postcondition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ . Looking at the subsequent command found in the series of commands , we see the line \verb | <var:a2> := <var:a2> * <nat:4> ; | . This transfers $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ as the postcondition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ . This is given with the assignment rule found in standard Hoare reasoning . Taking another step toward the next statement found in the program , the assignment code \verb | <var:a3> := <var:a3> * <nat:4> ; | . This code moves the condition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ to the condition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ . This is known to be sound by the assignment scheme from Hoare logic . Stepping forward , we have the variable binding command assigning $ <var:a3$ to $ <var:b>$ . This forwards $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:a0> = <nat:1> \} $ toward the condition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ . Moving forward to the upcoming piece of code in our list of instructions , we have the variable binding command defining $ <var:b> + <var:a2$ as $ <var:b>$ . This command forwards $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ to $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} $ . This is guaranteed using the assignment inference rule given by standard Hoare reasoning . Going to the next step , we have the environment update command letting $ <var:b> + <var:a1$ as $ <var:b>$ . This forwards the condition $ \{ <var:V> = <var:r> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} $ . Further , we see the assignment statement binding $ <var:b> + <var:a0$ to $ <var:b>$ . This line moves the condition $ \{ <var:V> = <var:r> \land <var:a0> = <nat:1> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} $ toward $ \{ <var:V> = <var:r> \land <var:b> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:V> ; <var:a2> := <var:a1> * <var:V> ; <var:a3> := <var:a2> * <var:V> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:4> ; <var:a3> := <var:a3> * <nat:4> ; <var:b> := <var:a3> <var:b> := <var:b> + <var:a2> <var:b> := <var:b> + <var:a1> <var:b> := <var:b> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:V> = <var:r> }} <def:poly> {{ <var:b> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <var:r> /\ <var:a2> = <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <var:r> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a0> = <nat:1> /\ <var:b> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a0> = <nat:1> /\ <var:b> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:a0> = <nat:1> /\ <var:b> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:b> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 