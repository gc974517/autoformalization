\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:9> ; <var:b> := <var:j0> \end{verbatim} Allow that we have $ <var:p> = <var:W> $ prior to evaluating the code segment it must be that we have $ <var:b> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our code segment is clear through Hoare logic . Moving on to the next step , we see the assignment statement \verb | <var:j0> := <nat:9> ; | . This code transfers $ \{ <var:p> = <var:W> \} $ as the condition $ \{ <var:p> = <var:W> \land <var:j0> = <nat:9> \} $ . Moving onward , the variable assignmet command defining $ <var:j0$ toward $ <var:b>$ . This redefines the condition $ \{ <var:p> = <var:W> \land <var:j0> = <nat:9> \} $ into the condition $ \{ <var:p> = <var:W> \land <var:b> = <nat:9> \} $ . This is deduced using the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:p> = <var:W> }} <var:j0> := <nat:9> ; <var:b> := <var:j0> {{ <var:b> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:W> /\ <var:b> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 