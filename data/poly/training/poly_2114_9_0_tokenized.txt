\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:Y> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:Y> ; <var:p2> := <var:p2> * <var:Y> ; <var:P> := <var:p2> ; <var:P> := <var:P> + <var:p1> ; <var:P> := <var:P> + <var:p0> \end{verbatim} Assume $ <var:Y> = <var:b> $ prior to executing our set of commands , it follows that we see $ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:3> $ when list of commands is done . \end{theorem} \begin{proof} The flow of logic for our code is done with the following decorated code segment . \begin{eqnarray} \{ <var:Y> = <var:b> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \} \\ <var:p1> := <nat:9> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> \} \end{eqnarray} Continuing evaluating this program produces : \begin{eqnarray} <var:p1> := <var:p1> * <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> * <var:b> \} \\ <var:p2> := <nat:4> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> * <var:b> \land <var:p2> = <nat:4> \} \\ <var:p2> := <var:p2> * <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> * <var:b> \land <var:p2> = <nat:4> * <var:b> \} \\ <var:p2> := <var:p2> * <var:Y> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> * <var:b> \land <var:p2> = <nat:4> * <var:b> ^ <nat:2> \} \end{eqnarray} Allowing interpreting this list of commands results in : \begin{eqnarray} <var:P> := <var:p2> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:p1> = <nat:9> * <var:b> \land <var:P> = <nat:4> * <var:b> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:p1> ; \\ \{ <var:Y> = <var:b> \land <var:p0> = <nat:3> \land <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> \} \\ <var:P> := <var:P> + <var:p0> \\ \{ <var:Y> = <var:b> \land <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:3> \} \end{eqnarray} Using Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <var:p0> := <nat:3> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:Y> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:Y> ; <var:p2> := <var:p2> * <var:Y> ; <var:P> := <var:p2> ; <var:P> := <var:P> + <var:p1> ; <var:P> := <var:P> + <var:p0> {{ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:b> /\ <var:p2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:b> /\ <var:p2> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:b> /\ <var:p2> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:9> * <var:b> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:p0> = <nat:3> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:P> = <nat:4> * <var:b> ^ <nat:2> + <nat:9> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 