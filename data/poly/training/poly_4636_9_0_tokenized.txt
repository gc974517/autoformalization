\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:s> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:s> ; <var:W2> := <var:W2> * <var:s> ; <var:l> := <var:W2> ; <var:l> := <var:l> + <var:W1> ; <var:l> := <var:l> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allow it to be that $ <var:s> = <var:R> $ before the evaluation of this series of instructions it must be that $ <var:l> = <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:6> $ once series of commands is done executing . \end{theorem} \begin{proof} The course of logic for our list of instructions can be accomplished using standard Hoare logic . After , we have \begin{eqnarray} \{ <var:s> = <var:R> \} \, <var:W0> := <nat:6> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \} \, <var:W1> := <nat:4> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \} \, <var:W1> := <var:W1> * <var:s> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \} \, <var:W2> := <nat:4> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \} \, <var:W2> := <var:W2> * <var:s> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \times <var:R> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \times <var:R> \} \, <var:W2> := <var:W2> * <var:s> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \times <var:R> ^ <nat:2> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:W2> = <nat:4> \times <var:R> ^ <nat:2> \} \, <var:l> := <var:W2> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:l> = <nat:4> \times <var:R> ^ <nat:2> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:4> \times <var:R> \land <var:l> = <nat:4> \times <var:R> ^ <nat:2> \} \, <var:l> := <var:l> + <var:W1> \, \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:l> = <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} \\ \{ <var:s> = <var:R> \land <var:W0> = <nat:6> \land <var:l> = <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} \, <var:l> := <var:l> + <var:W0\, \{ <var:s> = <var:R> \land <var:l> = <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:6> \} \end{eqnarray} This is ensured by the law given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:6> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:s> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:s> ; <var:W2> := <var:W2> * <var:s> ; <var:l> := <var:W2> ; <var:l> := <var:l> + <var:W1> ; <var:l> := <var:l> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:s> = <var:R> }} <def:poly> {{ <var:l> = <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> * <var:R> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> * <var:R> /\ <var:W2> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> * <var:R> /\ <var:W2> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:4> * <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:W0> = <nat:6> /\ <var:l> = <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 