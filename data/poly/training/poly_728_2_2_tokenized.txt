\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:x> := <nat:3> ; <var:x> := <nat:3> + <var:x> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allowing --- taking positive coefficients $ <var:A> $ --- that $ <var:z> = <var:A> $ before running the series of instructions , then $ <var:x> = <nat:3> * <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:z> = <var:A> \} \\ <var:x> := <nat:3> ; \\ \{ <var:z> = <var:A> \land <var:x> = <nat:3> \} \\ <var:x> := <nat:3> + <var:x> * <var:z> \\ \{ <var:z> = <var:A> \land <var:x> = <nat:3> * <var:A> + <nat:3> \} \end{eqnarray} Thus , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:3> ; <var:x> := <nat:3> + <var:x> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:z> = <var:A> }} <def:poly> {{ <var:x> = <nat:3> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:x> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:x> = <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 