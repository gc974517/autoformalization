\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:6> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:Q> ; <var:k> := <var:B1> ; <var:k> := <var:k> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Given , given some whole numbers $ <var:q> $ , $ <var:Q> = <var:q> $ prior to executing the set of instructions , it holds that we see $ <var:k> = <nat:2> * <var:q> + <nat:6> $ . \end{theorem} \begin{proof} We can see that the below decorated code segment . \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:B0> := <nat:6> ; \\ \{ <var:Q> = <var:q> \land <var:B0> = <nat:6> \} \\ <var:B1> := <nat:2> ; \\ \{ <var:Q> = <var:q> \land <var:B0> = <nat:6> \land <var:B1> = <nat:2> \} \\ <var:B1> := <var:B1> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:B0> = <nat:6> \land <var:B1> = <nat:2> * <var:q> \} \\ <var:k> := <var:B1> ; \\ \{ <var:Q> = <var:q> \land <var:B0> = <nat:6> \land <var:k> = <nat:2> * <var:q> \} \\ <var:k> := <var:k> + <var:B0> \\ \{ <var:Q> = <var:q> \land <var:k> = <nat:2> * <var:q> + <nat:6> \} \end{eqnarray} The application of usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B0> := <nat:6> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:Q> ; <var:k> := <var:B1> ; <var:k> := <var:k> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <def:poly> {{ <var:k> = <nat:2> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:B0> = <nat:6> /\ <var:B1> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:B0> = <nat:6> /\ <var:k> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:k> = <nat:2> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 