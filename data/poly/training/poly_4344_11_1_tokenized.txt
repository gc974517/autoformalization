\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:v> ; <var:e2> := <var:e1> * <var:v> ; <var:e3> := <var:e2> * <var:v> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:9> ; <var:Z> := <var:e3> <var:Z> := <var:Z> + <var:e2> <var:Z> := <var:Z> + <var:e1> <var:Z> := <var:Z> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:v> = <var:t> $ prior to interpreting this series of instructions , it must be that we have $ <var:Z> = <nat:9> \cdot <var:t> ^ <nat:3> + <nat:6> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:v> = <var:t> \} \\ <var:e1> := <var:v> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <var:t> \} \\ <var:e2> := <var:e1> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <var:t> \land <var:e2> = <var:t> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <var:t> \land <var:e2> = <var:t> ^ <nat:2> \land <var:e3> = <var:t> ^ <nat:3> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <var:t> \land <var:e2> = <var:t> ^ <nat:2> \land <var:e3> = <var:t> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:7> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <nat:7> \times <var:t> \land <var:e2> = <var:t> ^ <nat:2> \land <var:e3> = <var:t> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e2> := <var:e2> * <nat:6> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <nat:7> \times <var:t> \land <var:e2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:e3> = <var:t> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e3> := <var:e3> * <nat:9> ; \\ \{ <var:v> = <var:t> \land <var:e1> = <nat:7> \times <var:t> \land <var:e2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:e3> = <nat:9> \times <var:t> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:Z> := <var:e3> \\ \{ <var:v> = <var:t> \land <var:e1> = <nat:7> \times <var:t> \land <var:e2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:Z> = <nat:9> \times <var:t> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:e2> \\ \{ <var:v> = <var:t> \land <var:e1> = <nat:7> \times <var:t> \land <var:e0> = <nat:2> \land <var:Z> = <nat:9> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:e1> \\ \{ <var:v> = <var:t> \land <var:e0> = <nat:2> \land <var:Z> = <nat:9> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:7> \times <var:t> \} \\ <var:Z> := <var:Z> + <var:e0> \\ \{ <var:v> = <var:t> \land <var:Z> = <nat:9> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:7> \times <var:t> + <nat:2> \} \end{eqnarray} Given the preceding argument , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:v> ; <var:e2> := <var:e1> * <var:v> ; <var:e3> := <var:e2> * <var:v> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:9> ; <var:Z> := <var:e3> <var:Z> := <var:Z> + <var:e2> <var:Z> := <var:Z> + <var:e1> <var:Z> := <var:Z> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <def:poly> {{ <var:Z> = <nat:9> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <var:t> /\ <var:e2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <var:t> /\ <var:e2> = <var:t> ^ <nat:2> /\ <var:e3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <var:t> /\ <var:e2> = <var:t> ^ <nat:2> /\ <var:e3> = <var:t> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <var:t> ^ <nat:2> /\ <var:e3> = <var:t> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:e3> = <var:t> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:e3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:Z> = <nat:9> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e1> = <nat:7> * <var:t> /\ <var:e0> = <nat:2> /\ <var:Z> = <nat:9> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:e0> = <nat:2> /\ <var:Z> = <nat:9> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:Z> = <nat:9> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 