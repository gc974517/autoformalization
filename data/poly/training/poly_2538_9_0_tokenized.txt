\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:w0> := <nat:2> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:c> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:c> ; <var:w2> := <var:w2> * <var:c> ; <var:P> := <var:w2> ; <var:P> := <var:P> + <var:w1> ; <var:P> := <var:P> + <var:w0> \end{verbatim} Allow that we have $ <var:c> = <var:J> $ ( letting $ <var:J> $ ) prior to running our set of commands , it must be that we see $ <var:P> = <nat:9> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:J> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \} \\ <var:w1> := <nat:9> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \} \\ <var:w1> := <var:w1> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \times <var:J> \} \\ <var:w2> := <nat:9> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \times <var:J> \land <var:w2> = <nat:9> \} \\ <var:w2> := <var:w2> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \times <var:J> \land <var:w2> = <nat:9> \times <var:J> \} \\ <var:w2> := <var:w2> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \times <var:J> \land <var:w2> = <nat:9> \times <var:J> ^ <nat:2> \} \\ <var:P> := <var:w2> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:w1> = <nat:9> \times <var:J> \land <var:P> = <nat:9> \times <var:J> ^ <nat:2> \} \end{eqnarray} Continuing the evaluation of this list of instructions results in : \begin{eqnarray} <var:P> := <var:P> + <var:w1> ; \\ \{ <var:c> = <var:J> \land <var:w0> = <nat:2> \land <var:P> = <nat:9> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> \} \\ <var:P> := <var:P> + <var:w0> \\ \{ <var:c> = <var:J> \land <var:P> = <nat:9> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> + <nat:2> \} \end{eqnarray} Considering the preceding argument , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <var:w0> := <nat:2> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:c> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:c> ; <var:w2> := <var:w2> * <var:c> ; <var:P> := <var:w2> ; <var:P> := <var:P> + <var:w1> ; <var:P> := <var:P> + <var:w0> {{ <var:P> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> * <var:J> /\ <var:w2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> * <var:J> /\ <var:w2> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> * <var:J> /\ <var:w2> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:9> * <var:J> /\ <var:P> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:w0> = <nat:2> /\ <var:P> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:P> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 