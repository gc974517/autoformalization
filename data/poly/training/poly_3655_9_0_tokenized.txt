\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:F0> := <nat:9> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:o> := <var:F2> ; <var:o> := <var:o> + <var:F1> ; <var:o> := <var:o> + <var:F0> \end{verbatim} Allowing it to be that $ <var:j> = <var:y> $ prior to the evaluation of our list of instructions , then we see $ <var:o> = <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is clear through the following decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:y> \} \\ <var:F0> := <nat:9> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \} \\ <var:F1> := <nat:6> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \} \\ <var:F1> := <var:F1> * <var:j> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \times <var:y> \} \\ <var:F2> := <nat:8> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \times <var:y> \land <var:F2> = <nat:8> \} \\ <var:F2> := <var:F2> * <var:j> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \times <var:y> \land <var:F2> = <nat:8> \times <var:y> \} \\ <var:F2> := <var:F2> * <var:j> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \times <var:y> \land <var:F2> = <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:o> := <var:F2> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:F1> = <nat:6> \times <var:y> \land <var:o> = <nat:8> \times <var:y> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:F1> ; \\ \{ <var:j> = <var:y> \land <var:F0> = <nat:9> \land <var:o> = <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> \} \\ <var:o> := <var:o> + <var:F0> \\ \{ <var:j> = <var:y> \land <var:o> = <nat:8> \times <var:y> ^ <nat:2> + <nat:6> \times <var:y> + <nat:9> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:j> = <var:y> }} <var:F0> := <nat:9> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:o> := <var:F2> ; <var:o> := <var:o> + <var:F1> ; <var:o> := <var:o> + <var:F0> {{ <var:o> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> * <var:y> /\ <var:F2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> * <var:y> /\ <var:F2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> * <var:y> /\ <var:F2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:F1> = <nat:6> * <var:y> /\ <var:o> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:F0> = <nat:9> /\ <var:o> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:o> = <nat:8> * <var:y> ^ <nat:2> + <nat:6> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 