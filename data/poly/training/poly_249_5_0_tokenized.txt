\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:z0> := <nat:7> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:Z> ; <var:v> := <var:z1> ; <var:v> := <var:v> + <var:z0> \end{verbatim} Given --- for some positive integer coefficients $ <var:q> $ --- $ <var:Z> = <var:q> $ ahead of evaluating our list of instructions then we have $ <var:v> = <nat:8> \times <var:q> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands is evident with the below decorated program . \begin{eqnarray} \{ <var:Z> = <var:q> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:Z> = <var:q> \land <var:z0> = <nat:7> \} \\ <var:z1> := <nat:8> ; \\ \{ <var:Z> = <var:q> \land <var:z0> = <nat:7> \land <var:z1> = <nat:8> \} \\ <var:z1> := <var:z1> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:z0> = <nat:7> \land <var:z1> = <nat:8> * <var:q> \} \end{eqnarray} Continuing the execution of this list of commands results in : \begin{eqnarray} <var:v> := <var:z1> ; \\ \{ <var:Z> = <var:q> \land <var:z0> = <nat:7> \land <var:v> = <nat:8> * <var:q> \} \\ <var:v> := <var:v> + <var:z0> \\ \{ <var:Z> = <var:q> \land <var:v> = <nat:8> * <var:q> + <nat:7> \} \end{eqnarray} The application of Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <var:z0> := <nat:7> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:Z> ; <var:v> := <var:z1> ; <var:v> := <var:v> + <var:z0> {{ <var:v> = <nat:8> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:z0> = <nat:7> /\ <var:v> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:v> = <nat:8> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 