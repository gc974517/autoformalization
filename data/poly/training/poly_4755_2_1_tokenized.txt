\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:8> ; <var:H> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Assume $ <var:t> = <var:I> $ ( for natural coefficients $ <var:I> $ ) before the evaluation of this program then $ <var:H> = <nat:8> $ when set of commands exits . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:t> = <var:I> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:t> = <var:I> \land <var:V0> = <nat:8> \} \\ <var:H> := <var:V0> \\ \{ <var:t> = <var:I> \land <var:H> = <nat:8> \} \end{eqnarray} Considering the preceding argument , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:H> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:t> = <var:I> }} <def:poly> {{ <var:H> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:H> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 