\begin{document} \begin{theorem} Define a list of commands : \begin{verbatim} <var:w1> := <var:h> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:3> ; <var:g> := <var:w1> <var:g> := <var:g> + <var:w0> \end{verbatim} Assuming that we have $ <var:h> = <var:x> $ prior to the execution of this series of commands , then we see $ <var:g> = <nat:3> * <var:x> + <nat:3> $ once list of instructions terminates . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be accomplished by Hoare logic . Advancing to the proceeding line of code seen in our list of commands , we have the variable binding code \verb | <var:w1> := <var:h> ; | . This takes the precondition $ \{ <var:h> = <var:x> \} $ into the condition $ \{ <var:h> = <var:x> \land <var:w1> = <var:x> \} $ . Shifting focus toward the subsequent line of code seen in the series of commands , we see the environment update command assigning $ <nat:3> $ to $ <var:w0>$ . This redefines the precondition $ \{ <var:h> = <var:x> \land <var:w1> = <var:x> \} $ as the postcondition $ \{ <var:h> = <var:x> \land <var:w1> = <var:x> \land <var:w0> = <nat:3> \} $ . This is shown to be logically sound through the assignment law in standard Hoare reasoning . Next , we see the assignment statement binding $ <var:w1> * <nat:3> $ as $ <var:w1>$ . This code forwards the condition $ \{ <var:h> = <var:x> \land <var:w1> = <var:x> \land <var:w0> = <nat:3> \} $ to $ \{ <var:h> = <var:x> \land <var:w1> = <nat:3> \times <var:x> \land <var:w0> = <nat:3> \} $ . This is known to be sound through the assignment inference rule given in usual Hoare reasoning . Stepping through , we have the assignment code \verb | <var:g> := <var:w1> | . This forwards $ \{ <var:h> = <var:x> \land <var:w1> = <nat:3> \times <var:x> \land <var:w0> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:x> \land <var:w0> = <nat:3> \land <var:g> = <nat:3> \times <var:x> \} $ . After , we have the variable update statement \verb | <var:g> := <var:g> + <var:w0> | . This redefines the condition $ \{ <var:h> = <var:x> \land <var:w0> = <nat:3> \land <var:g> = <nat:3> \times <var:x> \} $ to $ \{ <var:h> = <var:x> \land <var:g> = <nat:3> \times <var:x> + <nat:3> \} $ . This is guaranteed through the assignment law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <var:w1> := <var:h> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:3> ; <var:g> := <var:w1> <var:g> := <var:g> + <var:w0> {{ <var:g> = <nat:3> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:w1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:w1> = <var:x> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:w1> = <nat:3> * <var:x> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:w0> = <nat:3> /\ <var:g> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:g> = <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 