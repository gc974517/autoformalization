\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:c1> := <var:G> ; <var:c2> := <var:c1> * <var:G> ; <var:c3> := <var:c2> * <var:G> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:5> ; <var:e> := <var:c3> <var:e> := <var:e> + <var:c2> <var:e> := <var:e> + <var:c1> <var:e> := <var:e> + <var:c0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:h> $ , for positive integer coefficients $ <var:h> $ , ahead of the execution of this set of commands it follows that we have $ <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> $ when segment of code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare logic yields : \begin{eqnarray} \{ <var:G> = <var:h> \} \\ <var:c1> := <var:G> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <var:h> \} \\ <var:c2> := <var:c1> * <var:G> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <var:h> \land <var:c2> = <var:h> ^ <nat:2> \} \\ <var:c3> := <var:c2> * <var:G> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <var:h> \land <var:c2> = <var:h> ^ <nat:2> \land <var:c3> = <var:h> ^ <nat:3> \} \\ <var:c0> := <nat:1> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <var:h> \land <var:c2> = <var:h> ^ <nat:2> \land <var:c3> = <var:h> ^ <nat:3> \land <var:c0> = <nat:1> \} \\ <var:c1> := <var:c1> * <nat:2> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <nat:2> * <var:h> \land <var:c2> = <var:h> ^ <nat:2> \land <var:c3> = <var:h> ^ <nat:3> \land <var:c0> = <nat:1> \} \\ <var:c2> := <var:c2> * <nat:7> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <nat:2> * <var:h> \land <var:c2> = <nat:7> * <var:h> ^ <nat:2> \land <var:c3> = <var:h> ^ <nat:3> \land <var:c0> = <nat:1> \} \\ <var:c3> := <var:c3> * <nat:5> ; \\ \{ <var:G> = <var:h> \land <var:c1> = <nat:2> * <var:h> \land <var:c2> = <nat:7> * <var:h> ^ <nat:2> \land <var:c3> = <nat:5> * <var:h> ^ <nat:3> \land <var:c0> = <nat:1> \} \\ <var:e> := <var:c3> \\ \{ <var:G> = <var:h> \land <var:c1> = <nat:2> * <var:h> \land <var:c2> = <nat:7> * <var:h> ^ <nat:2> \land <var:c0> = <nat:1> \land <var:e> = <nat:5> * <var:h> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:c2> \\ \{ <var:G> = <var:h> \land <var:c1> = <nat:2> * <var:h> \land <var:c0> = <nat:1> \land <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:c1> \\ \{ <var:G> = <var:h> \land <var:c0> = <nat:1> \land <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> \} \\ <var:e> := <var:e> + <var:c0> \\ \{ <var:G> = <var:h> \land <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:G> = <var:h> }} <var:c1> := <var:G> ; <var:c2> := <var:c1> * <var:G> ; <var:c3> := <var:c2> * <var:G> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:5> ; <var:e> := <var:c3> <var:e> := <var:e> + <var:c2> <var:e> := <var:e> + <var:c1> <var:e> := <var:e> + <var:c0> {{ <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <var:h> /\ <var:c2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <var:h> /\ <var:c2> = <var:h> ^ <nat:2> /\ <var:c3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <var:h> /\ <var:c2> = <var:h> ^ <nat:2> /\ <var:c3> = <var:h> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <nat:2> * <var:h> /\ <var:c2> = <var:h> ^ <nat:2> /\ <var:c3> = <var:h> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <nat:2> * <var:h> /\ <var:c2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:c3> = <var:h> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <nat:2> * <var:h> /\ <var:c2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:c3> = <nat:5> * <var:h> ^ <nat:3> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <nat:2> * <var:h> /\ <var:c2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:c0> = <nat:1> /\ <var:e> = <nat:5> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c1> = <nat:2> * <var:h> /\ <var:c0> = <nat:1> /\ <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:c0> = <nat:1> /\ <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:h> /\ <var:e> = <nat:5> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 