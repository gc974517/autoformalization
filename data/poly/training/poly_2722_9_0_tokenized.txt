\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:J> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:J> ; <var:S2> := <var:S2> * <var:J> ; <var:i> := <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Assuming it to be that $ <var:J> = <var:K> $ ahead of the execution of the segment of code , it holds that $ <var:i> = <nat:2> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given through the below decorated series of instructions . \begin{eqnarray} \{ <var:J> = <var:K> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:5> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \} \\ <var:S1> := <var:S1> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:K> \} \\ <var:S2> := <nat:2> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:K> \land <var:S2> = <nat:2> \} \\ <var:S2> := <var:S2> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:K> \land <var:S2> = <nat:2> \times <var:K> \} \\ <var:S2> := <var:S2> * <var:J> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:K> \land <var:S2> = <nat:2> \times <var:K> ^ <nat:2> \} \\ <var:i> := <var:S2> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:S1> = <nat:5> \times <var:K> \land <var:i> = <nat:2> \times <var:K> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:S1> ; \\ \{ <var:J> = <var:K> \land <var:S0> = <nat:8> \land <var:i> = <nat:2> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> \} \\ <var:i> := <var:i> + <var:S0> \\ \{ <var:J> = <var:K> \land <var:i> = <nat:2> \times <var:K> ^ <nat:2> + <nat:5> \times <var:K> + <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:J> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:J> ; <var:S2> := <var:S2> * <var:J> ; <var:i> := <var:S2> ; <var:i> := <var:i> + <var:S1> ; <var:i> := <var:i> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <def:poly> {{ <var:i> = <nat:2> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:5> * <var:K> /\ <var:i> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:S0> = <nat:8> /\ <var:i> = <nat:2> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:i> = <nat:2> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 