\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:I> ; <var:X2> := <var:X1> * <var:I> ; <var:X3> := <var:X2> * <var:I> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:5> ; <var:X2> := <var:X2> * <nat:3> ; <var:X3> := <var:X3> * <nat:4> ; <var:Y> := <var:X3> <var:Y> := <var:Y> + <var:X2> <var:Y> := <var:Y> + <var:X1> <var:Y> := <var:Y> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:I> = <var:W> $ prior to the evaluation of this list of commands it follows that we have $ <var:Y> = <nat:4> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:5> \times <var:W> + <nat:8> $ after series of commands has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be demonstrated through Hoare reasoning . Focusing on the upcoming lines found in our code segment , \begin{verbatim} { <var:I> = <var:W> } <var:X1> := <var:I> { <var:I> = <var:W> \land <var:X1> = <var:W> } { <var:I> = <var:W> \land <var:X1> = <var:W> } <var:X2> := <var:X1> * <var:I> { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> } { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> } <var:X3> := <var:X2> * <var:I> { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> } { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> } <var:X0> := <nat:8> { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } { <var:I> = <var:W> \land <var:X1> = <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } <var:X1> := <var:X1> * <nat:5> { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } <var:X2> := <var:X2> * <nat:3> { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X3> = <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } <var:X3> := <var:X3> * <nat:4> { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X3> = <nat:4> * <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X3> = <nat:4> * <var:W> ^ <nat:3> \land <var:X0> = <nat:8> } <var:Y> := <var:X3{ <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X0> = <nat:8> \land <var:Y> = <nat:4> * <var:W> ^ <nat:3> } { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X2> = <nat:3> * <var:W> ^ <nat:2> \land <var:X0> = <nat:8> \land <var:Y> = <nat:4> * <var:W> ^ <nat:3> } <var:Y> := <var:Y> + <var:X2{ <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X0> = <nat:8> \land <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> } { <var:I> = <var:W> \land <var:X1> = <nat:5> * <var:W> \land <var:X0> = <nat:8> \land <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> } <var:Y> := <var:Y> + <var:X1{ <var:I> = <var:W> \land <var:X0> = <nat:8> \land <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> * <var:W> } \end{verbatim} This is known to be sound by the variable assignmet scheme obtained from Hoare logic . Moving forward to the upcoming bit of code in the list of instructions , we see \begin{verbatim} { <var:I> = <var:W> } <var:X1> := <var:I> { <var:I> = <var:W> \land <var:X1> = <var:W> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X1> := <var:I> ; <var:X2> := <var:X1> * <var:I> ; <var:X3> := <var:X2> * <var:I> ; <var:X0> := <nat:8> ; <var:X1> := <var:X1> * <nat:5> ; <var:X2> := <var:X2> * <nat:3> ; <var:X3> := <var:X3> * <nat:4> ; <var:Y> := <var:X3> <var:Y> := <var:Y> + <var:X2> <var:Y> := <var:Y> + <var:X1> <var:Y> := <var:Y> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <def:poly> {{ <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <var:W> /\ <var:X2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <var:W> /\ <var:X2> = <var:W> ^ <nat:2> /\ <var:X3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <var:W> /\ <var:X2> = <var:W> ^ <nat:2> /\ <var:X3> = <var:W> ^ <nat:3> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <nat:5> * <var:W> /\ <var:X2> = <var:W> ^ <nat:2> /\ <var:X3> = <var:W> ^ <nat:3> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <nat:5> * <var:W> /\ <var:X2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:X3> = <var:W> ^ <nat:3> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <nat:5> * <var:W> /\ <var:X2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:X3> = <nat:4> * <var:W> ^ <nat:3> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <nat:5> * <var:W> /\ <var:X2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:X0> = <nat:8> /\ <var:Y> = <nat:4> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X1> = <nat:5> * <var:W> /\ <var:X0> = <nat:8> /\ <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:X0> = <nat:8> /\ <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:Y> = <nat:4> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 