\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:w0> := <nat:7> ; <var:U> := <var:w0> \end{verbatim} Allow it to be that $ <var:q> = <var:g> $ , taking natural numbers $ <var:g> $ , ahead of the execution of our set of instructions , it follows that we see $ <var:U> = <nat:7> $ once code segment terminates . \end{theorem} \begin{proof} The argument for this segment of code can be given through typical Hoare logic . Advancing to the next step , we see the variable update code yielding $ <nat:7> $ into $ <var:w0>$ . This statement moves the precondition $ \{ <var:q> = <var:g> \} $ toward $ \{ <var:q> = <var:g> \land <var:w0> = <nat:7> \} $ . Looking at the next command found in the list of commands , we have the binding statement letting $ <var:w0$ toward $ <var:U>$ . This forwards the condition $ \{ <var:q> = <var:g> \land <var:w0> = <nat:7> \} $ toward the postcondition $ \{ <var:q> = <var:g> \land <var:U> = <nat:7> \} $ . This is given using the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:q> = <var:g> }} <var:w0> := <nat:7> ; <var:U> := <var:w0> {{ <var:U> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:g> /\ <var:U> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 