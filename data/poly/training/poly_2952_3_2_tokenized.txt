\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <nat:3> + <var:n> * <var:J> ; <var:n> := <nat:1> + <var:n> * <var:J> \end{verbatim} Assume it to be that $ <var:J> = <var:W> $ , taking positive integer coefficients $ <var:W> $ , before the evaluation of our set of commands , it must be that $ <var:n> = <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> $ once code segment has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:J> = <var:W> \} \\ <var:n> := <nat:4> ; \\ \{ <var:J> = <var:W> \land <var:n> = <nat:4> \} \\ <var:n> := <nat:3> + <var:n> * <var:J> ; \\ \{ <var:J> = <var:W> \land <var:n> = <nat:4> * <var:W> + <nat:3> \} \\ <var:n> := <nat:1> + <var:n> * <var:J> \\ \{ <var:J> = <var:W> \land <var:n> = <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> \} \end{eqnarray} Therefore , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <var:n> := <nat:4> ; <var:n> := <nat:3> + <var:n> * <var:J> ; <var:n> := <nat:1> + <var:n> * <var:J> {{ <var:n> = <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:n> = <nat:4> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:n> = <nat:4> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 