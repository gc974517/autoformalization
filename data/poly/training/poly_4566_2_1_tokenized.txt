\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:6> ; <var:r> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Assume that we have $ <var:K> = <var:C> $ prior to running this segment of code , it must be that $ <var:r> = <nat:6> $ after program exits . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:K> = <var:C> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:K> = <var:C> \land <var:w0> = <nat:6> \} \\ <var:r> := <var:w0> \\ \{ <var:K> = <var:C> \land <var:r> = <nat:6> \} \end{eqnarray} As a result , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:r> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:K> = <var:C> }} <def:poly> {{ <var:r> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:C> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:C> /\ <var:r> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 