\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:1> ; <var:G> := <var:R0> \end{verbatim} Given it to hold that $ <var:q> = <var:p> $ ahead of the execution of the segment of code , then we have $ <var:G> = <nat:1> $ when code segment has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions is demonstrated through standard Hoare reasoning . Moving on to the upcoming lines of codecontained in the code , \[ \begin{tabular} {rcl} \{ <var:q> = <var:p> \} & <var:R0> := <nat:1> & \{ <var:q> = <var:p> \land <var:R0> = <nat:1> \} \\ \{ <var:q> = <var:p> \land <var:R0> = <nat:1> \} & <var:G> := <var:R0& \{ <var:q> = <var:p> \land <var:G> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:q> = <var:p> }} <var:R0> := <nat:1> ; <var:G> := <var:R0> {{ <var:G> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:G> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 