\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:E1> := <var:a> ; <var:E2> := <var:E1> * <var:a> ; <var:E3> := <var:E2> * <var:a> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:7> ; <var:E3> := <var:E3> * <nat:4> ; <var:e> := <var:E3> <var:e> := <var:e> + <var:E2> <var:e> := <var:e> + <var:E1> <var:e> := <var:e> + <var:E0> \end{verbatim} Assuming that we have $ <var:a> = <var:s> $ prior to the execution of this code , then we have $ <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our series of instructions is clear with standard Hoare techniques . Looking at the next step in the set of commands , we have the variable update command \verb | <var:E1> := <var:a> ; | . This command transfers the precondition $ \{ <var:a> = <var:s> \} $ toward $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \} $ . This is guaranteed using the assignment law defined by standard Hoare techniques . Focusing on the next line in the series of instructions , we see the variable binding statement \verb | <var:E2> := <var:E1> * <var:a> ; | . This command redefines $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \} $ into $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \} $ . This is rigorously given using the assignment law in typical Hoare techniques . Moving forward , the variable update statement \verb | <var:E3> := <var:E2> * <var:a> ; | . This code takes the condition $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \} $ into the condition $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \} $ . Moving forward , we see the variable update code yielding $ <nat:8> $ toward $ <var:E0>$ . This takes the condition $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ . This is sound through the assignment law in standard Hoare logic . Further , we have the variable assignmet line binding $ <var:E1> * <nat:9> $ toward $ <var:E1>$ . This transfers $ \{ <var:a> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ into the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ . Considering the upcoming statement in the code , we see the variable update statement assigning $ <var:E2> * <nat:7> $ toward $ <var:E2>$ . This code redefines the precondition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ to $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ . This is sound using the assignment inference rule of Hoare reasoning . Moving on to the next piece of code found in the list of commands , the binding command assigning $ <var:E3> * <nat:4> $ as $ <var:E3>$ . This takes the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ into the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ . This is known to be sound using the assignment rule defined in usual Hoare logic . Now , we have the variable binding statement binding $ <var:E3$ into $ <var:e>$ . This redefines the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:s> ^ <nat:3> \land <var:E0> = <nat:8> \} $ to the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> \} $ . Immediately after , we have the command yielding $ <var:e> + <var:E2$ toward $ <var:e>$ . This line transfers the precondition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E2> = <nat:7> \times <var:s> ^ <nat:2> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> \} $ into the condition $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme given by usual Hoare techniques . Taking another step toward the upcoming statement found in our series of commands , we see the variable update command \verb | <var:e> := <var:e> + <var:E1> | . This moves $ \{ <var:a> = <var:s> \land <var:E1> = <nat:9> \times <var:s> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> \} $ toward the condition $ \{ <var:a> = <var:s> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} $ . Advancing to the next step , we see the binding statement \verb | <var:e> := <var:e> + <var:E0> | . This advances $ \{ <var:a> = <var:s> \land <var:E0> = <nat:8> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} $ to the condition $ \{ <var:a> = <var:s> \land <var:e> = <nat:4> \times <var:s> ^ <nat:3> + <nat:7> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:a> = <var:s> }} <var:E1> := <var:a> ; <var:E2> := <var:E1> * <var:a> ; <var:E3> := <var:E2> * <var:a> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:9> ; <var:E2> := <var:E2> * <nat:7> ; <var:E3> := <var:E3> * <nat:4> ; <var:e> := <var:E3> <var:e> := <var:e> + <var:E2> <var:e> := <var:e> + <var:E1> <var:e> := <var:e> + <var:E0> {{ <var:e> = <nat:4> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <nat:9> * <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <nat:9> * <var:s> /\ <var:E2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <nat:9> * <var:s> /\ <var:E2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:s> ^ <nat:3> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <nat:9> * <var:s> /\ <var:E2> = <nat:7> * <var:s> ^ <nat:2> /\ <var:E0> = <nat:8> /\ <var:e> = <nat:4> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E1> = <nat:9> * <var:s> /\ <var:E0> = <nat:8> /\ <var:e> = <nat:4> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:E0> = <nat:8> /\ <var:e> = <nat:4> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:e> = <nat:4> * <var:s> ^ <nat:3> + <nat:7> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 