\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:4> ; <var:V> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:S> = <var:X> $ ( letting $ <var:X> $ ) before running our series of instructions , it follows that we see $ <var:V> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:X> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:S> = <var:X> \land <var:d0> = <nat:4> \} \\ <var:V> := <var:d0> \\ \{ <var:S> = <var:X> \land <var:V> = <nat:4> \} \end{eqnarray} Using usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:V> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:S> = <var:X> }} <def:poly> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:X> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 