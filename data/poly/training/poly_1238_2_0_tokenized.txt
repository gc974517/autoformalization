\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:9> ; <var:g> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:L> = <var:r> $ prior to evaluating this list of commands it follows that we have $ <var:g> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is accomplished with typical Hoare reasoning . Looking at the subsequent line in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:L> = <var:r> \} & <var:O0> := <nat:9> & \{ <var:L> = <var:r> \land <var:O0> = <nat:9> \} \end{tabular} This is given by the variable binding rule in typical Hoare logic . Looking at the next piece of code in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:r> \} & <var:O0> := <nat:9> & \{ <var:L> = <var:r> \land <var:O0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:g> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:L> = <var:r> }} <def:poly> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 