\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:W> ; <var:p2> := <var:p1> * <var:W> ; <var:p3> := <var:p2> * <var:W> ; <var:p0> := <nat:3> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:1> ; <var:E> := <var:p3> <var:E> := <var:E> + <var:p2> <var:E> := <var:E> + <var:p0> \end{verbatim} Assume it to hold that $ <var:W> = <var:G> $ for $ <var:G> $ before interpreting the program it must be that we see $ <var:E> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} The flow of logic for our set of instructions is accomplished through the below decorated series of commands . \begin{eqnarray} \{ <var:W> = <var:G> \} \\ <var:p1> := <var:W> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \} \\ <var:p2> := <var:p1> * <var:W> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:W> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:p2> := <var:p2> * <nat:7> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:p3> := <var:p3> * <nat:1> ; \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:p3> = <nat:1> \cdot <var:G> ^ <nat:3> \land <var:p0> = <nat:3> \} \\ <var:E> := <var:p3> \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <nat:7> \cdot <var:G> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:E> = <nat:1> \cdot <var:G> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:p2> \\ \{ <var:W> = <var:G> \land <var:p1> = <var:G> \land <var:p0> = <nat:3> \land <var:E> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:p0> \\ \{ <var:W> = <var:G> \land <var:E> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:7> \cdot <var:G> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:W> = <var:G> }} <var:p1> := <var:W> ; <var:p2> := <var:p1> * <var:W> ; <var:p3> := <var:p2> * <var:W> ; <var:p0> := <nat:3> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:1> ; <var:E> := <var:p3> <var:E> := <var:E> + <var:p2> <var:E> := <var:E> + <var:p0> {{ <var:E> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:p3> = <nat:1> * <var:G> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:p0> = <nat:3> /\ <var:E> = <nat:1> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:p1> = <var:G> /\ <var:p0> = <nat:3> /\ <var:E> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:E> = <nat:1> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 