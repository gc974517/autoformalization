\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:u> := <var:E0> \end{verbatim} Assuming for $ <var:Z> $ $ <var:s> = <var:Z> $ before evaluating this segment of code , then we see $ <var:u> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is shown through the below decorated series of instructions . \begin{eqnarray} \{ <var:s> = <var:Z> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:s> = <var:Z> \land <var:E0> = <nat:4> \} \\ <var:u> := <var:E0> \\ \{ <var:s> = <var:Z> \land <var:u> = <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:s> = <var:Z> }} <var:E0> := <nat:4> ; <var:u> := <var:E0> {{ <var:u> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Z> /\ <var:u> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 