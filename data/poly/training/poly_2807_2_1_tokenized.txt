\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:8> ; <var:r> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:t> = <var:A> $ prior to running the segment of code , it follows that $ <var:r> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:A> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:t> = <var:A> \land <var:s0> = <nat:8> \} \\ <var:r> := <var:s0> \\ \{ <var:t> = <var:A> \land <var:r> = <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:8> ; <var:r> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:t> = <var:A> }} <def:poly> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:A> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 