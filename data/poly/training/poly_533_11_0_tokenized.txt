\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:Y> ; <var:g4> := <nat:1> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:F> := <var:g4> ; <var:F> := <var:F> + <var:g1> ; <var:F> := <var:F> + <var:g0> \end{verbatim} Assume , with some natural numbers $ <var:i> $ , that we have $ <var:Y> = <var:i> $ ahead of executing this series of instructions it holds that we have $ <var:F> = <nat:1> \times <var:i> ^ <nat:4> + <nat:2> \times <var:i> + <nat:8> $ when segment of code has exited . \end{theorem} \begin{proof} Notice the below decorated list of commands . \begin{eqnarray} \{ <var:Y> = <var:i> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:2> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> \} \\ <var:g1> := <var:g1> * <var:Y> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \} \\ <var:g4> := <nat:1> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:g4> = <nat:1> \} \\ <var:g4> := <var:g4> * <var:Y> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:g4> = <nat:1> * <var:i> \} \\ <var:g4> := <var:g4> * <var:Y> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:g4> = <nat:1> * <var:i> ^ <nat:2> \} \\ <var:g4> := <var:g4> * <var:Y> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:g4> = <nat:1> * <var:i> ^ <nat:3> \} \\ <var:g4> := <var:g4> * <var:Y> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:g4> = <nat:1> * <var:i> ^ <nat:4> \} \\ <var:F> := <var:g4> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:i> \land <var:F> = <nat:1> * <var:i> ^ <nat:4> \} \\ <var:F> := <var:F> + <var:g1> ; \\ \{ <var:Y> = <var:i> \land <var:g0> = <nat:8> \land <var:F> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> \} \\ <var:F> := <var:F> + <var:g0> \\ \{ <var:Y> = <var:i> \land <var:F> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:8> \} \end{eqnarray} Utilizing Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Y> = <var:i> }} <var:g0> := <nat:8> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:Y> ; <var:g4> := <nat:1> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:g4> := <var:g4> * <var:Y> ; <var:F> := <var:g4> ; <var:F> := <var:F> + <var:g1> ; <var:F> := <var:F> + <var:g0> {{ <var:F> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:g4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:g4> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:g4> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:g4> = <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:g4> = <nat:1> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:i> /\ <var:F> = <nat:1> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:g0> = <nat:8> /\ <var:F> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:i> /\ <var:F> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 