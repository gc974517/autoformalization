\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:7> ; <var:t> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow , given any natural numbers $ <var:v> $ , it to be that $ <var:k> = <var:v> $ before the evaluation of our code segment it must be that we have $ <var:t> = <nat:7> $ . \end{theorem} \begin{proof} Let the following decorated segment of code . \begin{eqnarray} \{ <var:k> = <var:v> \} \\ <var:q0> := <nat:7> ; \\ \{ <var:k> = <var:v> \land <var:q0> = <nat:7> \} \\ <var:t> := <var:q0> \\ \{ <var:k> = <var:v> \land <var:t> = <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:7> ; <var:t> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:k> = <var:v> }} <def:poly> {{ <var:t> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:v> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:v> /\ <var:t> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 