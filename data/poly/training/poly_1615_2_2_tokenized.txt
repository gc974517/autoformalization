\begin{document} \begin{theorem} Define the following series of instructions as follows \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:B> \end{verbatim} Allow ( for every positive integers $ <var:E> $ ) $ <var:B> = <var:E> $ before interpreting the series of instructions then $ <var:O> = <nat:2> \times <var:E> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be accomplished with usual Hoare reasoning . After , the line assigning $ <nat:2> $ into $ <var:O>$ . This line forwards the condition $ \{ <var:B> = <var:E> \} $ toward the condition $ \{ <var:B> = <var:E> \land <var:O> = <nat:2> \} $ . Stepping through , we see the environment update line \verb | <var:O> := <nat:2> + <var:O> * <var:B> | . This statement takes $ \{ <var:B> = <var:E> \land <var:O> = <nat:2> \} $ into $ \{ <var:B> = <var:E> \land <var:O> = <nat:2> \cdot <var:E> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:B> = <var:E> }} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:B> {{ <var:O> = <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:O> = <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 