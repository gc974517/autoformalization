\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:C1> := <var:y> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:8> ; <var:r> := <var:C1> <var:r> := <var:r> + <var:C0> \end{verbatim} Assume that $ <var:y> = <var:L> $ prior to evaluating our segment of code , it must be that we have $ <var:r> = <nat:8> \cdot <var:L> + <nat:7> $ after set of instructions exits . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:y> = <var:L> \} \\ <var:C1> := <var:y> ; \\ \{ <var:y> = <var:L> \land <var:C1> = <var:L> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:y> = <var:L> \land <var:C1> = <var:L> \land <var:C0> = <nat:7> \} \\ <var:C1> := <var:C1> * <nat:8> ; \\ \{ <var:y> = <var:L> \land <var:C1> = <nat:8> \cdot <var:L> \land <var:C0> = <nat:7> \} \\ <var:r> := <var:C1> \\ \{ <var:y> = <var:L> \land <var:C0> = <nat:7> \land <var:r> = <nat:8> \cdot <var:L> \} \\ <var:r> := <var:r> + <var:C0> \\ \{ <var:y> = <var:L> \land <var:r> = <nat:8> \cdot <var:L> + <nat:7> \} \end{eqnarray} Given the preceding argument , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:y> = <var:L> }} <var:C1> := <var:y> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:8> ; <var:r> := <var:C1> <var:r> := <var:r> + <var:C0> {{ <var:r> = <nat:8> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:C1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:C1> = <var:L> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:C1> = <nat:8> * <var:L> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:C0> = <nat:7> /\ <var:r> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:r> = <nat:8> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 