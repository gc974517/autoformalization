\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:8> ; <var:f> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allowing $ <var:y> = <var:I> $ --- given some integers $ <var:I> $ --- prior to evaluating the set of instructions it must be that $ <var:f> = <nat:8> $ when code terminates . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is done with standard Hoare techniques . Stepping through , \[ \begin{tabular} {rcl} \{ <var:y> = <var:I> \} & <var:P0> := <nat:8> & \{ <var:y> = <var:I> \land <var:P0> = <nat:8> \} \\ \{ <var:y> = <var:I> \land <var:P0> = <nat:8> \} & <var:f> := <var:P0& \{ <var:y> = <var:I> \land <var:f> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:8> ; <var:f> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <def:poly> {{ <var:f> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:f> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 