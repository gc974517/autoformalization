\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:C> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:C> ; <var:B2> := <var:B2> * <var:C> ; <var:X> := <var:B2> ; <var:X> := <var:X> + <var:B1> ; <var:X> := <var:X> + <var:B0> \end{verbatim} Allowing $ <var:C> = <var:l> $ prior to executing this segment of code it must be that we see $ <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for our code segment can be done by Hoare reasoning . Paying attention to the following statement contained in our list of instructions , we see the environment update command binding $ <nat:4> $ into $ <var:B0>$ . This statement transfers $ \{ <var:C> = <var:l> \} $ to the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \} $ . Following , we see the assignment statement \verb | <var:B1> := <nat:4> ; | . This code advances the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \} $ into the postcondition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \} $ . Advancing to the next piece of code contained in our code segment , we have the variable binding statement \verb | <var:B1> := <var:B1> * <var:C> ; | . This line forwards the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> \} $ into the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \} $ . Jumping to the following command in the segment of code , we see the assignment command \verb | <var:B2> := <nat:1> ; | . This forwards the precondition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \} $ toward the postcondition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> \} $ . Moving on , the assignment code giving $ <var:B2> * <var:C> $ toward $ <var:B2>$ . This advances the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> \} $ as the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> * <var:l> \} $ . Focusing on the following statement found in the series of commands , we see the variable binding command \verb | <var:B2> := <var:B2> * <var:C> ; | . This redefines $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> * <var:l> \} $ into $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> * <var:l> ^ <nat:2> \} $ . This is rigorously given through the assignment rule given in standard Hoare techniques . Stepping forward , we have the command \verb | <var:X> := <var:B2> ; | . This code takes the condition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:B2> = <nat:1> * <var:l> ^ <nat:2> \} $ to $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:X> = <nat:1> * <var:l> ^ <nat:2> \} $ . Moving on , we have the variable assignmet line giving $ <var:X> + <var:B1> $ into $ <var:X>$ . This moves $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:B1> = <nat:4> * <var:l> \land <var:X> = <nat:1> * <var:l> ^ <nat:2> \} $ to $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} $ . Observing the next piece of code in the program , we have the binding statement binding $ <var:X> + <var:B0$ toward $ <var:X>$ . This command advances the precondition $ \{ <var:C> = <var:l> \land <var:B0> = <nat:4> \land <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> \} $ into $ \{ <var:C> = <var:l> \land <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} $ . This is known to be sound by the assignment inference rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:C> = <var:l> }} <var:B0> := <nat:4> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:C> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:C> ; <var:B2> := <var:B2> * <var:C> ; <var:X> := <var:B2> ; <var:X> := <var:X> + <var:B1> ; <var:X> := <var:X> + <var:B0> {{ <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:l> /\ <var:B2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:l> /\ <var:B2> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:l> /\ <var:B2> = <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:4> * <var:l> /\ <var:X> = <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:B0> = <nat:4> /\ <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:X> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 