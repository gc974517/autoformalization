\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:8> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:M> ; <var:p> := <var:W1> ; <var:p> := <var:p> + <var:W0> \end{verbatim} Given $ <var:M> = <var:q> $ before the execution of this list of instructions , then $ <var:p> = <nat:9> * <var:q> + <nat:8> $ . \end{theorem} \begin{proof} Using Hoare reasoning gives : \begin{eqnarray} \{ <var:M> = <var:q> \} \\ <var:W0> := <nat:8> ; \\ \{ <var:M> = <var:q> \land <var:W0> = <nat:8> \} \\ <var:W1> := <nat:9> ; \\ \{ <var:M> = <var:q> \land <var:W0> = <nat:8> \land <var:W1> = <nat:9> \} \\ <var:W1> := <var:W1> * <var:M> ; \\ \{ <var:M> = <var:q> \land <var:W0> = <nat:8> \land <var:W1> = <nat:9> \cdot <var:q> \} \\ <var:p> := <var:W1> ; \\ \{ <var:M> = <var:q> \land <var:W0> = <nat:8> \land <var:p> = <nat:9> \cdot <var:q> \} \\ <var:p> := <var:p> + <var:W0> \\ \{ <var:M> = <var:q> \land <var:p> = <nat:9> \cdot <var:q> + <nat:8> \} \end{eqnarray} Hence , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <var:W0> := <nat:8> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:M> ; <var:p> := <var:W1> ; <var:p> := <var:p> + <var:W0> {{ <var:p> = <nat:9> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:W0> = <nat:8> /\ <var:W1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:W0> = <nat:8> /\ <var:W1> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:W0> = <nat:8> /\ <var:p> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:p> = <nat:9> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 