\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:k1> := <var:t> ; <var:k2> := <var:k1> * <var:t> ; <var:k3> := <var:k2> * <var:t> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:1> ; <var:s> := <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> \end{verbatim} Assume that $ <var:t> = <var:F> $ ahead of evaluating the program , it follows that we have $ <var:s> = <nat:1> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is done by the below decorated set of commands . \begin{eqnarray} \{ <var:t> = <var:F> \} \\ <var:k1> := <var:t> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <var:F> \} \\ <var:k2> := <var:k1> * <var:t> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:t> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k3> = <var:F> ^ <nat:3> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k3> = <var:F> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k1> := <var:k1> * <nat:9> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k2> = <var:F> ^ <nat:2> \land <var:k3> = <var:F> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k2> := <var:k2> * <nat:9> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:k3> = <var:F> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k3> := <var:k3> * <nat:1> ; \\ \{ <var:t> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:F> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:s> := <var:k3> \\ \{ <var:t> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:s> = <nat:1> \cdot <var:F> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:k2> \\ \{ <var:t> = <var:F> \land <var:k1> = <nat:9> \cdot <var:F> \land <var:k0> = <nat:1> \land <var:s> = <nat:1> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:k1> \\ \{ <var:t> = <var:F> \land <var:k0> = <nat:1> \land <var:s> = <nat:1> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> \} \end{eqnarray} Allowing the execution of our series of instructions returns : \begin{eqnarray} <var:s> := <var:s> + <var:k0> \\ \{ <var:t> = <var:F> \land <var:s> = <nat:1> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> + <nat:1> \} \end{eqnarray} Applying Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <var:k1> := <var:t> ; <var:k2> := <var:k1> * <var:t> ; <var:k3> := <var:k2> * <var:t> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:1> ; <var:s> := <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k1> <var:s> := <var:s> + <var:k0> {{ <var:s> = <nat:1> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <var:F> /\ <var:k2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <var:F> /\ <var:k2> = <var:F> ^ <nat:2> /\ <var:k3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <var:F> /\ <var:k2> = <var:F> ^ <nat:2> /\ <var:k3> = <var:F> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k2> = <var:F> ^ <nat:2> /\ <var:k3> = <var:F> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:k3> = <var:F> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:F> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:1> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k1> = <nat:9> * <var:F> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:1> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:k0> = <nat:1> /\ <var:s> = <nat:1> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:s> = <nat:1> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 