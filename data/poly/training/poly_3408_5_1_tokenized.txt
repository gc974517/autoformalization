\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:U1> := <var:F> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:u> := <var:U1> <var:u> := <var:u> + <var:U0> \end{verbatim} Allow $ <var:F> = <var:Q> $ prior to interpreting the series of instructions , it follows that we see $ <var:u> = <nat:4> \cdot <var:Q> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:F> = <var:Q> \} \\ <var:U1> := <var:F> ; \\ \{ <var:F> = <var:Q> \land <var:U1> = <var:Q> \} \\ <var:U0> := <nat:5> ; \\ \{ <var:F> = <var:Q> \land <var:U1> = <var:Q> \land <var:U0> = <nat:5> \} \end{eqnarray} Furthering running our set of commands gives : \begin{eqnarray} <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:F> = <var:Q> \land <var:U1> = <nat:4> \times <var:Q> \land <var:U0> = <nat:5> \} \\ <var:u> := <var:U1> \\ \{ <var:F> = <var:Q> \land <var:U0> = <nat:5> \land <var:u> = <nat:4> \times <var:Q> \} \\ <var:u> := <var:u> + <var:U0> \\ \{ <var:F> = <var:Q> \land <var:u> = <nat:4> \times <var:Q> + <nat:5> \} \end{eqnarray} Allowing executing the segment of code gives us : \begin{eqnarray} \end{eqnarray} Thusly , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:F> = <var:Q> }} <var:U1> := <var:F> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:u> := <var:U1> <var:u> := <var:u> + <var:U0> {{ <var:u> = <nat:4> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:U1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:U1> = <var:Q> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:U1> = <nat:4> * <var:Q> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:U0> = <nat:5> /\ <var:u> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Q> /\ <var:u> = <nat:4> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 