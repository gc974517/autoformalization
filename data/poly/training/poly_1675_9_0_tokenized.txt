\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:G0> := <nat:2> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:c> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:c> ; <var:G2> := <var:G2> * <var:c> ; <var:S> := <var:G2> ; <var:S> := <var:S> + <var:G1> ; <var:S> := <var:S> + <var:G0> \end{verbatim} Assuming that $ <var:c> = <var:N> $ before the execution of this list of commands , it follows that $ <var:S> = <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> $ when program executes . \end{theorem} \begin{proof} The flow of logic for our program can be accomplished using standard Hoare reasoning . Focusing on the subsequent line contained in our series of commands , we see the variable assignmet code \verb | <var:G0> := <nat:2> ; | . This takes the condition $ \{ <var:c> = <var:N> \} $ into $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \} $ . Immediately following , we see the environment update statement \verb | <var:G1> := <nat:3> ; | . This advances $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \} $ toward the condition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \} $ . Jumping to the following statement contained in the set of instructions , we have the binding code assigning $ <var:G1> * <var:c> $ to $ <var:G1>$ . This code forwards the precondition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \} $ toward $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \} $ . This is rigorously given with the assignment inference rule found in typical Hoare logic . Stepping forward , we see the variable binding code \verb | <var:G2> := <nat:4> ; | . This advances $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \} $ into the condition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> \} $ . This is known to be sound by the assignment rule found in standard Hoare reasoning . Moving forward to the next step , we see the variable assignmet statement letting $ <var:G2> * <var:c> $ to $ <var:G2>$ . This code takes the condition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> \} $ as the condition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> * <var:N> \} $ . This is shown to be logically sound by the assignment inference rule of typical Hoare techniques . Paying attention to the following line contained in the set of commands , we see the environment update statement \verb | <var:G2> := <var:G2> * <var:c> ; | . This command advances $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> * <var:N> \} $ as $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> * <var:N> ^ <nat:2> \} $ . This is known to be sound using the assignment rule given in standard Hoare logic . Moving forward to the next step , the binding statement \verb | <var:S> := <var:G2> ; | . This advances the precondition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:G2> = <nat:4> * <var:N> ^ <nat:2> \} $ to $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:S> = <nat:4> * <var:N> ^ <nat:2> \} $ . This is sound with the assignment rule found in typical Hoare techniques . Observing the subsequent command found in our set of instructions , we have the environment update statement \verb | <var:S> := <var:S> + <var:G1> ; | . This code forwards $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> * <var:N> \land <var:S> = <nat:4> * <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} $ . Stepping through , we have the variable update statement giving $ <var:S> + <var:G0$ toward $ <var:S>$ . This transfers $ \{ <var:c> = <var:N> \land <var:G0> = <nat:2> \land <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} $ as the postcondition $ \{ <var:c> = <var:N> \land <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} $ . This is rigorously given by the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:c> = <var:N> }} <var:G0> := <nat:2> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:c> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:c> ; <var:G2> := <var:G2> * <var:c> ; <var:S> := <var:G2> ; <var:S> := <var:S> + <var:G1> ; <var:S> := <var:S> + <var:G0> {{ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:N> /\ <var:G2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:N> /\ <var:G2> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:N> /\ <var:G2> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:N> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:G0> = <nat:2> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:S> = <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 