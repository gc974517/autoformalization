\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:9> ; <var:o> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given every positive integer coefficients $ <var:t> $ ) $ <var:u> = <var:t> $ ahead of executing our program it must be that we see $ <var:o> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be done using Hoare techniques . Moving forward , we see the variable assignmet line giving $ <nat:9> $ as $ <var:D0>$ . This advances $ \{ <var:u> = <var:t> \} $ as the condition $ \{ <var:u> = <var:t> \land <var:D0> = <nat:9> \} $ . This is ensured with the assignment inference rule from usual Hoare techniques . Going to the next step , we have the variable update code \verb | <var:o> := <var:D0> | . This takes the precondition $ \{ <var:u> = <var:t> \land <var:D0> = <nat:9> \} $ toward the condition $ \{ <var:u> = <var:t> \land <var:o> = <nat:9> \} $ . This is deduced using the assignment law from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:9> ; <var:o> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:u> = <var:t> }} <def:poly> {{ <var:o> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:t> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:t> /\ <var:o> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 