\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:9> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:J> ; <var:Z> := <var:p1> ; <var:Z> := <var:Z> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:J> = <var:P> $ letting $ <var:P> $ before evaluating our list of instructions , it must be that $ <var:Z> = <nat:8> \times <var:P> + <nat:9> $ once set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:P> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:J> = <var:P> \land <var:p0> = <nat:9> \} \\ <var:p1> := <nat:8> ; \\ \{ <var:J> = <var:P> \land <var:p0> = <nat:9> \land <var:p1> = <nat:8> \} \\ <var:p1> := <var:p1> * <var:J> ; \\ \{ <var:J> = <var:P> \land <var:p0> = <nat:9> \land <var:p1> = <nat:8> \times <var:P> \} \\ <var:Z> := <var:p1> ; \\ \{ <var:J> = <var:P> \land <var:p0> = <nat:9> \land <var:Z> = <nat:8> \times <var:P> \} \\ <var:Z> := <var:Z> + <var:p0> \\ \{ <var:J> = <var:P> \land <var:Z> = <nat:8> \times <var:P> + <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:9> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:J> ; <var:Z> := <var:p1> ; <var:Z> := <var:Z> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:J> = <var:P> }} <def:poly> {{ <var:Z> = <nat:8> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:P> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:P> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:P> /\ <var:p0> = <nat:9> /\ <var:p1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:P> /\ <var:p0> = <nat:9> /\ <var:Z> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:P> /\ <var:Z> = <nat:8> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 