\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:4> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:i> ; <var:q2> := <var:q2> * <var:i> ; <var:q3> := <nat:2> ; <var:q3> := <var:q3> * <var:i> ; <var:q3> := <var:q3> * <var:i> ; <var:q3> := <var:q3> * <var:i> ; <var:m> := <var:q3> ; <var:m> := <var:m> + <var:q2> ; <var:m> := <var:m> + <var:q0> \end{verbatim} Assume it to hold that $ <var:i> = <var:c> $ before executing this set of commands , then $ <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> $ after program finishes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning returns : \begin{eqnarray} \{ <var:i> = <var:c> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \} \\ <var:q2> := <nat:3> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> \} \\ <var:q2> := <var:q2> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> \} \\ <var:q2> := <var:q2> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \} \\ <var:q3> := <nat:2> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \land <var:q3> = <nat:2> \} \end{eqnarray} Furthering interpreting our set of instructions produces : \begin{eqnarray} <var:q3> := <var:q3> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \land <var:q3> = <nat:2> * <var:c> \} \\ <var:q3> := <var:q3> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \land <var:q3> = <nat:2> * <var:c> ^ <nat:2> \} \\ <var:q3> := <var:q3> * <var:i> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \land <var:q3> = <nat:2> * <var:c> ^ <nat:3> \} \\ <var:m> := <var:q3> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:q2> = <nat:3> * <var:c> ^ <nat:2> \land <var:m> = <nat:2> * <var:c> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:q2> ; \\ \{ <var:i> = <var:c> \land <var:q0> = <nat:4> \land <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:q0> \\ \{ <var:i> = <var:c> \land <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> \} \end{eqnarray} Hence , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:i> = <var:c> }} <var:q0> := <nat:4> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:i> ; <var:q2> := <var:q2> * <var:i> ; <var:q3> := <nat:2> ; <var:q3> := <var:q3> * <var:i> ; <var:q3> := <var:q3> * <var:i> ; <var:q3> := <var:q3> * <var:i> ; <var:m> := <var:q3> ; <var:m> := <var:m> + <var:q2> ; <var:m> := <var:m> + <var:q0> {{ <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:q3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:q2> = <nat:3> * <var:c> ^ <nat:2> /\ <var:m> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:q0> = <nat:4> /\ <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:c> /\ <var:m> = <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 