\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:5> ; <var:B1> := <var:B1> * <var:m> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:m> ; <var:B2> := <var:B2> * <var:m> ; <var:O> := <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> \end{verbatim} Allow for integers $ <var:n> $ that $ <var:m> = <var:n> $ ahead of interpreting this list of instructions , it must be that $ <var:O> = <nat:7> \times <var:n> ^ <nat:2> + <nat:5> \times <var:n> + <nat:4> $ when list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be shown by Hoare techniques . Jumping to the subsequent steps in the list of commands , we see \begin{eqnarray} \{ <var:m> = <var:n> \} \, <var:B0> := <nat:4> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \} \, <var:B1> := <nat:5> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \} \, <var:B1> := <var:B1> * <var:m> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \} \, <var:B2> := <nat:7> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \land <var:B2> = <nat:7> \} \end{eqnarray} Moving on , we see \begin{eqnarray} \{ <var:m> = <var:n> \} \, <var:B0> := <nat:4> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \} \, <var:B1> := <nat:5> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \} \, <var:B1> := <var:B1> * <var:m> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \} \, <var:B2> := <nat:7> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \land <var:B2> = <nat:7> \} \\ \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \land <var:B2> = <nat:7> \} \, <var:B2> := <var:B2> * <var:m> \, \{ <var:m> = <var:n> \land <var:B0> = <nat:4> \land <var:B1> = <nat:5> \cdot <var:n> \land <var:B2> = <nat:7> \cdot <var:n> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <var:B0> := <nat:4> ; <var:B1> := <nat:5> ; <var:B1> := <var:B1> * <var:m> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:m> ; <var:B2> := <var:B2> * <var:m> ; <var:O> := <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> {{ <var:O> = <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> * <var:n> /\ <var:B2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> * <var:n> /\ <var:B2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> * <var:n> /\ <var:B2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:5> * <var:n> /\ <var:O> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:B0> = <nat:4> /\ <var:O> = <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:O> = <nat:7> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 