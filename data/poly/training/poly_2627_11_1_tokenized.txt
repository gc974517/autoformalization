\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:l> ; <var:S2> := <var:S1> * <var:l> ; <var:S3> := <var:S2> * <var:l> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:4> ; <var:S3> := <var:S3> * <nat:3> ; <var:n> := <var:S3> <var:n> := <var:n> + <var:S2> <var:n> := <var:n> + <var:S1> <var:n> := <var:n> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:l> = <var:j> $ prior to the execution of the set of commands it holds that we see $ <var:n> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:2> $ when code segment finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:j> \} \\ <var:S1> := <var:l> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <var:j> \} \\ <var:S2> := <var:S1> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:l> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S3> = <var:j> ^ <nat:3> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S3> = <var:j> ^ <nat:3> \land <var:S0> = <nat:2> \} \end{eqnarray} Continuing running the list of commands yields : \begin{eqnarray} <var:S1> := <var:S1> * <nat:2> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <nat:2> \times <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S3> = <var:j> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ <var:S2> := <var:S2> * <nat:4> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <nat:2> \times <var:j> \land <var:S2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:S3> = <var:j> ^ <nat:3> \land <var:S0> = <nat:2> \} \\ <var:S3> := <var:S3> * <nat:3> ; \\ \{ <var:l> = <var:j> \land <var:S1> = <nat:2> \times <var:j> \land <var:S2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:S3> = <nat:3> \times <var:j> ^ <nat:3> \land <var:S0> = <nat:2> \} \end{eqnarray} Furthering running our series of instructions produces : \begin{eqnarray} <var:n> := <var:S3> \\ \{ <var:l> = <var:j> \land <var:S1> = <nat:2> \times <var:j> \land <var:S2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:n> = <nat:3> \times <var:j> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:S2> \\ \{ <var:l> = <var:j> \land <var:S1> = <nat:2> \times <var:j> \land <var:S0> = <nat:2> \land <var:n> = <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:S1> \\ \{ <var:l> = <var:j> \land <var:S0> = <nat:2> \land <var:n> = <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> \} \\ <var:n> := <var:n> + <var:S0> \\ \{ <var:l> = <var:j> \land <var:n> = <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:l> ; <var:S2> := <var:S1> * <var:l> ; <var:S3> := <var:S2> * <var:l> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:2> ; <var:S2> := <var:S2> * <nat:4> ; <var:S3> := <var:S3> * <nat:3> ; <var:n> := <var:S3> <var:n> := <var:n> + <var:S2> <var:n> := <var:n> + <var:S1> <var:n> := <var:n> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:l> = <var:j> }} <def:poly> {{ <var:n> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <var:j> /\ <var:S2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <var:j> /\ <var:S2> = <var:j> ^ <nat:2> /\ <var:S3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <var:j> /\ <var:S2> = <var:j> ^ <nat:2> /\ <var:S3> = <var:j> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <nat:2> * <var:j> /\ <var:S2> = <var:j> ^ <nat:2> /\ <var:S3> = <var:j> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <nat:2> * <var:j> /\ <var:S2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:S3> = <var:j> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <nat:2> * <var:j> /\ <var:S2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <nat:2> * <var:j> /\ <var:S2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:S0> = <nat:2> /\ <var:n> = <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S1> = <nat:2> * <var:j> /\ <var:S0> = <nat:2> /\ <var:n> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:S0> = <nat:2> /\ <var:n> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:n> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 