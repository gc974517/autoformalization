\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:v> ; <var:e> := <var:e> * <var:v> ; <var:e> := <nat:1> + <var:e> * <var:v> ; <var:e> := <var:e> * <var:v> ; <var:e> := <nat:1> + <var:e> * <var:v> ; <var:e> := <nat:3> + <var:e> * <var:v> ; <var:e> := <nat:2> + <var:e> * <var:v> ; <var:e> := <nat:3> + <var:e> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Given , for some positive coefficients $ <var:h> $ , that $ <var:v> = <var:h> $ ahead of the evaluation of the list of commands , it holds that we see $ <var:e> = <nat:4> \times <var:h> ^ <nat:8> + <nat:3> \times <var:h> ^ <nat:7> + <nat:1> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this segment of code is demonstrated by standard Hoare reasoning . Taking another step toward the next lines seen in our series of commands , we see \begin{verbatim} { <var:v> = <var:h> } <var:e> := <nat:4> { <var:v> = <var:h> \land <var:e> = <nat:4> } { <var:v> = <var:h> \land <var:e> = <nat:4> } <var:e> := <nat:3> + <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> + <nat:3> } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> + <nat:3> } <var:e> := <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + } <var:e> := <nat:1> + <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:1> } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:1> } <var:e> := <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> + } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> + } <var:e> := <nat:1> + <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:5> + <nat:3> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:2> + <nat:1> } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:5> + <nat:3> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:2> + <nat:1> } <var:e> := <nat:3> + <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:6> + <nat:3> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> + <nat:3> } { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:6> + <nat:3> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> + <nat:3> } <var:e> := <nat:2> + <var:e> * <var:v> { <var:v> = <var:h> \land <var:e> = <nat:4> \times <var:h> ^ <nat:7> + <nat:3> \times <var:h> ^ <nat:6> + <nat:1> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:2> } \end{verbatim} Taking another step toward the following bit of code seen in our series of instructions , we have \begin{verbatim} { <var:v> = <var:h> } <var:e> := <nat:4> { <var:v> = <var:h> \land <var:e> = <nat:4> } \end{verbatim} This is shown with the environment update scheme obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:v> ; <var:e> := <var:e> * <var:v> ; <var:e> := <nat:1> + <var:e> * <var:v> ; <var:e> := <var:e> * <var:v> ; <var:e> := <nat:1> + <var:e> * <var:v> ; <var:e> := <nat:3> + <var:e> * <var:v> ; <var:e> := <nat:2> + <var:e> * <var:v> ; <var:e> := <nat:3> + <var:e> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:v> = <var:h> }} <def:poly> {{ <var:e> = <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:e> = <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 