\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:m0> := <nat:9> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:r> ; <var:D> := <var:m1> ; <var:D> := <var:D> + <var:m0> \end{verbatim} Allowing that $ <var:r> = <var:K> $ before the execution of the series of commands , it follows that we have $ <var:D> = <nat:5> * <var:K> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be shown using usual Hoare logic . Going to the next step , we see the assignment command defining $ <nat:9> $ to $ <var:m0>$ . This forwards the condition $ \{ <var:r> = <var:K> \} $ to $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \} $ . Advancing , we see the binding command defining $ <nat:5> $ to $ <var:m1>$ . This line redefines $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \} $ as the postcondition $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:m1> = <nat:5> \} $ . This is ensured by the assignment rule from Hoare reasoning . Stepping through , we see the variable assignmet code \verb | <var:m1> := <var:m1> * <var:r> ; | . This advances the precondition $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:m1> = <nat:5> \} $ into the postcondition $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:m1> = <nat:5> \cdot <var:K> \} $ . Advancing on , we have the binding line \verb | <var:D> := <var:m1> ; | . This code moves the precondition $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:m1> = <nat:5> \cdot <var:K> \} $ as $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:D> = <nat:5> \cdot <var:K> \} $ . Further , we see the assignment code \verb | <var:D> := <var:D> + <var:m0> | . This command transfers the precondition $ \{ <var:r> = <var:K> \land <var:m0> = <nat:9> \land <var:D> = <nat:5> \cdot <var:K> \} $ into $ \{ <var:r> = <var:K> \land <var:D> = <nat:5> \cdot <var:K> + <nat:9> \} $ . This is shown with the assignment scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:r> = <var:K> }} <var:m0> := <nat:9> ; <var:m1> := <nat:5> ; <var:m1> := <var:m1> * <var:r> ; <var:D> := <var:m1> ; <var:D> := <var:D> + <var:m0> {{ <var:D> = <nat:5> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:m0> = <nat:9> /\ <var:m1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:m0> = <nat:9> /\ <var:D> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:K> /\ <var:D> = <nat:5> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 