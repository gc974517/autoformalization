\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:x> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:2> ; <var:r> := <var:H1> <var:r> := <var:r> + <var:H0> \end{verbatim} Allow it to be that $ <var:x> = <var:W> $ ( given every natural coefficients $ <var:W> $ ) ahead of the evaluation of our segment of code it follows that we see $ <var:r> = <nat:2> \times <var:W> + <nat:4> $ when list of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be accomplished by the below decorated program . \begin{eqnarray} \{ <var:x> = <var:W> \} \\ <var:H1> := <var:x> ; \\ \{ <var:x> = <var:W> \land <var:H1> = <var:W> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:x> = <var:W> \land <var:H1> = <var:W> \land <var:H0> = <nat:4> \} \\ <var:H1> := <var:H1> * <nat:2> ; \\ \{ <var:x> = <var:W> \land <var:H1> = <nat:2> \times <var:W> \land <var:H0> = <nat:4> \} \\ <var:r> := <var:H1> \\ \{ <var:x> = <var:W> \land <var:H0> = <nat:4> \land <var:r> = <nat:2> \times <var:W> \} \\ <var:r> := <var:r> + <var:H0> \\ \{ <var:x> = <var:W> \land <var:r> = <nat:2> \times <var:W> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:x> = <var:W> }} <var:H1> := <var:x> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:2> ; <var:r> := <var:H1> <var:r> := <var:r> + <var:H0> {{ <var:r> = <nat:2> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:H1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:H1> = <var:W> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:H1> = <nat:2> * <var:W> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:H0> = <nat:4> /\ <var:r> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:W> /\ <var:r> = <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 