\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:3> ; <var:G> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Given that $ <var:T> = <var:E> $ before running our set of instructions , it follows that we have $ <var:G> = <nat:3> $ when list of commands is done executing . \end{theorem} \begin{proof} The method of proof for our set of commands is accomplished with typical Hoare reasoning . Honing in on the upcoming piece of code in our program , we see \verb | { <var:T> = <var:E> } <var:s0> := <nat:3> { <var:T> = <var:E> \land <var:s0> = <nat:3> } | . Looking at the next step seen in the set of commands , \verb | { <var:T> = <var:E> } <var:s0> := <nat:3> { <var:T> = <var:E> \land <var:s0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:G> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:T> = <var:E> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:E> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 