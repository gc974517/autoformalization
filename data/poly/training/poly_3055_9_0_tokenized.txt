\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:o> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:o> ; <var:e2> := <var:e2> * <var:o> ; <var:D> := <var:e2> ; <var:D> := <var:D> + <var:e1> ; <var:D> := <var:D> + <var:e0> \end{verbatim} Assume it to be that $ <var:o> = <var:v> $ ahead of the execution of the list of instructions it must be that we have $ <var:D> = <nat:5> \times <var:v> ^ <nat:2> + <nat:6> \times <var:v> + <nat:9> $ once program has finished . \end{theorem} \begin{proof} The proof of this program is evident with standard Hoare reasoning . Advancing to the following step in our program , we see the variable assignmet statement letting $ <nat:9> $ into $ <var:e0>$ . This transfers the precondition $ \{ <var:o> = <var:v> \} $ toward the condition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \} $ . Shifting focus toward the upcoming line of code found in our segment of code , we see the binding statement defining $ <nat:6> $ into $ <var:e1>$ . This command redefines the precondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \} $ into $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \} $ . Moving forward to the next step , we see the variable assignmet line \verb | <var:e1> := <var:e1> * <var:o> ; | . This line takes the precondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \} $ into the condition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \} $ . Honing in on the upcoming statement in our list of instructions , we see the variable assignmet command \verb | <var:e2> := <nat:5> ; | . This redefines the precondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \} $ as the postcondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \} $ . Honing in on the following line contained in our series of commands , the code defining $ <var:e2> * <var:o> $ into $ <var:e2>$ . This redefines the condition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \} $ toward the postcondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \cdot <var:v> \} $ . Jumping to the following piece of code contained in our segment of code , the variable binding code \verb | <var:e2> := <var:e2> * <var:o> ; | . This takes $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \cdot <var:v> \} $ toward $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ . This is ensured through the assignment inference rule found in Hoare reasoning . Taking a look at the following bit of code found in the series of instructions , the variable binding command \verb | <var:D> := <var:e2> ; | . This statement redefines the precondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:e2> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:D> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ . Advancing on , the environment update line \verb | <var:D> := <var:D> + <var:e1> ; | . This takes the precondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:e1> = <nat:6> \cdot <var:v> \land <var:D> = <nat:5> \cdot <var:v> ^ <nat:2> \} $ as the postcondition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:D> = <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> \} $ . This is shown using the assignment inference rule found in usual Hoare logic . Moving forward to the subsequent bit of code found in our list of instructions , the variable update command defining $ <var:D> + <var:e0$ into $ <var:D>$ . This advances the condition $ \{ <var:o> = <var:v> \land <var:e0> = <nat:9> \land <var:D> = <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> \} $ as $ \{ <var:o> = <var:v> \land <var:D> = <nat:5> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:o> = <var:v> }} <var:e0> := <nat:9> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:o> ; <var:e2> := <nat:5> ; <var:e2> := <var:e2> * <var:o> ; <var:e2> := <var:e2> * <var:o> ; <var:D> := <var:e2> ; <var:D> := <var:D> + <var:e1> ; <var:D> := <var:D> + <var:e0> {{ <var:D> = <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> * <var:v> /\ <var:e2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> * <var:v> /\ <var:e2> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> * <var:v> /\ <var:e2> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:6> * <var:v> /\ <var:D> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:e0> = <nat:9> /\ <var:D> = <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:D> = <nat:5> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 