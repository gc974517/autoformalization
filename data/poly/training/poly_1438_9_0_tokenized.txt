\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:X> ; <var:A2> := <nat:9> ; <var:A2> := <var:A2> * <var:X> ; <var:A2> := <var:A2> * <var:X> ; <var:p> := <var:A2> ; <var:p> := <var:p> + <var:A1> ; <var:p> := <var:p> + <var:A0> \end{verbatim} Assuming $ <var:X> = <var:b> $ prior to interpreting this segment of code it must be that $ <var:p> = <nat:9> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our code is clear by typical Hoare reasoning . Moving forward to the subsequent steps in the list of instructions , we see \verb | { <var:X> = <var:b> } <var:A0> := <nat:4> { <var:X> = <var:b> \land <var:A0> = <nat:4> } | , \verb | { <var:X> = <var:b> \land <var:A0> = <nat:4> } <var:A1> := <nat:4> { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> } | , \verb | { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> } <var:A1> := <var:A1> * <var:X> { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> } | , \verb | { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> } <var:A2> := <nat:9> { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> \land <var:A2> = <nat:9> } | , \verb | { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> \land <var:A2> = <nat:9> } <var:A2> := <var:A2> * <var:X> { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> \land <var:A2> = <nat:9> * <var:b> } | and \verb | { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> \land <var:A2> = <nat:9> * <var:b> } <var:A2> := <var:A2> * <var:X> { <var:X> = <var:b> \land <var:A0> = <nat:4> \land <var:A1> = <nat:4> * <var:b> \land <var:A2> = <nat:9> * <var:b> ^ <nat:2> } | . This is rigorously given using the binding inference rule obtained from usual Hoare reasoning . Jumping to the upcoming statement in the list of commands , \verb | { <var:X> = <var:b> } <var:A0> := <nat:4> { <var:X> = <var:b> \land <var:A0> = <nat:4> } | . Paying attention to the subsequent step in our list of instructions , \verb | { <var:X> = <var:b> } <var:A0> := <nat:4> { <var:X> = <var:b> \land <var:A0> = <nat:4> } | . This is given using the variable binding rule defined by Hoare logic . Moving forward to the proceeding step seen in the code , we have \verb | { <var:X> = <var:b> } <var:A0> := <nat:4> { <var:X> = <var:b> \land <var:A0> = <nat:4> } | . This is shown to be logically sound by the rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:X> = <var:b> }} <var:A0> := <nat:4> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:X> ; <var:A2> := <nat:9> ; <var:A2> := <var:A2> * <var:X> ; <var:A2> := <var:A2> * <var:X> ; <var:p> := <var:A2> ; <var:p> := <var:p> + <var:A1> ; <var:p> := <var:p> + <var:A0> {{ <var:p> = <nat:9> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:b> /\ <var:A2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:b> /\ <var:A2> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:b> /\ <var:A2> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:4> * <var:b> /\ <var:p> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:A0> = <nat:4> /\ <var:p> = <nat:9> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:p> = <nat:9> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 