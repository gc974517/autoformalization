\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:7> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:Q> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:Q> ; <var:E2> := <var:E2> * <var:Q> ; <var:x> := <var:E2> ; <var:x> := <var:x> + <var:E1> ; <var:x> := <var:x> + <var:E0> \end{verbatim} Allow it to hold that $ <var:Q> = <var:i> $ prior to the execution of the set of instructions it must be that we have $ <var:x> = <nat:1> \cdot <var:i> ^ <nat:2> + <nat:9> \cdot <var:i> + <nat:7> $ once series of commands is done . \end{theorem} \begin{proof} The argument for the set of commands can be given by the below decorated set of instructions . \begin{eqnarray} \{ <var:Q> = <var:i> \} \\ <var:E0> := <nat:7> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \} \\ <var:E1> := <nat:9> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> \} \\ <var:E1> := <var:E1> * <var:Q> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> * <var:i> \} \\ <var:E2> := <nat:1> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> * <var:i> \land <var:E2> = <nat:1> \} \\ <var:E2> := <var:E2> * <var:Q> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> * <var:i> \land <var:E2> = <nat:1> * <var:i> \} \\ <var:E2> := <var:E2> * <var:Q> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> * <var:i> \land <var:E2> = <nat:1> * <var:i> ^ <nat:2> \} \\ <var:x> := <var:E2> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:E1> = <nat:9> * <var:i> \land <var:x> = <nat:1> * <var:i> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:E1> ; \\ \{ <var:Q> = <var:i> \land <var:E0> = <nat:7> \land <var:x> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> \} \\ <var:x> := <var:x> + <var:E0> \\ \{ <var:Q> = <var:i> \land <var:x> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> \} \end{eqnarray} Applying Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Q> = <var:i> }} <var:E0> := <nat:7> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:Q> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:Q> ; <var:E2> := <var:E2> * <var:Q> ; <var:x> := <var:E2> ; <var:x> := <var:x> + <var:E1> ; <var:x> := <var:x> + <var:E0> {{ <var:x> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> * <var:i> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> * <var:i> /\ <var:E2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> * <var:i> /\ <var:E2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:9> * <var:i> /\ <var:x> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:E0> = <nat:7> /\ <var:x> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:x> = <nat:1> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 