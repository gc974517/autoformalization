\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:2> ; <var:z> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allowing $ <var:c> = <var:t> $ prior to evaluating this list of instructions , then we see $ <var:z> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:t> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:c> = <var:t> \land <var:m0> = <nat:2> \} \\ <var:z> := <var:m0> \\ \{ <var:c> = <var:t> \land <var:z> = <nat:2> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:z> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:c> = <var:t> }} <def:poly> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 