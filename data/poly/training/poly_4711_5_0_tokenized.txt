\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:5> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:x> ; <var:T> := <var:I1> ; <var:T> := <var:T> + <var:I0> \end{verbatim} Given it to hold that $ <var:x> = <var:Q> $ ahead of executing the list of commands , it must be that we see $ <var:T> = <nat:3> * <var:Q> + <nat:5> $ once code segment terminates . \end{theorem} \begin{proof} The method of proof for the list of instructions is shown by usual Hoare logic . Focusing on the proceeding steps seen in the code , \begin{eqnarray} \{ <var:x> = <var:Q> \} \, <var:I0> := <nat:5> \, \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \} \\ \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \} \, <var:I1> := <nat:3> \, \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:I1> = <nat:3> \} \\ \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:I1> = <nat:3> \} \, <var:I1> := <var:I1> * <var:x> \, \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:I1> = <nat:3> \times <var:Q> \} \\ \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:I1> = <nat:3> \times <var:Q> \} \, <var:T> := <var:I1> \, \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:T> = <nat:3> \times <var:Q> \} \\ \{ <var:x> = <var:Q> \land <var:I0> = <nat:5> \land <var:T> = <nat:3> \times <var:Q> \} \, <var:T> := <var:T> + <var:I0\, \{ <var:x> = <var:Q> \land <var:T> = <nat:3> \times <var:Q> + <nat:5> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:x> = <var:Q> }} <var:I0> := <nat:5> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:x> ; <var:T> := <var:I1> ; <var:T> := <var:T> + <var:I0> {{ <var:T> = <nat:3> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:I0> = <nat:5> /\ <var:T> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:T> = <nat:3> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 