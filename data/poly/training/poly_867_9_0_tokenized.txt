\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:9> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:z> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:z> ; <var:R2> := <var:R2> * <var:z> ; <var:T> := <var:R2> ; <var:T> := <var:T> + <var:R1> ; <var:T> := <var:T> + <var:R0> \end{verbatim} Assuming $ <var:z> = <var:P> $ ( given all integers $ <var:P> $ ) prior to the evaluation of our set of instructions it follows that $ <var:T> = <nat:1> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:9> $ once code is done . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions can be accomplished by standard Hoare logic . Looking at the subsequent line of code contained in the list of instructions , we have the assignment line \verb | <var:R0> := <nat:9> ; | . This code takes the condition $ \{ <var:z> = <var:P> \} $ toward the postcondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \} $ . Following , the binding statement \verb | <var:R1> := <nat:9> ; | . This transfers $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \} $ toward the postcondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \} $ . This is known to be sound with the assignment law found in usual Hoare techniques . Focusing on the upcoming line seen in our set of commands , we have the environment update command \verb | <var:R1> := <var:R1> * <var:z> ; | . This redefines the precondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \} $ toward the condition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \} $ . This is ensured with the assignment law in standard Hoare reasoning . Advancing , the variable update command \verb | <var:R2> := <nat:1> ; | . This takes the precondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \} $ into $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \} $ . This is rigorously given using the assignment rule found in usual Hoare techniques . Taking another step toward the proceeding statement in our series of commands , we see the assignment command \verb | <var:R2> := <var:R2> * <var:z> ; | . This takes $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \} $ as the postcondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \cdot <var:P> \} $ . This is shown through the assignment law defined by usual Hoare reasoning . Paying attention to the proceeding bit of code contained in the code segment , the variable assignmet code \verb | <var:R2> := <var:R2> * <var:z> ; | . This command advances $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \cdot <var:P> \} $ into the condition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \cdot <var:P> ^ <nat:2> \} $ . This is sound through the assignment inference rule in usual Hoare techniques . Keeping momentum , we have the variable update statement \verb | <var:T> := <var:R2> ; | . This takes $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:R2> = <nat:1> \cdot <var:P> ^ <nat:2> \} $ toward the condition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:T> = <nat:1> \cdot <var:P> ^ <nat:2> \} $ . This is rigorously given using the assignment law in typical Hoare techniques . Focusing on the proceeding line contained in our code , we have the statement \verb | <var:T> := <var:T> + <var:R1> ; | . This advances the precondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \cdot <var:P> \land <var:T> = <nat:1> \cdot <var:P> ^ <nat:2> \} $ toward the postcondition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:T> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> \} $ . This is known to be sound using the assignment rule obtained from usual Hoare logic . Now , we see the variable binding command giving $ <var:T> + <var:R0$ toward $ <var:T>$ . This line forwards the condition $ \{ <var:z> = <var:P> \land <var:R0> = <nat:9> \land <var:T> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> \} $ toward the condition $ \{ <var:z> = <var:P> \land <var:T> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:9> \cdot <var:P> + <nat:9> \} $ . This is ensured using the assignment law obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:z> = <var:P> }} <var:R0> := <nat:9> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:z> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:z> ; <var:R2> := <var:R2> * <var:z> ; <var:T> := <var:R2> ; <var:T> := <var:T> + <var:R1> ; <var:T> := <var:T> + <var:R0> {{ <var:T> = <nat:1> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:P> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:P> /\ <var:R2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:P> /\ <var:R2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:P> /\ <var:T> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:R0> = <nat:9> /\ <var:T> = <nat:1> * <var:P> ^ <nat:2> + <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:T> = <nat:1> * <var:P> ^ <nat:2> + <nat:9> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 