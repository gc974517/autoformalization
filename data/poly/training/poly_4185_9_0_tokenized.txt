\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:2> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:X> := <var:n2> ; <var:X> := <var:X> + <var:n1> ; <var:X> := <var:X> + <var:n0> \end{verbatim} Assume that $ <var:u> = <var:J> $ before running our segment of code , it holds that we have $ <var:X> = <nat:5> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:u> = <var:J> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \} \\ <var:n1> := <nat:2> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> \} \\ <var:n1> := <var:n1> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:J> \} \\ <var:n2> := <nat:5> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:J> \land <var:n2> = <nat:5> \} \\ <var:n2> := <var:n2> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:J> \land <var:n2> = <nat:5> * <var:J> \} \\ <var:n2> := <var:n2> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:J> \land <var:n2> = <nat:5> * <var:J> ^ <nat:2> \} \\ <var:X> := <var:n2> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:n1> = <nat:2> * <var:J> \land <var:X> = <nat:5> * <var:J> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:n1> ; \\ \{ <var:u> = <var:J> \land <var:n0> = <nat:2> \land <var:X> = <nat:5> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} \\ <var:X> := <var:X> + <var:n0> \\ \{ <var:u> = <var:J> \land <var:X> = <nat:5> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> \} \end{eqnarray} Utilizing Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:u> = <var:J> }} <var:n0> := <nat:2> ; <var:n1> := <nat:2> ; <var:n1> := <var:n1> * <var:u> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:u> ; <var:n2> := <var:n2> * <var:u> ; <var:X> := <var:n2> ; <var:X> := <var:X> + <var:n1> ; <var:X> := <var:X> + <var:n0> {{ <var:X> = <nat:5> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:J> /\ <var:n2> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:n1> = <nat:2> * <var:J> /\ <var:X> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:n0> = <nat:2> /\ <var:X> = <nat:5> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:X> = <nat:5> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 