\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:I> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:N> := <var:J1> <var:N> := <var:N> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:I> = <var:W> $ ahead of running this segment of code it follows that $ <var:N> = <nat:2> * <var:W> + <nat:1> $ once segment of code is done executing . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done with usual Hoare reasoning . Moving forward to the next step , we have \begin{eqnarray} \{ <var:I> = <var:W> \} \, <var:J1> := <var:I> \, \{ <var:I> = <var:W> \land <var:J1> = <var:W> \} \\ \{ <var:I> = <var:W> \land <var:J1> = <var:W> \} \, <var:J0> := <nat:1> \, \{ <var:I> = <var:W> \land <var:J1> = <var:W> \land <var:J0> = <nat:1> \} \\ \{ <var:I> = <var:W> \land <var:J1> = <var:W> \land <var:J0> = <nat:1> \} \, <var:J1> := <var:J1> * <nat:2> \, \{ <var:I> = <var:W> \land <var:J1> = <nat:2> \cdot <var:W> \land <var:J0> = <nat:1> \} \end{eqnarray} Following , we have \begin{eqnarray} \{ <var:I> = <var:W> \} \, <var:J1> := <var:I> \, \{ <var:I> = <var:W> \land <var:J1> = <var:W> \} \\ \{ <var:I> = <var:W> \land <var:J1> = <var:W> \} \, <var:J0> := <nat:1> \, \{ <var:I> = <var:W> \land <var:J1> = <var:W> \land <var:J0> = <nat:1> \} \end{eqnarray} This is shown through the variable update scheme in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:I> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:N> := <var:J1> <var:N> := <var:N> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <def:poly> {{ <var:N> = <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:J1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:J1> = <var:W> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:J1> = <nat:2> * <var:W> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:J0> = <nat:1> /\ <var:N> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:N> = <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 