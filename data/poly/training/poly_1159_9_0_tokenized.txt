\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:9> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:e> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:e> ; <var:v2> := <var:v2> * <var:e> ; <var:r> := <var:v2> ; <var:r> := <var:r> + <var:v1> ; <var:r> := <var:r> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given all positive integers $ <var:G> $ , $ <var:e> = <var:G> $ prior to the execution of the series of instructions it must be that we have $ <var:r> = <nat:6> \cdot <var:G> ^ <nat:2> + <nat:8> \cdot <var:G> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be seen using this decorated code . \begin{eqnarray} \{ <var:e> = <var:G> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \} \\ <var:v1> := <nat:8> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \} \\ <var:v1> := <var:v1> * <var:e> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \cdot <var:G> \} \\ <var:v2> := <nat:6> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \cdot <var:G> \land <var:v2> = <nat:6> \} \\ <var:v2> := <var:v2> * <var:e> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \cdot <var:G> \land <var:v2> = <nat:6> \cdot <var:G> \} \\ <var:v2> := <var:v2> * <var:e> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \cdot <var:G> \land <var:v2> = <nat:6> \cdot <var:G> ^ <nat:2> \} \\ <var:r> := <var:v2> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:v1> = <nat:8> \cdot <var:G> \land <var:r> = <nat:6> \cdot <var:G> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:v1> ; \\ \{ <var:e> = <var:G> \land <var:v0> = <nat:9> \land <var:r> = <nat:6> \cdot <var:G> ^ <nat:2> + <nat:8> \cdot <var:G> \} \\ <var:r> := <var:r> + <var:v0> \\ \{ <var:e> = <var:G> \land <var:r> = <nat:6> \cdot <var:G> ^ <nat:2> + <nat:8> \cdot <var:G> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:9> ; <var:v1> := <nat:8> ; <var:v1> := <var:v1> * <var:e> ; <var:v2> := <nat:6> ; <var:v2> := <var:v2> * <var:e> ; <var:v2> := <var:v2> * <var:e> ; <var:r> := <var:v2> ; <var:r> := <var:r> + <var:v1> ; <var:r> := <var:r> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:e> = <var:G> }} <def:poly> {{ <var:r> = <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> * <var:G> /\ <var:v2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> * <var:G> /\ <var:v2> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> * <var:G> /\ <var:v2> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:8> * <var:G> /\ <var:r> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:v0> = <nat:9> /\ <var:r> = <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:G> /\ <var:r> = <nat:6> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 