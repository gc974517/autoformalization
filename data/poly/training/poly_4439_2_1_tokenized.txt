\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:5> ; <var:r> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Given ( letting positive integer coefficients $ <var:h> $ ) that $ <var:C> = <var:h> $ prior to evaluating this series of commands , then $ <var:r> = <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:h> \} \\ <var:q0> := <nat:5> ; \\ \{ <var:C> = <var:h> \land <var:q0> = <nat:5> \} \\ <var:r> := <var:q0> \\ \{ <var:C> = <var:h> \land <var:r> = <nat:5> \} \end{eqnarray} As a result , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:r> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:C> = <var:h> }} <def:poly> {{ <var:r> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:h> /\ <var:r> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 