\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:c> := <nat:1> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <nat:1> + <var:c> * <var:T> ; <var:c> := <nat:1> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:2> + <var:c> * <var:T> \end{verbatim} Given , for any natural numbers $ <var:Z> $ , it to be that $ <var:T> = <var:Z> $ ahead of running our set of instructions , it must be that $ <var:c> = <nat:1> \cdot <var:Z> ^ <nat:10> + <nat:3> \cdot <var:Z> ^ <nat:9> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:1> \cdot <var:Z> ^ <nat:6> + <nat:1> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the list of instructions is shown with standard Hoare techniques . Now , we see \verb | { <var:T> = <var:Z> } <var:c> := <nat:1> { <var:T> = <var:Z> \land <var:c> = <nat:1> } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> } <var:c> := <nat:3> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> + <nat:3> } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> + <nat:3> } <var:c> := <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + } <var:c> := <nat:3> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> } <var:c> := <nat:1> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> + <nat:1> } | and \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> + <nat:1> } <var:c> := <nat:1> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:1> } | . Advancing , \verb | { <var:T> = <var:Z> } <var:c> := <nat:1> { <var:T> = <var:Z> \land <var:c> = <nat:1> } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> } <var:c> := <nat:3> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> + <nat:3> } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> + <nat:3> } <var:c> := <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + } | , \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + } <var:c> := <nat:3> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> } | and \verb | { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> } <var:c> := <nat:1> + <var:c> * <var:T> { <var:T> = <var:Z> \land <var:c> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> + <nat:1> } | . This is given with the binding rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:c> := <nat:1> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <nat:1> + <var:c> * <var:T> ; <var:c> := <nat:1> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:3> + <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <var:c> * <var:T> ; <var:c> := <nat:2> + <var:c> * <var:T> {{ <var:c> = <nat:1> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:c> = <nat:1> * <var:Z> ^ <nat:10> + <nat:3> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 