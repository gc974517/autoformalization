\begin{document} \begin{theorem} Define a segment of code as follows \begin{verbatim} <var:v0> := <nat:4> ; <var:f> := <var:v0> \end{verbatim} Allow it to be that $ <var:S> = <var:C> $ prior to executing the set of commands , it holds that we have $ <var:f> = <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:S> = <var:C> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:S> = <var:C> \land <var:v0> = <nat:4> \} \\ <var:f> := <var:v0> \\ \{ <var:S> = <var:C> \land <var:f> = <nat:4> \} \end{eqnarray} Given the above , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <var:v0> := <nat:4> ; <var:f> := <var:v0> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 