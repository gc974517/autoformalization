\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:F> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> \end{verbatim} Given $ <var:F> = <var:v> $ prior to interpreting the set of instructions it must be that $ <var:H> = <nat:3> * <var:v> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions can be shown with Hoare logic . Next , we see \begin{eqnarray} \{ <var:F> = <var:v> \} \, <var:c0> := <nat:9> \, \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \} \\ \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \} \, <var:c1> := <nat:3> \, \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \land <var:c1> = <nat:3> \} \end{eqnarray} Moving on to the next lines of codecontained in our program , \begin{eqnarray} \{ <var:F> = <var:v> \} \, <var:c0> := <nat:9> \, \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \} \\ \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \} \, <var:c1> := <nat:3> \, \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \land <var:c1> = <nat:3> \} \end{eqnarray} This is given through the binding inference rule defined in standard Hoare logic . Focusing on the upcoming step contained in our program , we see \begin{eqnarray} \{ <var:F> = <var:v> \} \, <var:c0> := <nat:9> \, \{ <var:F> = <var:v> \land <var:c0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <var:c0> := <nat:9> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:F> ; <var:H> := <var:c1> ; <var:H> := <var:H> + <var:c0> {{ <var:H> = <nat:3> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:c0> = <nat:9> /\ <var:H> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:H> = <nat:3> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 