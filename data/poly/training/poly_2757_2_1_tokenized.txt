\begin{document} \begin{theorem} We define a code segment : \begin{verbatim} <var:t0> := <nat:4> ; <var:J> := <var:t0> \end{verbatim} Allow that we have $ <var:q> = <var:v> $ , for some $ <var:v> \in \mathbb{N} $ , ahead of interpreting our set of instructions then we have $ <var:J> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this code can be demonstrated with typical Hoare reasoning . Stepping through , the statement \verb | <var:t0> := <nat:4> ; | . This command transfers the precondition $ \{ <var:q> = <var:v> \} $ into $ \{ <var:q> = <var:v> \land <var:t0> = <nat:4> \} $ . Observing the upcoming statement seen in our list of instructions , we have the binding code \verb | <var:J> := <var:t0> | . This transfers $ \{ <var:q> = <var:v> \land <var:t0> = <nat:4> \} $ to the postcondition $ \{ <var:q> = <var:v> \land <var:J> = <nat:4> \} $ . This is rigorously given through the assignment rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:q> = <var:v> }} <var:t0> := <nat:4> ; <var:J> := <var:t0> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 