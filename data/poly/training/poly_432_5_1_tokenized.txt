\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:p> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:7> ; <var:I> := <var:s1> <var:I> := <var:I> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume given some $ <var:i> \in \mathbb{Z}^+ $ it to be that $ <var:p> = <var:i> $ before running the list of commands , it follows that we have $ <var:I> = <nat:7> * <var:i> + <nat:7> $ when program has finished . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be demonstrated through typical Hoare logic . Taking another step toward the proceeding statement seen in the segment of code , the binding line \verb | <var:s1> := <var:p> ; | . This forwards $ \{ <var:p> = <var:i> \} $ as the condition $ \{ <var:p> = <var:i> \land <var:s1> = <var:i> \} $ . Focusing on the upcoming command in our code segment , the variable assignmet statement giving $ <nat:7> $ to $ <var:s0>$ . This statement forwards $ \{ <var:p> = <var:i> \land <var:s1> = <var:i> \} $ as the postcondition $ \{ <var:p> = <var:i> \land <var:s1> = <var:i> \land <var:s0> = <nat:7> \} $ . Shifting focus toward the following command seen in our code , the line \verb | <var:s1> := <var:s1> * <nat:7> ; | . This line moves $ \{ <var:p> = <var:i> \land <var:s1> = <var:i> \land <var:s0> = <nat:7> \} $ to the condition $ \{ <var:p> = <var:i> \land <var:s1> = <nat:7> \cdot <var:i> \land <var:s0> = <nat:7> \} $ . This is rigorously given using the assignment rule of usual Hoare reasoning . After , we have the binding code assigning $ <var:s1$ as $ <var:I>$ . This moves the condition $ \{ <var:p> = <var:i> \land <var:s1> = <nat:7> \cdot <var:i> \land <var:s0> = <nat:7> \} $ toward the condition $ \{ <var:p> = <var:i> \land <var:s0> = <nat:7> \land <var:I> = <nat:7> \cdot <var:i> \} $ . This is shown using the assignment rule of Hoare techniques . Further , we see the command \verb | <var:I> := <var:I> + <var:s0> | . This transfers $ \{ <var:p> = <var:i> \land <var:s0> = <nat:7> \land <var:I> = <nat:7> \cdot <var:i> \} $ toward the condition $ \{ <var:p> = <var:i> \land <var:I> = <nat:7> \cdot <var:i> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s1> := <var:p> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:7> ; <var:I> := <var:s1> <var:I> := <var:I> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:p> = <var:i> }} <def:poly> {{ <var:I> = <nat:7> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:s1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:s1> = <var:i> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:s1> = <nat:7> * <var:i> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:s0> = <nat:7> /\ <var:I> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:I> = <nat:7> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 