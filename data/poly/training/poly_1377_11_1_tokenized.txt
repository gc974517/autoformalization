\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:J1> := <var:b> ; <var:J2> := <var:J1> * <var:b> ; <var:J3> := <var:J2> * <var:b> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:3> ; <var:I> := <var:J3> <var:I> := <var:I> + <var:J2> <var:I> := <var:I> + <var:J1> <var:I> := <var:I> + <var:J0> \end{verbatim} Assuming it to hold that $ <var:b> = <var:x> $ ( with some positive numbers $ <var:x> $ ) prior to executing this list of commands it holds that we see $ <var:I> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> + <nat:8> $ . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:b> = <var:x> \} \\ <var:J1> := <var:b> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <var:x> \} \\ <var:J2> := <var:J1> * <var:b> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:b> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J3> = <var:x> ^ <nat:3> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J3> = <var:x> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J1> := <var:J1> * <nat:6> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <nat:6> * <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J3> = <var:x> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J2> := <var:J2> * <nat:2> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <nat:6> * <var:x> \land <var:J2> = <nat:2> * <var:x> ^ <nat:2> \land <var:J3> = <var:x> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:J3> := <var:J3> * <nat:3> ; \\ \{ <var:b> = <var:x> \land <var:J1> = <nat:6> * <var:x> \land <var:J2> = <nat:2> * <var:x> ^ <nat:2> \land <var:J3> = <nat:3> * <var:x> ^ <nat:3> \land <var:J0> = <nat:8> \} \\ <var:I> := <var:J3> \\ \{ <var:b> = <var:x> \land <var:J1> = <nat:6> * <var:x> \land <var:J2> = <nat:2> * <var:x> ^ <nat:2> \land <var:J0> = <nat:8> \land <var:I> = <nat:3> * <var:x> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:J2> \\ \{ <var:b> = <var:x> \land <var:J1> = <nat:6> * <var:x> \land <var:J0> = <nat:8> \land <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:J1> \\ \{ <var:b> = <var:x> \land <var:J0> = <nat:8> \land <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> \} \\ <var:I> := <var:I> + <var:J0> \\ \{ <var:b> = <var:x> \land <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> \} \end{eqnarray} Considering the above , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:b> = <var:x> }} <var:J1> := <var:b> ; <var:J2> := <var:J1> * <var:b> ; <var:J3> := <var:J2> * <var:b> ; <var:J0> := <nat:8> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:3> ; <var:I> := <var:J3> <var:I> := <var:I> + <var:J2> <var:I> := <var:I> + <var:J1> <var:I> := <var:I> + <var:J0> {{ <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <var:x> /\ <var:J2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <var:x> /\ <var:J2> = <var:x> ^ <nat:2> /\ <var:J3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <var:x> /\ <var:J2> = <var:x> ^ <nat:2> /\ <var:J3> = <var:x> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <nat:6> * <var:x> /\ <var:J2> = <var:x> ^ <nat:2> /\ <var:J3> = <var:x> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <nat:6> * <var:x> /\ <var:J2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:J3> = <var:x> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <nat:6> * <var:x> /\ <var:J2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:J3> = <nat:3> * <var:x> ^ <nat:3> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <nat:6> * <var:x> /\ <var:J2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:J0> = <nat:8> /\ <var:I> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J1> = <nat:6> * <var:x> /\ <var:J0> = <nat:8> /\ <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:J0> = <nat:8> /\ <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:I> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 