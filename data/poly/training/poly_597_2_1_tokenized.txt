\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:7> ; <var:s> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Allow that $ <var:S> = <var:o> $ , given all positive numbers $ <var:o> $ , before the evaluation of this program , it follows that we have $ <var:s> = <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be accomplished by typical Hoare techniques . Paying attention to the following line found in our list of commands , we have \begin{eqnarray} \{ <var:S> = <var:o> \} \, <var:h0> := <nat:7> \, \{ <var:S> = <var:o> \land <var:h0> = <nat:7> \} \end{eqnarray} This is known to be sound through the variable update law given in usual Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:S> = <var:o> \} \, <var:h0> := <nat:7> \, \{ <var:S> = <var:o> \land <var:h0> = <nat:7> \} \end{eqnarray} This is deduced using the scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:s> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <def:poly> {{ <var:s> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:s> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 