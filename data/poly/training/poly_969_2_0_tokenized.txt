\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:8> ; <var:n> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:B> = <var:u> $ given some $ <var:u> \in \mathbb{N} $ before interpreting our segment of code then we see $ <var:n> = <nat:8> $ once series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:u> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:B> = <var:u> \land <var:K0> = <nat:8> \} \\ <var:n> := <var:K0> \\ \{ <var:B> = <var:u> \land <var:n> = <nat:8> \} \end{eqnarray} Applying Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:8> ; <var:n> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:B> = <var:u> }} <def:poly> {{ <var:n> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:u> /\ <var:n> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 