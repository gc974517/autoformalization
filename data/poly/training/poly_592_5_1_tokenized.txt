\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:J> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:9> ; <var:w> := <var:u1> <var:w> := <var:w> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:J> = <var:b> $ before executing this series of commands it follows that $ <var:w> = <nat:9> \cdot <var:b> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:b> \} \\ <var:u1> := <var:J> ; \\ \{ <var:J> = <var:b> \land <var:u1> = <var:b> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:J> = <var:b> \land <var:u1> = <var:b> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:J> = <var:b> \land <var:u1> = <nat:9> \cdot <var:b> \land <var:u0> = <nat:1> \} \\ <var:w> := <var:u1> \\ \{ <var:J> = <var:b> \land <var:u0> = <nat:1> \land <var:w> = <nat:9> \cdot <var:b> \} \\ <var:w> := <var:w> + <var:u0> \\ \{ <var:J> = <var:b> \land <var:w> = <nat:9> \cdot <var:b> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:J> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:9> ; <var:w> := <var:u1> <var:w> := <var:w> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <def:poly> {{ <var:w> = <nat:9> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:u1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:u1> = <var:b> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:u1> = <nat:9> * <var:b> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:u0> = <nat:1> /\ <var:w> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:w> = <nat:9> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 