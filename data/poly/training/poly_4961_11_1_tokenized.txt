\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:9> ; <var:G> := <var:r3> <var:G> := <var:G> + <var:r2> <var:G> := <var:G> + <var:r1> <var:G> := <var:G> + <var:r0> \end{verbatim} Assuming that we have $ <var:z> = <var:l> $ --- for some positive numbers $ <var:l> $ --- prior to the evaluation of our series of instructions , then we see $ <var:G> = <nat:9> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this program can be done through typical Hoare logic . Looking at the following bits of codefound in the set of commands , we see \begin{eqnarray} \{ <var:z> = <var:l> \} \, <var:r1> := <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \} \, <var:r2> := <var:r1> * <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \} \, <var:r3> := <var:r2> * <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \} \, <var:r0> := <nat:9> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \, <var:r1> := <var:r1> * <nat:2> \, \{ <var:z> = <var:l> \land <var:r1> = <nat:2> * <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \end{eqnarray} This is given by the variable assignmet rule obtained from standard Hoare logic . Immediately after , we have \begin{eqnarray} \{ <var:z> = <var:l> \} \, <var:r1> := <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \} \, <var:r2> := <var:r1> * <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \} \, <var:r3> := <var:r2> * <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \} \, <var:r0> := <nat:9> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ \{ <var:z> = <var:l> \land <var:r1> = <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \, <var:r1> := <var:r1> * <nat:2> \, \{ <var:z> = <var:l> \land <var:r1> = <nat:2> * <var:l> \land <var:r2> = <var:l> ^ <nat:2> \land <var:r3> = <var:l> ^ <nat:3> \land <var:r0> = <nat:9> \} \end{eqnarray} Taking a look at the upcoming bit of code in the code segment , we see \begin{eqnarray} \{ <var:z> = <var:l> \} \, <var:r1> := <var:z> \, \{ <var:z> = <var:l> \land <var:r1> = <var:l> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:z> = <var:l> }} <var:r1> := <var:z> ; <var:r2> := <var:r1> * <var:z> ; <var:r3> := <var:r2> * <var:z> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:9> ; <var:G> := <var:r3> <var:G> := <var:G> + <var:r2> <var:G> := <var:G> + <var:r1> <var:G> := <var:G> + <var:r0> {{ <var:G> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <var:l> /\ <var:r2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <var:l> /\ <var:r2> = <var:l> ^ <nat:2> /\ <var:r3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <var:l> /\ <var:r2> = <var:l> ^ <nat:2> /\ <var:r3> = <var:l> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <nat:2> * <var:l> /\ <var:r2> = <var:l> ^ <nat:2> /\ <var:r3> = <var:l> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <nat:2> * <var:l> /\ <var:r2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:r3> = <var:l> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <nat:2> * <var:l> /\ <var:r2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:r3> = <nat:9> * <var:l> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <nat:2> * <var:l> /\ <var:r2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:r0> = <nat:9> /\ <var:G> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r1> = <nat:2> * <var:l> /\ <var:r0> = <nat:9> /\ <var:G> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:r0> = <nat:9> /\ <var:G> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:G> = <nat:9> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 