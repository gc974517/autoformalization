\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:5> ; <var:z> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:K> = <var:P> $ before the evaluation of our set of instructions then we see $ <var:z> = <nat:5> $ once series of instructions exits . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be demonstrated using typical Hoare reasoning . Immediately following , we have \verb | { <var:K> = <var:P> } <var:R0> := <nat:5> { <var:K> = <var:P> \land <var:R0> = <nat:5> } | and \verb | { <var:K> = <var:P> \land <var:R0> = <nat:5> } <var:z> := <var:R0{ <var:K> = <var:P> \land <var:z> = <nat:5> } | . This is shown by the variable binding rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:5> ; <var:z> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:K> = <var:P> }} <def:poly> {{ <var:z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 