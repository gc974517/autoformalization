\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:3> ; <var:E> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allow it to hold that $ <var:g> = <var:N> $ ahead of the execution of the series of commands , it holds that we see $ <var:E> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this program can be accomplished by typical Hoare logic . Moving forward to the next step , we have the variable assignmet statement \verb | <var:p0> := <nat:3> ; | . This statement transfers the precondition $ \{ <var:g> = <var:N> \} $ to the condition $ \{ <var:g> = <var:N> \land <var:p0> = <nat:3> \} $ . Focusing on the proceeding line seen in the program , we see the variable update command assigning $ <var:p0$ as $ <var:E>$ . This forwards the precondition $ \{ <var:g> = <var:N> \land <var:p0> = <nat:3> \} $ into $ \{ <var:g> = <var:N> \land <var:E> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:E> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <def:poly> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 