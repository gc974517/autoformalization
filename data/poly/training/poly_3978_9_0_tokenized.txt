\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:2> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:T> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:T> ; <var:M2> := <var:M2> * <var:T> ; <var:a> := <var:M2> ; <var:a> := <var:a> + <var:M1> ; <var:a> := <var:a> + <var:M0> \end{verbatim} Assume that $ <var:T> = <var:h> $ prior to executing the program it holds that $ <var:a> = <nat:2> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be accomplished with standard Hoare techniques . Taking a look at the upcoming lines of codein the code segment , \verb | { <var:T> = <var:h> } <var:M0> := <nat:2> { <var:T> = <var:h> \land <var:M0> = <nat:2> } | , \verb | { <var:T> = <var:h> \land <var:M0> = <nat:2> } <var:M1> := <nat:8> { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> } | and \verb | { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> } <var:M1> := <var:M1> * <var:T> { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> \times <var:h> } | . This is rigorously given through the variable assignmet rule from standard Hoare logic . Observing the upcoming line found in the program , we see \verb | { <var:T> = <var:h> } <var:M0> := <nat:2> { <var:T> = <var:h> \land <var:M0> = <nat:2> } | . Immediately after , we see \verb | { <var:T> = <var:h> } <var:M0> := <nat:2> { <var:T> = <var:h> \land <var:M0> = <nat:2> } | , \verb | { <var:T> = <var:h> \land <var:M0> = <nat:2> } <var:M1> := <nat:8> { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> } | , \verb | { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> } <var:M1> := <var:M1> * <var:T> { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> \times <var:h> } | and \verb | { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> \times <var:h> } <var:M2> := <nat:2> { <var:T> = <var:h> \land <var:M0> = <nat:2> \land <var:M1> = <nat:8> \times <var:h> \land <var:M2> = <nat:2> } | . This is guaranteed with the environment update scheme obtained from usual Hoare techniques . Shifting focus toward the upcoming statement seen in our code segment , we see \verb | { <var:T> = <var:h> } <var:M0> := <nat:2> { <var:T> = <var:h> \land <var:M0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:T> = <var:h> }} <var:M0> := <nat:2> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:T> ; <var:M2> := <nat:2> ; <var:M2> := <var:M2> * <var:T> ; <var:M2> := <var:M2> * <var:T> ; <var:a> := <var:M2> ; <var:a> := <var:a> + <var:M1> ; <var:a> := <var:a> + <var:M0> {{ <var:a> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> * <var:h> /\ <var:M2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> * <var:h> /\ <var:M2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> * <var:h> /\ <var:M2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:8> * <var:h> /\ <var:a> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:M0> = <nat:2> /\ <var:a> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:h> /\ <var:a> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 