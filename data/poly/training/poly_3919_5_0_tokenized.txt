\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:r0> := <nat:5> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:w> ; <var:Q> := <var:r1> ; <var:Q> := <var:Q> + <var:r0> \end{verbatim} Allow that we have $ <var:w> = <var:s> $ before the execution of our list of instructions then we see $ <var:Q> = <nat:7> \cdot <var:s> + <nat:5> $ once segment of code has finished . \end{theorem} \begin{proof} The method of proof for this series of commands can be seen through standard Hoare logic . Moving forward to the next step , the assignment line \verb | <var:r0> := <nat:5> ; | . This code advances the condition $ \{ <var:w> = <var:s> \} $ toward the postcondition $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \} $ . This is known to be sound by the assignment scheme obtained from typical Hoare reasoning . Shifting focus toward the proceeding line of code seen in the segment of code , we have the binding command assigning $ <nat:7> $ to $ <var:r1>$ . This line forwards the precondition $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \} $ toward $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:r1> = <nat:7> \} $ . This is shown using the assignment scheme defined by standard Hoare techniques . Jumping to the subsequent command seen in the set of commands , the binding line assigning $ <var:r1> * <var:w> $ toward $ <var:r1>$ . This statement takes $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:r1> = <nat:7> \} $ as $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:r1> = <nat:7> \cdot <var:s> \} $ . Stepping through , we see the variable update line giving $ <var:r1> $ into $ <var:Q>$ . This transfers the precondition $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:r1> = <nat:7> \cdot <var:s> \} $ toward $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:Q> = <nat:7> \cdot <var:s> \} $ . This is ensured by the assignment law given by standard Hoare reasoning . Following , we have the statement \verb | <var:Q> := <var:Q> + <var:r0> | . This line redefines the condition $ \{ <var:w> = <var:s> \land <var:r0> = <nat:5> \land <var:Q> = <nat:7> \cdot <var:s> \} $ toward $ \{ <var:w> = <var:s> \land <var:Q> = <nat:7> \cdot <var:s> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:w> = <var:s> }} <var:r0> := <nat:5> ; <var:r1> := <nat:7> ; <var:r1> := <var:r1> * <var:w> ; <var:Q> := <var:r1> ; <var:Q> := <var:Q> + <var:r0> {{ <var:Q> = <nat:7> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:r0> = <nat:5> /\ <var:r1> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:r0> = <nat:5> /\ <var:Q> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:Q> = <nat:7> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 