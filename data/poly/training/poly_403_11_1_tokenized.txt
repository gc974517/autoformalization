\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:e> ; <var:o2> := <var:o1> * <var:e> ; <var:o3> := <var:o2> * <var:e> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:5> ; <var:o3> := <var:o3> * <nat:8> ; <var:v> := <var:o3> <var:v> := <var:v> + <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assume ( with some positive numbers $ <var:u> $ ) that we have $ <var:e> = <var:u> $ prior to executing the set of commands then we have $ <var:v> = <nat:8> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:7> \times <var:u> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is done through standard Hoare techniques . Observing the next steps seen in our list of commands , we see \begin{eqnarray} \{ <var:e> = <var:u> \} \, <var:o1> := <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \, <var:o2> := <var:o1> * <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \} \, <var:o3> := <var:o2> * <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \} \, <var:o0> := <nat:1> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \land <var:o0> = <nat:1> \} \, <var:o1> := <var:o1> * <nat:7> \, \{ <var:e> = <var:u> \land <var:o1> = <nat:7> \cdot <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \land <var:o0> = <nat:1> \} \end{eqnarray} This is shown to be logically sound using the binding law given by usual Hoare logic . Observing the upcoming lines of codein the series of commands , \begin{eqnarray} \{ <var:e> = <var:u> \} \, <var:o1> := <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \, <var:o2> := <var:o1> * <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \} \, <var:o3> := <var:o2> * <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \} \\ \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \} \, <var:o0> := <nat:1> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \land <var:o2> = <var:u> ^ <nat:2> \land <var:o3> = <var:u> ^ <nat:3> \land <var:o0> = <nat:1> \} \end{eqnarray} Moving on to the next step , we see \begin{eqnarray} \{ <var:e> = <var:u> \} \, <var:o1> := <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \end{eqnarray} Honing in on the subsequent line found in our segment of code , we have \begin{eqnarray} \{ <var:e> = <var:u> \} \, <var:o1> := <var:e> \, \{ <var:e> = <var:u> \land <var:o1> = <var:u> \} \end{eqnarray} This is rigorously given by the variable assignmet rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:e> ; <var:o2> := <var:o1> * <var:e> ; <var:o3> := <var:o2> * <var:e> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:5> ; <var:o3> := <var:o3> * <nat:8> ; <var:v> := <var:o3> <var:v> := <var:v> + <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:e> = <var:u> }} <def:poly> {{ <var:v> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <var:u> /\ <var:o2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <var:u> /\ <var:o2> = <var:u> ^ <nat:2> /\ <var:o3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <var:u> /\ <var:o2> = <var:u> ^ <nat:2> /\ <var:o3> = <var:u> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <nat:7> * <var:u> /\ <var:o2> = <var:u> ^ <nat:2> /\ <var:o3> = <var:u> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <nat:7> * <var:u> /\ <var:o2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:o3> = <var:u> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <nat:7> * <var:u> /\ <var:o2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <nat:7> * <var:u> /\ <var:o2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:o0> = <nat:1> /\ <var:v> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o1> = <nat:7> * <var:u> /\ <var:o0> = <nat:1> /\ <var:v> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:o0> = <nat:1> /\ <var:v> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:u> /\ <var:v> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 