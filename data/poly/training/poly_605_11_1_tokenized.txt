\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:h1> := <var:W> ; <var:h2> := <var:h1> * <var:W> ; <var:h3> := <var:h2> * <var:W> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:7> ; <var:K> := <var:h3> <var:K> := <var:K> + <var:h2> <var:K> := <var:K> + <var:h1> <var:K> := <var:K> + <var:h0> \end{verbatim} Assuming , given some integers $ <var:Y> $ , that we have $ <var:W> = <var:Y> $ ahead of interpreting the series of commands it holds that we have $ <var:K> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:8> $ when set of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:Y> \} \\ <var:h1> := <var:W> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <var:Y> \} \\ <var:h2> := <var:h1> * <var:W> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:W> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:6> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <nat:6> \times <var:Y> \land <var:h2> = <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h2> := <var:h2> * <nat:6> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <nat:6> \times <var:Y> \land <var:h2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:h3> = <var:Y> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h3> := <var:h3> * <nat:7> ; \\ \{ <var:W> = <var:Y> \land <var:h1> = <nat:6> \times <var:Y> \land <var:h2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:h3> = <nat:7> \times <var:Y> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:K> := <var:h3> \\ \{ <var:W> = <var:Y> \land <var:h1> = <nat:6> \times <var:Y> \land <var:h2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:h0> = <nat:8> \land <var:K> = <nat:7> \times <var:Y> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:h2> \\ \{ <var:W> = <var:Y> \land <var:h1> = <nat:6> \times <var:Y> \land <var:h0> = <nat:8> \land <var:K> = <nat:7> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:h1> \\ \{ <var:W> = <var:Y> \land <var:h0> = <nat:8> \land <var:K> = <nat:7> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> + <nat:6> \times <var:Y> \} \end{eqnarray} Continuing the execution of this segment of code gives : \begin{eqnarray} <var:K> := <var:K> + <var:h0> \\ \{ <var:W> = <var:Y> \land <var:K> = <nat:7> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> + <nat:6> \times <var:Y> + <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:W> = <var:Y> }} <var:h1> := <var:W> ; <var:h2> := <var:h1> * <var:W> ; <var:h3> := <var:h2> * <var:W> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:7> ; <var:K> := <var:h3> <var:K> := <var:K> + <var:h2> <var:K> := <var:K> + <var:h1> <var:K> := <var:K> + <var:h0> {{ <var:K> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:h3> = <var:Y> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:h3> = <nat:7> * <var:Y> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:h0> = <nat:8> /\ <var:K> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h1> = <nat:6> * <var:Y> /\ <var:h0> = <nat:8> /\ <var:K> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:h0> = <nat:8> /\ <var:K> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Y> /\ <var:K> = <nat:7> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 