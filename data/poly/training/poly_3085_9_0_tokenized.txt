\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:C> ; <var:a2> := <nat:5> ; <var:a2> := <var:a2> * <var:C> ; <var:a2> := <var:a2> * <var:C> ; <var:X> := <var:a2> ; <var:X> := <var:X> + <var:a1> ; <var:X> := <var:X> + <var:a0> \end{verbatim} Assume it to hold that $ <var:C> = <var:o> $ ahead of the execution of our series of commands , it holds that $ <var:X> = <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:2> $ . \end{theorem} \begin{proof} Let the below decorated program . \begin{eqnarray} \{ <var:C> = <var:o> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \cdot <var:o> \} \\ <var:a2> := <nat:5> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \cdot <var:o> \land <var:a2> = <nat:5> \} \\ <var:a2> := <var:a2> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \cdot <var:o> \land <var:a2> = <nat:5> \cdot <var:o> \} \\ <var:a2> := <var:a2> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \cdot <var:o> \land <var:a2> = <nat:5> \cdot <var:o> ^ <nat:2> \} \\ <var:X> := <var:a2> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:a1> = <nat:5> \cdot <var:o> \land <var:X> = <nat:5> \cdot <var:o> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:a1> ; \\ \{ <var:C> = <var:o> \land <var:a0> = <nat:2> \land <var:X> = <nat:5> \cdot <var:o> ^ <nat:2> + <nat:5> \cdot <var:o> \} \\ <var:X> := <var:X> + <var:a0> \\ \{ <var:C> = <var:o> \land <var:X> = <nat:5> \cdot <var:o> ^ <nat:2> + <nat:5> \cdot <var:o> + <nat:2> \} \end{eqnarray} The application of Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:C> = <var:o> }} <var:a0> := <nat:2> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:C> ; <var:a2> := <nat:5> ; <var:a2> := <var:a2> * <var:C> ; <var:a2> := <var:a2> * <var:C> ; <var:X> := <var:a2> ; <var:X> := <var:X> + <var:a1> ; <var:X> := <var:X> + <var:a0> {{ <var:X> = <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> * <var:o> /\ <var:a2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> * <var:o> /\ <var:a2> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> * <var:o> /\ <var:a2> = <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:5> * <var:o> /\ <var:X> = <nat:5> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:a0> = <nat:2> /\ <var:X> = <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:X> = <nat:5> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 