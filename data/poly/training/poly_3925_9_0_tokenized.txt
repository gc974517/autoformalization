\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:7> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:c> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z2> := <var:Z2> * <var:c> ; <var:A> := <var:Z2> ; <var:A> := <var:A> + <var:Z1> ; <var:A> := <var:A> + <var:Z0> \end{verbatim} Given that we have $ <var:c> = <var:i> $ ahead of the execution of the set of instructions , it holds that we see $ <var:A> = <nat:8> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:7> $ after code segment has exited . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:c> = <var:i> \} \\ <var:Z0> := <nat:7> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \} \\ <var:Z1> := <nat:3> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \} \\ <var:Z1> := <var:Z1> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \times <var:i> \} \\ <var:Z2> := <nat:8> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \times <var:i> \land <var:Z2> = <nat:8> \} \\ <var:Z2> := <var:Z2> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \times <var:i> \land <var:Z2> = <nat:8> \times <var:i> \} \\ <var:Z2> := <var:Z2> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \times <var:i> \land <var:Z2> = <nat:8> \times <var:i> ^ <nat:2> \} \\ <var:A> := <var:Z2> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:Z1> = <nat:3> \times <var:i> \land <var:A> = <nat:8> \times <var:i> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:Z1> ; \\ \{ <var:c> = <var:i> \land <var:Z0> = <nat:7> \land <var:A> = <nat:8> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> \} \\ <var:A> := <var:A> + <var:Z0> \\ \{ <var:c> = <var:i> \land <var:A> = <nat:8> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:7> \} \end{eqnarray} Hence , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <var:Z0> := <nat:7> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:c> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z2> := <var:Z2> * <var:c> ; <var:A> := <var:Z2> ; <var:A> := <var:A> + <var:Z1> ; <var:A> := <var:A> + <var:Z0> {{ <var:A> = <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:i> /\ <var:Z2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:i> /\ <var:Z2> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:i> /\ <var:Z2> = <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:Z1> = <nat:3> * <var:i> /\ <var:A> = <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:Z0> = <nat:7> /\ <var:A> = <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:A> = <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 