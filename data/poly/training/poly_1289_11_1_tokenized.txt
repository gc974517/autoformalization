\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:A> ; <var:B2> := <var:B1> * <var:A> ; <var:B3> := <var:B2> * <var:A> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:7> ; <var:B2> := <var:B2> * <nat:8> ; <var:B3> := <var:B3> * <nat:9> ; <var:q> := <var:B3> <var:q> := <var:q> + <var:B2> <var:q> := <var:q> + <var:B1> <var:q> := <var:q> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:A> = <var:t> $ given all integers $ <var:t> $ before evaluating our segment of code it must be that we see $ <var:q> = <nat:9> \cdot <var:t> ^ <nat:3> + <nat:8> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:t> \} \\ <var:B1> := <var:A> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <var:t> \} \\ <var:B2> := <var:B1> * <var:A> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <var:t> \land <var:B2> = <var:t> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:A> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <var:t> \land <var:B2> = <var:t> ^ <nat:2> \land <var:B3> = <var:t> ^ <nat:3> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <var:t> \land <var:B2> = <var:t> ^ <nat:2> \land <var:B3> = <var:t> ^ <nat:3> \land <var:B0> = <nat:5> \} \\ <var:B1> := <var:B1> * <nat:7> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <nat:7> * <var:t> \land <var:B2> = <var:t> ^ <nat:2> \land <var:B3> = <var:t> ^ <nat:3> \land <var:B0> = <nat:5> \} \\ <var:B2> := <var:B2> * <nat:8> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <nat:7> * <var:t> \land <var:B2> = <nat:8> * <var:t> ^ <nat:2> \land <var:B3> = <var:t> ^ <nat:3> \land <var:B0> = <nat:5> \} \\ <var:B3> := <var:B3> * <nat:9> ; \\ \{ <var:A> = <var:t> \land <var:B1> = <nat:7> * <var:t> \land <var:B2> = <nat:8> * <var:t> ^ <nat:2> \land <var:B3> = <nat:9> * <var:t> ^ <nat:3> \land <var:B0> = <nat:5> \} \\ <var:q> := <var:B3> \\ \{ <var:A> = <var:t> \land <var:B1> = <nat:7> * <var:t> \land <var:B2> = <nat:8> * <var:t> ^ <nat:2> \land <var:B0> = <nat:5> \land <var:q> = <nat:9> * <var:t> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:B2> \\ \{ <var:A> = <var:t> \land <var:B1> = <nat:7> * <var:t> \land <var:B0> = <nat:5> \land <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:B1> \\ \{ <var:A> = <var:t> \land <var:B0> = <nat:5> \land <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:7> * <var:t> \} \\ <var:q> := <var:q> + <var:B0> \\ \{ <var:A> = <var:t> \land <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:5> \} \end{eqnarray} Given the preceding argument , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:A> ; <var:B2> := <var:B1> * <var:A> ; <var:B3> := <var:B2> * <var:A> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:7> ; <var:B2> := <var:B2> * <nat:8> ; <var:B3> := <var:B3> * <nat:9> ; <var:q> := <var:B3> <var:q> := <var:q> + <var:B2> <var:q> := <var:q> + <var:B1> <var:q> := <var:q> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:A> = <var:t> }} <def:poly> {{ <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <var:t> /\ <var:B2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <var:t> /\ <var:B2> = <var:t> ^ <nat:2> /\ <var:B3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <var:t> /\ <var:B2> = <var:t> ^ <nat:2> /\ <var:B3> = <var:t> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <nat:7> * <var:t> /\ <var:B2> = <var:t> ^ <nat:2> /\ <var:B3> = <var:t> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <nat:7> * <var:t> /\ <var:B2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:B3> = <var:t> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <nat:7> * <var:t> /\ <var:B2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:B3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <nat:7> * <var:t> /\ <var:B2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:B0> = <nat:5> /\ <var:q> = <nat:9> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B1> = <nat:7> * <var:t> /\ <var:B0> = <nat:5> /\ <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:B0> = <nat:5> /\ <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:q> = <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 