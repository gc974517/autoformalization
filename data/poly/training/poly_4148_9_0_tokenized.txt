\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:1> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:f> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:f> ; <var:q2> := <var:q2> * <var:f> ; <var:z> := <var:q2> ; <var:z> := <var:z> + <var:q1> ; <var:z> := <var:z> + <var:q0> \end{verbatim} Allow it to be that $ <var:f> = <var:J> $ given some positive integer coefficients $ <var:J> $ ahead of evaluating this series of instructions , it holds that we see $ <var:z> = <nat:8> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:1> $ once code finishes . \end{theorem} \begin{proof} The application of Hoare reasoning results in : \begin{eqnarray} \{ <var:f> = <var:J> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \} \\ <var:q1> := <nat:6> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \} \\ <var:q1> := <var:q1> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \cdot <var:J> \} \\ <var:q2> := <nat:8> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \cdot <var:J> \land <var:q2> = <nat:8> \} \\ <var:q2> := <var:q2> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \cdot <var:J> \land <var:q2> = <nat:8> \cdot <var:J> \} \\ <var:q2> := <var:q2> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \cdot <var:J> \land <var:q2> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ <var:z> := <var:q2> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:q1> = <nat:6> \cdot <var:J> \land <var:z> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:q1> ; \\ \{ <var:f> = <var:J> \land <var:q0> = <nat:1> \land <var:z> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:6> \cdot <var:J> \} \\ <var:z> := <var:z> + <var:q0> \\ \{ <var:f> = <var:J> \land <var:z> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:6> \cdot <var:J> + <nat:1> \} \end{eqnarray} Thus , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:f> = <var:J> }} <var:q0> := <nat:1> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:f> ; <var:q2> := <nat:8> ; <var:q2> := <var:q2> * <var:f> ; <var:q2> := <var:q2> * <var:f> ; <var:z> := <var:q2> ; <var:z> := <var:z> + <var:q1> ; <var:z> := <var:z> + <var:q0> {{ <var:z> = <nat:8> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> * <var:J> /\ <var:q2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> * <var:J> /\ <var:q2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> * <var:J> /\ <var:q2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:6> * <var:J> /\ <var:z> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:q0> = <nat:1> /\ <var:z> = <nat:8> * <var:J> ^ <nat:2> + <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:z> = <nat:8> * <var:J> ^ <nat:2> + <nat:6> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 