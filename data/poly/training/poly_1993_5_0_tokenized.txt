\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:a> ; <var:x> := <var:I1> ; <var:x> := <var:x> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Given --- for any positive numbers $ <var:K> $ --- it to be that $ <var:a> = <var:K> $ prior to executing this code , then $ <var:x> = <nat:4> \times <var:K> + <nat:2> $ when set of commands is done . \end{theorem} \begin{proof} The flow of logic for the segment of code is evident with typical Hoare logic . Paying attention to the following piece of code found in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:K> \} & <var:I0> := <nat:2> & \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \} \end{tabular} This is shown to be logically sound with the variable update rule from Hoare reasoning . Considering the proceeding statements in our code , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:K> \} & <var:I0> := <nat:2> & \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \} \\ \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \} & <var:I1> := <nat:4> & \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \} \\ \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> \} & <var:I1> := <var:I1> * <var:a> & \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> * <var:K> \} \\ \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \land <var:I1> = <nat:4> * <var:K> \} & <var:x> := <var:I1> & \{ <var:a> = <var:K> \land <var:I0> = <nat:2> \land <var:x> = <nat:4> * <var:K> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:a> ; <var:x> := <var:I1> ; <var:x> := <var:x> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:a> = <var:K> }} <def:poly> {{ <var:x> = <nat:4> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I0> = <nat:2> /\ <var:x> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:x> = <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 