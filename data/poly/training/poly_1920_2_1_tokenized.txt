\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:1> ; <var:w> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allowing for some positive integer coefficients $ <var:A> $ it to be that $ <var:E> = <var:A> $ before the execution of the program it follows that $ <var:w> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our code is clear by typical Hoare logic . Taking another step toward the upcoming statement in the segment of code , \begin{eqnarray} \{ <var:E> = <var:A> \} \, <var:k0> := <nat:1> \, \{ <var:E> = <var:A> \land <var:k0> = <nat:1> \} \end{eqnarray} This is given using the assignment scheme obtained from typical Hoare reasoning . Considering the subsequent bit of code in our series of commands , we have \begin{eqnarray} \{ <var:E> = <var:A> \} \, <var:k0> := <nat:1> \, \{ <var:E> = <var:A> \land <var:k0> = <nat:1> \} \end{eqnarray} This is shown with the rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:w> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:E> = <var:A> }} <def:poly> {{ <var:w> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:A> /\ <var:w> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 