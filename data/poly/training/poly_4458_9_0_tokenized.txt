\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:W> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:W> ; <var:r2> := <var:r2> * <var:W> ; <var:c> := <var:r2> ; <var:c> := <var:c> + <var:r1> ; <var:c> := <var:c> + <var:r0> \end{verbatim} Assuming taking positive numbers $ <var:H> $ it to hold that $ <var:W> = <var:H> $ prior to the execution of this list of commands it must be that $ <var:c> = <nat:4> \times <var:H> ^ <nat:2> + <nat:5> \times <var:H> + <nat:8> $ when code segment is done . \end{theorem} \begin{proof} The argument for our series of commands is done with typical Hoare reasoning . Now , we see the variable update code binding $ <nat:8> $ to $ <var:r0>$ . This line advances the condition $ \{ <var:W> = <var:H> \} $ into $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \} $ . Advancing on , we have the command \verb | <var:r1> := <nat:5> ; | . This line transfers $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \} $ toward the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \} $ . This is ensured by the assignment rule in standard Hoare logic . Considering the proceeding line of code found in our set of commands , we see the variable update code giving $ <var:r1> * <var:W> $ into $ <var:r1>$ . This advances $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \} $ to the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \} $ . This is shown to be logically sound using the assignment scheme found in Hoare reasoning . Stepping through , we have the binding command \verb | <var:r2> := <nat:4> ; | . This takes the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \} $ toward $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \} $ . This is guaranteed through the assignment inference rule from standard Hoare techniques . Honing in on the following line found in our program , we see the command yielding $ <var:r2> * <var:W> $ as $ <var:r2>$ . This redefines the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \} $ into $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \cdot <var:H> \} $ . Moving onward , the variable binding statement binding $ <var:r2> * <var:W> $ into $ <var:r2>$ . This code transfers the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \cdot <var:H> \} $ toward $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \cdot <var:H> ^ <nat:2> \} $ . This is sound by the assignment inference rule defined by standard Hoare logic . Paying attention to the upcoming step in the series of commands , we see the binding statement \verb | <var:c> := <var:r2> ; | . This statement moves the condition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:r2> = <nat:4> \cdot <var:H> ^ <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:c> = <nat:4> \cdot <var:H> ^ <nat:2> \} $ . This is guaranteed with the assignment inference rule obtained from Hoare techniques . Looking at the following line of code in the series of instructions , we have the variable assignmet statement yielding $ <var:c> + <var:r1> $ as $ <var:c>$ . This statement transfers $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:5> \cdot <var:H> \land <var:c> = <nat:4> \cdot <var:H> ^ <nat:2> \} $ to $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:c> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> \} $ . This is given by the assignment scheme of Hoare reasoning . Honing in on the next command contained in our program , we see the binding command yielding $ <var:c> + <var:r0$ into $ <var:c>$ . This code moves $ \{ <var:W> = <var:H> \land <var:r0> = <nat:8> \land <var:c> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> \} $ to $ \{ <var:W> = <var:H> \land <var:c> = <nat:4> \cdot <var:H> ^ <nat:2> + <nat:5> \cdot <var:H> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:W> = <var:H> }} <var:r0> := <nat:8> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:W> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:W> ; <var:r2> := <var:r2> * <var:W> ; <var:c> := <var:r2> ; <var:c> := <var:c> + <var:r1> ; <var:c> := <var:c> + <var:r0> {{ <var:c> = <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:H> /\ <var:r2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:H> /\ <var:r2> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:H> /\ <var:r2> = <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:5> * <var:H> /\ <var:c> = <nat:4> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:r0> = <nat:8> /\ <var:c> = <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:c> = <nat:4> * <var:H> ^ <nat:2> + <nat:5> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 