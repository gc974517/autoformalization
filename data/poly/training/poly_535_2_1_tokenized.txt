\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:3> ; <var:e> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:k> = <var:V> $ , for some positive integers $ <var:V> $ , prior to executing this series of instructions it must be that we have $ <var:e> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be given using Hoare reasoning . Keeping momentum , \begin{verbatim} { <var:k> = <var:V> } <var:h0> := <nat:3> { <var:k> = <var:V> \land <var:h0> = <nat:3> } { <var:k> = <var:V> \land <var:h0> = <nat:3> } <var:e> := <var:h0{ <var:k> = <var:V> \land <var:e> = <nat:3> } \end{verbatim} This is sound using the binding inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:3> ; <var:e> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:k> = <var:V> }} <def:poly> {{ <var:e> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:V> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:V> /\ <var:e> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 