\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:M1> := <var:C> ; <var:M2> := <var:M1> * <var:C> ; <var:M3> := <var:M2> * <var:C> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:9> ; <var:g> := <var:M3> <var:g> := <var:g> + <var:M2> <var:g> := <var:g> + <var:M1> <var:g> := <var:g> + <var:M0> \end{verbatim} Given it to be that $ <var:C> = <var:V> $ ahead of interpreting the series of instructions it holds that $ <var:g> = <nat:9> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:V> \} \\ <var:M1> := <var:C> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <var:V> \} \\ <var:M2> := <var:M1> * <var:C> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <var:V> \land <var:M2> = <var:V> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:C> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <var:V> \land <var:M2> = <var:V> ^ <nat:2> \land <var:M3> = <var:V> ^ <nat:3> \} \\ <var:M0> := <nat:1> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <var:V> \land <var:M2> = <var:V> ^ <nat:2> \land <var:M3> = <var:V> ^ <nat:3> \land <var:M0> = <nat:1> \} \\ <var:M1> := <var:M1> * <nat:5> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <nat:5> \times <var:V> \land <var:M2> = <var:V> ^ <nat:2> \land <var:M3> = <var:V> ^ <nat:3> \land <var:M0> = <nat:1> \} \\ <var:M2> := <var:M2> * <nat:8> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <nat:5> \times <var:V> \land <var:M2> = <nat:8> \times <var:V> ^ <nat:2> \land <var:M3> = <var:V> ^ <nat:3> \land <var:M0> = <nat:1> \} \\ <var:M3> := <var:M3> * <nat:9> ; \\ \{ <var:C> = <var:V> \land <var:M1> = <nat:5> \times <var:V> \land <var:M2> = <nat:8> \times <var:V> ^ <nat:2> \land <var:M3> = <nat:9> \times <var:V> ^ <nat:3> \land <var:M0> = <nat:1> \} \\ <var:g> := <var:M3> \\ \{ <var:C> = <var:V> \land <var:M1> = <nat:5> \times <var:V> \land <var:M2> = <nat:8> \times <var:V> ^ <nat:2> \land <var:M0> = <nat:1> \land <var:g> = <nat:9> \times <var:V> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:M2> \\ \{ <var:C> = <var:V> \land <var:M1> = <nat:5> \times <var:V> \land <var:M0> = <nat:1> \land <var:g> = <nat:9> \times <var:V> ^ <nat:3> + <nat:8> \times <var:V> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:M1> \\ \{ <var:C> = <var:V> \land <var:M0> = <nat:1> \land <var:g> = <nat:9> \times <var:V> ^ <nat:3> + <nat:8> \times <var:V> ^ <nat:2> + <nat:5> \times <var:V> \} \\ <var:g> := <var:g> + <var:M0> \\ \{ <var:C> = <var:V> \land <var:g> = <nat:9> \times <var:V> ^ <nat:3> + <nat:8> \times <var:V> ^ <nat:2> + <nat:5> \times <var:V> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <var:M1> := <var:C> ; <var:M2> := <var:M1> * <var:C> ; <var:M3> := <var:M2> * <var:C> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:5> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:9> ; <var:g> := <var:M3> <var:g> := <var:g> + <var:M2> <var:g> := <var:g> + <var:M1> <var:g> := <var:g> + <var:M0> {{ <var:g> = <nat:9> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <var:V> /\ <var:M2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <var:V> /\ <var:M2> = <var:V> ^ <nat:2> /\ <var:M3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <var:V> /\ <var:M2> = <var:V> ^ <nat:2> /\ <var:M3> = <var:V> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <nat:5> * <var:V> /\ <var:M2> = <var:V> ^ <nat:2> /\ <var:M3> = <var:V> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <nat:5> * <var:V> /\ <var:M2> = <nat:8> * <var:V> ^ <nat:2> /\ <var:M3> = <var:V> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <nat:5> * <var:V> /\ <var:M2> = <nat:8> * <var:V> ^ <nat:2> /\ <var:M3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <nat:5> * <var:V> /\ <var:M2> = <nat:8> * <var:V> ^ <nat:2> /\ <var:M0> = <nat:1> /\ <var:g> = <nat:9> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M1> = <nat:5> * <var:V> /\ <var:M0> = <nat:1> /\ <var:g> = <nat:9> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:M0> = <nat:1> /\ <var:g> = <nat:9> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:g> = <nat:9> * <var:V> ^ <nat:3> + <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 