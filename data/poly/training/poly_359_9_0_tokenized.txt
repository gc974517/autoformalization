\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:R> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:R> ; <var:I2> := <var:I2> * <var:R> ; <var:D> := <var:I2> ; <var:D> := <var:D> + <var:I1> ; <var:D> := <var:D> + <var:I0> \end{verbatim} Assuming it to be that $ <var:R> = <var:d> $ prior to the execution of the series of instructions it follows that we have $ <var:D> = <nat:6> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:R> = <var:d> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \} \\ <var:I1> := <nat:6> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \} \\ <var:I1> := <var:I1> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:d> \} \\ <var:I2> := <nat:6> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:d> \land <var:I2> = <nat:6> \} \\ <var:I2> := <var:I2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:d> \land <var:I2> = <nat:6> \cdot <var:d> \} \\ <var:I2> := <var:I2> * <var:R> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:d> \land <var:I2> = <nat:6> \cdot <var:d> ^ <nat:2> \} \\ <var:D> := <var:I2> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:d> \land <var:D> = <nat:6> \cdot <var:d> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:I1> ; \\ \{ <var:R> = <var:d> \land <var:I0> = <nat:8> \land <var:D> = <nat:6> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> \} \\ <var:D> := <var:D> + <var:I0> \\ \{ <var:R> = <var:d> \land <var:D> = <nat:6> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:8> \} \end{eqnarray} Thus , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:I0> := <nat:8> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:R> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:R> ; <var:I2> := <var:I2> * <var:R> ; <var:D> := <var:I2> ; <var:D> := <var:D> + <var:I1> ; <var:D> := <var:D> + <var:I0> {{ <var:D> = <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:d> /\ <var:I2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:d> /\ <var:I2> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:d> /\ <var:I2> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:d> /\ <var:D> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:I0> = <nat:8> /\ <var:D> = <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:D> = <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 