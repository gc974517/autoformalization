\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:7> ; <var:g> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Assuming that $ <var:p> = <var:d> $ before the evaluation of the segment of code then $ <var:g> = <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is given using Hoare techniques . Focusing on the subsequent pieces of code seen in the series of instructions , we have \begin{eqnarray} \{ <var:p> = <var:d> \} \, <var:w0> := <nat:7> \, \{ <var:p> = <var:d> \land <var:w0> = <nat:7> \} \\ \{ <var:p> = <var:d> \land <var:w0> = <nat:7> \} \, <var:g> := <var:w0\, \{ <var:p> = <var:d> \land <var:g> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:7> ; <var:g> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:p> = <var:d> }} <def:poly> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 