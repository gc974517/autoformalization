\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:2> + <var:o> * <var:G> ; <var:o> := <nat:3> + <var:o> * <var:G> ; <var:o> := <nat:3> + <var:o> * <var:G> ; <var:o> := <nat:2> + <var:o> * <var:G> \end{verbatim} Assuming given natural numbers $ <var:V> $ it to hold that $ <var:G> = <var:V> $ prior to the evaluation of this list of instructions it holds that $ <var:o> = <nat:2> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:3> \cdot <var:V> ^ <nat:2> + <nat:3> \cdot <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:G> = <var:V> \} \\ <var:o> := <nat:2> ; \\ \{ <var:G> = <var:V> \land <var:o> = <nat:2> \} \\ <var:o> := <nat:2> + <var:o> * <var:G> ; \\ \{ <var:G> = <var:V> \land <var:o> = <nat:2> \times <var:V> + <nat:2> \} \\ <var:o> := <nat:3> + <var:o> * <var:G> ; \\ \{ <var:G> = <var:V> \land <var:o> = <nat:2> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:3> \} \\ <var:o> := <nat:3> + <var:o> * <var:G> ; \\ \{ <var:G> = <var:V> \land <var:o> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} \\ <var:o> := <nat:2> + <var:o> * <var:G> \\ \{ <var:G> = <var:V> \land <var:o> = <nat:2> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:2> \} \end{eqnarray} Given the above , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:G> = <var:V> }} <var:o> := <nat:2> ; <var:o> := <nat:2> + <var:o> * <var:G> ; <var:o> := <nat:3> + <var:o> * <var:G> ; <var:o> := <nat:3> + <var:o> * <var:G> ; <var:o> := <nat:2> + <var:o> * <var:G> {{ <var:o> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:o> = <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:o> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:o> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:V> /\ <var:o> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 