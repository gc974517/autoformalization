\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:3> + <var:L> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Allow that $ <var:D> = <var:R> $ before executing our series of commands then $ <var:L> = <nat:1> \cdot <var:R> ^ <nat:8> + <nat:4> \cdot <var:R> ^ <nat:7> + <nat:1> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is done by typical Hoare reasoning . Moving onward , we have the environment update command letting $ <nat:1> $ into $ <var:L>$ . This moves the condition $ \{ <var:D> = <var:R> \} $ to the postcondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \} $ . This is deduced through the assignment scheme given by Hoare logic . Jumping to the proceeding bit of code seen in our list of instructions , the variable update code giving $ <nat:4> + <var:L> * <var:D> $ toward $ <var:L>$ . This advances the condition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \} $ as the condition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> + <nat:4> \} $ . This is shown with the assignment inference rule defined by Hoare logic . Observing the upcoming line in our code , we see the variable update code \verb | <var:L> := <nat:1> + <var:L> * <var:D> ; | . This forwards the precondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> + <nat:4> \} $ toward the postcondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ . Considering the following line in our code , we see the binding code \verb | <var:L> := <nat:4> + <var:L> * <var:D> ; | . This command forwards the precondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ as the condition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:4> \} $ . This is deduced by the assignment rule given by usual Hoare logic . Advancing on , we see the assignment line binding $ <nat:1> + <var:L> * <var:D> $ toward $ <var:L>$ . This transfers the precondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:4> \} $ as the postcondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ . Going forward , the environment update code yielding $ <nat:1> + <var:L> * <var:D> $ into $ <var:L>$ . This redefines the precondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ into $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:1> \} $ . This is guaranteed with the assignment scheme obtained from Hoare techniques . Moving on to the next step , we see the assignment command letting $ <nat:4> + <var:L> * <var:D> $ toward $ <var:L>$ . This transfers the precondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:1> \} $ into $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:4> \} $ . This is shown using the assignment law found in typical Hoare techniques . Taking a look at the upcoming step in the segment of code , we have the variable assignmet command \verb | <var:L> := <nat:1> + <var:L> * <var:D> ; | . This transfers $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:4> \} $ to the postcondition $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:7> + <nat:4> \cdot <var:R> ^ <nat:6> + <nat:1> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ . This is shown with the assignment rule obtained from standard Hoare reasoning . Looking at the upcoming step contained in our code , we have the assignment statement yielding $ <nat:3> + <var:L> * <var:D$ to $ <var:L>$ . This code redefines $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:7> + <nat:4> \cdot <var:R> ^ <nat:6> + <nat:1> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} $ toward $ \{ <var:D> = <var:R> \land <var:L> = <nat:1> \cdot <var:R> ^ <nat:8> + <nat:4> \cdot <var:R> ^ <nat:7> + <nat:1> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:1> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:4> + <var:L> * <var:D> ; <var:L> := <nat:1> + <var:L> * <var:D> ; <var:L> := <nat:3> + <var:L> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:D> = <var:R> }} <def:poly> {{ <var:L> = <nat:1> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:L> = <nat:1> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 