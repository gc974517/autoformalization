\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:R1> := <var:E> ; <var:R2> := <var:R1> * <var:E> ; <var:R3> := <var:R2> * <var:E> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:1> ; <var:d> := <var:R3> <var:d> := <var:d> + <var:R2> <var:d> := <var:d> + <var:R1> <var:d> := <var:d> + <var:R0> \end{verbatim} Allow that we have $ <var:E> = <var:H> $ , for some positive integers $ <var:H> $ , before executing the segment of code , then we see $ <var:d> = <nat:1> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:5> $ when set of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is shown using standard Hoare reasoning . Moving on to the next step , the environment update code giving $ <var:E> $ into $ <var:R1>$ . This statement forwards the condition $ \{ <var:E> = <var:H> \} $ into $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \} $ . This is shown to be logically sound with the assignment scheme given by usual Hoare reasoning . Advancing to the upcoming bit of code in our series of instructions , the environment update statement giving $ <var:R1> * <var:E> $ to $ <var:R2>$ . This advances the condition $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \} $ into the postcondition $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \} $ . Next , we have the binding statement assigning $ <var:R2> * <var:E> $ as $ <var:R3>$ . This statement redefines the precondition $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \} $ as the postcondition $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \} $ . Stepping forward , the variable binding command \verb | <var:R0> := <nat:5> ; | . This moves $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \} $ to $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Next , the binding statement binding $ <var:R1> * <nat:2> $ as $ <var:R1>$ . This code transfers $ \{ <var:E> = <var:H> \land <var:R1> = <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ to $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Further , we have the variable update code yielding $ <var:R2> * <nat:6> $ into $ <var:R2>$ . This command forwards the condition $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ toward $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Focusing on the next piece of code in the segment of code , the variable update code defining $ <var:R3> * <nat:1> $ as $ <var:R3>$ . This code redefines $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R3> = <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ toward $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R3> = <nat:1> \cdot <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ . Taking another step toward the subsequent statement contained in the series of instructions , the binding command \verb | <var:d> := <var:R3> | . This takes $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R3> = <nat:1> \cdot <var:H> ^ <nat:3> \land <var:R0> = <nat:5> \} $ toward the condition $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> \} $ . Moving on , the environment update line yielding $ <var:d> + <var:R2$ as $ <var:d>$ . This command advances the precondition $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R2> = <nat:6> \cdot <var:H> ^ <nat:2> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> \} $ to $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> \} $ . Shifting focus toward the upcoming piece of code in the code , we see the environment update line defining $ <var:d> + <var:R1$ into $ <var:d>$ . This statement moves the condition $ \{ <var:E> = <var:H> \land <var:R1> = <nat:2> \cdot <var:H> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:H> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> \} $ . This is rigorously given using the assignment law given by usual Hoare reasoning . Looking at the following command contained in the segment of code , we have the variable binding command giving $ <var:d> + <var:R0$ to $ <var:d>$ . This command redefines $ \{ <var:E> = <var:H> \land <var:R0> = <nat:5> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> \} $ toward $ \{ <var:E> = <var:H> \land <var:d> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> + <nat:2> \cdot <var:H> + <nat:5> \} $ . This is deduced through the assignment inference rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:E> = <var:H> }} <var:R1> := <var:E> ; <var:R2> := <var:R1> * <var:E> ; <var:R3> := <var:R2> * <var:E> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:6> ; <var:R3> := <var:R3> * <nat:1> ; <var:d> := <var:R3> <var:d> := <var:d> + <var:R2> <var:d> := <var:d> + <var:R1> <var:d> := <var:d> + <var:R0> {{ <var:d> = <nat:1> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <nat:2> * <var:H> /\ <var:R2> = <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <nat:2> * <var:H> /\ <var:R2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:R3> = <var:H> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <nat:2> * <var:H> /\ <var:R2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:H> ^ <nat:3> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <nat:2> * <var:H> /\ <var:R2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:R0> = <nat:5> /\ <var:d> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R1> = <nat:2> * <var:H> /\ <var:R0> = <nat:5> /\ <var:d> = <nat:1> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:R0> = <nat:5> /\ <var:d> = <nat:1> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:d> = <nat:1> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 