\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> \end{verbatim} Given that we have $ <var:y> = <var:w> $ prior to the evaluation of this list of commands it holds that $ <var:j> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> $ after series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:w> \} \\ <var:j> := <nat:3> ; \\ \{ <var:y> = <var:w> \land <var:j> = <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:y> ; \\ \{ <var:y> = <var:w> \land <var:j> = <nat:3> \cdot <var:w> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:y> ; \\ \{ <var:y> = <var:w> \land <var:j> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> \} \\ <var:j> := <nat:2> + <var:j> * <var:y> ; \\ \{ <var:y> = <var:w> \land <var:j> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> \} \\ <var:j> := <nat:4> + <var:j> * <var:y> \\ \{ <var:y> = <var:w> \land <var:j> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:y> = <var:w> }} <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:y> ; <var:j> := <nat:3> + <var:j> * <var:y> ; <var:j> := <nat:2> + <var:j> * <var:y> ; <var:j> := <nat:4> + <var:j> * <var:y> {{ <var:j> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:j> = <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:j> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:j> = <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:w> /\ <var:j> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 