\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:F> = <var:d> $ prior to the evaluation of our set of commands , it holds that we see $ <var:c> = <nat:3> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our code segment is given through Hoare techniques . Going to the next step , the variable binding statement yielding $ <nat:3> $ to $ <var:c>$ . This redefines $ \{ <var:F> = <var:d> \} $ to the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> \} $ . This is deduced using the assignment rule given by standard Hoare techniques . Advancing to the next step , the variable assignmet code giving $ <nat:3> + <var:c> * <var:F> $ into $ <var:c>$ . This command moves $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> \} $ toward the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> + <nat:3> \} $ . Taking a look at the subsequent line of code found in our program , the binding line defining $ <nat:2> + <var:c> * <var:F> $ into $ <var:c>$ . This statement transfers the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> + <nat:3> \} $ to the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} $ . Shifting focus toward the proceeding bit of code contained in our set of commands , we have the assignment command \verb | <var:c> := <nat:2> + <var:c> * <var:F> ; | . This command transfers the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> \} $ to $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} $ . This is sound using the assignment law in standard Hoare techniques . Observing the following line of code found in our code , we have the assignment statement defining $ <nat:4> + <var:c> * <var:F$ toward $ <var:c>$ . This transfers the precondition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} $ as the condition $ \{ <var:F> = <var:d> \land <var:c> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> \} $ . This is deduced by the assignment law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:2> + <var:c> * <var:F> ; <var:c> := <nat:4> + <var:c> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:F> = <var:d> }} <def:poly> {{ <var:c> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:c> = <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:c> = <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:c> = <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:c> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 