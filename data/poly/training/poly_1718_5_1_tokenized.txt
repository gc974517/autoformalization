\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:O> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:P> := <var:Y1> <var:P> := <var:P> + <var:Y0> \end{verbatim} Assuming it to be that $ <var:O> = <var:A> $ ahead of running this set of instructions , then we see $ <var:P> = <nat:3> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be seen with standard Hoare techniques . Moving onward , we have the assignment code \verb | <var:Y1> := <var:O> ; | . This transfers the precondition $ \{ <var:O> = <var:A> \} $ to $ \{ <var:O> = <var:A> \land <var:Y1> = <var:A> \} $ . Going forward , the variable assignmet statement \verb | <var:Y0> := <nat:1> ; | . This forwards $ \{ <var:O> = <var:A> \land <var:Y1> = <var:A> \} $ to the condition $ \{ <var:O> = <var:A> \land <var:Y1> = <var:A> \land <var:Y0> = <nat:1> \} $ . Advancing to the next step , we see the variable assignmet statement yielding $ <var:Y1> * <nat:3> $ toward $ <var:Y1>$ . This code redefines the condition $ \{ <var:O> = <var:A> \land <var:Y1> = <var:A> \land <var:Y0> = <nat:1> \} $ as the condition $ \{ <var:O> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y0> = <nat:1> \} $ . Moving on to the proceeding line of code in the program , we have the environment update code \verb | <var:P> := <var:Y1> | . This advances the precondition $ \{ <var:O> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y0> = <nat:1> \} $ as the postcondition $ \{ <var:O> = <var:A> \land <var:Y0> = <nat:1> \land <var:P> = <nat:3> \cdot <var:A> \} $ . Stepping through , we have the assignment line letting $ <var:P> + <var:Y0$ toward $ <var:P>$ . This takes the precondition $ \{ <var:O> = <var:A> \land <var:Y0> = <nat:1> \land <var:P> = <nat:3> \cdot <var:A> \} $ toward $ \{ <var:O> = <var:A> \land <var:P> = <nat:3> \cdot <var:A> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:O> = <var:A> }} <var:Y1> := <var:O> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:P> := <var:Y1> <var:P> := <var:P> + <var:Y0> {{ <var:P> = <nat:3> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Y1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Y0> = <nat:1> /\ <var:P> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:P> = <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 