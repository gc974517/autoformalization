\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:j1> := <var:Z> ; <var:j2> := <var:j1> * <var:Z> ; <var:j3> := <var:j2> * <var:Z> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:5> ; <var:E> := <var:j3> <var:E> := <var:E> + <var:j2> <var:E> := <var:E> + <var:j1> <var:E> := <var:E> + <var:j0> \end{verbatim} Assuming it to be that $ <var:Z> = <var:J> $ --- with some positive coefficients $ <var:J> $ --- prior to evaluating the set of commands it holds that $ <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:6> $ after segment of code has finished . \end{theorem} \begin{proof} The method of proof for the program is done through typical Hoare logic . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:J> \} & <var:j1> := <var:Z> & \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \} & <var:j2> := <var:j1> * <var:Z> & \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \} & <var:j3> := <var:j2> * <var:Z> & \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \} & <var:j0> := <nat:6> & \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} & <var:j1> := <var:j1> * <nat:2> & \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} & <var:j2> := <var:j2> * <nat:9> & \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j3> = <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} & <var:j3> := <var:j3> * <nat:5> & \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j3> = <nat:5> * <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j3> = <nat:5> * <var:J> ^ <nat:3> \land <var:j0> = <nat:6> \} & <var:E> := <var:j3& \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j2> = <nat:9> * <var:J> ^ <nat:2> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> \} & <var:E> := <var:E> + <var:j2& \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> \} \\ \{ <var:Z> = <var:J> \land <var:j1> = <nat:2> * <var:J> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> \} & <var:E> := <var:E> + <var:j1& \{ <var:Z> = <var:J> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} \\ \{ <var:Z> = <var:J> \land <var:j0> = <nat:6> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} & <var:E> := <var:E> + <var:j0& \{ <var:Z> = <var:J> \land <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <var:j1> := <var:Z> ; <var:j2> := <var:j1> * <var:Z> ; <var:j3> := <var:j2> * <var:Z> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:5> ; <var:E> := <var:j3> <var:E> := <var:E> + <var:j2> <var:E> := <var:E> + <var:j1> <var:E> := <var:E> + <var:j0> {{ <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <nat:2> * <var:J> /\ <var:j2> = <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <nat:2> * <var:J> /\ <var:j2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:j3> = <var:J> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <nat:2> * <var:J> /\ <var:j2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:j3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <nat:2> * <var:J> /\ <var:j2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:j0> = <nat:6> /\ <var:E> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j1> = <nat:2> * <var:J> /\ <var:j0> = <nat:6> /\ <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:j0> = <nat:6> /\ <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:E> = <nat:5> * <var:J> ^ <nat:3> + <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 