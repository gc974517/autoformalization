\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:4> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:4> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <nat:1> + <var:o> * <var:X> \end{verbatim} Allow it to hold that $ <var:X> = <var:J> $ prior to the evaluation of this series of commands then we see $ <var:o> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> $ when code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:J> \} \\ <var:o> := <nat:2> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \} \\ <var:o> := <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> + \} \\ <var:o> := <nat:4> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> + <nat:2> \} \\ <var:o> := <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + \} \\ <var:o> := <nat:2> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:5> + <nat:4> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \} \\ <var:o> := <nat:2> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:6> + <nat:4> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:2> \} \\ <var:o> := <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:7> + <nat:4> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + \} \\ <var:o> := <nat:4> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:8> + <nat:4> \cdot <var:J> ^ <nat:6> + <nat:2> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:4> \} \\ <var:o> := <nat:2> + <var:o> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:9> + <nat:4> \cdot <var:J> ^ <nat:7> + <nat:2> \cdot <var:J> ^ <nat:6> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> + <nat:2> \} \\ <var:o> := <nat:1> + <var:o> * <var:X> \\ \{ <var:X> = <var:J> \land <var:o> = <nat:2> \cdot <var:J> ^ <nat:10> + <nat:4> \cdot <var:J> ^ <nat:8> + <nat:2> \cdot <var:J> ^ <nat:7> + <nat:2> \cdot <var:J> ^ <nat:5> + <nat:2> \cdot <var:J> ^ <nat:4> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:1> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:X> = <var:J> }} <var:o> := <nat:2> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:4> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <var:o> * <var:X> ; <var:o> := <nat:4> + <var:o> * <var:X> ; <var:o> := <nat:2> + <var:o> * <var:X> ; <var:o> := <nat:1> + <var:o> * <var:X> {{ <var:o> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:o> = <nat:2> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 