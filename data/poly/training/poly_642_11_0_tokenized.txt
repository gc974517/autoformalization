\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:6> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:b> ; <var:a2> := <var:a2> * <var:b> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:K> := <var:a3> ; <var:K> := <var:K> + <var:a2> ; <var:K> := <var:K> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assuming that $ <var:b> = <var:r> $ for some integers $ <var:r> $ prior to interpreting this set of instructions it holds that $ <var:K> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:8> \cdot <var:r> ^ <nat:2> + <nat:6> $ after set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:r> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \} \\ <var:a2> := <nat:8> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \} \\ <var:a2> := <var:a2> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> \} \\ <var:a2> := <var:a2> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \} \\ <var:a3> := <nat:4> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \} \\ <var:a3> := <var:a3> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> \} \\ <var:a3> := <var:a3> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:b> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:3> \} \\ <var:K> := <var:a3> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:a2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:K> = <nat:4> \cdot <var:r> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:a2> ; \\ \{ <var:b> = <var:r> \land <var:a0> = <nat:6> \land <var:K> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:8> \cdot <var:r> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:a0> \\ \{ <var:b> = <var:r> \land <var:K> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:8> \cdot <var:r> ^ <nat:2> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:b> ; <var:a2> := <var:a2> * <var:b> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:K> := <var:a3> ; <var:K> := <var:K> + <var:a2> ; <var:K> := <var:K> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:b> = <var:r> }} <def:poly> {{ <var:K> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:a2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:K> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:a0> = <nat:6> /\ <var:K> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:r> /\ <var:K> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 