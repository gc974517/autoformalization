\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:1> ; <var:k> := <var:s0> \end{verbatim} Given that $ <var:B> = <var:Q> $ prior to the evaluation of this list of commands , it must be that we see $ <var:k> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code can be seen using standard Hoare reasoning . Going forward , the variable binding code \verb | <var:s0> := <nat:1> ; | . This code moves the precondition $ \{ <var:B> = <var:Q> \} $ as the condition $ \{ <var:B> = <var:Q> \land <var:s0> = <nat:1> \} $ . This is deduced with the assignment scheme found in Hoare techniques . Advancing on , we see the assignment code \verb | <var:k> := <var:s0> | . This line forwards the condition $ \{ <var:B> = <var:Q> \land <var:s0> = <nat:1> \} $ toward the postcondition $ \{ <var:B> = <var:Q> \land <var:k> = <nat:1> \} $ . This is guaranteed by the assignment inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:B> = <var:Q> }} <var:s0> := <nat:1> ; <var:k> := <var:s0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 