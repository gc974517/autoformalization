\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:Q> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:Q> ; <var:p2> := <var:p2> * <var:Q> ; <var:v> := <var:p2> ; <var:v> := <var:v> + <var:p1> ; <var:v> := <var:v> + <var:p0> \end{verbatim} Assuming with some natural numbers $ <var:e> $ it to hold that $ <var:Q> = <var:e> $ ahead of evaluating the set of instructions it must be that we see $ <var:v> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is given by typical Hoare logic . Jumping to the following statement contained in the segment of code , the variable binding command \verb | <var:p0> := <nat:7> ; | . This transfers the condition $ \{ <var:Q> = <var:e> \} $ into the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \} $ . Moving onward , the code \verb | <var:p1> := <nat:7> ; | . This statement moves $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \} $ as the postcondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \} $ . Taking a look at the proceeding line of code seen in our program , the variable update statement \verb | <var:p1> := <var:p1> * <var:Q> ; | . This command transfers $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \} $ to the postcondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \} $ . Moving forward , we have the variable update statement giving $ <nat:2> $ toward $ <var:p2>$ . This command advances $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \} $ into the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \} $ . This is given using the assignment inference rule given by Hoare techniques . Advancing to the next step , we see the variable update code \verb | <var:p2> := <var:p2> * <var:Q> ; | . This command takes the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \} $ as the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \times <var:e> \} $ . This is guaranteed with the assignment law defined in typical Hoare techniques . Immediately after , we see the assignment command defining $ <var:p2> * <var:Q> $ as $ <var:p2>$ . This line takes the precondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \times <var:e> \} $ to the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \times <var:e> ^ <nat:2> \} $ . Following , the variable update statement yielding $ <var:p2> $ to $ <var:v>$ . This takes the precondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:p2> = <nat:2> \times <var:e> ^ <nat:2> \} $ into the condition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:v> = <nat:2> \times <var:e> ^ <nat:2> \} $ . This is ensured through the assignment inference rule from usual Hoare reasoning . Following , we see the variable assignmet command assigning $ <var:v> + <var:p1> $ as $ <var:v>$ . This statement forwards the precondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:p1> = <nat:7> \times <var:e> \land <var:v> = <nat:2> \times <var:e> ^ <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:v> = <nat:2> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> \} $ . Moving on , the variable assignmet command giving $ <var:v> + <var:p0$ into $ <var:v>$ . This forwards $ \{ <var:Q> = <var:e> \land <var:p0> = <nat:7> \land <var:v> = <nat:2> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> \} $ into the postcondition $ \{ <var:Q> = <var:e> \land <var:v> = <nat:2> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Q> = <var:e> }} <var:p0> := <nat:7> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:Q> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:Q> ; <var:p2> := <var:p2> * <var:Q> ; <var:v> := <var:p2> ; <var:v> := <var:v> + <var:p1> ; <var:v> := <var:v> + <var:p0> {{ <var:v> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> * <var:e> /\ <var:p2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> * <var:e> /\ <var:p2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> * <var:e> /\ <var:p2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:7> * <var:e> /\ <var:v> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:p0> = <nat:7> /\ <var:v> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:v> = <nat:2> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 