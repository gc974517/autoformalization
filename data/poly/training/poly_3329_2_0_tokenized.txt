\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:1> ; <var:m> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Allowing ( for whole numbers $ <var:i> $ ) it to be that $ <var:r> = <var:i> $ before the execution of our code , it must be that we see $ <var:m> = <nat:1> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives us : \begin{eqnarray} \{ <var:r> = <var:i> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:r> = <var:i> \land <var:S0> = <nat:1> \} \\ <var:m> := <var:S0> \\ \{ <var:r> = <var:i> \land <var:m> = <nat:1> \} \end{eqnarray} Considering the preceding argument , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:1> ; <var:m> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:r> = <var:i> }} <def:poly> {{ <var:m> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:m> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 