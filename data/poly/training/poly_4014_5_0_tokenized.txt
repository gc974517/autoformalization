\begin{document} \begin{theorem} We define a list of commands : \begin{verbatim} <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:r> ; <var:b> := <var:u1> ; <var:b> := <var:b> + <var:u0> \end{verbatim} Allow that $ <var:r> = <var:U> $ ( for any $ <var:U> $ ) ahead of executing the list of instructions , it follows that we have $ <var:b> = <nat:5> \cdot <var:U> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:r> = <var:U> \} \\ <var:u0> := <nat:7> ; \\ \{ <var:r> = <var:U> \land <var:u0> = <nat:7> \} \end{eqnarray} Advancing running our segment of code yields : \begin{eqnarray} <var:u1> := <nat:5> ; \\ \{ <var:r> = <var:U> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> \} \\ <var:u1> := <var:u1> * <var:r> ; \\ \{ <var:r> = <var:U> \land <var:u0> = <nat:7> \land <var:u1> = <nat:5> * <var:U> \} \\ <var:b> := <var:u1> ; \\ \{ <var:r> = <var:U> \land <var:u0> = <nat:7> \land <var:b> = <nat:5> * <var:U> \} \\ <var:b> := <var:b> + <var:u0> \\ \{ <var:r> = <var:U> \land <var:b> = <nat:5> * <var:U> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:r> = <var:U> }} <var:u0> := <nat:7> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:r> ; <var:b> := <var:u1> ; <var:b> := <var:b> + <var:u0> {{ <var:b> = <nat:5> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:u0> = <nat:7> /\ <var:b> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:b> = <nat:5> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 