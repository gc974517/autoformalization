\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:1> ; <var:U> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Given assuming some $ <var:C> $ that we have $ <var:z> = <var:C> $ prior to the execution of our list of commands it must be that $ <var:U> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is accomplished through usual Hoare reasoning . Jumping to the next bit of code contained in the list of instructions , the assignment statement \verb | <var:M0> := <nat:1> ; | . This command advances the condition $ \{ <var:z> = <var:C> \} $ as the postcondition $ \{ <var:z> = <var:C> \land <var:M0> = <nat:1> \} $ . This is deduced through the assignment inference rule from typical Hoare techniques . Stepping through , the environment update statement \verb | <var:U> := <var:M0> | . This line takes the precondition $ \{ <var:z> = <var:C> \land <var:M0> = <nat:1> \} $ as the condition $ \{ <var:z> = <var:C> \land <var:U> = <nat:1> \} $ . This is ensured using the assignment rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:U> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:z> = <var:C> }} <def:poly> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 