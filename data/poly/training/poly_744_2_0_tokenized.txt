\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:7> ; <var:L> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Allow it to be that $ <var:S> = <var:n> $ ahead of interpreting our series of commands it follows that $ <var:L> = <nat:7> $ when series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:n> \} \\ <var:V0> := <nat:7> ; \\ \{ <var:S> = <var:n> \land <var:V0> = <nat:7> \} \\ <var:L> := <var:V0> \\ \{ <var:S> = <var:n> \land <var:L> = <nat:7> \} \end{eqnarray} Using typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:7> ; <var:L> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:S> = <var:n> }} <def:poly> {{ <var:L> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:L> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 