\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:1> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:c> ; <var:A2> := <var:A2> * <var:c> ; <var:A3> := <nat:8> ; <var:A3> := <var:A3> * <var:c> ; <var:A3> := <var:A3> * <var:c> ; <var:A3> := <var:A3> * <var:c> ; <var:i> := <var:A3> ; <var:i> := <var:i> + <var:A2> ; <var:i> := <var:i> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given some positive numbers $ <var:Z> $ ) that we have $ <var:c> = <var:Z> $ ahead of the execution of our code it holds that we have $ <var:i> = <nat:8> \cdot <var:Z> ^ <nat:3> + <nat:8> \cdot <var:Z> ^ <nat:2> + <nat:1> $ when code finishes . \end{theorem} \begin{proof} The proof of our list of instructions is demonstrated by Hoare techniques . Moving forward to the subsequent pieces of code in our series of commands , we have \begin{eqnarray} \{ <var:c> = <var:Z> \} \, <var:A0> := <nat:1> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \} \, <var:A2> := <nat:8> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \} \, <var:A2> := <var:A2> * <var:c> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> \} \, <var:A2> := <var:A2> * <var:c> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \} \end{eqnarray} This is sound through the assignment rule of usual Hoare logic . Going to the next step , we have \begin{eqnarray} \{ <var:c> = <var:Z> \} \, <var:A0> := <nat:1> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \} \end{eqnarray} Stepping through , we see \begin{eqnarray} \{ <var:c> = <var:Z> \} \, <var:A0> := <nat:1> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \} \, <var:A2> := <nat:8> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \} \, <var:A2> := <var:A2> * <var:c> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> \} \, <var:A2> := <var:A2> * <var:c> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \} \, <var:A3> := <nat:8> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:A3> = <nat:8> \} \\ \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:A3> = <nat:8> \} \, <var:A3> := <var:A3> * <var:c> \, \{ <var:c> = <var:Z> \land <var:A0> = <nat:1> \land <var:A2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:A3> = <nat:8> \times <var:Z> \} \end{eqnarray} This is shown to be logically sound using the binding scheme found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:1> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:c> ; <var:A2> := <var:A2> * <var:c> ; <var:A3> := <nat:8> ; <var:A3> := <var:A3> * <var:c> ; <var:A3> := <var:A3> * <var:c> ; <var:A3> := <var:A3> * <var:c> ; <var:i> := <var:A3> ; <var:i> := <var:i> + <var:A2> ; <var:i> := <var:i> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:c> = <var:Z> }} <def:poly> {{ <var:i> = <nat:8> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:A2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:i> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:A0> = <nat:1> /\ <var:i> = <nat:8> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:i> = <nat:8> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 