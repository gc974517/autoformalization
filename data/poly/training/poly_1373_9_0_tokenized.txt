\begin{document} \begin{theorem} Define the following list of commands as follows \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:C> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:C> ; <var:y2> := <var:y2> * <var:C> ; <var:n> := <var:y2> ; <var:n> := <var:n> + <var:y1> ; <var:n> := <var:n> + <var:y0> \end{verbatim} Assume $ <var:C> = <var:D> $ ( given some integers $ <var:D> $ ) before evaluating the set of commands it must be that we see $ <var:n> = <nat:5> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:D> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \} \end{eqnarray} Allowing evaluating this series of commands gives : \begin{eqnarray} <var:y1> := <var:y1> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:D> \} \\ <var:y2> := <nat:5> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:D> \land <var:y2> = <nat:5> \} \\ <var:y2> := <var:y2> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:D> \land <var:y2> = <nat:5> \times <var:D> \} \\ <var:y2> := <var:y2> * <var:C> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:D> \land <var:y2> = <nat:5> \times <var:D> ^ <nat:2> \} \\ <var:n> := <var:y2> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:y1> = <nat:2> \times <var:D> \land <var:n> = <nat:5> \times <var:D> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:y1> ; \\ \{ <var:C> = <var:D> \land <var:y0> = <nat:2> \land <var:n> = <nat:5> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> \} \\ <var:n> := <var:n> + <var:y0> \\ \{ <var:C> = <var:D> \land <var:n> = <nat:5> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> + <nat:2> \} \end{eqnarray} As a result , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <var:y0> := <nat:2> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:C> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:C> ; <var:y2> := <var:y2> * <var:C> ; <var:n> := <var:y2> ; <var:n> := <var:n> + <var:y1> ; <var:n> := <var:n> + <var:y0> {{ <var:n> = <nat:5> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:D> /\ <var:y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:D> /\ <var:y2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:D> /\ <var:y2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:2> * <var:D> /\ <var:n> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:y0> = <nat:2> /\ <var:n> = <nat:5> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:n> = <nat:5> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 