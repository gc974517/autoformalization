\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:E0> := <nat:7> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:r> ; <var:f> := <var:E1> ; <var:f> := <var:f> + <var:E0> \end{verbatim} Assume it to hold that $ <var:r> = <var:W> $ prior to running the set of commands , it must be that we see $ <var:f> = <nat:5> \cdot <var:W> + <nat:7> $ when code segment finishes . \end{theorem} \begin{proof} The argument for our set of commands is shown using typical Hoare techniques . Advancing to the next step , we see \begin{verbatim} { <var:r> = <var:W> } <var:E0> := <nat:7> { <var:r> = <var:W> \land <var:E0> = <nat:7> } { <var:r> = <var:W> \land <var:E0> = <nat:7> } <var:E1> := <nat:5> { <var:r> = <var:W> \land <var:E0> = <nat:7> \land <var:E1> = <nat:5> } { <var:r> = <var:W> \land <var:E0> = <nat:7> \land <var:E1> = <nat:5> } <var:E1> := <var:E1> * <var:r> { <var:r> = <var:W> \land <var:E0> = <nat:7> \land <var:E1> = <nat:5> \times <var:W> } { <var:r> = <var:W> \land <var:E0> = <nat:7> \land <var:E1> = <nat:5> \times <var:W> } <var:f> := <var:E1> { <var:r> = <var:W> \land <var:E0> = <nat:7> \land <var:f> = <nat:5> \times <var:W> } \end{verbatim} Focusing on the subsequent statement found in the series of instructions , we have \begin{verbatim} { <var:r> = <var:W> } <var:E0> := <nat:7> { <var:r> = <var:W> \land <var:E0> = <nat:7> } \end{verbatim} This is known to be sound through the variable update rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <var:E0> := <nat:7> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:r> ; <var:f> := <var:E1> ; <var:f> := <var:f> + <var:E0> {{ <var:f> = <nat:5> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:E0> = <nat:7> /\ <var:E1> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:E0> = <nat:7> /\ <var:f> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:f> = <nat:5> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 