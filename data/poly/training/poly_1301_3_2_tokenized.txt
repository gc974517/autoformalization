\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:4> + <var:O> * <var:g> ; <var:O> := <nat:2> + <var:O> * <var:g> \end{verbatim} Allow that $ <var:g> = <var:v> $ ahead of evaluating the set of commands , it follows that $ <var:O> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is accomplished through the following decorated set of commands . \begin{eqnarray} \{ <var:g> = <var:v> \} \\ <var:O> := <nat:2> ; \\ \{ <var:g> = <var:v> \land <var:O> = <nat:2> \} \\ <var:O> := <nat:4> + <var:O> * <var:g> ; \\ \{ <var:g> = <var:v> \land <var:O> = <nat:2> \cdot <var:v> + <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:g> \\ \{ <var:g> = <var:v> \land <var:O> = <nat:2> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} \end{eqnarray} Using standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:g> = <var:v> }} <var:O> := <nat:2> ; <var:O> := <nat:4> + <var:O> * <var:g> ; <var:O> := <nat:2> + <var:O> * <var:g> {{ <var:O> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:O> = <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:v> /\ <var:O> = <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 