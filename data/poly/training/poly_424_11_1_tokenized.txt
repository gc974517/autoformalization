\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:K> ; <var:l2> := <var:l1> * <var:K> ; <var:l3> := <var:l2> * <var:K> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:4> ; <var:E> := <var:l3> <var:E> := <var:E> + <var:l2> <var:E> := <var:E> + <var:l1> <var:E> := <var:E> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:K> = <var:X> $ , assuming some whole numbers $ <var:X> $ , ahead of the evaluation of this code segment , then we have $ <var:E> = <nat:4> \times <var:X> ^ <nat:3> + <nat:6> \times <var:X> ^ <nat:2> + <nat:9> \times <var:X> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is done by standard Hoare techniques . Honing in on the next lines of codefound in the list of instructions , we see \begin{verbatim} { <var:K> = <var:X> } <var:l1> := <var:K> { <var:K> = <var:X> \land <var:l1> = <var:X> } { <var:K> = <var:X> \land <var:l1> = <var:X> } <var:l2> := <var:l1> * <var:K> { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> } { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> } <var:l3> := <var:l2> * <var:K> { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> } { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> } <var:l0> := <nat:2> { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } <var:l1> := <var:l1> * <nat:9> { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } <var:l2> := <var:l2> * <nat:6> { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } <var:l3> := <var:l3> * <nat:4> { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l3> = <nat:4> \times <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l3> = <nat:4> \times <var:X> ^ <nat:3> \land <var:l0> = <nat:2> } <var:E> := <var:l3{ <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l0> = <nat:2> \land <var:E> = <nat:4> \times <var:X> ^ <nat:3> } { <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l2> = <nat:6> \times <var:X> ^ <nat:2> \land <var:l0> = <nat:2> \land <var:E> = <nat:4> \times <var:X> ^ <nat:3> } <var:E> := <var:E> + <var:l2{ <var:K> = <var:X> \land <var:l1> = <nat:9> \times <var:X> \land <var:l0> = <nat:2> \land <var:E> = <nat:4> \times <var:X> ^ <nat:3> + <nat:6> \times <var:X> ^ <nat:2> } \end{verbatim} Now , we have \begin{verbatim} { <var:K> = <var:X> } <var:l1> := <var:K> { <var:K> = <var:X> \land <var:l1> = <var:X> } { <var:K> = <var:X> \land <var:l1> = <var:X> } <var:l2> := <var:l1> * <var:K> { <var:K> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:K> ; <var:l2> := <var:l1> * <var:K> ; <var:l3> := <var:l2> * <var:K> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:9> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:4> ; <var:E> := <var:l3> <var:E> := <var:E> + <var:l2> <var:E> := <var:E> + <var:l1> <var:E> := <var:E> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <def:poly> {{ <var:E> = <nat:4> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <nat:9> * <var:X> /\ <var:l2> = <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <nat:9> * <var:X> /\ <var:l2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <nat:9> * <var:X> /\ <var:l2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:l3> = <nat:4> * <var:X> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <nat:9> * <var:X> /\ <var:l2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:l0> = <nat:2> /\ <var:E> = <nat:4> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l1> = <nat:9> * <var:X> /\ <var:l0> = <nat:2> /\ <var:E> = <nat:4> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:l0> = <nat:2> /\ <var:E> = <nat:4> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:E> = <nat:4> * <var:X> ^ <nat:3> + <nat:6> * <var:X> ^ <nat:2> + <nat:9> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 