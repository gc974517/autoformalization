\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:z1> := <var:g> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:3> ; <var:h> := <var:z1> <var:h> := <var:h> + <var:z0> \end{verbatim} Assuming $ <var:g> = <var:C> $ ( given every whole numbers $ <var:C> $ ) prior to the evaluation of our list of commands it must be that we have $ <var:h> = <nat:3> \cdot <var:C> + <nat:8> $ . \end{theorem} \begin{proof} The argument for our set of commands is shown with Hoare techniques . Looking at the next command found in the code segment , the assignment code yielding $ <var:g> $ into $ <var:z1>$ . This code transfers the condition $ \{ <var:g> = <var:C> \} $ as $ \{ <var:g> = <var:C> \land <var:z1> = <var:C> \} $ . This is ensured with the assignment rule of typical Hoare techniques . Moving forward , the variable update line letting $ <nat:8> $ into $ <var:z0>$ . This command takes the precondition $ \{ <var:g> = <var:C> \land <var:z1> = <var:C> \} $ as the postcondition $ \{ <var:g> = <var:C> \land <var:z1> = <var:C> \land <var:z0> = <nat:8> \} $ . This is ensured with the assignment law given in standard Hoare techniques . Moving on , we see the variable update command binding $ <var:z1> * <nat:3> $ into $ <var:z1>$ . This takes the condition $ \{ <var:g> = <var:C> \land <var:z1> = <var:C> \land <var:z0> = <nat:8> \} $ toward $ \{ <var:g> = <var:C> \land <var:z1> = <nat:3> \cdot <var:C> \land <var:z0> = <nat:8> \} $ . Going forward , we see the binding line binding $ <var:z1$ to $ <var:h>$ . This line takes the condition $ \{ <var:g> = <var:C> \land <var:z1> = <nat:3> \cdot <var:C> \land <var:z0> = <nat:8> \} $ as the postcondition $ \{ <var:g> = <var:C> \land <var:z0> = <nat:8> \land <var:h> = <nat:3> \cdot <var:C> \} $ . Advancing to the next command in our segment of code , the command \verb | <var:h> := <var:h> + <var:z0> | . This takes the condition $ \{ <var:g> = <var:C> \land <var:z0> = <nat:8> \land <var:h> = <nat:3> \cdot <var:C> \} $ into the condition $ \{ <var:g> = <var:C> \land <var:h> = <nat:3> \cdot <var:C> + <nat:8> \} $ . This is sound by the assignment rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:g> = <var:C> }} <var:z1> := <var:g> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:3> ; <var:h> := <var:z1> <var:h> := <var:h> + <var:z0> {{ <var:h> = <nat:3> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:z1> = <var:C> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:z1> = <nat:3> * <var:C> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:z0> = <nat:8> /\ <var:h> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:C> /\ <var:h> = <nat:3> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 