\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:V> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:V> ; <var:h2> := <var:h2> * <var:V> ; <var:q> := <var:h2> ; <var:q> := <var:q> + <var:h1> ; <var:q> := <var:q> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:V> = <var:C> $ before the evaluation of our code segment then $ <var:q> = <nat:4> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:2> $ after series of commands is done executing . \end{theorem} \begin{proof} Note that the following decorated code . \begin{eqnarray} \{ <var:V> = <var:C> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \} \\ <var:h1> := <nat:9> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \} \\ <var:h1> := <var:h1> * <var:V> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \times <var:C> \} \\ <var:h2> := <nat:4> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \times <var:C> \land <var:h2> = <nat:4> \} \\ <var:h2> := <var:h2> * <var:V> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \times <var:C> \land <var:h2> = <nat:4> \times <var:C> \} \\ <var:h2> := <var:h2> * <var:V> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \times <var:C> \land <var:h2> = <nat:4> \times <var:C> ^ <nat:2> \} \\ <var:q> := <var:h2> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:h1> = <nat:9> \times <var:C> \land <var:q> = <nat:4> \times <var:C> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:h1> ; \\ \{ <var:V> = <var:C> \land <var:h0> = <nat:2> \land <var:q> = <nat:4> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> \} \\ <var:q> := <var:q> + <var:h0> \\ \{ <var:V> = <var:C> \land <var:q> = <nat:4> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:2> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:V> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:V> ; <var:h2> := <var:h2> * <var:V> ; <var:q> := <var:h2> ; <var:q> := <var:q> + <var:h1> ; <var:q> := <var:q> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <def:poly> {{ <var:q> = <nat:4> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> * <var:C> /\ <var:h2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> * <var:C> /\ <var:h2> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> * <var:C> /\ <var:h2> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:9> * <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:h0> = <nat:2> /\ <var:q> = <nat:4> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 