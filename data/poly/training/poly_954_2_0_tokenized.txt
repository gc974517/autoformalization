\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:8> ; <var:c> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allowing $ <var:O> = <var:V> $ prior to the evaluation of our list of instructions it holds that $ <var:c> = <nat:8> $ once code executes . \end{theorem} \begin{proof} The proof of our list of instructions is given through usual Hoare logic . Advancing , we have \verb | { <var:O> = <var:V> } <var:w0> := <nat:8> { <var:O> = <var:V> \land <var:w0> = <nat:8> } | . This is ensured using the assignment scheme from standard Hoare techniques . Next , we see \verb | { <var:O> = <var:V> } <var:w0> := <nat:8> { <var:O> = <var:V> \land <var:w0> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:c> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:O> = <var:V> }} <def:poly> {{ <var:c> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:V> /\ <var:c> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 