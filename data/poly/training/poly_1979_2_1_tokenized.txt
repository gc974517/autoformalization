\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:3> ; <var:Z> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> . Given that we have $ <var:D> = <var:w> $ before the evaluation of this series of instructions then we see $ <var:Z> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the program can be accomplished with standard Hoare techniques . Further , \begin{verbatim} { <var:D> = <var:w> } <var:F0> := <nat:3> { <var:D> = <var:w> \land <var:F0> = <nat:3> } \end{verbatim} This is rigorously given with the variable binding scheme from typical Hoare techniques . Considering the following bit of code in our list of instructions , we have \begin{verbatim} { <var:D> = <var:w> } <var:F0> := <nat:3> { <var:D> = <var:w> \land <var:F0> = <nat:3> } \end{verbatim} This is given through the inference rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:Z> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <def:poly> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 