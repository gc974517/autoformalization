\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:3> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:b> ; <var:p> := <var:U1> ; <var:p> := <var:p> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Assuming it to be that $ <var:b> = <var:n> $ , for all $ <var:n> \in \mathbb{N} $ , before running our list of commands , it holds that we have $ <var:p> = <nat:5> \times <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Observe the following decorated list of commands . \begin{eqnarray} \{ <var:b> = <var:n> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:b> = <var:n> \land <var:U0> = <nat:3> \} \\ <var:U1> := <nat:5> ; \\ \{ <var:b> = <var:n> \land <var:U0> = <nat:3> \land <var:U1> = <nat:5> \} \\ <var:U1> := <var:U1> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:U0> = <nat:3> \land <var:U1> = <nat:5> \times <var:n> \} \\ <var:p> := <var:U1> ; \\ \{ <var:b> = <var:n> \land <var:U0> = <nat:3> \land <var:p> = <nat:5> \times <var:n> \} \\ <var:p> := <var:p> + <var:U0> \\ \{ <var:b> = <var:n> \land <var:p> = <nat:5> \times <var:n> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:b> ; <var:p> := <var:U1> ; <var:p> := <var:p> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:b> = <var:n> }} <def:poly> {{ <var:p> = <nat:5> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:U0> = <nat:3> /\ <var:p> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:p> = <nat:5> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 