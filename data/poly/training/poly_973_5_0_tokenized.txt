\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:z> ; <var:K> := <var:F1> ; <var:K> := <var:K> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:z> = <var:A> $ before the execution of our program , it must be that we see $ <var:K> = <nat:4> \cdot <var:A> + <nat:5> $ when list of commands exits . \end{theorem} \begin{proof} The method of proof for this series of commands is clear through Hoare reasoning . Further , we have the variable assignmet line assigning $ <nat:5> $ to $ <var:F0>$ . This statement redefines the condition $ \{ <var:z> = <var:A> \} $ toward the condition $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \} $ . Taking a look at the next bit of code in our code , the environment update statement binding $ <nat:4> $ into $ <var:F1>$ . This line takes $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \} $ toward $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> \} $ . Moving on to the following statement contained in the set of instructions , we see the assignment line letting $ <var:F1> * <var:z> $ to $ <var:F1>$ . This moves $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> \} $ to the postcondition $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> \times <var:A> \} $ . Considering the next statement in our series of instructions , we see the binding statement defining $ <var:F1> $ to $ <var:K>$ . This moves the condition $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> \times <var:A> \} $ into $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:K> = <nat:4> \times <var:A> \} $ . Advancing on , the assignment code defining $ <var:K> + <var:F0$ toward $ <var:K>$ . This command forwards the condition $ \{ <var:z> = <var:A> \land <var:F0> = <nat:5> \land <var:K> = <nat:4> \times <var:A> \} $ to $ \{ <var:z> = <var:A> \land <var:K> = <nat:4> \times <var:A> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:5> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:z> ; <var:K> := <var:F1> ; <var:K> := <var:K> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:z> = <var:A> }} <def:poly> {{ <var:K> = <nat:4> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F0> = <nat:5> /\ <var:K> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:K> = <nat:4> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 