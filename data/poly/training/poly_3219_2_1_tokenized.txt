\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:9> ; <var:a> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- for some positive integer coefficients $ <var:b> $ --- it to hold that $ <var:E> = <var:b> $ ahead of interpreting the set of commands , it follows that $ <var:a> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:b> \} \\ <var:s0> := <nat:9> ; \\ \{ <var:E> = <var:b> \land <var:s0> = <nat:9> \} \\ <var:a> := <var:s0> \\ \{ <var:E> = <var:b> \land <var:a> = <nat:9> \} \end{eqnarray} Furthering interpreting the list of instructions gives : \begin{eqnarray} \end{eqnarray} Using typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:9> ; <var:a> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:E> = <var:b> }} <def:poly> {{ <var:a> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:b> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:b> /\ <var:a> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 