\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:Y1> := <var:h> ; <var:Y2> := <var:Y1> * <var:h> ; <var:Y3> := <var:Y2> * <var:h> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:Y2> := <var:Y2> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:k> := <var:Y3> <var:k> := <var:k> + <var:Y2> <var:k> := <var:k> + <var:Y1> <var:k> := <var:k> + <var:Y0> \end{verbatim} Assuming it to be that $ <var:h> = <var:F> $ prior to evaluating this set of instructions it follows that $ <var:k> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:6> * <var:F> + <nat:7> $ after list of instructions exits . \end{theorem} \begin{proof} Proving correctness for the list of commands is clear by standard Hoare reasoning . Advancing to the next step , we see the environment update command letting $ <var:h> $ into $ <var:Y1>$ . This forwards $ \{ <var:h> = <var:F> \} $ as the condition $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \} $ . This is deduced through the assignment law given in Hoare logic . Taking a look at the following statement in the segment of code , we see the environment update line \verb | <var:Y2> := <var:Y1> * <var:h> ; | . This statement transfers the precondition $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \} $ as $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \} $ . Moving forward to the next command found in the program , the binding command \verb | <var:Y3> := <var:Y2> * <var:h> ; | . This command transfers $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \} $ to $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \} $ . Advancing to the next step , we see the variable update command \verb | <var:Y0> := <nat:7> ; | . This forwards $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \} $ toward the condition $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ . Advancing to the subsequent command seen in our list of instructions , we have the line binding $ <var:Y1> * <nat:6> $ as $ <var:Y1>$ . This moves $ \{ <var:h> = <var:F> \land <var:Y1> = <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ into $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ . Moving on to the next statement in our list of commands , we see the assignment code yielding $ <var:Y2> * <nat:2> $ to $ <var:Y2>$ . This moves $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ toward the condition $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ . Observing the following bit of code found in our segment of code , the environment update code \verb | <var:Y3> := <var:Y3> * <nat:7> ; | . This line advances $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y3> = <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ toward the postcondition $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ . This is rigorously given with the assignment rule in usual Hoare reasoning . Moving forward to the subsequent piece of code contained in our segment of code , we see the variable update statement \verb | <var:k> := <var:Y3> | . This transfers the precondition $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:F> ^ <nat:3> \land <var:Y0> = <nat:7> \} $ as $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> \} $ . Taking a look at the following piece of code contained in our code segment , we see the variable binding code assigning $ <var:k> + <var:Y2$ to $ <var:k>$ . This advances the condition $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> \} $ toward $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> \} $ . Considering the proceeding statement found in the series of commands , we see the variable assignmet line \verb | <var:k> := <var:k> + <var:Y1> | . This redefines the condition $ \{ <var:h> = <var:F> \land <var:Y1> = <nat:6> \cdot <var:F> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> \} $ to $ \{ <var:h> = <var:F> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:6> \cdot <var:F> \} $ . This is sound using the assignment inference rule found in Hoare logic . Advancing to the next step , we see the variable binding code letting $ <var:k> + <var:Y0$ toward $ <var:k>$ . This moves $ \{ <var:h> = <var:F> \land <var:Y0> = <nat:7> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:6> \cdot <var:F> \} $ into the condition $ \{ <var:h> = <var:F> \land <var:k> = <nat:7> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:6> \cdot <var:F> + <nat:7> \} $ . This is ensured through the assignment law defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <var:Y1> := <var:h> ; <var:Y2> := <var:Y1> * <var:h> ; <var:Y3> := <var:Y2> * <var:h> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:Y2> := <var:Y2> * <nat:2> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:k> := <var:Y3> <var:k> := <var:k> + <var:Y2> <var:k> := <var:k> + <var:Y1> <var:k> := <var:k> + <var:Y0> {{ <var:k> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:6> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <var:F> /\ <var:Y2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <var:F> /\ <var:Y2> = <var:F> ^ <nat:2> /\ <var:Y3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <var:F> /\ <var:Y2> = <var:F> ^ <nat:2> /\ <var:Y3> = <var:F> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <nat:6> * <var:F> /\ <var:Y2> = <var:F> ^ <nat:2> /\ <var:Y3> = <var:F> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <nat:6> * <var:F> /\ <var:Y2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Y3> = <var:F> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <nat:6> * <var:F> /\ <var:Y2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:F> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <nat:6> * <var:F> /\ <var:Y2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:Y0> = <nat:7> /\ <var:k> = <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y1> = <nat:6> * <var:F> /\ <var:Y0> = <nat:7> /\ <var:k> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:Y0> = <nat:7> /\ <var:k> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:k> = <nat:7> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:6> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 