\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:a0> := <nat:4> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:b> ; <var:a2> := <var:a2> * <var:b> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:Y> := <var:a3> ; <var:Y> := <var:Y> + <var:a2> ; <var:Y> := <var:Y> + <var:a0> \end{verbatim} Allow $ <var:b> = <var:A> $ before the evaluation of our series of commands it must be that we have $ <var:Y> = <nat:3> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is done with usual Hoare techniques . Going to the next step , the command \verb | <var:a0> := <nat:4> ; | . This forwards the precondition $ \{ <var:b> = <var:A> \} $ to $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \} $ . Jumping to the next statement found in the code segment , we have the variable binding code \verb | <var:a2> := <nat:1> ; | . This command moves the precondition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \} $ into the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> \} $ . Stepping through , we have the variable update statement defining $ <var:a2> * <var:b> $ into $ <var:a2>$ . This code advances the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> \} $ into the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> \} $ . This is sound by the assignment law obtained from usual Hoare reasoning . After , we see the environment update code defining $ <var:a2> * <var:b> $ into $ <var:a2>$ . This line transfers the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> \} $ to the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \} $ . Focusing on the proceeding piece of code contained in our set of commands , we have the variable binding line \verb | <var:a3> := <nat:3> ; | . This moves the precondition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \} $ as the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> \} $ . Advancing to the following statement found in our set of commands , the code \verb | <var:a3> := <var:a3> * <var:b> ; | . This line takes $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> \} $ toward the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> \} $ . This is rigorously given through the assignment law defined by Hoare techniques . Immediately following , we see the binding line binding $ <var:a3> * <var:b> $ to $ <var:a3>$ . This line advances the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> \} $ as the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> ^ <nat:2> \} $ . Observing the proceeding statement seen in the code , we see the variable update command \verb | <var:a3> := <var:a3> * <var:b> ; | . This line redefines the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> ^ <nat:2> \} $ toward $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> ^ <nat:3> \} $ . Looking at the upcoming line of code in the series of commands , the code \verb | <var:Y> := <var:a3> ; | . This moves the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:a3> = <nat:3> * <var:A> ^ <nat:3> \} $ toward $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:Y> = <nat:3> * <var:A> ^ <nat:3> \} $ . Taking another step toward the upcoming line of code found in the series of instructions , we see the variable binding command letting $ <var:Y> + <var:a2> $ as $ <var:Y>$ . This moves the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:a2> = <nat:1> * <var:A> ^ <nat:2> \land <var:Y> = <nat:3> * <var:A> ^ <nat:3> \} $ to the postcondition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> \} $ . This is sound through the assignment inference rule given by typical Hoare logic . Moving forward to the next step , we see the command defining $ <var:Y> + <var:a0$ to $ <var:Y>$ . This code forwards the condition $ \{ <var:b> = <var:A> \land <var:a0> = <nat:4> \land <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> \} $ as $ \{ <var:b> = <var:A> \land <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> \} $ . This is sound by the assignment law in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:b> = <var:A> }} <var:a0> := <nat:4> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:b> ; <var:a2> := <var:a2> * <var:b> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:a3> := <var:a3> * <var:b> ; <var:Y> := <var:a3> ; <var:Y> := <var:Y> + <var:a2> ; <var:Y> := <var:Y> + <var:a0> {{ <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:a2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:Y> = <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:a0> = <nat:4> /\ <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:A> /\ <var:Y> = <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 