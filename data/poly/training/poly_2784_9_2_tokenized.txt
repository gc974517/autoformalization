\begin{document} \begin{theorem} Take a set of instructions as \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:2> + <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <nat:1> + <var:E> * <var:L> ; <var:E> := <nat:3> + <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <nat:2> + <var:E> * <var:L> ; <var:E> := <nat:3> + <var:E> * <var:L> \end{verbatim} Allowing that we have $ <var:L> = <var:w> $ ( given some $ <var:w> \in \mathbb{N} $ ) prior to the execution of the list of instructions it must be that $ <var:E> = <nat:4> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is shown using typical Hoare logic . Advancing on , \begin{eqnarray} \{ <var:L> = <var:w> \} \, <var:E> := <nat:4> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> \} \, <var:E> := <nat:2> + <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> + <nat:2> \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> + <nat:2> \} \, <var:E> := <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + \} \, <var:E> := <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + \} \, <var:E> := <nat:1> + <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> \} \, <var:E> := <nat:3> + <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> + <nat:3> \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> + <nat:3> \} \, <var:E> := <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + \} \\ \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + \} \, <var:E> := <nat:2> + <var:E> * <var:L> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> \} \end{eqnarray} Taking a look at the upcoming command in our series of commands , we see \begin{eqnarray} \{ <var:L> = <var:w> \} \, <var:E> := <nat:4> \, \{ <var:L> = <var:w> \land <var:E> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:L> = <var:w> }} <var:E> := <nat:4> ; <var:E> := <nat:2> + <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <nat:1> + <var:E> * <var:L> ; <var:E> := <nat:3> + <var:E> * <var:L> ; <var:E> := <var:E> * <var:L> ; <var:E> := <nat:2> + <var:E> * <var:L> ; <var:E> := <nat:3> + <var:E> * <var:L> {{ <var:E> = <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:w> /\ <var:E> = <nat:4> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 