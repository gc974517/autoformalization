\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:F> ; <var:j> := <var:z1> ; <var:j> := <var:j> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:F> = <var:h> $ before the execution of this series of commands , it must be that we have $ <var:j> = <nat:9> * <var:h> + <nat:4> $ when list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for our set of commands is shown by Hoare reasoning . Moving on , we have the environment update statement \verb | <var:z0> := <nat:4> ; | . This forwards $ \{ <var:F> = <var:h> \} $ as $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \} $ . This is shown to be logically sound by the assignment law given by typical Hoare reasoning . Going to the next step , the variable update code \verb | <var:z1> := <nat:9> ; | . This forwards $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \} $ toward $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:z1> = <nat:9> \} $ . This is sound with the assignment law defined in standard Hoare reasoning . Immediately following , we have the assignment command binding $ <var:z1> * <var:F> $ to $ <var:z1>$ . This statement moves the condition $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:z1> = <nat:9> \} $ into $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:z1> = <nat:9> \cdot <var:h> \} $ . This is sound with the assignment inference rule defined in typical Hoare reasoning . Considering the following line of code found in our code segment , the variable update command \verb | <var:j> := <var:z1> ; | . This takes the precondition $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:z1> = <nat:9> \cdot <var:h> \} $ as the postcondition $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:j> = <nat:9> \cdot <var:h> \} $ . Moving onward , the binding line assigning $ <var:j> + <var:z0$ toward $ <var:j>$ . This statement transfers the precondition $ \{ <var:F> = <var:h> \land <var:z0> = <nat:4> \land <var:j> = <nat:9> \cdot <var:h> \} $ toward the condition $ \{ <var:F> = <var:h> \land <var:j> = <nat:9> \cdot <var:h> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:F> ; <var:j> := <var:z1> ; <var:j> := <var:j> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:F> = <var:h> }} <def:poly> {{ <var:j> = <nat:9> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:h> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:h> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:h> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:h> /\ <var:z0> = <nat:4> /\ <var:j> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:h> /\ <var:j> = <nat:9> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 