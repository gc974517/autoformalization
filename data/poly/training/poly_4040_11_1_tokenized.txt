\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l3> := <var:l2> * <var:z> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:2> ; <var:l3> := <var:l3> * <nat:9> ; <var:F> := <var:l3> <var:F> := <var:F> + <var:l2> <var:F> := <var:F> + <var:l1> <var:F> := <var:F> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given any positive coefficients $ <var:p> $ --- that $ <var:z> = <var:p> $ before running this list of instructions it holds that we have $ <var:F> = <nat:9> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> $ once code segment executes . \end{theorem} \begin{proof} Applying standard Hoare techniques results in : \begin{eqnarray} \{ <var:z> = <var:p> \} \\ <var:l1> := <var:z> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <var:p> \} \\ <var:l2> := <var:l1> * <var:z> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <var:p> \land <var:l2> = <var:p> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:z> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <var:p> \land <var:l2> = <var:p> ^ <nat:2> \land <var:l3> = <var:p> ^ <nat:3> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <var:p> \land <var:l2> = <var:p> ^ <nat:2> \land <var:l3> = <var:p> ^ <nat:3> \land <var:l0> = <nat:2> \} \\ <var:l1> := <var:l1> * <nat:1> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <var:p> ^ <nat:2> \land <var:l3> = <var:p> ^ <nat:3> \land <var:l0> = <nat:2> \} \\ <var:l2> := <var:l2> * <nat:2> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:l3> = <var:p> ^ <nat:3> \land <var:l0> = <nat:2> \} \\ <var:l3> := <var:l3> * <nat:9> ; \\ \{ <var:z> = <var:p> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:l3> = <nat:9> \times <var:p> ^ <nat:3> \land <var:l0> = <nat:2> \} \\ <var:F> := <var:l3> \\ \{ <var:z> = <var:p> \land <var:l1> = <nat:1> \times <var:p> \land <var:l2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:l0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:l2> \\ \{ <var:z> = <var:p> \land <var:l1> = <nat:1> \times <var:p> \land <var:l0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:l1> \\ \{ <var:z> = <var:p> \land <var:l0> = <nat:2> \land <var:F> = <nat:9> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> \} \\ <var:F> := <var:F> + <var:l0> \\ \{ <var:z> = <var:p> \land <var:F> = <nat:9> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> \} \end{eqnarray} Hence , the set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l3> := <var:l2> * <var:z> ; <var:l0> := <nat:2> ; <var:l1> := <var:l1> * <nat:1> ; <var:l2> := <var:l2> * <nat:2> ; <var:l3> := <var:l3> * <nat:9> ; <var:F> := <var:l3> <var:F> := <var:F> + <var:l2> <var:F> := <var:F> + <var:l1> <var:F> := <var:F> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:F> = <nat:9> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <var:p> /\ <var:l2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <var:p> /\ <var:l2> = <var:p> ^ <nat:2> /\ <var:l3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <var:p> /\ <var:l2> = <var:p> ^ <nat:2> /\ <var:l3> = <var:p> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <var:p> ^ <nat:2> /\ <var:l3> = <var:p> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:l3> = <var:p> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:l3> = <nat:9> * <var:p> ^ <nat:3> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:l0> = <nat:2> /\ <var:F> = <nat:9> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l1> = <nat:1> * <var:p> /\ <var:l0> = <nat:2> /\ <var:F> = <nat:9> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:l0> = <nat:2> /\ <var:F> = <nat:9> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:F> = <nat:9> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 