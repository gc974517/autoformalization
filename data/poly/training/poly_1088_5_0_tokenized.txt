\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:3> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:U> ; <var:F> := <var:a1> ; <var:F> := <var:F> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:U> = <var:X> $ before the execution of our segment of code , it must be that we have $ <var:F> = <nat:4> * <var:X> + <nat:3> $ once code finishes . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:U> = <var:X> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:3> \} \\ <var:a1> := <nat:4> ; \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:3> \land <var:a1> = <nat:4> \} \\ <var:a1> := <var:a1> * <var:U> ; \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:3> \land <var:a1> = <nat:4> * <var:X> \} \\ <var:F> := <var:a1> ; \\ \{ <var:U> = <var:X> \land <var:a0> = <nat:3> \land <var:F> = <nat:4> * <var:X> \} \\ <var:F> := <var:F> + <var:a0> \\ \{ <var:U> = <var:X> \land <var:F> = <nat:4> * <var:X> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:U> ; <var:F> := <var:a1> ; <var:F> := <var:F> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:U> = <var:X> }} <def:poly> {{ <var:F> = <nat:4> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:3> /\ <var:a1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:a0> = <nat:3> /\ <var:F> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:F> = <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 