\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:o1> := <var:h> ; <var:o2> := <var:o1> * <var:h> ; <var:o3> := <var:o2> * <var:h> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:8> ; <var:U> := <var:o3> <var:U> := <var:U> + <var:o2> <var:U> := <var:U> + <var:o1> <var:U> := <var:U> + <var:o0> \end{verbatim} Allow that $ <var:h> = <var:G> $ , taking $ <var:G> $ , prior to running this set of instructions it must be that we see $ <var:U> = <nat:8> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions is accomplished through typical Hoare logic . Taking a look at the upcoming step contained in our code segment , we see the variable update statement binding $ <var:h> $ into $ <var:o1>$ . This command transfers the condition $ \{ <var:h> = <var:G> \} $ toward the postcondition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \} $ . Next , the variable assignmet line \verb | <var:o2> := <var:o1> * <var:h> ; | . This transfers the precondition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \} $ as the postcondition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \} $ . This is ensured by the assignment law defined in usual Hoare techniques . Observing the proceeding bit of code in the list of commands , we see the binding line yielding $ <var:o2> * <var:h> $ as $ <var:o3>$ . This code moves the precondition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \} $ into the condition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \} $ . Moving forward to the next step , we see the binding code assigning $ <nat:7> $ toward $ <var:o0>$ . This statement forwards the condition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \} $ into the condition $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . This is given with the assignment scheme in usual Hoare techniques . Observing the proceeding command in the set of instructions , we see the code defining $ <var:o1> * <nat:6> $ to $ <var:o1>$ . This line moves $ \{ <var:h> = <var:G> \land <var:o1> = <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ as $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . Considering the following piece of code found in the set of commands , we see the variable assignmet statement \verb | <var:o2> := <var:o2> * <nat:8> ; | . This line moves the condition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ into $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . This is given through the assignment rule given by Hoare logic . Following , we have the environment update code \verb | <var:o3> := <var:o3> * <nat:8> ; | . This line advances the condition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o3> = <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ as the postcondition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ . This is guaranteed using the assignment inference rule defined by Hoare reasoning . After , we see the environment update line \verb | <var:U> := <var:o3> | . This statement redefines the condition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:G> ^ <nat:3> \land <var:o0> = <nat:7> \} $ to $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> \} $ . This is deduced with the assignment scheme given in usual Hoare reasoning . Moving onward , we have the environment update code \verb | <var:U> := <var:U> + <var:o2> | . This takes the precondition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o2> = <nat:8> \times <var:G> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> \} $ to the condition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> + <nat:8> \times <var:G> ^ <nat:2> \} $ . Going to the next step , the variable assignmet code \verb | <var:U> := <var:U> + <var:o1> | . This statement redefines the precondition $ \{ <var:h> = <var:G> \land <var:o1> = <nat:6> \times <var:G> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> + <nat:8> \times <var:G> ^ <nat:2> \} $ as $ \{ <var:h> = <var:G> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> + <nat:8> \times <var:G> ^ <nat:2> + <nat:6> \times <var:G> \} $ . This is shown with the assignment law found in Hoare logic . Moving forward to the next step , we have the command giving $ <var:U> + <var:o0$ into $ <var:U>$ . This moves $ \{ <var:h> = <var:G> \land <var:o0> = <nat:7> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> + <nat:8> \times <var:G> ^ <nat:2> + <nat:6> \times <var:G> \} $ as the condition $ \{ <var:h> = <var:G> \land <var:U> = <nat:8> \times <var:G> ^ <nat:3> + <nat:8> \times <var:G> ^ <nat:2> + <nat:6> \times <var:G> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:o1> := <var:h> ; <var:o2> := <var:o1> * <var:h> ; <var:o3> := <var:o2> * <var:h> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:8> ; <var:U> := <var:o3> <var:U> := <var:U> + <var:o2> <var:U> := <var:U> + <var:o1> <var:U> := <var:U> + <var:o0> {{ <var:U> = <nat:8> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <nat:6> * <var:G> /\ <var:o2> = <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <nat:6> * <var:G> /\ <var:o2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:o3> = <var:G> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <nat:6> * <var:G> /\ <var:o2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <nat:6> * <var:G> /\ <var:o2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:o0> = <nat:7> /\ <var:U> = <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o1> = <nat:6> * <var:G> /\ <var:o0> = <nat:7> /\ <var:U> = <nat:8> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:o0> = <nat:7> /\ <var:U> = <nat:8> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:U> = <nat:8> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 