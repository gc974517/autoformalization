\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:2> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <nat:1> + <var:d> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:P> = <var:M> $ ahead of interpreting our program then we have $ <var:d> = <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:1> $ when series of instructions finishes . \end{theorem} \begin{proof} The argument for this series of commands is done through typical Hoare reasoning . Honing in on the following command found in our list of commands , we see the assignment command \verb | <var:d> := <nat:4> ; | . This line redefines $ \{ <var:P> = <var:M> \} $ as the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \} $ . Going to the next step , we see the variable binding line \verb | <var:d> := <nat:4> + <var:d> * <var:P> ; | . This statement transfers the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \} $ into the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> + <nat:4> \} $ . This is rigorously given using the assignment law given by standard Hoare techniques . Advancing to the subsequent bit of code contained in our program , the variable binding command assigning $ <nat:3> + <var:d> * <var:P> $ toward $ <var:d>$ . This redefines the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> + <nat:4> \} $ into the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:3> \} $ . This is shown using the assignment rule obtained from Hoare techniques . Moving on to the upcoming step contained in the list of commands , we have the variable update statement \verb | <var:d> := <nat:4> + <var:d> * <var:P> ; | . This statement transfers the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:3> \} $ toward the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} $ . This is shown to be logically sound with the assignment law given by typical Hoare reasoning . Moving on to the subsequent line of code found in our set of instructions , the variable assignmet code \verb | <var:d> := <nat:2> + <var:d> * <var:P> ; | . This moves the precondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} $ as the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:2> \} $ . This is rigorously given with the assignment rule given by Hoare reasoning . Taking another step toward the upcoming piece of code seen in the list of commands , we see the assignment code letting $ <nat:3> + <var:d> * <var:P> $ toward $ <var:d>$ . This transfers the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:2> \} $ as the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> \} $ . Moving forward to the subsequent command found in the code segment , the binding statement \verb | <var:d> := <nat:1> + <var:d> * <var:P> | . This redefines the condition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:M> \land <var:d> = <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:4> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:2> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <nat:1> + <var:d> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:P> = <var:M> }} <def:poly> {{ <var:d> = <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:d> = <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 