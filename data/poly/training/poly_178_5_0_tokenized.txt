\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:R> ; <var:I> := <var:r1> ; <var:I> := <var:I> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Allowing that $ <var:R> = <var:p> $ prior to the execution of the list of commands , it holds that we see $ <var:I> = <nat:6> \times <var:p> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:p> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:R> = <var:p> \land <var:r0> = <nat:8> \} \\ <var:r1> := <nat:6> ; \\ \{ <var:R> = <var:p> \land <var:r0> = <nat:8> \land <var:r1> = <nat:6> \} \\ <var:r1> := <var:r1> * <var:R> ; \\ \{ <var:R> = <var:p> \land <var:r0> = <nat:8> \land <var:r1> = <nat:6> * <var:p> \} \\ <var:I> := <var:r1> ; \\ \{ <var:R> = <var:p> \land <var:r0> = <nat:8> \land <var:I> = <nat:6> * <var:p> \} \\ <var:I> := <var:I> + <var:r0> \\ \{ <var:R> = <var:p> \land <var:I> = <nat:6> * <var:p> + <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:8> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:R> ; <var:I> := <var:r1> ; <var:I> := <var:I> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:R> = <var:p> }} <def:poly> {{ <var:I> = <nat:6> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:r0> = <nat:8> /\ <var:I> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:p> /\ <var:I> = <nat:6> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 