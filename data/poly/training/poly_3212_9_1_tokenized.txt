\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:3> ; <var:I3> := <var:I3> * <nat:8> ; <var:t> := <var:I3> <var:t> := <var:t> + <var:I1> <var:t> := <var:t> + <var:I0> \end{verbatim} Assume it to be that $ <var:R> = <var:N> $ ahead of the evaluation of the code segment then $ <var:t> = <nat:8> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> + <nat:9> $ once code segment exits . \end{theorem} \begin{proof} The argument for the list of instructions is done by usual Hoare techniques . Taking another step toward the subsequent line of code contained in our series of instructions , we see the variable binding statement \verb | <var:I1> := <var:R> ; | . This takes the condition $ \{ <var:R> = <var:N> \} $ toward the condition $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \} $ . Moving on to the next step , we see the assignment statement \verb | <var:I2> := <var:I1> * <var:R> ; | . This line takes $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \} $ to the postcondition $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \} $ . Further , we see the binding code \verb | <var:I3> := <var:I2> * <var:R> ; | . This line transfers the precondition $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \} $ . Immediately after , we have the variable binding code binding $ <nat:9> $ to $ <var:I0>$ . This code advances $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \} $ as $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ . This is rigorously given with the assignment law of standard Hoare reasoning . Immediately following , we have the variable update line \verb | <var:I1> := <var:I1> * <nat:3> ; | . This transfers the precondition $ \{ <var:R> = <var:N> \land <var:I1> = <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ as the postcondition $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ . This is ensured with the assignment law given by usual Hoare techniques . Moving forward to the next step , we see the variable binding code letting $ <var:I3> * <nat:8> $ as $ <var:I3>$ . This redefines the precondition $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ to $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ . This is rigorously given using the assignment scheme obtained from typical Hoare techniques . After , we have the variable update code yielding $ <var:I3$ into $ <var:t>$ . This forwards the condition $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:N> ^ <nat:3> \land <var:I0> = <nat:9> \} $ to the postcondition $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I0> = <nat:9> \land <var:t> = <nat:8> \cdot <var:N> ^ <nat:3> \} $ . This is shown by the assignment rule given by Hoare reasoning . Moving on to the next step , we have the assignment code \verb | <var:t> := <var:t> + <var:I1> | . This takes $ \{ <var:R> = <var:N> \land <var:I1> = <nat:3> \cdot <var:N> \land <var:I2> = <var:N> ^ <nat:2> \land <var:I0> = <nat:9> \land <var:t> = <nat:8> \cdot <var:N> ^ <nat:3> \} $ to the condition $ \{ <var:R> = <var:N> \land <var:I0> = <nat:9> \land <var:t> = <nat:8> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> \} $ . Following , we see the variable assignmet line \verb | <var:t> := <var:t> + <var:I0> | . This moves the precondition $ \{ <var:R> = <var:N> \land <var:I0> = <nat:9> \land <var:t> = <nat:8> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> \} $ to $ \{ <var:R> = <var:N> \land <var:t> = <nat:8> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:R> = <var:N> }} <var:I1> := <var:R> ; <var:I2> := <var:I1> * <var:R> ; <var:I3> := <var:I2> * <var:R> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:3> ; <var:I3> := <var:I3> * <nat:8> ; <var:t> := <var:I3> <var:t> := <var:t> + <var:I1> <var:t> := <var:t> + <var:I0> {{ <var:t> = <nat:8> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <var:N> /\ <var:I2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <var:N> /\ <var:I2> = <var:N> ^ <nat:2> /\ <var:I3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <var:N> /\ <var:I2> = <var:N> ^ <nat:2> /\ <var:I3> = <var:N> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <nat:3> * <var:N> /\ <var:I2> = <var:N> ^ <nat:2> /\ <var:I3> = <var:N> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <nat:3> * <var:N> /\ <var:I2> = <var:N> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I1> = <nat:3> * <var:N> /\ <var:I2> = <var:N> ^ <nat:2> /\ <var:I0> = <nat:9> /\ <var:t> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:I0> = <nat:9> /\ <var:t> = <nat:8> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:t> = <nat:8> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 