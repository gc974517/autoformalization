\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:z> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:z> ; <var:C2> := <var:C2> * <var:z> ; <var:n> := <var:C2> ; <var:n> := <var:n> + <var:C1> ; <var:n> := <var:n> + <var:C0> \end{verbatim} Allowing it to be that $ <var:z> = <var:J> $ ( for all $ <var:J> $ ) ahead of interpreting our list of instructions , it must be that $ <var:n> = <nat:3> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:8> $ once list of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is demonstrated by typical Hoare reasoning . Immediately after , \verb | { <var:z> = <var:J> } <var:C0> := <nat:8> { <var:z> = <var:J> \land <var:C0> = <nat:8> } | , \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> } <var:C1> := <nat:2> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> } | and \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> } <var:C1> := <var:C1> * <var:z> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> } | . This is guaranteed with the binding rule defined by typical Hoare logic . Observing the next bits of codeseen in the series of instructions , we have \verb | { <var:z> = <var:J> } <var:C0> := <nat:8> { <var:z> = <var:J> \land <var:C0> = <nat:8> } | , \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> } <var:C1> := <nat:2> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> } | , \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> } <var:C1> := <var:C1> * <var:z> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> } | , \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> } <var:C2> := <nat:3> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> \land <var:C2> = <nat:3> } | , \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> \land <var:C2> = <nat:3> } <var:C2> := <var:C2> * <var:z> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> \land <var:C2> = <nat:3> \times <var:J> } | and \verb | { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> \land <var:C2> = <nat:3> \times <var:J> } <var:C2> := <var:C2> * <var:z> { <var:z> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:2> \times <var:J> \land <var:C2> = <nat:3> \times <var:J> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <var:C0> := <nat:8> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:z> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:z> ; <var:C2> := <var:C2> * <var:z> ; <var:n> := <var:C2> ; <var:n> := <var:n> + <var:C1> ; <var:n> := <var:n> + <var:C0> {{ <var:n> = <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:J> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:J> /\ <var:C2> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:J> /\ <var:C2> = <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:2> * <var:J> /\ <var:n> = <nat:3> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:C0> = <nat:8> /\ <var:n> = <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 