\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:9> ; <var:D> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:I> = <var:Z> $ before the evaluation of this program , then $ <var:D> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given with Hoare techniques . Immediately following , we see the binding code \verb | <var:a0> := <nat:9> ; | . This statement advances the precondition $ \{ <var:I> = <var:Z> \} $ into the postcondition $ \{ <var:I> = <var:Z> \land <var:a0> = <nat:9> \} $ . This is shown to be logically sound with the assignment law from typical Hoare logic . Jumping to the next piece of code in our program , we see the environment update line letting $ <var:a0$ into $ <var:D>$ . This takes the precondition $ \{ <var:I> = <var:Z> \land <var:a0> = <nat:9> \} $ as the postcondition $ \{ <var:I> = <var:Z> \land <var:D> = <nat:9> \} $ . This is deduced through the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:9> ; <var:D> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:D> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:D> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 