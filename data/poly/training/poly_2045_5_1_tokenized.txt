\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:h1> := <var:s> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:F> := <var:h1> <var:F> := <var:F> + <var:h0> \end{verbatim} Assume it to be that $ <var:s> = <var:O> $ prior to the execution of the set of instructions , it follows that $ <var:F> = <nat:1> \times <var:O> + <nat:9> $ after set of instructions executes . \end{theorem} \begin{proof} We can see that the below decorated list of instructions . \begin{eqnarray} \{ <var:s> = <var:O> \} \\ <var:h1> := <var:s> ; \\ \{ <var:s> = <var:O> \land <var:h1> = <var:O> \} \\ <var:h0> := <nat:9> ; \\ \{ <var:s> = <var:O> \land <var:h1> = <var:O> \land <var:h0> = <nat:9> \} \\ <var:h1> := <var:h1> * <nat:1> ; \\ \{ <var:s> = <var:O> \land <var:h1> = <nat:1> \times <var:O> \land <var:h0> = <nat:9> \} \\ <var:F> := <var:h1> \\ \{ <var:s> = <var:O> \land <var:h0> = <nat:9> \land <var:F> = <nat:1> \times <var:O> \} \\ <var:F> := <var:F> + <var:h0> \\ \{ <var:s> = <var:O> \land <var:F> = <nat:1> \times <var:O> + <nat:9> \} \end{eqnarray} The application of Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:s> = <var:O> }} <var:h1> := <var:s> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:F> := <var:h1> <var:F> := <var:F> + <var:h0> {{ <var:F> = <nat:1> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:h1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:h1> = <var:O> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:h1> = <nat:1> * <var:O> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:h0> = <nat:9> /\ <var:F> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:O> /\ <var:F> = <nat:1> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 