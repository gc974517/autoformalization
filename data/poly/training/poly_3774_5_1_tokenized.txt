\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:N1> := <var:G> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:5> ; <var:M> := <var:N1> <var:M> := <var:M> + <var:N0> \end{verbatim} Assume ( given some positive integer coefficients $ <var:O> $ ) it to be that $ <var:G> = <var:O> $ prior to evaluating our list of commands it follows that $ <var:M> = <nat:5> \cdot <var:O> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be seen with the below decorated series of instructions . \begin{eqnarray} \{ <var:G> = <var:O> \} \\ <var:N1> := <var:G> ; \\ \{ <var:G> = <var:O> \land <var:N1> = <var:O> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:G> = <var:O> \land <var:N1> = <var:O> \land <var:N0> = <nat:7> \} \\ <var:N1> := <var:N1> * <nat:5> ; \\ \{ <var:G> = <var:O> \land <var:N1> = <nat:5> \times <var:O> \land <var:N0> = <nat:7> \} \\ <var:M> := <var:N1> \\ \{ <var:G> = <var:O> \land <var:N0> = <nat:7> \land <var:M> = <nat:5> \times <var:O> \} \\ <var:M> := <var:M> + <var:N0> \\ \{ <var:G> = <var:O> \land <var:M> = <nat:5> \times <var:O> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:G> = <var:O> }} <var:N1> := <var:G> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:5> ; <var:M> := <var:N1> <var:M> := <var:M> + <var:N0> {{ <var:M> = <nat:5> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:N1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:N1> = <var:O> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:N1> = <nat:5> * <var:O> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:N0> = <nat:7> /\ <var:M> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:M> = <nat:5> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 