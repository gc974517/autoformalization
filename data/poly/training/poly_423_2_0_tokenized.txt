\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:7> ; <var:J> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:o> = <var:S> $ before executing the program , it holds that we have $ <var:J> = <nat:7> $ when set of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this set of commands can be shown using the following decorated set of commands . \begin{eqnarray} \{ <var:o> = <var:S> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:o> = <var:S> \land <var:T0> = <nat:7> \} \\ <var:J> := <var:T0> \\ \{ <var:o> = <var:S> \land <var:J> = <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:7> ; <var:J> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:o> = <var:S> }} <def:poly> {{ <var:J> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:J> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 