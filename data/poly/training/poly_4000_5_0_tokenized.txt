\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:G> ; <var:M> := <var:k1> ; <var:M> := <var:M> + <var:k0> \end{verbatim} Assuming that we have $ <var:G> = <var:N> $ before the execution of our set of commands then we see $ <var:M> = <nat:5> * <var:N> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is clear through typical Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:k0> := <nat:2> & \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \} \\ \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \} & <var:k1> := <nat:5> & \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \land <var:k1> = <nat:5> \} \\ \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \land <var:k1> = <nat:5> \} & <var:k1> := <var:k1> * <var:G> & \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \land <var:k1> = <nat:5> * <var:N> \} \\ \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \land <var:k1> = <nat:5> * <var:N> \} & <var:M> := <var:k1> & \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \land <var:M> = <nat:5> * <var:N> \} \end{tabular} This is guaranteed using the inference rule found in usual Hoare logic . Taking another step toward the next line seen in our set of commands , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:k0> := <nat:2> & \{ <var:G> = <var:N> \land <var:k0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:G> = <var:N> }} <var:k0> := <nat:2> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:G> ; <var:M> := <var:k1> ; <var:M> := <var:M> + <var:k0> {{ <var:M> = <nat:5> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:k0> = <nat:2> /\ <var:M> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:M> = <nat:5> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 