\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:4> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:d> ; <var:F2> := <var:F2> * <var:d> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:d> ; <var:F3> := <var:F3> * <var:d> ; <var:F3> := <var:F3> * <var:d> ; <var:h> := <var:F3> ; <var:h> := <var:h> + <var:F2> ; <var:h> := <var:h> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given all positive coefficients $ <var:q> $ , it to hold that $ <var:d> = <var:q> $ before interpreting our program , it must be that we have $ <var:h> = <nat:3> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our list of commands can be accomplished with typical Hoare reasoning . Observing the subsequent commands found in the code , we have \verb | { <var:d> = <var:q> } <var:F0> := <nat:4> { <var:d> = <var:q> \land <var:F0> = <nat:4> } | , \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> } <var:F2> := <nat:8> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> } | , \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> } <var:F2> := <var:F2> * <var:d> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> } | , \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> } <var:F2> := <var:F2> * <var:d> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> ^ <nat:2> } | , \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> ^ <nat:2> } <var:F3> := <nat:3> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> ^ <nat:2> \land <var:F3> = <nat:3> } | and \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> ^ <nat:2> \land <var:F3> = <nat:3> } <var:F3> := <var:F3> * <var:d> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> * <var:q> ^ <nat:2> \land <var:F3> = <nat:3> * <var:q> } | . Shifting focus toward the next bit of code seen in our program , \verb | { <var:d> = <var:q> } <var:F0> := <nat:4> { <var:d> = <var:q> \land <var:F0> = <nat:4> } | . Jumping to the upcoming statements found in the set of commands , \verb | { <var:d> = <var:q> } <var:F0> := <nat:4> { <var:d> = <var:q> \land <var:F0> = <nat:4> } | and \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> } <var:F2> := <nat:8> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> } | . This is guaranteed by the variable assignmet law given in standard Hoare techniques . Moving forward to the upcoming lines of codein our series of commands , \verb | { <var:d> = <var:q> } <var:F0> := <nat:4> { <var:d> = <var:q> \land <var:F0> = <nat:4> } | and \verb | { <var:d> = <var:q> \land <var:F0> = <nat:4> } <var:F2> := <nat:8> { <var:d> = <var:q> \land <var:F0> = <nat:4> \land <var:F2> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:d> ; <var:F2> := <var:F2> * <var:d> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:d> ; <var:F3> := <var:F3> * <var:d> ; <var:F3> := <var:F3> * <var:d> ; <var:h> := <var:F3> ; <var:h> := <var:h> + <var:F2> ; <var:h> := <var:h> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <def:poly> {{ <var:h> = <nat:3> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:F3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:F2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:h> = <nat:3> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:F0> = <nat:4> /\ <var:h> = <nat:3> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:h> = <nat:3> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 