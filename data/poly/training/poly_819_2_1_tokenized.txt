\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:2> ; <var:G> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:O> = <var:P> $ prior to the evaluation of the set of instructions it follows that we have $ <var:G> = <nat:2> $ . \end{theorem} \begin{proof} Let the below decorated series of commands . \begin{eqnarray} \{ <var:O> = <var:P> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:O> = <var:P> \land <var:S0> = <nat:2> \} \\ <var:G> := <var:S0> \\ \{ <var:O> = <var:P> \land <var:G> = <nat:2> \} \end{eqnarray} Applying Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:G> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:O> = <var:P> }} <def:poly> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:P> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:P> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 