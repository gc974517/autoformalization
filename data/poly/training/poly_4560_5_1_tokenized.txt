\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:I1> := <var:C> ; <var:I0> := <nat:7> ; <var:I1> := <var:I1> * <nat:7> ; <var:H> := <var:I1> <var:H> := <var:H> + <var:I0> \end{verbatim} Assuming $ <var:C> = <var:w> $ ahead of the execution of the list of commands , it must be that we see $ <var:H> = <nat:7> \cdot <var:w> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:w> \} \\ <var:I1> := <var:C> ; \\ \{ <var:C> = <var:w> \land <var:I1> = <var:w> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:C> = <var:w> \land <var:I1> = <var:w> \land <var:I0> = <nat:7> \} \\ <var:I1> := <var:I1> * <nat:7> ; \\ \{ <var:C> = <var:w> \land <var:I1> = <nat:7> * <var:w> \land <var:I0> = <nat:7> \} \\ <var:H> := <var:I1> \\ \{ <var:C> = <var:w> \land <var:I0> = <nat:7> \land <var:H> = <nat:7> * <var:w> \} \\ <var:H> := <var:H> + <var:I0> \\ \{ <var:C> = <var:w> \land <var:H> = <nat:7> * <var:w> + <nat:7> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:C> = <var:w> }} <var:I1> := <var:C> ; <var:I0> := <nat:7> ; <var:I1> := <var:I1> * <nat:7> ; <var:H> := <var:I1> <var:H> := <var:H> + <var:I0> {{ <var:H> = <nat:7> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:I1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:I1> = <var:w> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:I1> = <nat:7> * <var:w> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:I0> = <nat:7> /\ <var:H> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:w> /\ <var:H> = <nat:7> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 