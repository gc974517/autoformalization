\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:c> ; <var:h2> := <var:h1> * <var:c> ; <var:h3> := <var:h2> * <var:c> ; <var:h0> := <nat:6> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:7> ; <var:i> := <var:h3> <var:i> := <var:i> + <var:h2> <var:i> := <var:i> + <var:h1> <var:i> := <var:i> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:c> = <var:K> $ given every positive integers $ <var:K> $ before the evaluation of the list of commands then we see $ <var:i> = <nat:7> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:6> \times <var:K> + <nat:6> $ once series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:K> \} \\ <var:h1> := <var:c> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <var:K> \} \\ <var:h2> := <var:h1> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <var:K> \land <var:h2> = <var:K> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <var:K> \land <var:h2> = <var:K> ^ <nat:2> \land <var:h3> = <var:K> ^ <nat:3> \} \\ <var:h0> := <nat:6> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <var:K> \land <var:h2> = <var:K> ^ <nat:2> \land <var:h3> = <var:K> ^ <nat:3> \land <var:h0> = <nat:6> \} \\ <var:h1> := <var:h1> * <nat:6> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <nat:6> \cdot <var:K> \land <var:h2> = <var:K> ^ <nat:2> \land <var:h3> = <var:K> ^ <nat:3> \land <var:h0> = <nat:6> \} \\ <var:h2> := <var:h2> * <nat:2> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <nat:6> \cdot <var:K> \land <var:h2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:h3> = <var:K> ^ <nat:3> \land <var:h0> = <nat:6> \} \\ <var:h3> := <var:h3> * <nat:7> ; \\ \{ <var:c> = <var:K> \land <var:h1> = <nat:6> \cdot <var:K> \land <var:h2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:h3> = <nat:7> \cdot <var:K> ^ <nat:3> \land <var:h0> = <nat:6> \} \end{eqnarray} Advancing running the list of instructions returns : \begin{eqnarray} <var:i> := <var:h3> \\ \{ <var:c> = <var:K> \land <var:h1> = <nat:6> \cdot <var:K> \land <var:h2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:h0> = <nat:6> \land <var:i> = <nat:7> \cdot <var:K> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:h2> \\ \{ <var:c> = <var:K> \land <var:h1> = <nat:6> \cdot <var:K> \land <var:h0> = <nat:6> \land <var:i> = <nat:7> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:h1> \\ \{ <var:c> = <var:K> \land <var:h0> = <nat:6> \land <var:i> = <nat:7> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:6> \cdot <var:K> \} \\ <var:i> := <var:i> + <var:h0> \\ \{ <var:c> = <var:K> \land <var:i> = <nat:7> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:6> \cdot <var:K> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:c> ; <var:h2> := <var:h1> * <var:c> ; <var:h3> := <var:h2> * <var:c> ; <var:h0> := <nat:6> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:7> ; <var:i> := <var:h3> <var:i> := <var:i> + <var:h2> <var:i> := <var:i> + <var:h1> <var:i> := <var:i> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <def:poly> {{ <var:i> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <var:K> /\ <var:h2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <var:K> /\ <var:h2> = <var:K> ^ <nat:2> /\ <var:h3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <var:K> /\ <var:h2> = <var:K> ^ <nat:2> /\ <var:h3> = <var:K> ^ <nat:3> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <nat:6> * <var:K> /\ <var:h2> = <var:K> ^ <nat:2> /\ <var:h3> = <var:K> ^ <nat:3> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <nat:6> * <var:K> /\ <var:h2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:h3> = <var:K> ^ <nat:3> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <nat:6> * <var:K> /\ <var:h2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:h3> = <nat:7> * <var:K> ^ <nat:3> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <nat:6> * <var:K> /\ <var:h2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:h0> = <nat:6> /\ <var:i> = <nat:7> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h1> = <nat:6> * <var:K> /\ <var:h0> = <nat:6> /\ <var:i> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:h0> = <nat:6> /\ <var:i> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:i> = <nat:7> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 