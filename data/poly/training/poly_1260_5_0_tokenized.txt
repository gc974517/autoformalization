\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:u> ; <var:w> := <var:L1> ; <var:w> := <var:w> + <var:L0> \end{verbatim} Given that we have $ <var:u> = <var:M> $ for all positive integer coefficients $ <var:M> $ ahead of the execution of the code , it must be that $ <var:w> = <nat:3> \cdot <var:M> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:u> = <var:M> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:u> = <var:M> \land <var:L0> = <nat:5> \} \\ <var:L1> := <nat:3> ; \\ \{ <var:u> = <var:M> \land <var:L0> = <nat:5> \land <var:L1> = <nat:3> \} \\ <var:L1> := <var:L1> * <var:u> ; \\ \{ <var:u> = <var:M> \land <var:L0> = <nat:5> \land <var:L1> = <nat:3> \times <var:M> \} \\ <var:w> := <var:L1> ; \\ \{ <var:u> = <var:M> \land <var:L0> = <nat:5> \land <var:w> = <nat:3> \times <var:M> \} \\ <var:w> := <var:w> + <var:L0> \\ \{ <var:u> = <var:M> \land <var:w> = <nat:3> \times <var:M> + <nat:5> \} \end{eqnarray} Given the above , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:u> = <var:M> }} <var:L0> := <nat:5> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:u> ; <var:w> := <var:L1> ; <var:w> := <var:w> + <var:L0> {{ <var:w> = <nat:3> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:L0> = <nat:5> /\ <var:w> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:w> = <nat:3> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 