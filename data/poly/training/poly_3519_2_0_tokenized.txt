\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:2> ; <var:H> := <var:Q0> \end{verbatim} Given ( given every positive integer coefficients $ <var:O> $ ) it to hold that $ <var:L> = <var:O> $ ahead of executing the code , it must be that we see $ <var:H> = <nat:2> $ once set of commands is done executing . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:L> = <var:O> \} \\ <var:Q0> := <nat:2> ; \\ \{ <var:L> = <var:O> \land <var:Q0> = <nat:2> \} \\ <var:H> := <var:Q0> \\ \{ <var:L> = <var:O> \land <var:H> = <nat:2> \} \end{eqnarray} Given the preceding argument , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:L> = <var:O> }} <var:Q0> := <nat:2> ; <var:H> := <var:Q0> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 