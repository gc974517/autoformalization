\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:c1> := <var:L> ; <var:c2> := <var:c1> * <var:L> ; <var:c3> := <var:c2> * <var:L> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:7> ; <var:c3> := <var:c3> * <nat:6> ; <var:B> := <var:c3> <var:B> := <var:B> + <var:c1> <var:B> := <var:B> + <var:c0> \end{verbatim} Given it to be that $ <var:L> = <var:l> $ before interpreting this segment of code , it holds that we have $ <var:B> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> + <nat:4> $ after set of commands has finished executing . \end{theorem} \begin{proof} The course of logic for the set of commands can be done with standard Hoare reasoning . Next , the environment update code \verb | <var:c1> := <var:L> ; | . This moves the condition $ \{ <var:L> = <var:l> \} $ into the condition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \} $ . This is rigorously given with the assignment scheme of usual Hoare logic . Observing the proceeding piece of code seen in our program , we have the code \verb | <var:c2> := <var:c1> * <var:L> ; | . This command forwards the condition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \} $ as the postcondition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \} $ . Looking at the proceeding statement found in the series of instructions , the variable update code \verb | <var:c3> := <var:c2> * <var:L> ; | . This code advances $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment rule in usual Hoare logic . Advancing to the next step in the set of instructions , we have the variable binding code assigning $ <nat:4> $ to $ <var:c0>$ . This transfers the precondition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \} $ into $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ . This is rigorously given using the assignment law found in usual Hoare techniques . Taking a look at the following step in the segment of code , we have the environment update command \verb | <var:c1> := <var:c1> * <nat:7> ; | . This line transfers the condition $ \{ <var:L> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ as $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ . This is sound with the assignment law found in typical Hoare reasoning . Moving on to the next step , the command assigning $ <var:c3> * <nat:6> $ as $ <var:c3>$ . This code redefines the condition $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ as the condition $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ . This is guaranteed with the assignment law of usual Hoare techniques . Shifting focus toward the proceeding piece of code contained in the list of instructions , we see the variable assignmet command \verb | <var:B> := <var:c3> | . This code forwards $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:l> ^ <nat:3> \land <var:c0> = <nat:4> \} $ as the postcondition $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c0> = <nat:4> \land <var:B> = <nat:6> \times <var:l> ^ <nat:3> \} $ . This is sound using the assignment scheme obtained from Hoare techniques . Stepping through , we see the binding code defining $ <var:B> + <var:c1$ into $ <var:B>$ . This code advances $ \{ <var:L> = <var:l> \land <var:c1> = <nat:7> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c0> = <nat:4> \land <var:B> = <nat:6> \times <var:l> ^ <nat:3> \} $ toward $ \{ <var:L> = <var:l> \land <var:c0> = <nat:4> \land <var:B> = <nat:6> \times <var:l> ^ <nat:3> + <nat:7> \times <var:l> \} $ . This is given through the assignment scheme given by Hoare reasoning . Immediately after , we have the binding statement \verb | <var:B> := <var:B> + <var:c0> | . This code redefines the precondition $ \{ <var:L> = <var:l> \land <var:c0> = <nat:4> \land <var:B> = <nat:6> \times <var:l> ^ <nat:3> + <nat:7> \times <var:l> \} $ to the postcondition $ \{ <var:L> = <var:l> \land <var:B> = <nat:6> \times <var:l> ^ <nat:3> + <nat:7> \times <var:l> + <nat:4> \} $ . This is ensured by the assignment scheme defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:L> = <var:l> }} <var:c1> := <var:L> ; <var:c2> := <var:c1> * <var:L> ; <var:c3> := <var:c2> * <var:L> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:7> ; <var:c3> := <var:c3> * <nat:6> ; <var:B> := <var:c3> <var:B> := <var:B> + <var:c1> <var:B> := <var:B> + <var:c0> {{ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <nat:7> * <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <nat:7> * <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c1> = <nat:7> * <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c0> = <nat:4> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:c0> = <nat:4> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:l> /\ <var:B> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 