\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:G0> := <nat:5> ; <var:S> := <var:G0> \end{verbatim} Allowing --- given some $ <var:o> \in \mathbb{N} $ --- that $ <var:M> = <var:o> $ prior to evaluating our set of instructions , it follows that we have $ <var:S> = <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:M> = <var:o> \} \\ <var:G0> := <nat:5> ; \\ \{ <var:M> = <var:o> \land <var:G0> = <nat:5> \} \\ <var:S> := <var:G0> \\ \{ <var:M> = <var:o> \land <var:S> = <nat:5> \} \end{eqnarray} Given the above , the series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:M> = <var:o> }} <var:G0> := <nat:5> ; <var:S> := <var:G0> {{ <var:S> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:S> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 