\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I3> := <var:I2> * <var:e> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:1> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:2> ; <var:y> := <var:I3> <var:y> := <var:y> + <var:I2> <var:y> := <var:y> + <var:I1> <var:y> := <var:y> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:e> = <var:c> $ prior to interpreting our segment of code it holds that we see $ <var:y> = <nat:2> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:8> $ after list of commands has finished . \end{theorem} \begin{proof} Proving correctness for the segment of code can be accomplished by usual Hoare logic . Further , we have the assignment line letting $ <var:e> $ as $ <var:I1>$ . This statement advances $ \{ <var:e> = <var:c> \} $ toward $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \} $ . This is rigorously given through the assignment rule given by standard Hoare reasoning . Focusing on the next piece of code seen in our code , we see the variable assignmet command \verb | <var:I2> := <var:I1> * <var:e> ; | . This code moves the precondition $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \} $ to the condition $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law in usual Hoare techniques . Taking another step toward the following line found in the code , we see the assignment line binding $ <var:I2> * <var:e> $ as $ <var:I3>$ . This moves $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \} $ toward the condition $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \} $ . Taking a look at the proceeding command in the code , the assignment code \verb | <var:I0> := <nat:8> ; | . This forwards the precondition $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \} $ to $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . Honing in on the proceeding piece of code seen in our code segment , we see the variable assignmet code assigning $ <var:I1> * <nat:1> $ as $ <var:I1>$ . This forwards the precondition $ \{ <var:e> = <var:c> \land <var:I1> = <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ into the condition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . Focusing on the subsequent line in the set of instructions , the assignment code assigning $ <var:I2> * <nat:4> $ as $ <var:I2>$ . This command takes $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ to $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . This is sound through the assignment inference rule of typical Hoare reasoning . Taking a look at the next bit of code seen in our list of commands , we see the variable update command \verb | <var:I3> := <var:I3> * <nat:2> ; | . This advances $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I3> = <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ as the condition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I3> = <nat:2> \cdot <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ . Advancing , the statement defining $ <var:I3$ into $ <var:y>$ . This redefines the precondition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I3> = <nat:2> \cdot <var:c> ^ <nat:3> \land <var:I0> = <nat:8> \} $ as $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> \} $ . Honing in on the next command seen in our code segment , we see the binding code \verb | <var:y> := <var:y> + <var:I2> | . This code forwards the condition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I2> = <nat:4> \cdot <var:c> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> \} $ into the postcondition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> \} $ . Taking another step toward the upcoming line in the set of commands , we have the variable update code \verb | <var:y> := <var:y> + <var:I1> | . This redefines the condition $ \{ <var:e> = <var:c> \land <var:I1> = <nat:1> \cdot <var:c> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:c> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> \} $ . This is given using the assignment law of Hoare logic . Going forward , the variable update statement giving $ <var:y> + <var:I0$ toward $ <var:y>$ . This line advances the condition $ \{ <var:e> = <var:c> \land <var:I0> = <nat:8> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> \} $ as the postcondition $ \{ <var:e> = <var:c> \land <var:y> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + <nat:8> \} $ . This is rigorously given through the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I3> := <var:I2> * <var:e> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:1> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:2> ; <var:y> := <var:I3> <var:y> := <var:y> + <var:I2> <var:y> := <var:y> + <var:I1> <var:y> := <var:y> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <def:poly> {{ <var:y> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <var:c> /\ <var:I2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <var:c> /\ <var:I2> = <var:c> ^ <nat:2> /\ <var:I3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <var:c> /\ <var:I2> = <var:c> ^ <nat:2> /\ <var:I3> = <var:c> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <nat:1> * <var:c> /\ <var:I2> = <var:c> ^ <nat:2> /\ <var:I3> = <var:c> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <nat:1> * <var:c> /\ <var:I2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:I3> = <var:c> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <nat:1> * <var:c> /\ <var:I2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:I3> = <nat:2> * <var:c> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <nat:1> * <var:c> /\ <var:I2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:I0> = <nat:8> /\ <var:y> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I1> = <nat:1> * <var:c> /\ <var:I0> = <nat:8> /\ <var:y> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:I0> = <nat:8> /\ <var:y> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:y> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 