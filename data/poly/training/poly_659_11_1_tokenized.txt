\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:F1> := <var:H> ; <var:F2> := <var:F1> * <var:H> ; <var:F3> := <var:F2> * <var:H> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:6> ; <var:F2> := <var:F2> * <nat:3> ; <var:F3> := <var:F3> * <nat:7> ; <var:b> := <var:F3> <var:b> := <var:b> + <var:F2> <var:b> := <var:b> + <var:F1> <var:b> := <var:b> + <var:F0> \end{verbatim} Assuming for some $ <var:B> $ it to hold that $ <var:H> = <var:B> $ prior to executing the set of commands then we have $ <var:b> = <nat:7> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:6> \cdot <var:B> + <nat:6> $ when program executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:B> \} \\ <var:F1> := <var:H> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <var:B> \} \\ <var:F2> := <var:F1> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \} \\ <var:F0> := <nat:6> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:6> \} \\ <var:F1> := <var:F1> * <nat:6> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <nat:6> * <var:B> \land <var:F2> = <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:6> \} \\ <var:F2> := <var:F2> * <nat:3> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <nat:6> * <var:B> \land <var:F2> = <nat:3> * <var:B> ^ <nat:2> \land <var:F3> = <var:B> ^ <nat:3> \land <var:F0> = <nat:6> \} \\ <var:F3> := <var:F3> * <nat:7> ; \\ \{ <var:H> = <var:B> \land <var:F1> = <nat:6> * <var:B> \land <var:F2> = <nat:3> * <var:B> ^ <nat:2> \land <var:F3> = <nat:7> * <var:B> ^ <nat:3> \land <var:F0> = <nat:6> \} \\ <var:b> := <var:F3> \\ \{ <var:H> = <var:B> \land <var:F1> = <nat:6> * <var:B> \land <var:F2> = <nat:3> * <var:B> ^ <nat:2> \land <var:F0> = <nat:6> \land <var:b> = <nat:7> * <var:B> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:F2> \\ \{ <var:H> = <var:B> \land <var:F1> = <nat:6> * <var:B> \land <var:F0> = <nat:6> \land <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:F1> \\ \{ <var:H> = <var:B> \land <var:F0> = <nat:6> \land <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:6> * <var:B> \} \\ <var:b> := <var:b> + <var:F0> \\ \{ <var:H> = <var:B> \land <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> \} \end{eqnarray} Using typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:H> = <var:B> }} <var:F1> := <var:H> ; <var:F2> := <var:F1> * <var:H> ; <var:F3> := <var:F2> * <var:H> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:6> ; <var:F2> := <var:F2> * <nat:3> ; <var:F3> := <var:F3> * <nat:7> ; <var:b> := <var:F3> <var:b> := <var:b> + <var:F2> <var:b> := <var:b> + <var:F1> <var:b> := <var:b> + <var:F0> {{ <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <nat:6> * <var:B> /\ <var:F2> = <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <nat:6> * <var:B> /\ <var:F2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:F3> = <var:B> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <nat:6> * <var:B> /\ <var:F2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:F3> = <nat:7> * <var:B> ^ <nat:3> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <nat:6> * <var:B> /\ <var:F2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:F0> = <nat:6> /\ <var:b> = <nat:7> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F1> = <nat:6> * <var:B> /\ <var:F0> = <nat:6> /\ <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:F0> = <nat:6> /\ <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:b> = <nat:7> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:6> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 