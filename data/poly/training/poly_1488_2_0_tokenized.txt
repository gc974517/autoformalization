\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:6> ; <var:m> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Allow ( given all $ <var:f> \in \mathbb{N} $ ) $ <var:w> = <var:f> $ before interpreting our list of instructions , it holds that $ <var:m> = <nat:6> $ when code segment is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is demonstrated through standard Hoare logic . Advancing , we see the variable update code \verb | <var:M0> := <nat:6> ; | . This line advances the condition $ \{ <var:w> = <var:f> \} $ as $ \{ <var:w> = <var:f> \land <var:M0> = <nat:6> \} $ . Considering the proceeding line of code found in our series of commands , the variable update command \verb | <var:m> := <var:M0> | . This command redefines $ \{ <var:w> = <var:f> \land <var:M0> = <nat:6> \} $ as the condition $ \{ <var:w> = <var:f> \land <var:m> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:m> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:w> = <var:f> }} <def:poly> {{ <var:m> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:m> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 