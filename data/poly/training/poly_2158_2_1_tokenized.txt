\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:1> ; <var:U> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:R> = <var:k> $ ahead of evaluating this list of commands then we see $ <var:U> = <nat:1> $ after code has executed . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:R> = <var:k> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:R> = <var:k> \land <var:o0> = <nat:1> \} \\ <var:U> := <var:o0> \\ \{ <var:R> = <var:k> \land <var:U> = <nat:1> \} \end{eqnarray} Considering the above , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:1> ; <var:U> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <def:poly> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 