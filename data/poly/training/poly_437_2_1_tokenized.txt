\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:4> ; <var:l> := <var:u0> \end{verbatim} Given that $ <var:y> = <var:G> $ ( given some natural coefficients $ <var:G> $ ) prior to evaluating this set of commands then $ <var:l> = <nat:4> $ after segment of code exits . \end{theorem} \begin{proof} Proving correctness for the code segment is demonstrated with usual Hoare techniques . Focusing on the next line of code found in our list of commands , we see \begin{verbatim} { <var:y> = <var:G> } <var:u0> := <nat:4> { <var:y> = <var:G> \land <var:u0> = <nat:4> } \end{verbatim} Further , \begin{verbatim} { <var:y> = <var:G> } <var:u0> := <nat:4> { <var:y> = <var:G> \land <var:u0> = <nat:4> } \end{verbatim} This is guaranteed by the assignment rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:y> = <var:G> }} <var:u0> := <nat:4> ; <var:l> := <var:u0> {{ <var:l> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:l> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 