\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:4> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:n> ; <var:M> := <var:I1> ; <var:M> := <var:M> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:n> = <var:S> $ ( given some natural coefficients $ <var:S> $ ) before interpreting this program it follows that we see $ <var:M> = <nat:3> \cdot <var:S> + <nat:4> $ after segment of code is done executing . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:n> = <var:S> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:n> = <var:S> \land <var:I0> = <nat:4> \} \\ <var:I1> := <nat:3> ; \\ \{ <var:n> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:3> \} \\ <var:I1> := <var:I1> * <var:n> ; \\ \{ <var:n> = <var:S> \land <var:I0> = <nat:4> \land <var:I1> = <nat:3> \times <var:S> \} \\ <var:M> := <var:I1> ; \\ \{ <var:n> = <var:S> \land <var:I0> = <nat:4> \land <var:M> = <nat:3> \times <var:S> \} \\ <var:M> := <var:M> + <var:I0> \\ \{ <var:n> = <var:S> \land <var:M> = <nat:3> \times <var:S> + <nat:4> \} \end{eqnarray} As a result , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:n> ; <var:M> := <var:I1> ; <var:M> := <var:M> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <def:poly> {{ <var:M> = <nat:3> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:I0> = <nat:4> /\ <var:M> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 