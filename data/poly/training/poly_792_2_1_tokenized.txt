\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:m0> := <nat:7> ; <var:l> := <var:m0> \end{verbatim} Given ( given some positive integers $ <var:i> $ ) it to hold that $ <var:V> = <var:i> $ prior to the evaluation of the set of commands it follows that we see $ <var:l> = <nat:7> $ . \end{theorem} \begin{proof} The proof of the program can be accomplished through Hoare logic . Moving forward to the next step , the binding statement \verb | <var:m0> := <nat:7> ; | . This moves $ \{ <var:V> = <var:i> \} $ into $ \{ <var:V> = <var:i> \land <var:m0> = <nat:7> \} $ . This is shown by the assignment scheme found in Hoare techniques . Jumping to the upcoming line of code in our set of commands , the binding statement \verb | <var:l> := <var:m0> | . This code transfers the condition $ \{ <var:V> = <var:i> \land <var:m0> = <nat:7> \} $ as the postcondition $ \{ <var:V> = <var:i> \land <var:l> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <var:m0> := <nat:7> ; <var:l> := <var:m0> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 