\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:h> ; <var:I> := <var:x1> ; <var:I> := <var:I> + <var:x0> \end{verbatim} Allow $ <var:h> = <var:N> $ prior to running the segment of code , it follows that $ <var:I> = <nat:4> \times <var:N> + <nat:1> $ after set of instructions executes . \end{theorem} \begin{proof} The proof of this code segment is shown through usual Hoare techniques . Considering the following lines contained in our list of commands , \begin{eqnarray} \{ <var:h> = <var:N> \} \, <var:x0> := <nat:1> \, \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \} \\ \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \} \, <var:x1> := <nat:4> \, \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> \} \\ \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> \} \, <var:x1> := <var:x1> * <var:h> \, \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \land <var:x1> = <nat:4> \times <var:N> \} \end{eqnarray} This is shown with the variable binding inference rule from typical Hoare logic . Advancing on , we see \begin{eqnarray} \{ <var:h> = <var:N> \} \, <var:x0> := <nat:1> \, \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \} \end{eqnarray} This is given through the inference rule of typical Hoare techniques . Moving forward to the upcoming piece of code seen in the series of instructions , we see \begin{eqnarray} \{ <var:h> = <var:N> \} \, <var:x0> := <nat:1> \, \{ <var:h> = <var:N> \land <var:x0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:h> = <var:N> }} <var:x0> := <nat:1> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:h> ; <var:I> := <var:x1> ; <var:I> := <var:I> + <var:x0> {{ <var:I> = <nat:4> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:x0> = <nat:1> /\ <var:I> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:I> = <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 