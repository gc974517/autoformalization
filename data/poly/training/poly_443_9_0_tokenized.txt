\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:Q> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Q> ; <var:a2> := <var:a2> * <var:Q> ; <var:m> := <var:a2> ; <var:m> := <var:m> + <var:a1> ; <var:m> := <var:m> + <var:a0> \end{verbatim} Assume , for every positive coefficients $ <var:w> $ , $ <var:Q> = <var:w> $ prior to running this series of instructions , then we have $ <var:m> = <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> $ when code exits . \end{theorem} \begin{proof} Let the following decorated set of instructions . \begin{eqnarray} \{ <var:Q> = <var:w> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \} \\ <var:a1> := <nat:1> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \} \\ <var:a1> := <var:a1> * <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \times <var:w> \} \\ <var:a2> := <nat:3> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \times <var:w> \land <var:a2> = <nat:3> \} \\ <var:a2> := <var:a2> * <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \times <var:w> \land <var:a2> = <nat:3> \times <var:w> \} \\ <var:a2> := <var:a2> * <var:Q> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \times <var:w> \land <var:a2> = <nat:3> \times <var:w> ^ <nat:2> \} \\ <var:m> := <var:a2> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:a1> = <nat:1> \times <var:w> \land <var:m> = <nat:3> \times <var:w> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:a1> ; \\ \{ <var:Q> = <var:w> \land <var:a0> = <nat:4> \land <var:m> = <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> \} \\ <var:m> := <var:m> + <var:a0> \\ \{ <var:Q> = <var:w> \land <var:m> = <nat:3> \times <var:w> ^ <nat:2> + <nat:1> \times <var:w> + <nat:4> \} \end{eqnarray} Using Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <var:a0> := <nat:4> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:Q> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:Q> ; <var:a2> := <var:a2> * <var:Q> ; <var:m> := <var:a2> ; <var:m> := <var:m> + <var:a1> ; <var:m> := <var:m> + <var:a0> {{ <var:m> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:w> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:w> /\ <var:a2> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:w> /\ <var:a2> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:1> * <var:w> /\ <var:m> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:a0> = <nat:4> /\ <var:m> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:m> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 