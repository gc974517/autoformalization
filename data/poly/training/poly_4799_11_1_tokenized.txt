\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:D> ; <var:K2> := <var:K1> * <var:D> ; <var:K3> := <var:K2> * <var:D> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:2> ; <var:d> := <var:K3> <var:d> := <var:d> + <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> \end{verbatim} Assume --- taking positive numbers $ <var:u> $ --- that $ <var:D> = <var:u> $ prior to interpreting the series of instructions , it holds that we see $ <var:d> = <nat:2> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:1> $ after series of commands has finished executing . \end{theorem} \begin{proof} The proof of this set of instructions can be accomplished using standard Hoare reasoning . Moving on , the environment update code binding $ <var:D> $ to $ <var:K1>$ . This forwards $ \{ <var:D> = <var:u> \} $ to the postcondition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \} $ . This is ensured by the assignment law found in typical Hoare reasoning . After , we see the environment update command binding $ <var:K1> * <var:D> $ as $ <var:K2>$ . This forwards the precondition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \} $ as the postcondition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \} $ . This is deduced through the assignment inference rule given in usual Hoare techniques . Now , we have the variable binding statement \verb | <var:K3> := <var:K2> * <var:D> ; | . This forwards $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \} $ . This is ensured by the assignment rule of standard Hoare reasoning . Honing in on the subsequent step contained in our program , we see the environment update command \verb | <var:K0> := <nat:1> ; | . This forwards the condition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \} $ to $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . This is rigorously given with the assignment inference rule given by usual Hoare logic . Taking a look at the subsequent piece of code found in our series of commands , we see the environment update line \verb | <var:K1> := <var:K1> * <nat:2> ; | . This moves the condition $ \{ <var:D> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ as the postcondition $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Moving on , the assignment line defining $ <var:K2> * <nat:3> $ to $ <var:K2>$ . This statement advances the condition $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ to the condition $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Considering the subsequent line seen in the series of instructions , we see the variable update code \verb | <var:K3> := <var:K3> * <nat:2> ; | . This moves $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ into $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ . Following , the environment update line \verb | <var:d> := <var:K3> | . This forwards $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:u> ^ <nat:3> \land <var:K0> = <nat:1> \} $ as $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> \} $ . This is given through the assignment scheme of typical Hoare techniques . Considering the subsequent line contained in the code segment , we have the assignment line \verb | <var:d> := <var:d> + <var:K2> | . This moves $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> \} $ into $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} $ . Moving forward to the next step , we see the assignment statement letting $ <var:d> + <var:K1$ into $ <var:d>$ . This code moves the condition $ \{ <var:D> = <var:u> \land <var:K1> = <nat:2> \cdot <var:u> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:u> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> \} $ . This is shown to be logically sound using the assignment law given by Hoare techniques . Paying attention to the upcoming bit of code seen in the code , we have the line letting $ <var:d> + <var:K0$ into $ <var:d>$ . This command advances $ \{ <var:D> = <var:u> \land <var:K0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> \} $ to the condition $ \{ <var:D> = <var:u> \land <var:d> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <var:K1> := <var:D> ; <var:K2> := <var:K1> * <var:D> ; <var:K3> := <var:K2> * <var:D> ; <var:K0> := <nat:1> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:2> ; <var:d> := <var:K3> <var:d> := <var:d> + <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> {{ <var:d> = <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <nat:2> * <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <nat:2> * <var:u> /\ <var:K2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <nat:2> * <var:u> /\ <var:K2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <nat:2> * <var:u> /\ <var:K2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:K0> = <nat:1> /\ <var:d> = <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K1> = <nat:2> * <var:u> /\ <var:K0> = <nat:1> /\ <var:d> = <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:K0> = <nat:1> /\ <var:d> = <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:d> = <nat:2> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 