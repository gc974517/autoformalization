\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:X> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:5> ; <var:F> := <var:O1> <var:F> := <var:F> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:X> = <var:C> $ prior to evaluating this set of commands it follows that we have $ <var:F> = <nat:5> \cdot <var:C> + <nat:1> $ once list of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is shown using Hoare reasoning . Advancing to the subsequent lines found in our list of commands , \verb | { <var:X> = <var:C> } <var:O1> := <var:X> { <var:X> = <var:C> \land <var:O1> = <var:C> } | and \verb | { <var:X> = <var:C> \land <var:O1> = <var:C> } <var:O0> := <nat:1> { <var:X> = <var:C> \land <var:O1> = <var:C> \land <var:O0> = <nat:1> } | . This is known to be sound through the variable update law from typical Hoare reasoning . Advancing on , we see \verb | { <var:X> = <var:C> } <var:O1> := <var:X> { <var:X> = <var:C> \land <var:O1> = <var:C> } | and \verb | { <var:X> = <var:C> \land <var:O1> = <var:C> } <var:O0> := <nat:1> { <var:X> = <var:C> \land <var:O1> = <var:C> \land <var:O0> = <nat:1> } | . Focusing on the upcoming bit of code in our set of instructions , we have \verb | { <var:X> = <var:C> } <var:O1> := <var:X> { <var:X> = <var:C> \land <var:O1> = <var:C> } | . This is given by the variable assignmet inference rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:X> ; <var:O0> := <nat:1> ; <var:O1> := <var:O1> * <nat:5> ; <var:F> := <var:O1> <var:F> := <var:F> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <def:poly> {{ <var:F> = <nat:5> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:O1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:O1> = <var:C> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:O1> = <nat:5> * <var:C> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:O0> = <nat:1> /\ <var:F> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:F> = <nat:5> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 