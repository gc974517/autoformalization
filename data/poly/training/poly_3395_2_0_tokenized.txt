\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:D0> := <nat:7> ; <var:T> := <var:D0> \end{verbatim} Given it to hold that $ <var:S> = <var:L> $ for any natural numbers $ <var:L> $ prior to running this series of instructions , it holds that we have $ <var:T> = <nat:7> $ when segment of code has terminated . \end{theorem} \begin{proof} Proving correctness for our list of commands is done through typical Hoare logic . Jumping to the following bit of code found in our list of commands , we see the assignment statement assigning $ <nat:7> $ to $ <var:D0>$ . This line advances the precondition $ \{ <var:S> = <var:L> \} $ to $ \{ <var:S> = <var:L> \land <var:D0> = <nat:7> \} $ . This is deduced through the assignment law in Hoare techniques . Taking a look at the subsequent statement in our program , we see the statement defining $ <var:D0$ to $ <var:T>$ . This line redefines the condition $ \{ <var:S> = <var:L> \land <var:D0> = <nat:7> \} $ toward the condition $ \{ <var:S> = <var:L> \land <var:T> = <nat:7> \} $ . This is shown to be logically sound with the assignment rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <var:D0> := <nat:7> ; <var:T> := <var:D0> {{ <var:T> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:T> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 