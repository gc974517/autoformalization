\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:3> ; <var:v> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:M> = <var:j> $ ( given some $ <var:j> $ ) before the evaluation of the set of instructions , it holds that $ <var:v> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is demonstrated with typical Hoare logic . Jumping to the upcoming line seen in the code segment , we see \verb | { <var:M> = <var:j> } <var:x0> := <nat:3> { <var:M> = <var:j> \land <var:x0> = <nat:3> } | . This is ensured through the variable binding inference rule in usual Hoare logic . Moving forward to the next step , we see \verb | { <var:M> = <var:j> } <var:x0> := <nat:3> { <var:M> = <var:j> \land <var:x0> = <nat:3> } | . This is given with the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:v> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:M> = <var:j> }} <def:poly> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:j> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:j> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 