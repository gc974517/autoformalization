\begin{document} \begin{theorem} Take a series of commands as \begin{verbatim} <var:I0> := <nat:5> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:p> ; <var:Q> := <var:I1> ; <var:Q> := <var:Q> + <var:I0> \end{verbatim} Given that $ <var:p> = <var:u> $ --- given positive integer coefficients $ <var:u> $ --- before evaluating our set of instructions , it follows that we see $ <var:Q> = <nat:8> \cdot <var:u> + <nat:5> $ when series of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is clear through standard Hoare logic . Paying attention to the subsequent step in the series of commands , the variable binding line giving $ <nat:5> $ as $ <var:I0>$ . This moves the precondition $ \{ <var:p> = <var:u> \} $ as $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \} $ . Moving onward , the statement yielding $ <nat:8> $ into $ <var:I1>$ . This forwards the condition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \} $ into the postcondition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \} $ . Next , we see the variable binding command \verb | <var:I1> := <var:I1> * <var:p> ; | . This line forwards the precondition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \} $ as the postcondition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> * <var:u> \} $ . Considering the upcoming line of code found in the code segment , the binding command yielding $ <var:I1> $ toward $ <var:Q>$ . This statement takes $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> * <var:u> \} $ to the condition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:Q> = <nat:8> * <var:u> \} $ . This is deduced by the assignment scheme in typical Hoare techniques . Jumping to the following command in the program , we see the variable binding line \verb | <var:Q> := <var:Q> + <var:I0> | . This forwards the condition $ \{ <var:p> = <var:u> \land <var:I0> = <nat:5> \land <var:Q> = <nat:8> * <var:u> \} $ as the condition $ \{ <var:p> = <var:u> \land <var:Q> = <nat:8> * <var:u> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:p> = <var:u> }} <var:I0> := <nat:5> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:p> ; <var:Q> := <var:I1> ; <var:Q> := <var:Q> + <var:I0> {{ <var:Q> = <nat:8> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:I0> = <nat:5> /\ <var:Q> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:Q> = <nat:8> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 