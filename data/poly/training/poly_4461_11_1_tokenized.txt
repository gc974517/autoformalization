\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:S> ; <var:i2> := <var:i1> * <var:S> ; <var:i3> := <var:i2> * <var:S> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:7> ; <var:o> := <var:i3> <var:o> := <var:o> + <var:i2> <var:o> := <var:o> + <var:i1> <var:o> := <var:o> + <var:i0> \end{verbatim} Given it to be that $ <var:S> = <var:c> $ before running the program , then we have $ <var:o> = <nat:7> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:6> \times <var:c> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is accomplished with standard Hoare reasoning . Now , \begin{verbatim} { <var:S> = <var:c> } <var:i1> := <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> } { <var:S> = <var:c> \land <var:i1> = <var:c> } <var:i2> := <var:i1> * <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> } { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> } <var:i3> := <var:i2> * <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> } { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> } <var:i0> := <nat:7> { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } <var:i1> := <var:i1> * <nat:6> { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } <var:i2> := <var:i2> * <nat:2> { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i3> = <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } <var:i3> := <var:i3> * <nat:7> { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i3> = <nat:7> * <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } { <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i3> = <nat:7> * <var:c> ^ <nat:3> \land <var:i0> = <nat:7> } <var:o> := <var:i3{ <var:S> = <var:c> \land <var:i1> = <nat:6> * <var:c> \land <var:i2> = <nat:2> * <var:c> ^ <nat:2> \land <var:i0> = <nat:7> \land <var:o> = <nat:7> * <var:c> ^ <nat:3> } \end{verbatim} This is known to be sound by the environment update rule in usual Hoare logic . Moving on to the next bit of code in our code , we see \begin{verbatim} { <var:S> = <var:c> } <var:i1> := <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> } \end{verbatim} Jumping to the upcoming bits of codein our series of instructions , we have \begin{verbatim} { <var:S> = <var:c> } <var:i1> := <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> } { <var:S> = <var:c> \land <var:i1> = <var:c> } <var:i2> := <var:i1> * <var:S> { <var:S> = <var:c> \land <var:i1> = <var:c> \land <var:i2> = <var:c> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:S> = <var:c> }} <var:i1> := <var:S> ; <var:i2> := <var:i1> * <var:S> ; <var:i3> := <var:i2> * <var:S> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:6> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:7> ; <var:o> := <var:i3> <var:o> := <var:o> + <var:i2> <var:o> := <var:o> + <var:i1> <var:o> := <var:o> + <var:i0> {{ <var:o> = <nat:7> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <var:c> /\ <var:i2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <var:c> /\ <var:i2> = <var:c> ^ <nat:2> /\ <var:i3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <var:c> /\ <var:i2> = <var:c> ^ <nat:2> /\ <var:i3> = <var:c> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <nat:6> * <var:c> /\ <var:i2> = <var:c> ^ <nat:2> /\ <var:i3> = <var:c> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <nat:6> * <var:c> /\ <var:i2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:i3> = <var:c> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <nat:6> * <var:c> /\ <var:i2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:i3> = <nat:7> * <var:c> ^ <nat:3> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <nat:6> * <var:c> /\ <var:i2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:i0> = <nat:7> /\ <var:o> = <nat:7> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i1> = <nat:6> * <var:c> /\ <var:i0> = <nat:7> /\ <var:o> = <nat:7> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:i0> = <nat:7> /\ <var:o> = <nat:7> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:c> /\ <var:o> = <nat:7> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 