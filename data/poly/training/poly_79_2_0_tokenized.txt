\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:s> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming for integers $ <var:Q> $ $ <var:L> = <var:Q> $ ahead of evaluating the series of commands , it must be that $ <var:s> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be given by the following decorated set of instructions . \begin{eqnarray} \{ <var:L> = <var:Q> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:L> = <var:Q> \land <var:E0> = <nat:4> \} \\ <var:s> := <var:E0> \\ \{ <var:L> = <var:Q> \land <var:s> = <nat:4> \} \end{eqnarray} Applying usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:s> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:L> = <var:Q> }} <def:poly> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Q> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 