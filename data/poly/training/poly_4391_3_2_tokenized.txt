\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:4> + <var:P> * <var:v> ; <var:P> := <nat:2> + <var:P> * <var:v> \end{verbatim} Assuming $ <var:v> = <var:t> $ prior to interpreting our list of instructions , it holds that we have $ <var:P> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:2> $ once set of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:t> \} \\ <var:P> := <nat:4> ; \\ \{ <var:v> = <var:t> \land <var:P> = <nat:4> \} \\ <var:P> := <nat:4> + <var:P> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:P> = <nat:4> \times <var:t> + <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:v> \\ \{ <var:v> = <var:t> \land <var:P> = <nat:4> \times <var:t> ^ <nat:2> + <nat:4> \times <var:t> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <var:P> := <nat:4> ; <var:P> := <nat:4> + <var:P> * <var:v> ; <var:P> := <nat:2> + <var:P> * <var:v> {{ <var:P> = <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:P> = <nat:4> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:P> = <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 