\begin{document} \begin{theorem} We define a set of commands : \begin{verbatim} <var:a0> := <nat:9> ; <var:x> := <var:a0> \end{verbatim} Allowing it to be that $ <var:l> = <var:j> $ ahead of the evaluation of the code then we have $ <var:x> = <nat:9> $ once segment of code is done . \end{theorem} \begin{proof} The course of logic for the series of commands is evident with usual Hoare techniques . Going to the next step , we have \begin{verbatim} { <var:l> = <var:j> } <var:a0> := <nat:9> { <var:l> = <var:j> \land <var:a0> = <nat:9> } { <var:l> = <var:j> \land <var:a0> = <nat:9> } <var:x> := <var:a0{ <var:l> = <var:j> \land <var:x> = <nat:9> } \end{verbatim} This is sound using the environment update law obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:l> = <var:j> }} <var:a0> := <nat:9> ; <var:x> := <var:a0> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:j> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 