\begin{document} \begin{theorem} Let the following series of commands as follows \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:v> ; <var:Y> := <nat:3> + <var:Y> * <var:v> ; <var:Y> := <var:Y> * <var:v> ; <var:Y> := <nat:3> + <var:Y> * <var:v> ; <var:Y> := <var:Y> * <var:v> ; <var:Y> := <nat:2> + <var:Y> * <var:v> ; <var:Y> := <nat:4> + <var:Y> * <var:v> ; <var:Y> := <nat:1> + <var:Y> * <var:v> \end{verbatim} Given that $ <var:v> = <var:M> $ prior to executing the series of commands it follows that $ <var:Y> = <nat:1> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands is shown using Hoare logic . Going to the next step , the variable update line assigning $ <nat:1> $ into $ <var:Y>$ . This transfers $ \{ <var:v> = <var:M> \} $ toward the postcondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \} $ . Immediately after , the variable binding statement giving $ <nat:2> + <var:Y> * <var:v> $ toward $ <var:Y>$ . This forwards $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \} $ to the postcondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> + <nat:2> \} $ . Advancing to the next step , we see the environment update statement giving $ <nat:3> + <var:Y> * <var:v> $ to $ <var:Y>$ . This code forwards $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> + <nat:2> \} $ into the condition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> \} $ . Taking a look at the following bit of code contained in the series of instructions , the variable assignmet command assigning $ <var:Y> * <var:v> $ to $ <var:Y>$ . This statement transfers the condition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> \} $ toward the condition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + \} $ . This is given by the assignment law found in Hoare logic . Observing the next piece of code seen in the code , we see the assignment statement giving $ <nat:3> + <var:Y> * <var:v> $ into $ <var:Y>$ . This statement redefines the precondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + \} $ as the postcondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:3> \} $ . This is rigorously given with the assignment inference rule given by Hoare logic . Jumping to the following step in the list of instructions , we see the assignment code giving $ <var:Y> * <var:v> $ as $ <var:Y>$ . This takes $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:3> \} $ into $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> + \} $ . This is sound with the assignment scheme defined in usual Hoare reasoning . Stepping through , we see the environment update statement \verb | <var:Y> := <nat:2> + <var:Y> * <var:v> ; | . This code moves $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> + \} $ to the postcondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \} $ . Moving on to the subsequent piece of code contained in our list of commands , we have the variable binding command \verb | <var:Y> := <nat:4> + <var:Y> * <var:v> ; | . This transfers the precondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \} $ as the condition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> + <nat:4> \} $ . Moving forward to the next step contained in our set of commands , we have the statement defining $ <nat:1> + <var:Y> * <var:v$ as $ <var:Y>$ . This transfers $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> + <nat:4> \} $ into the postcondition $ \{ <var:v> = <var:M> \land <var:Y> = <nat:1> \times <var:M> ^ <nat:8> + <nat:2> \times <var:M> ^ <nat:7> + <nat:3> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> \} $ . This is rigorously given using the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:v> = <var:M> }} <var:Y> := <nat:1> ; <var:Y> := <nat:2> + <var:Y> * <var:v> ; <var:Y> := <nat:3> + <var:Y> * <var:v> ; <var:Y> := <var:Y> * <var:v> ; <var:Y> := <nat:3> + <var:Y> * <var:v> ; <var:Y> := <var:Y> * <var:v> ; <var:Y> := <nat:2> + <var:Y> * <var:v> ; <var:Y> := <nat:4> + <var:Y> * <var:v> ; <var:Y> := <nat:1> + <var:Y> * <var:v> {{ <var:Y> = <nat:1> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:Y> = <nat:1> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 