\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:F1> := <var:n> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:3> ; <var:r> := <var:F1> <var:r> := <var:r> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:n> = <var:P> $ before running this segment of code , it must be that we see $ <var:r> = <nat:3> \times <var:P> + <nat:7> $ . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:n> = <var:P> \} \\ <var:F1> := <var:n> ; \\ \{ <var:n> = <var:P> \land <var:F1> = <var:P> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:n> = <var:P> \land <var:F1> = <var:P> \land <var:F0> = <nat:7> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:n> = <var:P> \land <var:F1> = <nat:3> \cdot <var:P> \land <var:F0> = <nat:7> \} \\ <var:r> := <var:F1> \\ \{ <var:n> = <var:P> \land <var:F0> = <nat:7> \land <var:r> = <nat:3> \cdot <var:P> \} \\ <var:r> := <var:r> + <var:F0> \\ \{ <var:n> = <var:P> \land <var:r> = <nat:3> \cdot <var:P> + <nat:7> \} \end{eqnarray} Thusly , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:n> ; <var:F0> := <nat:7> ; <var:F1> := <var:F1> * <nat:3> ; <var:r> := <var:F1> <var:r> := <var:r> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:n> = <var:P> }} <def:poly> {{ <var:r> = <nat:3> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:F1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:F1> = <var:P> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:F1> = <nat:3> * <var:P> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:F0> = <nat:7> /\ <var:r> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:r> = <nat:3> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 