\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:S> ; <var:W> := <var:P1> ; <var:W> := <var:W> + <var:P0> \end{verbatim} Allowing ( with some $ <var:p> \in \mathbb{N} $ ) $ <var:S> = <var:p> $ before running this set of commands , then we have $ <var:W> = <nat:3> \cdot <var:p> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:S> = <var:p> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:S> = <var:p> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:S> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:S> ; \\ \{ <var:S> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:3> \times <var:p> \} \\ <var:W> := <var:P1> ; \\ \{ <var:S> = <var:p> \land <var:P0> = <nat:2> \land <var:W> = <nat:3> \times <var:p> \} \\ <var:W> := <var:W> + <var:P0> \\ \{ <var:S> = <var:p> \land <var:W> = <nat:3> \times <var:p> + <nat:2> \} \end{eqnarray} Given the preceding argument , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:S> = <var:p> }} <var:P0> := <nat:2> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:S> ; <var:W> := <var:P1> ; <var:W> := <var:W> + <var:P0> {{ <var:W> = <nat:3> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:P0> = <nat:2> /\ <var:W> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:p> /\ <var:W> = <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 