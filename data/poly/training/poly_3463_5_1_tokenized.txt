\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:L> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:5> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:L> = <var:I> $ ( given all $ <var:I> \in \mathbb{N} $ ) ahead of executing our program , it must be that we see $ <var:q> = <nat:5> \cdot <var:I> + <nat:3> $ after set of commands has finished . \end{theorem} \begin{proof} Let this decorated series of commands . \begin{eqnarray} \{ <var:L> = <var:I> \} \\ <var:r1> := <var:L> ; \\ \{ <var:L> = <var:I> \land <var:r1> = <var:I> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:L> = <var:I> \land <var:r1> = <var:I> \land <var:r0> = <nat:3> \} \\ <var:r1> := <var:r1> * <nat:5> ; \\ \{ <var:L> = <var:I> \land <var:r1> = <nat:5> \cdot <var:I> \land <var:r0> = <nat:3> \} \\ <var:q> := <var:r1> \\ \{ <var:L> = <var:I> \land <var:r0> = <nat:3> \land <var:q> = <nat:5> \cdot <var:I> \} \\ <var:q> := <var:q> + <var:r0> \\ \{ <var:L> = <var:I> \land <var:q> = <nat:5> \cdot <var:I> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:L> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:5> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <def:poly> {{ <var:q> = <nat:5> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:r1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:r1> = <var:I> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:r1> = <nat:5> * <var:I> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:r0> = <nat:3> /\ <var:q> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:q> = <nat:5> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 