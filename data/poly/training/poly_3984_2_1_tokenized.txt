\begin{document} \begin{theorem} Define a segment of code : \begin{verbatim} <var:M0> := <nat:3> ; <var:G> := <var:M0> \end{verbatim} Assume that we have $ <var:a> = <var:I> $ ahead of executing the series of commands , it follows that we see $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code is done through usual Hoare reasoning . Advancing to the next step , the variable update code \verb | <var:M0> := <nat:3> ; | . This command redefines the condition $ \{ <var:a> = <var:I> \} $ to $ \{ <var:a> = <var:I> \land <var:M0> = <nat:3> \} $ . Moving on , we have the variable binding line \verb | <var:G> := <var:M0> | . This command transfers the precondition $ \{ <var:a> = <var:I> \land <var:M0> = <nat:3> \} $ toward the condition $ \{ <var:a> = <var:I> \land <var:G> = <nat:3> \} $ . This is deduced with the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:a> = <var:I> }} <var:M0> := <nat:3> ; <var:G> := <var:M0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:I> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 