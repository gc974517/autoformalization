\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:J> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:9> ; <var:a> := <var:T1> <var:a> := <var:a> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assume --- for natural numbers $ <var:t> $ --- it to hold that $ <var:J> = <var:t> $ prior to interpreting the series of instructions it holds that we see $ <var:a> = <nat:9> \cdot <var:t> + <nat:9> $ after list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for the series of commands is clear using typical Hoare logic . Considering the following commands found in our program , \begin{eqnarray} \{ <var:J> = <var:t> \} \, <var:T1> := <var:J> \, \{ <var:J> = <var:t> \land <var:T1> = <var:t> \} \\ \{ <var:J> = <var:t> \land <var:T1> = <var:t> \} \, <var:T0> := <nat:9> \, \{ <var:J> = <var:t> \land <var:T1> = <var:t> \land <var:T0> = <nat:9> \} \\ \{ <var:J> = <var:t> \land <var:T1> = <var:t> \land <var:T0> = <nat:9> \} \, <var:T1> := <var:T1> * <nat:9> \, \{ <var:J> = <var:t> \land <var:T1> = <nat:9> * <var:t> \land <var:T0> = <nat:9> \} \\ \{ <var:J> = <var:t> \land <var:T1> = <nat:9> * <var:t> \land <var:T0> = <nat:9> \} \, <var:a> := <var:T1\, \{ <var:J> = <var:t> \land <var:T0> = <nat:9> \land <var:a> = <nat:9> * <var:t> \} \end{eqnarray} Focusing on the subsequent piece of code contained in our set of commands , \begin{eqnarray} \{ <var:J> = <var:t> \} \, <var:T1> := <var:J> \, \{ <var:J> = <var:t> \land <var:T1> = <var:t> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:J> ; <var:T0> := <nat:9> ; <var:T1> := <var:T1> * <nat:9> ; <var:a> := <var:T1> <var:a> := <var:a> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:J> = <var:t> }} <def:poly> {{ <var:a> = <nat:9> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:T1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:T1> = <var:t> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:T1> = <nat:9> * <var:t> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:T0> = <nat:9> /\ <var:a> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:a> = <nat:9> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 