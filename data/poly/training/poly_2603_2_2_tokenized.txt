\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:c> = <var:O> $ prior to the execution of our list of instructions , then we have $ <var:b> = <nat:4> \times <var:O> + <nat:1> $ after segment of code is done executing . \end{theorem} \begin{proof} Using Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:O> \} \\ <var:b> := <nat:4> ; \\ \{ <var:c> = <var:O> \land <var:b> = <nat:4> \} \\ <var:b> := <nat:1> + <var:b> * <var:c> \\ \{ <var:c> = <var:O> \land <var:b> = <nat:4> \cdot <var:O> + <nat:1> \} \end{eqnarray} As a result , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:c> = <var:O> }} <def:poly> {{ <var:b> = <nat:4> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:b> = <nat:4> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 