\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:D> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:7> ; <var:X> := <var:i1> <var:X> := <var:X> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given some $ <var:y> \in \mathbb{Z}^+ $ --- it to hold that $ <var:D> = <var:y> $ ahead of evaluating this series of commands it must be that we see $ <var:X> = <nat:7> \cdot <var:y> + <nat:7> $ . \end{theorem} \begin{proof} We can see that the below decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:y> \} \\ <var:i1> := <var:D> ; \\ \{ <var:D> = <var:y> \land <var:i1> = <var:y> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:D> = <var:y> \land <var:i1> = <var:y> \land <var:i0> = <nat:7> \} \\ <var:i1> := <var:i1> * <nat:7> ; \\ \{ <var:D> = <var:y> \land <var:i1> = <nat:7> \cdot <var:y> \land <var:i0> = <nat:7> \} \\ <var:X> := <var:i1> \\ \{ <var:D> = <var:y> \land <var:i0> = <nat:7> \land <var:X> = <nat:7> \cdot <var:y> \} \\ <var:X> := <var:X> + <var:i0> \\ \{ <var:D> = <var:y> \land <var:X> = <nat:7> \cdot <var:y> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:D> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:7> ; <var:X> := <var:i1> <var:X> := <var:X> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <def:poly> {{ <var:X> = <nat:7> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:i1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:i1> = <var:y> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:i1> = <nat:7> * <var:y> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:i0> = <nat:7> /\ <var:X> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:X> = <nat:7> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 