\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:3> ; <var:n> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assuming that we have $ <var:m> = <var:S> $ before evaluating our set of instructions it must be that we have $ <var:n> = <nat:3> $ when set of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is clear through standard Hoare techniques . Looking at the following step seen in our series of commands , we see the binding statement assigning $ <nat:3> $ toward $ <var:N0>$ . This takes the precondition $ \{ <var:m> = <var:S> \} $ toward $ \{ <var:m> = <var:S> \land <var:N0> = <nat:3> \} $ . Taking a look at the upcoming bit of code contained in our series of commands , the binding code binding $ <var:N0$ into $ <var:n>$ . This code takes $ \{ <var:m> = <var:S> \land <var:N0> = <nat:3> \} $ toward the condition $ \{ <var:m> = <var:S> \land <var:n> = <nat:3> \} $ . This is deduced using the assignment law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:n> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:m> = <var:S> }} <def:poly> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:S> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 