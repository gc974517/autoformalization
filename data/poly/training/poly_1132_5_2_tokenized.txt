\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:4> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> \end{verbatim} Assuming it to be that $ <var:q> = <var:K> $ for any $ <var:K> \in \mathbb{N} $ prior to evaluating our segment of code it follows that $ <var:F> = <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is shown by usual Hoare techniques . Moving forward , the variable binding line assigning $ <nat:4> $ toward $ <var:F>$ . This code takes the precondition $ \{ <var:q> = <var:K> \} $ into the condition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \} $ . This is given through the assignment inference rule found in usual Hoare logic . Stepping forward , the binding code \verb | <var:F> := <nat:2> + <var:F> * <var:q> ; | . This statement forwards the precondition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \} $ toward the postcondition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> + <nat:2> \} $ . This is known to be sound with the assignment inference rule in usual Hoare reasoning . Taking a look at the upcoming statement contained in the program , we see the variable update line \verb | <var:F> := <nat:1> + <var:F> * <var:q> ; | . This code forwards the precondition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> + <nat:2> \} $ to $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:1> \} $ . Following , we have the binding code defining $ <nat:2> + <var:F> * <var:q> $ into $ <var:F>$ . This statement advances the condition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:1> \} $ into $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:2> \} $ . This is sound through the assignment rule in usual Hoare logic . Immediately after , the variable update code \verb | <var:F> := <nat:3> + <var:F> * <var:q> | . This statement forwards the precondition $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:2> \} $ as $ \{ <var:q> = <var:K> \land <var:F> = <nat:4> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:1> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <var:F> := <nat:4> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:1> + <var:F> * <var:q> ; <var:F> := <nat:2> + <var:F> * <var:q> ; <var:F> := <nat:3> + <var:F> * <var:q> {{ <var:F> = <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:F> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:F> = <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:F> = <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:F> = <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:F> = <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 