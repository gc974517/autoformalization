\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:R0> := <nat:7> ; <var:o> := <var:R0> \end{verbatim} Given that we have $ <var:y> = <var:V> $ --- given any positive numbers $ <var:V> $ --- prior to interpreting this series of instructions it must be that we see $ <var:o> = <nat:7> $ when list of commands finishes . \end{theorem} \begin{proof} The method of proof for our code segment can be shown with usual Hoare logic . Observing the next piece of code contained in our list of commands , we have \begin{eqnarray} \{ <var:y> = <var:V> \} \, <var:R0> := <nat:7> \, \{ <var:y> = <var:V> \land <var:R0> = <nat:7> \} \end{eqnarray} Going to the next step , we have \begin{eqnarray} \{ <var:y> = <var:V> \} \, <var:R0> := <nat:7> \, \{ <var:y> = <var:V> \land <var:R0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:y> = <var:V> }} <var:R0> := <nat:7> ; <var:o> := <var:R0> {{ <var:o> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:o> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 