\begin{document} \begin{theorem} Take a code as \begin{verbatim} <var:g1> := <var:t> ; <var:g2> := <var:g1> * <var:t> ; <var:g3> := <var:g2> * <var:t> ; <var:g0> := <nat:6> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:6> ; <var:e> := <var:g3> <var:e> := <var:e> + <var:g2> <var:e> := <var:e> + <var:g0> \end{verbatim} Allowing that $ <var:t> = <var:p> $ --- for every integers $ <var:p> $ --- prior to the evaluation of this series of commands , it follows that we see $ <var:e> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:t> = <var:p> \} \\ <var:g1> := <var:t> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \} \\ <var:g2> := <var:g1> * <var:t> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:t> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:6> \} \\ <var:g2> := <var:g2> * <nat:2> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:6> \} \\ <var:g3> := <var:g3> * <nat:6> ; \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:g3> = <nat:6> \times <var:p> ^ <nat:3> \land <var:g0> = <nat:6> \} \\ <var:e> := <var:g3> \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <nat:2> \times <var:p> ^ <nat:2> \land <var:g0> = <nat:6> \land <var:e> = <nat:6> \times <var:p> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:g2> \\ \{ <var:t> = <var:p> \land <var:g1> = <var:p> \land <var:g0> = <nat:6> \land <var:e> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:g0> \\ \{ <var:t> = <var:p> \land <var:e> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:6> \} \end{eqnarray} As a consequence , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:t> = <var:p> }} <var:g1> := <var:t> ; <var:g2> := <var:g1> * <var:t> ; <var:g3> := <var:g2> * <var:t> ; <var:g0> := <nat:6> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:6> ; <var:e> := <var:g3> <var:e> := <var:e> + <var:g2> <var:e> := <var:e> + <var:g0> {{ <var:e> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:g3> = <nat:6> * <var:p> ^ <nat:3> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <nat:2> * <var:p> ^ <nat:2> /\ <var:g0> = <nat:6> /\ <var:e> = <nat:6> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g1> = <var:p> /\ <var:g0> = <nat:6> /\ <var:e> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:e> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 