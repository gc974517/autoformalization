\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:h> ; <var:N> := <var:k1> ; <var:N> := <var:N> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assuming that $ <var:h> = <var:G> $ prior to the execution of this code segment , it follows that we have $ <var:N> = <nat:9> \cdot <var:G> + <nat:7> $ after set of instructions is done . \end{theorem} \begin{proof} The method of proof for the list of commands is demonstrated with standard Hoare reasoning . Next , we have \begin{verbatim} { <var:h> = <var:G> } <var:k0> := <nat:7> { <var:h> = <var:G> \land <var:k0> = <nat:7> } { <var:h> = <var:G> \land <var:k0> = <nat:7> } <var:k1> := <nat:9> { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> } { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> } <var:k1> := <var:k1> * <var:h> { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> \cdot <var:G> } { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> \cdot <var:G> } <var:N> := <var:k1> { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:G> } { <var:h> = <var:G> \land <var:k0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:G> } <var:N> := <var:N> + <var:k0{ <var:h> = <var:G> \land <var:N> = <nat:9> \cdot <var:G> + <nat:7> } \end{verbatim} This is ensured using the variable binding rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:h> ; <var:N> := <var:k1> ; <var:N> := <var:N> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <def:poly> {{ <var:N> = <nat:9> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:k0> = <nat:7> /\ <var:N> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:N> = <nat:9> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 