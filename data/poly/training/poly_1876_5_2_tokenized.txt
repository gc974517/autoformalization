\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <var:m> * <var:M> ; <var:m> := <nat:2> + <var:m> * <var:M> ; <var:m> := <nat:1> + <var:m> * <var:M> ; <var:m> := <nat:3> + <var:m> * <var:M> \end{verbatim} Assuming --- assuming some positive numbers $ <var:x> $ --- it to hold that $ <var:M> = <var:x> $ prior to the execution of this series of commands then $ <var:m> = <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:x> \} \\ <var:m> := <nat:3> ; \\ \{ <var:M> = <var:x> \land <var:m> = <nat:3> \} \\ <var:m> := <var:m> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:m> = <nat:3> \times <var:x> + \} \\ <var:m> := <nat:2> + <var:m> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:m> = <nat:3> \times <var:x> ^ <nat:2> + <nat:2> \} \\ <var:m> := <nat:1> + <var:m> * <var:M> ; \\ \{ <var:M> = <var:x> \land <var:m> = <nat:3> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> + <nat:1> \} \\ <var:m> := <nat:3> + <var:m> * <var:M> \\ \{ <var:M> = <var:x> \land <var:m> = <nat:3> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:3> \} \end{eqnarray} Utilizing usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:M> = <var:x> }} <var:m> := <nat:3> ; <var:m> := <var:m> * <var:M> ; <var:m> := <nat:2> + <var:m> * <var:M> ; <var:m> := <nat:1> + <var:m> * <var:M> ; <var:m> := <nat:3> + <var:m> * <var:M> {{ <var:m> = <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:m> = <nat:3> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:m> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:m> = <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:x> /\ <var:m> = <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 