\begin{document} \begin{theorem} Consider a program : \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:e> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:e> ; <var:n2> := <var:n2> * <var:e> ; <var:E> := <var:n2> ; <var:E> := <var:E> + <var:n1> ; <var:E> := <var:E> + <var:n0> \end{verbatim} Assume $ <var:e> = <var:j> $ before interpreting this series of instructions it holds that we have $ <var:E> = <nat:2> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:6> $ after set of commands is done . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:j> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \} \\ <var:n1> := <nat:7> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \} \\ <var:n1> := <var:n1> * <var:e> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \cdot <var:j> \} \\ <var:n2> := <nat:2> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \cdot <var:j> \land <var:n2> = <nat:2> \} \\ <var:n2> := <var:n2> * <var:e> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \cdot <var:j> \land <var:n2> = <nat:2> \cdot <var:j> \} \\ <var:n2> := <var:n2> * <var:e> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \cdot <var:j> \land <var:n2> = <nat:2> \cdot <var:j> ^ <nat:2> \} \\ <var:E> := <var:n2> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:n1> = <nat:7> \cdot <var:j> \land <var:E> = <nat:2> \cdot <var:j> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:n1> ; \\ \{ <var:e> = <var:j> \land <var:n0> = <nat:6> \land <var:E> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> \} \\ <var:E> := <var:E> + <var:n0> \\ \{ <var:e> = <var:j> \land <var:E> = <nat:2> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> + <nat:6> \} \end{eqnarray} Thusly , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:e> = <var:j> }} <var:n0> := <nat:6> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:e> ; <var:n2> := <nat:2> ; <var:n2> := <var:n2> * <var:e> ; <var:n2> := <var:n2> * <var:e> ; <var:E> := <var:n2> ; <var:E> := <var:E> + <var:n1> ; <var:E> := <var:E> + <var:n0> {{ <var:E> = <nat:2> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:j> /\ <var:n2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:j> /\ <var:n2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:j> /\ <var:n2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:7> * <var:j> /\ <var:E> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:n0> = <nat:6> /\ <var:E> = <nat:2> * <var:j> ^ <nat:2> + <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:E> = <nat:2> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 