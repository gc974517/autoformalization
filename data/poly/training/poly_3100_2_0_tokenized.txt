\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:7> ; <var:S> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:x> = <var:J> $ ahead of the execution of our set of commands , it must be that we have $ <var:S> = <nat:7> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:x> = <var:J> \} \\ <var:V0> := <nat:7> ; \\ \{ <var:x> = <var:J> \land <var:V0> = <nat:7> \} \\ <var:S> := <var:V0> \\ \{ <var:x> = <var:J> \land <var:S> = <nat:7> \} \end{eqnarray} Considering the preceding argument , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:7> ; <var:S> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:x> = <var:J> }} <def:poly> {{ <var:S> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:S> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 