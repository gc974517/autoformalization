\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:8> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:k> ; <var:x2> := <nat:6> ; <var:x2> := <var:x2> * <var:k> ; <var:x2> := <var:x2> * <var:k> ; <var:q> := <var:x2> ; <var:q> := <var:q> + <var:x1> ; <var:q> := <var:q> + <var:x0> \end{verbatim} Assume ( given natural numbers $ <var:F> $ ) $ <var:k> = <var:F> $ before executing our series of instructions , it follows that we see $ <var:q> = <nat:6> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:8> $ when list of instructions has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment is given using typical Hoare techniques . Further , the variable binding statement \verb | <var:x0> := <nat:8> ; | . This line redefines $ \{ <var:k> = <var:F> \} $ to $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \} $ . Keeping momentum , the variable update code defining $ <nat:1> $ to $ <var:x1>$ . This redefines $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \} $ toward the condition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> \} $ . This is known to be sound using the assignment inference rule in standard Hoare logic . Taking another step toward the following statement in the list of commands , we have the environment update code \verb | <var:x1> := <var:x1> * <var:k> ; | . This code forwards the precondition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> \} $ as $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \} $ . Now , we see the environment update code letting $ <nat:6> $ toward $ <var:x2>$ . This forwards the precondition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \} $ into the condition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> \} $ . This is guaranteed with the assignment rule defined in usual Hoare techniques . Moving forward to the next line contained in the code , we have the variable update command \verb | <var:x2> := <var:x2> * <var:k> ; | . This takes the precondition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> \} $ into $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> * <var:F> \} $ . Honing in on the next bit of code seen in our list of instructions , we see the variable update statement \verb | <var:x2> := <var:x2> * <var:k> ; | . This code transfers the condition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> * <var:F> \} $ toward the postcondition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> * <var:F> ^ <nat:2> \} $ . Advancing to the next step , we see the variable assignmet statement \verb | <var:q> := <var:x2> ; | . This code transfers $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <nat:6> * <var:F> ^ <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:q> = <nat:6> * <var:F> ^ <nat:2> \} $ . Advancing on , we have the binding statement \verb | <var:q> := <var:q> + <var:x1> ; | . This statement takes the condition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:x1> = <nat:1> * <var:F> \land <var:q> = <nat:6> * <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> \} $ . This is deduced with the assignment scheme found in standard Hoare reasoning . Following , we see the binding statement \verb | <var:q> := <var:q> + <var:x0> | . This transfers $ \{ <var:k> = <var:F> \land <var:x0> = <nat:8> \land <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> \} $ toward the condition $ \{ <var:k> = <var:F> \land <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:8> \} $ . This is known to be sound using the assignment scheme given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:k> = <var:F> }} <var:x0> := <nat:8> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:k> ; <var:x2> := <nat:6> ; <var:x2> := <var:x2> * <var:k> ; <var:x2> := <var:x2> * <var:k> ; <var:q> := <var:x2> ; <var:q> := <var:q> + <var:x1> ; <var:q> := <var:q> + <var:x0> {{ <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:x1> = <nat:1> * <var:F> /\ <var:q> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:x0> = <nat:8> /\ <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:q> = <nat:6> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 