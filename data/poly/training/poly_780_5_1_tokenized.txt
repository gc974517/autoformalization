\begin{document} \begin{theorem} We define a list of instructions as follows \begin{verbatim} <var:s1> := <var:m> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:1> ; <var:B> := <var:s1> <var:B> := <var:B> + <var:s0> \end{verbatim} Given $ <var:m> = <var:v> $ --- with some natural coefficients $ <var:v> $ --- before running the code segment then $ <var:B> = <nat:1> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} We can see that the following decorated list of instructions . \begin{eqnarray} \{ <var:m> = <var:v> \} \\ <var:s1> := <var:m> ; \\ \{ <var:m> = <var:v> \land <var:s1> = <var:v> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:m> = <var:v> \land <var:s1> = <var:v> \land <var:s0> = <nat:1> \} \\ <var:s1> := <var:s1> * <nat:1> ; \\ \{ <var:m> = <var:v> \land <var:s1> = <nat:1> \times <var:v> \land <var:s0> = <nat:1> \} \\ <var:B> := <var:s1> \\ \{ <var:m> = <var:v> \land <var:s0> = <nat:1> \land <var:B> = <nat:1> \times <var:v> \} \\ <var:B> := <var:B> + <var:s0> \\ \{ <var:m> = <var:v> \land <var:B> = <nat:1> \times <var:v> + <nat:1> \} \end{eqnarray} The application of Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:m> = <var:v> }} <var:s1> := <var:m> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:1> ; <var:B> := <var:s1> <var:B> := <var:B> + <var:s0> {{ <var:B> = <nat:1> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:s1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:s1> = <var:v> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:s0> = <nat:1> /\ <var:B> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:v> /\ <var:B> = <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 