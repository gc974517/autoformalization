\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:x> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:1> ; <var:p> := <var:B1> <var:p> := <var:p> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assume that $ <var:x> = <var:s> $ before the evaluation of the series of commands , it holds that we see $ <var:p> = <nat:1> \cdot <var:s> + <nat:5> $ when series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:s> \} \\ <var:B1> := <var:x> ; \\ \{ <var:x> = <var:s> \land <var:B1> = <var:s> \} \\ <var:B0> := <nat:5> ; \\ \{ <var:x> = <var:s> \land <var:B1> = <var:s> \land <var:B0> = <nat:5> \} \\ <var:B1> := <var:B1> * <nat:1> ; \\ \{ <var:x> = <var:s> \land <var:B1> = <nat:1> * <var:s> \land <var:B0> = <nat:5> \} \\ <var:p> := <var:B1> \\ \{ <var:x> = <var:s> \land <var:B0> = <nat:5> \land <var:p> = <nat:1> * <var:s> \} \\ <var:p> := <var:p> + <var:B0> \\ \{ <var:x> = <var:s> \land <var:p> = <nat:1> * <var:s> + <nat:5> \} \end{eqnarray} The application of standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:x> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:1> ; <var:p> := <var:B1> <var:p> := <var:p> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:x> = <var:s> }} <def:poly> {{ <var:p> = <nat:1> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:B1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:B1> = <var:s> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:B1> = <nat:1> * <var:s> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:B0> = <nat:5> /\ <var:p> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:s> /\ <var:p> = <nat:1> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 