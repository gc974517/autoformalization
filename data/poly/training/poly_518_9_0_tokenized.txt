\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:d> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:d> ; <var:I2> := <var:I2> * <var:d> ; <var:j> := <var:I2> ; <var:j> := <var:j> + <var:I1> ; <var:j> := <var:j> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:d> = <var:U> $ before interpreting the segment of code , it must be that we see $ <var:j> = <nat:9> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:9> $ after series of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is given through the following decorated code . \begin{eqnarray} \{ <var:d> = <var:U> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:4> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \} \\ <var:I1> := <var:I1> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \cdot <var:U> \} \\ <var:I2> := <nat:9> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \cdot <var:U> \land <var:I2> = <nat:9> \} \\ <var:I2> := <var:I2> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \cdot <var:U> \land <var:I2> = <nat:9> \cdot <var:U> \} \\ <var:I2> := <var:I2> * <var:d> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \cdot <var:U> \land <var:I2> = <nat:9> \cdot <var:U> ^ <nat:2> \} \\ <var:j> := <var:I2> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \cdot <var:U> \land <var:j> = <nat:9> \cdot <var:U> ^ <nat:2> \} \end{eqnarray} Allowing interpreting this list of instructions returns : \begin{eqnarray} <var:j> := <var:j> + <var:I1> ; \\ \{ <var:d> = <var:U> \land <var:I0> = <nat:9> \land <var:j> = <nat:9> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} \\ <var:j> := <var:j> + <var:I0> \\ \{ <var:d> = <var:U> \land <var:j> = <nat:9> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:9> \} \end{eqnarray} Advancing evaluating the code results in : \begin{eqnarray} \end{eqnarray} The application of Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:d> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:d> ; <var:I2> := <var:I2> * <var:d> ; <var:j> := <var:I2> ; <var:j> := <var:j> + <var:I1> ; <var:j> := <var:j> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <def:poly> {{ <var:j> = <nat:9> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:U> /\ <var:I2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:U> /\ <var:I2> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:U> /\ <var:I2> = <nat:9> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:U> /\ <var:j> = <nat:9> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:I0> = <nat:9> /\ <var:j> = <nat:9> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:j> = <nat:9> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 