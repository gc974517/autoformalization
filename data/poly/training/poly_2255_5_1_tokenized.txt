\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:H> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:9> ; <var:s> := <var:z1> <var:s> := <var:s> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Given it to be that $ <var:H> = <var:r> $ ahead of executing our list of commands it follows that we have $ <var:s> = <nat:9> \times <var:r> + <nat:8> $ after code terminates . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:H> = <var:r> \} \\ <var:z1> := <var:H> ; \\ \{ <var:H> = <var:r> \land <var:z1> = <var:r> \} \\ <var:z0> := <nat:8> ; \\ \{ <var:H> = <var:r> \land <var:z1> = <var:r> \land <var:z0> = <nat:8> \} \\ <var:z1> := <var:z1> * <nat:9> ; \\ \{ <var:H> = <var:r> \land <var:z1> = <nat:9> \cdot <var:r> \land <var:z0> = <nat:8> \} \\ <var:s> := <var:z1> \\ \{ <var:H> = <var:r> \land <var:z0> = <nat:8> \land <var:s> = <nat:9> \cdot <var:r> \} \\ <var:s> := <var:s> + <var:z0> \\ \{ <var:H> = <var:r> \land <var:s> = <nat:9> \cdot <var:r> + <nat:8> \} \end{eqnarray} Hence , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:H> ; <var:z0> := <nat:8> ; <var:z1> := <var:z1> * <nat:9> ; <var:s> := <var:z1> <var:s> := <var:s> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:H> = <var:r> }} <def:poly> {{ <var:s> = <nat:9> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:z1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:z1> = <var:r> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:z1> = <nat:9> * <var:r> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:z0> = <nat:8> /\ <var:s> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:r> /\ <var:s> = <nat:9> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 