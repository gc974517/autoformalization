\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:9> ; <var:c> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Assuming assuming some positive integer coefficients $ <var:q> $ $ <var:l> = <var:q> $ ahead of evaluating this set of commands it must be that we have $ <var:c> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands can be shown through Hoare logic . Advancing to the subsequent statement contained in the program , we have the variable binding code \verb | <var:o0> := <nat:9> ; | . This takes $ \{ <var:l> = <var:q> \} $ as $ \{ <var:l> = <var:q> \land <var:o0> = <nat:9> \} $ . Keeping momentum , the variable assignmet statement letting $ <var:o0$ as $ <var:c>$ . This forwards the precondition $ \{ <var:l> = <var:q> \land <var:o0> = <nat:9> \} $ into the postcondition $ \{ <var:l> = <var:q> \land <var:c> = <nat:9> \} $ . This is ensured using the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:9> ; <var:c> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:l> = <var:q> }} <def:poly> {{ <var:c> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:c> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 