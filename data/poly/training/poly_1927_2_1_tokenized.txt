\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:4> ; <var:G> := <var:A0> \end{verbatim} Assuming it to hold that $ <var:g> = <var:c> $ ahead of evaluating this program , it follows that we see $ <var:G> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this series of commands can be seen by typical Hoare logic . Stepping through , we see \begin{verbatim} { <var:g> = <var:c> } <var:A0> := <nat:4> { <var:g> = <var:c> \land <var:A0> = <nat:4> } { <var:g> = <var:c> \land <var:A0> = <nat:4> } <var:G> := <var:A0{ <var:g> = <var:c> \land <var:G> = <nat:4> } \end{verbatim} This is guaranteed with the variable assignmet scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:g> = <var:c> }} <var:A0> := <nat:4> ; <var:G> := <var:A0> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 