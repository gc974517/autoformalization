\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:W1> := <var:R> ; <var:W2> := <var:W1> * <var:R> ; <var:W3> := <var:W2> * <var:R> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:7> ; <var:W3> := <var:W3> * <nat:8> ; <var:f> := <var:W3> <var:f> := <var:f> + <var:W2> <var:f> := <var:f> + <var:W1> <var:f> := <var:f> + <var:W0> \end{verbatim} Assume --- given every natural coefficients $ <var:H> $ --- that we have $ <var:R> = <var:H> $ prior to evaluating our code segment it follows that we have $ <var:f> = <nat:8> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is shown by usual Hoare techniques . Taking another step toward the proceeding line of code in our list of commands , the variable assignmet command defining $ <var:R> $ toward $ <var:W1>$ . This line takes $ \{ <var:R> = <var:H> \} $ to the postcondition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \} $ . Advancing to the proceeding line seen in our program , we have the variable update statement \verb | <var:W2> := <var:W1> * <var:R> ; | . This forwards the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \} $ to the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law defined by usual Hoare reasoning . Going forward , we see the assignment code \verb | <var:W3> := <var:W2> * <var:R> ; | . This code moves the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} $ . Moving forward to the next step , we see the line \verb | <var:W0> := <nat:4> ; | . This statement advances the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} $ toward $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ . This is shown to be logically sound by the assignment scheme found in Hoare logic . Advancing , we have the command \verb | <var:W1> := <var:W1> * <nat:1> ; | . This command redefines the condition $ \{ <var:R> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ into $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ . This is deduced by the assignment inference rule obtained from standard Hoare logic . Going forward , the variable update statement \verb | <var:W2> := <var:W2> * <nat:7> ; | . This command forwards the precondition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ to the condition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ . Advancing to the following command contained in the code , we see the environment update statement defining $ <var:W3> * <nat:8> $ as $ <var:W3>$ . This forwards the precondition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ to the condition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ . Immediately following , we see the variable binding command \verb | <var:f> := <var:W3> | . This advances $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:H> ^ <nat:3> \land <var:W0> = <nat:4> \} $ toward the condition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> \} $ . Moving forward to the proceeding statement contained in the series of commands , the line \verb | <var:f> := <var:f> + <var:W2> | . This code advances the condition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> \} $ to $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> \} $ . Looking at the subsequent piece of code contained in the set of instructions , the variable binding statement \verb | <var:f> := <var:f> + <var:W1> | . This moves the precondition $ \{ <var:R> = <var:H> \land <var:W1> = <nat:1> \times <var:H> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> \} $ as $ \{ <var:R> = <var:H> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} $ . This is shown using the assignment law in usual Hoare techniques . Shifting focus toward the following line of code seen in the set of commands , we have the assignment statement yielding $ <var:f> + <var:W0$ to $ <var:f>$ . This forwards the condition $ \{ <var:R> = <var:H> \land <var:W0> = <nat:4> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} $ into the postcondition $ \{ <var:R> = <var:H> \land <var:f> = <nat:8> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:R> = <var:H> }} <var:W1> := <var:R> ; <var:W2> := <var:W1> * <var:R> ; <var:W3> := <var:W2> * <var:R> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:7> ; <var:W3> := <var:W3> * <nat:8> ; <var:f> := <var:W3> <var:f> := <var:f> + <var:W2> <var:f> := <var:f> + <var:W1> <var:f> := <var:f> + <var:W0> {{ <var:f> = <nat:8> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <nat:1> * <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <nat:1> * <var:H> /\ <var:W2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <nat:1> * <var:H> /\ <var:W2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:H> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <nat:1> * <var:H> /\ <var:W2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:W0> = <nat:4> /\ <var:f> = <nat:8> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W1> = <nat:1> * <var:H> /\ <var:W0> = <nat:4> /\ <var:f> = <nat:8> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:W0> = <nat:4> /\ <var:f> = <nat:8> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:f> = <nat:8> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 