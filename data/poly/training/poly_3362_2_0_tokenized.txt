\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:9> ; <var:g> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given ( given any natural numbers $ <var:R> $ ) that we have $ <var:Y> = <var:R> $ prior to executing this segment of code , it follows that we see $ <var:g> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be done by the below decorated series of instructions . \begin{eqnarray} \{ <var:Y> = <var:R> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:Y> = <var:R> \land <var:O0> = <nat:9> \} \\ <var:g> := <var:O0> \\ \{ <var:Y> = <var:R> \land <var:g> = <nat:9> \} \end{eqnarray} Utilizing Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:g> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Y> = <var:R> }} <def:poly> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:R> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:R> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 