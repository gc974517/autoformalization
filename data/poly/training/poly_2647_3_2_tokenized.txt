\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:R> ; <var:O> := <nat:3> + <var:O> * <var:R> \end{verbatim} Assuming it to hold that $ <var:R> = <var:T> $ given integers $ <var:T> $ before executing the code segment it must be that we see $ <var:O> = <nat:2> \times <var:T> ^ <nat:2> + <nat:2> \times <var:T> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:R> = <var:T> \} \\ <var:O> := <nat:2> ; \\ \{ <var:R> = <var:T> \land <var:O> = <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:R> ; \\ \{ <var:R> = <var:T> \land <var:O> = <nat:2> \times <var:T> + <nat:2> \} \\ <var:O> := <nat:3> + <var:O> * <var:R> \\ \{ <var:R> = <var:T> \land <var:O> = <nat:2> \times <var:T> ^ <nat:2> + <nat:2> \times <var:T> + <nat:3> \} \end{eqnarray} Given the above , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:R> = <var:T> }} <var:O> := <nat:2> ; <var:O> := <nat:2> + <var:O> * <var:R> ; <var:O> := <nat:3> + <var:O> * <var:R> {{ <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:O> = <nat:2> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:T> /\ <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 