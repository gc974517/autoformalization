\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:G> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:6> ; <var:L> := <var:c1> <var:L> := <var:L> + <var:c0> \end{verbatim} Assuming that we have $ <var:G> = <var:y> $ prior to evaluating our set of instructions it follows that we see $ <var:L> = <nat:6> \times <var:y> + <nat:8> $ after series of instructions executes . \end{theorem} \begin{proof} The method of proof for our series of instructions can be given with Hoare logic . Moving forward , we have \verb | { <var:G> = <var:y> } <var:c1> := <var:G> { <var:G> = <var:y> \land <var:c1> = <var:y> } | , \verb | { <var:G> = <var:y> \land <var:c1> = <var:y> } <var:c0> := <nat:8> { <var:G> = <var:y> \land <var:c1> = <var:y> \land <var:c0> = <nat:8> } | , \verb | { <var:G> = <var:y> \land <var:c1> = <var:y> \land <var:c0> = <nat:8> } <var:c1> := <var:c1> * <nat:6> { <var:G> = <var:y> \land <var:c1> = <nat:6> \times <var:y> \land <var:c0> = <nat:8> } | and \verb | { <var:G> = <var:y> \land <var:c1> = <nat:6> \times <var:y> \land <var:c0> = <nat:8> } <var:L> := <var:c1{ <var:G> = <var:y> \land <var:c0> = <nat:8> \land <var:L> = <nat:6> \times <var:y> } | . This is shown by the binding scheme of usual Hoare reasoning . Keeping momentum , we have \verb | { <var:G> = <var:y> } <var:c1> := <var:G> { <var:G> = <var:y> \land <var:c1> = <var:y> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:G> = <var:y> }} <var:c1> := <var:G> ; <var:c0> := <nat:8> ; <var:c1> := <var:c1> * <nat:6> ; <var:L> := <var:c1> <var:L> := <var:L> + <var:c0> {{ <var:L> = <nat:6> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:c1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:c1> = <var:y> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:c1> = <nat:6> * <var:y> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:c0> = <nat:8> /\ <var:L> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:y> /\ <var:L> = <nat:6> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 