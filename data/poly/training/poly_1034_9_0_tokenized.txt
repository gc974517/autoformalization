\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:5> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:o> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:o> ; <var:S2> := <var:S2> * <var:o> ; <var:V> := <var:S2> ; <var:V> := <var:V> + <var:S1> ; <var:V> := <var:V> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:o> = <var:h> $ prior to evaluating our segment of code then we see $ <var:V> = <nat:5> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:5> $ once code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:h> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \} \\ <var:S1> := <nat:7> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> \} \\ <var:S1> := <var:S1> * <var:o> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:h> \} \\ <var:S2> := <nat:5> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:h> \land <var:S2> = <nat:5> \} \end{eqnarray} Furthering executing the list of commands gives : \begin{eqnarray} <var:S2> := <var:S2> * <var:o> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:h> \land <var:S2> = <nat:5> * <var:h> \} \\ <var:S2> := <var:S2> * <var:o> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:h> \land <var:S2> = <nat:5> * <var:h> ^ <nat:2> \} \\ <var:V> := <var:S2> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:S1> = <nat:7> * <var:h> \land <var:V> = <nat:5> * <var:h> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:S1> ; \\ \{ <var:o> = <var:h> \land <var:S0> = <nat:5> \land <var:V> = <nat:5> * <var:h> ^ <nat:2> + <nat:7> * <var:h> \} \\ <var:V> := <var:V> + <var:S0> \\ \{ <var:o> = <var:h> \land <var:V> = <nat:5> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:5> \} \end{eqnarray} Using usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:5> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:o> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:o> ; <var:S2> := <var:S2> * <var:o> ; <var:V> := <var:S2> ; <var:V> := <var:V> + <var:S1> ; <var:V> := <var:V> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:o> = <var:h> }} <def:poly> {{ <var:V> = <nat:5> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:h> /\ <var:S2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:h> /\ <var:S2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:h> /\ <var:S2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:7> * <var:h> /\ <var:V> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:S0> = <nat:5> /\ <var:V> = <nat:5> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:h> /\ <var:V> = <nat:5> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 