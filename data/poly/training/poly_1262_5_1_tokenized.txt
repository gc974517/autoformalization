\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:B> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:X> := <var:C1> <var:X> := <var:X> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:B> = <var:Q> $ ahead of the evaluation of the code segment it follows that we have $ <var:X> = <nat:1> * <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:B> = <var:Q> \} \\ <var:C1> := <var:B> ; \\ \{ <var:B> = <var:Q> \land <var:C1> = <var:Q> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:B> = <var:Q> \land <var:C1> = <var:Q> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:1> ; \\ \{ <var:B> = <var:Q> \land <var:C1> = <nat:1> \cdot <var:Q> \land <var:C0> = <nat:1> \} \\ <var:X> := <var:C1> \\ \{ <var:B> = <var:Q> \land <var:C0> = <nat:1> \land <var:X> = <nat:1> \cdot <var:Q> \} \\ <var:X> := <var:X> + <var:C0> \\ \{ <var:B> = <var:Q> \land <var:X> = <nat:1> \cdot <var:Q> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:B> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:X> := <var:C1> <var:X> := <var:X> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:B> = <var:Q> }} <def:poly> {{ <var:X> = <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:C1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:C1> = <var:Q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:C1> = <nat:1> * <var:Q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:C0> = <nat:1> /\ <var:X> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:X> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 