\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:5> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:t> ; <var:V> := <var:f1> ; <var:V> := <var:V> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:t> = <var:F> $ ( given $ <var:F> \in \mathbb{N} $ ) prior to executing our code it must be that $ <var:V> = <nat:9> \times <var:F> + <nat:5> $ . \end{theorem} \begin{proof} The proof of the list of instructions is evident by Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:t> = <var:F> \} & <var:f0> := <nat:5> & \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \} \end{tabular} This is known to be sound through the rule from standard Hoare logic . Honing in on the upcoming statements found in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:F> \} & <var:f0> := <nat:5> & \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \} \\ \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \} & <var:f1> := <nat:9> & \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \land <var:f1> = <nat:9> \} \end{tabular} This is guaranteed through the assignment scheme from usual Hoare logic . Further , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:F> \} & <var:f0> := <nat:5> & \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:F> \} & <var:f0> := <nat:5> & \{ <var:t> = <var:F> \land <var:f0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:5> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:t> ; <var:V> := <var:f1> ; <var:V> := <var:V> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <def:poly> {{ <var:V> = <nat:9> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:f0> = <nat:5> /\ <var:f1> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:f0> = <nat:5> /\ <var:V> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:V> = <nat:9> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 