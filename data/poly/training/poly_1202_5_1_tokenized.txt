\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:H> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:5> ; <var:a> := <var:k1> <var:a> := <var:a> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:H> = <var:v> $ ahead of the execution of this program it must be that we have $ <var:a> = <nat:5> \times <var:v> + <nat:6> $ when program terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:v> \} \\ <var:k1> := <var:H> ; \\ \{ <var:H> = <var:v> \land <var:k1> = <var:v> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:H> = <var:v> \land <var:k1> = <var:v> \land <var:k0> = <nat:6> \} \\ <var:k1> := <var:k1> * <nat:5> ; \\ \{ <var:H> = <var:v> \land <var:k1> = <nat:5> \times <var:v> \land <var:k0> = <nat:6> \} \\ <var:a> := <var:k1> \\ \{ <var:H> = <var:v> \land <var:k0> = <nat:6> \land <var:a> = <nat:5> \times <var:v> \} \\ <var:a> := <var:a> + <var:k0> \\ \{ <var:H> = <var:v> \land <var:a> = <nat:5> \times <var:v> + <nat:6> \} \end{eqnarray} Applying standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:H> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:5> ; <var:a> := <var:k1> <var:a> := <var:a> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:H> = <var:v> }} <def:poly> {{ <var:a> = <nat:5> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:k1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:k1> = <var:v> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:k1> = <nat:5> * <var:v> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:k0> = <nat:6> /\ <var:a> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:v> /\ <var:a> = <nat:5> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 