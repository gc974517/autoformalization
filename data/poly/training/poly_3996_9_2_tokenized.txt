\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:q> ; <var:B> := <nat:3> + <var:B> * <var:q> ; <var:B> := <var:B> * <var:q> ; <var:B> := <nat:4> + <var:B> * <var:q> ; <var:B> := <nat:4> + <var:B> * <var:q> ; <var:B> := <nat:1> + <var:B> * <var:q> ; <var:B> := <nat:1> + <var:B> * <var:q> ; <var:B> := <nat:3> + <var:B> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:q> = <var:W> $ given all positive integers $ <var:W> $ prior to running the list of instructions , it holds that we have $ <var:B> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be demonstrated by typical Hoare logic . Advancing on , we see the variable update command \verb | <var:B> := <nat:3> ; | . This moves $ \{ <var:q> = <var:W> \} $ as the postcondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \} $ . This is rigorously given through the assignment inference rule found in typical Hoare techniques . Following , the assignment statement defining $ <nat:2> + <var:B> * <var:q> $ into $ <var:B>$ . This code redefines the precondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \} $ as the postcondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> + <nat:2> \} $ . This is shown to be logically sound by the assignment law defined by Hoare techniques . After , we see the assignment statement \verb | <var:B> := <nat:3> + <var:B> * <var:q> ; | . This code transfers the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> + <nat:2> \} $ into the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:3> \} $ . Focusing on the next line in the set of instructions , we have the variable update statement \verb | <var:B> := <var:B> * <var:q> ; | . This statement moves the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:3> \} $ toward $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + \} $ . Moving on , the assignment command \verb | <var:B> := <nat:4> + <var:B> * <var:q> ; | . This code takes the precondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + \} $ to the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:4> + <nat:2> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:4> \} $ . This is ensured through the assignment inference rule defined by usual Hoare reasoning . Further , we see the variable assignmet code \verb | <var:B> := <nat:4> + <var:B> * <var:q> ; | . This code advances the precondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:4> + <nat:2> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:5> + <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> + <nat:4> \} $ . Going forward , we have the environment update line \verb | <var:B> := <nat:1> + <var:B> * <var:q> ; | . This transfers $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:5> + <nat:2> \times <var:W> ^ <nat:4> + <nat:3> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> + <nat:4> \} $ as $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:6> + <nat:2> \times <var:W> ^ <nat:5> + <nat:3> \times <var:W> ^ <nat:4> + <nat:4> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:1> \} $ . Observing the next step contained in our series of instructions , we have the variable assignmet line \verb | <var:B> := <nat:1> + <var:B> * <var:q> ; | . This command redefines the precondition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:6> + <nat:2> \times <var:W> ^ <nat:5> + <nat:3> \times <var:W> ^ <nat:4> + <nat:4> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:1> \} $ to $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:7> + <nat:2> \times <var:W> ^ <nat:6> + <nat:3> \times <var:W> ^ <nat:5> + <nat:4> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:1> \} $ . This is known to be sound with the assignment law in usual Hoare reasoning . Jumping to the upcoming line seen in our program , the assignment statement \verb | <var:B> := <nat:3> + <var:B> * <var:q> | . This moves the condition $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:7> + <nat:2> \times <var:W> ^ <nat:6> + <nat:3> \times <var:W> ^ <nat:5> + <nat:4> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:1> \} $ to $ \{ <var:q> = <var:W> \land <var:B> = <nat:3> \times <var:W> ^ <nat:8> + <nat:2> \times <var:W> ^ <nat:7> + <nat:3> \times <var:W> ^ <nat:6> + <nat:4> \times <var:W> ^ <nat:4> + <nat:4> \times <var:W> ^ <nat:3> + <nat:1> \times <var:W> ^ <nat:2> + <nat:1> \times <var:W> + <nat:3> \} $ . This is guaranteed through the assignment law of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:3> ; <var:B> := <nat:2> + <var:B> * <var:q> ; <var:B> := <nat:3> + <var:B> * <var:q> ; <var:B> := <var:B> * <var:q> ; <var:B> := <nat:4> + <var:B> * <var:q> ; <var:B> := <nat:4> + <var:B> * <var:q> ; <var:B> := <nat:1> + <var:B> * <var:q> ; <var:B> := <nat:1> + <var:B> * <var:q> ; <var:B> := <nat:3> + <var:B> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:q> = <var:W> }} <def:poly> {{ <var:B> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:B> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:6> + <nat:4> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 