\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:C> := <nat:3> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <var:C> * <var:L> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <var:C> * <var:L> ; <var:C> := <nat:3> + <var:C> * <var:L> ; <var:C> := <nat:1> + <var:C> * <var:L> ; <var:C> := <nat:1> + <var:C> * <var:L> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Allow --- given positive numbers $ <var:E> $ --- that we have $ <var:L> = <var:E> $ ahead of the evaluation of this segment of code it must be that we have $ <var:C> = <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:L> = <var:E> \} \\ <var:C> := <nat:3> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \} \\ <var:C> := <nat:4> + <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> + <nat:4> \} \\ <var:C> := <nat:4> + <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:4> \} \\ <var:C> := <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + \} \\ <var:C> := <nat:4> + <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:4> + <nat:4> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \} \\ <var:C> := <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:5> + <nat:4> \cdot <var:E> ^ <nat:4> + <nat:4> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> + \} \\ <var:C> := <nat:3> + <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:6> + <nat:4> \cdot <var:E> ^ <nat:5> + <nat:4> \cdot <var:E> ^ <nat:4> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:3> \} \\ <var:C> := <nat:1> + <var:C> * <var:L> ; \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:7> + <nat:4> \cdot <var:E> ^ <nat:6> + <nat:4> \cdot <var:E> ^ <nat:5> + <nat:4> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> + <nat:1> \} \\ <var:C> := <nat:1> + <var:C> * <var:L> \\ \{ <var:L> = <var:E> \land <var:C> = <nat:3> \cdot <var:E> ^ <nat:8> + <nat:4> \cdot <var:E> ^ <nat:7> + <nat:4> \cdot <var:E> ^ <nat:6> + <nat:4> \cdot <var:E> ^ <nat:4> + <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:1> \} \end{eqnarray} Given the above , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:3> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <var:C> * <var:L> ; <var:C> := <nat:4> + <var:C> * <var:L> ; <var:C> := <var:C> * <var:L> ; <var:C> := <nat:3> + <var:C> * <var:L> ; <var:C> := <nat:1> + <var:C> * <var:L> ; <var:C> := <nat:1> + <var:C> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <def:poly> {{ <var:C> = <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:C> = <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 