\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:i1> := <var:f> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:2> ; <var:w> := <var:i1> <var:w> := <var:w> + <var:i0> \end{verbatim} Allowing it to be that $ <var:f> = <var:K> $ ahead of evaluating the program , it must be that we see $ <var:w> = <nat:2> * <var:K> + <nat:6> $ after series of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is done by standard Hoare techniques . Moving forward to the next step , we have \begin{eqnarray} \{ <var:f> = <var:K> \} \, <var:i1> := <var:f> \, \{ <var:f> = <var:K> \land <var:i1> = <var:K> \} \\ \{ <var:f> = <var:K> \land <var:i1> = <var:K> \} \, <var:i0> := <nat:6> \, \{ <var:f> = <var:K> \land <var:i1> = <var:K> \land <var:i0> = <nat:6> \} \\ \{ <var:f> = <var:K> \land <var:i1> = <var:K> \land <var:i0> = <nat:6> \} \, <var:i1> := <var:i1> * <nat:2> \, \{ <var:f> = <var:K> \land <var:i1> = <nat:2> \cdot <var:K> \land <var:i0> = <nat:6> \} \\ \{ <var:f> = <var:K> \land <var:i1> = <nat:2> \cdot <var:K> \land <var:i0> = <nat:6> \} \, <var:w> := <var:i1\, \{ <var:f> = <var:K> \land <var:i0> = <nat:6> \land <var:w> = <nat:2> \cdot <var:K> \} \\ \{ <var:f> = <var:K> \land <var:i0> = <nat:6> \land <var:w> = <nat:2> \cdot <var:K> \} \, <var:w> := <var:w> + <var:i0\, \{ <var:f> = <var:K> \land <var:w> = <nat:2> \cdot <var:K> + <nat:6> \} \end{eqnarray} This is shown to be logically sound with the variable update rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:f> = <var:K> }} <var:i1> := <var:f> ; <var:i0> := <nat:6> ; <var:i1> := <var:i1> * <nat:2> ; <var:w> := <var:i1> <var:w> := <var:w> + <var:i0> {{ <var:w> = <nat:2> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:i1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:i1> = <var:K> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:i1> = <nat:2> * <var:K> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:i0> = <nat:6> /\ <var:w> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:w> = <nat:2> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 