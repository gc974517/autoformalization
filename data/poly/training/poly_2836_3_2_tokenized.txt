\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <var:m> * <var:l> ; <var:m> := <nat:1> + <var:m> * <var:l> \end{verbatim} Given that we have $ <var:l> = <var:T> $ ( for any $ <var:T> $ ) ahead of executing this set of instructions then we have $ <var:m> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is done through the below decorated series of instructions . \begin{eqnarray} \{ <var:l> = <var:T> \} \\ <var:m> := <nat:2> ; \\ \{ <var:l> = <var:T> \land <var:m> = <nat:2> \} \\ <var:m> := <var:m> * <var:l> ; \\ \{ <var:l> = <var:T> \land <var:m> = <nat:2> * <var:T> + \} \\ <var:m> := <nat:1> + <var:m> * <var:l> \\ \{ <var:l> = <var:T> \land <var:m> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:l> = <var:T> }} <var:m> := <nat:2> ; <var:m> := <var:m> * <var:l> ; <var:m> := <nat:1> + <var:m> * <var:l> {{ <var:m> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:m> = <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:m> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 