\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:h> ; <var:p> := <var:S1> ; <var:p> := <var:p> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assume --- with some positive numbers $ <var:c> $ --- $ <var:h> = <var:c> $ prior to running our program it must be that we see $ <var:p> = <nat:2> * <var:c> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for the program can be shown by standard Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:h> = <var:c> \} & <var:S0> := <nat:8> & \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \} \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \} & <var:S1> := <nat:2> & \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> \} \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> \} & <var:S1> := <var:S1> * <var:h> & \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> \cdot <var:c> \} \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:S1> = <nat:2> \cdot <var:c> \} & <var:p> := <var:S1> & \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:p> = <nat:2> \cdot <var:c> \} \\ \{ <var:h> = <var:c> \land <var:S0> = <nat:8> \land <var:p> = <nat:2> \cdot <var:c> \} & <var:p> := <var:p> + <var:S0& \{ <var:h> = <var:c> \land <var:p> = <nat:2> \cdot <var:c> + <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:2> ; <var:S1> := <var:S1> * <var:h> ; <var:p> := <var:S1> ; <var:p> := <var:p> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:h> = <var:c> }} <def:poly> {{ <var:p> = <nat:2> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:S0> = <nat:8> /\ <var:p> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:c> /\ <var:p> = <nat:2> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 