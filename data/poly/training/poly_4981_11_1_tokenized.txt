\begin{document} \begin{theorem} Let the following set of instructions such that \begin{verbatim} <var:Y1> := <var:Z> ; <var:Y2> := <var:Y1> * <var:Z> ; <var:Y3> := <var:Y2> * <var:Z> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:i> := <var:Y3> <var:i> := <var:i> + <var:Y2> <var:i> := <var:i> + <var:Y1> <var:i> := <var:i> + <var:Y0> \end{verbatim} Assume that we have $ <var:Z> = <var:A> $ prior to the evaluation of this series of commands , it must be that $ <var:i> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:1> $ when segment of code is done . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:Z> = <var:A> \} \\ <var:Y1> := <var:Z> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <var:A> \} \end{eqnarray} Advancing the execution of the segment of code yields : \begin{eqnarray} <var:Y2> := <var:Y1> * <var:Z> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:Z> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:1> \} \\ <var:Y1> := <var:Y1> * <nat:8> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <nat:8> \cdot <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:1> \} \\ <var:Y2> := <var:Y2> * <nat:5> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <nat:8> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:1> \} \\ <var:Y3> := <var:Y3> * <nat:7> ; \\ \{ <var:Z> = <var:A> \land <var:Y1> = <nat:8> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:Y3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:Y0> = <nat:1> \} \\ <var:i> := <var:Y3> \\ \{ <var:Z> = <var:A> \land <var:Y1> = <nat:8> \cdot <var:A> \land <var:Y2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:Y0> = <nat:1> \land <var:i> = <nat:7> \cdot <var:A> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:Y2> \\ \{ <var:Z> = <var:A> \land <var:Y1> = <nat:8> \cdot <var:A> \land <var:Y0> = <nat:1> \land <var:i> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:Y1> \\ \{ <var:Z> = <var:A> \land <var:Y0> = <nat:1> \land <var:i> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> \} \\ <var:i> := <var:i> + <var:Y0> \\ \{ <var:Z> = <var:A> \land <var:i> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Z> = <var:A> }} <var:Y1> := <var:Z> ; <var:Y2> := <var:Y1> * <var:Z> ; <var:Y3> := <var:Y2> * <var:Z> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:8> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:Y3> := <var:Y3> * <nat:7> ; <var:i> := <var:Y3> <var:i> := <var:i> + <var:Y2> <var:i> := <var:i> + <var:Y1> <var:i> := <var:i> + <var:Y0> {{ <var:i> = <nat:7> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:Y0> = <nat:1> /\ <var:i> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y1> = <nat:8> * <var:A> /\ <var:Y0> = <nat:1> /\ <var:i> = <nat:7> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:Y0> = <nat:1> /\ <var:i> = <nat:7> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:A> /\ <var:i> = <nat:7> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 