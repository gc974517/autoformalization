\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:H> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> \end{verbatim} Assume , for all whole numbers $ <var:a> $ , $ <var:H> = <var:a> $ ahead of the evaluation of this segment of code , it follows that we have $ <var:e> = <nat:9> \times <var:a> + <nat:4> $ after code has finished executing . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:H> = <var:a> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:H> = <var:a> \land <var:y0> = <nat:4> \} \\ <var:y1> := <nat:9> ; \\ \{ <var:H> = <var:a> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \} \\ <var:y1> := <var:y1> * <var:H> ; \\ \{ <var:H> = <var:a> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \cdot <var:a> \} \\ <var:e> := <var:y1> ; \\ \{ <var:H> = <var:a> \land <var:y0> = <nat:4> \land <var:e> = <nat:9> \cdot <var:a> \} \\ <var:e> := <var:e> + <var:y0> \\ \{ <var:H> = <var:a> \land <var:e> = <nat:9> \cdot <var:a> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:H> = <var:a> }} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:H> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> {{ <var:e> = <nat:9> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:y0> = <nat:4> /\ <var:e> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e> = <nat:9> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 