\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:u> := <var:c0> \end{verbatim} Allow that $ <var:o> = <var:p> $ , assuming some $ <var:p> \in \mathbb{N} $ , before interpreting our program , it must be that we have $ <var:u> = <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:o> = <var:p> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:o> = <var:p> \land <var:c0> = <nat:3> \} \\ <var:u> := <var:c0> \\ \{ <var:o> = <var:p> \land <var:u> = <nat:3> \} \end{eqnarray} Considering the above , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <var:c0> := <nat:3> ; <var:u> := <var:c0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 