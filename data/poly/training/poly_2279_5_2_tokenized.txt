\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <nat:1> + <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> \end{verbatim} Given it to be that $ <var:e> = <var:s> $ prior to the execution of this series of instructions it follows that we see $ <var:m> = <nat:4> \cdot <var:s> ^ <nat:4> + <nat:1> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:e> = <var:s> \} \\ <var:m> := <nat:4> ; \\ \{ <var:e> = <var:s> \land <var:m> = <nat:4> \} \\ <var:m> := <nat:1> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:s> \land <var:m> = <nat:4> \times <var:s> + <nat:1> \} \\ <var:m> := <nat:3> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:s> \land <var:m> = <nat:4> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} \\ <var:m> := <nat:3> + <var:m> * <var:e> ; \\ \{ <var:e> = <var:s> \land <var:m> = <nat:4> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> \} \\ <var:m> := <nat:2> + <var:m> * <var:e> \\ \{ <var:e> = <var:s> \land <var:m> = <nat:4> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} \end{eqnarray} Given the above , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:e> = <var:s> }} <var:m> := <nat:4> ; <var:m> := <nat:1> + <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:3> + <var:m> * <var:e> ; <var:m> := <nat:2> + <var:m> * <var:e> {{ <var:m> = <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:s> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:s> /\ <var:m> = <nat:4> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:s> /\ <var:m> = <nat:4> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:s> /\ <var:m> = <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:s> /\ <var:m> = <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 