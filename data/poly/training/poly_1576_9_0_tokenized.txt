\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:I> ; <var:V2> := <nat:4> ; <var:V2> := <var:V2> * <var:I> ; <var:V2> := <var:V2> * <var:I> ; <var:l> := <var:V2> ; <var:l> := <var:l> + <var:V1> ; <var:l> := <var:l> + <var:V0> \end{verbatim} Allowing it to hold that $ <var:I> = <var:q> $ --- given natural numbers $ <var:q> $ --- ahead of evaluating the series of commands then we have $ <var:l> = <nat:4> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:8> $ after set of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:q> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \} \\ <var:V1> := <nat:4> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \} \end{eqnarray} Allowing the execution of our code segment gives us : \begin{eqnarray} <var:V1> := <var:V1> * <var:I> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:q> \} \\ <var:V2> := <nat:4> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:q> \land <var:V2> = <nat:4> \} \\ <var:V2> := <var:V2> * <var:I> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:q> \land <var:V2> = <nat:4> \cdot <var:q> \} \\ <var:V2> := <var:V2> * <var:I> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:q> \land <var:V2> = <nat:4> \cdot <var:q> ^ <nat:2> \} \\ <var:l> := <var:V2> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:q> \land <var:l> = <nat:4> \cdot <var:q> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:V1> ; \\ \{ <var:I> = <var:q> \land <var:V0> = <nat:8> \land <var:l> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> \} \\ <var:l> := <var:l> + <var:V0> \\ \{ <var:I> = <var:q> \land <var:l> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:8> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:I> = <var:q> }} <var:V0> := <nat:8> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:I> ; <var:V2> := <nat:4> ; <var:V2> := <var:V2> * <var:I> ; <var:V2> := <var:V2> * <var:I> ; <var:l> := <var:V2> ; <var:l> := <var:l> + <var:V1> ; <var:l> := <var:l> + <var:V0> {{ <var:l> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:q> /\ <var:V2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:q> /\ <var:V2> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:q> /\ <var:V2> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:q> /\ <var:l> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:V0> = <nat:8> /\ <var:l> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:l> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 