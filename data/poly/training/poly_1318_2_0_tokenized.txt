\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:1> ; <var:V> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:B> = <var:J> $ before interpreting this program it holds that we have $ <var:V> = <nat:1> $ when series of commands executes . \end{theorem} \begin{proof} Arguing the correctness of the code is demonstrated by standard Hoare reasoning . Moving forward to the next bits of codeseen in the code , \[ \begin{tabular} {rcl} \{ <var:B> = <var:J> \} & <var:I0> := <nat:1> & \{ <var:B> = <var:J> \land <var:I0> = <nat:1> \} \\ \{ <var:B> = <var:J> \land <var:I0> = <nat:1> \} & <var:V> := <var:I0& \{ <var:B> = <var:J> \land <var:V> = <nat:1> \} \end{tabular} This is shown to be logically sound using the variable update scheme of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:1> ; <var:V> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:B> = <var:J> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:J> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 