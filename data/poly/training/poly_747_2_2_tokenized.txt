\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <nat:4> + <var:K> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:N> = <var:S> $ before the execution of the code segment , then $ <var:K> = <nat:3> \times <var:S> + <nat:4> $ after code segment has finished . \end{theorem} \begin{proof} The argument for our set of instructions is evident through typical Hoare reasoning . Shifting focus toward the subsequent piece of code contained in the list of instructions , \verb | { <var:N> = <var:S> } <var:K> := <nat:3> { <var:N> = <var:S> \land <var:K> = <nat:3> } | . This is known to be sound with the variable binding scheme defined in typical Hoare logic . Focusing on the upcoming command found in the code segment , we have \verb | { <var:N> = <var:S> } <var:K> := <nat:3> { <var:N> = <var:S> \land <var:K> = <nat:3> } | . This is sound with the binding law given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:3> ; <var:K> := <nat:4> + <var:K> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:N> = <var:S> }} <def:poly> {{ <var:K> = <nat:3> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:S> /\ <var:K> = <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 