\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:l1> := <var:X> ; <var:l2> := <var:l1> * <var:X> ; <var:l3> := <var:l2> * <var:X> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:3> ; <var:l3> := <var:l3> * <nat:3> ; <var:Y> := <var:l3> <var:Y> := <var:Y> + <var:l1> <var:Y> := <var:Y> + <var:l0> \end{verbatim} Allow taking $ <var:V> \in \mathbb{Z}^+ $ it to be that $ <var:X> = <var:V> $ before the evaluation of our segment of code , it must be that we see $ <var:Y> = <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> + <nat:5> $ when set of commands has exited . \end{theorem} \begin{proof} The proof of our code is accomplished through standard Hoare reasoning . Taking a look at the subsequent bits of codein our code segment , we see \begin{eqnarray} \{ <var:X> = <var:V> \} \, <var:l1> := <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \\ \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \, <var:l2> := <var:l1> * <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \} \end{eqnarray} This is given using the variable assignmet law given by usual Hoare reasoning . Taking a look at the subsequent bit of code seen in our set of commands , we have \begin{eqnarray} \{ <var:X> = <var:V> \} \, <var:l1> := <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \end{eqnarray} Shifting focus toward the following step contained in the set of commands , we see \begin{eqnarray} \{ <var:X> = <var:V> \} \, <var:l1> := <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \end{eqnarray} Honing in on the next bits of codeseen in our code segment , we have \begin{eqnarray} \{ <var:X> = <var:V> \} \, <var:l1> := <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \\ \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \, <var:l2> := <var:l1> * <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \} \\ \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \} \, <var:l3> := <var:l2> * <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \land <var:l3> = <var:V> ^ <nat:3> \} \\ \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \land <var:l3> = <var:V> ^ <nat:3> \} \, <var:l0> := <nat:5> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \land <var:l2> = <var:V> ^ <nat:2> \land <var:l3> = <var:V> ^ <nat:3> \land <var:l0> = <nat:5> \} \end{eqnarray} This is known to be sound by the scheme defined by typical Hoare reasoning . Shifting focus toward the next statement contained in our code , \begin{eqnarray} \{ <var:X> = <var:V> \} \, <var:l1> := <var:X> \, \{ <var:X> = <var:V> \land <var:l1> = <var:V> \} \end{eqnarray} This is rigorously given with the variable update scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:X> = <var:V> }} <var:l1> := <var:X> ; <var:l2> := <var:l1> * <var:X> ; <var:l3> := <var:l2> * <var:X> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:3> ; <var:l3> := <var:l3> * <nat:3> ; <var:Y> := <var:l3> <var:Y> := <var:Y> + <var:l1> <var:Y> := <var:Y> + <var:l0> {{ <var:Y> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <var:V> /\ <var:l2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <var:V> /\ <var:l2> = <var:V> ^ <nat:2> /\ <var:l3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <var:V> /\ <var:l2> = <var:V> ^ <nat:2> /\ <var:l3> = <var:V> ^ <nat:3> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <nat:3> * <var:V> /\ <var:l2> = <var:V> ^ <nat:2> /\ <var:l3> = <var:V> ^ <nat:3> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <nat:3> * <var:V> /\ <var:l2> = <var:V> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:V> ^ <nat:3> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l1> = <nat:3> * <var:V> /\ <var:l2> = <var:V> ^ <nat:2> /\ <var:l0> = <nat:5> /\ <var:Y> = <nat:3> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:l0> = <nat:5> /\ <var:Y> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:Y> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 