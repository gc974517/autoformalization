\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:2> ; <var:a> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:S> = <var:i> $ prior to the evaluation of this list of commands , it holds that we see $ <var:a> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this set of commands can be done by usual Hoare techniques . Going forward , we see the environment update statement \verb | <var:o0> := <nat:2> ; | . This takes the condition $ \{ <var:S> = <var:i> \} $ into $ \{ <var:S> = <var:i> \land <var:o0> = <nat:2> \} $ . Taking a look at the subsequent command contained in the series of instructions , the binding statement assigning $ <var:o0$ to $ <var:a>$ . This line advances $ \{ <var:S> = <var:i> \land <var:o0> = <nat:2> \} $ to the postcondition $ \{ <var:S> = <var:i> \land <var:a> = <nat:2> \} $ . This is shown by the assignment law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:a> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:S> = <var:i> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:i> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 