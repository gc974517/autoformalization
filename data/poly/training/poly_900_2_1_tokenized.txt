\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:1> ; <var:T> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:x> = <var:r> $ ahead of evaluating the series of instructions it holds that we have $ <var:T> = <nat:1> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:x> = <var:r> \} \\ <var:Y0> := <nat:1> ; \\ \{ <var:x> = <var:r> \land <var:Y0> = <nat:1> \} \\ <var:T> := <var:Y0> \\ \{ <var:x> = <var:r> \land <var:T> = <nat:1> \} \end{eqnarray} Therefore , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:1> ; <var:T> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:x> = <var:r> }} <def:poly> {{ <var:T> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:r> /\ <var:T> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 