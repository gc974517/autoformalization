\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:2> ; <var:E> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:Z> = <var:e> $ ( with some positive integer coefficients $ <var:e> $ ) ahead of the evaluation of the list of instructions it follows that we see $ <var:E> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be demonstrated by typical Hoare techniques . Stepping through , the binding line \verb | <var:p0> := <nat:2> ; | . This forwards the precondition $ \{ <var:Z> = <var:e> \} $ toward the condition $ \{ <var:Z> = <var:e> \land <var:p0> = <nat:2> \} $ . This is sound by the assignment rule found in standard Hoare reasoning . Moving on to the proceeding piece of code seen in our code segment , the command \verb | <var:E> := <var:p0> | . This line forwards the precondition $ \{ <var:Z> = <var:e> \land <var:p0> = <nat:2> \} $ into the condition $ \{ <var:Z> = <var:e> \land <var:E> = <nat:2> \} $ . This is given through the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:E> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Z> = <var:e> }} <def:poly> {{ <var:E> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:E> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 