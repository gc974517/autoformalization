\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:u1> := <var:w> ; <var:u2> := <var:u1> * <var:w> ; <var:u3> := <var:u2> * <var:w> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:8> ; <var:O> := <var:u3> <var:O> := <var:O> + <var:u1> <var:O> := <var:O> + <var:u0> \end{verbatim} Assuming $ <var:w> = <var:N> $ before running the list of commands , then we see $ <var:O> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment is accomplished with this decorated code segment . \begin{eqnarray} \{ <var:w> = <var:N> \} \\ <var:u1> := <var:w> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <var:N> \} \\ <var:u2> := <var:u1> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \} \\ <var:u0> := <nat:9> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:9> \} \\ <var:u1> := <var:u1> * <nat:1> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <nat:1> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:9> \} \\ <var:u3> := <var:u3> * <nat:8> ; \\ \{ <var:w> = <var:N> \land <var:u1> = <nat:1> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:u0> = <nat:9> \} \\ <var:O> := <var:u3> \\ \{ <var:w> = <var:N> \land <var:u1> = <nat:1> \times <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u0> = <nat:9> \land <var:O> = <nat:8> \times <var:N> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:u1> \\ \{ <var:w> = <var:N> \land <var:u0> = <nat:9> \land <var:O> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> \} \\ <var:O> := <var:O> + <var:u0> \\ \{ <var:w> = <var:N> \land <var:O> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> + <nat:9> \} \end{eqnarray} Using Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:w> = <var:N> }} <var:u1> := <var:w> ; <var:u2> := <var:u1> * <var:w> ; <var:u3> := <var:u2> * <var:w> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:1> ; <var:u3> := <var:u3> * <nat:8> ; <var:O> := <var:u3> <var:O> := <var:O> + <var:u1> <var:O> := <var:O> + <var:u0> {{ <var:O> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u0> = <nat:9> /\ <var:O> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:u0> = <nat:9> /\ <var:O> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:O> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 