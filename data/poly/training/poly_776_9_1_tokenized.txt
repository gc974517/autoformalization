\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:j> ; <var:K2> := <var:K1> * <var:j> ; <var:K3> := <var:K2> * <var:j> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:K3> := <var:K3> * <nat:2> ; <var:v> := <var:K3> <var:v> := <var:v> + <var:K1> <var:v> := <var:v> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:j> = <var:l> $ ahead of the evaluation of our program it must be that we see $ <var:v> = <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:j> = <var:l> \} \\ <var:K1> := <var:j> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <var:l> \} \end{eqnarray} Allowing the evaluation of our segment of code gives : \begin{eqnarray} <var:K2> := <var:K1> * <var:j> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <var:l> \land <var:K2> = <var:l> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:j> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <var:l> \land <var:K2> = <var:l> ^ <nat:2> \land <var:K3> = <var:l> ^ <nat:3> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <var:l> \land <var:K2> = <var:l> ^ <nat:2> \land <var:K3> = <var:l> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:K1> := <var:K1> * <nat:2> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <nat:2> \times <var:l> \land <var:K2> = <var:l> ^ <nat:2> \land <var:K3> = <var:l> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:K3> := <var:K3> * <nat:2> ; \\ \{ <var:j> = <var:l> \land <var:K1> = <nat:2> \times <var:l> \land <var:K2> = <var:l> ^ <nat:2> \land <var:K3> = <nat:2> \times <var:l> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:v> := <var:K3> \\ \{ <var:j> = <var:l> \land <var:K1> = <nat:2> \times <var:l> \land <var:K2> = <var:l> ^ <nat:2> \land <var:K0> = <nat:6> \land <var:v> = <nat:2> \times <var:l> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:K1> \\ \{ <var:j> = <var:l> \land <var:K0> = <nat:6> \land <var:v> = <nat:2> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> \} \\ <var:v> := <var:v> + <var:K0> \\ \{ <var:j> = <var:l> \land <var:v> = <nat:2> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> + <nat:6> \} \end{eqnarray} Given the preceding argument , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:j> ; <var:K2> := <var:K1> * <var:j> ; <var:K3> := <var:K2> * <var:j> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:K3> := <var:K3> * <nat:2> ; <var:v> := <var:K3> <var:v> := <var:v> + <var:K1> <var:v> := <var:v> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:j> = <var:l> }} <def:poly> {{ <var:v> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <var:l> /\ <var:K2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <var:l> /\ <var:K2> = <var:l> ^ <nat:2> /\ <var:K3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <var:l> /\ <var:K2> = <var:l> ^ <nat:2> /\ <var:K3> = <var:l> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <var:l> ^ <nat:2> /\ <var:K3> = <var:l> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <var:l> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:l> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K1> = <nat:2> * <var:l> /\ <var:K2> = <var:l> ^ <nat:2> /\ <var:K0> = <nat:6> /\ <var:v> = <nat:2> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:K0> = <nat:6> /\ <var:v> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:v> = <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 