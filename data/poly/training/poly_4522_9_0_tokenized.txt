\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:Q> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:Q> ; <var:j2> := <var:j2> * <var:Q> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Q> = <var:J> $ prior to the execution of this series of instructions , it holds that $ <var:N> = <nat:6> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> + <nat:9> $ when series of commands has finished . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:Q> = <var:J> \} \\ <var:j0> := <nat:9> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \} \\ <var:j1> := <nat:9> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> \} \\ <var:j1> := <var:j1> * <var:Q> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:J> \} \\ <var:j2> := <nat:6> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:J> \land <var:j2> = <nat:6> \} \\ <var:j2> := <var:j2> * <var:Q> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:J> \land <var:j2> = <nat:6> * <var:J> \} \\ <var:j2> := <var:j2> * <var:Q> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:J> \land <var:j2> = <nat:6> * <var:J> ^ <nat:2> \} \\ <var:N> := <var:j2> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:J> \land <var:N> = <nat:6> * <var:J> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:j1> ; \\ \{ <var:Q> = <var:J> \land <var:j0> = <nat:9> \land <var:N> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> \} \\ <var:N> := <var:N> + <var:j0> \\ \{ <var:Q> = <var:J> \land <var:N> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:9> \} \end{eqnarray} Given the above , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:9> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:Q> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:Q> ; <var:j2> := <var:j2> * <var:Q> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Q> = <var:J> }} <def:poly> {{ <var:N> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:J> /\ <var:j2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:J> /\ <var:j2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:J> /\ <var:j2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:J> /\ <var:N> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:j0> = <nat:9> /\ <var:N> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:N> = <nat:6> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 