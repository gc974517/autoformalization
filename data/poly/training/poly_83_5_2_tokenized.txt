\begin{document} \begin{theorem} Define a code as follows \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> \end{verbatim} Assuming that $ <var:i> = <var:A> $ before running this series of instructions it must be that $ <var:k> = <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:1> $ after series of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is shown by standard Hoare logic . Now , we have the variable assignmet line giving $ <nat:4> $ to $ <var:k>$ . This moves the condition $ \{ <var:i> = <var:A> \} $ toward the postcondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \} $ . This is rigorously given using the assignment rule defined by Hoare reasoning . Considering the upcoming command in our segment of code , we see the binding statement \verb | <var:k> := <nat:3> + <var:k> * <var:i> ; | . This command redefines $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \} $ as the postcondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> + <nat:3> \} $ . Moving on to the following bit of code found in the series of commands , we see the variable binding statement assigning $ <nat:2> + <var:k> * <var:i> $ toward $ <var:k>$ . This forwards the condition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> + <nat:3> \} $ toward the postcondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:2> \} $ . This is ensured with the assignment rule defined by Hoare techniques . Considering the following bit of code contained in our code segment , we see the variable update code giving $ <nat:2> + <var:k> * <var:i> $ toward $ <var:k>$ . This line forwards the precondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:2> \} $ . Keeping momentum , we see the binding line letting $ <nat:1> + <var:k> * <var:i$ into $ <var:k>$ . This advances the precondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:3> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:2> \} $ toward the postcondition $ \{ <var:i> = <var:A> \land <var:k> = <nat:4> \cdot <var:A> ^ <nat:4> + <nat:3> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:1> \} $ . This is rigorously given by the assignment inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:i> = <var:A> }} <var:k> := <nat:4> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> {{ <var:k> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:k> = <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:k> = <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:k> = <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:k> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 