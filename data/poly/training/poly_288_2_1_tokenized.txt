\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:1> ; <var:Q> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow , for all integers $ <var:B> $ , it to hold that $ <var:F> = <var:B> $ ahead of evaluating our list of commands , then $ <var:Q> = <nat:1> $ when segment of code finishes . \end{theorem} \begin{proof} We can see that the below decorated set of instructions . \begin{eqnarray} \{ <var:F> = <var:B> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:F> = <var:B> \land <var:K0> = <nat:1> \} \\ <var:Q> := <var:K0> \\ \{ <var:F> = <var:B> \land <var:Q> = <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:Q> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:F> = <var:B> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 