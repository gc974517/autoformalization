\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:N> ; <var:g> := <var:G1> ; <var:g> := <var:g> + <var:G0> \end{verbatim} Allowing it to hold that $ <var:N> = <var:P> $ --- taking $ <var:P> \in \mathbb{N} $ --- before interpreting the set of instructions , it follows that we have $ <var:g> = <nat:6> * <var:P> + <nat:8> $ once series of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for this program is done through the below decorated code . \begin{eqnarray} \{ <var:N> = <var:P> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:N> = <var:P> \land <var:G0> = <nat:8> \} \\ <var:G1> := <nat:6> ; \\ \{ <var:N> = <var:P> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> \} \\ <var:G1> := <var:G1> * <var:N> ; \\ \{ <var:N> = <var:P> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:P> \} \\ <var:g> := <var:G1> ; \\ \{ <var:N> = <var:P> \land <var:G0> = <nat:8> \land <var:g> = <nat:6> * <var:P> \} \\ <var:g> := <var:g> + <var:G0> \\ \{ <var:N> = <var:P> \land <var:g> = <nat:6> * <var:P> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:N> = <var:P> }} <var:G0> := <nat:8> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:N> ; <var:g> := <var:G1> ; <var:g> := <var:g> + <var:G0> {{ <var:g> = <nat:6> * <var:P> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:G0> = <nat:8> /\ <var:g> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:P> /\ <var:g> = <nat:6> * <var:P> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 