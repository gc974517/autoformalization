\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:J> ; <var:O2> := <nat:7> ; <var:O2> := <var:O2> * <var:J> ; <var:O2> := <var:O2> * <var:J> ; <var:X> := <var:O2> ; <var:X> := <var:X> + <var:O1> ; <var:X> := <var:X> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assume --- given every $ <var:C> \in \mathbb{N} $ --- that $ <var:J> = <var:C> $ prior to executing this list of instructions it follows that $ <var:X> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is given by standard Hoare techniques . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:C> \} & <var:O0> := <nat:4> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} & <var:O1> := <nat:8> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \} & <var:O1> := <var:O1> * <var:J> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \times <var:C> \} \end{tabular} This is guaranteed using the inference rule of typical Hoare techniques . Honing in on the proceeding lines of codecontained in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:C> \} & <var:O0> := <nat:4> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} & <var:O1> := <nat:8> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \} \end{tabular} Paying attention to the subsequent statements seen in the set of commands , \[ \begin{tabular} {rcl} \{ <var:J> = <var:C> \} & <var:O0> := <nat:4> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \} & <var:O1> := <nat:8> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \} & <var:O1> := <var:O1> * <var:J> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \times <var:C> \} \\ \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \times <var:C> \} & <var:O2> := <nat:7> & \{ <var:J> = <var:C> \land <var:O0> = <nat:4> \land <var:O1> = <nat:8> \times <var:C> \land <var:O2> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:J> ; <var:O2> := <nat:7> ; <var:O2> := <var:O2> * <var:J> ; <var:O2> := <var:O2> * <var:J> ; <var:X> := <var:O2> ; <var:X> := <var:X> + <var:O1> ; <var:X> := <var:X> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:J> = <var:C> }} <def:poly> {{ <var:X> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> * <var:C> /\ <var:O2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> * <var:C> /\ <var:O2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> * <var:C> /\ <var:O2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:8> * <var:C> /\ <var:X> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:O0> = <nat:4> /\ <var:X> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:C> /\ <var:X> = <nat:7> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 