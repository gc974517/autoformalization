\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:9> ; <var:n> := <var:O0> \end{verbatim} Assume it to be that $ <var:r> = <var:k> $ ahead of the evaluation of our list of instructions it holds that we have $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:r> = <var:k> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:r> = <var:k> \land <var:O0> = <nat:9> \} \\ <var:n> := <var:O0> \\ \{ <var:r> = <var:k> \land <var:n> = <nat:9> \} \end{eqnarray} Therefore , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <var:O0> := <nat:9> ; <var:n> := <var:O0> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 