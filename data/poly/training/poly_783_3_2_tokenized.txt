\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V> := <nat:1> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:3> + <var:V> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:I> = <var:S> $ before interpreting our program , it must be that we see $ <var:V> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:3> $ when list of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:S> \} \\ <var:V> := <nat:1> ; \\ \{ <var:I> = <var:S> \land <var:V> = <nat:1> \} \\ <var:V> := <nat:1> + <var:V> * <var:I> ; \\ \{ <var:I> = <var:S> \land <var:V> = <nat:1> \cdot <var:S> + <nat:1> \} \\ <var:V> := <nat:3> + <var:V> * <var:I> \\ \{ <var:I> = <var:S> \land <var:V> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:1> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:3> + <var:V> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:I> = <var:S> }} <def:poly> {{ <var:V> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:V> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:V> = <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:V> = <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 