\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:8> ; <var:i> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allow , given every positive numbers $ <var:g> $ , it to be that $ <var:z> = <var:g> $ ahead of running the set of instructions it must be that we see $ <var:i> = <nat:8> $ when list of instructions has finished . \end{theorem} \begin{proof} Proving correctness for this program can be shown using standard Hoare reasoning . Stepping forward , \verb | { <var:z> = <var:g> } <var:F0> := <nat:8> { <var:z> = <var:g> \land <var:F0> = <nat:8> } | and \verb | { <var:z> = <var:g> \land <var:F0> = <nat:8> } <var:i> := <var:F0{ <var:z> = <var:g> \land <var:i> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:8> ; <var:i> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <def:poly> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 