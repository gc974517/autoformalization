\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:8> ; <var:h> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:M> = <var:G> $ before executing the segment of code , it follows that $ <var:h> = <nat:8> $ once set of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is done using the following decorated code segment . \begin{eqnarray} \{ <var:M> = <var:G> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:M> = <var:G> \land <var:p0> = <nat:8> \} \\ <var:h> := <var:p0> \\ \{ <var:M> = <var:G> \land <var:h> = <nat:8> \} \end{eqnarray} Utilizing usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:8> ; <var:h> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <def:poly> {{ <var:h> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:h> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 