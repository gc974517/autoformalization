\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:1> ; <var:O> := <var:r3> <var:O> := <var:O> + <var:r2> <var:O> := <var:O> + <var:r1> <var:O> := <var:O> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allowing that $ <var:T> = <var:S> $ ( given all $ <var:S> \in \mathbb{Z}^+ $ ) prior to executing our segment of code , then $ <var:O> = <nat:1> \cdot <var:S> ^ <nat:3> + <nat:4> \cdot <var:S> ^ <nat:2> + <nat:8> \cdot <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this list of commands can be seen through Hoare reasoning . Paying attention to the next command in our set of commands , we have the variable assignmet line \verb | <var:r1> := <var:T> ; | . This forwards $ \{ <var:T> = <var:S> \} $ to $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \} $ . Next , we have the variable update command \verb | <var:r2> := <var:r1> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \} $ as $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \} $ . This is shown with the assignment law obtained from Hoare reasoning . Moving forward to the upcoming line of code seen in our code segment , the binding command \verb | <var:r3> := <var:r2> * <var:T> ; | . This code forwards $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \} $ toward $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \} $ . Observing the subsequent bit of code in our series of instructions , the variable assignmet code \verb | <var:r0> := <nat:1> ; | . This forwards $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \} $ toward $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ . Taking a look at the subsequent step contained in the series of commands , the command \verb | <var:r1> := <var:r1> * <nat:8> ; | . This transfers $ \{ <var:T> = <var:S> \land <var:r1> = <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ into the postcondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ . Moving forward , we have the variable assignmet command \verb | <var:r2> := <var:r2> * <nat:4> ; | . This forwards $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ as the postcondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ . This is given using the assignment inference rule of typical Hoare logic . Looking at the subsequent bit of code found in our list of commands , we see the environment update line binding $ <var:r3> * <nat:1> $ into $ <var:r3>$ . This statement redefines the condition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r3> = <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ as the postcondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ . Considering the proceeding command seen in our list of instructions , the variable assignmet code defining $ <var:r3$ as $ <var:O>$ . This takes the precondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:r0> = <nat:1> \} $ to the postcondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> \} $ . This is sound by the assignment rule obtained from usual Hoare logic . Immediately after , we see the assignment line assigning $ <var:O> + <var:r2$ into $ <var:O>$ . This transfers the precondition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> \} $ to the condition $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> \} $ . Now , we see the variable update statement yielding $ <var:O> + <var:r1$ as $ <var:O>$ . This takes $ \{ <var:T> = <var:S> \land <var:r1> = <nat:8> \times <var:S> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> \} $ as the postcondition $ \{ <var:T> = <var:S> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> \} $ . This is deduced by the assignment scheme in typical Hoare reasoning . Moving on to the next step , we have the variable update command assigning $ <var:O> + <var:r0$ as $ <var:O>$ . This statement moves $ \{ <var:T> = <var:S> \land <var:r0> = <nat:1> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> \} $ toward $ \{ <var:T> = <var:S> \land <var:O> = <nat:1> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:1> ; <var:O> := <var:r3> <var:O> := <var:O> + <var:r2> <var:O> := <var:O> + <var:r1> <var:O> := <var:O> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:T> = <var:S> }} <def:poly> {{ <var:O> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <var:S> /\ <var:r2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <var:S> /\ <var:r2> = <var:S> ^ <nat:2> /\ <var:r3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <var:S> /\ <var:r2> = <var:S> ^ <nat:2> /\ <var:r3> = <var:S> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <nat:8> * <var:S> /\ <var:r2> = <var:S> ^ <nat:2> /\ <var:r3> = <var:S> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <nat:8> * <var:S> /\ <var:r2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:r3> = <var:S> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <nat:8> * <var:S> /\ <var:r2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:r3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <nat:8> * <var:S> /\ <var:r2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:r0> = <nat:1> /\ <var:O> = <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r1> = <nat:8> * <var:S> /\ <var:r0> = <nat:1> /\ <var:O> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:r0> = <nat:1> /\ <var:O> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:O> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 