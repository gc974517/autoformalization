\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:t1> := <var:C> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:2> ; <var:e> := <var:t1> <var:e> := <var:e> + <var:t0> \end{verbatim} Given that we have $ <var:C> = <var:K> $ given some positive coefficients $ <var:K> $ prior to interpreting the series of commands then we see $ <var:e> = <nat:2> \times <var:K> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our segment of code is clear with usual Hoare logic . Shifting focus toward the next line of code found in our code segment , we see the assignment code giving $ <var:C> $ to $ <var:t1>$ . This forwards the condition $ \{ <var:C> = <var:K> \} $ toward the postcondition $ \{ <var:C> = <var:K> \land <var:t1> = <var:K> \} $ . This is shown with the assignment rule defined in standard Hoare techniques . After , we see the assignment line \verb | <var:t0> := <nat:4> ; | . This takes $ \{ <var:C> = <var:K> \land <var:t1> = <var:K> \} $ to the postcondition $ \{ <var:C> = <var:K> \land <var:t1> = <var:K> \land <var:t0> = <nat:4> \} $ . This is known to be sound using the assignment inference rule defined in usual Hoare techniques . Looking at the following bit of code in the series of instructions , we see the code \verb | <var:t1> := <var:t1> * <nat:2> ; | . This command transfers the condition $ \{ <var:C> = <var:K> \land <var:t1> = <var:K> \land <var:t0> = <nat:4> \} $ to the postcondition $ \{ <var:C> = <var:K> \land <var:t1> = <nat:2> \cdot <var:K> \land <var:t0> = <nat:4> \} $ . Moving on to the next bit of code found in our list of instructions , we see the code assigning $ <var:t1$ into $ <var:e>$ . This line forwards $ \{ <var:C> = <var:K> \land <var:t1> = <nat:2> \cdot <var:K> \land <var:t0> = <nat:4> \} $ toward the condition $ \{ <var:C> = <var:K> \land <var:t0> = <nat:4> \land <var:e> = <nat:2> \cdot <var:K> \} $ . This is guaranteed by the assignment rule obtained from usual Hoare reasoning . Going to the next step , we have the variable assignmet code \verb | <var:e> := <var:e> + <var:t0> | . This forwards the condition $ \{ <var:C> = <var:K> \land <var:t0> = <nat:4> \land <var:e> = <nat:2> \cdot <var:K> \} $ to the postcondition $ \{ <var:C> = <var:K> \land <var:e> = <nat:2> \cdot <var:K> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <var:t1> := <var:C> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:2> ; <var:e> := <var:t1> <var:e> := <var:e> + <var:t0> {{ <var:e> = <nat:2> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:t1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:t1> = <var:K> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:t1> = <nat:2> * <var:K> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:t0> = <nat:4> /\ <var:e> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:e> = <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 