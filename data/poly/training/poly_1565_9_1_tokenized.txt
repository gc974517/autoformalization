\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:i> ; <var:W2> := <var:W1> * <var:i> ; <var:W3> := <var:W2> * <var:i> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:R> := <var:W3> <var:R> := <var:R> + <var:W1> <var:R> := <var:R> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:i> = <var:a> $ ( letting integers $ <var:a> $ ) before evaluating the code , it must be that $ <var:R> = <nat:7> \cdot <var:a> ^ <nat:3> + <nat:6> \cdot <var:a> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of commands is done using the following decorated set of instructions . \begin{eqnarray} \{ <var:i> = <var:a> \} \\ <var:W1> := <var:i> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <var:a> \} \\ <var:W2> := <var:W1> * <var:i> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:i> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \} \end{eqnarray} Allowing executing our code yields : \begin{eqnarray} <var:W0> := <nat:1> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:W1> := <var:W1> * <nat:6> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <nat:6> \cdot <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:W3> := <var:W3> * <nat:7> ; \\ \{ <var:i> = <var:a> \land <var:W1> = <nat:6> \cdot <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <nat:7> \cdot <var:a> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:R> := <var:W3> \\ \{ <var:i> = <var:a> \land <var:W1> = <nat:6> \cdot <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W0> = <nat:1> \land <var:R> = <nat:7> \cdot <var:a> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:W1> \\ \{ <var:i> = <var:a> \land <var:W0> = <nat:1> \land <var:R> = <nat:7> \cdot <var:a> ^ <nat:3> + <nat:6> \cdot <var:a> \} \\ <var:R> := <var:R> + <var:W0> \\ \{ <var:i> = <var:a> \land <var:R> = <nat:7> \cdot <var:a> ^ <nat:3> + <nat:6> \cdot <var:a> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:i> ; <var:W2> := <var:W1> * <var:i> ; <var:W3> := <var:W2> * <var:i> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:R> := <var:W3> <var:R> := <var:R> + <var:W1> <var:R> := <var:R> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:i> = <var:a> }} <def:poly> {{ <var:R> = <nat:7> * <var:a> ^ <nat:3> + <nat:6> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <nat:6> * <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <nat:6> * <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:a> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W1> = <nat:6> * <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W0> = <nat:1> /\ <var:R> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:W0> = <nat:1> /\ <var:R> = <nat:7> * <var:a> ^ <nat:3> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:a> /\ <var:R> = <nat:7> * <var:a> ^ <nat:3> + <nat:6> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 