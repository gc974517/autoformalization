\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:5> ; <var:w> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:s> = <var:h> $ , for some integers $ <var:h> $ , ahead of evaluating this program , it follows that we have $ <var:w> = <nat:5> $ when segment of code has terminated . \end{theorem} \begin{proof} The proof of this code is accomplished with usual Hoare logic . Focusing on the proceeding line found in the set of commands , we see the variable update command \verb | <var:n0> := <nat:5> ; | . This advances the precondition $ \{ <var:s> = <var:h> \} $ toward $ \{ <var:s> = <var:h> \land <var:n0> = <nat:5> \} $ . This is shown to be logically sound with the assignment rule given in Hoare techniques . Immediately after , we have the line defining $ <var:n0$ toward $ <var:w>$ . This redefines $ \{ <var:s> = <var:h> \land <var:n0> = <nat:5> \} $ toward the condition $ \{ <var:s> = <var:h> \land <var:w> = <nat:5> \} $ . This is guaranteed with the assignment inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:5> ; <var:w> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:s> = <var:h> }} <def:poly> {{ <var:w> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:h> /\ <var:w> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 