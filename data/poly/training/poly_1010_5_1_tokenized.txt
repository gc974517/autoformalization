\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:V1> := <var:i> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:4> ; <var:n> := <var:V1> <var:n> := <var:n> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Given it to hold that $ <var:i> = <var:C> $ before the evaluation of our list of commands it follows that we have $ <var:n> = <nat:4> \cdot <var:C> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:C> \} \\ <var:V1> := <var:i> ; \\ \{ <var:i> = <var:C> \land <var:V1> = <var:C> \} \end{eqnarray} Allowing interpreting the program yields : \begin{eqnarray} <var:V0> := <nat:1> ; \\ \{ <var:i> = <var:C> \land <var:V1> = <var:C> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:4> ; \\ \{ <var:i> = <var:C> \land <var:V1> = <nat:4> \times <var:C> \land <var:V0> = <nat:1> \} \\ <var:n> := <var:V1> \\ \{ <var:i> = <var:C> \land <var:V0> = <nat:1> \land <var:n> = <nat:4> \times <var:C> \} \\ <var:n> := <var:n> + <var:V0> \\ \{ <var:i> = <var:C> \land <var:n> = <nat:4> \times <var:C> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:i> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:4> ; <var:n> := <var:V1> <var:n> := <var:n> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:i> = <var:C> }} <def:poly> {{ <var:n> = <nat:4> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:V1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:V1> = <var:C> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:V1> = <nat:4> * <var:C> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:V0> = <nat:1> /\ <var:n> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:n> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 