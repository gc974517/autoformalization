\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Given that $ <var:h> = <var:b> $ ahead of the evaluation of this code segment , it holds that we have $ <var:F> = <nat:1> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be done by the below decorated set of instructions . \begin{eqnarray} \{ <var:h> = <var:b> \} \\ <var:F> := <nat:1> ; \\ \{ <var:h> = <var:b> \land <var:F> = <nat:1> \} \\ <var:F> := <nat:4> + <var:F> * <var:h> \\ \{ <var:h> = <var:b> \land <var:F> = <nat:1> \cdot <var:b> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:h> = <var:b> }} <def:poly> {{ <var:F> = <nat:1> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:b> /\ <var:F> = <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 