\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:X> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:7> ; <var:v> := <var:i1> <var:v> := <var:v> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Given , letting positive integers $ <var:O> $ , that we have $ <var:X> = <var:O> $ ahead of the execution of this segment of code , it holds that $ <var:v> = <nat:7> \times <var:O> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is shown by this decorated set of commands . \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:i1> := <var:X> ; \\ \{ <var:X> = <var:O> \land <var:i1> = <var:O> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:X> = <var:O> \land <var:i1> = <var:O> \land <var:i0> = <nat:3> \} \\ <var:i1> := <var:i1> * <nat:7> ; \\ \{ <var:X> = <var:O> \land <var:i1> = <nat:7> \cdot <var:O> \land <var:i0> = <nat:3> \} \\ <var:v> := <var:i1> \\ \{ <var:X> = <var:O> \land <var:i0> = <nat:3> \land <var:v> = <nat:7> \cdot <var:O> \} \\ <var:v> := <var:v> + <var:i0> \\ \{ <var:X> = <var:O> \land <var:v> = <nat:7> \cdot <var:O> + <nat:3> \} \end{eqnarray} Applying standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:X> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:7> ; <var:v> := <var:i1> <var:v> := <var:v> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:v> = <nat:7> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:i1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:i1> = <var:O> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:i1> = <nat:7> * <var:O> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:i0> = <nat:3> /\ <var:v> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:v> = <nat:7> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 