\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:7> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:c> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:c> ; <var:a2> := <var:a2> * <var:c> ; <var:Q> := <var:a2> ; <var:Q> := <var:Q> + <var:a1> ; <var:Q> := <var:Q> + <var:a0> \end{verbatim} Allowing that $ <var:c> = <var:z> $ before running the program , it holds that $ <var:Q> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this set of commands is given by Hoare logic . Moving on to the upcoming statements contained in our program , we see \begin{verbatim} { <var:c> = <var:z> } <var:a0> := <nat:7> { <var:c> = <var:z> \land <var:a0> = <nat:7> } { <var:c> = <var:z> \land <var:a0> = <nat:7> } <var:a1> := <nat:8> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> } { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> } <var:a1> := <var:a1> * <var:c> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> } { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> } <var:a2> := <nat:3> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> } { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> } <var:a2> := <var:a2> * <var:c> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> * <var:z> } { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> * <var:z> } <var:a2> := <var:a2> * <var:c> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> * <var:z> ^ <nat:2> } { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:a2> = <nat:3> * <var:z> ^ <nat:2> } <var:Q> := <var:a2> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:z> \land <var:Q> = <nat:3> * <var:z> ^ <nat:2> } \end{verbatim} This is sound through the variable assignmet scheme given by Hoare techniques . Stepping forward , we see \begin{verbatim} { <var:c> = <var:z> } <var:a0> := <nat:7> { <var:c> = <var:z> \land <var:a0> = <nat:7> } { <var:c> = <var:z> \land <var:a0> = <nat:7> } <var:a1> := <nat:8> { <var:c> = <var:z> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> } \end{verbatim} This is sound using the environment update inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:c> = <var:z> }} <var:a0> := <nat:7> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:c> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:c> ; <var:a2> := <var:a2> * <var:c> ; <var:Q> := <var:a2> ; <var:Q> := <var:Q> + <var:a1> ; <var:Q> := <var:Q> + <var:a0> {{ <var:Q> = <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:z> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:z> /\ <var:a2> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:z> /\ <var:a2> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:z> /\ <var:Q> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:a0> = <nat:7> /\ <var:Q> = <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:Q> = <nat:3> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 