\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:9> ; <var:n> := <var:C0> \end{verbatim} Allow that we have $ <var:l> = <var:d> $ letting positive coefficients $ <var:d> $ before evaluating the code segment it follows that we have $ <var:n> = <nat:9> $ when segment of code executes . \end{theorem} \begin{proof} The course of logic for the program can be done using standard Hoare techniques . Following , the variable update statement \verb | <var:C0> := <nat:9> ; | . This redefines the precondition $ \{ <var:l> = <var:d> \} $ as the condition $ \{ <var:l> = <var:d> \land <var:C0> = <nat:9> \} $ . Further , we see the binding command letting $ <var:C0$ toward $ <var:n>$ . This line redefines $ \{ <var:l> = <var:d> \land <var:C0> = <nat:9> \} $ as the postcondition $ \{ <var:l> = <var:d> \land <var:n> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:C0> := <nat:9> ; <var:n> := <var:C0> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 