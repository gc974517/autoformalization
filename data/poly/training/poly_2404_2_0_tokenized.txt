\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:2> ; <var:U> := <var:W0> \end{verbatim} Assume , letting $ <var:N> \in \mathbb{N} $ , it to be that $ <var:O> = <var:N> $ before running the segment of code , then we have $ <var:U> = <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:N> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:O> = <var:N> \land <var:W0> = <nat:2> \} \\ <var:U> := <var:W0> \\ \{ <var:O> = <var:N> \land <var:U> = <nat:2> \} \end{eqnarray} Using usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:O> = <var:N> }} <var:W0> := <nat:2> ; <var:U> := <var:W0> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 