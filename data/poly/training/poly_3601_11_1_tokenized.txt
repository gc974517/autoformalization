\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:I> ; <var:Z2> := <var:Z1> * <var:I> ; <var:Z3> := <var:Z2> * <var:I> ; <var:Z0> := <nat:6> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:m> := <var:Z3> <var:m> := <var:m> + <var:Z2> <var:m> := <var:m> + <var:Z1> <var:m> := <var:m> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:I> = <var:r> $ prior to interpreting this program , it follows that we have $ <var:m> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> $ once code segment has finished executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:I> = <var:r> \} \\ <var:Z1> := <var:I> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <var:r> \} \\ <var:Z2> := <var:Z1> * <var:I> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <var:r> \land <var:Z2> = <var:r> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:I> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <var:r> \land <var:Z2> = <var:r> ^ <nat:2> \land <var:Z3> = <var:r> ^ <nat:3> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <var:r> \land <var:Z2> = <var:r> ^ <nat:2> \land <var:Z3> = <var:r> ^ <nat:3> \land <var:Z0> = <nat:6> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <nat:3> \cdot <var:r> \land <var:Z2> = <var:r> ^ <nat:2> \land <var:Z3> = <var:r> ^ <nat:3> \land <var:Z0> = <nat:6> \} \\ <var:Z2> := <var:Z2> * <nat:4> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <nat:3> \cdot <var:r> \land <var:Z2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:Z3> = <var:r> ^ <nat:3> \land <var:Z0> = <nat:6> \} \\ <var:Z3> := <var:Z3> * <nat:4> ; \\ \{ <var:I> = <var:r> \land <var:Z1> = <nat:3> \cdot <var:r> \land <var:Z2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:Z3> = <nat:4> \cdot <var:r> ^ <nat:3> \land <var:Z0> = <nat:6> \} \\ <var:m> := <var:Z3> \\ \{ <var:I> = <var:r> \land <var:Z1> = <nat:3> \cdot <var:r> \land <var:Z2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:Z0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:r> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:Z2> \\ \{ <var:I> = <var:r> \land <var:Z1> = <nat:3> \cdot <var:r> \land <var:Z0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:Z1> \\ \{ <var:I> = <var:r> \land <var:Z0> = <nat:6> \land <var:m> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> \} \\ <var:m> := <var:m> + <var:Z0> \\ \{ <var:I> = <var:r> \land <var:m> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:6> \} \end{eqnarray} Therefore , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z1> := <var:I> ; <var:Z2> := <var:Z1> * <var:I> ; <var:Z3> := <var:Z2> * <var:I> ; <var:Z0> := <nat:6> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:Z2> := <var:Z2> * <nat:4> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:m> := <var:Z3> <var:m> := <var:m> + <var:Z2> <var:m> := <var:m> + <var:Z1> <var:m> := <var:m> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:I> = <var:r> }} <def:poly> {{ <var:m> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <var:r> /\ <var:Z2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <var:r> /\ <var:Z2> = <var:r> ^ <nat:2> /\ <var:Z3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <var:r> /\ <var:Z2> = <var:r> ^ <nat:2> /\ <var:Z3> = <var:r> ^ <nat:3> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <var:r> ^ <nat:2> /\ <var:Z3> = <var:r> ^ <nat:3> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:Z3> = <var:r> ^ <nat:3> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:Z0> = <nat:6> /\ <var:m> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z0> = <nat:6> /\ <var:m> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:Z0> = <nat:6> /\ <var:m> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:r> /\ <var:m> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 