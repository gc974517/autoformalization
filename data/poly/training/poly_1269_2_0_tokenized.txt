\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:3> ; <var:j> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:u> = <var:G> $ ( for all whole numbers $ <var:G> $ ) before the execution of the list of instructions , it holds that we see $ <var:j> = <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:u> = <var:G> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:u> = <var:G> \land <var:E0> = <nat:3> \} \\ <var:j> := <var:E0> \\ \{ <var:u> = <var:G> \land <var:j> = <nat:3> \} \end{eqnarray} Considering the above , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:3> ; <var:j> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:u> = <var:G> }} <def:poly> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 