\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:E1> := <var:t> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:4> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> \end{verbatim} Assume it to hold that $ <var:t> = <var:k> $ prior to running this segment of code it must be that we have $ <var:d> = <nat:4> \cdot <var:k> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:t> = <var:k> \} \\ <var:E1> := <var:t> ; \\ \{ <var:t> = <var:k> \land <var:E1> = <var:k> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:t> = <var:k> \land <var:E1> = <var:k> \land <var:E0> = <nat:8> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:t> = <var:k> \land <var:E1> = <nat:4> \times <var:k> \land <var:E0> = <nat:8> \} \\ <var:d> := <var:E1> \\ \{ <var:t> = <var:k> \land <var:E0> = <nat:8> \land <var:d> = <nat:4> \times <var:k> \} \\ <var:d> := <var:d> + <var:E0> \\ \{ <var:t> = <var:k> \land <var:d> = <nat:4> \times <var:k> + <nat:8> \} \end{eqnarray} As a consequence , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:t> = <var:k> }} <var:E1> := <var:t> ; <var:E0> := <nat:8> ; <var:E1> := <var:E1> * <nat:4> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> {{ <var:d> = <nat:4> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:E1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:E1> = <var:k> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:E1> = <nat:4> * <var:k> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:E0> = <nat:8> /\ <var:d> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:k> /\ <var:d> = <nat:4> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 