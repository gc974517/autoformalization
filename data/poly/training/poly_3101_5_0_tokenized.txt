\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:s> ; <var:b> := <var:F1> ; <var:b> := <var:b> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:s> = <var:f> $ ahead of evaluating the list of commands , then we have $ <var:b> = <nat:8> \cdot <var:f> + <nat:2> $ when segment of code has terminated . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:s> = <var:f> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:s> = <var:f> \land <var:F0> = <nat:2> \} \\ <var:F1> := <nat:8> ; \\ \{ <var:s> = <var:f> \land <var:F0> = <nat:2> \land <var:F1> = <nat:8> \} \\ <var:F1> := <var:F1> * <var:s> ; \\ \{ <var:s> = <var:f> \land <var:F0> = <nat:2> \land <var:F1> = <nat:8> \cdot <var:f> \} \\ <var:b> := <var:F1> ; \\ \{ <var:s> = <var:f> \land <var:F0> = <nat:2> \land <var:b> = <nat:8> \cdot <var:f> \} \\ <var:b> := <var:b> + <var:F0> \\ \{ <var:s> = <var:f> \land <var:b> = <nat:8> \cdot <var:f> + <nat:2> \} \end{eqnarray} As a result , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:s> ; <var:b> := <var:F1> ; <var:b> := <var:b> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <def:poly> {{ <var:b> = <nat:8> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:F0> = <nat:2> /\ <var:b> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:b> = <nat:8> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 