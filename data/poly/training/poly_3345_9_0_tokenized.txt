\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:A> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:A> ; <var:I2> := <var:I2> * <var:A> ; <var:k> := <var:I2> ; <var:k> := <var:k> + <var:I1> ; <var:k> := <var:k> + <var:I0> \end{verbatim} Given it to hold that $ <var:A> = <var:f> $ ahead of executing our code then $ <var:k> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code is clear by Hoare logic . Immediately following , we see the variable assignmet statement \verb | <var:I0> := <nat:3> ; | . This statement redefines the precondition $ \{ <var:A> = <var:f> \} $ toward the postcondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \} $ . This is known to be sound by the assignment rule of typical Hoare logic . Now , we have the assignment statement \verb | <var:I1> := <nat:3> ; | . This command redefines the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \} $ as $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \} $ . Advancing on , the variable assignmet statement \verb | <var:I1> := <var:I1> * <var:A> ; | . This moves the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \} $ into $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \} $ . Moving forward to the upcoming bit of code seen in our series of commands , the variable update line assigning $ <nat:7> $ to $ <var:I2>$ . This transfers the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \} $ as the condition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \} $ . This is ensured through the assignment law from typical Hoare logic . Further , we see the variable update line \verb | <var:I2> := <var:I2> * <var:A> ; | . This command advances the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \} $ as the condition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \times <var:f> \} $ . This is shown using the assignment law obtained from Hoare techniques . Stepping forward , the binding statement \verb | <var:I2> := <var:I2> * <var:A> ; | . This statement takes the condition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \times <var:f> \} $ into the condition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \times <var:f> ^ <nat:2> \} $ . Moving forward to the next step , we have the variable assignmet statement assigning $ <var:I2> $ to $ <var:k>$ . This command forwards the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:I2> = <nat:7> \times <var:f> ^ <nat:2> \} $ toward the postcondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:k> = <nat:7> \times <var:f> ^ <nat:2> \} $ . Advancing , we see the environment update command \verb | <var:k> := <var:k> + <var:I1> ; | . This code advances $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:I1> = <nat:3> \times <var:f> \land <var:k> = <nat:7> \times <var:f> ^ <nat:2> \} $ to the condition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:k> = <nat:7> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> \} $ . Taking a look at the proceeding bit of code in our set of instructions , we have the variable assignmet code \verb | <var:k> := <var:k> + <var:I0> | . This moves the precondition $ \{ <var:A> = <var:f> \land <var:I0> = <nat:3> \land <var:k> = <nat:7> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> \} $ as $ \{ <var:A> = <var:f> \land <var:k> = <nat:7> \times <var:f> ^ <nat:2> + <nat:3> \times <var:f> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:A> = <var:f> }} <var:I0> := <nat:3> ; <var:I1> := <nat:3> ; <var:I1> := <var:I1> * <var:A> ; <var:I2> := <nat:7> ; <var:I2> := <var:I2> * <var:A> ; <var:I2> := <var:I2> * <var:A> ; <var:k> := <var:I2> ; <var:k> := <var:k> + <var:I1> ; <var:k> := <var:k> + <var:I0> {{ <var:k> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> * <var:f> /\ <var:I2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> * <var:f> /\ <var:I2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> * <var:f> /\ <var:I2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:3> * <var:f> /\ <var:k> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:I0> = <nat:3> /\ <var:k> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:k> = <nat:7> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 