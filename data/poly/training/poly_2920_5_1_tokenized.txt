\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:I> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:9> ; <var:u> := <var:S1> <var:u> := <var:u> + <var:S0> \end{verbatim} Assume that we have $ <var:I> = <var:f> $ ahead of the execution of our set of commands , it must be that we have $ <var:u> = <nat:9> \times <var:f> + <nat:8> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:I> = <var:f> \} \\ <var:S1> := <var:I> ; \\ \{ <var:I> = <var:f> \land <var:S1> = <var:f> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:I> = <var:f> \land <var:S1> = <var:f> \land <var:S0> = <nat:8> \} \\ <var:S1> := <var:S1> * <nat:9> ; \\ \{ <var:I> = <var:f> \land <var:S1> = <nat:9> \times <var:f> \land <var:S0> = <nat:8> \} \\ <var:u> := <var:S1> \\ \{ <var:I> = <var:f> \land <var:S0> = <nat:8> \land <var:u> = <nat:9> \times <var:f> \} \\ <var:u> := <var:u> + <var:S0> \\ \{ <var:I> = <var:f> \land <var:u> = <nat:9> \times <var:f> + <nat:8> \} \end{eqnarray} Hence , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:I> = <var:f> }} <var:S1> := <var:I> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:9> ; <var:u> := <var:S1> <var:u> := <var:u> + <var:S0> {{ <var:u> = <nat:9> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:S1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:S1> = <var:f> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:S1> = <nat:9> * <var:f> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:S0> = <nat:8> /\ <var:u> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:u> = <nat:9> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 