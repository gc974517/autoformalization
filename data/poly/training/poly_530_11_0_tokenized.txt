\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:2> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:H> ; <var:A2> := <var:A2> * <var:H> ; <var:A3> := <nat:9> ; <var:A3> := <var:A3> * <var:H> ; <var:A3> := <var:A3> * <var:H> ; <var:A3> := <var:A3> * <var:H> ; <var:Y> := <var:A3> ; <var:Y> := <var:Y> + <var:A2> ; <var:Y> := <var:Y> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:H> = <var:Z> $ ahead of running the list of instructions , it must be that we see $ <var:Y> = <nat:9> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:2> $ once series of commands has finished executing . \end{theorem} \begin{proof} The method of proof for this code segment is shown by standard Hoare logic . Advancing on , \begin{verbatim} { <var:H> = <var:Z> } <var:A0> := <nat:2> { <var:H> = <var:Z> \land <var:A0> = <nat:2> } \end{verbatim} This is rigorously given through the environment update rule found in Hoare logic . Moving forward to the subsequent lines of codein our set of commands , \begin{verbatim} { <var:H> = <var:Z> } <var:A0> := <nat:2> { <var:H> = <var:Z> \land <var:A0> = <nat:2> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> } <var:A2> := <nat:5> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> } <var:A2> := <var:A2> * <var:H> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> } <var:A2> := <var:A2> * <var:H> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> } <var:A3> := <nat:9> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:A3> = <nat:9> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:A3> = <nat:9> } <var:A3> := <var:A3> * <var:H> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:A3> = <nat:9> * <var:Z> } { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:A3> = <nat:9> * <var:Z> } <var:A3> := <var:A3> * <var:H> { <var:H> = <var:Z> \land <var:A0> = <nat:2> \land <var:A2> = <nat:5> * <var:Z> ^ <nat:2> \land <var:A3> = <nat:9> * <var:Z> ^ <nat:2> } \end{verbatim} This is guaranteed by the environment update inference rule in standard Hoare reasoning . Advancing to the next step , we see \begin{verbatim} { <var:H> = <var:Z> } <var:A0> := <nat:2> { <var:H> = <var:Z> \land <var:A0> = <nat:2> } \end{verbatim} This is shown to be logically sound by the assignment scheme given by typical Hoare reasoning . Going to the next step , we see \begin{verbatim} { <var:H> = <var:Z> } <var:A0> := <nat:2> { <var:H> = <var:Z> \land <var:A0> = <nat:2> } \end{verbatim} This is guaranteed using the assignment inference rule from standard Hoare reasoning . Moving on to the upcoming command found in our set of instructions , we see \begin{verbatim} { <var:H> = <var:Z> } <var:A0> := <nat:2> { <var:H> = <var:Z> \land <var:A0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:2> ; <var:A2> := <nat:5> ; <var:A2> := <var:A2> * <var:H> ; <var:A2> := <var:A2> * <var:H> ; <var:A3> := <nat:9> ; <var:A3> := <var:A3> * <var:H> ; <var:A3> := <var:A3> * <var:H> ; <var:A3> := <var:A3> * <var:H> ; <var:Y> := <var:A3> ; <var:Y> := <var:Y> + <var:A2> ; <var:Y> := <var:Y> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:H> = <var:Z> }} <def:poly> {{ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:A2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:A0> = <nat:2> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 