\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:5> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:M> ; <var:W2> := <var:W2> * <var:M> ; <var:W3> := <nat:5> ; <var:W3> := <var:W3> * <var:M> ; <var:W3> := <var:W3> * <var:M> ; <var:W3> := <var:W3> * <var:M> ; <var:Q> := <var:W3> ; <var:Q> := <var:Q> + <var:W2> ; <var:Q> := <var:Q> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:M> = <var:A> $ ( for some whole numbers $ <var:A> $ ) prior to interpreting our code , it holds that we have $ <var:Q> = <nat:5> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be shown using Hoare techniques . Taking another step toward the next bits of codein our segment of code , \begin{verbatim} { <var:M> = <var:A> } <var:W0> := <nat:5> { <var:M> = <var:A> \land <var:W0> = <nat:5> } { <var:M> = <var:A> \land <var:W0> = <nat:5> } <var:W2> := <nat:3> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> } <var:W2> := <var:W2> * <var:M> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> } <var:W2> := <var:W2> * <var:M> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> } <var:W3> := <nat:5> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> } <var:W3> := <var:W3> * <var:M> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> } <var:W3> := <var:W3> * <var:M> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> ^ <nat:2> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> ^ <nat:2> } <var:W3> := <var:W3> * <var:M> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> ^ <nat:3> } { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:W3> = <nat:5> * <var:A> ^ <nat:3> } <var:Q> := <var:W3> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> * <var:A> ^ <nat:2> \land <var:Q> = <nat:5> * <var:A> ^ <nat:3> } \end{verbatim} Moving on , we have \begin{verbatim} { <var:M> = <var:A> } <var:W0> := <nat:5> { <var:M> = <var:A> \land <var:W0> = <nat:5> } { <var:M> = <var:A> \land <var:W0> = <nat:5> } <var:W2> := <nat:3> { <var:M> = <var:A> \land <var:W0> = <nat:5> \land <var:W2> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W0> := <nat:5> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:M> ; <var:W2> := <var:W2> * <var:M> ; <var:W3> := <nat:5> ; <var:W3> := <var:W3> * <var:M> ; <var:W3> := <var:W3> * <var:M> ; <var:W3> := <var:W3> * <var:M> ; <var:Q> := <var:W3> ; <var:Q> := <var:Q> + <var:W2> ; <var:Q> := <var:Q> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:M> = <var:A> }} <def:poly> {{ <var:Q> = <nat:5> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:W3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:Q> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:W0> = <nat:5> /\ <var:Q> = <nat:5> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:A> /\ <var:Q> = <nat:5> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 