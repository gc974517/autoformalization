\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:b> ; <var:i> := <var:f1> ; <var:i> := <var:i> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:b> = <var:H> $ prior to the execution of the set of instructions , it follows that we see $ <var:i> = <nat:5> * <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Observe the following decorated segment of code . \begin{eqnarray} \{ <var:b> = <var:H> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:b> = <var:H> \land <var:f0> = <nat:6> \} \\ <var:f1> := <nat:5> ; \\ \{ <var:b> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:5> \} \\ <var:f1> := <var:f1> * <var:b> ; \\ \{ <var:b> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:5> \times <var:H> \} \\ <var:i> := <var:f1> ; \\ \{ <var:b> = <var:H> \land <var:f0> = <nat:6> \land <var:i> = <nat:5> \times <var:H> \} \\ <var:i> := <var:i> + <var:f0> \\ \{ <var:b> = <var:H> \land <var:i> = <nat:5> \times <var:H> + <nat:6> \} \end{eqnarray} Using usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:f1> := <nat:5> ; <var:f1> := <var:f1> * <var:b> ; <var:i> := <var:f1> ; <var:i> := <var:i> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:b> = <var:H> }} <def:poly> {{ <var:i> = <nat:5> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:f0> = <nat:6> /\ <var:i> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:i> = <nat:5> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 