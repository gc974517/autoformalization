\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} : \begin{verbatim} <var:a1> := <var:V> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:5> ; <var:q> := <var:a1> <var:q> := <var:q> + <var:a0> \end{verbatim} Allow it to hold that $ <var:V> = <var:P> $ assuming some positive coefficients $ <var:P> $ before evaluating the program , it holds that we see $ <var:q> = <nat:5> * <var:P> + <nat:5> $ when list of commands is done executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives : \begin{eqnarray} \{ <var:V> = <var:P> \} \\ <var:a1> := <var:V> ; \\ \{ <var:V> = <var:P> \land <var:a1> = <var:P> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:V> = <var:P> \land <var:a1> = <var:P> \land <var:a0> = <nat:5> \} \\ <var:a1> := <var:a1> * <nat:5> ; \\ \{ <var:V> = <var:P> \land <var:a1> = <nat:5> \cdot <var:P> \land <var:a0> = <nat:5> \} \\ <var:q> := <var:a1> \\ \{ <var:V> = <var:P> \land <var:a0> = <nat:5> \land <var:q> = <nat:5> \cdot <var:P> \} \\ <var:q> := <var:q> + <var:a0> \\ \{ <var:V> = <var:P> \land <var:q> = <nat:5> \cdot <var:P> + <nat:5> \} \end{eqnarray} Thusly , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:V> = <var:P> }} <var:a1> := <var:V> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:5> ; <var:q> := <var:a1> <var:q> := <var:q> + <var:a0> {{ <var:q> = <nat:5> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:a1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:a1> = <var:P> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:a1> = <nat:5> * <var:P> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:a0> = <nat:5> /\ <var:q> = <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:q> = <nat:5> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 