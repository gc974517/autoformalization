\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:B> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:o> = <var:Q> $ --- given any $ <var:Q> $ --- prior to running the list of commands then we have $ <var:B> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands is demonstrated through typical Hoare techniques . Moving forward to the subsequent commands found in our code segment , \verb | { <var:o> = <var:Q> } <var:y0> := <nat:2> { <var:o> = <var:Q> \land <var:y0> = <nat:2> } | and \verb | { <var:o> = <var:Q> \land <var:y0> = <nat:2> } <var:B> := <var:y0{ <var:o> = <var:Q> \land <var:B> = <nat:2> } | . This is sound with the environment update scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:B> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:o> = <var:Q> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Q> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Q> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 