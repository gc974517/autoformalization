\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <nat:1> + <var:P> * <var:n> ; <var:P> := <var:P> * <var:n> ; <var:P> := <nat:3> + <var:P> * <var:n> ; <var:P> := <nat:4> + <var:P> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:n> = <var:J> $ prior to interpreting the program it holds that we have $ <var:P> = <nat:2> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:n> = <var:J> \} \\ <var:P> := <nat:2> ; \\ \{ <var:n> = <var:J> \land <var:P> = <nat:2> \} \\ <var:P> := <nat:1> + <var:P> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:P> = <nat:2> * <var:J> + <nat:1> \} \\ <var:P> := <var:P> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:P> = <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + \} \\ <var:P> := <nat:3> + <var:P> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:P> = <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> \} \\ <var:P> := <nat:4> + <var:P> * <var:n> \\ \{ <var:n> = <var:J> \land <var:P> = <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + <nat:4> \} \end{eqnarray} As a consequence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:2> ; <var:P> := <nat:1> + <var:P> * <var:n> ; <var:P> := <var:P> * <var:n> ; <var:P> := <nat:3> + <var:P> * <var:n> ; <var:P> := <nat:4> + <var:P> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <def:poly> {{ <var:P> = <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:P> = <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:P> = <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:P> = <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:P> = <nat:2> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 