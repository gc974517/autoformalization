\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:P> ; <var:R> := <nat:2> + <var:R> * <var:P> ; <var:R> := <var:R> * <var:P> ; <var:R> := <nat:4> + <var:R> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:P> = <var:o> $ before evaluating the series of instructions it holds that we see $ <var:R> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} See that the below decorated list of instructions . \begin{eqnarray} \{ <var:P> = <var:o> \} \\ <var:R> := <nat:2> ; \\ \{ <var:P> = <var:o> \land <var:R> = <nat:2> \} \\ <var:R> := <nat:3> + <var:R> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:R> = <nat:2> \times <var:o> + <nat:3> \} \\ <var:R> := <nat:2> + <var:R> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:R> = <nat:2> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> \} \\ <var:R> := <var:R> * <var:P> ; \\ \{ <var:P> = <var:o> \land <var:R> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + \} \\ <var:R> := <nat:4> + <var:R> * <var:P> \\ \{ <var:P> = <var:o> \land <var:R> = <nat:2> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:P> ; <var:R> := <nat:2> + <var:R> * <var:P> ; <var:R> := <var:R> * <var:P> ; <var:R> := <nat:4> + <var:R> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <def:poly> {{ <var:R> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:R> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 