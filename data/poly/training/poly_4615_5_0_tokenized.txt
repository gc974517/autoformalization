\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:6> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:S> ; <var:n> := <var:s1> ; <var:n> := <var:n> + <var:s0> \end{verbatim} Allowing ( taking natural coefficients $ <var:g> $ ) that $ <var:S> = <var:g> $ ahead of the execution of the list of instructions it holds that we have $ <var:n> = <nat:8> \cdot <var:g> + <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:S> = <var:g> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:S> = <var:g> \land <var:s0> = <nat:6> \} \\ <var:s1> := <nat:8> ; \\ \{ <var:S> = <var:g> \land <var:s0> = <nat:6> \land <var:s1> = <nat:8> \} \\ <var:s1> := <var:s1> * <var:S> ; \\ \{ <var:S> = <var:g> \land <var:s0> = <nat:6> \land <var:s1> = <nat:8> \cdot <var:g> \} \\ <var:n> := <var:s1> ; \\ \{ <var:S> = <var:g> \land <var:s0> = <nat:6> \land <var:n> = <nat:8> \cdot <var:g> \} \\ <var:n> := <var:n> + <var:s0> \\ \{ <var:S> = <var:g> \land <var:n> = <nat:8> \cdot <var:g> + <nat:6> \} \end{eqnarray} As a consequence , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <var:s0> := <nat:6> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:S> ; <var:n> := <var:s1> ; <var:n> := <var:n> + <var:s0> {{ <var:n> = <nat:8> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:s0> = <nat:6> /\ <var:n> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:n> = <nat:8> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 