\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:6> ; <var:s> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Given --- for all $ <var:S> $ --- $ <var:D> = <var:S> $ ahead of running this code segment , it must be that we see $ <var:s> = <nat:6> $ once program exits . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:D> = <var:S> \} \\ <var:w0> := <nat:6> ; \\ \{ <var:D> = <var:S> \land <var:w0> = <nat:6> \} \\ <var:s> := <var:w0> \\ \{ <var:D> = <var:S> \land <var:s> = <nat:6> \} \end{eqnarray} Therefore , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:6> ; <var:s> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:D> = <var:S> }} <def:poly> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 