\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:z> ; <var:f> := <var:u1> ; <var:f> := <var:f> + <var:u0> \end{verbatim} Assume it to hold that $ <var:z> = <var:P> $ before the evaluation of the program it follows that we see $ <var:f> = <nat:1> * <var:P> + <nat:3> $ when segment of code has finished executing . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:z> = <var:P> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:z> = <var:P> \land <var:u0> = <nat:3> \} \\ <var:u1> := <nat:1> ; \\ \{ <var:z> = <var:P> \land <var:u0> = <nat:3> \land <var:u1> = <nat:1> \} \\ <var:u1> := <var:u1> * <var:z> ; \\ \{ <var:z> = <var:P> \land <var:u0> = <nat:3> \land <var:u1> = <nat:1> * <var:P> \} \\ <var:f> := <var:u1> ; \\ \{ <var:z> = <var:P> \land <var:u0> = <nat:3> \land <var:f> = <nat:1> * <var:P> \} \\ <var:f> := <var:f> + <var:u0> \\ \{ <var:z> = <var:P> \land <var:f> = <nat:1> * <var:P> + <nat:3> \} \end{eqnarray} As a result , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:z> = <var:P> }} <var:u0> := <nat:3> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:z> ; <var:f> := <var:u1> ; <var:f> := <var:f> + <var:u0> {{ <var:f> = <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:u0> = <nat:3> /\ <var:f> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:P> /\ <var:f> = <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 