\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:b0> := <nat:4> ; <var:I> := <var:b0> \end{verbatim} Allow that $ <var:x> = <var:o> $ prior to the execution of our list of commands , it must be that we see $ <var:I> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our code is demonstrated with Hoare reasoning . After , we have \begin{verbatim} { <var:x> = <var:o> } <var:b0> := <nat:4> { <var:x> = <var:o> \land <var:b0> = <nat:4> } \end{verbatim} This is guaranteed through the binding scheme from typical Hoare reasoning . Immediately following , \begin{verbatim} { <var:x> = <var:o> } <var:b0> := <nat:4> { <var:x> = <var:o> \land <var:b0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:x> = <var:o> }} <var:b0> := <nat:4> ; <var:I> := <var:b0> {{ <var:I> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:I> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 