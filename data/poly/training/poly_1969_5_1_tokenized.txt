\begin{document} \begin{theorem} Let the following program such that \begin{verbatim} <var:Y1> := <var:a> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:j> := <var:Y1> <var:j> := <var:j> + <var:Y0> \end{verbatim} Given it to hold that $ <var:a> = <var:E> $ prior to running the program , it holds that $ <var:j> = <nat:2> \cdot <var:E> + <nat:1> $ after set of commands terminates . \end{theorem} \begin{proof} The proof of this list of commands can be accomplished using usual Hoare reasoning . Moving on , \verb | { <var:a> = <var:E> } <var:Y1> := <var:a> { <var:a> = <var:E> \land <var:Y1> = <var:E> } | and \verb | { <var:a> = <var:E> \land <var:Y1> = <var:E> } <var:Y0> := <nat:1> { <var:a> = <var:E> \land <var:Y1> = <var:E> \land <var:Y0> = <nat:1> } | . Taking a look at the proceeding lines of codein our code , \verb | { <var:a> = <var:E> } <var:Y1> := <var:a> { <var:a> = <var:E> \land <var:Y1> = <var:E> } | , \verb | { <var:a> = <var:E> \land <var:Y1> = <var:E> } <var:Y0> := <nat:1> { <var:a> = <var:E> \land <var:Y1> = <var:E> \land <var:Y0> = <nat:1> } | and \verb | { <var:a> = <var:E> \land <var:Y1> = <var:E> \land <var:Y0> = <nat:1> } <var:Y1> := <var:Y1> * <nat:2> { <var:a> = <var:E> \land <var:Y1> = <nat:2> * <var:E> \land <var:Y0> = <nat:1> } | . This is shown to be logically sound through the binding rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:a> = <var:E> }} <var:Y1> := <var:a> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:j> := <var:Y1> <var:j> := <var:j> + <var:Y0> {{ <var:j> = <nat:2> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:E> /\ <var:Y1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:E> /\ <var:Y1> = <var:E> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:E> /\ <var:Y1> = <nat:2> * <var:E> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:E> /\ <var:Y0> = <nat:1> /\ <var:j> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:E> /\ <var:j> = <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 