\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:5> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:V> ; <var:a3> := <var:a3> * <var:V> ; <var:a3> := <var:a3> * <var:V> ; <var:m> := <var:a3> ; <var:m> := <var:m> + <var:a2> ; <var:m> := <var:m> + <var:a0> \end{verbatim} Assuming it to be that $ <var:V> = <var:F> $ ( given $ <var:F> \in \mathbb{Z}^+ $ ) prior to evaluating our set of instructions then we see $ <var:m> = <nat:7> \times <var:F> ^ <nat:3> + <nat:9> \times <var:F> ^ <nat:2> + <nat:5> $ when list of instructions has terminated . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be accomplished with the following decorated list of instructions . \begin{eqnarray} \{ <var:V> = <var:F> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \} \\ <var:a2> := <nat:9> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \} \\ <var:a3> := <nat:7> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:a3> = <nat:7> \} \\ <var:a3> := <var:a3> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:a3> = <nat:7> \times <var:F> \} \\ <var:a3> := <var:a3> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:a3> = <nat:7> \times <var:F> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:V> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:a3> = <nat:7> \times <var:F> ^ <nat:3> \} \\ <var:m> := <var:a3> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:a2> = <nat:9> \times <var:F> ^ <nat:2> \land <var:m> = <nat:7> \times <var:F> ^ <nat:3> \} \end{eqnarray} Advancing the execution of the set of commands results in : \begin{eqnarray} <var:m> := <var:m> + <var:a2> ; \\ \{ <var:V> = <var:F> \land <var:a0> = <nat:5> \land <var:m> = <nat:7> \times <var:F> ^ <nat:3> + <nat:9> \times <var:F> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:a0> \\ \{ <var:V> = <var:F> \land <var:m> = <nat:7> \times <var:F> ^ <nat:3> + <nat:9> \times <var:F> ^ <nat:2> + <nat:5> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <var:a0> := <nat:5> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:V> ; <var:a3> := <var:a3> * <var:V> ; <var:a3> := <var:a3> * <var:V> ; <var:m> := <var:a3> ; <var:m> := <var:m> + <var:a2> ; <var:m> := <var:m> + <var:a0> {{ <var:m> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:m> = <nat:7> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:a0> = <nat:5> /\ <var:m> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:m> = <nat:7> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 