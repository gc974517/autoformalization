\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:B> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:B> ; <var:x2> := <var:x2> * <var:B> ; <var:P> := <var:x2> ; <var:P> := <var:P> + <var:x1> ; <var:P> := <var:P> + <var:x0> \end{verbatim} Given it to hold that $ <var:B> = <var:m> $ assuming some natural coefficients $ <var:m> $ before running the segment of code it must be that we have $ <var:P> = <nat:3> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:3> $ when program has exited . \end{theorem} \begin{proof} Demonstrating correctness of this code can be demonstrated by standard Hoare logic . Moving forward to the subsequent statements in our set of commands , we see \begin{eqnarray} \{ <var:B> = <var:m> \} \, <var:x0> := <nat:3> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \\ \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:9> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> \} \\ \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> \} \, <var:x1> := <var:x1> * <var:B> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:m> \} \\ \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:m> \} \, <var:x2> := <nat:3> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:m> \land <var:x2> = <nat:3> \} \\ \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:m> \land <var:x2> = <nat:3> \} \, <var:x2> := <var:x2> * <var:B> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:m> \land <var:x2> = <nat:3> * <var:m> \} \end{eqnarray} This is sound through the scheme of typical Hoare logic . Taking another step toward the next bit of code seen in the segment of code , we see \begin{eqnarray} \{ <var:B> = <var:m> \} \, <var:x0> := <nat:3> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \end{eqnarray} Paying attention to the upcoming steps found in the set of instructions , we have \begin{eqnarray} \{ <var:B> = <var:m> \} \, <var:x0> := <nat:3> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \\ \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:9> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> \} \end{eqnarray} Jumping to the subsequent step seen in the program , \begin{eqnarray} \{ <var:B> = <var:m> \} \, <var:x0> := <nat:3> \, \{ <var:B> = <var:m> \land <var:x0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <var:x0> := <nat:3> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:B> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:B> ; <var:x2> := <var:x2> * <var:B> ; <var:P> := <var:x2> ; <var:P> := <var:P> + <var:x1> ; <var:P> := <var:P> + <var:x0> {{ <var:P> = <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:m> /\ <var:x2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:m> /\ <var:x2> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:m> /\ <var:x2> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:m> /\ <var:P> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:x0> = <nat:3> /\ <var:P> = <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:P> = <nat:3> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 