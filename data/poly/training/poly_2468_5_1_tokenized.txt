\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:B1> := <var:I> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:5> ; <var:M> := <var:B1> <var:M> := <var:M> + <var:B0> \end{verbatim} Allow that $ <var:I> = <var:Z> $ prior to the execution of this code it holds that we see $ <var:M> = <nat:5> * <var:Z> + <nat:8> $ . \end{theorem} \begin{proof} The proof of our code segment is clear with usual Hoare techniques . Stepping forward , we see \verb | { <var:I> = <var:Z> } <var:B1> := <var:I> { <var:I> = <var:Z> \land <var:B1> = <var:Z> } | , \verb | { <var:I> = <var:Z> \land <var:B1> = <var:Z> } <var:B0> := <nat:8> { <var:I> = <var:Z> \land <var:B1> = <var:Z> \land <var:B0> = <nat:8> } | and \verb | { <var:I> = <var:Z> \land <var:B1> = <var:Z> \land <var:B0> = <nat:8> } <var:B1> := <var:B1> * <nat:5> { <var:I> = <var:Z> \land <var:B1> = <nat:5> * <var:Z> \land <var:B0> = <nat:8> } | . This is known to be sound using the variable binding inference rule of standard Hoare reasoning . Going forward , we have \verb | { <var:I> = <var:Z> } <var:B1> := <var:I> { <var:I> = <var:Z> \land <var:B1> = <var:Z> } | . Stepping forward , \verb | { <var:I> = <var:Z> } <var:B1> := <var:I> { <var:I> = <var:Z> \land <var:B1> = <var:Z> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <var:B1> := <var:I> ; <var:B0> := <nat:8> ; <var:B1> := <var:B1> * <nat:5> ; <var:M> := <var:B1> <var:M> := <var:M> + <var:B0> {{ <var:M> = <nat:5> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:B1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:B1> = <var:Z> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:B1> = <nat:5> * <var:Z> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:B0> = <nat:8> /\ <var:M> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:M> = <nat:5> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 