\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:5> ; <var:p> := <var:w0> \end{verbatim} Allowing that we have $ <var:o> = <var:u> $ before the execution of this list of commands , then $ <var:p> = <nat:5> $ after program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our program is accomplished with Hoare logic . Moving on to the next step , we have the variable binding command assigning $ <nat:5> $ as $ <var:w0>$ . This code transfers the precondition $ \{ <var:o> = <var:u> \} $ to $ \{ <var:o> = <var:u> \land <var:w0> = <nat:5> \} $ . Observing the next piece of code found in our code , we see the binding command \verb | <var:p> := <var:w0> | . This transfers $ \{ <var:o> = <var:u> \land <var:w0> = <nat:5> \} $ to the condition $ \{ <var:o> = <var:u> \land <var:p> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:o> = <var:u> }} <var:w0> := <nat:5> ; <var:p> := <var:w0> {{ <var:p> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:u> /\ <var:p> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 