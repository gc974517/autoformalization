\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:X> ; <var:O> := <var:Z1> ; <var:O> := <var:O> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for natural coefficients $ <var:o> $ , it to be that $ <var:X> = <var:o> $ ahead of the execution of our list of instructions , it follows that we see $ <var:O> = <nat:2> \times <var:o> + <nat:8> $ when code is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:X> = <var:o> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:X> = <var:o> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <nat:2> ; \\ \{ <var:X> = <var:o> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <var:X> ; \\ \{ <var:X> = <var:o> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:2> \times <var:o> \} \\ <var:O> := <var:Z1> ; \\ \{ <var:X> = <var:o> \land <var:Z0> = <nat:8> \land <var:O> = <nat:2> \times <var:o> \} \\ <var:O> := <var:O> + <var:Z0> \\ \{ <var:X> = <var:o> \land <var:O> = <nat:2> \times <var:o> + <nat:8> \} \end{eqnarray} Thusly , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:8> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:X> ; <var:O> := <var:Z1> ; <var:O> := <var:O> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <def:poly> {{ <var:O> = <nat:2> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:Z0> = <nat:8> /\ <var:O> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:O> = <nat:2> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 