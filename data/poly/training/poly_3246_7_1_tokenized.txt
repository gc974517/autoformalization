\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:k> ; <var:v2> := <var:v1> * <var:k> ; <var:v3> := <var:v2> * <var:k> ; <var:v0> := <nat:7> ; <var:v3> := <var:v3> * <nat:3> ; <var:x> := <var:v3> <var:x> := <var:x> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:k> = <var:f> $ ahead of executing our series of instructions , it holds that $ <var:x> = <nat:3> \cdot <var:f> ^ <nat:3> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:k> = <var:f> \} \\ <var:v1> := <var:k> ; \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \} \\ <var:v2> := <var:v1> * <var:k> ; \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:k> ; \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \land <var:v0> = <nat:7> \} \end{eqnarray} Continuing evaluating the code segment returns : \begin{eqnarray} <var:v3> := <var:v3> * <nat:3> ; \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <nat:3> * <var:f> ^ <nat:3> \land <var:v0> = <nat:7> \} \\ <var:x> := <var:v3> \\ \{ <var:k> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v0> = <nat:7> \land <var:x> = <nat:3> * <var:f> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:v0> \\ \{ <var:k> = <var:f> \land <var:x> = <nat:3> * <var:f> ^ <nat:3> + <nat:7> \} \end{eqnarray} As a consequence , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:k> ; <var:v2> := <var:v1> * <var:k> ; <var:v3> := <var:v2> * <var:k> ; <var:v0> := <nat:7> ; <var:v3> := <var:v3> * <nat:3> ; <var:x> := <var:v3> <var:x> := <var:x> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:k> = <var:f> }} <def:poly> {{ <var:x> = <nat:3> * <var:f> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:f> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v0> = <nat:7> /\ <var:x> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:x> = <nat:3> * <var:f> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 