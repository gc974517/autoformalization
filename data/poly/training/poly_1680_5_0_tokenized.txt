\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:8> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:a> ; <var:b> := <var:K1> ; <var:b> := <var:b> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assuming that $ <var:a> = <var:k> $ --- given any natural numbers $ <var:k> $ --- before executing our series of instructions , then $ <var:b> = <nat:1> * <var:k> + <nat:8> $ once list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:k> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:a> = <var:k> \land <var:K0> = <nat:8> \} \\ <var:K1> := <nat:1> ; \\ \{ <var:a> = <var:k> \land <var:K0> = <nat:8> \land <var:K1> = <nat:1> \} \\ <var:K1> := <var:K1> * <var:a> ; \\ \{ <var:a> = <var:k> \land <var:K0> = <nat:8> \land <var:K1> = <nat:1> \times <var:k> \} \\ <var:b> := <var:K1> ; \\ \{ <var:a> = <var:k> \land <var:K0> = <nat:8> \land <var:b> = <nat:1> \times <var:k> \} \\ <var:b> := <var:b> + <var:K0> \\ \{ <var:a> = <var:k> \land <var:b> = <nat:1> \times <var:k> + <nat:8> \} \end{eqnarray} The application of usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:8> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:a> ; <var:b> := <var:K1> ; <var:b> := <var:b> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:a> = <var:k> }} <def:poly> {{ <var:b> = <nat:1> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:K0> = <nat:8> /\ <var:b> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:b> = <nat:1> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 