\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:b> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:6> ; <var:i> := <var:k1> <var:i> := <var:i> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Given $ <var:b> = <var:X> $ before the execution of this set of commands , it holds that we see $ <var:i> = <nat:6> \times <var:X> + <nat:1> $ after list of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for the code can be given by usual Hoare reasoning . Moving forward to the next step , \verb | { <var:b> = <var:X> } <var:k1> := <var:b> { <var:b> = <var:X> \land <var:k1> = <var:X> } | , \verb | { <var:b> = <var:X> \land <var:k1> = <var:X> } <var:k0> := <nat:1> { <var:b> = <var:X> \land <var:k1> = <var:X> \land <var:k0> = <nat:1> } | , \verb | { <var:b> = <var:X> \land <var:k1> = <var:X> \land <var:k0> = <nat:1> } <var:k1> := <var:k1> * <nat:6> { <var:b> = <var:X> \land <var:k1> = <nat:6> \cdot <var:X> \land <var:k0> = <nat:1> } | and \verb | { <var:b> = <var:X> \land <var:k1> = <nat:6> \cdot <var:X> \land <var:k0> = <nat:1> } <var:i> := <var:k1{ <var:b> = <var:X> \land <var:k0> = <nat:1> \land <var:i> = <nat:6> \cdot <var:X> } | . Taking a look at the subsequent line found in our list of instructions , we have \verb | { <var:b> = <var:X> } <var:k1> := <var:b> { <var:b> = <var:X> \land <var:k1> = <var:X> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:b> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:6> ; <var:i> := <var:k1> <var:i> := <var:i> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <def:poly> {{ <var:i> = <nat:6> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:k1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:k1> = <var:X> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:k1> = <nat:6> * <var:X> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:k0> = <nat:1> /\ <var:i> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:i> = <nat:6> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 