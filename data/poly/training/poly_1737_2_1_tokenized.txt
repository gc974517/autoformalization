\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:s0> := <nat:2> ; <var:u> := <var:s0> \end{verbatim} Assuming --- with some natural coefficients $ <var:B> $ --- it to be that $ <var:Q> = <var:B> $ before interpreting the code , it must be that we see $ <var:u> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:B> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:Q> = <var:B> \land <var:s0> = <nat:2> \} \\ <var:u> := <var:s0> \\ \{ <var:Q> = <var:B> \land <var:u> = <nat:2> \} \end{eqnarray} Utilizing Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Q> = <var:B> }} <var:s0> := <nat:2> ; <var:u> := <var:s0> {{ <var:u> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:B> /\ <var:u> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 