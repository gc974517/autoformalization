\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:7> ; <var:D> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:O> = <var:M> $ before running this list of commands , it holds that we see $ <var:D> = <nat:7> $ after list of commands has terminated . \end{theorem} \begin{proof} The flow of logic for our segment of code can be accomplished through usual Hoare techniques . Observing the following command found in the series of commands , the variable update statement \verb | <var:B0> := <nat:7> ; | . This code redefines $ \{ <var:O> = <var:M> \} $ to the postcondition $ \{ <var:O> = <var:M> \land <var:B0> = <nat:7> \} $ . Now , we have the binding command defining $ <var:B0$ as $ <var:D>$ . This redefines $ \{ <var:O> = <var:M> \land <var:B0> = <nat:7> \} $ to the postcondition $ \{ <var:O> = <var:M> \land <var:D> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:7> ; <var:D> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:O> = <var:M> }} <def:poly> {{ <var:D> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:M> /\ <var:D> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 