\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:A> ; <var:p2> := <var:p1> * <var:A> ; <var:p3> := <var:p2> * <var:A> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:5> ; <var:p3> := <var:p3> * <nat:4> ; <var:V> := <var:p3> <var:V> := <var:V> + <var:p2> <var:V> := <var:V> + <var:p1> <var:V> := <var:V> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:A> = <var:O> $ ( given some positive coefficients $ <var:O> $ ) ahead of interpreting the segment of code , it follows that we have $ <var:V> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:9> \cdot <var:O> + <nat:6> $ when series of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:O> \} \\ <var:p1> := <var:A> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <var:O> \} \\ <var:p2> := <var:p1> * <var:A> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:A> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p0> = <nat:6> \} \\ <var:p1> := <var:p1> * <nat:9> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <nat:9> \cdot <var:O> \land <var:p2> = <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p0> = <nat:6> \} \\ <var:p2> := <var:p2> * <nat:5> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <nat:9> \cdot <var:O> \land <var:p2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:p3> = <var:O> ^ <nat:3> \land <var:p0> = <nat:6> \} \\ <var:p3> := <var:p3> * <nat:4> ; \\ \{ <var:A> = <var:O> \land <var:p1> = <nat:9> \cdot <var:O> \land <var:p2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:p3> = <nat:4> \cdot <var:O> ^ <nat:3> \land <var:p0> = <nat:6> \} \\ <var:V> := <var:p3> \\ \{ <var:A> = <var:O> \land <var:p1> = <nat:9> \cdot <var:O> \land <var:p2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:p0> = <nat:6> \land <var:V> = <nat:4> \cdot <var:O> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:p2> \\ \{ <var:A> = <var:O> \land <var:p1> = <nat:9> \cdot <var:O> \land <var:p0> = <nat:6> \land <var:V> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:p1> \\ \{ <var:A> = <var:O> \land <var:p0> = <nat:6> \land <var:V> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:9> \cdot <var:O> \} \\ <var:V> := <var:V> + <var:p0> \\ \{ <var:A> = <var:O> \land <var:V> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:9> \cdot <var:O> + <nat:6> \} \end{eqnarray} Applying usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:A> ; <var:p2> := <var:p1> * <var:A> ; <var:p3> := <var:p2> * <var:A> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:5> ; <var:p3> := <var:p3> * <nat:4> ; <var:V> := <var:p3> <var:V> := <var:V> + <var:p2> <var:V> := <var:V> + <var:p1> <var:V> := <var:V> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:A> = <var:O> }} <def:poly> {{ <var:V> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <nat:9> * <var:O> /\ <var:p2> = <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <nat:9> * <var:O> /\ <var:p2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:p3> = <var:O> ^ <nat:3> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <nat:9> * <var:O> /\ <var:p2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:p3> = <nat:4> * <var:O> ^ <nat:3> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <nat:9> * <var:O> /\ <var:p2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:p0> = <nat:6> /\ <var:V> = <nat:4> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p1> = <nat:9> * <var:O> /\ <var:p0> = <nat:6> /\ <var:V> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:p0> = <nat:6> /\ <var:V> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:O> /\ <var:V> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 