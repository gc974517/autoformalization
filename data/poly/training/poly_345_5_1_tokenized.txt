\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:q> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:7> ; <var:b> := <var:V1> <var:b> := <var:b> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:q> = <var:I> $ ( taking positive integers $ <var:I> $ ) prior to running our series of commands , then we see $ <var:b> = <nat:7> \cdot <var:I> + <nat:4> $ when program has finished . \end{theorem} \begin{proof} Using Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:I> \} \\ <var:V1> := <var:q> ; \\ \{ <var:q> = <var:I> \land <var:V1> = <var:I> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:q> = <var:I> \land <var:V1> = <var:I> \land <var:V0> = <nat:4> \} \\ <var:V1> := <var:V1> * <nat:7> ; \\ \{ <var:q> = <var:I> \land <var:V1> = <nat:7> * <var:I> \land <var:V0> = <nat:4> \} \\ <var:b> := <var:V1> \\ \{ <var:q> = <var:I> \land <var:V0> = <nat:4> \land <var:b> = <nat:7> * <var:I> \} \\ <var:b> := <var:b> + <var:V0> \\ \{ <var:q> = <var:I> \land <var:b> = <nat:7> * <var:I> + <nat:4> \} \end{eqnarray} Given the above , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:q> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:7> ; <var:b> := <var:V1> <var:b> := <var:b> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:q> = <var:I> }} <def:poly> {{ <var:b> = <nat:7> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:V1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:V1> = <var:I> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:V1> = <nat:7> * <var:I> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:V0> = <nat:4> /\ <var:b> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:I> /\ <var:b> = <nat:7> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 