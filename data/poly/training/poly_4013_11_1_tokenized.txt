\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:C1> := <var:z> ; <var:C2> := <var:C1> * <var:z> ; <var:C3> := <var:C2> * <var:z> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:9> ; <var:A> := <var:C3> <var:A> := <var:A> + <var:C2> <var:A> := <var:A> + <var:C1> <var:A> := <var:A> + <var:C0> \end{verbatim} Assuming that $ <var:z> = <var:u> $ prior to interpreting the list of instructions then we see $ <var:A> = <nat:9> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + <nat:6> $ after set of instructions finishes . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:z> = <var:u> \} \\ <var:C1> := <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <var:u> \} \\ <var:C2> := <var:C1> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <var:u> \land <var:C2> = <var:u> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <var:u> \land <var:C2> = <var:u> ^ <nat:2> \land <var:C3> = <var:u> ^ <nat:3> \} \\ <var:C0> := <nat:6> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <var:u> \land <var:C2> = <var:u> ^ <nat:2> \land <var:C3> = <var:u> ^ <nat:3> \land <var:C0> = <nat:6> \} \\ <var:C1> := <var:C1> * <nat:2> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <nat:2> \cdot <var:u> \land <var:C2> = <var:u> ^ <nat:2> \land <var:C3> = <var:u> ^ <nat:3> \land <var:C0> = <nat:6> \} \\ <var:C2> := <var:C2> * <nat:3> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <nat:2> \cdot <var:u> \land <var:C2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:C3> = <var:u> ^ <nat:3> \land <var:C0> = <nat:6> \} \\ <var:C3> := <var:C3> * <nat:9> ; \\ \{ <var:z> = <var:u> \land <var:C1> = <nat:2> \cdot <var:u> \land <var:C2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:C3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:C0> = <nat:6> \} \\ <var:A> := <var:C3> \\ \{ <var:z> = <var:u> \land <var:C1> = <nat:2> \cdot <var:u> \land <var:C2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:C0> = <nat:6> \land <var:A> = <nat:9> \cdot <var:u> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:C2> \\ \{ <var:z> = <var:u> \land <var:C1> = <nat:2> \cdot <var:u> \land <var:C0> = <nat:6> \land <var:A> = <nat:9> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:C1> \\ \{ <var:z> = <var:u> \land <var:C0> = <nat:6> \land <var:A> = <nat:9> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> \} \\ <var:A> := <var:A> + <var:C0> \\ \{ <var:z> = <var:u> \land <var:A> = <nat:9> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + <nat:6> \} \end{eqnarray} Thusly , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <var:C1> := <var:z> ; <var:C2> := <var:C1> * <var:z> ; <var:C3> := <var:C2> * <var:z> ; <var:C0> := <nat:6> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:C3> := <var:C3> * <nat:9> ; <var:A> := <var:C3> <var:A> := <var:A> + <var:C2> <var:A> := <var:A> + <var:C1> <var:A> := <var:A> + <var:C0> {{ <var:A> = <nat:9> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <var:u> /\ <var:C2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <var:u> /\ <var:C2> = <var:u> ^ <nat:2> /\ <var:C3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <var:u> /\ <var:C2> = <var:u> ^ <nat:2> /\ <var:C3> = <var:u> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <var:u> ^ <nat:2> /\ <var:C3> = <var:u> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:C3> = <var:u> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:C3> = <nat:9> * <var:u> ^ <nat:3> /\ <var:C0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:C0> = <nat:6> /\ <var:A> = <nat:9> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C1> = <nat:2> * <var:u> /\ <var:C0> = <nat:6> /\ <var:A> = <nat:9> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:C0> = <nat:6> /\ <var:A> = <nat:9> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:A> = <nat:9> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 