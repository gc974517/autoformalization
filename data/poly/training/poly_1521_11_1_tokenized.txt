\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:q> ; <var:c2> := <var:c1> * <var:q> ; <var:c3> := <var:c2> * <var:q> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:5> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:8> ; <var:C> := <var:c3> <var:C> := <var:C> + <var:c2> <var:C> := <var:C> + <var:c1> <var:C> := <var:C> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Assuming , for $ <var:D> $ , that $ <var:q> = <var:D> $ prior to evaluating our set of instructions , it holds that we have $ <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> $ when code segment executes . \end{theorem} \begin{proof} Demonstrating correctness of this code is clear using typical Hoare techniques . Stepping forward , we have the environment update line defining $ <var:q> $ toward $ <var:c1>$ . This statement moves the condition $ \{ <var:q> = <var:D> \} $ as the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \} $ . Considering the upcoming statement contained in our set of commands , we have the variable binding code \verb | <var:c2> := <var:c1> * <var:q> ; | . This redefines the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \} $ into the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \} $ . Stepping forward , we have the assignment code binding $ <var:c2> * <var:q> $ into $ <var:c3>$ . This transfers the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \} $ to $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \} $ . Moving on to the next step , the line letting $ <nat:3> $ as $ <var:c0>$ . This code takes the condition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is shown using the assignment scheme given in standard Hoare reasoning . Moving onward , we see the assignment statement yielding $ <var:c1> * <nat:5> $ into $ <var:c1>$ . This redefines $ \{ <var:q> = <var:D> \land <var:c1> = <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is given by the assignment rule given in standard Hoare reasoning . Advancing to the next command in our set of commands , we see the variable assignmet command \verb | <var:c2> := <var:c2> * <nat:9> ; | . This moves the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ into the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is rigorously given by the assignment rule in typical Hoare reasoning . Moving on to the next line of code in our set of commands , we see the command letting $ <var:c3> * <nat:8> $ toward $ <var:c3>$ . This forwards the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c3> = <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ toward the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c3> = <nat:8> * <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is shown through the assignment law defined by Hoare logic . Moving forward to the next step , we see the binding code \verb | <var:C> := <var:c3> | . This transfers the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c3> = <nat:8> * <var:D> ^ <nat:3> \land <var:c0> = <nat:3> \} $ into $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> \} $ . This is known to be sound by the assignment law defined in typical Hoare logic . Advancing to the next statement found in the code segment , we see the statement defining $ <var:C> + <var:c2$ as $ <var:C>$ . This code advances the condition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c2> = <nat:9> * <var:D> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> \} $ . Moving forward to the proceeding line of code seen in the code segment , the line \verb | <var:C> := <var:C> + <var:c1> | . This takes the precondition $ \{ <var:q> = <var:D> \land <var:c1> = <nat:5> * <var:D> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> \} $ as the condition $ \{ <var:q> = <var:D> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} $ . Focusing on the proceeding step contained in our list of instructions , the variable binding statement \verb | <var:C> := <var:C> + <var:c0> | . This statement advances the precondition $ \{ <var:q> = <var:D> \land <var:c0> = <nat:3> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> \} $ . This is deduced through the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:q> ; <var:c2> := <var:c1> * <var:q> ; <var:c3> := <var:c2> * <var:q> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:5> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:8> ; <var:C> := <var:c3> <var:C> := <var:C> + <var:c2> <var:C> := <var:C> + <var:c1> <var:C> := <var:C> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <def:poly> {{ <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> /\ <var:c2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> /\ <var:c2> = <var:D> ^ <nat:2> /\ <var:c3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <var:D> /\ <var:c2> = <var:D> ^ <nat:2> /\ <var:c3> = <var:D> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:5> * <var:D> /\ <var:c2> = <var:D> ^ <nat:2> /\ <var:c3> = <var:D> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:5> * <var:D> /\ <var:c2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:c3> = <var:D> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:5> * <var:D> /\ <var:c2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:D> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:5> * <var:D> /\ <var:c2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:c0> = <nat:3> /\ <var:C> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c1> = <nat:5> * <var:D> /\ <var:c0> = <nat:3> /\ <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:c0> = <nat:3> /\ <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:C> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 