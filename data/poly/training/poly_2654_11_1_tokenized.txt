\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:k> ; <var:F2> := <var:F1> * <var:k> ; <var:F3> := <var:F2> * <var:k> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:4> ; <var:F2> := <var:F2> * <nat:1> ; <var:F3> := <var:F3> * <nat:2> ; <var:X> := <var:F3> <var:X> := <var:X> + <var:F2> <var:X> := <var:X> + <var:F1> <var:X> := <var:X> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:k> = <var:o> $ , given every positive coefficients $ <var:o> $ , prior to the execution of our series of commands it follows that we see $ <var:X> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:2> $ when program has exited . \end{theorem} \begin{proof} The method of proof for our list of instructions can be given through Hoare techniques . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:o> \} & <var:F1> := <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} & <var:F2> := <var:F1> * <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:k> = <var:o> \} & <var:F1> := <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} & <var:F2> := <var:F1> * <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \} & <var:F3> := <var:F2> * <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \} & <var:F0> := <nat:2> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \land <var:F0> = <nat:2> \} & <var:F1> := <var:F1> * <nat:4> & \{ <var:k> = <var:o> \land <var:F1> = <nat:4> * <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <nat:4> * <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \land <var:F0> = <nat:2> \} & <var:F2> := <var:F2> * <nat:1> & \{ <var:k> = <var:o> \land <var:F1> = <nat:4> * <var:o> \land <var:F2> = <nat:1> * <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \land <var:F0> = <nat:2> \} \end{tabular} Shifting focus toward the following statements seen in the code segment , \[ \begin{tabular} {rcl} \{ <var:k> = <var:o> \} & <var:F1> := <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \} & <var:F2> := <var:F1> * <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \} \\ \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \} & <var:F3> := <var:F2> * <var:k> & \{ <var:k> = <var:o> \land <var:F1> = <var:o> \land <var:F2> = <var:o> ^ <nat:2> \land <var:F3> = <var:o> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:k> ; <var:F2> := <var:F1> * <var:k> ; <var:F3> := <var:F2> * <var:k> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:4> ; <var:F2> := <var:F2> * <nat:1> ; <var:F3> := <var:F3> * <nat:2> ; <var:X> := <var:F3> <var:X> := <var:X> + <var:F2> <var:X> := <var:X> + <var:F1> <var:X> := <var:X> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:k> = <var:o> }} <def:poly> {{ <var:X> = <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <var:o> /\ <var:F2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <var:o> /\ <var:F2> = <var:o> ^ <nat:2> /\ <var:F3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <var:o> /\ <var:F2> = <var:o> ^ <nat:2> /\ <var:F3> = <var:o> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <nat:4> * <var:o> /\ <var:F2> = <var:o> ^ <nat:2> /\ <var:F3> = <var:o> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <nat:4> * <var:o> /\ <var:F2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:F3> = <var:o> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <nat:4> * <var:o> /\ <var:F2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:F3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <nat:4> * <var:o> /\ <var:F2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:F0> = <nat:2> /\ <var:X> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F1> = <nat:4> * <var:o> /\ <var:F0> = <nat:2> /\ <var:X> = <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:F0> = <nat:2> /\ <var:X> = <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:X> = <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 