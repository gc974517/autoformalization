\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:x> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:x> ; <var:s2> := <var:s2> * <var:x> ; <var:t> := <var:s2> ; <var:t> := <var:t> + <var:s1> ; <var:t> := <var:t> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assume --- given some $ <var:v> $ --- that we have $ <var:x> = <var:v> $ ahead of executing the segment of code , it must be that we see $ <var:t> = <nat:8> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:7> $ once code executes . \end{theorem} \begin{proof} Notice this decorated program . \begin{eqnarray} \{ <var:x> = <var:v> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \} \\ <var:s1> := <nat:1> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \} \\ <var:s1> := <var:s1> * <var:x> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \cdot <var:v> \} \\ <var:s2> := <nat:8> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \cdot <var:v> \land <var:s2> = <nat:8> \} \\ <var:s2> := <var:s2> * <var:x> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \cdot <var:v> \land <var:s2> = <nat:8> \cdot <var:v> \} \\ <var:s2> := <var:s2> * <var:x> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \cdot <var:v> \land <var:s2> = <nat:8> \cdot <var:v> ^ <nat:2> \} \\ <var:t> := <var:s2> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:s1> = <nat:1> \cdot <var:v> \land <var:t> = <nat:8> \cdot <var:v> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:s1> ; \\ \{ <var:x> = <var:v> \land <var:s0> = <nat:7> \land <var:t> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> \} \\ <var:t> := <var:t> + <var:s0> \\ \{ <var:x> = <var:v> \land <var:t> = <nat:8> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:7> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:x> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:x> ; <var:s2> := <var:s2> * <var:x> ; <var:t> := <var:s2> ; <var:t> := <var:t> + <var:s1> ; <var:t> := <var:t> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:x> = <var:v> }} <def:poly> {{ <var:t> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:v> /\ <var:s2> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:1> * <var:v> /\ <var:t> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:s0> = <nat:7> /\ <var:t> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:v> /\ <var:t> = <nat:8> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 