\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:s> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:7> ; <var:a> := <var:X1> <var:a> := <var:a> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:s> = <var:L> $ prior to executing the list of instructions , it must be that we see $ <var:a> = <nat:7> \times <var:L> + <nat:6> $ when list of instructions exits . \end{theorem} \begin{proof} The course of logic for this list of commands is given by standard Hoare techniques . Now , we see \begin{eqnarray} \{ <var:s> = <var:L> \} \, <var:X1> := <var:s> \, \{ <var:s> = <var:L> \land <var:X1> = <var:L> \} \\ \{ <var:s> = <var:L> \land <var:X1> = <var:L> \} \, <var:X0> := <nat:6> \, \{ <var:s> = <var:L> \land <var:X1> = <var:L> \land <var:X0> = <nat:6> \} \\ \{ <var:s> = <var:L> \land <var:X1> = <var:L> \land <var:X0> = <nat:6> \} \, <var:X1> := <var:X1> * <nat:7> \, \{ <var:s> = <var:L> \land <var:X1> = <nat:7> * <var:L> \land <var:X0> = <nat:6> \} \\ \{ <var:s> = <var:L> \land <var:X1> = <nat:7> * <var:L> \land <var:X0> = <nat:6> \} \, <var:a> := <var:X1\, \{ <var:s> = <var:L> \land <var:X0> = <nat:6> \land <var:a> = <nat:7> * <var:L> \} \\ \{ <var:s> = <var:L> \land <var:X0> = <nat:6> \land <var:a> = <nat:7> * <var:L> \} \, <var:a> := <var:a> + <var:X0\, \{ <var:s> = <var:L> \land <var:a> = <nat:7> * <var:L> + <nat:6> \} \end{eqnarray} This is guaranteed using the rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:s> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:7> ; <var:a> := <var:X1> <var:a> := <var:a> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:s> = <var:L> }} <def:poly> {{ <var:a> = <nat:7> * <var:L> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:X1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:X1> = <var:L> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:X1> = <nat:7> * <var:L> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:X0> = <nat:6> /\ <var:a> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:L> /\ <var:a> = <nat:7> * <var:L> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 