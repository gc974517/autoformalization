\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:5> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:o> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:o> ; <var:h2> := <var:h2> * <var:o> ; <var:I> := <var:h2> ; <var:I> := <var:I> + <var:h1> ; <var:I> := <var:I> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given , taking positive coefficients $ <var:d> $ , it to hold that $ <var:o> = <var:d> $ prior to interpreting the segment of code , it must be that we see $ <var:I> = <nat:9> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is evident using standard Hoare logic . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:o> = <var:d> \} & <var:h0> := <nat:5> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} \\ \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} & <var:h1> := <nat:4> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> \} \\ \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> \} & <var:h1> := <var:h1> * <var:o> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> * <var:d> \} \end{tabular} This is known to be sound by the variable binding scheme obtained from usual Hoare techniques . Taking another step toward the next line of code contained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:o> = <var:d> \} & <var:h0> := <nat:5> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:d> \} & <var:h0> := <nat:5> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} \\ \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} & <var:h1> := <nat:4> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> \} \\ \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> \} & <var:h1> := <var:h1> * <var:o> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> * <var:d> \} \end{tabular} Jumping to the subsequent pieces of code found in our list of commands , \[ \begin{tabular} {rcl} \{ <var:o> = <var:d> \} & <var:h0> := <nat:5> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} \\ \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \} & <var:h1> := <nat:4> & \{ <var:o> = <var:d> \land <var:h0> = <nat:5> \land <var:h1> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:h1> := <nat:4> ; <var:h1> := <var:h1> * <var:o> ; <var:h2> := <nat:9> ; <var:h2> := <var:h2> * <var:o> ; <var:h2> := <var:h2> * <var:o> ; <var:I> := <var:h2> ; <var:I> := <var:I> + <var:h1> ; <var:I> := <var:I> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:o> = <var:d> }} <def:poly> {{ <var:I> = <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> * <var:d> /\ <var:h2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> * <var:d> /\ <var:h2> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> * <var:d> /\ <var:h2> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:4> * <var:d> /\ <var:I> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:h0> = <nat:5> /\ <var:I> = <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:I> = <nat:9> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 