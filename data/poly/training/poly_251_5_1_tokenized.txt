\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:z1> := <var:K> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:1> ; <var:N> := <var:z1> <var:N> := <var:N> + <var:z0> \end{verbatim} Allow , given all positive integers $ <var:B> $ , that $ <var:K> = <var:B> $ ahead of running this list of instructions it follows that $ <var:N> = <nat:1> \times <var:B> + <nat:3> $ after code terminates . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:K> = <var:B> \} \\ <var:z1> := <var:K> ; \\ \{ <var:K> = <var:B> \land <var:z1> = <var:B> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:K> = <var:B> \land <var:z1> = <var:B> \land <var:z0> = <nat:3> \} \\ <var:z1> := <var:z1> * <nat:1> ; \\ \{ <var:K> = <var:B> \land <var:z1> = <nat:1> \cdot <var:B> \land <var:z0> = <nat:3> \} \\ <var:N> := <var:z1> \\ \{ <var:K> = <var:B> \land <var:z0> = <nat:3> \land <var:N> = <nat:1> \cdot <var:B> \} \\ <var:N> := <var:N> + <var:z0> \\ \{ <var:K> = <var:B> \land <var:N> = <nat:1> \cdot <var:B> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:K> = <var:B> }} <var:z1> := <var:K> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:1> ; <var:N> := <var:z1> <var:N> := <var:N> + <var:z0> {{ <var:N> = <nat:1> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:z1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:z1> = <var:B> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:z1> = <nat:1> * <var:B> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:z0> = <nat:3> /\ <var:N> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:N> = <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 