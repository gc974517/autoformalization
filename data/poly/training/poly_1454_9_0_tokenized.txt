\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:p0> := <nat:7> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:u> ; <var:p2> := <nat:9> ; <var:p2> := <var:p2> * <var:u> ; <var:p2> := <var:p2> * <var:u> ; <var:E> := <var:p2> ; <var:E> := <var:E> + <var:p1> ; <var:E> := <var:E> + <var:p0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:J> $ prior to the execution of this series of commands , it holds that we see $ <var:E> = <nat:9> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:J> \} \\ <var:p0> := <nat:7> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \} \\ <var:p1> := <nat:1> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> \} \\ <var:p1> := <var:p1> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> * <var:J> \} \\ <var:p2> := <nat:9> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> * <var:J> \land <var:p2> = <nat:9> \} \\ <var:p2> := <var:p2> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> * <var:J> \land <var:p2> = <nat:9> * <var:J> \} \\ <var:p2> := <var:p2> * <var:u> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> * <var:J> \land <var:p2> = <nat:9> * <var:J> ^ <nat:2> \} \\ <var:E> := <var:p2> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:p1> = <nat:1> * <var:J> \land <var:E> = <nat:9> * <var:J> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:p1> ; \\ \{ <var:u> = <var:J> \land <var:p0> = <nat:7> \land <var:E> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> \} \\ <var:E> := <var:E> + <var:p0> \\ \{ <var:u> = <var:J> \land <var:E> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:7> \} \end{eqnarray} The application of typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:u> = <var:J> }} <var:p0> := <nat:7> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:u> ; <var:p2> := <nat:9> ; <var:p2> := <var:p2> * <var:u> ; <var:p2> := <var:p2> * <var:u> ; <var:E> := <var:p2> ; <var:E> := <var:E> + <var:p1> ; <var:E> := <var:E> + <var:p0> {{ <var:E> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> * <var:J> /\ <var:p2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> * <var:J> /\ <var:p2> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> * <var:J> /\ <var:p2> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:p1> = <nat:1> * <var:J> /\ <var:E> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:p0> = <nat:7> /\ <var:E> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:E> = <nat:9> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 