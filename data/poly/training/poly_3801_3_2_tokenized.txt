\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:y> = <var:V> $ with some $ <var:V> \in \mathbb{Z}^+ $ prior to interpreting this program then we see $ <var:d> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the code is accomplished with the following decorated set of commands . \begin{eqnarray} \{ <var:y> = <var:V> \} \\ <var:d> := <nat:3> ; \\ \{ <var:y> = <var:V> \land <var:d> = <nat:3> \} \\ <var:d> := <var:d> * <var:y> ; \\ \{ <var:y> = <var:V> \land <var:d> = <nat:3> \cdot <var:V> + \} \\ <var:d> := <nat:1> + <var:d> * <var:y> \\ \{ <var:y> = <var:V> \land <var:d> = <nat:3> \cdot <var:V> ^ <nat:2> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:3> ; <var:d> := <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:y> = <var:V> }} <def:poly> {{ <var:d> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:d> = <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:d> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 