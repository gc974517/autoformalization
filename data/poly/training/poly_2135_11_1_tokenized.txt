\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:C1> := <var:K> ; <var:C2> := <var:C1> * <var:K> ; <var:C3> := <var:C2> * <var:K> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:2> ; <var:k> := <var:C3> <var:k> := <var:k> + <var:C2> <var:k> := <var:k> + <var:C1> <var:k> := <var:k> + <var:C0> \end{verbatim} Given $ <var:K> = <var:n> $ before the execution of this list of instructions , it holds that we have $ <var:k> = <nat:2> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> + <nat:5> $ once list of commands finishes . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:K> = <var:n> \} \\ <var:C1> := <var:K> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <var:n> \} \\ <var:C2> := <var:C1> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <nat:6> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C2> := <var:C2> * <nat:7> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <nat:6> \cdot <var:n> \land <var:C2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:C3> := <var:C3> * <nat:2> ; \\ \{ <var:K> = <var:n> \land <var:C1> = <nat:6> \cdot <var:n> \land <var:C2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:C3> = <nat:2> \cdot <var:n> ^ <nat:3> \land <var:C0> = <nat:5> \} \\ <var:k> := <var:C3> \\ \{ <var:K> = <var:n> \land <var:C1> = <nat:6> \cdot <var:n> \land <var:C2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:C0> = <nat:5> \land <var:k> = <nat:2> \cdot <var:n> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:C2> \\ \{ <var:K> = <var:n> \land <var:C1> = <nat:6> \cdot <var:n> \land <var:C0> = <nat:5> \land <var:k> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:C1> \\ \{ <var:K> = <var:n> \land <var:C0> = <nat:5> \land <var:k> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:6> \cdot <var:n> \} \\ <var:k> := <var:k> + <var:C0> \\ \{ <var:K> = <var:n> \land <var:k> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:6> \cdot <var:n> + <nat:5> \} \end{eqnarray} Given the above , our program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:K> = <var:n> }} <var:C1> := <var:K> ; <var:C2> := <var:C1> * <var:K> ; <var:C3> := <var:C2> * <var:K> ; <var:C0> := <nat:5> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:2> ; <var:k> := <var:C3> <var:k> := <var:k> + <var:C2> <var:k> := <var:k> + <var:C1> <var:k> := <var:k> + <var:C0> {{ <var:k> = <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <nat:6> * <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <nat:6> * <var:n> /\ <var:C2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <nat:6> * <var:n> /\ <var:C2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:C3> = <nat:2> * <var:n> ^ <nat:3> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <nat:6> * <var:n> /\ <var:C2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:C0> = <nat:5> /\ <var:k> = <nat:2> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C1> = <nat:6> * <var:n> /\ <var:C0> = <nat:5> /\ <var:k> = <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:C0> = <nat:5> /\ <var:k> = <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:k> = <nat:2> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 