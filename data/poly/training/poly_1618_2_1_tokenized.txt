\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:3> ; <var:L> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Allow $ <var:j> = <var:o> $ before the execution of our list of instructions it follows that we have $ <var:L> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our code is given with standard Hoare logic . Paying attention to the upcoming piece of code contained in the program , we have the variable assignmet line binding $ <nat:3> $ into $ <var:M0>$ . This forwards $ \{ <var:j> = <var:o> \} $ as $ \{ <var:j> = <var:o> \land <var:M0> = <nat:3> \} $ . This is ensured through the assignment scheme given in Hoare techniques . Advancing to the subsequent command contained in the set of commands , the binding command \verb | <var:L> := <var:M0> | . This takes $ \{ <var:j> = <var:o> \land <var:M0> = <nat:3> \} $ as the condition $ \{ <var:j> = <var:o> \land <var:L> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:3> ; <var:L> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:j> = <var:o> }} <def:poly> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 