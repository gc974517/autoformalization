\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:G> := <var:g1> ; <var:G> := <var:G> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:l> = <var:X> $ before executing this series of instructions , it follows that we have $ <var:G> = <nat:7> \times <var:X> + <nat:6> $ once series of commands is done . \end{theorem} \begin{proof} Using Hoare reasoning gives us : \begin{eqnarray} \{ <var:l> = <var:X> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:l> = <var:X> \land <var:g0> = <nat:6> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:l> = <var:X> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:l> ; \\ \{ <var:l> = <var:X> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:X> \} \\ <var:G> := <var:g1> ; \\ \{ <var:l> = <var:X> \land <var:g0> = <nat:6> \land <var:G> = <nat:7> \cdot <var:X> \} \\ <var:G> := <var:G> + <var:g0> \\ \{ <var:l> = <var:X> \land <var:G> = <nat:7> \cdot <var:X> + <nat:6> \} \end{eqnarray} Therefore , this set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:G> := <var:g1> ; <var:G> := <var:G> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:l> = <var:X> }} <def:poly> {{ <var:G> = <nat:7> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:g0> = <nat:6> /\ <var:G> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:G> = <nat:7> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 