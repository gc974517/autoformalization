\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:K> ; <var:B> := <var:J1> ; <var:B> := <var:B> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming , letting positive integers $ <var:H> $ , $ <var:K> = <var:H> $ before executing our list of commands it must be that we see $ <var:B> = <nat:9> \times <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code can be done by standard Hoare techniques . Observing the upcoming statement in the program , we have the variable update statement yielding $ <nat:3> $ as $ <var:J0>$ . This advances $ \{ <var:K> = <var:H> \} $ to the condition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \} $ . This is shown through the assignment scheme from typical Hoare logic . Moving on to the next step , we have the variable binding code assigning $ <nat:9> $ as $ <var:J1>$ . This line moves the precondition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \} $ to the postcondition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:J1> = <nat:9> \} $ . This is rigorously given by the assignment rule from standard Hoare logic . Focusing on the following line found in our code segment , the binding line giving $ <var:J1> * <var:K> $ into $ <var:J1>$ . This statement forwards $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:J1> = <nat:9> \} $ toward the postcondition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:J1> = <nat:9> * <var:H> \} $ . Considering the next line of code in the program , we see the variable binding code \verb | <var:B> := <var:J1> ; | . This redefines the precondition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:J1> = <nat:9> * <var:H> \} $ toward the condition $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:B> = <nat:9> * <var:H> \} $ . This is shown to be logically sound through the assignment rule in usual Hoare techniques . Moving forward to the subsequent statement seen in the set of commands , we see the variable update statement giving $ <var:B> + <var:J0$ into $ <var:B>$ . This statement moves $ \{ <var:K> = <var:H> \land <var:J0> = <nat:3> \land <var:B> = <nat:9> * <var:H> \} $ into the postcondition $ \{ <var:K> = <var:H> \land <var:B> = <nat:9> * <var:H> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:J1> := <nat:9> ; <var:J1> := <var:J1> * <var:K> ; <var:B> := <var:J1> ; <var:B> := <var:B> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:K> = <var:H> }} <def:poly> {{ <var:B> = <nat:9> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:J0> = <nat:3> /\ <var:B> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:H> /\ <var:B> = <nat:9> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 