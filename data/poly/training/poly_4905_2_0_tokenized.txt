\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:3> ; <var:o> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:M> = <var:X> $ prior to evaluating the set of instructions it follows that $ <var:o> = <nat:3> $ once code segment executes . \end{theorem} \begin{proof} The flow of logic for this set of commands is evident through standard Hoare techniques . Immediately following , we have \begin{verbatim} { <var:M> = <var:X> } <var:O0> := <nat:3> { <var:M> = <var:X> \land <var:O0> = <nat:3> } \end{verbatim} This is rigorously given through the binding inference rule from typical Hoare techniques . Shifting focus toward the subsequent statement found in the segment of code , \begin{verbatim} { <var:M> = <var:X> } <var:O0> := <nat:3> { <var:M> = <var:X> \land <var:O0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:o> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:M> = <var:X> }} <def:poly> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:X> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 