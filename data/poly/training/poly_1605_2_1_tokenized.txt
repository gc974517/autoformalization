\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:4> ; <var:m> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Given it to be that $ <var:f> = <var:p> $ ahead of evaluating the segment of code , it must be that $ <var:m> = <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be shown through standard Hoare logic . Moving on to the next step , we have \verb | { <var:f> = <var:p> } <var:r0> := <nat:4> { <var:f> = <var:p> \land <var:r0> = <nat:4> } | . Going forward , we have \verb | { <var:f> = <var:p> } <var:r0> := <nat:4> { <var:f> = <var:p> \land <var:r0> = <nat:4> } | . This is ensured with the variable update rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:4> ; <var:m> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:f> = <var:p> }} <def:poly> {{ <var:m> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:m> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 