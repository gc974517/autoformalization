\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:9> ; <var:L> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:p> = <var:K> $ ahead of interpreting the series of commands , it holds that we have $ <var:L> = <nat:9> $ after list of instructions exits . \end{theorem} \begin{proof} The course of logic for this set of instructions can be accomplished with Hoare logic . Going to the next step , \begin{eqnarray} \{ <var:p> = <var:K> \} \, <var:C0> := <nat:9> \, \{ <var:p> = <var:K> \land <var:C0> = <nat:9> \} \end{eqnarray} This is ensured using the variable binding law found in standard Hoare techniques . Advancing , we see \begin{eqnarray} \{ <var:p> = <var:K> \} \, <var:C0> := <nat:9> \, \{ <var:p> = <var:K> \land <var:C0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:9> ; <var:L> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:p> = <var:K> }} <def:poly> {{ <var:L> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:C0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:L> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 