\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:q> ; <var:K> := <var:j1> ; <var:K> := <var:K> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Allow for whole numbers $ <var:D> $ that $ <var:q> = <var:D> $ before executing the series of commands it must be that we see $ <var:K> = <nat:5> \times <var:D> + <nat:9> $ . \end{theorem} \begin{proof} The proof of this code can be demonstrated by usual Hoare reasoning . Shifting focus toward the following command found in the segment of code , we see the variable update line \verb | <var:j0> := <nat:9> ; | . This code moves the precondition $ \{ <var:q> = <var:D> \} $ toward the postcondition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \} $ . This is rigorously given by the assignment rule defined in usual Hoare logic . Stepping through , the environment update command letting $ <nat:5> $ as $ <var:j1>$ . This advances the condition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \} $ to $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> \} $ . Shifting focus toward the next piece of code in our set of commands , we have the variable assignmet line defining $ <var:j1> * <var:q> $ to $ <var:j1>$ . This command advances the condition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> \} $ to the postcondition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> \cdot <var:D> \} $ . Taking a look at the upcoming line of code in our list of commands , we have the binding code \verb | <var:K> := <var:j1> ; | . This forwards the condition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:j1> = <nat:5> \cdot <var:D> \} $ as the postcondition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:K> = <nat:5> \cdot <var:D> \} $ . This is sound with the assignment rule found in standard Hoare techniques . Moving onward , the command \verb | <var:K> := <var:K> + <var:j0> | . This advances the precondition $ \{ <var:q> = <var:D> \land <var:j0> = <nat:9> \land <var:K> = <nat:5> \cdot <var:D> \} $ toward $ \{ <var:q> = <var:D> \land <var:K> = <nat:5> \cdot <var:D> + <nat:9> \} $ . This is known to be sound by the assignment inference rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:9> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:q> ; <var:K> := <var:j1> ; <var:K> := <var:K> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:q> = <var:D> }} <def:poly> {{ <var:K> = <nat:5> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:j0> = <nat:9> /\ <var:K> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:D> /\ <var:K> = <nat:5> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 