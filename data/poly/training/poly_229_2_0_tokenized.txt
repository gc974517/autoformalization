\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:8> ; <var:F> := <var:r0> \end{verbatim} Assume that $ <var:v> = <var:l> $ letting $ <var:l> \in \mathbb{Z}^+ $ prior to the execution of the code it holds that $ <var:F> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:l> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:v> = <var:l> \land <var:r0> = <nat:8> \} \\ <var:F> := <var:r0> \\ \{ <var:v> = <var:l> \land <var:F> = <nat:8> \} \end{eqnarray} Continuing evaluating this code segment results in : \begin{eqnarray} \end{eqnarray} Applying Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <var:r0> := <nat:8> ; <var:F> := <var:r0> {{ <var:F> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 