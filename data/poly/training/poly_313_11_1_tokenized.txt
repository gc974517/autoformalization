\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N3> := <var:N2> * <var:p> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:3> ; <var:r> := <var:N3> <var:r> := <var:r> + <var:N2> <var:r> := <var:r> + <var:N1> <var:r> := <var:r> + <var:N0> \end{verbatim} Assume that $ <var:p> = <var:w> $ before executing our series of commands , then we see $ <var:r> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be shown by Hoare reasoning . Taking another step toward the upcoming pieces of code in the set of commands , \verb | { <var:p> = <var:w> } <var:N1> := <var:p> { <var:p> = <var:w> \land <var:N1> = <var:w> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <var:w> } <var:N2> := <var:N1> * <var:p> { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> } <var:N3> := <var:N2> * <var:p> { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> } <var:N0> := <nat:3> { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } <var:N1> := <var:N1> * <nat:3> { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } <var:N2> := <var:N2> * <nat:4> { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N3> = <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } <var:N3> := <var:N3> * <nat:3> { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N3> = <nat:3> * <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N3> = <nat:3> * <var:w> ^ <nat:3> \land <var:N0> = <nat:3> } <var:r> := <var:N3{ <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N2> = <nat:4> * <var:w> ^ <nat:2> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> } <var:r> := <var:r> + <var:N2{ <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> } | , \verb | { <var:p> = <var:w> \land <var:N1> = <nat:3> * <var:w> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> } <var:r> := <var:r> + <var:N1{ <var:p> = <var:w> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> } | and \verb | { <var:p> = <var:w> \land <var:N0> = <nat:3> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> } <var:r> := <var:r> + <var:N0{ <var:p> = <var:w> \land <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:p> = <var:w> }} <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N3> := <var:N2> * <var:p> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:3> ; <var:r> := <var:N3> <var:r> := <var:r> + <var:N2> <var:r> := <var:r> + <var:N1> <var:r> := <var:r> + <var:N0> {{ <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <var:w> /\ <var:N2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <var:w> /\ <var:N2> = <var:w> ^ <nat:2> /\ <var:N3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <var:w> /\ <var:N2> = <var:w> ^ <nat:2> /\ <var:N3> = <var:w> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N2> = <var:w> ^ <nat:2> /\ <var:N3> = <var:w> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:N3> = <var:w> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:w> ^ <nat:3> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N2> = <nat:4> * <var:w> ^ <nat:2> /\ <var:N0> = <nat:3> /\ <var:r> = <nat:3> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N0> = <nat:3> /\ <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:N0> = <nat:3> /\ <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:r> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 