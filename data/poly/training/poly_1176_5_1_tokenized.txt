\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:a> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:7> ; <var:P> := <var:N1> <var:P> := <var:P> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Allowing ( for whole numbers $ <var:j> $ ) that $ <var:a> = <var:j> $ ahead of the evaluation of the segment of code , it holds that we have $ <var:P> = <nat:7> \cdot <var:j> + <nat:4> $ when list of commands has terminated . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:a> = <var:j> \} \\ <var:N1> := <var:a> ; \\ \{ <var:a> = <var:j> \land <var:N1> = <var:j> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:a> = <var:j> \land <var:N1> = <var:j> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:7> ; \\ \{ <var:a> = <var:j> \land <var:N1> = <nat:7> \cdot <var:j> \land <var:N0> = <nat:4> \} \\ <var:P> := <var:N1> \\ \{ <var:a> = <var:j> \land <var:N0> = <nat:4> \land <var:P> = <nat:7> \cdot <var:j> \} \\ <var:P> := <var:P> + <var:N0> \\ \{ <var:a> = <var:j> \land <var:P> = <nat:7> \cdot <var:j> + <nat:4> \} \end{eqnarray} Hence , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:a> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:7> ; <var:P> := <var:N1> <var:P> := <var:P> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:a> = <var:j> }} <def:poly> {{ <var:P> = <nat:7> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:N1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:N1> = <var:j> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:N1> = <nat:7> * <var:j> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:N0> = <nat:4> /\ <var:P> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:P> = <nat:7> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 