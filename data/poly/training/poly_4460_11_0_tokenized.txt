\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:5> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:U> ; <var:C2> := <var:C2> * <var:U> ; <var:C3> := <nat:7> ; <var:C3> := <var:C3> * <var:U> ; <var:C3> := <var:C3> * <var:U> ; <var:C3> := <var:C3> * <var:U> ; <var:O> := <var:C3> ; <var:O> := <var:O> + <var:C2> ; <var:O> := <var:O> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:U> = <var:t> $ letting whole numbers $ <var:t> $ ahead of the execution of the list of commands , it follows that we have $ <var:O> = <nat:7> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:5> $ when code is done . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is given through typical Hoare techniques . Paying attention to the following command in our list of commands , we have the environment update command yielding $ <nat:5> $ to $ <var:C0>$ . This code transfers $ \{ <var:U> = <var:t> \} $ toward the postcondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \} $ . This is guaranteed by the assignment inference rule of usual Hoare logic . Advancing , we see the binding command \verb | <var:C2> := <nat:1> ; | . This takes $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \} $ to $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \} $ . This is shown through the assignment scheme found in usual Hoare logic . Honing in on the following piece of code seen in the code segment , we see the code binding $ <var:C2> * <var:U> $ to $ <var:C2>$ . This forwards the condition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \} $ to the condition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> \} $ . Paying attention to the upcoming bit of code found in the list of commands , we have the binding command \verb | <var:C2> := <var:C2> * <var:U> ; | . This takes $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> \} $ toward $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \} $ . This is shown with the assignment scheme found in typical Hoare reasoning . Moving on to the upcoming piece of code in the set of instructions , we have the environment update statement defining $ <nat:7> $ toward $ <var:C3>$ . This redefines $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \} $ as $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \} $ . Shifting focus toward the next line of code in the set of commands , we see the line \verb | <var:C3> := <var:C3> * <var:U> ; | . This transfers the precondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \} $ toward the postcondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> \} $ . This is known to be sound using the assignment inference rule defined in typical Hoare techniques . Jumping to the proceeding step found in our code , we have the variable binding command binding $ <var:C3> * <var:U> $ into $ <var:C3>$ . This redefines $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> \} $ to the postcondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme in standard Hoare reasoning . Immediately following , we see the environment update statement \verb | <var:C3> := <var:C3> * <var:U> ; | . This command moves the precondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> ^ <nat:2> \} $ to $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> ^ <nat:3> \} $ . This is ensured by the assignment law defined by Hoare reasoning . Moving on to the next step , we have the command \verb | <var:O> := <var:C3> ; | . This command advances the condition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:C3> = <nat:7> \times <var:t> ^ <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:O> = <nat:7> \times <var:t> ^ <nat:3> \} $ . Considering the proceeding statement in our code , the assignment command yielding $ <var:O> + <var:C2> $ into $ <var:O>$ . This redefines the condition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:C2> = <nat:1> \times <var:t> ^ <nat:2> \land <var:O> = <nat:7> \times <var:t> ^ <nat:3> \} $ into the condition $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:O> = <nat:7> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> \} $ . This is sound using the assignment law given in usual Hoare techniques . Moving on to the subsequent line of code in the series of commands , we see the assignment command assigning $ <var:O> + <var:C0$ into $ <var:O>$ . This transfers $ \{ <var:U> = <var:t> \land <var:C0> = <nat:5> \land <var:O> = <nat:7> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:t> \land <var:O> = <nat:7> \times <var:t> ^ <nat:3> + <nat:1> \times <var:t> ^ <nat:2> + <nat:5> \} $ . This is given using the assignment inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:U> ; <var:C2> := <var:C2> * <var:U> ; <var:C3> := <nat:7> ; <var:C3> := <var:C3> * <var:U> ; <var:C3> := <var:C3> * <var:U> ; <var:C3> := <var:C3> * <var:U> ; <var:O> := <var:C3> ; <var:O> := <var:O> + <var:C2> ; <var:O> := <var:O> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:U> = <var:t> }} <def:poly> {{ <var:O> = <nat:7> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:C3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:C3> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:C3> = <nat:7> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:C3> = <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:C2> = <nat:1> * <var:t> ^ <nat:2> /\ <var:O> = <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:C0> = <nat:5> /\ <var:O> = <nat:7> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:t> /\ <var:O> = <nat:7> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 