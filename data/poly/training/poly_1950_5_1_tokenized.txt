\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:a> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:1> ; <var:c> := <var:e1> <var:c> := <var:c> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:a> = <var:r> $ --- for every whole numbers $ <var:r> $ --- before evaluating the list of instructions then $ <var:c> = <nat:1> \times <var:r> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:a> = <var:r> \} \\ <var:e1> := <var:a> ; \\ \{ <var:a> = <var:r> \land <var:e1> = <var:r> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:a> = <var:r> \land <var:e1> = <var:r> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:1> ; \\ \{ <var:a> = <var:r> \land <var:e1> = <nat:1> \cdot <var:r> \land <var:e0> = <nat:2> \} \\ <var:c> := <var:e1> \\ \{ <var:a> = <var:r> \land <var:e0> = <nat:2> \land <var:c> = <nat:1> \cdot <var:r> \} \\ <var:c> := <var:c> + <var:e0> \\ \{ <var:a> = <var:r> \land <var:c> = <nat:1> \cdot <var:r> + <nat:2> \} \end{eqnarray} Furthering evaluating our set of instructions yields : \begin{eqnarray} \end{eqnarray} As a consequence , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e1> := <var:a> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:1> ; <var:c> := <var:e1> <var:c> := <var:c> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:a> = <var:r> }} <def:poly> {{ <var:c> = <nat:1> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:e1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:e1> = <var:r> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:e1> = <nat:1> * <var:r> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:e0> = <nat:2> /\ <var:c> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:r> /\ <var:c> = <nat:1> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 