\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:E> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:3> ; <var:H> := <var:u1> <var:H> := <var:H> + <var:u0> \end{verbatim} Allow that $ <var:E> = <var:r> $ prior to interpreting our set of commands , it must be that we have $ <var:H> = <nat:3> * <var:r> + <nat:3> $ after program is done . \end{theorem} \begin{proof} The method of proof for the series of commands is evident by Hoare logic . Paying attention to the proceeding bit of code contained in our list of instructions , we see \verb | { <var:E> = <var:r> } <var:u1> := <var:E> { <var:E> = <var:r> \land <var:u1> = <var:r> } | . This is ensured using the variable update scheme defined in usual Hoare reasoning . Advancing to the next lines found in our code segment , \verb | { <var:E> = <var:r> } <var:u1> := <var:E> { <var:E> = <var:r> \land <var:u1> = <var:r> } | , \verb | { <var:E> = <var:r> \land <var:u1> = <var:r> } <var:u0> := <nat:3> { <var:E> = <var:r> \land <var:u1> = <var:r> \land <var:u0> = <nat:3> } | and \verb | { <var:E> = <var:r> \land <var:u1> = <var:r> \land <var:u0> = <nat:3> } <var:u1> := <var:u1> * <nat:3> { <var:E> = <var:r> \land <var:u1> = <nat:3> \cdot <var:r> \land <var:u0> = <nat:3> } | . This is sound by the variable binding law obtained from usual Hoare logic . Shifting focus toward the next bit of code in our set of instructions , we have \verb | { <var:E> = <var:r> } <var:u1> := <var:E> { <var:E> = <var:r> \land <var:u1> = <var:r> } | . This is shown with the environment update scheme defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:E> = <var:r> }} <var:u1> := <var:E> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:3> ; <var:H> := <var:u1> <var:H> := <var:H> + <var:u0> {{ <var:H> = <nat:3> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:u1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:u1> = <var:r> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:u1> = <nat:3> * <var:r> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:u0> = <nat:3> /\ <var:H> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:H> = <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 