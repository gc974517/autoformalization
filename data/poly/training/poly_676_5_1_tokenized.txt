\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} : \begin{verbatim} <var:F1> := <var:p> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:g> := <var:F1> <var:g> := <var:g> + <var:F0> \end{verbatim} Assuming that we have $ <var:p> = <var:c> $ ahead of evaluating this segment of code , it must be that we have $ <var:g> = <nat:3> * <var:c> + <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:p> = <var:c> \} \\ <var:F1> := <var:p> ; \\ \{ <var:p> = <var:c> \land <var:F1> = <var:c> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:p> = <var:c> \land <var:F1> = <var:c> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:p> = <var:c> \land <var:F1> = <nat:3> \times <var:c> \land <var:F0> = <nat:8> \} \\ <var:g> := <var:F1> \\ \{ <var:p> = <var:c> \land <var:F0> = <nat:8> \land <var:g> = <nat:3> \times <var:c> \} \\ <var:g> := <var:g> + <var:F0> \\ \{ <var:p> = <var:c> \land <var:g> = <nat:3> \times <var:c> + <nat:8> \} \end{eqnarray} Thusly , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <var:F1> := <var:p> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:g> := <var:F1> <var:g> := <var:g> + <var:F0> {{ <var:g> = <nat:3> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:F1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:F1> = <var:c> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:F1> = <nat:3> * <var:c> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:F0> = <nat:8> /\ <var:g> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:g> = <nat:3> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 