\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:4> ; <var:N2> := <nat:3> ; <var:N2> := <var:N2> * <var:z> ; <var:N2> := <var:N2> * <var:z> ; <var:N3> := <nat:4> ; <var:N3> := <var:N3> * <var:z> ; <var:N3> := <var:N3> * <var:z> ; <var:N3> := <var:N3> * <var:z> ; <var:Z> := <var:N3> ; <var:Z> := <var:Z> + <var:N2> ; <var:Z> := <var:Z> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:z> = <var:S> $ given positive integer coefficients $ <var:S> $ prior to interpreting this series of instructions , it holds that we see $ <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:z> = <var:S> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \} \\ <var:N2> := <nat:3> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> \} \\ <var:N2> := <var:N2> * <var:z> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> \} \\ <var:N2> := <var:N2> * <var:z> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \} \\ <var:N3> := <nat:4> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \land <var:N3> = <nat:4> \} \\ <var:N3> := <var:N3> * <var:z> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \land <var:N3> = <nat:4> * <var:S> \} \\ <var:N3> := <var:N3> * <var:z> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \land <var:N3> = <nat:4> * <var:S> ^ <nat:2> \} \\ <var:N3> := <var:N3> * <var:z> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \land <var:N3> = <nat:4> * <var:S> ^ <nat:3> \} \\ <var:Z> := <var:N3> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:N2> = <nat:3> * <var:S> ^ <nat:2> \land <var:Z> = <nat:4> * <var:S> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:N2> ; \\ \{ <var:z> = <var:S> \land <var:N0> = <nat:4> \land <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:N0> \\ \{ <var:z> = <var:S> \land <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> \} \end{eqnarray} Hence , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:N2> := <nat:3> ; <var:N2> := <var:N2> * <var:z> ; <var:N2> := <var:N2> * <var:z> ; <var:N3> := <nat:4> ; <var:N3> := <var:N3> * <var:z> ; <var:N3> := <var:N3> * <var:z> ; <var:N3> := <var:N3> * <var:z> ; <var:Z> := <var:N3> ; <var:Z> := <var:Z> + <var:N2> ; <var:Z> := <var:Z> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:z> = <var:S> }} <def:poly> {{ <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:N3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:N2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:Z> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:N0> = <nat:4> /\ <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:Z> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 