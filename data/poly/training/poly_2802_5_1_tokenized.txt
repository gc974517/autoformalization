\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:f> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:8> ; <var:F> := <var:B1> <var:F> := <var:F> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Given that we have $ <var:f> = <var:p> $ for whole numbers $ <var:p> $ ahead of interpreting our list of commands , then we have $ <var:F> = <nat:8> * <var:p> + <nat:2> $ once code segment terminates . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:f> = <var:p> \} \\ <var:B1> := <var:f> ; \\ \{ <var:f> = <var:p> \land <var:B1> = <var:p> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:f> = <var:p> \land <var:B1> = <var:p> \land <var:B0> = <nat:2> \} \\ <var:B1> := <var:B1> * <nat:8> ; \\ \{ <var:f> = <var:p> \land <var:B1> = <nat:8> \times <var:p> \land <var:B0> = <nat:2> \} \\ <var:F> := <var:B1> \\ \{ <var:f> = <var:p> \land <var:B0> = <nat:2> \land <var:F> = <nat:8> \times <var:p> \} \\ <var:F> := <var:F> + <var:B0> \\ \{ <var:f> = <var:p> \land <var:F> = <nat:8> \times <var:p> + <nat:2> \} \end{eqnarray} Thusly , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:f> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:8> ; <var:F> := <var:B1> <var:F> := <var:F> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:f> = <var:p> }} <def:poly> {{ <var:F> = <nat:8> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:B1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:B1> = <var:p> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:B1> = <nat:8> * <var:p> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:B0> = <nat:2> /\ <var:F> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:p> /\ <var:F> = <nat:8> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 