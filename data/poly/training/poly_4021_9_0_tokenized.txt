\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:4> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:v> ; <var:e2> := <nat:8> ; <var:e2> := <var:e2> * <var:v> ; <var:e2> := <var:e2> * <var:v> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allowing it to be that $ <var:v> = <var:l> $ ahead of running our code segment it must be that $ <var:G> = <nat:8> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:4> $ when segment of code executes . \end{theorem} \begin{proof} The way to prove correctness for our program is accomplished by usual Hoare reasoning . Taking another step toward the following statement found in the program , the binding line \verb | <var:e0> := <nat:4> ; | . This code redefines the precondition $ \{ <var:v> = <var:l> \} $ toward the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \} $ . This is sound with the assignment inference rule defined by Hoare reasoning . Observing the next line in our list of commands , we see the variable assignmet line defining $ <nat:8> $ to $ <var:e1>$ . This code moves the precondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \} $ into the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \} $ . This is ensured by the assignment inference rule defined by typical Hoare reasoning . Moving forward to the following statement in our code , the variable binding statement \verb | <var:e1> := <var:e1> * <var:v> ; | . This line moves the precondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \} $ toward the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \} $ . This is ensured with the assignment inference rule of Hoare logic . Honing in on the next piece of code found in the list of instructions , the variable assignmet statement assigning $ <nat:8> $ to $ <var:e2>$ . This transfers $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \} $ toward $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \} $ . Advancing to the next line contained in the program , we have the code giving $ <var:e2> * <var:v> $ to $ <var:e2>$ . This line redefines the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \} $ toward $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \cdot <var:l> \} $ . Honing in on the next bit of code seen in our program , we see the variable binding code binding $ <var:e2> * <var:v> $ as $ <var:e2>$ . This forwards the precondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \cdot <var:l> \} $ into the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ . Advancing to the next step , the variable binding statement \verb | <var:G> := <var:e2> ; | . This statement takes the precondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:e2> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:G> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ . This is guaranteed using the assignment rule of standard Hoare reasoning . Jumping to the following bit of code found in our series of instructions , we see the environment update line letting $ <var:G> + <var:e1> $ as $ <var:G>$ . This statement transfers the precondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:e1> = <nat:8> \cdot <var:l> \land <var:G> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:G> = <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> \} $ . This is guaranteed with the assignment scheme given by usual Hoare techniques . Taking a look at the subsequent command in our code segment , the variable assignmet line \verb | <var:G> := <var:G> + <var:e0> | . This line redefines the condition $ \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \land <var:G> = <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> \} $ to the postcondition $ \{ <var:v> = <var:l> \land <var:G> = <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:4> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:v> ; <var:e2> := <nat:8> ; <var:e2> := <var:e2> * <var:v> ; <var:e2> := <var:e2> * <var:v> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:G> = <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> * <var:l> /\ <var:e2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> * <var:l> /\ <var:e2> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> * <var:l> /\ <var:e2> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:e1> = <nat:8> * <var:l> /\ <var:G> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> /\ <var:G> = <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:G> = <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 