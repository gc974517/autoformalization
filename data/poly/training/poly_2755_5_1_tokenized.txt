\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:N> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:1> ; <var:f> := <var:A1> <var:f> := <var:f> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:N> = <var:G> $ prior to interpreting the segment of code it holds that we see $ <var:f> = <nat:1> \cdot <var:G> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:N> = <var:G> \} \\ <var:A1> := <var:N> ; \\ \{ <var:N> = <var:G> \land <var:A1> = <var:G> \} \\ <var:A0> := <nat:8> ; \\ \{ <var:N> = <var:G> \land <var:A1> = <var:G> \land <var:A0> = <nat:8> \} \\ <var:A1> := <var:A1> * <nat:1> ; \\ \{ <var:N> = <var:G> \land <var:A1> = <nat:1> * <var:G> \land <var:A0> = <nat:8> \} \\ <var:f> := <var:A1> \\ \{ <var:N> = <var:G> \land <var:A0> = <nat:8> \land <var:f> = <nat:1> * <var:G> \} \\ <var:f> := <var:f> + <var:A0> \\ \{ <var:N> = <var:G> \land <var:f> = <nat:1> * <var:G> + <nat:8> \} \end{eqnarray} Hence , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:N> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:1> ; <var:f> := <var:A1> <var:f> := <var:f> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:N> = <var:G> }} <def:poly> {{ <var:f> = <nat:1> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:A1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:A1> = <var:G> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:A1> = <nat:1> * <var:G> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:A0> = <nat:8> /\ <var:f> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:f> = <nat:1> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 