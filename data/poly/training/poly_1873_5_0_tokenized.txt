\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:i> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Given that $ <var:i> = <var:q> $ before executing this series of commands it must be that $ <var:z> = <nat:4> * <var:q> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our set of instructions is demonstrated with Hoare logic . Following , we see the environment update line giving $ <nat:3> $ toward $ <var:F0>$ . This takes $ \{ <var:i> = <var:q> \} $ into $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \} $ . This is sound with the assignment scheme from Hoare reasoning . Jumping to the subsequent piece of code contained in our set of instructions , the variable assignmet code \verb | <var:F1> := <nat:4> ; | . This advances $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \} $ toward $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:4> \} $ . This is shown through the assignment law defined by Hoare logic . Moving on to the following statement seen in the series of commands , we see the variable assignmet statement binding $ <var:F1> * <var:i> $ as $ <var:F1>$ . This code advances $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:4> \} $ toward $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:4> * <var:q> \} $ . Moving on to the following line of code contained in the code segment , we see the environment update code defining $ <var:F1> $ as $ <var:z>$ . This advances $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:F1> = <nat:4> * <var:q> \} $ as the condition $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:z> = <nat:4> * <var:q> \} $ . Focusing on the next piece of code seen in our list of commands , we see the assignment command \verb | <var:z> := <var:z> + <var:F0> | . This redefines the precondition $ \{ <var:i> = <var:q> \land <var:F0> = <nat:3> \land <var:z> = <nat:4> * <var:q> \} $ into $ \{ <var:i> = <var:q> \land <var:z> = <nat:4> * <var:q> + <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:i> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:i> = <var:q> }} <def:poly> {{ <var:z> = <nat:4> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:F0> = <nat:3> /\ <var:z> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:q> /\ <var:z> = <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 