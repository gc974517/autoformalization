\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:4> ; <var:M> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Assuming for all natural numbers $ <var:t> $ that $ <var:A> = <var:t> $ prior to interpreting our segment of code it holds that we see $ <var:M> = <nat:4> $ after set of instructions has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions can be given with usual Hoare reasoning . Moving forward , the variable assignmet code \verb | <var:T0> := <nat:4> ; | . This transfers the precondition $ \{ <var:A> = <var:t> \} $ toward the condition $ \{ <var:A> = <var:t> \land <var:T0> = <nat:4> \} $ . Moving forward , we have the variable binding code \verb | <var:M> := <var:T0> | . This takes the precondition $ \{ <var:A> = <var:t> \land <var:T0> = <nat:4> \} $ to the condition $ \{ <var:A> = <var:t> \land <var:M> = <nat:4> \} $ . This is given through the assignment rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:4> ; <var:M> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:A> = <var:t> }} <def:poly> {{ <var:M> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:M> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 