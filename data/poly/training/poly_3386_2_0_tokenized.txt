\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:4> ; <var:n> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Assuming that $ <var:G> = <var:D> $ ahead of the evaluation of this code segment , it must be that we see $ <var:n> = <nat:4> $ once set of instructions has exited . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:G> = <var:D> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:G> = <var:D> \land <var:C0> = <nat:4> \} \\ <var:n> := <var:C0> \\ \{ <var:G> = <var:D> \land <var:n> = <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:4> ; <var:n> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:G> = <var:D> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:D> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 