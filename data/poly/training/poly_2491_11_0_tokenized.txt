\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:P0> := <nat:5> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:N> ; <var:P2> := <var:P2> * <var:N> ; <var:P3> := <nat:3> ; <var:P3> := <var:P3> * <var:N> ; <var:P3> := <var:P3> * <var:N> ; <var:P3> := <var:P3> * <var:N> ; <var:F> := <var:P3> ; <var:F> := <var:F> + <var:P2> ; <var:F> := <var:F> + <var:P0> \end{verbatim} Allow --- with some positive numbers $ <var:R> $ --- it to hold that $ <var:N> = <var:R> $ ahead of evaluating the set of instructions it must be that we see $ <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:R> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \} \\ <var:P2> := <nat:9> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> \} \\ <var:P2> := <var:P2> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> \} \\ <var:P2> := <var:P2> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \} \\ <var:P3> := <nat:3> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \land <var:P3> = <nat:3> \} \\ <var:P3> := <var:P3> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \land <var:P3> = <nat:3> * <var:R> \} \\ <var:P3> := <var:P3> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \land <var:P3> = <nat:3> * <var:R> ^ <nat:2> \} \\ <var:P3> := <var:P3> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \land <var:P3> = <nat:3> * <var:R> ^ <nat:3> \} \\ <var:F> := <var:P3> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:P2> = <nat:9> * <var:R> ^ <nat:2> \land <var:F> = <nat:3> * <var:R> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:P2> ; \\ \{ <var:N> = <var:R> \land <var:P0> = <nat:5> \land <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:P0> \\ \{ <var:N> = <var:R> \land <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:5> \} \end{eqnarray} Considering the above , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:N> = <var:R> }} <var:P0> := <nat:5> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:N> ; <var:P2> := <var:P2> * <var:N> ; <var:P3> := <nat:3> ; <var:P3> := <var:P3> * <var:N> ; <var:P3> := <var:P3> * <var:N> ; <var:P3> := <var:P3> * <var:N> ; <var:F> := <var:P3> ; <var:F> := <var:F> + <var:P2> ; <var:F> := <var:F> + <var:P0> {{ <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:3> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:P3> = <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:P2> = <nat:9> * <var:R> ^ <nat:2> /\ <var:F> = <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:P0> = <nat:5> /\ <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:F> = <nat:3> * <var:R> ^ <nat:3> + <nat:9> * <var:R> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 