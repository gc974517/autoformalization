\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:6> ; <var:u> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Given it to be that $ <var:V> = <var:f> $ prior to running the list of commands , it must be that we see $ <var:u> = <nat:6> $ after list of instructions has finished . \end{theorem} \begin{proof} The proof of the program is done using standard Hoare reasoning . Taking another step toward the subsequent bit of code in our segment of code , we have the variable binding code assigning $ <nat:6> $ as $ <var:J0>$ . This statement takes the precondition $ \{ <var:V> = <var:f> \} $ toward the condition $ \{ <var:V> = <var:f> \land <var:J0> = <nat:6> \} $ . This is sound by the assignment scheme given by usual Hoare reasoning . Moving on to the next step , we see the binding code \verb | <var:u> := <var:J0> | . This moves the precondition $ \{ <var:V> = <var:f> \land <var:J0> = <nat:6> \} $ into $ \{ <var:V> = <var:f> \land <var:u> = <nat:6> \} $ . This is sound using the assignment law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:6> ; <var:u> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:V> = <var:f> }} <def:poly> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 