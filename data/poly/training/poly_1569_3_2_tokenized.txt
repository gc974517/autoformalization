\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:A> ; <var:w> := <nat:4> + <var:w> * <var:A> \end{verbatim} Allow assuming some integers $ <var:T> $ that we have $ <var:A> = <var:T> $ ahead of the evaluation of the program it follows that we see $ <var:w> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> $ when segment of code has executed . \end{theorem} \begin{proof} The method of proof for the list of commands can be seen through standard Hoare techniques . Stepping through , we see \verb | { <var:A> = <var:T> } <var:w> := <nat:3> { <var:A> = <var:T> \land <var:w> = <nat:3> } | . Advancing , we have \verb | { <var:A> = <var:T> } <var:w> := <nat:3> { <var:A> = <var:T> \land <var:w> = <nat:3> } | . This is shown to be logically sound with the rule in usual Hoare logic . Stepping forward , \verb | { <var:A> = <var:T> } <var:w> := <nat:3> { <var:A> = <var:T> \land <var:w> = <nat:3> } | . This is given with the law defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:A> = <var:T> }} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:A> ; <var:w> := <nat:4> + <var:w> * <var:A> {{ <var:w> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:w> = <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:w> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 