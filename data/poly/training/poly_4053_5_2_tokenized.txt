\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <nat:3> + <var:L> * <var:Z> ; <var:L> := <nat:3> + <var:L> * <var:Z> ; <var:L> := <nat:2> + <var:L> * <var:Z> ; <var:L> := <nat:2> + <var:L> * <var:Z> \end{verbatim} Allow that we have $ <var:Z> = <var:N> $ before interpreting the set of commands , then we see $ <var:L> = <nat:3> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> $ when list of commands finishes . \end{theorem} \begin{proof} The argument for this segment of code can be done by typical Hoare reasoning . Taking another step toward the subsequent statement in the code , we see the variable update command \verb | <var:L> := <nat:3> ; | . This redefines the condition $ \{ <var:Z> = <var:N> \} $ as the condition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> \} $ . Following , we have the variable assignmet command \verb | <var:L> := <nat:3> + <var:L> * <var:Z> ; | . This redefines the condition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> + <nat:3> \} $ . Moving forward to the subsequent line seen in the set of instructions , we have the line giving $ <nat:3> + <var:L> * <var:Z> $ to $ <var:L>$ . This forwards the condition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> + <nat:3> \} $ toward the postcondition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} $ . This is shown to be logically sound by the assignment law of Hoare logic . Advancing on , the assignment line \verb | <var:L> := <nat:2> + <var:L> * <var:Z> ; | . This takes the precondition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} $ into the postcondition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} $ . This is guaranteed through the assignment rule obtained from typical Hoare techniques . Taking another step toward the proceeding step seen in our code , the binding command defining $ <nat:2> + <var:L> * <var:Z$ into $ <var:L>$ . This moves the condition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} $ into the condition $ \{ <var:Z> = <var:N> \land <var:L> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <var:L> := <nat:3> ; <var:L> := <nat:3> + <var:L> * <var:Z> ; <var:L> := <nat:3> + <var:L> * <var:Z> ; <var:L> := <nat:2> + <var:L> * <var:Z> ; <var:L> := <nat:2> + <var:L> * <var:Z> {{ <var:L> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:L> = <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:L> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:L> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:L> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 