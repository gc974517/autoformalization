\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:I> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:3> ; <var:c> := <var:i1> <var:c> := <var:c> + <var:i0> \end{verbatim} Given ( given any integers $ <var:w> $ ) it to be that $ <var:I> = <var:w> $ ahead of evaluating this segment of code , it holds that we have $ <var:c> = <nat:3> \times <var:w> + <nat:8> $ when list of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be shown by typical Hoare techniques . Going to the next step , \verb | { <var:I> = <var:w> } <var:i1> := <var:I> { <var:I> = <var:w> \land <var:i1> = <var:w> } | . This is sound through the environment update inference rule of usual Hoare reasoning . Paying attention to the next statements contained in our series of commands , we see \verb | { <var:I> = <var:w> } <var:i1> := <var:I> { <var:I> = <var:w> \land <var:i1> = <var:w> } | and \verb | { <var:I> = <var:w> \land <var:i1> = <var:w> } <var:i0> := <nat:8> { <var:I> = <var:w> \land <var:i1> = <var:w> \land <var:i0> = <nat:8> } | . This is shown to be logically sound by the assignment rule found in usual Hoare reasoning . Moving on to the proceeding command found in the code segment , we have \verb | { <var:I> = <var:w> } <var:i1> := <var:I> { <var:I> = <var:w> \land <var:i1> = <var:w> } | . Advancing to the upcoming line of code contained in our code , we see \verb | { <var:I> = <var:w> } <var:i1> := <var:I> { <var:I> = <var:w> \land <var:i1> = <var:w> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <var:i1> := <var:I> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:3> ; <var:c> := <var:i1> <var:c> := <var:c> + <var:i0> {{ <var:c> = <nat:3> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:i1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:i1> = <var:w> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:i1> = <nat:3> * <var:w> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:i0> = <nat:8> /\ <var:c> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:c> = <nat:3> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 