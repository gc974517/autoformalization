\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:l0> := <nat:6> ; <var:l1> := <nat:7> ; <var:l1> := <var:l1> * <var:Q> ; <var:E> := <var:l1> ; <var:E> := <var:E> + <var:l0> \end{verbatim} Allowing $ <var:Q> = <var:h> $ for any natural numbers $ <var:h> $ ahead of the execution of the set of instructions it holds that we see $ <var:E> = <nat:7> \times <var:h> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for our program is given through usual Hoare techniques . Focusing on the subsequent line of code contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:h> \} & <var:l0> := <nat:6> & \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \} \end{tabular} This is known to be sound with the variable assignmet law from usual Hoare logic . Moving forward to the next pieces of code seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:Q> = <var:h> \} & <var:l0> := <nat:6> & \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \} \\ \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \} & <var:l1> := <nat:7> & \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \land <var:l1> = <nat:7> \} \\ \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \land <var:l1> = <nat:7> \} & <var:l1> := <var:l1> * <var:Q> & \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \land <var:l1> = <nat:7> \cdot <var:h> \} \end{tabular} This is shown to be logically sound through the variable binding law found in typical Hoare reasoning . Looking at the subsequent line of code in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:h> \} & <var:l0> := <nat:6> & \{ <var:Q> = <var:h> \land <var:l0> = <nat:6> \} \end{tabular} This is shown using the inference rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Q> = <var:h> }} <var:l0> := <nat:6> ; <var:l1> := <nat:7> ; <var:l1> := <var:l1> * <var:Q> ; <var:E> := <var:l1> ; <var:E> := <var:E> + <var:l0> {{ <var:E> = <nat:7> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:l0> = <nat:6> /\ <var:E> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:h> /\ <var:E> = <nat:7> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 