\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:x> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:x> ; <var:H2> := <var:H2> * <var:x> ; <var:u> := <var:H2> ; <var:u> := <var:u> + <var:H1> ; <var:u> := <var:u> + <var:H0> \end{verbatim} Assuming it to hold that $ <var:x> = <var:F> $ prior to the execution of our code segment , it must be that we have $ <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:7> $ after code terminates . \end{theorem} \begin{proof} The application of Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:F> \} \\ <var:H0> := <nat:7> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \} \\ <var:H1> := <nat:9> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> \} \\ <var:H1> := <var:H1> * <var:x> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> * <var:F> \} \\ <var:H2> := <nat:7> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> * <var:F> \land <var:H2> = <nat:7> \} \\ <var:H2> := <var:H2> * <var:x> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> * <var:F> \land <var:H2> = <nat:7> * <var:F> \} \\ <var:H2> := <var:H2> * <var:x> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> * <var:F> \land <var:H2> = <nat:7> * <var:F> ^ <nat:2> \} \\ <var:u> := <var:H2> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:H1> = <nat:9> * <var:F> \land <var:u> = <nat:7> * <var:F> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:H1> ; \\ \{ <var:x> = <var:F> \land <var:H0> = <nat:7> \land <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> \} \end{eqnarray} Furthering evaluating the set of commands returns : \begin{eqnarray} <var:u> := <var:u> + <var:H0> \\ \{ <var:x> = <var:F> \land <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:7> \} \end{eqnarray} Considering the preceding argument , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:x> = <var:F> }} <var:H0> := <nat:7> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:x> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:x> ; <var:H2> := <var:H2> * <var:x> ; <var:u> := <var:H2> ; <var:u> := <var:u> + <var:H1> ; <var:u> := <var:u> + <var:H0> {{ <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:9> * <var:F> /\ <var:u> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:H0> = <nat:7> /\ <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:u> = <nat:7> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 