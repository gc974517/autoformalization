\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:S> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:S> ; <var:u2> := <var:u2> * <var:S> ; <var:y> := <var:u2> ; <var:y> := <var:y> + <var:u1> ; <var:y> := <var:y> + <var:u0> \end{verbatim} Assuming that we have $ <var:S> = <var:J> $ --- given every natural coefficients $ <var:J> $ --- prior to executing this program then we see $ <var:y> = <nat:4> \times <var:J> ^ <nat:2> + <nat:5> \times <var:J> + <nat:1> $ once list of commands has executed . \end{theorem} \begin{proof} The flow of logic for the series of instructions is clear by typical Hoare logic . Paying attention to the next commands found in our segment of code , \verb | { <var:S> = <var:J> } <var:u0> := <nat:1> { <var:S> = <var:J> \land <var:u0> = <nat:1> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> } <var:u1> := <nat:5> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> } <var:u1> := <var:u1> * <var:S> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> } <var:u2> := <nat:4> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> } <var:u2> := <var:u2> * <var:S> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> \times <var:J> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> \times <var:J> } <var:u2> := <var:u2> * <var:S> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> \times <var:J> ^ <nat:2> } | , \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:u2> = <nat:4> \times <var:J> ^ <nat:2> } <var:y> := <var:u2> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:y> = <nat:4> \times <var:J> ^ <nat:2> } | and \verb | { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:u1> = <nat:5> \times <var:J> \land <var:y> = <nat:4> \times <var:J> ^ <nat:2> } <var:y> := <var:y> + <var:u1> { <var:S> = <var:J> \land <var:u0> = <nat:1> \land <var:y> = <nat:4> \times <var:J> ^ <nat:2> + <nat:5> \times <var:J> } | . Moving forward to the subsequent bit of code found in the segment of code , we see \verb | { <var:S> = <var:J> } <var:u0> := <nat:1> { <var:S> = <var:J> \land <var:u0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:S> = <var:J> }} <var:u0> := <nat:1> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:S> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:S> ; <var:u2> := <var:u2> * <var:S> ; <var:y> := <var:u2> ; <var:y> := <var:y> + <var:u1> ; <var:y> := <var:y> + <var:u0> {{ <var:y> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> * <var:J> /\ <var:u2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> * <var:J> /\ <var:u2> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> * <var:J> /\ <var:u2> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:5> * <var:J> /\ <var:y> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:u0> = <nat:1> /\ <var:y> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:J> /\ <var:y> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 