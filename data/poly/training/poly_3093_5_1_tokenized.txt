\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:x> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:m> := <var:L1> <var:m> := <var:m> + <var:L0> \end{verbatim} Allowing , for all whole numbers $ <var:V> $ , it to hold that $ <var:x> = <var:V> $ prior to evaluating our code it follows that $ <var:m> = <nat:2> * <var:V> + <nat:4> $ when code segment executes . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment is given with this decorated program . \begin{eqnarray} \{ <var:x> = <var:V> \} \\ <var:L1> := <var:x> ; \\ \{ <var:x> = <var:V> \land <var:L1> = <var:V> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:x> = <var:V> \land <var:L1> = <var:V> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:x> = <var:V> \land <var:L1> = <nat:2> * <var:V> \land <var:L0> = <nat:4> \} \\ <var:m> := <var:L1> \\ \{ <var:x> = <var:V> \land <var:L0> = <nat:4> \land <var:m> = <nat:2> * <var:V> \} \\ <var:m> := <var:m> + <var:L0> \\ \{ <var:x> = <var:V> \land <var:m> = <nat:2> * <var:V> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:x> = <var:V> }} <var:L1> := <var:x> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:m> := <var:L1> <var:m> := <var:m> + <var:L0> {{ <var:m> = <nat:2> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:L1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:L1> = <var:V> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:L1> = <nat:2> * <var:V> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:L0> = <nat:4> /\ <var:m> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:m> = <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 