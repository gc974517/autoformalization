\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:j0> := <nat:3> ; <var:r> := <var:j0> \end{verbatim} Assuming that $ <var:I> = <var:o> $ before executing the set of instructions , it holds that $ <var:r> = <nat:3> $ after list of instructions exits . \end{theorem} \begin{proof} The method of proof for our list of commands can be given by this decorated list of instructions . \begin{eqnarray} \{ <var:I> = <var:o> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:I> = <var:o> \land <var:j0> = <nat:3> \} \\ <var:r> := <var:j0> \\ \{ <var:I> = <var:o> \land <var:r> = <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <var:j0> := <nat:3> ; <var:r> := <var:j0> {{ <var:r> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:r> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 