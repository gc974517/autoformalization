\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:w1> := <var:M> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:9> ; <var:Q> := <var:w1> <var:Q> := <var:Q> + <var:w0> \end{verbatim} Assuming that $ <var:M> = <var:a> $ ahead of interpreting our list of commands it holds that we have $ <var:Q> = <nat:9> \times <var:a> + <nat:4> $ after code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:M> = <var:a> \} \\ <var:w1> := <var:M> ; \\ \{ <var:M> = <var:a> \land <var:w1> = <var:a> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:M> = <var:a> \land <var:w1> = <var:a> \land <var:w0> = <nat:4> \} \\ <var:w1> := <var:w1> * <nat:9> ; \\ \{ <var:M> = <var:a> \land <var:w1> = <nat:9> \times <var:a> \land <var:w0> = <nat:4> \} \\ <var:Q> := <var:w1> \\ \{ <var:M> = <var:a> \land <var:w0> = <nat:4> \land <var:Q> = <nat:9> \times <var:a> \} \\ <var:Q> := <var:Q> + <var:w0> \\ \{ <var:M> = <var:a> \land <var:Q> = <nat:9> \times <var:a> + <nat:4> \} \end{eqnarray} Thus , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:M> = <var:a> }} <var:w1> := <var:M> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:9> ; <var:Q> := <var:w1> <var:Q> := <var:Q> + <var:w0> {{ <var:Q> = <nat:9> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:w1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:w1> = <var:a> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:w1> = <nat:9> * <var:a> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:w0> = <nat:4> /\ <var:Q> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:a> /\ <var:Q> = <nat:9> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 