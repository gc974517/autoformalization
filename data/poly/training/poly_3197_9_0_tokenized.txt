\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:L> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:L> ; <var:y2> := <var:y2> * <var:L> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:L> = <var:o> $ ahead of the evaluation of our set of commands , it follows that we have $ <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:o> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \} \\ <var:y1> := <nat:1> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> \} \\ <var:y1> := <var:y1> * <var:L> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> * <var:o> \} \\ <var:y2> := <nat:2> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> * <var:o> \land <var:y2> = <nat:2> \} \\ <var:y2> := <var:y2> * <var:L> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> * <var:o> \land <var:y2> = <nat:2> * <var:o> \} \\ <var:y2> := <var:y2> * <var:L> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> * <var:o> \land <var:y2> = <nat:2> * <var:o> ^ <nat:2> \} \\ <var:D> := <var:y2> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:y1> = <nat:1> * <var:o> \land <var:D> = <nat:2> * <var:o> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:y1> ; \\ \{ <var:L> = <var:o> \land <var:y0> = <nat:1> \land <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> \} \\ <var:D> := <var:D> + <var:y0> \\ \{ <var:L> = <var:o> \land <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> \} \end{eqnarray} Using typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:1> ; <var:y1> := <nat:1> ; <var:y1> := <var:y1> * <var:L> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:L> ; <var:y2> := <var:y2> * <var:L> ; <var:D> := <var:y2> ; <var:D> := <var:D> + <var:y1> ; <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:L> = <var:o> }} <def:poly> {{ <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> * <var:o> /\ <var:y2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> * <var:o> /\ <var:y2> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> * <var:o> /\ <var:y2> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:1> * <var:o> /\ <var:D> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:y0> = <nat:1> /\ <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:o> /\ <var:D> = <nat:2> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 