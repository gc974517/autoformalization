\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:Z> := <var:u2> ; <var:Z> := <var:Z> + <var:u1> ; <var:Z> := <var:Z> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> . Assume $ <var:o> = <var:L> $ --- letting $ <var:L> \in \mathbb{N} $ --- prior to interpreting this program , it holds that $ <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:L> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:5> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> \} \\ <var:u1> := <var:u1> * <var:o> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:L> \} \\ <var:u2> := <nat:8> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:L> \land <var:u2> = <nat:8> \} \\ <var:u2> := <var:u2> * <var:o> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:L> \land <var:u2> = <nat:8> * <var:L> \} \\ <var:u2> := <var:u2> * <var:o> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:L> \land <var:u2> = <nat:8> * <var:L> ^ <nat:2> \} \\ <var:Z> := <var:u2> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:u1> = <nat:5> * <var:L> \land <var:Z> = <nat:8> * <var:L> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:u1> ; \\ \{ <var:o> = <var:L> \land <var:u0> = <nat:5> \land <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> \} \\ <var:Z> := <var:Z> + <var:u0> \\ \{ <var:o> = <var:L> \land <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:5> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:u1> := <nat:5> ; <var:u1> := <var:u1> * <var:o> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:o> ; <var:u2> := <var:u2> * <var:o> ; <var:Z> := <var:u2> ; <var:Z> := <var:Z> + <var:u1> ; <var:Z> := <var:Z> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <def:poly> {{ <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:L> /\ <var:u2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:L> /\ <var:u2> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:L> /\ <var:u2> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:5> * <var:L> /\ <var:Z> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:u0> = <nat:5> /\ <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:Z> = <nat:8> * <var:L> ^ <nat:2> + <nat:5> * <var:L> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 