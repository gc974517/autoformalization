\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:I> ; <var:p2> := <var:p1> * <var:I> ; <var:p3> := <var:p2> * <var:I> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:4> ; <var:l> := <var:p3> <var:l> := <var:l> + <var:p2> <var:l> := <var:l> + <var:p1> <var:l> := <var:l> + <var:p0> \end{verbatim} Assuming ( letting $ <var:n> \in \mathbb{Z}^+ $ ) it to hold that $ <var:I> = <var:n> $ prior to the execution of the code segment it holds that $ <var:l> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:9> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is done by standard Hoare logic . Moving on to the next step , we have the assignment line binding $ <var:I> $ toward $ <var:p1>$ . This takes $ \{ <var:I> = <var:n> \} $ as the condition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \} $ . Taking another step toward the proceeding line in the list of commands , we have the environment update command \verb | <var:p2> := <var:p1> * <var:I> ; | . This command redefines the condition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \} $ to the postcondition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law obtained from usual Hoare reasoning . Advancing to the next step , the variable binding statement letting $ <var:p2> * <var:I> $ into $ <var:p3>$ . This code redefines the condition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \} $ toward the postcondition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \} $ . This is known to be sound using the assignment inference rule obtained from typical Hoare logic . Moving on to the next step , the line \verb | <var:p0> := <nat:3> ; | . This redefines the condition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . Observing the following line seen in our set of commands , the variable binding statement \verb | <var:p1> := <var:p1> * <nat:1> ; | . This statement advances the precondition $ \{ <var:I> = <var:n> \land <var:p1> = <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ to $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . This is known to be sound by the assignment law defined in standard Hoare reasoning . Honing in on the upcoming line seen in the segment of code , the variable assignmet statement defining $ <var:p2> * <nat:9> $ toward $ <var:p2>$ . This advances the condition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ to the postcondition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . This is shown by the assignment rule from standard Hoare reasoning . Advancing to the next piece of code in our series of commands , the binding command defining $ <var:p3> * <nat:4> $ as $ <var:p3>$ . This transfers $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p3> = <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ . This is sound using the assignment inference rule given in usual Hoare techniques . Paying attention to the proceeding bit of code found in our program , the variable assignmet code defining $ <var:p3$ to $ <var:l>$ . This line redefines $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p3> = <nat:4> * <var:n> ^ <nat:3> \land <var:p0> = <nat:3> \} $ into the condition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> \} $ . Paying attention to the subsequent piece of code in our program , we see the assignment code \verb | <var:l> := <var:l> + <var:p2> | . This redefines $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p2> = <nat:9> * <var:n> ^ <nat:2> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> \} $ . This is deduced through the assignment scheme in Hoare techniques . Paying attention to the subsequent statement seen in our list of instructions , we have the line \verb | <var:l> := <var:l> + <var:p1> | . This line moves the precondition $ \{ <var:I> = <var:n> \land <var:p1> = <nat:1> * <var:n> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> \} $ toward the condition $ \{ <var:I> = <var:n> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> \} $ . Honing in on the subsequent piece of code contained in the series of commands , the environment update line \verb | <var:l> := <var:l> + <var:p0> | . This redefines the precondition $ \{ <var:I> = <var:n> \land <var:p0> = <nat:3> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> \} $ . This is shown by the assignment scheme given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:p1> := <var:I> ; <var:p2> := <var:p1> * <var:I> ; <var:p3> := <var:p2> * <var:I> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:4> ; <var:l> := <var:p3> <var:l> := <var:l> + <var:p2> <var:l> := <var:l> + <var:p1> <var:l> := <var:l> + <var:p0> {{ <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <var:n> /\ <var:p2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <var:n> /\ <var:p2> = <var:n> ^ <nat:2> /\ <var:p3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <var:n> /\ <var:p2> = <var:n> ^ <nat:2> /\ <var:p3> = <var:n> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <nat:1> * <var:n> /\ <var:p2> = <var:n> ^ <nat:2> /\ <var:p3> = <var:n> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <nat:1> * <var:n> /\ <var:p2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:p3> = <var:n> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <nat:1> * <var:n> /\ <var:p2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:p3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <nat:1> * <var:n> /\ <var:p2> = <nat:9> * <var:n> ^ <nat:2> /\ <var:p0> = <nat:3> /\ <var:l> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p1> = <nat:1> * <var:n> /\ <var:p0> = <nat:3> /\ <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:p0> = <nat:3> /\ <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:l> = <nat:4> * <var:n> ^ <nat:3> + <nat:9> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 