\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:R> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:4> ; <var:s> := <var:S1> <var:s> := <var:s> + <var:S0> \end{verbatim} Given --- letting positive coefficients $ <var:k> $ --- it to be that $ <var:R> = <var:k> $ prior to the execution of our series of commands , it holds that we have $ <var:s> = <nat:4> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is done by the following decorated list of instructions . \begin{eqnarray} \{ <var:R> = <var:k> \} \\ <var:S1> := <var:R> ; \\ \{ <var:R> = <var:k> \land <var:S1> = <var:k> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:R> = <var:k> \land <var:S1> = <var:k> \land <var:S0> = <nat:3> \} \\ <var:S1> := <var:S1> * <nat:4> ; \\ \{ <var:R> = <var:k> \land <var:S1> = <nat:4> \cdot <var:k> \land <var:S0> = <nat:3> \} \\ <var:s> := <var:S1> \\ \{ <var:R> = <var:k> \land <var:S0> = <nat:3> \land <var:s> = <nat:4> \cdot <var:k> \} \\ <var:s> := <var:s> + <var:S0> \\ \{ <var:R> = <var:k> \land <var:s> = <nat:4> \cdot <var:k> + <nat:3> \} \end{eqnarray} Using typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <var:S1> := <var:R> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:4> ; <var:s> := <var:S1> <var:s> := <var:s> + <var:S0> {{ <var:s> = <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:S1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:S1> = <var:k> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:S1> = <nat:4> * <var:k> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:S0> = <nat:3> /\ <var:s> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s> = <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 