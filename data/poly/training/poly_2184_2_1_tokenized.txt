\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:D0> := <nat:8> ; <var:X> := <var:D0> \end{verbatim} Assume it to hold that $ <var:q> = <var:c> $ --- for some $ <var:c> $ --- before executing our series of commands it must be that we see $ <var:X> = <nat:8> $ . \end{theorem} \begin{proof} The argument for the code segment is evident through typical Hoare reasoning . Moving forward to the following lines of codefound in the code segment , we have \begin{verbatim} { <var:q> = <var:c> } <var:D0> := <nat:8> { <var:q> = <var:c> \land <var:D0> = <nat:8> } { <var:q> = <var:c> \land <var:D0> = <nat:8> } <var:X> := <var:D0{ <var:q> = <var:c> \land <var:X> = <nat:8> } \end{verbatim} This is deduced by the variable binding law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:q> = <var:c> }} <var:D0> := <nat:8> ; <var:X> := <var:D0> {{ <var:X> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:c> /\ <var:X> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 