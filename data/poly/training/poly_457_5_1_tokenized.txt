\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:P1> := <var:F> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:8> ; <var:L> := <var:P1> <var:L> := <var:L> + <var:P0> \end{verbatim} Given that $ <var:F> = <var:N> $ --- given any positive numbers $ <var:N> $ --- prior to running our series of commands it must be that we see $ <var:L> = <nat:8> \cdot <var:N> + <nat:8> $ when code has finished . \end{theorem} \begin{proof} The course of logic for the code segment can be demonstrated by typical Hoare logic . Moving onward , we have the environment update code \verb | <var:P1> := <var:F> ; | . This moves the precondition $ \{ <var:F> = <var:N> \} $ into the postcondition $ \{ <var:F> = <var:N> \land <var:P1> = <var:N> \} $ . This is sound with the assignment rule given in usual Hoare techniques . Immediately following , the binding code \verb | <var:P0> := <nat:8> ; | . This statement forwards the precondition $ \{ <var:F> = <var:N> \land <var:P1> = <var:N> \} $ toward the postcondition $ \{ <var:F> = <var:N> \land <var:P1> = <var:N> \land <var:P0> = <nat:8> \} $ . This is shown through the assignment scheme of standard Hoare logic . Moving on to the next step , we see the variable update command \verb | <var:P1> := <var:P1> * <nat:8> ; | . This forwards the condition $ \{ <var:F> = <var:N> \land <var:P1> = <var:N> \land <var:P0> = <nat:8> \} $ into the postcondition $ \{ <var:F> = <var:N> \land <var:P1> = <nat:8> * <var:N> \land <var:P0> = <nat:8> \} $ . Following , we see the binding code \verb | <var:L> := <var:P1> | . This redefines the precondition $ \{ <var:F> = <var:N> \land <var:P1> = <nat:8> * <var:N> \land <var:P0> = <nat:8> \} $ into the condition $ \{ <var:F> = <var:N> \land <var:P0> = <nat:8> \land <var:L> = <nat:8> * <var:N> \} $ . This is ensured using the assignment rule given in standard Hoare reasoning . Jumping to the next bit of code seen in our series of commands , the variable update line \verb | <var:L> := <var:L> + <var:P0> | . This forwards the precondition $ \{ <var:F> = <var:N> \land <var:P0> = <nat:8> \land <var:L> = <nat:8> * <var:N> \} $ toward $ \{ <var:F> = <var:N> \land <var:L> = <nat:8> * <var:N> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:F> = <var:N> }} <var:P1> := <var:F> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:8> ; <var:L> := <var:P1> <var:L> := <var:L> + <var:P0> {{ <var:L> = <nat:8> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P1> = <var:N> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P1> = <nat:8> * <var:N> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P0> = <nat:8> /\ <var:L> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:L> = <nat:8> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 