\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:u> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:u> ; <var:c2> := <var:c2> * <var:u> ; <var:W> := <var:c2> ; <var:W> := <var:W> + <var:c1> ; <var:W> := <var:W> + <var:c0> \end{verbatim} Allowing $ <var:u> = <var:J> $ ahead of running our code segment , then $ <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is demonstrated with Hoare logic . Immediately after , we see \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | and \verb | { <var:u> = <var:J> \land <var:c0> = <nat:9> } <var:c1> := <nat:5> { <var:u> = <var:J> \land <var:c0> = <nat:9> \land <var:c1> = <nat:5> } | . This is given using the variable binding rule found in usual Hoare techniques . Taking another step toward the proceeding line contained in our code , we have \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | . Shifting focus toward the subsequent line contained in our list of commands , we have \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | . Focusing on the following step found in our set of instructions , we have \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | . Immediately after , we have \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | and \verb | { <var:u> = <var:J> \land <var:c0> = <nat:9> } <var:c1> := <nat:5> { <var:u> = <var:J> \land <var:c0> = <nat:9> \land <var:c1> = <nat:5> } | . This is deduced using the variable binding inference rule from typical Hoare techniques . Following , we have \verb | { <var:u> = <var:J> } <var:c0> := <nat:9> { <var:u> = <var:J> \land <var:c0> = <nat:9> } | and \verb | { <var:u> = <var:J> \land <var:c0> = <nat:9> } <var:c1> := <nat:5> { <var:u> = <var:J> \land <var:c0> = <nat:9> \land <var:c1> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:u> = <var:J> }} <var:c0> := <nat:9> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:u> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:u> ; <var:c2> := <var:c2> * <var:u> ; <var:W> := <var:c2> ; <var:W> := <var:W> + <var:c1> ; <var:W> := <var:W> + <var:c0> {{ <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> * <var:J> /\ <var:c2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> * <var:J> /\ <var:c2> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> * <var:J> /\ <var:c2> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:5> * <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:c0> = <nat:9> /\ <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 