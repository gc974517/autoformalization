\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:y> := <var:Z3> <var:y> := <var:y> + <var:Z2> <var:y> := <var:y> + <var:Z1> <var:y> := <var:y> + <var:Z0> \end{verbatim} Assume with some natural numbers $ <var:S> $ $ <var:h> = <var:S> $ ahead of running our set of commands it must be that we see $ <var:y> = <nat:2> \times <var:S> ^ <nat:3> + <nat:5> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:2> $ when program has finished executing . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:h> = <var:S> \} \\ <var:Z1> := <var:h> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <var:S> \} \\ <var:Z2> := <var:Z1> * <var:h> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <var:S> \land <var:Z2> = <var:S> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:h> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <var:S> \land <var:Z2> = <var:S> ^ <nat:2> \land <var:Z3> = <var:S> ^ <nat:3> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <var:S> \land <var:Z2> = <var:S> ^ <nat:2> \land <var:Z3> = <var:S> ^ <nat:3> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <nat:1> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z2> = <var:S> ^ <nat:2> \land <var:Z3> = <var:S> ^ <nat:3> \land <var:Z0> = <nat:2> \} \\ <var:Z2> := <var:Z2> * <nat:5> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z2> = <nat:5> * <var:S> ^ <nat:2> \land <var:Z3> = <var:S> ^ <nat:3> \land <var:Z0> = <nat:2> \} \\ <var:Z3> := <var:Z3> * <nat:2> ; \\ \{ <var:h> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z2> = <nat:5> * <var:S> ^ <nat:2> \land <var:Z3> = <nat:2> * <var:S> ^ <nat:3> \land <var:Z0> = <nat:2> \} \\ <var:y> := <var:Z3> \\ \{ <var:h> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z2> = <nat:5> * <var:S> ^ <nat:2> \land <var:Z0> = <nat:2> \land <var:y> = <nat:2> * <var:S> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:Z2> \\ \{ <var:h> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z0> = <nat:2> \land <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:Z1> \\ \{ <var:h> = <var:S> \land <var:Z0> = <nat:2> \land <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:1> * <var:S> \} \\ <var:y> := <var:y> + <var:Z0> \\ \{ <var:h> = <var:S> \land <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> \} \end{eqnarray} As a result , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:h> = <var:S> }} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:Z3> := <var:Z3> * <nat:2> ; <var:y> := <var:Z3> <var:y> := <var:y> + <var:Z2> <var:y> := <var:y> + <var:Z1> <var:y> := <var:y> + <var:Z0> {{ <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <var:S> /\ <var:Z2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <var:S> /\ <var:Z2> = <var:S> ^ <nat:2> /\ <var:Z3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <var:S> /\ <var:Z2> = <var:S> ^ <nat:2> /\ <var:Z3> = <var:S> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z2> = <var:S> ^ <nat:2> /\ <var:Z3> = <var:S> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:Z3> = <var:S> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:Z3> = <nat:2> * <var:S> ^ <nat:3> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:Z0> = <nat:2> /\ <var:y> = <nat:2> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z0> = <nat:2> /\ <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:Z0> = <nat:2> /\ <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:S> /\ <var:y> = <nat:2> * <var:S> ^ <nat:3> + <nat:5> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 