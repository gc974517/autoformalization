\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:6> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:C> ; <var:g2> := <var:g2> * <var:C> ; <var:g3> := <nat:5> ; <var:g3> := <var:g3> * <var:C> ; <var:g3> := <var:g3> * <var:C> ; <var:g3> := <var:g3> * <var:C> ; <var:L> := <var:g3> ; <var:L> := <var:L> + <var:g2> ; <var:L> := <var:L> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- taking positive coefficients $ <var:A> $ --- $ <var:C> = <var:A> $ prior to the execution of the list of instructions it holds that we see $ <var:L> = <nat:5> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:A> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \} \\ <var:g2> := <nat:8> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \} \\ <var:g2> := <var:g2> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> \} \\ <var:g2> := <var:g2> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \} \\ <var:g3> := <nat:5> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \land <var:g3> = <nat:5> \} \\ <var:g3> := <var:g3> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:A> \} \\ <var:g3> := <var:g3> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:A> ^ <nat:2> \} \end{eqnarray} Furthering running our list of instructions gives us : \begin{eqnarray} <var:g3> := <var:g3> * <var:C> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:A> ^ <nat:3> \} \\ <var:L> := <var:g3> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:g2> = <nat:8> \times <var:A> ^ <nat:2> \land <var:L> = <nat:5> \times <var:A> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:g2> ; \\ \{ <var:C> = <var:A> \land <var:g0> = <nat:6> \land <var:L> = <nat:5> \times <var:A> ^ <nat:3> + <nat:8> \times <var:A> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:g0> \\ \{ <var:C> = <var:A> \land <var:L> = <nat:5> \times <var:A> ^ <nat:3> + <nat:8> \times <var:A> ^ <nat:2> + <nat:6> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g0> := <nat:6> ; <var:g2> := <nat:8> ; <var:g2> := <var:g2> * <var:C> ; <var:g2> := <var:g2> * <var:C> ; <var:g3> := <nat:5> ; <var:g3> := <var:g3> * <var:C> ; <var:g3> := <var:g3> * <var:C> ; <var:g3> := <var:g3> * <var:C> ; <var:L> := <var:g3> ; <var:L> := <var:L> + <var:g2> ; <var:L> := <var:L> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:C> = <var:A> }} <def:poly> {{ <var:L> = <nat:5> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:g3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:g2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:L> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:g0> = <nat:6> /\ <var:L> = <nat:5> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:A> /\ <var:L> = <nat:5> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 