\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:V> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:2> ; <var:v> := <var:A1> <var:v> := <var:v> + <var:A0> \end{verbatim} Given $ <var:V> = <var:x> $ before executing the set of instructions it holds that $ <var:v> = <nat:2> * <var:x> + <nat:7> $ once list of instructions finishes . \end{theorem} \begin{proof} Notice this decorated set of commands . \begin{eqnarray} \{ <var:V> = <var:x> \} \\ <var:A1> := <var:V> ; \\ \{ <var:V> = <var:x> \land <var:A1> = <var:x> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:V> = <var:x> \land <var:A1> = <var:x> \land <var:A0> = <nat:7> \} \\ <var:A1> := <var:A1> * <nat:2> ; \\ \{ <var:V> = <var:x> \land <var:A1> = <nat:2> \cdot <var:x> \land <var:A0> = <nat:7> \} \\ <var:v> := <var:A1> \\ \{ <var:V> = <var:x> \land <var:A0> = <nat:7> \land <var:v> = <nat:2> \cdot <var:x> \} \\ <var:v> := <var:v> + <var:A0> \\ \{ <var:V> = <var:x> \land <var:v> = <nat:2> \cdot <var:x> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <var:A1> := <var:V> ; <var:A0> := <nat:7> ; <var:A1> := <var:A1> * <nat:2> ; <var:v> := <var:A1> <var:v> := <var:v> + <var:A0> {{ <var:v> = <nat:2> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:A1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:A1> = <var:x> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:A1> = <nat:2> * <var:x> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:A0> = <nat:7> /\ <var:v> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:v> = <nat:2> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 