\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:U> ; <var:O2> := <nat:4> ; <var:O2> := <var:O2> * <var:U> ; <var:O2> := <var:O2> * <var:U> ; <var:Q> := <var:O2> ; <var:Q> := <var:Q> + <var:O1> ; <var:Q> := <var:Q> + <var:O0> \end{verbatim} Assume that $ <var:U> = <var:c> $ before executing this series of commands , it must be that we have $ <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:7> $ after set of commands executes . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is demonstrated through typical Hoare logic . After , we see the binding line assigning $ <nat:7> $ to $ <var:O0>$ . This code advances the condition $ \{ <var:U> = <var:c> \} $ to the condition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \} $ . Moving forward to the next step , we have the variable update code yielding $ <nat:4> $ to $ <var:O1>$ . This code takes $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \} $ as $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \} $ . This is sound with the assignment inference rule found in usual Hoare reasoning . Taking another step toward the subsequent line found in the set of commands , we have the environment update line letting $ <var:O1> * <var:U> $ toward $ <var:O1>$ . This redefines the condition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \} $ . This is known to be sound by the assignment law found in typical Hoare techniques . Moving onward , we see the command \verb | <var:O2> := <nat:4> ; | . This transfers the condition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \} $ to $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \} $ . Jumping to the following statement found in our segment of code , we see the variable update command \verb | <var:O2> := <var:O2> * <var:U> ; | . This moves the precondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \} $ toward the condition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \cdot <var:c> \} $ . Moving forward to the following bit of code seen in the set of commands , we have the variable assignmet statement \verb | <var:O2> := <var:O2> * <var:U> ; | . This advances the precondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \cdot <var:c> \} $ into $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ . This is ensured through the assignment law defined in typical Hoare logic . Advancing , we have the binding line \verb | <var:Q> := <var:O2> ; | . This takes the precondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:O2> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ into $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ . Jumping to the following line of code in our code segment , we see the variable assignmet command \verb | <var:Q> := <var:Q> + <var:O1> ; | . This moves the condition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:O1> = <nat:4> \cdot <var:c> \land <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} $ . This is sound with the assignment law of standard Hoare reasoning . Focusing on the subsequent bit of code found in our list of commands , we see the binding code yielding $ <var:Q> + <var:O0$ to $ <var:Q>$ . This takes the precondition $ \{ <var:U> = <var:c> \land <var:O0> = <nat:7> \land <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> \} $ as $ \{ <var:U> = <var:c> \land <var:Q> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <var:O0> := <nat:7> ; <var:O1> := <nat:4> ; <var:O1> := <var:O1> * <var:U> ; <var:O2> := <nat:4> ; <var:O2> := <var:O2> * <var:U> ; <var:O2> := <var:O2> * <var:U> ; <var:Q> := <var:O2> ; <var:Q> := <var:Q> + <var:O1> ; <var:Q> := <var:Q> + <var:O0> {{ <var:Q> = <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> * <var:c> /\ <var:O2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> * <var:c> /\ <var:O2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> * <var:c> /\ <var:O2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:4> * <var:c> /\ <var:Q> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:O0> = <nat:7> /\ <var:Q> = <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:Q> = <nat:4> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 