\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:5> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:y> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:y> ; <var:J2> := <var:J2> * <var:y> ; <var:z> := <var:J2> ; <var:z> := <var:z> + <var:J1> ; <var:z> := <var:z> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:y> = <var:i> $ --- given every positive coefficients $ <var:i> $ --- before executing the list of commands , it follows that we have $ <var:z> = <nat:6> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:5> $ when list of instructions has exited . \end{theorem} \begin{proof} The method of proof for our segment of code is given by standard Hoare logic . Moving on to the next bits of codeseen in our code , we see \begin{eqnarray} \{ <var:y> = <var:i> \} \, <var:J0> := <nat:5> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \} \, <var:J1> := <nat:1> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \} \, <var:J1> := <var:J1> * <var:y> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \} \, <var:J2> := <nat:6> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \} \, <var:J2> := <var:J2> * <var:y> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \cdot <var:i> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \cdot <var:i> \} \, <var:J2> := <var:J2> * <var:y> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \cdot <var:i> ^ <nat:2> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:J2> = <nat:6> \cdot <var:i> ^ <nat:2> \} \, <var:z> := <var:J2> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:z> = <nat:6> \cdot <var:i> ^ <nat:2> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:J1> = <nat:1> \cdot <var:i> \land <var:z> = <nat:6> \cdot <var:i> ^ <nat:2> \} \, <var:z> := <var:z> + <var:J1> \, \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:z> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> \} \\ \{ <var:y> = <var:i> \land <var:J0> = <nat:5> \land <var:z> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> \} \, <var:z> := <var:z> + <var:J0\, \{ <var:y> = <var:i> \land <var:z> = <nat:6> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:5> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:y> ; <var:J2> := <nat:6> ; <var:J2> := <var:J2> * <var:y> ; <var:J2> := <var:J2> * <var:y> ; <var:z> := <var:J2> ; <var:z> := <var:z> + <var:J1> ; <var:z> := <var:z> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:y> = <var:i> }} <def:poly> {{ <var:z> = <nat:6> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> * <var:i> /\ <var:J2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> * <var:i> /\ <var:J2> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> * <var:i> /\ <var:J2> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:1> * <var:i> /\ <var:z> = <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:J0> = <nat:5> /\ <var:z> = <nat:6> * <var:i> ^ <nat:2> + <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:i> /\ <var:z> = <nat:6> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 