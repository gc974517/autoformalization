\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:h0> := <nat:6> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:l> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:l> ; <var:h2> := <var:h2> * <var:l> ; <var:M> := <var:h2> ; <var:M> := <var:M> + <var:h1> ; <var:M> := <var:M> + <var:h0> \end{verbatim} Allowing that $ <var:l> = <var:G> $ for positive integer coefficients $ <var:G> $ before executing the program , it follows that we have $ <var:M> = <nat:5> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:6> $ after code is done . \end{theorem} \begin{proof} The way to prove correctness for our code can be shown by usual Hoare reasoning . Taking another step toward the upcoming bits of codefound in the series of instructions , \verb | { <var:l> = <var:G> } <var:h0> := <nat:6> { <var:l> = <var:G> \land <var:h0> = <nat:6> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> } <var:h1> := <nat:1> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> } <var:h1> := <var:h1> * <var:l> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> } <var:h2> := <nat:5> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> } <var:h2> := <var:h2> * <var:l> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> * <var:G> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> * <var:G> } <var:h2> := <var:h2> * <var:l> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> * <var:G> ^ <nat:2> } | , \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:h2> = <nat:5> * <var:G> ^ <nat:2> } <var:M> := <var:h2> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:M> = <nat:5> * <var:G> ^ <nat:2> } | and \verb | { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:h1> = <nat:1> * <var:G> \land <var:M> = <nat:5> * <var:G> ^ <nat:2> } <var:M> := <var:M> + <var:h1> { <var:l> = <var:G> \land <var:h0> = <nat:6> \land <var:M> = <nat:5> * <var:G> ^ <nat:2> + <nat:1> * <var:G> } | . Focusing on the subsequent bit of code in our list of commands , we see \verb | { <var:l> = <var:G> } <var:h0> := <nat:6> { <var:l> = <var:G> \land <var:h0> = <nat:6> } | . This is shown to be logically sound by the binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:l> = <var:G> }} <var:h0> := <nat:6> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:l> ; <var:h2> := <nat:5> ; <var:h2> := <var:h2> * <var:l> ; <var:h2> := <var:h2> * <var:l> ; <var:M> := <var:h2> ; <var:M> := <var:M> + <var:h1> ; <var:M> := <var:M> + <var:h0> {{ <var:M> = <nat:5> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:G> /\ <var:h2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:G> /\ <var:h2> = <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:G> /\ <var:h2> = <nat:5> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:h1> = <nat:1> * <var:G> /\ <var:M> = <nat:5> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:h0> = <nat:6> /\ <var:M> = <nat:5> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:M> = <nat:5> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 