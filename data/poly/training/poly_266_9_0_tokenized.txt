\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:w> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:w> ; <var:q2> := <var:q2> * <var:w> ; <var:P> := <var:q2> ; <var:P> := <var:P> + <var:q1> ; <var:P> := <var:P> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume , for any positive numbers $ <var:R> $ , it to be that $ <var:w> = <var:R> $ before the execution of the segment of code , then $ <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be done with usual Hoare techniques . Taking a look at the next statement found in our program , we have the environment update code yielding $ <nat:4> $ into $ <var:q0>$ . This advances the condition $ \{ <var:w> = <var:R> \} $ into $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \} $ . Moving on to the next step , we see the binding statement \verb | <var:q1> := <nat:8> ; | . This code moves the condition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \} $ as the postcondition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> \} $ . This is deduced with the assignment inference rule given in usual Hoare logic . Stepping through , we see the environment update code \verb | <var:q1> := <var:q1> * <var:w> ; | . This code transfers the precondition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> \} $ into $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \} $ . Moving forward to the next bit of code found in our set of instructions , we see the variable assignmet statement yielding $ <nat:7> $ to $ <var:q2>$ . This statement takes the condition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \} $ toward the condition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> \} $ . Focusing on the next line of code seen in the code , the statement \verb | <var:q2> := <var:q2> * <var:w> ; | . This transfers $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> \} $ as $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> * <var:R> \} $ . Advancing on , the variable assignmet command binding $ <var:q2> * <var:w> $ as $ <var:q2>$ . This command moves $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> * <var:R> \} $ to the postcondition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> * <var:R> ^ <nat:2> \} $ . This is sound through the assignment rule in typical Hoare logic . Now , the variable binding statement \verb | <var:P> := <var:q2> ; | . This statement moves the condition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:q2> = <nat:7> * <var:R> ^ <nat:2> \} $ as the condition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:P> = <nat:7> * <var:R> ^ <nat:2> \} $ . Jumping to the next step in our set of instructions , we have the variable update line \verb | <var:P> := <var:P> + <var:q1> ; | . This code takes $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:q1> = <nat:8> * <var:R> \land <var:P> = <nat:7> * <var:R> ^ <nat:2> \} $ to the postcondition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> \} $ . Advancing to the subsequent bit of code in the program , the variable update statement binding $ <var:P> + <var:q0$ toward $ <var:P>$ . This redefines the precondition $ \{ <var:w> = <var:R> \land <var:q0> = <nat:4> \land <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> \} $ into the condition $ \{ <var:w> = <var:R> \land <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:8> ; <var:q1> := <var:q1> * <var:w> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:w> ; <var:q2> := <var:q2> * <var:w> ; <var:P> := <var:q2> ; <var:P> := <var:P> + <var:q1> ; <var:P> := <var:P> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:w> = <var:R> }} <def:poly> {{ <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> * <var:R> /\ <var:q2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> * <var:R> /\ <var:q2> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> * <var:R> /\ <var:q2> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:8> * <var:R> /\ <var:P> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:q0> = <nat:4> /\ <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:P> = <nat:7> * <var:R> ^ <nat:2> + <nat:8> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 