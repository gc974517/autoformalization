\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:p0> := <nat:3> ; <var:R> := <var:p0> \end{verbatim} Given it to hold that $ <var:H> = <var:X> $ prior to evaluating the program , then we have $ <var:R> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be accomplished using standard Hoare reasoning . Following , the variable assignmet code \verb | <var:p0> := <nat:3> ; | . This transfers the condition $ \{ <var:H> = <var:X> \} $ toward the condition $ \{ <var:H> = <var:X> \land <var:p0> = <nat:3> \} $ . This is shown by the assignment rule obtained from usual Hoare techniques . Focusing on the proceeding step found in the segment of code , we see the variable update line giving $ <var:p0$ into $ <var:R>$ . This command redefines the condition $ \{ <var:H> = <var:X> \land <var:p0> = <nat:3> \} $ as $ \{ <var:H> = <var:X> \land <var:R> = <nat:3> \} $ . This is rigorously given using the assignment law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:H> = <var:X> }} <var:p0> := <nat:3> ; <var:R> := <var:p0> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 