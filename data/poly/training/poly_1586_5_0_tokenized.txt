\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:J> ; <var:Y> := <var:w1> ; <var:Y> := <var:Y> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:J> = <var:r> $ ( given any positive integer coefficients $ <var:r> $ ) prior to the evaluation of this code segment it must be that $ <var:Y> = <nat:9> * <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is clear with usual Hoare reasoning . Immediately following , the binding command yielding $ <nat:3> $ toward $ <var:w0>$ . This statement advances $ \{ <var:J> = <var:r> \} $ into $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \} $ . Advancing , we have the variable assignmet line \verb | <var:w1> := <nat:9> ; | . This transfers the precondition $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \} $ . This is ensured through the assignment scheme given in typical Hoare logic . Considering the subsequent line of code found in our set of instructions , we see the line \verb | <var:w1> := <var:w1> * <var:J> ; | . This statement advances the precondition $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> \} $ into $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> * <var:r> \} $ . Paying attention to the next step found in our series of instructions , the variable update command \verb | <var:Y> := <var:w1> ; | . This statement redefines the precondition $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:w1> = <nat:9> * <var:r> \} $ to the postcondition $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:Y> = <nat:9> * <var:r> \} $ . Taking a look at the next step contained in our series of instructions , the line \verb | <var:Y> := <var:Y> + <var:w0> | . This redefines $ \{ <var:J> = <var:r> \land <var:w0> = <nat:3> \land <var:Y> = <nat:9> * <var:r> \} $ as the condition $ \{ <var:J> = <var:r> \land <var:Y> = <nat:9> * <var:r> + <nat:3> \} $ . This is rigorously given by the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:J> ; <var:Y> := <var:w1> ; <var:Y> := <var:Y> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:J> = <var:r> }} <def:poly> {{ <var:Y> = <nat:9> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:w0> = <nat:3> /\ <var:Y> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:r> /\ <var:Y> = <nat:9> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 