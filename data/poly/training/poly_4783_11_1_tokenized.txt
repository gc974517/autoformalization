\begin{document} \begin{theorem} Define the following program : \begin{verbatim} <var:l1> := <var:j> ; <var:l2> := <var:l1> * <var:j> ; <var:l3> := <var:l2> * <var:j> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:3> ; <var:l3> := <var:l3> * <nat:8> ; <var:N> := <var:l3> <var:N> := <var:N> + <var:l2> <var:N> := <var:N> + <var:l1> <var:N> := <var:N> + <var:l0> \end{verbatim} Allow that we have $ <var:j> = <var:o> $ ahead of the execution of our code segment it must be that we see $ <var:N> = <nat:8> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:7> \cdot <var:o> + <nat:6> $ when series of commands has exited . \end{theorem} \begin{proof} The application of Hoare reasoning results in : \begin{eqnarray} \{ <var:j> = <var:o> \} \\ <var:l1> := <var:j> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <var:o> \} \\ <var:l2> := <var:l1> * <var:j> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:j> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l1> := <var:l1> * <nat:7> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <nat:7> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l2> := <var:l2> * <nat:3> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <nat:7> \times <var:o> \land <var:l2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:l3> := <var:l3> * <nat:8> ; \\ \{ <var:j> = <var:o> \land <var:l1> = <nat:7> \times <var:o> \land <var:l2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} \\ <var:N> := <var:l3> \\ \{ <var:j> = <var:o> \land <var:l1> = <nat:7> \times <var:o> \land <var:l2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:l0> = <nat:6> \land <var:N> = <nat:8> \times <var:o> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:l2> \\ \{ <var:j> = <var:o> \land <var:l1> = <nat:7> \times <var:o> \land <var:l0> = <nat:6> \land <var:N> = <nat:8> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:l1> \\ \{ <var:j> = <var:o> \land <var:l0> = <nat:6> \land <var:N> = <nat:8> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> \} \\ <var:N> := <var:N> + <var:l0> \\ \{ <var:j> = <var:o> \land <var:N> = <nat:8> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> + <nat:6> \} \end{eqnarray} Therefore , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:j> = <var:o> }} <var:l1> := <var:j> ; <var:l2> := <var:l1> * <var:j> ; <var:l3> := <var:l2> * <var:j> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:3> ; <var:l3> := <var:l3> * <nat:8> ; <var:N> := <var:l3> <var:N> := <var:N> + <var:l2> <var:N> := <var:N> + <var:l1> <var:N> := <var:N> + <var:l0> {{ <var:N> = <nat:8> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <nat:7> * <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <nat:7> * <var:o> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <nat:7> * <var:o> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <nat:7> * <var:o> /\ <var:l2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:l0> = <nat:6> /\ <var:N> = <nat:8> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l1> = <nat:7> * <var:o> /\ <var:l0> = <nat:6> /\ <var:N> = <nat:8> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:l0> = <nat:6> /\ <var:N> = <nat:8> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:o> /\ <var:N> = <nat:8> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 