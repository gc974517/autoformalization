\begin{document} \begin{theorem} Define a set of commands : \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:O> \end{verbatim} Given it to be that $ <var:O> = <var:T> $ before executing the series of commands , then we have $ <var:b> = <nat:3> * <var:T> + <nat:1> $ once series of instructions exits . \end{theorem} \begin{proof} The method of proof for our series of instructions is accomplished using typical Hoare logic . Stepping through , we see \begin{eqnarray} \{ <var:O> = <var:T> \} \, <var:b> := <nat:3> \, \{ <var:O> = <var:T> \land <var:b> = <nat:3> \} \\ \{ <var:O> = <var:T> \land <var:b> = <nat:3> \} \, <var:b> := <nat:1> + <var:b> * <var:O\, \{ <var:O> = <var:T> \land <var:b> = <nat:3> * <var:T> + <nat:1> \} \end{eqnarray} This is shown through the binding scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:O> = <var:T> }} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:O> {{ <var:b> = <nat:3> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:T> /\ <var:b> = <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 