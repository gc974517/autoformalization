\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:2> ; <var:F> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:O> = <var:k> $ before running our code segment it follows that we see $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} The proof of our set of instructions can be given with Hoare reasoning . Focusing on the next piece of code found in our set of instructions , the variable assignmet line \verb | <var:d0> := <nat:2> ; | . This moves the condition $ \{ <var:O> = <var:k> \} $ into the condition $ \{ <var:O> = <var:k> \land <var:d0> = <nat:2> \} $ . This is shown using the assignment inference rule defined by typical Hoare logic . Observing the upcoming statement in our code segment , the binding code binding $ <var:d0$ to $ <var:F>$ . This takes the condition $ \{ <var:O> = <var:k> \land <var:d0> = <nat:2> \} $ to the postcondition $ \{ <var:O> = <var:k> \land <var:F> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:F> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:O> = <var:k> }} <def:poly> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:k> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 