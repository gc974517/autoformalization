\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:d> ; <var:J2> := <var:J1> * <var:d> ; <var:J3> := <var:J2> * <var:d> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:5> ; <var:V> := <var:J3> <var:V> := <var:V> + <var:J2> <var:V> := <var:V> + <var:J1> <var:V> := <var:V> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assume , letting natural coefficients $ <var:l> $ , that $ <var:d> = <var:l> $ prior to evaluating this series of commands it follows that $ <var:V> = <nat:5> \times <var:l> ^ <nat:3> + <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:9> $ after code has terminated . \end{theorem} \begin{proof} Let the following decorated series of commands . \begin{eqnarray} \{ <var:d> = <var:l> \} \\ <var:J1> := <var:d> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <var:l> \} \\ <var:J2> := <var:J1> * <var:d> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:d> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J0> = <nat:9> \} \\ <var:J1> := <var:J1> * <nat:1> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <nat:1> \cdot <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J0> = <nat:9> \} \\ <var:J2> := <var:J2> * <nat:2> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <nat:1> \cdot <var:l> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J0> = <nat:9> \} \\ <var:J3> := <var:J3> * <nat:5> ; \\ \{ <var:d> = <var:l> \land <var:J1> = <nat:1> \cdot <var:l> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J3> = <nat:5> \cdot <var:l> ^ <nat:3> \land <var:J0> = <nat:9> \} \\ <var:V> := <var:J3> \\ \{ <var:d> = <var:l> \land <var:J1> = <nat:1> \cdot <var:l> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J0> = <nat:9> \land <var:V> = <nat:5> \cdot <var:l> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:J2> \\ \{ <var:d> = <var:l> \land <var:J1> = <nat:1> \cdot <var:l> \land <var:J0> = <nat:9> \land <var:V> = <nat:5> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:J1> \\ \{ <var:d> = <var:l> \land <var:J0> = <nat:9> \land <var:V> = <nat:5> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> \} \\ <var:V> := <var:V> + <var:J0> \\ \{ <var:d> = <var:l> \land <var:V> = <nat:5> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:9> \} \end{eqnarray} Using typical Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:d> ; <var:J2> := <var:J1> * <var:d> ; <var:J3> := <var:J2> * <var:d> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:1> ; <var:J2> := <var:J2> * <nat:2> ; <var:J3> := <var:J3> * <nat:5> ; <var:V> := <var:J3> <var:V> := <var:V> + <var:J2> <var:V> := <var:V> + <var:J1> <var:V> := <var:V> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <def:poly> {{ <var:V> = <nat:5> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <nat:1> * <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <nat:1> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <nat:1> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J3> = <nat:5> * <var:l> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <nat:1> * <var:l> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J0> = <nat:9> /\ <var:V> = <nat:5> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J1> = <nat:1> * <var:l> /\ <var:J0> = <nat:9> /\ <var:V> = <nat:5> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:J0> = <nat:9> /\ <var:V> = <nat:5> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:V> = <nat:5> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 