\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:w> ; <var:M> := <var:N1> ; <var:M> := <var:M> + <var:N0> \end{verbatim} Given it to hold that $ <var:w> = <var:a> $ with some positive coefficients $ <var:a> $ prior to the evaluation of our code , then we have $ <var:M> = <nat:4> \times <var:a> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:w> = <var:a> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:w> = <var:a> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:4> ; \\ \{ <var:w> = <var:a> \land <var:N0> = <nat:1> \land <var:N1> = <nat:4> \} \\ <var:N1> := <var:N1> * <var:w> ; \\ \{ <var:w> = <var:a> \land <var:N0> = <nat:1> \land <var:N1> = <nat:4> * <var:a> \} \\ <var:M> := <var:N1> ; \\ \{ <var:w> = <var:a> \land <var:N0> = <nat:1> \land <var:M> = <nat:4> * <var:a> \} \\ <var:M> := <var:M> + <var:N0> \\ \{ <var:w> = <var:a> \land <var:M> = <nat:4> * <var:a> + <nat:1> \} \end{eqnarray} Considering the preceding argument , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:w> = <var:a> }} <var:N0> := <nat:1> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:w> ; <var:M> := <var:N1> ; <var:M> := <var:M> + <var:N0> {{ <var:M> = <nat:4> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:a> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:a> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:a> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:a> /\ <var:N0> = <nat:1> /\ <var:M> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:a> /\ <var:M> = <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 