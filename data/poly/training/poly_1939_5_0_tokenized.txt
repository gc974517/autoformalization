\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:A> ; <var:y> := <var:I1> ; <var:y> := <var:y> + <var:I0> \end{verbatim} Assume it to hold that $ <var:A> = <var:S> $ assuming some positive integer coefficients $ <var:S> $ prior to evaluating our series of commands then we see $ <var:y> = <nat:2> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:A> = <var:S> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:A> = <var:S> \land <var:I0> = <nat:3> \} \\ <var:I1> := <nat:2> ; \\ \{ <var:A> = <var:S> \land <var:I0> = <nat:3> \land <var:I1> = <nat:2> \} \\ <var:I1> := <var:I1> * <var:A> ; \\ \{ <var:A> = <var:S> \land <var:I0> = <nat:3> \land <var:I1> = <nat:2> \times <var:S> \} \\ <var:y> := <var:I1> ; \\ \{ <var:A> = <var:S> \land <var:I0> = <nat:3> \land <var:y> = <nat:2> \times <var:S> \} \\ <var:y> := <var:y> + <var:I0> \\ \{ <var:A> = <var:S> \land <var:y> = <nat:2> \times <var:S> + <nat:3> \} \end{eqnarray} As a consequence , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <var:I0> := <nat:3> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:A> ; <var:y> := <var:I1> ; <var:y> := <var:y> + <var:I0> {{ <var:y> = <nat:2> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:I0> = <nat:3> /\ <var:y> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:y> = <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 