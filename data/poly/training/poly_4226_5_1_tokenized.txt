\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:e1> := <var:u> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:3> ; <var:h> := <var:e1> <var:h> := <var:h> + <var:e0> \end{verbatim} Given , for positive integer coefficients $ <var:o> $ , that we have $ <var:u> = <var:o> $ ahead of interpreting our set of instructions , it follows that we see $ <var:h> = <nat:3> \cdot <var:o> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:u> = <var:o> \} \\ <var:e1> := <var:u> ; \\ \{ <var:u> = <var:o> \land <var:e1> = <var:o> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:u> = <var:o> \land <var:e1> = <var:o> \land <var:e0> = <nat:3> \} \\ <var:e1> := <var:e1> * <nat:3> ; \\ \{ <var:u> = <var:o> \land <var:e1> = <nat:3> \times <var:o> \land <var:e0> = <nat:3> \} \\ <var:h> := <var:e1> \\ \{ <var:u> = <var:o> \land <var:e0> = <nat:3> \land <var:h> = <nat:3> \times <var:o> \} \\ <var:h> := <var:h> + <var:e0> \\ \{ <var:u> = <var:o> \land <var:h> = <nat:3> \times <var:o> + <nat:3> \} \end{eqnarray} As a consequence , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:u> = <var:o> }} <var:e1> := <var:u> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:3> ; <var:h> := <var:e1> <var:h> := <var:h> + <var:e0> {{ <var:h> = <nat:3> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:e1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:e1> = <var:o> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:e1> = <nat:3> * <var:o> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:e0> = <nat:3> /\ <var:h> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:h> = <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 