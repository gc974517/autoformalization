\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} : \begin{verbatim} <var:R1> := <var:f> ; <var:R2> := <var:R1> * <var:f> ; <var:R3> := <var:R2> * <var:f> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:9> ; <var:e> := <var:R3> <var:e> := <var:e> + <var:R2> <var:e> := <var:e> + <var:R1> <var:e> := <var:e> + <var:R0> \end{verbatim} Assume that we have $ <var:f> = <var:Q> $ for every integers $ <var:Q> $ before the execution of our set of commands , it must be that $ <var:e> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:4> $ when series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be demonstrated with this decorated set of instructions . \begin{eqnarray} \{ <var:f> = <var:Q> \} \\ <var:R1> := <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <var:Q> \} \\ <var:R2> := <var:R1> * <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <var:Q> \land <var:R2> = <var:Q> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:f> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <var:Q> \land <var:R2> = <var:Q> ^ <nat:2> \land <var:R3> = <var:Q> ^ <nat:3> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <var:Q> \land <var:R2> = <var:Q> ^ <nat:2> \land <var:R3> = <var:Q> ^ <nat:3> \land <var:R0> = <nat:4> \} \\ <var:R1> := <var:R1> * <nat:1> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <nat:1> \times <var:Q> \land <var:R2> = <var:Q> ^ <nat:2> \land <var:R3> = <var:Q> ^ <nat:3> \land <var:R0> = <nat:4> \} \\ <var:R2> := <var:R2> * <nat:7> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <nat:1> \times <var:Q> \land <var:R2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:R3> = <var:Q> ^ <nat:3> \land <var:R0> = <nat:4> \} \\ <var:R3> := <var:R3> * <nat:9> ; \\ \{ <var:f> = <var:Q> \land <var:R1> = <nat:1> \times <var:Q> \land <var:R2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:R3> = <nat:9> \times <var:Q> ^ <nat:3> \land <var:R0> = <nat:4> \} \\ <var:e> := <var:R3> \\ \{ <var:f> = <var:Q> \land <var:R1> = <nat:1> \times <var:Q> \land <var:R2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:e> = <nat:9> \times <var:Q> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:R2> \\ \{ <var:f> = <var:Q> \land <var:R1> = <nat:1> \times <var:Q> \land <var:R0> = <nat:4> \land <var:e> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:R1> \\ \{ <var:f> = <var:Q> \land <var:R0> = <nat:4> \land <var:e> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> \} \\ <var:e> := <var:e> + <var:R0> \\ \{ <var:f> = <var:Q> \land <var:e> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:4> \} \end{eqnarray} Using usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:f> = <var:Q> }} <var:R1> := <var:f> ; <var:R2> := <var:R1> * <var:f> ; <var:R3> := <var:R2> * <var:f> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:1> ; <var:R2> := <var:R2> * <nat:7> ; <var:R3> := <var:R3> * <nat:9> ; <var:e> := <var:R3> <var:e> := <var:e> + <var:R2> <var:e> := <var:e> + <var:R1> <var:e> := <var:e> + <var:R0> {{ <var:e> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <var:Q> /\ <var:R2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <var:Q> /\ <var:R2> = <var:Q> ^ <nat:2> /\ <var:R3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <var:Q> /\ <var:R2> = <var:Q> ^ <nat:2> /\ <var:R3> = <var:Q> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R2> = <var:Q> ^ <nat:2> /\ <var:R3> = <var:Q> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:R3> = <var:Q> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:R3> = <nat:9> * <var:Q> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:e> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R1> = <nat:1> * <var:Q> /\ <var:R0> = <nat:4> /\ <var:e> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:R0> = <nat:4> /\ <var:e> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Q> /\ <var:e> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 