\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:9> ; <var:B> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Allow --- for any $ <var:U> \in \mathbb{Z}^+ $ --- $ <var:s> = <var:U> $ before evaluating our set of instructions it holds that $ <var:B> = <nat:9> $ once series of instructions has finished . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:s> = <var:U> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:s> = <var:U> \land <var:E0> = <nat:9> \} \\ <var:B> := <var:E0> \\ \{ <var:s> = <var:U> \land <var:B> = <nat:9> \} \end{eqnarray} Given the preceding argument , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:B> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:s> = <var:U> }} <def:poly> {{ <var:B> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:U> /\ <var:B> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 