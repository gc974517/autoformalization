\begin{document} \begin{theorem} Consider a program in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:3> ; <var:Q> := <var:E0> \end{verbatim} Assuming --- given some positive numbers $ <var:a> $ --- $ <var:t> = <var:a> $ prior to the execution of the segment of code , it must be that we see $ <var:Q> = <nat:3> $ when program has executed . \end{theorem} \begin{proof} The method of proof for the set of commands can be given with standard Hoare logic . Taking a look at the subsequent bits of codeseen in the series of instructions , \begin{eqnarray} \{ <var:t> = <var:a> \} \, <var:E0> := <nat:3> \, \{ <var:t> = <var:a> \land <var:E0> = <nat:3> \} \\ \{ <var:t> = <var:a> \land <var:E0> = <nat:3> \} \, <var:Q> := <var:E0\, \{ <var:t> = <var:a> \land <var:Q> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:t> = <var:a> }} <var:E0> := <nat:3> ; <var:Q> := <var:E0> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 