\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:8> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:z> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:z> ; <var:p2> := <var:p2> * <var:z> ; <var:H> := <var:p2> ; <var:H> := <var:H> + <var:p1> ; <var:H> := <var:H> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:z> = <var:B> $ ahead of interpreting this program , it holds that we see $ <var:H> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:B> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \} \\ <var:p1> := <nat:7> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \} \end{eqnarray} Allowing evaluating the series of instructions gives us : \begin{eqnarray} <var:p1> := <var:p1> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \cdot <var:B> \} \\ <var:p2> := <nat:4> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \cdot <var:B> \land <var:p2> = <nat:4> \} \\ <var:p2> := <var:p2> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \cdot <var:B> \land <var:p2> = <nat:4> \cdot <var:B> \} \\ <var:p2> := <var:p2> * <var:z> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \cdot <var:B> \land <var:p2> = <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:H> := <var:p2> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:p1> = <nat:7> \cdot <var:B> \land <var:H> = <nat:4> \cdot <var:B> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:p1> ; \\ \{ <var:z> = <var:B> \land <var:p0> = <nat:8> \land <var:H> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} \\ <var:H> := <var:H> + <var:p0> \\ \{ <var:z> = <var:B> \land <var:H> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:8> ; <var:p1> := <nat:7> ; <var:p1> := <var:p1> * <var:z> ; <var:p2> := <nat:4> ; <var:p2> := <var:p2> * <var:z> ; <var:p2> := <var:p2> * <var:z> ; <var:H> := <var:p2> ; <var:H> := <var:H> + <var:p1> ; <var:H> := <var:H> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:z> = <var:B> }} <def:poly> {{ <var:H> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> * <var:B> /\ <var:p2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> * <var:B> /\ <var:p2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> * <var:B> /\ <var:p2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:7> * <var:B> /\ <var:H> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:p0> = <nat:8> /\ <var:H> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:B> /\ <var:H> = <nat:4> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 