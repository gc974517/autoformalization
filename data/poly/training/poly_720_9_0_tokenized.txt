\begin{document} \begin{theorem} Consider a set of commands as follows \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:u> ; <var:s2> := <nat:9> ; <var:s2> := <var:s2> * <var:u> ; <var:s2> := <var:s2> * <var:u> ; <var:b> := <var:s2> ; <var:b> := <var:b> + <var:s1> ; <var:b> := <var:b> + <var:s0> \end{verbatim} Allowing --- taking $ <var:p> $ --- $ <var:u> = <var:p> $ prior to interpreting our list of instructions , it follows that we see $ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:p> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \} \\ <var:s1> := <nat:7> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \} \\ <var:s1> := <var:s1> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \cdot <var:p> \} \\ <var:s2> := <nat:9> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \cdot <var:p> \land <var:s2> = <nat:9> \} \\ <var:s2> := <var:s2> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \cdot <var:p> \land <var:s2> = <nat:9> \cdot <var:p> \} \\ <var:s2> := <var:s2> * <var:u> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \cdot <var:p> \land <var:s2> = <nat:9> \cdot <var:p> ^ <nat:2> \} \\ <var:b> := <var:s2> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:s1> = <nat:7> \cdot <var:p> \land <var:b> = <nat:9> \cdot <var:p> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:s1> ; \\ \{ <var:u> = <var:p> \land <var:s0> = <nat:5> \land <var:b> = <nat:9> \cdot <var:p> ^ <nat:2> + <nat:7> \cdot <var:p> \} \\ <var:b> := <var:b> + <var:s0> \\ \{ <var:u> = <var:p> \land <var:b> = <nat:9> \cdot <var:p> ^ <nat:2> + <nat:7> \cdot <var:p> + <nat:5> \} \end{eqnarray} Utilizing typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:u> = <var:p> }} <var:s0> := <nat:5> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:u> ; <var:s2> := <nat:9> ; <var:s2> := <var:s2> * <var:u> ; <var:s2> := <var:s2> * <var:u> ; <var:b> := <var:s2> ; <var:b> := <var:b> + <var:s1> ; <var:b> := <var:b> + <var:s0> {{ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> * <var:p> /\ <var:s2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> * <var:p> /\ <var:s2> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> * <var:p> /\ <var:s2> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:7> * <var:p> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:s0> = <nat:5> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:b> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 