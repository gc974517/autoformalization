\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:Y1> := <var:B> ; <var:Y2> := <var:Y1> * <var:B> ; <var:Y3> := <var:Y2> * <var:B> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:D> := <var:Y3> <var:D> := <var:D> + <var:Y2> <var:D> := <var:D> + <var:Y1> <var:D> := <var:D> + <var:Y0> \end{verbatim} Allowing for natural numbers $ <var:V> $ it to hold that $ <var:B> = <var:V> $ before the evaluation of this segment of code , then $ <var:D> = <nat:8> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be done with usual Hoare reasoning . Moving on to the next step , we have \begin{eqnarray} \{ <var:B> = <var:V> \} \, <var:Y1> := <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \, <var:Y2> := <var:Y1> * <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \} \, <var:Y3> := <var:Y2> * <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \land <var:Y3> = <var:V> ^ <nat:3> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \land <var:Y3> = <var:V> ^ <nat:3> \} \, <var:Y0> := <nat:1> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \land <var:Y3> = <var:V> ^ <nat:3> \land <var:Y0> = <nat:1> \} \end{eqnarray} Looking at the subsequent piece of code contained in the program , we have \begin{eqnarray} \{ <var:B> = <var:V> \} \, <var:Y1> := <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \end{eqnarray} This is known to be sound with the variable binding law defined in typical Hoare techniques . Following , \begin{eqnarray} \{ <var:B> = <var:V> \} \, <var:Y1> := <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \, <var:Y2> := <var:Y1> * <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \} \end{eqnarray} This is guaranteed by the assignment law in typical Hoare reasoning . Taking another step toward the following steps seen in our series of instructions , we see \begin{eqnarray} \{ <var:B> = <var:V> \} \, <var:Y1> := <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \, <var:Y2> := <var:Y1> * <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \} \end{eqnarray} Advancing to the next statements contained in the series of instructions , we have \begin{eqnarray} \{ <var:B> = <var:V> \} \, <var:Y1> := <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \\ \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \} \, <var:Y2> := <var:Y1> * <var:B> \, \{ <var:B> = <var:V> \land <var:Y1> = <var:V> \land <var:Y2> = <var:V> ^ <nat:2> \} \end{eqnarray} This is rigorously given by the rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:B> = <var:V> }} <var:Y1> := <var:B> ; <var:Y2> := <var:Y1> * <var:B> ; <var:Y3> := <var:Y2> * <var:B> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:4> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:D> := <var:Y3> <var:D> := <var:D> + <var:Y2> <var:D> := <var:D> + <var:Y1> <var:D> := <var:D> + <var:Y0> {{ <var:D> = <nat:8> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <var:V> /\ <var:Y2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <var:V> /\ <var:Y2> = <var:V> ^ <nat:2> /\ <var:Y3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <var:V> /\ <var:Y2> = <var:V> ^ <nat:2> /\ <var:Y3> = <var:V> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <nat:7> * <var:V> /\ <var:Y2> = <var:V> ^ <nat:2> /\ <var:Y3> = <var:V> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <nat:7> * <var:V> /\ <var:Y2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:Y3> = <var:V> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <nat:7> * <var:V> /\ <var:Y2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:Y3> = <nat:8> * <var:V> ^ <nat:3> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <nat:7> * <var:V> /\ <var:Y2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:Y0> = <nat:1> /\ <var:D> = <nat:8> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y1> = <nat:7> * <var:V> /\ <var:Y0> = <nat:1> /\ <var:D> = <nat:8> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:Y0> = <nat:1> /\ <var:D> = <nat:8> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:D> = <nat:8> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 