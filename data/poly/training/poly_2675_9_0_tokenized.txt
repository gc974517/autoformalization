\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:Z> ; <var:M2> := <nat:7> ; <var:M2> := <var:M2> * <var:Z> ; <var:M2> := <var:M2> * <var:Z> ; <var:O> := <var:M2> ; <var:O> := <var:O> + <var:M1> ; <var:O> := <var:O> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Z> = <var:J> $ prior to the evaluation of this series of commands , it follows that we have $ <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the code is done through Hoare reasoning . Looking at the subsequent bit of code contained in the set of instructions , we have the binding command defining $ <nat:1> $ to $ <var:M0>$ . This moves $ \{ <var:Z> = <var:J> \} $ to $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \} $ . This is known to be sound with the assignment inference rule found in standard Hoare logic . Advancing to the next step , the environment update code binding $ <nat:3> $ to $ <var:M1>$ . This forwards $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \} $ toward the condition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \} $ . Going forward , we see the binding code \verb | <var:M1> := <var:M1> * <var:Z> ; | . This command moves the condition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \} $ as $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \} $ . Next , the variable assignmet statement letting $ <nat:7> $ to $ <var:M2>$ . This code takes the precondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \} $ toward $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> \} $ . This is given by the assignment scheme in Hoare logic . Moving forward to the next step , we have the line giving $ <var:M2> * <var:Z> $ toward $ <var:M2>$ . This line forwards the condition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> \} $ to the postcondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> * <var:J> \} $ . This is sound using the assignment law from usual Hoare techniques . Moving forward to the subsequent statement found in the series of commands , we see the assignment code \verb | <var:M2> := <var:M2> * <var:Z> ; | . This command advances the condition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> * <var:J> \} $ toward $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> * <var:J> ^ <nat:2> \} $ . Considering the next piece of code seen in the set of commands , the assignment line \verb | <var:O> := <var:M2> ; | . This command transfers the precondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:M2> = <nat:7> * <var:J> ^ <nat:2> \} $ into the condition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:O> = <nat:7> * <var:J> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule defined in Hoare techniques . Considering the following piece of code seen in the series of commands , the line \verb | <var:O> := <var:O> + <var:M1> ; | . This code moves the precondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> * <var:J> \land <var:O> = <nat:7> * <var:J> ^ <nat:2> \} $ to the postcondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> \} $ . Looking at the subsequent statement in our series of commands , the variable binding code \verb | <var:O> := <var:O> + <var:M0> | . This statement advances the precondition $ \{ <var:Z> = <var:J> \land <var:M0> = <nat:1> \land <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> \} $ to the postcondition $ \{ <var:Z> = <var:J> \land <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> \} $ . This is shown to be logically sound using the assignment scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:1> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:Z> ; <var:M2> := <nat:7> ; <var:M2> := <var:M2> * <var:Z> ; <var:M2> := <var:M2> * <var:Z> ; <var:O> := <var:M2> ; <var:O> := <var:O> + <var:M1> ; <var:O> := <var:O> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <def:poly> {{ <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:J> /\ <var:M2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:J> /\ <var:M2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:J> /\ <var:M2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:J> /\ <var:O> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:M0> = <nat:1> /\ <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O> = <nat:7> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 