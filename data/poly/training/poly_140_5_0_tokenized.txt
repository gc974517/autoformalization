\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:8> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:L> ; <var:G> := <var:v1> ; <var:G> := <var:G> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:L> = <var:Z> $ , for any natural coefficients $ <var:Z> $ , prior to running this series of commands , it holds that we see $ <var:G> = <nat:5> \times <var:Z> + <nat:8> $ after code has finished . \end{theorem} \begin{proof} Applying usual Hoare reasoning produces : \begin{eqnarray} \{ <var:L> = <var:Z> \} \\ <var:v0> := <nat:8> ; \\ \{ <var:L> = <var:Z> \land <var:v0> = <nat:8> \} \\ <var:v1> := <nat:5> ; \\ \{ <var:L> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> \} \\ <var:v1> := <var:v1> * <var:L> ; \\ \{ <var:L> = <var:Z> \land <var:v0> = <nat:8> \land <var:v1> = <nat:5> * <var:Z> \} \\ <var:G> := <var:v1> ; \\ \{ <var:L> = <var:Z> \land <var:v0> = <nat:8> \land <var:G> = <nat:5> * <var:Z> \} \\ <var:G> := <var:G> + <var:v0> \\ \{ <var:L> = <var:Z> \land <var:G> = <nat:5> * <var:Z> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:8> ; <var:v1> := <nat:5> ; <var:v1> := <var:v1> * <var:L> ; <var:G> := <var:v1> ; <var:G> := <var:G> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:L> = <var:Z> }} <def:poly> {{ <var:G> = <nat:5> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:v0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:v1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:v0> = <nat:8> /\ <var:G> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:G> = <nat:5> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 