\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:N> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:9> ; <var:C> := <var:h1> <var:C> := <var:C> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow , letting positive integers $ <var:O> $ , $ <var:N> = <var:O> $ prior to evaluating our set of commands , then we have $ <var:C> = <nat:9> \times <var:O> + <nat:9> $ after series of commands terminates . \end{theorem} \begin{proof} Arguing the correctness of this code can be shown through usual Hoare techniques . Keeping momentum , the environment update command letting $ <var:N> $ toward $ <var:h1>$ . This code transfers the condition $ \{ <var:N> = <var:O> \} $ into the postcondition $ \{ <var:N> = <var:O> \land <var:h1> = <var:O> \} $ . Immediately following , the variable assignmet statement \verb | <var:h0> := <nat:9> ; | . This moves the condition $ \{ <var:N> = <var:O> \land <var:h1> = <var:O> \} $ as the postcondition $ \{ <var:N> = <var:O> \land <var:h1> = <var:O> \land <var:h0> = <nat:9> \} $ . Looking at the upcoming line of code contained in our list of instructions , we have the binding code \verb | <var:h1> := <var:h1> * <nat:9> ; | . This takes the precondition $ \{ <var:N> = <var:O> \land <var:h1> = <var:O> \land <var:h0> = <nat:9> \} $ to $ \{ <var:N> = <var:O> \land <var:h1> = <nat:9> \cdot <var:O> \land <var:h0> = <nat:9> \} $ . Looking at the next piece of code in our code segment , the assignment command defining $ <var:h1$ into $ <var:C>$ . This line forwards $ \{ <var:N> = <var:O> \land <var:h1> = <nat:9> \cdot <var:O> \land <var:h0> = <nat:9> \} $ into the condition $ \{ <var:N> = <var:O> \land <var:h0> = <nat:9> \land <var:C> = <nat:9> \cdot <var:O> \} $ . Observing the next bit of code in our program , the code defining $ <var:C> + <var:h0$ to $ <var:C>$ . This code redefines the condition $ \{ <var:N> = <var:O> \land <var:h0> = <nat:9> \land <var:C> = <nat:9> \cdot <var:O> \} $ to the postcondition $ \{ <var:N> = <var:O> \land <var:C> = <nat:9> \cdot <var:O> + <nat:9> \} $ . This is known to be sound by the assignment inference rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:N> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:9> ; <var:C> := <var:h1> <var:C> := <var:C> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:N> = <var:O> }} <def:poly> {{ <var:C> = <nat:9> * <var:O> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:h1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:h1> = <var:O> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:h1> = <nat:9> * <var:O> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:h0> = <nat:9> /\ <var:C> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:C> = <nat:9> * <var:O> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 