\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:6> ; <var:S> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assuming it to be that $ <var:z> = <var:v> $ ahead of the evaluation of this segment of code , it must be that we have $ <var:S> = <nat:6> $ . \end{theorem} \begin{proof} Note that this decorated program . \begin{eqnarray} \{ <var:z> = <var:v> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:z> = <var:v> \land <var:f0> = <nat:6> \} \\ <var:S> := <var:f0> \\ \{ <var:z> = <var:v> \land <var:S> = <nat:6> \} \end{eqnarray} The application of Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:S> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:z> = <var:v> }} <def:poly> {{ <var:S> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:S> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 