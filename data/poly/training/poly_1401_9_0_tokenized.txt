\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:5> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:g> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:g> ; <var:B2> := <var:B2> * <var:g> ; <var:U> := <var:B2> ; <var:U> := <var:U> + <var:B1> ; <var:U> := <var:U> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:g> = <var:j> $ for some natural coefficients $ <var:j> $ prior to running our list of instructions , it follows that $ <var:U> = <nat:8> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> + <nat:5> $ when list of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is clear through typical Hoare logic . Jumping to the next line of code found in our set of instructions , we see the code \verb | <var:B0> := <nat:5> ; | . This transfers the precondition $ \{ <var:g> = <var:j> \} $ as the condition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \} $ . Moving on to the next step , the variable binding command giving $ <nat:6> $ as $ <var:B1>$ . This command forwards the condition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \} $ into the postcondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \} $ . Moving forward , we see the variable binding statement letting $ <var:B1> * <var:g> $ into $ <var:B1>$ . This statement takes $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \} $ into the condition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \} $ . Going to the next step , we see the variable update line \verb | <var:B2> := <nat:8> ; | . This transfers the precondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \} $ to $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \} $ . This is given by the assignment law in standard Hoare techniques . Observing the following line found in the program , the binding command assigning $ <var:B2> * <var:g> $ as $ <var:B2>$ . This takes the precondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \} $ to the postcondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \times <var:j> \} $ . This is shown using the assignment inference rule from standard Hoare techniques . Moving on to the next step , the assignment code \verb | <var:B2> := <var:B2> * <var:g> ; | . This statement transfers the precondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \times <var:j> \} $ as $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \times <var:j> ^ <nat:2> \} $ . This is sound with the assignment scheme given by standard Hoare reasoning . Advancing to the next step , the binding line \verb | <var:U> := <var:B2> ; | . This line takes the condition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:B2> = <nat:8> \times <var:j> ^ <nat:2> \} $ as $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:U> = <nat:8> \times <var:j> ^ <nat:2> \} $ . This is known to be sound with the assignment scheme given by usual Hoare logic . Advancing to the subsequent step contained in our code segment , we see the assignment line binding $ <var:U> + <var:B1> $ as $ <var:U>$ . This advances the condition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:j> \land <var:U> = <nat:8> \times <var:j> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:U> = <nat:8> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> \} $ . This is shown to be logically sound by the assignment law defined in Hoare logic . Paying attention to the subsequent line found in our set of instructions , we see the variable update command \verb | <var:U> := <var:U> + <var:B0> | . This forwards the precondition $ \{ <var:g> = <var:j> \land <var:B0> = <nat:5> \land <var:U> = <nat:8> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> \} $ toward the postcondition $ \{ <var:g> = <var:j> \land <var:U> = <nat:8> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:5> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:g> ; <var:B2> := <nat:8> ; <var:B2> := <var:B2> * <var:g> ; <var:B2> := <var:B2> * <var:g> ; <var:U> := <var:B2> ; <var:U> := <var:U> + <var:B1> ; <var:U> := <var:U> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <def:poly> {{ <var:U> = <nat:8> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:j> /\ <var:B2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:j> /\ <var:B2> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:j> /\ <var:B2> = <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:j> /\ <var:U> = <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:B0> = <nat:5> /\ <var:U> = <nat:8> * <var:j> ^ <nat:2> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:U> = <nat:8> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 