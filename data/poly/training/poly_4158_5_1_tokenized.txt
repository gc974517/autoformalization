\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:K> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:5> ; <var:o> := <var:D1> <var:o> := <var:o> + <var:D0> \end{verbatim} Assuming it to be that $ <var:K> = <var:c> $ , taking positive integers $ <var:c> $ , prior to interpreting our segment of code it follows that we see $ <var:o> = <nat:5> \times <var:c> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be done through standard Hoare reasoning . Next , \[ \begin{tabular} {rcl} \{ <var:K> = <var:c> \} & <var:D1> := <var:K> & \{ <var:K> = <var:c> \land <var:D1> = <var:c> \} \\ \{ <var:K> = <var:c> \land <var:D1> = <var:c> \} & <var:D0> := <nat:7> & \{ <var:K> = <var:c> \land <var:D1> = <var:c> \land <var:D0> = <nat:7> \} \\ \{ <var:K> = <var:c> \land <var:D1> = <var:c> \land <var:D0> = <nat:7> \} & <var:D1> := <var:D1> * <nat:5> & \{ <var:K> = <var:c> \land <var:D1> = <nat:5> \times <var:c> \land <var:D0> = <nat:7> \} \end{tabular} Taking another step toward the upcoming bits of codefound in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:c> \} & <var:D1> := <var:K> & \{ <var:K> = <var:c> \land <var:D1> = <var:c> \} \\ \{ <var:K> = <var:c> \land <var:D1> = <var:c> \} & <var:D0> := <nat:7> & \{ <var:K> = <var:c> \land <var:D1> = <var:c> \land <var:D0> = <nat:7> \} \end{tabular} This is shown to be logically sound with the rule obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:K> = <var:c> }} <var:D1> := <var:K> ; <var:D0> := <nat:7> ; <var:D1> := <var:D1> * <nat:5> ; <var:o> := <var:D1> <var:o> := <var:o> + <var:D0> {{ <var:o> = <nat:5> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:D1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:D1> = <var:c> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:D1> = <nat:5> * <var:c> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:D0> = <nat:7> /\ <var:o> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:c> /\ <var:o> = <nat:5> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 