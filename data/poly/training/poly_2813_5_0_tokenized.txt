\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:J0> := <nat:2> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:t> ; <var:v> := <var:J1> ; <var:v> := <var:v> + <var:J0> \end{verbatim} Allowing it to hold that $ <var:t> = <var:s> $ before the execution of the list of instructions it follows that we have $ <var:v> = <nat:2> \cdot <var:s> + <nat:2> $ after segment of code has finished executing . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:t> = <var:s> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:t> = <var:s> \land <var:J0> = <nat:2> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:t> = <var:s> \land <var:J0> = <nat:2> \land <var:J1> = <nat:2> \} \\ <var:J1> := <var:J1> * <var:t> ; \\ \{ <var:t> = <var:s> \land <var:J0> = <nat:2> \land <var:J1> = <nat:2> \cdot <var:s> \} \\ <var:v> := <var:J1> ; \\ \{ <var:t> = <var:s> \land <var:J0> = <nat:2> \land <var:v> = <nat:2> \cdot <var:s> \} \\ <var:v> := <var:v> + <var:J0> \\ \{ <var:t> = <var:s> \land <var:v> = <nat:2> \cdot <var:s> + <nat:2> \} \end{eqnarray} Allowing executing the set of instructions gives : \begin{eqnarray} \end{eqnarray} Considering the above , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <var:J0> := <nat:2> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:t> ; <var:v> := <var:J1> ; <var:v> := <var:v> + <var:J0> {{ <var:v> = <nat:2> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:J0> = <nat:2> /\ <var:v> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:v> = <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 