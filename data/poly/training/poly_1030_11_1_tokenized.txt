\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:e> ; <var:E2> := <var:E1> * <var:e> ; <var:E3> := <var:E2> * <var:e> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:8> ; <var:E3> := <var:E3> * <nat:3> ; <var:h> := <var:E3> <var:h> := <var:h> + <var:E2> <var:h> := <var:h> + <var:E1> <var:h> := <var:h> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:e> = <var:Q> $ ( given all positive integer coefficients $ <var:Q> $ ) ahead of evaluating our segment of code , it follows that we see $ <var:h> = <nat:3> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:6> $ once list of commands has executed . \end{theorem} \begin{proof} Applying standard Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:Q> \} \\ <var:E1> := <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <var:Q> \} \\ <var:E2> := <var:E1> * <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:e> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \} \\ <var:E0> := <nat:6> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <nat:4> \cdot <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E2> := <var:E2> * <nat:8> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <nat:4> \cdot <var:Q> \land <var:E2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:E3> := <var:E3> * <nat:3> ; \\ \{ <var:e> = <var:Q> \land <var:E1> = <nat:4> \cdot <var:Q> \land <var:E2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:E3> = <nat:3> \cdot <var:Q> ^ <nat:3> \land <var:E0> = <nat:6> \} \\ <var:h> := <var:E3> \\ \{ <var:e> = <var:Q> \land <var:E1> = <nat:4> \cdot <var:Q> \land <var:E2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:E0> = <nat:6> \land <var:h> = <nat:3> \cdot <var:Q> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:E2> \\ \{ <var:e> = <var:Q> \land <var:E1> = <nat:4> \cdot <var:Q> \land <var:E0> = <nat:6> \land <var:h> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:E1> \\ \{ <var:e> = <var:Q> \land <var:E0> = <nat:6> \land <var:h> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> \} \\ <var:h> := <var:h> + <var:E0> \\ \{ <var:e> = <var:Q> \land <var:h> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:6> \} \end{eqnarray} As a result , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:e> ; <var:E2> := <var:E1> * <var:e> ; <var:E3> := <var:E2> * <var:e> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:8> ; <var:E3> := <var:E3> * <nat:3> ; <var:h> := <var:E3> <var:h> := <var:h> + <var:E2> <var:h> := <var:h> + <var:E1> <var:h> := <var:h> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:e> = <var:Q> }} <def:poly> {{ <var:h> = <nat:3> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <nat:4> * <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <nat:4> * <var:Q> /\ <var:E2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <nat:4> * <var:Q> /\ <var:E2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <nat:4> * <var:Q> /\ <var:E2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:E0> = <nat:6> /\ <var:h> = <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E1> = <nat:4> * <var:Q> /\ <var:E0> = <nat:6> /\ <var:h> = <nat:3> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:E0> = <nat:6> /\ <var:h> = <nat:3> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:h> = <nat:3> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 