\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:O> ; <var:h> := <var:c1> ; <var:h> := <var:h> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allowing that we have $ <var:O> = <var:I> $ prior to executing our program , it holds that $ <var:h> = <nat:6> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be done using usual Hoare reasoning . Immediately after , we have \begin{eqnarray} \{ <var:O> = <var:I> \} \, <var:c0> := <nat:2> \, \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \} \\ \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \} \, <var:c1> := <nat:6> \, \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \} \\ \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \} \, <var:c1> := <var:c1> * <var:O> \, \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \times <var:I> \} \\ \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:c1> = <nat:6> \times <var:I> \} \, <var:h> := <var:c1> \, \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:h> = <nat:6> \times <var:I> \} \\ \{ <var:O> = <var:I> \land <var:c0> = <nat:2> \land <var:h> = <nat:6> \times <var:I> \} \, <var:h> := <var:h> + <var:c0\, \{ <var:O> = <var:I> \land <var:h> = <nat:6> \times <var:I> + <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:2> ; <var:c1> := <nat:6> ; <var:c1> := <var:c1> * <var:O> ; <var:h> := <var:c1> ; <var:h> := <var:h> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:O> = <var:I> }} <def:poly> {{ <var:h> = <nat:6> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:c0> = <nat:2> /\ <var:h> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:I> /\ <var:h> = <nat:6> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 