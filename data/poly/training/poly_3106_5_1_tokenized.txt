\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:i> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:1> ; <var:S> := <var:b1> <var:S> := <var:S> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Allow that we have $ <var:i> = <var:w> $ , given $ <var:w> $ , before the execution of this segment of code it holds that $ <var:S> = <nat:1> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:i> = <var:w> \} \\ <var:b1> := <var:i> ; \\ \{ <var:i> = <var:w> \land <var:b1> = <var:w> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:i> = <var:w> \land <var:b1> = <var:w> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:1> ; \\ \{ <var:i> = <var:w> \land <var:b1> = <nat:1> \times <var:w> \land <var:b0> = <nat:3> \} \\ <var:S> := <var:b1> \\ \{ <var:i> = <var:w> \land <var:b0> = <nat:3> \land <var:S> = <nat:1> \times <var:w> \} \\ <var:S> := <var:S> + <var:b0> \\ \{ <var:i> = <var:w> \land <var:S> = <nat:1> \times <var:w> + <nat:3> \} \end{eqnarray} Given the preceding argument , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:i> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:1> ; <var:S> := <var:b1> <var:S> := <var:S> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:i> = <var:w> }} <def:poly> {{ <var:S> = <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:b1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:b1> = <var:w> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:b1> = <nat:1> * <var:w> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:b0> = <nat:3> /\ <var:S> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:w> /\ <var:S> = <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 