\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:5> ; <var:U> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:w> = <var:z> $ ahead of the execution of our list of commands then we see $ <var:U> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:w> = <var:z> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:w> = <var:z> \land <var:I0> = <nat:5> \} \\ <var:U> := <var:I0> \\ \{ <var:w> = <var:z> \land <var:U> = <nat:5> \} \end{eqnarray} As a result , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:5> ; <var:U> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <def:poly> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 