\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:7> ; <var:w> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Assuming assuming some whole numbers $ <var:Q> $ it to hold that $ <var:z> = <var:Q> $ prior to the execution of our series of instructions it holds that we see $ <var:w> = <nat:7> $ after code has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:z> = <var:Q> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:z> = <var:Q> \land <var:h0> = <nat:7> \} \\ <var:w> := <var:h0> \\ \{ <var:z> = <var:Q> \land <var:w> = <nat:7> \} \end{eqnarray} Considering the above , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:w> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:z> = <var:Q> }} <def:poly> {{ <var:w> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:Q> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Q> /\ <var:w> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 