\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:7> ; <var:l> := <var:D0> \end{verbatim} Assuming that we have $ <var:C> = <var:U> $ before executing the list of instructions , it follows that we see $ <var:l> = <nat:7> $ when series of commands exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives : \begin{eqnarray} \{ <var:C> = <var:U> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:C> = <var:U> \land <var:D0> = <nat:7> \} \\ <var:l> := <var:D0> \\ \{ <var:C> = <var:U> \land <var:l> = <nat:7> \} \end{eqnarray} Thusly , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:C> = <var:U> }} <var:D0> := <nat:7> ; <var:l> := <var:D0> {{ <var:l> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:U> /\ <var:l> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 