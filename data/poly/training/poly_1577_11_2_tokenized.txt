\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <nat:2> + <var:J> * <var:H> ; <var:J> := <var:J> * <var:H> ; <var:J> := <nat:2> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:1> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:H> = <var:i> $ given all whole numbers $ <var:i> $ ahead of the evaluation of our code segment it must be that $ <var:J> = <nat:1> \times <var:i> ^ <nat:10> + <nat:2> \times <var:i> ^ <nat:9> + <nat:2> \times <var:i> ^ <nat:7> + <nat:3> \times <var:i> ^ <nat:6> + <nat:3> \times <var:i> ^ <nat:5> + <nat:4> \times <var:i> ^ <nat:4> + <nat:1> \times <var:i> ^ <nat:3> + <nat:4> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:3> $ once series of commands has terminated . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:H> = <var:i> \} \\ <var:J> := <nat:1> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> \} \\ <var:J> := <nat:2> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> + <nat:2> \} \\ <var:J> := <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} \\ <var:J> := <nat:2> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> \} \\ <var:J> := <nat:3> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:3> \} \\ <var:J> := <nat:3> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> \} \\ <var:J> := <nat:4> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:4> \} \\ <var:J> := <nat:1> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} \\ <var:J> := <nat:4> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> \} \\ <var:J> := <nat:4> + <var:J> * <var:H> ; \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} \\ <var:J> := <nat:3> + <var:J> * <var:H> \\ \{ <var:H> = <var:i> \land <var:J> = <nat:1> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:1> ; <var:J> := <nat:2> + <var:J> * <var:H> ; <var:J> := <var:J> * <var:H> ; <var:J> := <nat:2> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:1> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:4> + <var:J> * <var:H> ; <var:J> := <nat:3> + <var:J> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:H> = <var:i> }} <def:poly> {{ <var:J> = <nat:1> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:J> = <nat:1> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 