\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:L0> := <nat:2> ; <var:Z> := <var:L0> \end{verbatim} Assuming for every positive numbers $ <var:w> $ $ <var:J> = <var:w> $ ahead of the evaluation of the set of commands then we have $ <var:Z> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code can be done with standard Hoare techniques . Moving forward , \verb | { <var:J> = <var:w> } <var:L0> := <nat:2> { <var:J> = <var:w> \land <var:L0> = <nat:2> } | and \verb | { <var:J> = <var:w> \land <var:L0> = <nat:2> } <var:Z> := <var:L0{ <var:J> = <var:w> \land <var:Z> = <nat:2> } | . This is given with the variable update inference rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <var:L0> := <nat:2> ; <var:Z> := <var:L0> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 