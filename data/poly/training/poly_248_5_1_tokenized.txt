\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:R> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:J> := <var:r1> <var:J> := <var:J> + <var:r0> \end{verbatim} Allowing that $ <var:R> = <var:l> $ , with some $ <var:l> \in \mathbb{N} $ , prior to executing the set of commands then we have $ <var:J> = <nat:8> * <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare logic yields : \begin{eqnarray} \{ <var:R> = <var:l> \} \\ <var:r1> := <var:R> ; \\ \{ <var:R> = <var:l> \land <var:r1> = <var:l> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:R> = <var:l> \land <var:r1> = <var:l> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:8> ; \\ \{ <var:R> = <var:l> \land <var:r1> = <nat:8> * <var:l> \land <var:r0> = <nat:1> \} \\ <var:J> := <var:r1> \\ \{ <var:R> = <var:l> \land <var:r0> = <nat:1> \land <var:J> = <nat:8> * <var:l> \} \\ <var:J> := <var:J> + <var:r0> \\ \{ <var:R> = <var:l> \land <var:J> = <nat:8> * <var:l> + <nat:1> \} \end{eqnarray} Given the preceding argument , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:R> = <var:l> }} <var:r1> := <var:R> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:J> := <var:r1> <var:J> := <var:J> + <var:r0> {{ <var:J> = <nat:8> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:r1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:r1> = <var:l> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:r1> = <nat:8> * <var:l> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:r0> = <nat:1> /\ <var:J> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:l> /\ <var:J> = <nat:8> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 