\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:1> ; <var:S> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:Z> = <var:N> $ prior to the execution of the program , then we have $ <var:S> = <nat:1> $ when segment of code has finished . \end{theorem} \begin{proof} The argument for our segment of code is done by Hoare logic . After , \verb | { <var:Z> = <var:N> } <var:G0> := <nat:1> { <var:Z> = <var:N> \land <var:G0> = <nat:1> } | . This is known to be sound with the assignment law obtained from Hoare techniques . Focusing on the upcoming command in our list of commands , we have \verb | { <var:Z> = <var:N> } <var:G0> := <nat:1> { <var:Z> = <var:N> \land <var:G0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:S> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <def:poly> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 