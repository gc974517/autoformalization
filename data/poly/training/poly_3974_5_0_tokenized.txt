\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:1> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:R> ; <var:m> := <var:U1> ; <var:m> := <var:m> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Allowing $ <var:R> = <var:s> $ , given some positive integer coefficients $ <var:s> $ , prior to executing our series of instructions , it must be that $ <var:m> = <nat:1> * <var:s> + <nat:1> $ after set of commands executes . \end{theorem} \begin{proof} The proof of this code segment is shown through usual Hoare techniques . Immediately after , we see \begin{verbatim} { <var:R> = <var:s> } <var:U0> := <nat:1> { <var:R> = <var:s> \land <var:U0> = <nat:1> } { <var:R> = <var:s> \land <var:U0> = <nat:1> } <var:U1> := <nat:1> { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:U1> = <nat:1> } { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:U1> = <nat:1> } <var:U1> := <var:U1> * <var:R> { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:U1> = <nat:1> \cdot <var:s> } { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:U1> = <nat:1> \cdot <var:s> } <var:m> := <var:U1> { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:m> = <nat:1> \cdot <var:s> } { <var:R> = <var:s> \land <var:U0> = <nat:1> \land <var:m> = <nat:1> \cdot <var:s> } <var:m> := <var:m> + <var:U0{ <var:R> = <var:s> \land <var:m> = <nat:1> \cdot <var:s> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:1> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:R> ; <var:m> := <var:U1> ; <var:m> := <var:m> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:R> = <var:s> }} <def:poly> {{ <var:m> = <nat:1> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:U0> = <nat:1> /\ <var:U1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:U0> = <nat:1> /\ <var:m> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:s> /\ <var:m> = <nat:1> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 