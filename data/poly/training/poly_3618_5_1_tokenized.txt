\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:E> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:4> ; <var:a> := <var:j1> <var:a> := <var:a> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Allow it to be that $ <var:E> = <var:C> $ prior to interpreting this set of commands it holds that we have $ <var:a> = <nat:4> * <var:C> + <nat:5> $ when set of commands exits . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:E> = <var:C> \} \\ <var:j1> := <var:E> ; \\ \{ <var:E> = <var:C> \land <var:j1> = <var:C> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:E> = <var:C> \land <var:j1> = <var:C> \land <var:j0> = <nat:5> \} \\ <var:j1> := <var:j1> * <nat:4> ; \\ \{ <var:E> = <var:C> \land <var:j1> = <nat:4> \cdot <var:C> \land <var:j0> = <nat:5> \} \\ <var:a> := <var:j1> \\ \{ <var:E> = <var:C> \land <var:j0> = <nat:5> \land <var:a> = <nat:4> \cdot <var:C> \} \\ <var:a> := <var:a> + <var:j0> \\ \{ <var:E> = <var:C> \land <var:a> = <nat:4> \cdot <var:C> + <nat:5> \} \end{eqnarray} Hence , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:E> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:4> ; <var:a> := <var:j1> <var:a> := <var:a> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:E> = <var:C> }} <def:poly> {{ <var:a> = <nat:4> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:j1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:j1> = <var:C> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:j1> = <nat:4> * <var:C> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:j0> = <nat:5> /\ <var:a> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:a> = <nat:4> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 