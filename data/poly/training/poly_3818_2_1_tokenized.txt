\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:7> ; <var:x> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow it to hold that $ <var:g> = <var:c> $ prior to the evaluation of this series of instructions then we have $ <var:x> = <nat:7> $ when code segment is done . \end{theorem} \begin{proof} The flow of logic for the series of commands can be done using usual Hoare logic . Further , we have the environment update statement assigning $ <nat:7> $ to $ <var:R0>$ . This takes $ \{ <var:g> = <var:c> \} $ toward the postcondition $ \{ <var:g> = <var:c> \land <var:R0> = <nat:7> \} $ . Looking at the upcoming bit of code contained in the set of instructions , we see the line \verb | <var:x> := <var:R0> | . This forwards $ \{ <var:g> = <var:c> \land <var:R0> = <nat:7> \} $ toward $ \{ <var:g> = <var:c> \land <var:x> = <nat:7> \} $ . This is given by the assignment inference rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:7> ; <var:x> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:g> = <var:c> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:c> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 