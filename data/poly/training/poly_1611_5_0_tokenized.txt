\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:8> ; <var:C1> := <var:C1> * <var:h> ; <var:w> := <var:C1> ; <var:w> := <var:w> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:h> = <var:J> $ ahead of the evaluation of this list of commands , it must be that $ <var:w> = <nat:8> \cdot <var:J> + <nat:8> $ when set of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:J> \} \\ <var:C0> := <nat:8> ; \\ \{ <var:h> = <var:J> \land <var:C0> = <nat:8> \} \\ <var:C1> := <nat:8> ; \\ \{ <var:h> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:8> \} \\ <var:C1> := <var:C1> * <var:h> ; \\ \{ <var:h> = <var:J> \land <var:C0> = <nat:8> \land <var:C1> = <nat:8> \times <var:J> \} \\ <var:w> := <var:C1> ; \\ \{ <var:h> = <var:J> \land <var:C0> = <nat:8> \land <var:w> = <nat:8> \times <var:J> \} \\ <var:w> := <var:w> + <var:C0> \\ \{ <var:h> = <var:J> \land <var:w> = <nat:8> \times <var:J> + <nat:8> \} \end{eqnarray} Using typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C0> := <nat:8> ; <var:C1> := <nat:8> ; <var:C1> := <var:C1> * <var:h> ; <var:w> := <var:C1> ; <var:w> := <var:w> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:w> = <nat:8> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:C0> = <nat:8> /\ <var:w> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:w> = <nat:8> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 