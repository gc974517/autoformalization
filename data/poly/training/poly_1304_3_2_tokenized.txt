\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:v> ; <var:F> := <nat:1> + <var:F> * <var:v> \end{verbatim} Assume that we have $ <var:v> = <var:u> $ prior to the execution of our segment of code it holds that we see $ <var:F> = <nat:1> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be given with standard Hoare logic . Shifting focus toward the next steps seen in our list of commands , we see \begin{verbatim} { <var:v> = <var:u> } <var:F> := <nat:1> { <var:v> = <var:u> \land <var:F> = <nat:1> } { <var:v> = <var:u> \land <var:F> = <nat:1> } <var:F> := <nat:4> + <var:F> * <var:v> { <var:v> = <var:u> \land <var:F> = <nat:1> \cdot <var:u> + <nat:4> } \end{verbatim} This is rigorously given with the variable update inference rule found in usual Hoare techniques . Looking at the following statement in the program , \begin{verbatim} { <var:v> = <var:u> } <var:F> := <nat:1> { <var:v> = <var:u> \land <var:F> = <nat:1> } \end{verbatim} This is rigorously given through the variable update scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:v> = <var:u> }} <var:F> := <nat:1> ; <var:F> := <nat:4> + <var:F> * <var:v> ; <var:F> := <nat:1> + <var:F> * <var:v> {{ <var:F> = <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:F> = <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 