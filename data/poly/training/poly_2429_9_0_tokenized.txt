\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:6> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:S> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y2> := <var:Y2> * <var:S> ; <var:u> := <var:Y2> ; <var:u> := <var:u> + <var:Y1> ; <var:u> := <var:u> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:S> = <var:B> $ before the execution of this list of instructions , it follows that $ <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:6> $ when series of instructions exits . \end{theorem} \begin{proof} Let the below decorated set of instructions . \begin{eqnarray} \{ <var:S> = <var:B> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <nat:5> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:B> \} \\ <var:Y2> := <nat:3> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:B> \land <var:Y2> = <nat:3> \} \\ <var:Y2> := <var:Y2> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:B> \land <var:Y2> = <nat:3> \cdot <var:B> \} \\ <var:Y2> := <var:Y2> * <var:S> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:B> \land <var:Y2> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:u> := <var:Y2> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:5> \cdot <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:Y1> ; \\ \{ <var:S> = <var:B> \land <var:Y0> = <nat:6> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} \\ <var:u> := <var:u> + <var:Y0> \\ \{ <var:S> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:6> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y0> := <nat:6> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:S> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y2> := <var:Y2> * <var:S> ; <var:u> := <var:Y2> ; <var:u> := <var:u> + <var:Y1> ; <var:u> := <var:u> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:S> = <var:B> }} <def:poly> {{ <var:u> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:B> /\ <var:Y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:B> /\ <var:Y2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:B> /\ <var:Y2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:5> * <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Y0> = <nat:6> /\ <var:u> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 