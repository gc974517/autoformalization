\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:6> ; <var:l> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:Q> = <var:J> $ prior to evaluating this code , it must be that we see $ <var:l> = <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is accomplished using typical Hoare logic . Moving on to the following line found in our list of commands , we have \begin{eqnarray} \{ <var:Q> = <var:J> \} \, <var:N0> := <nat:6> \, \{ <var:Q> = <var:J> \land <var:N0> = <nat:6> \} \end{eqnarray} Going forward , we have \begin{eqnarray} \{ <var:Q> = <var:J> \} \, <var:N0> := <nat:6> \, \{ <var:Q> = <var:J> \land <var:N0> = <nat:6> \} \end{eqnarray} This is ensured using the binding scheme of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:6> ; <var:l> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Q> = <var:J> }} <def:poly> {{ <var:l> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:l> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 