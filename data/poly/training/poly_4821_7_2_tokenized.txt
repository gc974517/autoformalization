\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <nat:2> + <var:Q> * <var:o> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <var:Q> * <var:o> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <nat:2> + <var:Q> * <var:o> \end{verbatim} Allowing that we have $ <var:o> = <var:K> $ ahead of the execution of our segment of code , it holds that we have $ <var:Q> = <nat:3> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:2> $ once list of commands is done executing . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:o> = <var:K> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:o> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> + <nat:4> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:o> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:2> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:o> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:4> \} \\ <var:Q> := <var:Q> * <var:o> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + \} \\ <var:Q> := <nat:4> + <var:Q> * <var:o> ; \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:4> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:o> \\ \{ <var:o> = <var:K> \land <var:Q> = <nat:3> \times <var:K> ^ <nat:6> + <nat:4> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:4> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> + <nat:2> \} \end{eqnarray} As a consequence , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:o> = <var:K> }} <var:Q> := <nat:3> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <nat:2> + <var:Q> * <var:o> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <var:Q> * <var:o> ; <var:Q> := <nat:4> + <var:Q> * <var:o> ; <var:Q> := <nat:2> + <var:Q> * <var:o> {{ <var:Q> = <nat:3> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:K> /\ <var:Q> = <nat:3> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 