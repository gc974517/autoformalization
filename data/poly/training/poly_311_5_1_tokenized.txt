\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:V> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:w> := <var:Y1> <var:w> := <var:w> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allow that we have $ <var:V> = <var:i> $ letting positive integers $ <var:i> $ before the evaluation of the program it must be that we see $ <var:w> = <nat:5> \cdot <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is evident using typical Hoare logic . Keeping momentum , we have \begin{verbatim} { <var:V> = <var:i> } <var:Y1> := <var:V> { <var:V> = <var:i> \land <var:Y1> = <var:i> } { <var:V> = <var:i> \land <var:Y1> = <var:i> } <var:Y0> := <nat:1> { <var:V> = <var:i> \land <var:Y1> = <var:i> \land <var:Y0> = <nat:1> } { <var:V> = <var:i> \land <var:Y1> = <var:i> \land <var:Y0> = <nat:1> } <var:Y1> := <var:Y1> * <nat:5> { <var:V> = <var:i> \land <var:Y1> = <nat:5> \cdot <var:i> \land <var:Y0> = <nat:1> } { <var:V> = <var:i> \land <var:Y1> = <nat:5> \cdot <var:i> \land <var:Y0> = <nat:1> } <var:w> := <var:Y1{ <var:V> = <var:i> \land <var:Y0> = <nat:1> \land <var:w> = <nat:5> \cdot <var:i> } { <var:V> = <var:i> \land <var:Y0> = <nat:1> \land <var:w> = <nat:5> \cdot <var:i> } <var:w> := <var:w> + <var:Y0{ <var:V> = <var:i> \land <var:w> = <nat:5> \cdot <var:i> + <nat:1> } \end{verbatim} This is shown with the scheme given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:V> ; <var:Y0> := <nat:1> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:w> := <var:Y1> <var:w> := <var:w> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <def:poly> {{ <var:w> = <nat:5> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Y1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Y1> = <var:i> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Y1> = <nat:5> * <var:i> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Y0> = <nat:1> /\ <var:w> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:w> = <nat:5> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 