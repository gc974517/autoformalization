\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:6> ; <var:u> := <var:D0> \end{verbatim} Given it to be that $ <var:W> = <var:F> $ before evaluating this list of instructions it follows that we have $ <var:u> = <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code can be given with usual Hoare reasoning . Advancing to the upcoming step contained in the code segment , we have the variable update line yielding $ <nat:6> $ to $ <var:D0>$ . This redefines $ \{ <var:W> = <var:F> \} $ to the postcondition $ \{ <var:W> = <var:F> \land <var:D0> = <nat:6> \} $ . Moving on , the variable assignmet statement defining $ <var:D0$ toward $ <var:u>$ . This forwards the condition $ \{ <var:W> = <var:F> \land <var:D0> = <nat:6> \} $ to the condition $ \{ <var:W> = <var:F> \land <var:u> = <nat:6> \} $ . This is guaranteed through the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:W> = <var:F> }} <var:D0> := <nat:6> ; <var:u> := <var:D0> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 