\begin{document} \begin{theorem} We define the following program as \begin{verbatim} <var:O0> := <nat:4> ; <var:R> := <var:O0> \end{verbatim} Allow that $ <var:G> = <var:P> $ prior to running the set of instructions , then $ <var:R> = <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:G> = <var:P> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:G> = <var:P> \land <var:O0> = <nat:4> \} \\ <var:R> := <var:O0> \\ \{ <var:G> = <var:P> \land <var:R> = <nat:4> \} \end{eqnarray} Thusly , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:G> = <var:P> }} <var:O0> := <nat:4> ; <var:R> := <var:O0> {{ <var:R> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:P> /\ <var:R> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 