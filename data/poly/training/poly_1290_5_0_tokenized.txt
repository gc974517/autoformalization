\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:M> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given positive integers $ <var:G> $ ) that $ <var:M> = <var:G> $ before evaluating our set of instructions it must be that we have $ <var:l> = <nat:3> * <var:G> + <nat:4> $ once segment of code has executed . \end{theorem} \begin{proof} Using standard Hoare reasoning yields : \begin{eqnarray} \{ <var:M> = <var:G> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:M> = <var:G> \land <var:J0> = <nat:4> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:M> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:M> ; \\ \{ <var:M> = <var:G> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \cdot <var:G> \} \\ <var:l> := <var:J1> ; \\ \{ <var:M> = <var:G> \land <var:J0> = <nat:4> \land <var:l> = <nat:3> \cdot <var:G> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:M> = <var:G> \land <var:l> = <nat:3> \cdot <var:G> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:4> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:M> ; <var:l> := <var:J1> ; <var:l> := <var:l> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:M> = <var:G> }} <def:poly> {{ <var:l> = <nat:3> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:J0> = <nat:4> /\ <var:l> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:G> /\ <var:l> = <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 