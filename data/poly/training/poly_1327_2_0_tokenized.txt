\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:7> ; <var:s> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:D> = <var:J> $ before the evaluation of the segment of code it follows that we see $ <var:s> = <nat:7> $ once code segment has finished executing . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:D> = <var:J> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:D> = <var:J> \land <var:N0> = <nat:7> \} \\ <var:s> := <var:N0> \\ \{ <var:D> = <var:J> \land <var:s> = <nat:7> \} \end{eqnarray} As a result , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:7> ; <var:s> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:D> = <var:J> }} <def:poly> {{ <var:s> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:s> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 