\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:d> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:d> ; <var:f2> := <var:f2> * <var:d> ; <var:P> := <var:f2> ; <var:P> := <var:P> + <var:f1> ; <var:P> := <var:P> + <var:f0> \end{verbatim} Allowing , for all positive integer coefficients $ <var:k> $ , that $ <var:d> = <var:k> $ before interpreting our segment of code , then $ <var:P> = <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:k> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \} \\ <var:f1> := <nat:7> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \} \\ <var:f1> := <var:f1> * <var:d> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \cdot <var:k> \} \\ <var:f2> := <nat:8> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \cdot <var:k> \land <var:f2> = <nat:8> \} \\ <var:f2> := <var:f2> * <var:d> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \cdot <var:k> \land <var:f2> = <nat:8> \cdot <var:k> \} \\ <var:f2> := <var:f2> * <var:d> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \cdot <var:k> \land <var:f2> = <nat:8> \cdot <var:k> ^ <nat:2> \} \\ <var:P> := <var:f2> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:f1> = <nat:7> \cdot <var:k> \land <var:P> = <nat:8> \cdot <var:k> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:f1> ; \\ \{ <var:d> = <var:k> \land <var:f0> = <nat:6> \land <var:P> = <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> \} \\ <var:P> := <var:P> + <var:f0> \\ \{ <var:d> = <var:k> \land <var:P> = <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:6> \} \end{eqnarray} Applying Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:d> = <var:k> }} <var:f0> := <nat:6> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:d> ; <var:f2> := <nat:8> ; <var:f2> := <var:f2> * <var:d> ; <var:f2> := <var:f2> * <var:d> ; <var:P> := <var:f2> ; <var:P> := <var:P> + <var:f1> ; <var:P> := <var:P> + <var:f0> {{ <var:P> = <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:k> /\ <var:f2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:k> /\ <var:f2> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:k> /\ <var:f2> = <nat:8> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:7> * <var:k> /\ <var:P> = <nat:8> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:f0> = <nat:6> /\ <var:P> = <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:P> = <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 