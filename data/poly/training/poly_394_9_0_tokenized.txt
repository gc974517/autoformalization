\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:I> ; <var:b2> := <nat:3> ; <var:b2> := <var:b2> * <var:I> ; <var:b2> := <var:b2> * <var:I> ; <var:v> := <var:b2> ; <var:v> := <var:v> + <var:b1> ; <var:v> := <var:v> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Allow that we have $ <var:I> = <var:a> $ before evaluating our list of commands then we see $ <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be seen using the below decorated segment of code . \begin{eqnarray} \{ <var:I> = <var:a> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:a> \} \\ <var:b2> := <nat:3> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:a> \land <var:b2> = <nat:3> \} \\ <var:b2> := <var:b2> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:a> \land <var:b2> = <nat:3> * <var:a> \} \\ <var:b2> := <var:b2> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:a> \land <var:b2> = <nat:3> * <var:a> ^ <nat:2> \} \\ <var:v> := <var:b2> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:a> \land <var:v> = <nat:3> * <var:a> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:b1> ; \\ \{ <var:I> = <var:a> \land <var:b0> = <nat:3> \land <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> \} \\ <var:v> := <var:v> + <var:b0> \\ \{ <var:I> = <var:a> \land <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:3> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:I> ; <var:b2> := <nat:3> ; <var:b2> := <var:b2> * <var:I> ; <var:b2> := <var:b2> * <var:I> ; <var:v> := <var:b2> ; <var:v> := <var:v> + <var:b1> ; <var:v> := <var:v> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:a> /\ <var:b2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:a> /\ <var:b2> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:a> /\ <var:b2> = <nat:3> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:a> /\ <var:v> = <nat:3> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:b0> = <nat:3> /\ <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:v> = <nat:3> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 