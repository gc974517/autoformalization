\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:4> ; <var:x> := <var:X0> \end{verbatim} Assuming that $ <var:z> = <var:y> $ ahead of the evaluation of our program it holds that we have $ <var:x> = <nat:4> $ . \end{theorem} \begin{proof} The argument for the segment of code is demonstrated through usual Hoare techniques . Moving on to the upcoming line of code seen in the series of commands , we have the binding code letting $ <nat:4> $ toward $ <var:X0>$ . This command takes the precondition $ \{ <var:z> = <var:y> \} $ as the condition $ \{ <var:z> = <var:y> \land <var:X0> = <nat:4> \} $ . This is shown to be logically sound through the assignment scheme given by standard Hoare reasoning . Advancing to the following statement contained in the code , we have the command \verb | <var:x> := <var:X0> | . This takes $ \{ <var:z> = <var:y> \land <var:X0> = <nat:4> \} $ as the postcondition $ \{ <var:z> = <var:y> \land <var:x> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:z> = <var:y> }} <var:X0> := <nat:4> ; <var:x> := <var:X0> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:y> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 