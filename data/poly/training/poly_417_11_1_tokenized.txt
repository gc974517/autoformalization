\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:j> ; <var:M2> := <var:M1> * <var:j> ; <var:M3> := <var:M2> * <var:j> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:9> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:9> ; <var:D> := <var:M3> <var:D> := <var:D> + <var:M2> <var:D> := <var:D> + <var:M1> <var:D> := <var:D> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allow it to be that $ <var:j> = <var:m> $ before interpreting this list of commands , then we see $ <var:D> = <nat:9> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:3> $ after list of commands has terminated . \end{theorem} \begin{proof} The course of logic for the series of commands is clear with standard Hoare logic . Honing in on the upcoming lines of codein the series of instructions , \begin{verbatim} { <var:j> = <var:m> } <var:M1> := <var:j> { <var:j> = <var:m> \land <var:M1> = <var:m> } { <var:j> = <var:m> \land <var:M1> = <var:m> } <var:M2> := <var:M1> * <var:j> { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> } { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> } <var:M3> := <var:M2> * <var:j> { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> } { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> } <var:M0> := <nat:3> { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } { <var:j> = <var:m> \land <var:M1> = <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } <var:M1> := <var:M1> * <nat:9> { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } <var:M2> := <var:M2> * <nat:5> { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M3> = <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } <var:M3> := <var:M3> * <nat:9> { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M3> = <nat:9> \cdot <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M3> = <nat:9> \cdot <var:m> ^ <nat:3> \land <var:M0> = <nat:3> } <var:D> := <var:M3{ <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M0> = <nat:3> \land <var:D> = <nat:9> \cdot <var:m> ^ <nat:3> } { <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:M0> = <nat:3> \land <var:D> = <nat:9> \cdot <var:m> ^ <nat:3> } <var:D> := <var:D> + <var:M2{ <var:j> = <var:m> \land <var:M1> = <nat:9> \cdot <var:m> \land <var:M0> = <nat:3> \land <var:D> = <nat:9> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> } \end{verbatim} This is ensured by the scheme given by usual Hoare reasoning . Stepping forward , we have \begin{verbatim} { <var:j> = <var:m> } <var:M1> := <var:j> { <var:j> = <var:m> \land <var:M1> = <var:m> } \end{verbatim} Moving onward , we have \begin{verbatim} { <var:j> = <var:m> } <var:M1> := <var:j> { <var:j> = <var:m> \land <var:M1> = <var:m> } \end{verbatim} This is shown to be logically sound through the variable binding inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M1> := <var:j> ; <var:M2> := <var:M1> * <var:j> ; <var:M3> := <var:M2> * <var:j> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:9> ; <var:M2> := <var:M2> * <nat:5> ; <var:M3> := <var:M3> * <nat:9> ; <var:D> := <var:M3> <var:D> := <var:D> + <var:M2> <var:D> := <var:D> + <var:M1> <var:D> := <var:D> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:j> = <var:m> }} <def:poly> {{ <var:D> = <nat:9> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <nat:9> * <var:m> /\ <var:M2> = <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <nat:9> * <var:m> /\ <var:M2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:M3> = <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <nat:9> * <var:m> /\ <var:M2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:M3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <nat:9> * <var:m> /\ <var:M2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:M0> = <nat:3> /\ <var:D> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M1> = <nat:9> * <var:m> /\ <var:M0> = <nat:3> /\ <var:D> = <nat:9> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:M0> = <nat:3> /\ <var:D> = <nat:9> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:D> = <nat:9> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 