\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:R1> := <var:h> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:J> := <var:R1> <var:J> := <var:J> + <var:R0> \end{verbatim} Allowing it to be that $ <var:h> = <var:V> $ prior to the evaluation of the set of commands it follows that we see $ <var:J> = <nat:8> \times <var:V> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:h> = <var:V> \} \\ <var:R1> := <var:h> ; \\ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \} \\ <var:R0> := <nat:5> ; \\ \{ <var:h> = <var:V> \land <var:R1> = <var:V> \land <var:R0> = <nat:5> \} \\ <var:R1> := <var:R1> * <nat:8> ; \\ \{ <var:h> = <var:V> \land <var:R1> = <nat:8> * <var:V> \land <var:R0> = <nat:5> \} \\ <var:J> := <var:R1> \\ \{ <var:h> = <var:V> \land <var:R0> = <nat:5> \land <var:J> = <nat:8> * <var:V> \} \\ <var:J> := <var:J> + <var:R0> \\ \{ <var:h> = <var:V> \land <var:J> = <nat:8> * <var:V> + <nat:5> \} \end{eqnarray} Thus , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:R1> := <var:h> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:8> ; <var:J> := <var:R1> <var:J> := <var:J> + <var:R0> {{ <var:J> = <nat:8> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <var:V> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R1> = <nat:8> * <var:V> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:R0> = <nat:5> /\ <var:J> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:J> = <nat:8> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 