\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:6> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:y> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:y> ; <var:v2> := <var:v2> * <var:y> ; <var:e> := <var:v2> ; <var:e> := <var:e> + <var:v1> ; <var:e> := <var:e> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allowing that $ <var:y> = <var:k> $ prior to evaluating the series of commands , it follows that we have $ <var:e> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:6> $ after segment of code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be given through standard Hoare reasoning . Paying attention to the following command seen in our set of instructions , we have the binding statement assigning $ <nat:6> $ as $ <var:v0>$ . This forwards $ \{ <var:y> = <var:k> \} $ toward $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \} $ . Now , we see the variable assignmet statement \verb | <var:v1> := <nat:7> ; | . This code advances $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \} $ toward the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> \} $ . This is guaranteed by the assignment inference rule defined in Hoare reasoning . Now , we see the variable update command \verb | <var:v1> := <var:v1> * <var:y> ; | . This code advances the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> \} $ toward $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \} $ . Advancing to the next step , we see the assignment code \verb | <var:v2> := <nat:2> ; | . This moves the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \} $ toward $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> \} $ . This is rigorously given using the assignment scheme given in standard Hoare reasoning . Taking a look at the following piece of code in the list of instructions , we see the environment update statement \verb | <var:v2> := <var:v2> * <var:y> ; | . This moves the precondition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> \} $ to the postcondition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> * <var:k> \} $ . Now , we have the variable binding code \verb | <var:v2> := <var:v2> * <var:y> ; | . This code advances the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> * <var:k> \} $ as the postcondition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> * <var:k> ^ <nat:2> \} $ . This is guaranteed by the assignment law found in usual Hoare reasoning . Immediately following , the variable assignmet code \verb | <var:e> := <var:v2> ; | . This forwards the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:v2> = <nat:2> * <var:k> ^ <nat:2> \} $ into the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:e> = <nat:2> * <var:k> ^ <nat:2> \} $ . This is ensured by the assignment scheme found in Hoare techniques . Paying attention to the proceeding statement contained in our code , we have the assignment code defining $ <var:e> + <var:v1> $ to $ <var:e>$ . This redefines the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:v1> = <nat:7> * <var:k> \land <var:e> = <nat:2> * <var:k> ^ <nat:2> \} $ to the condition $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> \} $ . Following , we see the binding code \verb | <var:e> := <var:e> + <var:v0> | . This line transfers $ \{ <var:y> = <var:k> \land <var:v0> = <nat:6> \land <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> \} $ as the condition $ \{ <var:y> = <var:k> \land <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:6> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:y> ; <var:v2> := <nat:2> ; <var:v2> := <var:v2> * <var:y> ; <var:v2> := <var:v2> * <var:y> ; <var:e> := <var:v2> ; <var:e> := <var:e> + <var:v1> ; <var:e> := <var:e> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <def:poly> {{ <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> * <var:k> /\ <var:v2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> * <var:k> /\ <var:v2> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> * <var:k> /\ <var:v2> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:7> * <var:k> /\ <var:e> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v0> = <nat:6> /\ <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:e> = <nat:2> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 