\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:3> ; <var:w> := <var:R0> \end{verbatim} Given $ <var:p> = <var:t> $ ( for some positive numbers $ <var:t> $ ) before interpreting this code it holds that we see $ <var:w> = <nat:3> $ when series of instructions has finished . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:p> = <var:t> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:p> = <var:t> \land <var:R0> = <nat:3> \} \\ <var:w> := <var:R0> \\ \{ <var:p> = <var:t> \land <var:w> = <nat:3> \} \end{eqnarray} Therefore , our set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:p> = <var:t> }} <var:R0> := <nat:3> ; <var:w> := <var:R0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:t> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 