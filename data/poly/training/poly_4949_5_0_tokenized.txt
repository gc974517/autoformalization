\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:E> ; <var:Z> := <var:f1> ; <var:Z> := <var:Z> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:E> = <var:h> $ before the evaluation of our program it holds that we see $ <var:Z> = <nat:1> * <var:h> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:E> = <var:h> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:E> = <var:h> \land <var:f0> = <nat:9> \} \\ <var:f1> := <nat:1> ; \\ \{ <var:E> = <var:h> \land <var:f0> = <nat:9> \land <var:f1> = <nat:1> \} \\ <var:f1> := <var:f1> * <var:E> ; \\ \{ <var:E> = <var:h> \land <var:f0> = <nat:9> \land <var:f1> = <nat:1> * <var:h> \} \\ <var:Z> := <var:f1> ; \\ \{ <var:E> = <var:h> \land <var:f0> = <nat:9> \land <var:Z> = <nat:1> * <var:h> \} \\ <var:Z> := <var:Z> + <var:f0> \\ \{ <var:E> = <var:h> \land <var:Z> = <nat:1> * <var:h> + <nat:9> \} \end{eqnarray} Given the preceding argument , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:E> ; <var:Z> := <var:f1> ; <var:Z> := <var:Z> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <def:poly> {{ <var:Z> = <nat:1> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:f0> = <nat:9> /\ <var:Z> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:Z> = <nat:1> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 