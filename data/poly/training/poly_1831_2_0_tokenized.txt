\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:9> ; <var:j> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Allow it to be that $ <var:x> = <var:f> $ before evaluating the set of commands , it holds that we have $ <var:j> = <nat:9> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:x> = <var:f> \} \\ <var:X0> := <nat:9> ; \\ \{ <var:x> = <var:f> \land <var:X0> = <nat:9> \} \\ <var:j> := <var:X0> \\ \{ <var:x> = <var:f> \land <var:j> = <nat:9> \} \end{eqnarray} Given the above , our set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:9> ; <var:j> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:x> = <var:f> }} <def:poly> {{ <var:j> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:f> /\ <var:j> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 