\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:D> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:5> ; <var:w> := <var:h1> <var:w> := <var:w> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assume for $ <var:l> $ that we have $ <var:D> = <var:l> $ before the evaluation of the set of commands then we have $ <var:w> = <nat:5> \cdot <var:l> + <nat:8> $ after list of commands executes . \end{theorem} \begin{proof} Observe the below decorated series of commands . \begin{eqnarray} \{ <var:D> = <var:l> \} \\ <var:h1> := <var:D> ; \\ \{ <var:D> = <var:l> \land <var:h1> = <var:l> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:D> = <var:l> \land <var:h1> = <var:l> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:5> ; \\ \{ <var:D> = <var:l> \land <var:h1> = <nat:5> * <var:l> \land <var:h0> = <nat:8> \} \\ <var:w> := <var:h1> \\ \{ <var:D> = <var:l> \land <var:h0> = <nat:8> \land <var:w> = <nat:5> * <var:l> \} \\ <var:w> := <var:w> + <var:h0> \\ \{ <var:D> = <var:l> \land <var:w> = <nat:5> * <var:l> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:D> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:5> ; <var:w> := <var:h1> <var:w> := <var:w> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:D> = <var:l> }} <def:poly> {{ <var:w> = <nat:5> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:h1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:h1> = <var:l> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:h1> = <nat:5> * <var:l> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:h0> = <nat:8> /\ <var:w> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:w> = <nat:5> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 