\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:e1> := <var:W> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:Q> := <var:e1> <var:Q> := <var:Q> + <var:e0> \end{verbatim} Given ( taking natural numbers $ <var:Z> $ ) that we have $ <var:W> = <var:Z> $ prior to running the list of instructions , then $ <var:Q> = <nat:2> \cdot <var:Z> + <nat:4> $ once list of instructions has executed . \end{theorem} \begin{proof} The proof of our code can be seen through usual Hoare techniques . Immediately after , we see the command \verb | <var:e1> := <var:W> ; | . This forwards the condition $ \{ <var:W> = <var:Z> \} $ toward the postcondition $ \{ <var:W> = <var:Z> \land <var:e1> = <var:Z> \} $ . This is ensured through the assignment scheme of usual Hoare techniques . Jumping to the proceeding piece of code found in the list of commands , the binding code \verb | <var:e0> := <nat:4> ; | . This takes the condition $ \{ <var:W> = <var:Z> \land <var:e1> = <var:Z> \} $ as the condition $ \{ <var:W> = <var:Z> \land <var:e1> = <var:Z> \land <var:e0> = <nat:4> \} $ . This is shown by the assignment inference rule given in usual Hoare logic . Immediately after , we have the command \verb | <var:e1> := <var:e1> * <nat:2> ; | . This command moves the precondition $ \{ <var:W> = <var:Z> \land <var:e1> = <var:Z> \land <var:e0> = <nat:4> \} $ toward the condition $ \{ <var:W> = <var:Z> \land <var:e1> = <nat:2> * <var:Z> \land <var:e0> = <nat:4> \} $ . Taking a look at the next bit of code contained in the set of instructions , the variable update code \verb | <var:Q> := <var:e1> | . This takes the condition $ \{ <var:W> = <var:Z> \land <var:e1> = <nat:2> * <var:Z> \land <var:e0> = <nat:4> \} $ as $ \{ <var:W> = <var:Z> \land <var:e0> = <nat:4> \land <var:Q> = <nat:2> * <var:Z> \} $ . This is given by the assignment law obtained from typical Hoare techniques . Following , the variable update command \verb | <var:Q> := <var:Q> + <var:e0> | . This moves the precondition $ \{ <var:W> = <var:Z> \land <var:e0> = <nat:4> \land <var:Q> = <nat:2> * <var:Z> \} $ to $ \{ <var:W> = <var:Z> \land <var:Q> = <nat:2> * <var:Z> + <nat:4> \} $ . This is ensured with the assignment inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:W> = <var:Z> }} <var:e1> := <var:W> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:Q> := <var:e1> <var:Q> := <var:Q> + <var:e0> {{ <var:Q> = <nat:2> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:e1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:e1> = <var:Z> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:e1> = <nat:2> * <var:Z> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:e0> = <nat:4> /\ <var:Q> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:Q> = <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 