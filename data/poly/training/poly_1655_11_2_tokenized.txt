\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:2> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:4> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:3> + <var:B> * <var:z> ; <var:B> := <var:B> * <var:z> ; <var:B> := <nat:2> + <var:B> * <var:z> ; <var:B> := <nat:2> + <var:B> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:z> = <var:R> $ , for every natural numbers $ <var:R> $ , ahead of interpreting our list of instructions , then $ <var:B> = <nat:2> \times <var:R> ^ <nat:10> + <nat:2> \times <var:R> ^ <nat:9> + <nat:1> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> + <nat:2> $ when set of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be shown by typical Hoare logic . Moving on to the upcoming step contained in the set of instructions , we see the code letting $ <nat:2> $ toward $ <var:B>$ . This redefines $ \{ <var:z> = <var:R> \} $ to $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \} $ . This is rigorously given using the assignment law of standard Hoare reasoning . Moving on , we see the variable update command \verb | <var:B> := <nat:2> + <var:B> * <var:z> ; | . This code takes the precondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \} $ as the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> + <nat:2> \} $ . This is guaranteed by the assignment scheme found in usual Hoare reasoning . Immediately following , the environment update statement defining $ <nat:1> + <var:B> * <var:z> $ into $ <var:B>$ . This transfers the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> + <nat:2> \} $ to the postcondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:1> \} $ . This is guaranteed using the assignment rule defined in Hoare logic . Focusing on the subsequent line of code seen in our code segment , we have the variable assignmet statement defining $ <nat:1> + <var:B> * <var:z> $ into $ <var:B>$ . This takes the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:1> \} $ toward the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:1> \} $ . This is deduced by the assignment rule from Hoare logic . Paying attention to the following line of code in our list of commands , the variable binding command \verb | <var:B> := <nat:1> + <var:B> * <var:z> ; | . This line redefines $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:1> \} $ into the postcondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:1> \} $ . This is deduced with the assignment inference rule from typical Hoare techniques . Focusing on the next bit of code found in our set of instructions , the binding statement \verb | <var:B> := <nat:4> + <var:B> * <var:z> ; | . This line advances $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:1> \} $ to the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:5> + <nat:2> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> \} $ . Observing the upcoming statement seen in the code segment , we see the variable binding statement defining $ <nat:1> + <var:B> * <var:z> $ toward $ <var:B>$ . This redefines $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:5> + <nat:2> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> \} $ into the postcondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:6> + <nat:2> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> \} $ . This is given using the assignment inference rule of usual Hoare techniques . Further , we have the environment update statement \verb | <var:B> := <nat:3> + <var:B> * <var:z> ; | . This line moves the precondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:6> + <nat:2> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> \} $ to the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:7> + <nat:2> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} $ . Taking a look at the subsequent command found in the list of instructions , the environment update statement \verb | <var:B> := <var:B> * <var:z> ; | . This transfers the precondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:7> + <nat:2> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} $ as the postcondition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:8> + <nat:2> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + \} $ . Jumping to the subsequent statement found in our code segment , we have the binding command defining $ <nat:2> + <var:B> * <var:z> $ into $ <var:B>$ . This line advances the condition $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:8> + <nat:2> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + \} $ toward $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:9> + <nat:2> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:2> \} $ . This is ensured with the assignment rule in usual Hoare reasoning . Shifting focus toward the upcoming statement contained in the series of instructions , we see the environment update code letting $ <nat:2> + <var:B> * <var:z$ as $ <var:B>$ . This command takes $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:9> + <nat:2> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:1> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:z> = <var:R> \land <var:B> = <nat:2> \times <var:R> ^ <nat:10> + <nat:2> \times <var:R> ^ <nat:9> + <nat:1> \times <var:R> ^ <nat:8> + <nat:1> \times <var:R> ^ <nat:7> + <nat:1> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:2> ; <var:B> := <nat:2> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:4> + <var:B> * <var:z> ; <var:B> := <nat:1> + <var:B> * <var:z> ; <var:B> := <nat:3> + <var:B> * <var:z> ; <var:B> := <var:B> * <var:z> ; <var:B> := <nat:2> + <var:B> * <var:z> ; <var:B> := <nat:2> + <var:B> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:z> = <var:R> }} <def:poly> {{ <var:B> = <nat:2> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:R> /\ <var:B> = <nat:2> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:1> * <var:R> ^ <nat:8> + <nat:1> * <var:R> ^ <nat:7> + <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 