\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:7> ; <var:J> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Allowing $ <var:M> = <var:D> $ before the evaluation of this segment of code , it must be that we have $ <var:J> = <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is given through this decorated set of commands . \begin{eqnarray} \{ <var:M> = <var:D> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:M> = <var:D> \land <var:h0> = <nat:7> \} \\ <var:J> := <var:h0> \\ \{ <var:M> = <var:D> \land <var:J> = <nat:7> \} \end{eqnarray} Using standard Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:J> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <def:poly> {{ <var:J> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:J> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 