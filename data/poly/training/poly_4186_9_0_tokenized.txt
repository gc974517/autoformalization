\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:5> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:a> ; <var:i2> := <nat:6> ; <var:i2> := <var:i2> * <var:a> ; <var:i2> := <var:i2> * <var:a> ; <var:V> := <var:i2> ; <var:V> := <var:V> + <var:i1> ; <var:V> := <var:V> + <var:i0> \end{verbatim} Allow $ <var:a> = <var:t> $ prior to executing this program , it holds that we see $ <var:V> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:5> $ once program exits . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions can be seen using standard Hoare reasoning . Stepping forward , we see \begin{verbatim} { <var:a> = <var:t> } <var:i0> := <nat:5> { <var:a> = <var:t> \land <var:i0> = <nat:5> } { <var:a> = <var:t> \land <var:i0> = <nat:5> } <var:i1> := <nat:7> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> } { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> } <var:i1> := <var:i1> * <var:a> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> } { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> } <var:i2> := <nat:6> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> } { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> } <var:i2> := <var:i2> * <var:a> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> \cdot <var:t> } { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> \cdot <var:t> } <var:i2> := <var:i2> * <var:a> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> \cdot <var:t> ^ <nat:2> } { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:i2> = <nat:6> \cdot <var:t> ^ <nat:2> } <var:V> := <var:i2> { <var:a> = <var:t> \land <var:i0> = <nat:5> \land <var:i1> = <nat:7> \cdot <var:t> \land <var:V> = <nat:6> \cdot <var:t> ^ <nat:2> } \end{verbatim} This is ensured through the assignment rule given by typical Hoare logic . Going to the next step , \begin{verbatim} { <var:a> = <var:t> } <var:i0> := <nat:5> { <var:a> = <var:t> \land <var:i0> = <nat:5> } \end{verbatim} This is guaranteed with the environment update scheme defined in standard Hoare logic . Further , we see \begin{verbatim} { <var:a> = <var:t> } <var:i0> := <nat:5> { <var:a> = <var:t> \land <var:i0> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:a> = <var:t> }} <var:i0> := <nat:5> ; <var:i1> := <nat:7> ; <var:i1> := <var:i1> * <var:a> ; <var:i2> := <nat:6> ; <var:i2> := <var:i2> * <var:a> ; <var:i2> := <var:i2> * <var:a> ; <var:V> := <var:i2> ; <var:V> := <var:V> + <var:i1> ; <var:V> := <var:V> + <var:i0> {{ <var:V> = <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> * <var:t> /\ <var:i2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> * <var:t> /\ <var:i2> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> * <var:t> /\ <var:i2> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:7> * <var:t> /\ <var:V> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:i0> = <nat:5> /\ <var:V> = <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:V> = <nat:6> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 