\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:6> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:b> ; <var:E> := <var:p1> ; <var:E> := <var:E> + <var:p0> \end{verbatim} Allow that $ <var:b> = <var:d> $ ahead of running our segment of code , it holds that $ <var:E> = <nat:1> \times <var:d> + <nat:6> $ when program has terminated . \end{theorem} \begin{proof} The flow of logic for the code can be seen using standard Hoare techniques . Paying attention to the next piece of code contained in our series of commands , we have the binding code binding $ <nat:6> $ to $ <var:p0>$ . This command takes the condition $ \{ <var:b> = <var:d> \} $ as the postcondition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \} $ . This is deduced using the assignment inference rule defined in standard Hoare reasoning . Following , the assignment line defining $ <nat:1> $ toward $ <var:p1>$ . This code redefines the condition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \} $ to the postcondition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:p1> = <nat:1> \} $ . This is sound by the assignment inference rule defined by usual Hoare reasoning . Considering the upcoming line found in our code segment , we see the code giving $ <var:p1> * <var:b> $ toward $ <var:p1>$ . This redefines the condition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:p1> = <nat:1> \} $ as the postcondition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:p1> = <nat:1> \cdot <var:d> \} $ . This is rigorously given with the assignment scheme found in typical Hoare reasoning . Shifting focus toward the following command seen in our code , we see the assignment code assigning $ <var:p1> $ to $ <var:E>$ . This statement redefines the precondition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:p1> = <nat:1> \cdot <var:d> \} $ to the condition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:E> = <nat:1> \cdot <var:d> \} $ . Moving forward to the next step , we see the command assigning $ <var:E> + <var:p0$ as $ <var:E>$ . This advances the condition $ \{ <var:b> = <var:d> \land <var:p0> = <nat:6> \land <var:E> = <nat:1> \cdot <var:d> \} $ into $ \{ <var:b> = <var:d> \land <var:E> = <nat:1> \cdot <var:d> + <nat:6> \} $ . This is rigorously given using the assignment law given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:b> = <var:d> }} <var:p0> := <nat:6> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:b> ; <var:E> := <var:p1> ; <var:E> := <var:E> + <var:p0> {{ <var:E> = <nat:1> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:p0> = <nat:6> /\ <var:E> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:d> /\ <var:E> = <nat:1> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 