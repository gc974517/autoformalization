\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:5> ; <var:f> := <var:n3> <var:f> := <var:f> + <var:n2> <var:f> := <var:f> + <var:n1> <var:f> := <var:f> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:y> = <var:E> $ prior to the evaluation of our set of commands , it holds that we see $ <var:f> = <nat:5> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be given with standard Hoare logic . Further , we have \verb | { <var:y> = <var:E> } <var:n1> := <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> } | and \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> } <var:n2> := <var:n1> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } | . Moving on , \verb | { <var:y> = <var:E> } <var:n1> := <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> } | , \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> } <var:n2> := <var:n1> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } | , \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } <var:n3> := <var:n2> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> } | and \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> } <var:n0> := <nat:2> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> \land <var:n0> = <nat:2> } | . This is deduced by the variable update law defined by standard Hoare reasoning . Advancing on , \verb | { <var:y> = <var:E> } <var:n1> := <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> } | and \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> } <var:n2> := <var:n1> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } | . This is sound through the rule in standard Hoare reasoning . Taking a look at the proceeding pieces of code contained in our code , we see \verb | { <var:y> = <var:E> } <var:n1> := <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> } | , \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> } <var:n2> := <var:n1> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } | and \verb | { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> } <var:n3> := <var:n2> * <var:y> { <var:y> = <var:E> \land <var:n1> = <var:E> \land <var:n2> = <var:E> ^ <nat:2> \land <var:n3> = <var:E> ^ <nat:3> } | . This is rigorously given through the variable assignmet rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:y> ; <var:n2> := <var:n1> * <var:y> ; <var:n3> := <var:n2> * <var:y> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:5> ; <var:f> := <var:n3> <var:f> := <var:f> + <var:n2> <var:f> := <var:f> + <var:n1> <var:f> := <var:f> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:y> = <var:E> }} <def:poly> {{ <var:f> = <nat:5> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <nat:9> * <var:E> /\ <var:n2> = <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <nat:9> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n3> = <var:E> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <nat:9> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n3> = <nat:5> * <var:E> ^ <nat:3> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <nat:9> * <var:E> /\ <var:n2> = <nat:6> * <var:E> ^ <nat:2> /\ <var:n0> = <nat:2> /\ <var:f> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n1> = <nat:9> * <var:E> /\ <var:n0> = <nat:2> /\ <var:f> = <nat:5> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:n0> = <nat:2> /\ <var:f> = <nat:5> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:f> = <nat:5> * <var:E> ^ <nat:3> + <nat:6> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 