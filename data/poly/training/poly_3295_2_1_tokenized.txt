\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:9> ; <var:r> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:J> = <var:X> $ prior to executing this list of instructions it must be that we have $ <var:r> = <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program is demonstrated using usual Hoare reasoning . Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:X> \} & <var:W0> := <nat:9> & \{ <var:J> = <var:X> \land <var:W0> = <nat:9> \} \\ \{ <var:J> = <var:X> \land <var:W0> = <nat:9> \} & <var:r> := <var:W0& \{ <var:J> = <var:X> \land <var:r> = <nat:9> \} \end{tabular} This is ensured by the variable binding rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:9> ; <var:r> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:J> = <var:X> }} <def:poly> {{ <var:r> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:r> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 