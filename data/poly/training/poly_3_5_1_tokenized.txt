\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:c1> := <var:S> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:z> := <var:c1> <var:z> := <var:z> + <var:c0> \end{verbatim} Allow $ <var:S> = <var:M> $ prior to interpreting our set of commands then we see $ <var:z> = <nat:8> \times <var:M> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is demonstrated by Hoare reasoning . Moving onward , we see the assignment statement \verb | <var:c1> := <var:S> ; | . This transfers $ \{ <var:S> = <var:M> \} $ into the postcondition $ \{ <var:S> = <var:M> \land <var:c1> = <var:M> \} $ . This is ensured through the assignment inference rule defined in usual Hoare techniques . Moving onward , we have the code defining $ <nat:5> $ toward $ <var:c0>$ . This forwards $ \{ <var:S> = <var:M> \land <var:c1> = <var:M> \} $ as the condition $ \{ <var:S> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:5> \} $ . Taking a look at the upcoming line seen in our set of commands , the environment update line \verb | <var:c1> := <var:c1> * <nat:8> ; | . This advances the condition $ \{ <var:S> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:5> \} $ toward the postcondition $ \{ <var:S> = <var:M> \land <var:c1> = <nat:8> \times <var:M> \land <var:c0> = <nat:5> \} $ . This is shown to be logically sound by the assignment scheme in usual Hoare logic . Considering the subsequent line of code found in our list of instructions , we see the assignment command \verb | <var:z> := <var:c1> | . This transfers $ \{ <var:S> = <var:M> \land <var:c1> = <nat:8> \times <var:M> \land <var:c0> = <nat:5> \} $ toward the condition $ \{ <var:S> = <var:M> \land <var:c0> = <nat:5> \land <var:z> = <nat:8> \times <var:M> \} $ . This is shown using the assignment rule found in Hoare reasoning . Shifting focus toward the proceeding bit of code found in our code segment , the assignment command \verb | <var:z> := <var:z> + <var:c0> | . This statement takes the precondition $ \{ <var:S> = <var:M> \land <var:c0> = <nat:5> \land <var:z> = <nat:8> \times <var:M> \} $ into the condition $ \{ <var:S> = <var:M> \land <var:z> = <nat:8> \times <var:M> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:S> = <var:M> }} <var:c1> := <var:S> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:z> := <var:c1> <var:z> := <var:z> + <var:c0> {{ <var:z> = <nat:8> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:c1> = <var:M> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:c1> = <nat:8> * <var:M> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:c0> = <nat:5> /\ <var:z> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:M> /\ <var:z> = <nat:8> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 