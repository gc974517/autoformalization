\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:t> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:t> ; <var:W2> := <var:W2> * <var:t> ; <var:d> := <var:W2> ; <var:d> := <var:d> + <var:W1> ; <var:d> := <var:d> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming , given positive coefficients $ <var:F> $ , it to hold that $ <var:t> = <var:F> $ ahead of running the code segment , it follows that $ <var:d> = <nat:3> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:6> $ after list of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is done through typical Hoare reasoning . Going to the next step , \begin{eqnarray} \{ <var:t> = <var:F> \} \, <var:W0> := <nat:6> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \} \, <var:W1> := <nat:2> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} \, <var:W1> := <var:W1> * <var:t> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \} \end{eqnarray} Jumping to the upcoming bits of codeseen in our code , we see \begin{eqnarray} \{ <var:t> = <var:F> \} \, <var:W0> := <nat:6> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \} \, <var:W1> := <nat:2> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} \, <var:W1> := <var:W1> * <var:t> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \} \, <var:W2> := <nat:3> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \land <var:W2> = <nat:3> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \land <var:W2> = <nat:3> \} \, <var:W2> := <var:W2> * <var:t> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \land <var:W2> = <nat:3> \times <var:F> \} \\ \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \land <var:W2> = <nat:3> \times <var:F> \} \, <var:W2> := <var:W2> * <var:t> \, \{ <var:t> = <var:F> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:F> \land <var:W2> = <nat:3> \times <var:F> ^ <nat:2> \} \end{eqnarray} This is shown to be logically sound through the environment update scheme of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:6> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:t> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:t> ; <var:W2> := <var:W2> * <var:t> ; <var:d> := <var:W2> ; <var:d> := <var:d> + <var:W1> ; <var:d> := <var:d> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <def:poly> {{ <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:F> /\ <var:W2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:F> /\ <var:W2> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:F> /\ <var:W2> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:W0> = <nat:6> /\ <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 