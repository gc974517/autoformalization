\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:u1> := <var:x> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:2> ; <var:k> := <var:u1> <var:k> := <var:k> + <var:u0> \end{verbatim} Assuming $ <var:x> = <var:H> $ for natural coefficients $ <var:H> $ ahead of executing our list of instructions it must be that $ <var:k> = <nat:2> \times <var:H> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our set of commands can be seen using usual Hoare techniques . Looking at the upcoming piece of code contained in our set of commands , we see \begin{verbatim} { <var:x> = <var:H> } <var:u1> := <var:x> { <var:x> = <var:H> \land <var:u1> = <var:H> } \end{verbatim} Moving forward to the next step , we see \begin{verbatim} { <var:x> = <var:H> } <var:u1> := <var:x> { <var:x> = <var:H> \land <var:u1> = <var:H> } { <var:x> = <var:H> \land <var:u1> = <var:H> } <var:u0> := <nat:6> { <var:x> = <var:H> \land <var:u1> = <var:H> \land <var:u0> = <nat:6> } \end{verbatim} This is deduced by the assignment rule of usual Hoare logic . Shifting focus toward the subsequent line of code found in our list of instructions , we have \begin{verbatim} { <var:x> = <var:H> } <var:u1> := <var:x> { <var:x> = <var:H> \land <var:u1> = <var:H> } \end{verbatim} Following , we have \begin{verbatim} { <var:x> = <var:H> } <var:u1> := <var:x> { <var:x> = <var:H> \land <var:u1> = <var:H> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <var:u1> := <var:x> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:2> ; <var:k> := <var:u1> <var:k> := <var:k> + <var:u0> {{ <var:k> = <nat:2> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:u1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:u1> = <var:H> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:u1> = <nat:2> * <var:H> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:u0> = <nat:6> /\ <var:k> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:k> = <nat:2> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 