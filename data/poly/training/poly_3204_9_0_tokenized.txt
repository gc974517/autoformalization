\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:Z> := <var:t2> ; <var:Z> := <var:Z> + <var:t1> ; <var:Z> := <var:Z> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming , for all $ <var:V> $ , it to be that $ <var:D> = <var:V> $ ahead of the evaluation of our segment of code it follows that we see $ <var:Z> = <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:V> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \} \\ <var:t1> := <nat:8> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \} \\ <var:t1> := <var:t1> * <var:D> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:V> \} \end{eqnarray} Allowing interpreting this list of instructions gives us : \begin{eqnarray} <var:t2> := <nat:9> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:V> \land <var:t2> = <nat:9> \} \end{eqnarray} Furthering the evaluation of the series of commands yields : \begin{eqnarray} <var:t2> := <var:t2> * <var:D> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:V> \land <var:t2> = <nat:9> \times <var:V> \} \\ <var:t2> := <var:t2> * <var:D> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:V> \land <var:t2> = <nat:9> \times <var:V> ^ <nat:2> \} \\ <var:Z> := <var:t2> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:V> \land <var:Z> = <nat:9> \times <var:V> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:t1> ; \\ \{ <var:D> = <var:V> \land <var:t0> = <nat:9> \land <var:Z> = <nat:9> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> \} \\ <var:Z> := <var:Z> + <var:t0> \\ \{ <var:D> = <var:V> \land <var:Z> = <nat:9> \times <var:V> ^ <nat:2> + <nat:8> \times <var:V> + <nat:9> \} \end{eqnarray} The application of typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:D> ; <var:t2> := <nat:9> ; <var:t2> := <var:t2> * <var:D> ; <var:t2> := <var:t2> * <var:D> ; <var:Z> := <var:t2> ; <var:Z> := <var:Z> + <var:t1> ; <var:Z> := <var:Z> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:D> = <var:V> }} <def:poly> {{ <var:Z> = <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:V> /\ <var:t2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:V> /\ <var:t2> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:V> /\ <var:t2> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:V> /\ <var:Z> = <nat:9> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:t0> = <nat:9> /\ <var:Z> = <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:Z> = <nat:9> * <var:V> ^ <nat:2> + <nat:8> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 