\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:2> ; <var:L> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allow that $ <var:A> = <var:M> $ prior to executing this segment of code then we have $ <var:L> = <nat:2> $ after program finishes . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is shown through typical Hoare reasoning . Observing the subsequent line in the list of instructions , the variable assignmet code \verb | <var:Y0> := <nat:2> ; | . This command takes the condition $ \{ <var:A> = <var:M> \} $ toward the postcondition $ \{ <var:A> = <var:M> \land <var:Y0> = <nat:2> \} $ . This is guaranteed by the assignment inference rule defined in typical Hoare techniques . Stepping through , the variable assignmet command \verb | <var:L> := <var:Y0> | . This statement moves the condition $ \{ <var:A> = <var:M> \land <var:Y0> = <nat:2> \} $ into the condition $ \{ <var:A> = <var:M> \land <var:L> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:L> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <def:poly> {{ <var:L> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:L> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 