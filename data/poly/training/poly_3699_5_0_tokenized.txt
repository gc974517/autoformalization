\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:g> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> \end{verbatim} Given --- for all $ <var:i> \in \mathbb{Z}^+ $ --- $ <var:g> = <var:i> $ prior to interpreting our set of instructions , it must be that we see $ <var:p> = <nat:9> \cdot <var:i> + <nat:4> $ after series of commands finishes . \end{theorem} \begin{proof} The course of logic for this program can be seen with typical Hoare reasoning . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:g> = <var:i> \} & <var:a0> := <nat:4> & \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \} \\ \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \} & <var:a1> := <nat:9> & \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \land <var:a1> = <nat:9> \} \end{tabular} This is sound using the law found in usual Hoare logic . Next , \[ \begin{tabular} {rcl} \{ <var:g> = <var:i> \} & <var:a0> := <nat:4> & \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \} \\ \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \} & <var:a1> := <nat:9> & \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \land <var:a1> = <nat:9> \} \end{tabular} Moving forward to the next bit of code found in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:i> \} & <var:a0> := <nat:4> & \{ <var:g> = <var:i> \land <var:a0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:g> = <var:i> }} <var:a0> := <nat:4> ; <var:a1> := <nat:9> ; <var:a1> := <var:a1> * <var:g> ; <var:p> := <var:a1> ; <var:p> := <var:p> + <var:a0> {{ <var:p> = <nat:9> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:a0> = <nat:4> /\ <var:p> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:p> = <nat:9> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 