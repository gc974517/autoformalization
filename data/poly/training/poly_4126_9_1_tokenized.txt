\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:o> ; <var:u2> := <var:u1> * <var:o> ; <var:u3> := <var:u2> * <var:o> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:e> := <var:u3> <var:e> := <var:e> + <var:u1> <var:e> := <var:e> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:o> = <var:x> $ --- taking whole numbers $ <var:x> $ --- ahead of interpreting this program , it follows that we have $ <var:e> = <nat:1> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:x> \} \\ <var:u1> := <var:o> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <var:x> \} \end{eqnarray} Allowing the execution of our program returns : \begin{eqnarray} <var:u2> := <var:u1> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <var:x> \land <var:u2> = <var:x> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <var:x> \land <var:u2> = <var:x> ^ <nat:2> \land <var:u3> = <var:x> ^ <nat:3> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <var:x> \land <var:u2> = <var:x> ^ <nat:2> \land <var:u3> = <var:x> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:3> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <nat:3> \cdot <var:x> \land <var:u2> = <var:x> ^ <nat:2> \land <var:u3> = <var:x> ^ <nat:3> \land <var:u0> = <nat:1> \} \end{eqnarray} Furthering evaluating our set of commands results in : \begin{eqnarray} <var:u3> := <var:u3> * <nat:1> ; \\ \{ <var:o> = <var:x> \land <var:u1> = <nat:3> \cdot <var:x> \land <var:u2> = <var:x> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:x> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:e> := <var:u3> \\ \{ <var:o> = <var:x> \land <var:u1> = <nat:3> \cdot <var:x> \land <var:u2> = <var:x> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:e> = <nat:1> \cdot <var:x> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:u1> \\ \{ <var:o> = <var:x> \land <var:u0> = <nat:1> \land <var:e> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> \} \\ <var:e> := <var:e> + <var:u0> \\ \{ <var:o> = <var:x> \land <var:e> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:o> ; <var:u2> := <var:u1> * <var:o> ; <var:u3> := <var:u2> * <var:o> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:e> := <var:u3> <var:e> := <var:e> + <var:u1> <var:e> := <var:e> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:o> = <var:x> }} <def:poly> {{ <var:e> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <var:x> /\ <var:u2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <var:x> /\ <var:u2> = <var:x> ^ <nat:2> /\ <var:u3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <var:x> /\ <var:u2> = <var:x> ^ <nat:2> /\ <var:u3> = <var:x> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <nat:3> * <var:x> /\ <var:u2> = <var:x> ^ <nat:2> /\ <var:u3> = <var:x> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <nat:3> * <var:x> /\ <var:u2> = <var:x> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:x> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u1> = <nat:3> * <var:x> /\ <var:u2> = <var:x> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:e> = <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:u0> = <nat:1> /\ <var:e> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:e> = <nat:1> * <var:x> ^ <nat:3> + <nat:3> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 