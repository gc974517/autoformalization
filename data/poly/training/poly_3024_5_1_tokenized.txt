\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:f1> := <var:Z> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:2> ; <var:M> := <var:f1> <var:M> := <var:M> + <var:f0> \end{verbatim} Given --- with some whole numbers $ <var:d> $ --- that we have $ <var:Z> = <var:d> $ ahead of executing this program it must be that we have $ <var:M> = <nat:2> * <var:d> + <nat:8> $ once program has executed . \end{theorem} \begin{proof} The course of logic for the set of commands can be demonstrated through standard Hoare logic . Looking at the upcoming line of code contained in the set of instructions , we have the environment update line letting $ <var:Z> $ toward $ <var:f1>$ . This command transfers the condition $ \{ <var:Z> = <var:d> \} $ as the condition $ \{ <var:Z> = <var:d> \land <var:f1> = <var:d> \} $ . This is shown through the assignment rule defined by usual Hoare techniques . Paying attention to the subsequent statement found in the list of commands , we have the variable assignmet command giving $ <nat:8> $ to $ <var:f0>$ . This code forwards $ \{ <var:Z> = <var:d> \land <var:f1> = <var:d> \} $ toward the condition $ \{ <var:Z> = <var:d> \land <var:f1> = <var:d> \land <var:f0> = <nat:8> \} $ . This is ensured using the assignment law from standard Hoare techniques . Looking at the next line seen in our set of instructions , we have the variable update line binding $ <var:f1> * <nat:2> $ toward $ <var:f1>$ . This command moves $ \{ <var:Z> = <var:d> \land <var:f1> = <var:d> \land <var:f0> = <nat:8> \} $ into $ \{ <var:Z> = <var:d> \land <var:f1> = <nat:2> * <var:d> \land <var:f0> = <nat:8> \} $ . Moving on to the next step , we see the assignment code \verb | <var:M> := <var:f1> | . This takes the precondition $ \{ <var:Z> = <var:d> \land <var:f1> = <nat:2> * <var:d> \land <var:f0> = <nat:8> \} $ as $ \{ <var:Z> = <var:d> \land <var:f0> = <nat:8> \land <var:M> = <nat:2> * <var:d> \} $ . Shifting focus toward the following statement seen in our code segment , we see the variable binding command \verb | <var:M> := <var:M> + <var:f0> | . This code redefines $ \{ <var:Z> = <var:d> \land <var:f0> = <nat:8> \land <var:M> = <nat:2> * <var:d> \} $ toward the condition $ \{ <var:Z> = <var:d> \land <var:M> = <nat:2> * <var:d> + <nat:8> \} $ . This is rigorously given by the assignment rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Z> = <var:d> }} <var:f1> := <var:Z> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:2> ; <var:M> := <var:f1> <var:M> := <var:M> + <var:f0> {{ <var:M> = <nat:2> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:f1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:f1> = <var:d> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:f1> = <nat:2> * <var:d> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:f0> = <nat:8> /\ <var:M> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:M> = <nat:2> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 