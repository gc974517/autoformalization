\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:q> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:q> ; <var:i2> := <var:i2> * <var:q> ; <var:a> := <var:i2> ; <var:a> := <var:a> + <var:i1> ; <var:a> := <var:a> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:q> = <var:P> $ ahead of executing this list of instructions , it holds that we have $ <var:a> = <nat:9> \times <var:P> ^ <nat:2> + <nat:6> \times <var:P> + <nat:7> $ once code has finished . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:q> = <var:P> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \} \\ <var:i1> := <nat:6> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \} \end{eqnarray} Furthering interpreting this code segment produces : \begin{eqnarray} <var:i1> := <var:i1> * <var:q> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \times <var:P> \} \\ <var:i2> := <nat:9> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \times <var:P> \land <var:i2> = <nat:9> \} \end{eqnarray} Allowing interpreting our series of instructions returns : \begin{eqnarray} <var:i2> := <var:i2> * <var:q> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \times <var:P> \land <var:i2> = <nat:9> \times <var:P> \} \\ <var:i2> := <var:i2> * <var:q> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \times <var:P> \land <var:i2> = <nat:9> \times <var:P> ^ <nat:2> \} \\ <var:a> := <var:i2> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:6> \times <var:P> \land <var:a> = <nat:9> \times <var:P> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:i1> ; \\ \{ <var:q> = <var:P> \land <var:i0> = <nat:7> \land <var:a> = <nat:9> \times <var:P> ^ <nat:2> + <nat:6> \times <var:P> \} \\ <var:a> := <var:a> + <var:i0> \\ \{ <var:q> = <var:P> \land <var:a> = <nat:9> \times <var:P> ^ <nat:2> + <nat:6> \times <var:P> + <nat:7> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:q> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:q> ; <var:i2> := <var:i2> * <var:q> ; <var:a> := <var:i2> ; <var:a> := <var:a> + <var:i1> ; <var:a> := <var:a> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:q> = <var:P> }} <def:poly> {{ <var:a> = <nat:9> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:P> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:P> /\ <var:i2> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:P> /\ <var:i2> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:6> * <var:P> /\ <var:a> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:i0> = <nat:7> /\ <var:a> = <nat:9> * <var:P> ^ <nat:2> + <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:a> = <nat:9> * <var:P> ^ <nat:2> + <nat:6> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 