\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:f0> := <nat:8> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:s> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:s> ; <var:f2> := <var:f2> * <var:s> ; <var:u> := <var:f2> ; <var:u> := <var:u> + <var:f1> ; <var:u> := <var:u> + <var:f0> \end{verbatim} Assume that $ <var:s> = <var:a> $ , given any integers $ <var:a> $ , ahead of the evaluation of the program then we see $ <var:u> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:8> $ after set of commands has executed . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:s> = <var:a> \} \\ <var:f0> := <nat:8> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \} \\ <var:f1> := <nat:8> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \} \\ <var:f1> := <var:f1> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \times <var:a> \} \end{eqnarray} Advancing evaluating the segment of code gives us : \begin{eqnarray} <var:f2> := <nat:7> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \times <var:a> \land <var:f2> = <nat:7> \} \\ <var:f2> := <var:f2> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \times <var:a> \land <var:f2> = <nat:7> \times <var:a> \} \\ <var:f2> := <var:f2> * <var:s> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \times <var:a> \land <var:f2> = <nat:7> \times <var:a> ^ <nat:2> \} \\ <var:u> := <var:f2> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:f1> = <nat:8> \times <var:a> \land <var:u> = <nat:7> \times <var:a> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:f1> ; \\ \{ <var:s> = <var:a> \land <var:f0> = <nat:8> \land <var:u> = <nat:7> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> \} \\ <var:u> := <var:u> + <var:f0> \\ \{ <var:s> = <var:a> \land <var:u> = <nat:7> \times <var:a> ^ <nat:2> + <nat:8> \times <var:a> + <nat:8> \} \end{eqnarray} As a result , the set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:s> = <var:a> }} <var:f0> := <nat:8> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:s> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:s> ; <var:f2> := <var:f2> * <var:s> ; <var:u> := <var:f2> ; <var:u> := <var:u> + <var:f1> ; <var:u> := <var:u> + <var:f0> {{ <var:u> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> * <var:a> /\ <var:f2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> * <var:a> /\ <var:f2> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> * <var:a> /\ <var:f2> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:f1> = <nat:8> * <var:a> /\ <var:u> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:f0> = <nat:8> /\ <var:u> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:u> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 