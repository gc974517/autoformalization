\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:2> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:q> ; <var:k> := <var:U1> ; <var:k> := <var:k> + <var:U0> \end{verbatim} Allow that $ <var:q> = <var:x> $ ( with some $ <var:x> \in \mathbb{Z}^+ $ ) prior to executing this series of instructions , it follows that we see $ <var:k> = <nat:5> \cdot <var:x> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this code segment can be shown with standard Hoare techniques . Advancing , we see the assignment command defining $ <nat:2> $ into $ <var:U0>$ . This command advances the precondition $ \{ <var:q> = <var:x> \} $ toward $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \} $ . Taking a look at the subsequent bit of code seen in the code , we have the variable update line \verb | <var:U1> := <nat:5> ; | . This redefines the precondition $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \} $ toward the postcondition $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> \} $ . Going forward , we see the binding code \verb | <var:U1> := <var:U1> * <var:q> ; | . This forwards the condition $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> \} $ to $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:x> \} $ . Honing in on the following statement seen in our series of commands , we have the variable assignmet command giving $ <var:U1> $ as $ <var:k>$ . This takes $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:U1> = <nat:5> * <var:x> \} $ as the condition $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:k> = <nat:5> * <var:x> \} $ . This is rigorously given using the assignment rule of Hoare reasoning . Focusing on the next line contained in the series of commands , we see the assignment line \verb | <var:k> := <var:k> + <var:U0> | . This command advances the precondition $ \{ <var:q> = <var:x> \land <var:U0> = <nat:2> \land <var:k> = <nat:5> * <var:x> \} $ into the postcondition $ \{ <var:q> = <var:x> \land <var:k> = <nat:5> * <var:x> + <nat:2> \} $ . This is known to be sound using the assignment law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:q> = <var:x> }} <var:U0> := <nat:2> ; <var:U1> := <nat:5> ; <var:U1> := <var:U1> * <var:q> ; <var:k> := <var:U1> ; <var:k> := <var:k> + <var:U0> {{ <var:k> = <nat:5> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:U0> = <nat:2> /\ <var:U1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:U0> = <nat:2> /\ <var:k> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:k> = <nat:5> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 