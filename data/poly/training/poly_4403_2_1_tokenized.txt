\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:5> ; <var:x> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:n> = <var:I> $ ahead of executing this set of instructions it follows that $ <var:x> = <nat:5> $ after code segment is done executing . \end{theorem} \begin{proof} Let the below decorated series of commands . \begin{eqnarray} \{ <var:n> = <var:I> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:n> = <var:I> \land <var:o0> = <nat:5> \} \\ <var:x> := <var:o0> \\ \{ <var:n> = <var:I> \land <var:x> = <nat:5> \} \end{eqnarray} Using Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:x> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <def:poly> {{ <var:x> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:x> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 