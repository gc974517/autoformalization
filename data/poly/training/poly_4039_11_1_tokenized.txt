\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:d> ; <var:L2> := <var:L1> * <var:d> ; <var:L3> := <var:L2> * <var:d> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:7> ; <var:G> := <var:L3> <var:G> := <var:G> + <var:L2> <var:G> := <var:G> + <var:L1> <var:G> := <var:G> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Assuming it to be that $ <var:d> = <var:z> $ , taking natural numbers $ <var:z> $ , prior to the execution of the set of commands then we have $ <var:G> = <nat:7> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be accomplished through standard Hoare reasoning . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:z> \} & <var:L1> := <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} & <var:L2> := <var:L1> * <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} & <var:L3> := <var:L2> * <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \} & <var:L0> := <nat:7> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \end{tabular} This is known to be sound through the variable update inference rule defined in typical Hoare logic . After , \[ \begin{tabular} {rcl} \{ <var:d> = <var:z> \} & <var:L1> := <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} & <var:L2> := <var:L1> * <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} & <var:L3> := <var:L2> * <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \} & <var:L0> := <nat:7> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \land <var:L3> = <var:z> ^ <nat:3> \land <var:L0> = <nat:7> \} \end{tabular} This is given using the assignment inference rule in Hoare techniques . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:z> \} & <var:L1> := <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} \end{tabular} Further , \[ \begin{tabular} {rcl} \{ <var:d> = <var:z> \} & <var:L1> := <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} \\ \{ <var:d> = <var:z> \land <var:L1> = <var:z> \} & <var:L2> := <var:L1> * <var:d> & \{ <var:d> = <var:z> \land <var:L1> = <var:z> \land <var:L2> = <var:z> ^ <nat:2> \} \end{tabular} This is deduced through the environment update rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:d> ; <var:L2> := <var:L1> * <var:d> ; <var:L3> := <var:L2> * <var:d> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:7> ; <var:G> := <var:L3> <var:G> := <var:G> + <var:L2> <var:G> := <var:G> + <var:L1> <var:G> := <var:G> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:d> = <var:z> }} <def:poly> {{ <var:G> = <nat:7> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <nat:2> * <var:z> /\ <var:L2> = <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <nat:2> * <var:z> /\ <var:L2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:L3> = <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <nat:2> * <var:z> /\ <var:L2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:L3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <nat:2> * <var:z> /\ <var:L2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:L0> = <nat:7> /\ <var:G> = <nat:7> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L1> = <nat:2> * <var:z> /\ <var:L0> = <nat:7> /\ <var:G> = <nat:7> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:L0> = <nat:7> /\ <var:G> = <nat:7> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:G> = <nat:7> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 