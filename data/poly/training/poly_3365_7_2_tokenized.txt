\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:p> := <nat:2> ; <var:p> := <nat:3> + <var:p> * <var:R> ; <var:p> := <var:p> * <var:R> ; <var:p> := <nat:4> + <var:p> * <var:R> ; <var:p> := <nat:4> + <var:p> * <var:R> ; <var:p> := <nat:3> + <var:p> * <var:R> ; <var:p> := <nat:3> + <var:p> * <var:R> \end{verbatim} Given that we have $ <var:R> = <var:m> $ ahead of running the code , it must be that we see $ <var:p> = <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our list of instructions is given using this decorated program . \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:p> := <nat:2> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> + <nat:3> \} \\ <var:p> := <var:p> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + \} \\ <var:p> := <nat:4> + <var:p> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \} \\ <var:p> := <nat:4> + <var:p> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> + <nat:4> \} \end{eqnarray} Advancing the execution of the segment of code results in : \begin{eqnarray} <var:p> := <nat:3> + <var:p> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:3> \} \\ <var:p> := <nat:3> + <var:p> * <var:R> \\ \{ <var:R> = <var:m> \land <var:p> = <nat:2> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:p> := <nat:2> ; <var:p> := <nat:3> + <var:p> * <var:R> ; <var:p> := <var:p> * <var:R> ; <var:p> := <nat:4> + <var:p> * <var:R> ; <var:p> := <nat:4> + <var:p> * <var:R> ; <var:p> := <nat:3> + <var:p> * <var:R> ; <var:p> := <nat:3> + <var:p> * <var:R> {{ <var:p> = <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:p> = <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 