\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:B1> := <var:D> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:6> ; <var:t> := <var:B1> <var:t> := <var:t> + <var:B0> \end{verbatim} Assume it to hold that $ <var:D> = <var:u> $ before evaluating the program , then we see $ <var:t> = <nat:6> * <var:u> + <nat:9> $ after program has exited . \end{theorem} \begin{proof} The course of logic for this program is demonstrated by standard Hoare logic . Considering the next piece of code found in our set of commands , \begin{verbatim} { <var:D> = <var:u> } <var:B1> := <var:D> { <var:D> = <var:u> \land <var:B1> = <var:u> } \end{verbatim} This is given with the inference rule of standard Hoare logic . Taking another step toward the subsequent steps found in our segment of code , we have \begin{verbatim} { <var:D> = <var:u> } <var:B1> := <var:D> { <var:D> = <var:u> \land <var:B1> = <var:u> } { <var:D> = <var:u> \land <var:B1> = <var:u> } <var:B0> := <nat:9> { <var:D> = <var:u> \land <var:B1> = <var:u> \land <var:B0> = <nat:9> } { <var:D> = <var:u> \land <var:B1> = <var:u> \land <var:B0> = <nat:9> } <var:B1> := <var:B1> * <nat:6> { <var:D> = <var:u> \land <var:B1> = <nat:6> * <var:u> \land <var:B0> = <nat:9> } \end{verbatim} This is shown to be logically sound through the variable update inference rule in standard Hoare techniques . Paying attention to the upcoming line in the series of commands , we see \begin{verbatim} { <var:D> = <var:u> } <var:B1> := <var:D> { <var:D> = <var:u> \land <var:B1> = <var:u> } \end{verbatim} This is sound through the binding rule of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <var:B1> := <var:D> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:6> ; <var:t> := <var:B1> <var:t> := <var:t> + <var:B0> {{ <var:t> = <nat:6> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:B1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:B1> = <var:u> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:B1> = <nat:6> * <var:u> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:B0> = <nat:9> /\ <var:t> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:t> = <nat:6> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 