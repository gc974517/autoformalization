\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N3> := <var:N2> * <var:p> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:2> ; <var:f> := <var:N3> <var:f> := <var:f> + <var:N2> <var:f> := <var:f> + <var:N1> <var:f> := <var:f> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:p> = <var:R> $ assuming some $ <var:R> \in \mathbb{N} $ prior to executing this list of instructions it holds that we see $ <var:f> = <nat:2> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:6> \cdot <var:R> + <nat:7> $ once code segment is done . \end{theorem} \begin{proof} The flow of logic for the list of commands can be demonstrated through usual Hoare techniques . Immediately following , \[ \begin{tabular} {rcl} \{ <var:p> = <var:R> \} & <var:N1> := <var:p> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <var:R> \} & <var:N2> := <var:N1> * <var:p> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \} & <var:N3> := <var:N2> * <var:p> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \} & <var:N0> := <nat:7> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} & <var:N1> := <var:N1> * <nat:6> & \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} & <var:N2> := <var:N2> * <nat:2> & \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N3> = <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} & <var:N3> := <var:N3> * <nat:2> & \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:R> ^ <nat:3> \land <var:N0> = <nat:7> \} & <var:f> := <var:N3& \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:f> = <nat:2> \cdot <var:R> ^ <nat:3> \} \\ \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N2> = <nat:2> \cdot <var:R> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:f> = <nat:2> \cdot <var:R> ^ <nat:3> \} & <var:f> := <var:f> + <var:N2& \{ <var:p> = <var:R> \land <var:N1> = <nat:6> \cdot <var:R> \land <var:N0> = <nat:7> \land <var:f> = <nat:2> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> \} \end{tabular} After , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:R> \} & <var:N1> := <var:p> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \} \end{tabular} This is ensured with the law obtained from standard Hoare techniques . Advancing to the next piece of code contained in the program , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:R> \} & <var:N1> := <var:p> & \{ <var:p> = <var:R> \land <var:N1> = <var:R> \} \end{tabular} This is given using the variable update rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:p> ; <var:N2> := <var:N1> * <var:p> ; <var:N3> := <var:N2> * <var:p> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:2> ; <var:f> := <var:N3> <var:f> := <var:f> + <var:N2> <var:f> := <var:f> + <var:N1> <var:f> := <var:f> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:p> = <var:R> }} <def:poly> {{ <var:f> = <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <nat:6> * <var:R> /\ <var:N2> = <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <nat:6> * <var:R> /\ <var:N2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:N3> = <var:R> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <nat:6> * <var:R> /\ <var:N2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:R> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <nat:6> * <var:R> /\ <var:N2> = <nat:2> * <var:R> ^ <nat:2> /\ <var:N0> = <nat:7> /\ <var:f> = <nat:2> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N1> = <nat:6> * <var:R> /\ <var:N0> = <nat:7> /\ <var:f> = <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:N0> = <nat:7> /\ <var:f> = <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:R> /\ <var:f> = <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:6> * <var:R> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 