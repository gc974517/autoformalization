\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:6> ; <var:M> := <var:i0> \end{verbatim} Allow --- given $ <var:J> \in \mathbb{N} $ --- that $ <var:I> = <var:J> $ ahead of interpreting this series of commands it follows that we have $ <var:M> = <nat:6> $ when series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the code is done through usual Hoare reasoning . Taking another step toward the proceeding bits of codecontained in our code segment , we have \begin{eqnarray} \{ <var:I> = <var:J> \} \, <var:i0> := <nat:6> \, \{ <var:I> = <var:J> \land <var:i0> = <nat:6> \} \\ \{ <var:I> = <var:J> \land <var:i0> = <nat:6> \} \, <var:M> := <var:i0\, \{ <var:I> = <var:J> \land <var:M> = <nat:6> \} \end{eqnarray} This is guaranteed using the variable binding rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:I> = <var:J> }} <var:i0> := <nat:6> ; <var:M> := <var:i0> {{ <var:M> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:J> /\ <var:M> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 