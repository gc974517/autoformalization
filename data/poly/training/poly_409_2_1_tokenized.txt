\begin{document} \begin{theorem} Consider the following set of commands such that \begin{verbatim} <var:U0> := <nat:7> ; <var:q> := <var:U0> \end{verbatim} Given $ <var:c> = <var:n> $ --- given all $ <var:n> \in \mathbb{Z}^+ $ --- ahead of running this list of commands it must be that we see $ <var:q> = <nat:7> $ once list of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of the code segment is evident using Hoare techniques . Advancing to the proceeding lines of codeseen in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:n> \} & <var:U0> := <nat:7> & \{ <var:c> = <var:n> \land <var:U0> = <nat:7> \} \\ \{ <var:c> = <var:n> \land <var:U0> = <nat:7> \} & <var:q> := <var:U0& \{ <var:c> = <var:n> \land <var:q> = <nat:7> \} \end{tabular} This is shown using the assignment rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:c> = <var:n> }} <var:U0> := <nat:7> ; <var:q> := <var:U0> {{ <var:q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 