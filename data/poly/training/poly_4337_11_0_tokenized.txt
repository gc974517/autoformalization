\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:i> ; <var:U2> := <var:U2> * <var:i> ; <var:U3> := <nat:1> ; <var:U3> := <var:U3> * <var:i> ; <var:U3> := <var:U3> * <var:i> ; <var:U3> := <var:U3> * <var:i> ; <var:N> := <var:U3> ; <var:N> := <var:N> + <var:U2> ; <var:N> := <var:N> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assume it to be that $ <var:i> = <var:n> $ ( with some whole numbers $ <var:n> $ ) prior to executing this code , it must be that $ <var:N> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our list of commands is given with usual Hoare reasoning . Moving on to the subsequent command contained in our series of commands , the variable assignmet statement \verb | <var:U0> := <nat:4> ; | . This command advances the precondition $ \{ <var:i> = <var:n> \} $ toward $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \} $ . This is deduced through the assignment inference rule given by Hoare logic . After , the environment update command binding $ <nat:7> $ toward $ <var:U2>$ . This code takes the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \} $ to the postcondition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \} $ . This is ensured through the assignment inference rule defined in standard Hoare techniques . Taking another step toward the following line contained in our code segment , the variable update command defining $ <var:U2> * <var:i> $ as $ <var:U2>$ . This takes the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \} $ toward $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> \} $ . This is sound by the assignment rule of typical Hoare logic . Shifting focus toward the next step in our list of commands , we have the code yielding $ <var:U2> * <var:i> $ into $ <var:U2>$ . This transfers $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> \} $ into $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \} $ . Moving on to the next step , we have the variable update statement defining $ <nat:1> $ toward $ <var:U3>$ . This redefines the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \} $ to the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \} $ . Moving on to the upcoming line of code contained in the set of commands , we see the code \verb | <var:U3> := <var:U3> * <var:i> ; | . This command forwards $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \} $ as the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> \} $ . This is known to be sound with the assignment inference rule given by Hoare logic . Now , the binding code letting $ <var:U3> * <var:i> $ toward $ <var:U3>$ . This statement redefines the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> \} $ into the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> ^ <nat:2> \} $ . Advancing to the next step , we have the variable update code assigning $ <var:U3> * <var:i> $ toward $ <var:U3>$ . This takes the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> ^ <nat:2> \} $ as $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> ^ <nat:3> \} $ . This is shown through the assignment rule in usual Hoare reasoning . Looking at the subsequent command seen in our list of instructions , we see the environment update statement \verb | <var:N> := <var:U3> ; | . This command advances $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:n> ^ <nat:3> \} $ as $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:N> = <nat:1> \times <var:n> ^ <nat:3> \} $ . Jumping to the proceeding bit of code found in the series of instructions , we see the variable assignmet code \verb | <var:N> := <var:N> + <var:U2> ; | . This forwards the precondition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:U2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:N> = <nat:1> \times <var:n> ^ <nat:3> \} $ into the condition $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:N> = <nat:1> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment scheme in standard Hoare techniques . Taking another step toward the subsequent command contained in the list of instructions , the binding line \verb | <var:N> := <var:N> + <var:U0> | . This advances $ \{ <var:i> = <var:n> \land <var:U0> = <nat:4> \land <var:N> = <nat:1> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> \} $ into the postcondition $ \{ <var:i> = <var:n> \land <var:N> = <nat:1> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:i> ; <var:U2> := <var:U2> * <var:i> ; <var:U3> := <nat:1> ; <var:U3> := <var:U3> * <var:i> ; <var:U3> := <var:U3> * <var:i> ; <var:U3> := <var:U3> * <var:i> ; <var:N> := <var:U3> ; <var:N> := <var:N> + <var:U2> ; <var:N> := <var:N> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:i> = <var:n> }} <def:poly> {{ <var:N> = <nat:1> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:U2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:N> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:U0> = <nat:4> /\ <var:N> = <nat:1> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:N> = <nat:1> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 