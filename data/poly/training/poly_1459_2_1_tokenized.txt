\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:8> ; <var:M> := <var:n0> \end{verbatim} Allow that $ <var:D> = <var:B> $ --- given any natural numbers $ <var:B> $ --- prior to interpreting the program , it must be that we see $ <var:M> = <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:B> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:D> = <var:B> \land <var:n0> = <nat:8> \} \\ <var:M> := <var:n0> \\ \{ <var:D> = <var:B> \land <var:M> = <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:D> = <var:B> }} <var:n0> := <nat:8> ; <var:M> := <var:n0> {{ <var:M> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:M> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 