\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:j0> := <nat:8> ; <var:s> := <var:j0> \end{verbatim} Allow $ <var:A> = <var:X> $ ahead of the evaluation of our set of instructions , then we have $ <var:s> = <nat:8> $ when set of instructions finishes . \end{theorem} \begin{proof} The flow of logic for this set of instructions is done through Hoare techniques . After , we have the variable binding command assigning $ <nat:8> $ into $ <var:j0>$ . This takes the condition $ \{ <var:A> = <var:X> \} $ as the postcondition $ \{ <var:A> = <var:X> \land <var:j0> = <nat:8> \} $ . This is shown to be logically sound with the assignment inference rule given in standard Hoare reasoning . Moving on to the upcoming step found in the code segment , we see the variable assignmet statement assigning $ <var:j0$ toward $ <var:s>$ . This redefines $ \{ <var:A> = <var:X> \land <var:j0> = <nat:8> \} $ as the postcondition $ \{ <var:A> = <var:X> \land <var:s> = <nat:8> \} $ . This is guaranteed by the assignment law obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:A> = <var:X> }} <var:j0> := <nat:8> ; <var:s> := <var:j0> {{ <var:s> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:s> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 