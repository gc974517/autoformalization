\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:7> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:x> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:x> ; <var:D2> := <var:D2> * <var:x> ; <var:d> := <var:D2> ; <var:d> := <var:d> + <var:D1> ; <var:d> := <var:d> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given given every $ <var:a> \in \mathbb{N} $ $ <var:x> = <var:a> $ ahead of the execution of this program it holds that we see $ <var:d> = <nat:6> \cdot <var:a> ^ <nat:2> + <nat:5> \cdot <var:a> + <nat:7> $ once series of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is clear through Hoare logic . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:a> \} & <var:D0> := <nat:7> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} \\ \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} & <var:D1> := <nat:5> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \} \end{tabular} Taking a look at the following piece of code found in the code , \[ \begin{tabular} {rcl} \{ <var:x> = <var:a> \} & <var:D0> := <nat:7> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} \end{tabular} This is known to be sound through the binding scheme from usual Hoare techniques . Considering the subsequent lines of codecontained in the code , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:a> \} & <var:D0> := <nat:7> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} \\ \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} & <var:D1> := <nat:5> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \} \\ \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \} & <var:D1> := <var:D1> * <var:x> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \times <var:a> \} \\ \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \times <var:a> \} & <var:D2> := <nat:6> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \land <var:D1> = <nat:5> \times <var:a> \land <var:D2> = <nat:6> \} \end{tabular} Observing the upcoming statement seen in our code , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:a> \} & <var:D0> := <nat:7> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} \end{tabular} This is sound by the variable assignmet law of standard Hoare reasoning . Advancing to the upcoming line of code seen in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:x> = <var:a> \} & <var:D0> := <nat:7> & \{ <var:x> = <var:a> \land <var:D0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:7> ; <var:D1> := <nat:5> ; <var:D1> := <var:D1> * <var:x> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:x> ; <var:D2> := <var:D2> * <var:x> ; <var:d> := <var:D2> ; <var:d> := <var:d> + <var:D1> ; <var:d> := <var:d> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:x> = <var:a> }} <def:poly> {{ <var:d> = <nat:6> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> * <var:a> /\ <var:D2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> * <var:a> /\ <var:D2> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> * <var:a> /\ <var:D2> = <nat:6> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:5> * <var:a> /\ <var:d> = <nat:6> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:D0> = <nat:7> /\ <var:d> = <nat:6> * <var:a> ^ <nat:2> + <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:d> = <nat:6> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 