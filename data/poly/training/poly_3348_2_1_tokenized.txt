\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:8> ; <var:x> := <var:j0> \end{verbatim} Assume $ <var:E> = <var:P> $ ( for every integers $ <var:P> $ ) prior to the evaluation of our set of instructions , it follows that $ <var:x> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is accomplished with standard Hoare reasoning . Shifting focus toward the upcoming statement seen in the series of instructions , we see the variable assignmet line yielding $ <nat:8> $ toward $ <var:j0>$ . This command forwards $ \{ <var:E> = <var:P> \} $ into $ \{ <var:E> = <var:P> \land <var:j0> = <nat:8> \} $ . This is shown to be logically sound through the assignment rule defined by standard Hoare techniques . Moving on to the next step contained in the list of commands , the environment update line \verb | <var:x> := <var:j0> | . This command redefines $ \{ <var:E> = <var:P> \land <var:j0> = <nat:8> \} $ toward the condition $ \{ <var:E> = <var:P> \land <var:x> = <nat:8> \} $ . This is sound by the assignment inference rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:E> = <var:P> }} <var:j0> := <nat:8> ; <var:x> := <var:j0> {{ <var:x> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:P> /\ <var:x> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 