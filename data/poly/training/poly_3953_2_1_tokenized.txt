\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:Z> := <var:t0> \end{verbatim} Given that we have $ <var:q> = <var:C> $ before the execution of this program , it holds that $ <var:Z> = <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is shown by typical Hoare techniques . Focusing on the subsequent statement seen in the list of instructions , the assignment code binding $ <nat:2> $ toward $ <var:t0>$ . This takes $ \{ <var:q> = <var:C> \} $ to the postcondition $ \{ <var:q> = <var:C> \land <var:t0> = <nat:2> \} $ . This is shown with the assignment inference rule of usual Hoare techniques . Looking at the subsequent bit of code found in the code , we have the code giving $ <var:t0$ into $ <var:Z>$ . This transfers $ \{ <var:q> = <var:C> \land <var:t0> = <nat:2> \} $ to $ \{ <var:q> = <var:C> \land <var:Z> = <nat:2> \} $ . This is shown by the assignment law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:q> = <var:C> }} <var:t0> := <nat:2> ; <var:Z> := <var:t0> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 