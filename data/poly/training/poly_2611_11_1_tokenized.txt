\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:n> ; <var:W2> := <var:W1> * <var:n> ; <var:W3> := <var:W2> * <var:n> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:b> := <var:W3> <var:b> := <var:b> + <var:W2> <var:b> := <var:b> + <var:W1> <var:b> := <var:b> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Given $ <var:n> = <var:f> $ ahead of executing this set of instructions it follows that $ <var:b> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:n> = <var:f> \} \\ <var:W1> := <var:n> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <var:f> \} \\ <var:W2> := <var:W1> * <var:n> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:n> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <var:f> \land <var:W2> = <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ <var:W1> := <var:W1> * <nat:8> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <nat:8> \times <var:f> \land <var:W2> = <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ <var:W2> := <var:W2> * <nat:3> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <nat:8> \times <var:f> \land <var:W2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:W3> = <var:f> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ <var:W3> := <var:W3> * <nat:3> ; \\ \{ <var:n> = <var:f> \land <var:W1> = <nat:8> \times <var:f> \land <var:W2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:W3> = <nat:3> \times <var:f> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ <var:b> := <var:W3> \\ \{ <var:n> = <var:f> \land <var:W1> = <nat:8> \times <var:f> \land <var:W2> = <nat:3> \times <var:f> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:b> = <nat:3> \times <var:f> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:W2> \\ \{ <var:n> = <var:f> \land <var:W1> = <nat:8> \times <var:f> \land <var:W0> = <nat:4> \land <var:b> = <nat:3> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:W1> \\ \{ <var:n> = <var:f> \land <var:W0> = <nat:4> \land <var:b> = <nat:3> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> \} \\ <var:b> := <var:b> + <var:W0> \\ \{ <var:n> = <var:f> \land <var:b> = <nat:3> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:4> \} \end{eqnarray} Given the above , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:n> ; <var:W2> := <var:W1> * <var:n> ; <var:W3> := <var:W2> * <var:n> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:8> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:b> := <var:W3> <var:b> := <var:b> + <var:W2> <var:b> := <var:b> + <var:W1> <var:b> := <var:b> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:n> = <var:f> }} <def:poly> {{ <var:b> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <var:f> /\ <var:W2> = <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <nat:8> * <var:f> /\ <var:W2> = <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <nat:8> * <var:f> /\ <var:W2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:W3> = <var:f> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <nat:8> * <var:f> /\ <var:W2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:f> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <nat:8> * <var:f> /\ <var:W2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:W0> = <nat:4> /\ <var:b> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W1> = <nat:8> * <var:f> /\ <var:W0> = <nat:4> /\ <var:b> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:W0> = <nat:4> /\ <var:b> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:f> /\ <var:b> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 