\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:4> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:4> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> \end{verbatim} Allowing ( for every integers $ <var:h> $ ) that $ <var:w> = <var:h> $ before the evaluation of the series of commands it follows that we have $ <var:K> = <nat:1> \cdot <var:h> ^ <nat:10> + <nat:1> \cdot <var:h> ^ <nat:9> + <nat:2> \cdot <var:h> ^ <nat:8> + <nat:4> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> $ once set of instructions has terminated . \end{theorem} \begin{proof} Applying usual Hoare reasoning returns : \begin{eqnarray} \{ <var:w> = <var:h> \} \\ <var:K> := <nat:1> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \} \\ <var:K> := <nat:1> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> + <nat:1> \} \\ <var:K> := <nat:2> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + <nat:2> \} \\ <var:K> := <nat:4> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:4> \} \\ <var:K> := <nat:2> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:2> \} \\ <var:K> := <nat:3> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:3> \} \\ <var:K> := <nat:2> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:6> + <nat:1> \times <var:h> ^ <nat:5> + <nat:2> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:2> \} \\ <var:K> := <nat:2> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:7> + <nat:1> \times <var:h> ^ <nat:6> + <nat:2> \times <var:h> ^ <nat:5> + <nat:4> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:3> + <nat:3> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:2> \} \\ <var:K> := <nat:4> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:8> + <nat:1> \times <var:h> ^ <nat:7> + <nat:2> \times <var:h> ^ <nat:6> + <nat:4> \times <var:h> ^ <nat:5> + <nat:2> \times <var:h> ^ <nat:4> + <nat:3> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:4> \} \\ <var:K> := <nat:3> + <var:K> * <var:w> ; \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:9> + <nat:1> \times <var:h> ^ <nat:8> + <nat:2> \times <var:h> ^ <nat:7> + <nat:4> \times <var:h> ^ <nat:6> + <nat:2> \times <var:h> ^ <nat:5> + <nat:3> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:3> \} \\ <var:K> := <nat:3> + <var:K> * <var:w> \\ \{ <var:w> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:10> + <nat:1> \times <var:h> ^ <nat:9> + <nat:2> \times <var:h> ^ <nat:8> + <nat:4> \times <var:h> ^ <nat:7> + <nat:2> \times <var:h> ^ <nat:6> + <nat:3> \times <var:h> ^ <nat:5> + <nat:2> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:3> \} \end{eqnarray} Hence , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:w> = <var:h> }} <var:K> := <nat:1> ; <var:K> := <nat:1> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:4> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:2> + <var:K> * <var:w> ; <var:K> := <nat:4> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> ; <var:K> := <nat:3> + <var:K> * <var:w> {{ <var:K> = <nat:1> * <var:h> ^ <nat:10> + <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:10> + <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 