\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:S> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:S> ; <var:K2> := <var:K2> * <var:S> ; <var:e> := <var:K2> ; <var:e> := <var:e> + <var:K1> ; <var:e> := <var:e> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:S> = <var:D> $ prior to the evaluation of the series of commands it holds that $ <var:e> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:6> $ when set of instructions terminates . \end{theorem} \begin{proof} Note that the following decorated series of instructions . \begin{eqnarray} \{ <var:S> = <var:D> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \} \\ <var:K1> := <nat:5> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> \} \\ <var:K1> := <var:K1> * <var:S> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> * <var:D> \} \\ <var:K2> := <nat:3> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> * <var:D> \land <var:K2> = <nat:3> \} \\ <var:K2> := <var:K2> * <var:S> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> * <var:D> \land <var:K2> = <nat:3> * <var:D> \} \\ <var:K2> := <var:K2> * <var:S> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> * <var:D> \land <var:K2> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:e> := <var:K2> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:K1> = <nat:5> * <var:D> \land <var:e> = <nat:3> * <var:D> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:K1> ; \\ \{ <var:S> = <var:D> \land <var:K0> = <nat:6> \land <var:e> = <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> \} \\ <var:e> := <var:e> + <var:K0> \\ \{ <var:S> = <var:D> \land <var:e> = <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:6> \} \end{eqnarray} The application of standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:6> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:S> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:S> ; <var:K2> := <var:K2> * <var:S> ; <var:e> := <var:K2> ; <var:e> := <var:e> + <var:K1> ; <var:e> := <var:e> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:S> = <var:D> }} <def:poly> {{ <var:e> = <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:D> /\ <var:K2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:D> /\ <var:K2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:D> /\ <var:K2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:5> * <var:D> /\ <var:e> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:K0> = <nat:6> /\ <var:e> = <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:D> /\ <var:e> = <nat:3> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 