\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:x> ; <var:y> := <var:o1> ; <var:y> := <var:y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:x> = <var:Z> $ ahead of the execution of this program , it holds that $ <var:y> = <nat:9> \times <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is demonstrated using this decorated list of commands . \begin{eqnarray} \{ <var:x> = <var:Z> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:x> = <var:Z> \land <var:o0> = <nat:2> \} \\ <var:o1> := <nat:9> ; \\ \{ <var:x> = <var:Z> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \} \\ <var:o1> := <var:o1> * <var:x> ; \\ \{ <var:x> = <var:Z> \land <var:o0> = <nat:2> \land <var:o1> = <nat:9> \cdot <var:Z> \} \\ <var:y> := <var:o1> ; \\ \{ <var:x> = <var:Z> \land <var:o0> = <nat:2> \land <var:y> = <nat:9> \cdot <var:Z> \} \\ <var:y> := <var:y> + <var:o0> \\ \{ <var:x> = <var:Z> \land <var:y> = <nat:9> \cdot <var:Z> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:x> ; <var:y> := <var:o1> ; <var:y> := <var:y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <def:poly> {{ <var:y> = <nat:9> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:o0> = <nat:2> /\ <var:y> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:y> = <nat:9> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 