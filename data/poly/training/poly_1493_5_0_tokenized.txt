\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:1> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:U> ; <var:S> := <var:h1> ; <var:S> := <var:S> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Assume it to hold that $ <var:U> = <var:k> $ --- given every $ <var:k> \in \mathbb{Z}^+ $ --- before running our list of commands it follows that we see $ <var:S> = <nat:9> * <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic returns : \begin{eqnarray} \{ <var:U> = <var:k> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:U> = <var:k> \land <var:h0> = <nat:1> \} \\ <var:h1> := <nat:9> ; \\ \{ <var:U> = <var:k> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \} \\ <var:h1> := <var:h1> * <var:U> ; \\ \{ <var:U> = <var:k> \land <var:h0> = <nat:1> \land <var:h1> = <nat:9> \cdot <var:k> \} \\ <var:S> := <var:h1> ; \\ \{ <var:U> = <var:k> \land <var:h0> = <nat:1> \land <var:S> = <nat:9> \cdot <var:k> \} \\ <var:S> := <var:S> + <var:h0> \\ \{ <var:U> = <var:k> \land <var:S> = <nat:9> \cdot <var:k> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:1> ; <var:h1> := <nat:9> ; <var:h1> := <var:h1> * <var:U> ; <var:S> := <var:h1> ; <var:S> := <var:S> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:U> = <var:k> }} <def:poly> {{ <var:S> = <nat:9> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:h0> = <nat:1> /\ <var:h1> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:h0> = <nat:1> /\ <var:S> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:S> = <nat:9> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 