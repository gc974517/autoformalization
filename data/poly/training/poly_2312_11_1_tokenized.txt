\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:I> ; <var:R2> := <var:R1> * <var:I> ; <var:R3> := <var:R2> * <var:I> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:2> ; <var:R3> := <var:R3> * <nat:7> ; <var:j> := <var:R3> <var:j> := <var:j> + <var:R2> <var:j> := <var:j> + <var:R1> <var:j> := <var:j> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:I> = <var:X> $ --- given all whole numbers $ <var:X> $ --- before interpreting this series of instructions , it follows that $ <var:j> = <nat:7> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:5> \cdot <var:X> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands can be done using typical Hoare reasoning . Observing the next statement seen in our program , we have the command assigning $ <var:I> $ to $ <var:R1>$ . This advances $ \{ <var:I> = <var:X> \} $ toward the condition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \} $ . This is given using the assignment rule from usual Hoare techniques . Following , we see the variable assignmet line \verb | <var:R2> := <var:R1> * <var:I> ; | . This redefines the condition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \} $ as the condition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \} $ . This is guaranteed using the assignment rule from standard Hoare techniques . Moving onward , the line letting $ <var:R2> * <var:I> $ into $ <var:R3>$ . This command redefines the precondition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \} $ into $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \} $ . This is sound using the assignment inference rule given by usual Hoare techniques . Immediately after , the assignment command assigning $ <nat:1> $ as $ <var:R0>$ . This command advances the condition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \} $ into $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . This is shown through the assignment law given in standard Hoare reasoning . Further , we have the statement \verb | <var:R1> := <var:R1> * <nat:5> ; | . This code moves the condition $ \{ <var:I> = <var:X> \land <var:R1> = <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ to $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . This is shown by the assignment inference rule found in standard Hoare logic . Stepping forward , we have the assignment code letting $ <var:R2> * <nat:2> $ as $ <var:R2>$ . This forwards the condition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ to the postcondition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . This is ensured through the assignment inference rule given in Hoare reasoning . Paying attention to the subsequent command contained in our program , the environment update command yielding $ <var:R3> * <nat:7> $ as $ <var:R3>$ . This takes $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R3> = <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ toward the postcondition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R3> = <nat:7> \times <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ . Moving onward , we have the binding command yielding $ <var:R3$ as $ <var:j>$ . This transfers the condition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R3> = <nat:7> \times <var:X> ^ <nat:3> \land <var:R0> = <nat:1> \} $ as the postcondition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> \} $ . This is shown by the assignment law defined by Hoare reasoning . Keeping momentum , we see the environment update command \verb | <var:j> := <var:j> + <var:R2> | . This code forwards the precondition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> \} $ toward $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> \} $ . This is sound with the assignment inference rule defined in usual Hoare techniques . Shifting focus toward the proceeding command seen in our series of instructions , we have the environment update code \verb | <var:j> := <var:j> + <var:R1> | . This code takes the precondition $ \{ <var:I> = <var:X> \land <var:R1> = <nat:5> \times <var:X> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> \} $ to the postcondition $ \{ <var:I> = <var:X> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:5> \times <var:X> \} $ . This is deduced using the assignment rule given by usual Hoare reasoning . Shifting focus toward the next command found in the program , we have the binding command \verb | <var:j> := <var:j> + <var:R0> | . This code moves the condition $ \{ <var:I> = <var:X> \land <var:R0> = <nat:1> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:5> \times <var:X> \} $ into the postcondition $ \{ <var:I> = <var:X> \land <var:j> = <nat:7> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:5> \times <var:X> + <nat:1> \} $ . This is deduced through the assignment rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:I> ; <var:R2> := <var:R1> * <var:I> ; <var:R3> := <var:R2> * <var:I> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:5> ; <var:R2> := <var:R2> * <nat:2> ; <var:R3> := <var:R3> * <nat:7> ; <var:j> := <var:R3> <var:j> := <var:j> + <var:R2> <var:j> := <var:j> + <var:R1> <var:j> := <var:j> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <def:poly> {{ <var:j> = <nat:7> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <var:X> /\ <var:R2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <var:X> /\ <var:R2> = <var:X> ^ <nat:2> /\ <var:R3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <var:X> /\ <var:R2> = <var:X> ^ <nat:2> /\ <var:R3> = <var:X> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <nat:5> * <var:X> /\ <var:R2> = <var:X> ^ <nat:2> /\ <var:R3> = <var:X> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <nat:5> * <var:X> /\ <var:R2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:R3> = <var:X> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <nat:5> * <var:X> /\ <var:R2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:R3> = <nat:7> * <var:X> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <nat:5> * <var:X> /\ <var:R2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:R0> = <nat:1> /\ <var:j> = <nat:7> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R1> = <nat:5> * <var:X> /\ <var:R0> = <nat:1> /\ <var:j> = <nat:7> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:R0> = <nat:1> /\ <var:j> = <nat:7> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:j> = <nat:7> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 