\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:5> ; <var:D> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for any positive integer coefficients $ <var:P> $ , $ <var:q> = <var:P> $ prior to executing our segment of code then we have $ <var:D> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be given by usual Hoare logic . Keeping momentum , we see \begin{verbatim} { <var:q> = <var:P> } <var:x0> := <nat:5> { <var:q> = <var:P> \land <var:x0> = <nat:5> } { <var:q> = <var:P> \land <var:x0> = <nat:5> } <var:D> := <var:x0{ <var:q> = <var:P> \land <var:D> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:D> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:q> = <var:P> }} <def:poly> {{ <var:D> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:P> /\ <var:D> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 