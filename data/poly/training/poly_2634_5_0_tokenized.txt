\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:F> ; <var:D> := <var:T1> ; <var:D> := <var:D> + <var:T0> \end{verbatim} Allowing --- given all $ <var:S> \in \mathbb{Z}^+ $ --- it to be that $ <var:F> = <var:S> $ prior to executing the list of commands , it holds that $ <var:D> = <nat:1> \times <var:S> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands is done with typical Hoare reasoning . Paying attention to the subsequent command in our set of instructions , we see the line \verb | <var:T0> := <nat:5> ; | . This takes $ \{ <var:F> = <var:S> \} $ toward the postcondition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \} $ . This is deduced using the assignment inference rule given in usual Hoare reasoning . Moving onward , the variable assignmet statement defining $ <nat:1> $ to $ <var:T1>$ . This transfers the precondition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \} $ as the condition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:T1> = <nat:1> \} $ . Moving on to the following line of code found in our segment of code , the line assigning $ <var:T1> * <var:F> $ as $ <var:T1>$ . This statement forwards the condition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:T1> = <nat:1> \} $ as $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:T1> = <nat:1> \times <var:S> \} $ . Going to the next step , the assignment command \verb | <var:D> := <var:T1> ; | . This takes the precondition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:T1> = <nat:1> \times <var:S> \} $ toward $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:D> = <nat:1> \times <var:S> \} $ . This is shown by the assignment inference rule obtained from typical Hoare logic . Shifting focus toward the proceeding line of code contained in the list of instructions , we have the environment update statement \verb | <var:D> := <var:D> + <var:T0> | . This code transfers the precondition $ \{ <var:F> = <var:S> \land <var:T0> = <nat:5> \land <var:D> = <nat:1> \times <var:S> \} $ as $ \{ <var:F> = <var:S> \land <var:D> = <nat:1> \times <var:S> + <nat:5> \} $ . This is deduced with the assignment inference rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <var:T0> := <nat:5> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:F> ; <var:D> := <var:T1> ; <var:D> := <var:D> + <var:T0> {{ <var:D> = <nat:1> * <var:S> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:T0> = <nat:5> /\ <var:D> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:D> = <nat:1> * <var:S> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 