\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:r> ; <var:Z> := <var:o1> ; <var:Z> := <var:Z> + <var:o0> \end{verbatim} Given it to be that $ <var:r> = <var:W> $ --- given any positive integer coefficients $ <var:W> $ --- ahead of executing our list of instructions , then $ <var:Z> = <nat:5> * <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:r> = <var:W> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:r> = <var:W> \land <var:o0> = <nat:1> \} \\ <var:o1> := <nat:5> ; \\ \{ <var:r> = <var:W> \land <var:o0> = <nat:1> \land <var:o1> = <nat:5> \} \\ <var:o1> := <var:o1> * <var:r> ; \\ \{ <var:r> = <var:W> \land <var:o0> = <nat:1> \land <var:o1> = <nat:5> \cdot <var:W> \} \\ <var:Z> := <var:o1> ; \\ \{ <var:r> = <var:W> \land <var:o0> = <nat:1> \land <var:Z> = <nat:5> \cdot <var:W> \} \\ <var:Z> := <var:Z> + <var:o0> \\ \{ <var:r> = <var:W> \land <var:Z> = <nat:5> \cdot <var:W> + <nat:1> \} \end{eqnarray} Thus , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <var:o0> := <nat:1> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:r> ; <var:Z> := <var:o1> ; <var:Z> := <var:Z> + <var:o0> {{ <var:Z> = <nat:5> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:o0> = <nat:1> /\ <var:Z> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:Z> = <nat:5> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 