\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:7> ; <var:Y> := <var:N3> <var:Y> := <var:Y> + <var:N2> <var:Y> := <var:Y> + <var:N1> <var:Y> := <var:Y> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Given it to be that $ <var:T> = <var:U> $ ahead of executing the series of instructions it follows that we have $ <var:Y> = <nat:7> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> $ after segment of code has executed . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:T> = <var:U> \} \\ <var:N1> := <var:T> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <var:U> \} \\ <var:N2> := <var:N1> * <var:T> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <var:U> \land <var:N2> = <var:U> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:T> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <var:U> \land <var:N2> = <var:U> ^ <nat:2> \land <var:N3> = <var:U> ^ <nat:3> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <var:U> \land <var:N2> = <var:U> ^ <nat:2> \land <var:N3> = <var:U> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ <var:N1> := <var:N1> * <nat:6> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <nat:6> \times <var:U> \land <var:N2> = <var:U> ^ <nat:2> \land <var:N3> = <var:U> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ <var:N2> := <var:N2> * <nat:6> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <nat:6> \times <var:U> \land <var:N2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:N3> = <var:U> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ <var:N3> := <var:N3> * <nat:7> ; \\ \{ <var:T> = <var:U> \land <var:N1> = <nat:6> \times <var:U> \land <var:N2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:N3> = <nat:7> \times <var:U> ^ <nat:3> \land <var:N0> = <nat:7> \} \\ <var:Y> := <var:N3> \\ \{ <var:T> = <var:U> \land <var:N1> = <nat:6> \times <var:U> \land <var:N2> = <nat:6> \times <var:U> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:Y> = <nat:7> \times <var:U> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:N2> \\ \{ <var:T> = <var:U> \land <var:N1> = <nat:6> \times <var:U> \land <var:N0> = <nat:7> \land <var:Y> = <nat:7> \times <var:U> ^ <nat:3> + <nat:6> \times <var:U> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:N1> \\ \{ <var:T> = <var:U> \land <var:N0> = <nat:7> \land <var:Y> = <nat:7> \times <var:U> ^ <nat:3> + <nat:6> \times <var:U> ^ <nat:2> + <nat:6> \times <var:U> \} \\ <var:Y> := <var:Y> + <var:N0> \\ \{ <var:T> = <var:U> \land <var:Y> = <nat:7> \times <var:U> ^ <nat:3> + <nat:6> \times <var:U> ^ <nat:2> + <nat:6> \times <var:U> + <nat:7> \} \end{eqnarray} Thus , our code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:6> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:7> ; <var:Y> := <var:N3> <var:Y> := <var:Y> + <var:N2> <var:Y> := <var:Y> + <var:N1> <var:Y> := <var:Y> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:T> = <var:U> }} <def:poly> {{ <var:Y> = <nat:7> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <var:U> /\ <var:N2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <var:U> /\ <var:N2> = <var:U> ^ <nat:2> /\ <var:N3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <var:U> /\ <var:N2> = <var:U> ^ <nat:2> /\ <var:N3> = <var:U> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <nat:6> * <var:U> /\ <var:N2> = <var:U> ^ <nat:2> /\ <var:N3> = <var:U> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <nat:6> * <var:U> /\ <var:N2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:N3> = <var:U> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <nat:6> * <var:U> /\ <var:N2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:U> ^ <nat:3> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <nat:6> * <var:U> /\ <var:N2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:N0> = <nat:7> /\ <var:Y> = <nat:7> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N1> = <nat:6> * <var:U> /\ <var:N0> = <nat:7> /\ <var:Y> = <nat:7> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:N0> = <nat:7> /\ <var:Y> = <nat:7> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:U> /\ <var:Y> = <nat:7> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 