\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:1> ; <var:Z> := <var:f0> \end{verbatim} Given it to hold that $ <var:b> = <var:k> $ before running this code segment , it must be that we see $ <var:Z> = <nat:1> $ when code terminates . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is clear with standard Hoare techniques . Moving forward , we see the variable binding line \verb | <var:f0> := <nat:1> ; | . This line moves the precondition $ \{ <var:b> = <var:k> \} $ as the postcondition $ \{ <var:b> = <var:k> \land <var:f0> = <nat:1> \} $ . Now , the assignment line \verb | <var:Z> := <var:f0> | . This line moves $ \{ <var:b> = <var:k> \land <var:f0> = <nat:1> \} $ to $ \{ <var:b> = <var:k> \land <var:Z> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:b> = <var:k> }} <var:f0> := <nat:1> ; <var:Z> := <var:f0> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 