\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:1> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:J> ; <var:G4> := <nat:2> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:t> := <var:G4> ; <var:t> := <var:t> + <var:G1> ; <var:t> := <var:t> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:J> = <var:O> $ before evaluating this code segment it must be that we have $ <var:t> = <nat:2> \cdot <var:O> ^ <nat:4> + <nat:1> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the program is evident using standard Hoare techniques . Taking another step toward the subsequent commands found in our set of instructions , \begin{eqnarray} \{ <var:J> = <var:O> \} \, <var:G0> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \, <var:G1> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \, <var:G1> := <var:G1> * <var:J> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \cdot <var:O> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:J> = <var:O> \} \, <var:G0> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \, <var:G1> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \, <var:G1> := <var:G1> * <var:J> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \cdot <var:O> \} \end{eqnarray} Shifting focus toward the next commands in our list of instructions , we see \begin{eqnarray} \{ <var:J> = <var:O> \} \, <var:G0> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \, <var:G1> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \\ \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \} \, <var:G1> := <var:G1> * <var:J> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \land <var:G1> = <nat:1> \cdot <var:O> \} \end{eqnarray} Immediately after , we see \begin{eqnarray} \{ <var:J> = <var:O> \} \, <var:G0> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \end{eqnarray} This is shown through the environment update inference rule defined by Hoare techniques . Advancing to the next step , we have \begin{eqnarray} \{ <var:J> = <var:O> \} \, <var:G0> := <nat:1> \, \{ <var:J> = <var:O> \land <var:G0> = <nat:1> \} \end{eqnarray} This is shown by the law from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G4> : string := " <var:G4> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:J> ; <var:G4> := <nat:2> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:G4> := <var:G4> * <var:J> ; <var:t> := <var:G4> ; <var:t> := <var:t> + <var:G1> ; <var:t> := <var:t> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:J> = <var:O> }} <def:poly> {{ <var:t> = <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:G4> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:G4> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:G4> = <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:G4> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:G4> = <nat:2> * <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:1> * <var:O> /\ <var:t> = <nat:2> * <var:O> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:G0> = <nat:1> /\ <var:t> = <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:t> = <nat:2> * <var:O> ^ <nat:4> + <nat:1> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 