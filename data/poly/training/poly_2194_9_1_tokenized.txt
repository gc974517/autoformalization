\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O3> := <var:O2> * <var:B> ; <var:O0> := <nat:4> ; <var:O2> := <var:O2> * <nat:4> ; <var:O3> := <var:O3> * <nat:4> ; <var:J> := <var:O3> <var:J> := <var:J> + <var:O2> <var:J> := <var:J> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given ( for any natural coefficients $ <var:e> $ ) $ <var:B> = <var:e> $ ahead of executing this set of commands , it follows that $ <var:J> = <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is given through the following decorated code . \begin{eqnarray} \{ <var:B> = <var:e> \} \\ <var:O1> := <var:B> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \} \end{eqnarray} Furthering running our code segment gives : \begin{eqnarray} <var:O2> := <var:O1> * <var:B> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:B> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O2> := <var:O2> * <nat:4> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <nat:4> * <var:e> ^ <nat:2> \land <var:O3> = <var:e> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:O3> := <var:O3> * <nat:4> ; \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <nat:4> * <var:e> ^ <nat:2> \land <var:O3> = <nat:4> * <var:e> ^ <nat:3> \land <var:O0> = <nat:4> \} \\ <var:J> := <var:O3> \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O2> = <nat:4> * <var:e> ^ <nat:2> \land <var:O0> = <nat:4> \land <var:J> = <nat:4> * <var:e> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:O2> \\ \{ <var:B> = <var:e> \land <var:O1> = <var:e> \land <var:O0> = <nat:4> \land <var:J> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:O0> \\ \{ <var:B> = <var:e> \land <var:J> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> \} \end{eqnarray} Applying usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:B> ; <var:O2> := <var:O1> * <var:B> ; <var:O3> := <var:O2> * <var:B> ; <var:O0> := <nat:4> ; <var:O2> := <var:O2> * <nat:4> ; <var:O3> := <var:O3> * <nat:4> ; <var:J> := <var:O3> <var:J> := <var:J> + <var:O2> <var:J> := <var:J> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:B> = <var:e> }} <def:poly> {{ <var:J> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:O3> = <var:e> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:O3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:O0> = <nat:4> /\ <var:J> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:O1> = <var:e> /\ <var:O0> = <nat:4> /\ <var:J> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:J> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 