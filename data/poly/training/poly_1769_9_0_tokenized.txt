\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:d0> := <nat:5> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:w> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:w> ; <var:d2> := <var:d2> * <var:w> ; <var:y> := <var:d2> ; <var:y> := <var:y> + <var:d1> ; <var:y> := <var:y> + <var:d0> \end{verbatim} Allowing it to be that $ <var:w> = <var:h> $ prior to running this list of commands , it follows that we see $ <var:y> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this program can be seen using Hoare techniques . Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:h> \} & <var:d0> := <nat:5> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \} & <var:d1> := <nat:3> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \} & <var:d1> := <var:d1> * <var:w> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \} \end{tabular} Moving on to the next step , we have \[ \begin{tabular} {rcl} \{ <var:w> = <var:h> \} & <var:d0> := <nat:5> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \} \end{tabular} This is shown to be logically sound by the variable assignmet rule defined in Hoare techniques . Focusing on the proceeding statements seen in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:w> = <var:h> \} & <var:d0> := <nat:5> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \} & <var:d1> := <nat:3> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \} & <var:d1> := <var:d1> * <var:w> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \} & <var:d2> := <nat:3> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \land <var:d2> = <nat:3> \} \\ \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \land <var:d2> = <nat:3> \} & <var:d2> := <var:d2> * <var:w> & \{ <var:w> = <var:h> \land <var:d0> = <nat:5> \land <var:d1> = <nat:3> \times <var:h> \land <var:d2> = <nat:3> \times <var:h> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:w> = <var:h> }} <var:d0> := <nat:5> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:w> ; <var:d2> := <nat:3> ; <var:d2> := <var:d2> * <var:w> ; <var:d2> := <var:d2> * <var:w> ; <var:y> := <var:d2> ; <var:y> := <var:y> + <var:d1> ; <var:y> := <var:y> + <var:d0> {{ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> * <var:h> /\ <var:d2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> * <var:h> /\ <var:d2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> * <var:h> /\ <var:d2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:d1> = <nat:3> * <var:h> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:d0> = <nat:5> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:h> /\ <var:y> = <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 