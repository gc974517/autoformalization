\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:M1> := <var:p> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:2> ; <var:n> := <var:M1> <var:n> := <var:n> + <var:M0> \end{verbatim} Allow it to be that $ <var:p> = <var:d> $ prior to evaluating this code segment then we see $ <var:n> = <nat:2> \times <var:d> + <nat:2> $ . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:p> = <var:d> \} \\ <var:M1> := <var:p> ; \\ \{ <var:p> = <var:d> \land <var:M1> = <var:d> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:p> = <var:d> \land <var:M1> = <var:d> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:2> ; \\ \{ <var:p> = <var:d> \land <var:M1> = <nat:2> \cdot <var:d> \land <var:M0> = <nat:2> \} \\ <var:n> := <var:M1> \\ \{ <var:p> = <var:d> \land <var:M0> = <nat:2> \land <var:n> = <nat:2> \cdot <var:d> \} \\ <var:n> := <var:n> + <var:M0> \\ \{ <var:p> = <var:d> \land <var:n> = <nat:2> \cdot <var:d> + <nat:2> \} \end{eqnarray} Using Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:p> = <var:d> }} <var:M1> := <var:p> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:2> ; <var:n> := <var:M1> <var:n> := <var:n> + <var:M0> {{ <var:n> = <nat:2> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:M1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:M1> = <var:d> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:M1> = <nat:2> * <var:d> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:M0> = <nat:2> /\ <var:n> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:d> /\ <var:n> = <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 