\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z> := <nat:2> ; <var:Z> := <nat:1> + <var:Z> * <var:e> ; <var:Z> := <var:Z> * <var:e> ; <var:Z> := <var:Z> * <var:e> ; <var:Z> := <nat:4> + <var:Z> * <var:e> ; <var:Z> := <nat:2> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> ; <var:Z> := <nat:2> + <var:Z> * <var:e> ; <var:Z> := <nat:4> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Given $ <var:e> = <var:z> $ prior to executing the code it follows that we see $ <var:Z> = <nat:2> \cdot <var:z> ^ <nat:10> + <nat:1> \cdot <var:z> ^ <nat:9> + <nat:4> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:3> $ after set of commands is done executing . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:Z> := <nat:2> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> + <nat:1> \} \\ <var:Z> := <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + \} \\ <var:Z> := <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + \} \\ <var:Z> := <nat:4> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> + <nat:2> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:2> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:3> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:e> \\ \{ <var:e> = <var:z> \land <var:Z> = <nat:2> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> \} \end{eqnarray} Given the above , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:2> ; <var:Z> := <nat:1> + <var:Z> * <var:e> ; <var:Z> := <var:Z> * <var:e> ; <var:Z> := <var:Z> * <var:e> ; <var:Z> := <nat:4> + <var:Z> * <var:e> ; <var:Z> := <nat:2> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> ; <var:Z> := <nat:2> + <var:Z> * <var:e> ; <var:Z> := <nat:4> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> ; <var:Z> := <nat:3> + <var:Z> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <def:poly> {{ <var:Z> = <nat:2> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Z> = <nat:2> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 