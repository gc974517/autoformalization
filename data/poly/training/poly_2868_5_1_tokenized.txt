\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n1> := <var:N> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:2> ; <var:C> := <var:n1> <var:C> := <var:C> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:N> = <var:U> $ before interpreting our list of instructions it follows that we have $ <var:C> = <nat:2> * <var:U> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions is clear by Hoare logic . Advancing to the proceeding statements in our list of instructions , \begin{verbatim} { <var:N> = <var:U> } <var:n1> := <var:N> { <var:N> = <var:U> \land <var:n1> = <var:U> } { <var:N> = <var:U> \land <var:n1> = <var:U> } <var:n0> := <nat:5> { <var:N> = <var:U> \land <var:n1> = <var:U> \land <var:n0> = <nat:5> } { <var:N> = <var:U> \land <var:n1> = <var:U> \land <var:n0> = <nat:5> } <var:n1> := <var:n1> * <nat:2> { <var:N> = <var:U> \land <var:n1> = <nat:2> * <var:U> \land <var:n0> = <nat:5> } \end{verbatim} Moving on to the proceeding step contained in our list of instructions , we see \begin{verbatim} { <var:N> = <var:U> } <var:n1> := <var:N> { <var:N> = <var:U> \land <var:n1> = <var:U> } \end{verbatim} This is guaranteed with the law found in typical Hoare techniques . Moving on to the subsequent line of code seen in the series of instructions , we see \begin{verbatim} { <var:N> = <var:U> } <var:n1> := <var:N> { <var:N> = <var:U> \land <var:n1> = <var:U> } \end{verbatim} This is rigorously given with the variable assignmet rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:N> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:2> ; <var:C> := <var:n1> <var:C> := <var:C> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:N> = <var:U> }} <def:poly> {{ <var:C> = <nat:2> * <var:U> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:n1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:n1> = <var:U> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:n1> = <nat:2> * <var:U> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:n0> = <nat:5> /\ <var:C> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:C> = <nat:2> * <var:U> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 