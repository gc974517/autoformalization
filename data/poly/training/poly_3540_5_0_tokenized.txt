\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:W0> := <nat:5> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:n> ; <var:G> := <var:W1> ; <var:G> := <var:G> + <var:W0> \end{verbatim} Assuming that we have $ <var:n> = <var:i> $ prior to evaluating our series of instructions , it holds that $ <var:G> = <nat:8> \times <var:i> + <nat:5> $ after program exits . \end{theorem} \begin{proof} The argument for this code segment can be done using Hoare logic . Moving on to the proceeding step in our series of instructions , the binding line giving $ <nat:5> $ to $ <var:W0>$ . This takes the condition $ \{ <var:n> = <var:i> \} $ as $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \} $ . Considering the subsequent statement found in our series of instructions , we have the statement \verb | <var:W1> := <nat:8> ; | . This code advances $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \} $ to the condition $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:8> \} $ . Advancing , we see the variable assignmet line assigning $ <var:W1> * <var:n> $ to $ <var:W1>$ . This takes $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:8> \} $ toward the postcondition $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:8> \times <var:i> \} $ . This is rigorously given by the assignment inference rule obtained from standard Hoare logic . Moving forward to the next step , we see the environment update code \verb | <var:G> := <var:W1> ; | . This statement advances $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:W1> = <nat:8> \times <var:i> \} $ toward the condition $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:G> = <nat:8> \times <var:i> \} $ . Shifting focus toward the upcoming command seen in the code , the variable binding line \verb | <var:G> := <var:G> + <var:W0> | . This advances the condition $ \{ <var:n> = <var:i> \land <var:W0> = <nat:5> \land <var:G> = <nat:8> \times <var:i> \} $ to the condition $ \{ <var:n> = <var:i> \land <var:G> = <nat:8> \times <var:i> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:n> = <var:i> }} <var:W0> := <nat:5> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:n> ; <var:G> := <var:W1> ; <var:G> := <var:G> + <var:W0> {{ <var:G> = <nat:8> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:W0> = <nat:5> /\ <var:G> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:i> /\ <var:G> = <nat:8> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 