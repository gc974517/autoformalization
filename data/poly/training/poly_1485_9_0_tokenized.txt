\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:q> ; <var:i2> := <nat:5> ; <var:i2> := <var:i2> * <var:q> ; <var:i2> := <var:i2> * <var:q> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assuming it to hold that $ <var:q> = <var:O> $ , given integers $ <var:O> $ , ahead of interpreting the set of instructions , then $ <var:j> = <nat:5> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:2> $ after list of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:O> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \} \\ <var:i1> := <nat:2> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \} \\ <var:i1> := <var:i1> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \cdot <var:O> \} \\ <var:i2> := <nat:5> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \cdot <var:O> \land <var:i2> = <nat:5> \} \\ <var:i2> := <var:i2> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> \} \\ <var:i2> := <var:i2> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:j> := <var:i2> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:i1> = <nat:2> \cdot <var:O> \land <var:j> = <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:i1> ; \\ \{ <var:q> = <var:O> \land <var:i0> = <nat:2> \land <var:j> = <nat:5> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> \} \\ <var:j> := <var:j> + <var:i0> \\ \{ <var:q> = <var:O> \land <var:j> = <nat:5> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:2> ; <var:i1> := <var:i1> * <var:q> ; <var:i2> := <nat:5> ; <var:i2> := <var:i2> * <var:q> ; <var:i2> := <var:i2> * <var:q> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:q> = <var:O> }} <def:poly> {{ <var:j> = <nat:5> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> * <var:O> /\ <var:i2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:2> * <var:O> /\ <var:j> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:i0> = <nat:2> /\ <var:j> = <nat:5> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:j> = <nat:5> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 