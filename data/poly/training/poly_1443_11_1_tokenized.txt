\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:I> ; <var:n2> := <var:n1> * <var:I> ; <var:n3> := <var:n2> * <var:I> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:7> ; <var:n3> := <var:n3> * <nat:4> ; <var:v> := <var:n3> <var:v> := <var:v> + <var:n2> <var:v> := <var:v> + <var:n1> <var:v> := <var:v> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Allowing given every $ <var:f> \in \mathbb{N} $ $ <var:I> = <var:f> $ prior to interpreting this set of instructions , it follows that we have $ <var:v> = <nat:4> * <var:f> ^ <nat:3> + <nat:7> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:5> $ after set of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:f> \} \\ <var:n1> := <var:I> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <var:f> \} \\ <var:n2> := <var:n1> * <var:I> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:I> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \} \\ <var:n0> := <nat:5> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ <var:n1> := <var:n1> * <nat:2> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <nat:2> \cdot <var:f> \land <var:n2> = <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ <var:n2> := <var:n2> * <nat:7> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <nat:2> \cdot <var:f> \land <var:n2> = <nat:7> \cdot <var:f> ^ <nat:2> \land <var:n3> = <var:f> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ <var:n3> := <var:n3> * <nat:4> ; \\ \{ <var:I> = <var:f> \land <var:n1> = <nat:2> \cdot <var:f> \land <var:n2> = <nat:7> \cdot <var:f> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:f> ^ <nat:3> \land <var:n0> = <nat:5> \} \\ <var:v> := <var:n3> \\ \{ <var:I> = <var:f> \land <var:n1> = <nat:2> \cdot <var:f> \land <var:n2> = <nat:7> \cdot <var:f> ^ <nat:2> \land <var:n0> = <nat:5> \land <var:v> = <nat:4> \cdot <var:f> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:n2> \\ \{ <var:I> = <var:f> \land <var:n1> = <nat:2> \cdot <var:f> \land <var:n0> = <nat:5> \land <var:v> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:7> \cdot <var:f> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:n1> \\ \{ <var:I> = <var:f> \land <var:n0> = <nat:5> \land <var:v> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:7> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> \} \\ <var:v> := <var:v> + <var:n0> \\ \{ <var:I> = <var:f> \land <var:v> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:7> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:5> \} \end{eqnarray} Using typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:I> ; <var:n2> := <var:n1> * <var:I> ; <var:n3> := <var:n2> * <var:I> ; <var:n0> := <nat:5> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:7> ; <var:n3> := <var:n3> * <nat:4> ; <var:v> := <var:n3> <var:v> := <var:v> + <var:n2> <var:v> := <var:v> + <var:n1> <var:v> := <var:v> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:I> = <var:f> }} <def:poly> {{ <var:v> = <nat:4> * <var:f> ^ <nat:3> + <nat:7> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <var:f> /\ <var:n2> = <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <nat:2> * <var:f> /\ <var:n2> = <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <nat:2> * <var:f> /\ <var:n2> = <nat:7> * <var:f> ^ <nat:2> /\ <var:n3> = <var:f> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <nat:2> * <var:f> /\ <var:n2> = <nat:7> * <var:f> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <nat:2> * <var:f> /\ <var:n2> = <nat:7> * <var:f> ^ <nat:2> /\ <var:n0> = <nat:5> /\ <var:v> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n1> = <nat:2> * <var:f> /\ <var:n0> = <nat:5> /\ <var:v> = <nat:4> * <var:f> ^ <nat:3> + <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:n0> = <nat:5> /\ <var:v> = <nat:4> * <var:f> ^ <nat:3> + <nat:7> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:v> = <nat:4> * <var:f> ^ <nat:3> + <nat:7> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 