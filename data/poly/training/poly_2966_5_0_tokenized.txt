\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:R> ; <var:Y> := <var:F1> ; <var:Y> := <var:Y> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:R> = <var:D> $ before executing our list of instructions , it holds that $ <var:Y> = <nat:7> \cdot <var:D> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this code is demonstrated using standard Hoare reasoning . Considering the upcoming pieces of code contained in our series of instructions , \verb | { <var:R> = <var:D> } <var:F0> := <nat:5> { <var:R> = <var:D> \land <var:F0> = <nat:5> } | , \verb | { <var:R> = <var:D> \land <var:F0> = <nat:5> } <var:F1> := <nat:7> { <var:R> = <var:D> \land <var:F0> = <nat:5> \land <var:F1> = <nat:7> } | , \verb | { <var:R> = <var:D> \land <var:F0> = <nat:5> \land <var:F1> = <nat:7> } <var:F1> := <var:F1> * <var:R> { <var:R> = <var:D> \land <var:F0> = <nat:5> \land <var:F1> = <nat:7> \times <var:D> } | and \verb | { <var:R> = <var:D> \land <var:F0> = <nat:5> \land <var:F1> = <nat:7> \times <var:D> } <var:Y> := <var:F1> { <var:R> = <var:D> \land <var:F0> = <nat:5> \land <var:Y> = <nat:7> \times <var:D> } | . Taking another step toward the upcoming line of code seen in our set of commands , we see \verb | { <var:R> = <var:D> } <var:F0> := <nat:5> { <var:R> = <var:D> \land <var:F0> = <nat:5> } | . This is rigorously given by the variable update scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:5> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:R> ; <var:Y> := <var:F1> ; <var:Y> := <var:Y> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:R> = <var:D> }} <def:poly> {{ <var:Y> = <nat:7> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:D> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:D> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:D> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:D> /\ <var:F0> = <nat:5> /\ <var:Y> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:D> /\ <var:Y> = <nat:7> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 