\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:2> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:p> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:p> = <var:n> $ ( for natural coefficients $ <var:n> $ ) prior to the evaluation of our set of instructions , it follows that $ <var:m> = <nat:4> \times <var:n> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be shown through standard Hoare reasoning . Immediately after , \[ \begin{tabular} {rcl} \{ <var:p> = <var:n> \} & <var:G0> := <nat:2> & \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \} \\ \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \} & <var:G1> := <nat:4> & \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \} \\ \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> \} & <var:G1> := <var:G1> * <var:p> & \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> * <var:n> \} \\ \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \land <var:G1> = <nat:4> * <var:n> \} & <var:m> := <var:G1> & \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \land <var:m> = <nat:4> * <var:n> \} \end{tabular} This is known to be sound by the variable update scheme defined in usual Hoare techniques . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:p> = <var:n> \} & <var:G0> := <nat:2> & \{ <var:p> = <var:n> \land <var:G0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:2> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:p> ; <var:m> := <var:G1> ; <var:m> := <var:m> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:p> = <var:n> }} <def:poly> {{ <var:m> = <nat:4> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:G0> = <nat:2> /\ <var:m> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:m> = <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 