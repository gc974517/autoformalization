\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:R> ; <var:h2> := <var:h1> * <var:R> ; <var:h3> := <var:h2> * <var:R> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:3> ; <var:h2> := <var:h2> * <nat:9> ; <var:h3> := <var:h3> * <nat:9> ; <var:s> := <var:h3> <var:s> := <var:s> + <var:h2> <var:s> := <var:s> + <var:h1> <var:s> := <var:s> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given natural numbers $ <var:x> $ --- that $ <var:R> = <var:x> $ before interpreting this series of commands it follows that $ <var:s> = <nat:9> \times <var:x> ^ <nat:3> + <nat:9> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:R> = <var:x> \} \\ <var:h1> := <var:R> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <var:x> \} \\ <var:h2> := <var:h1> * <var:R> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <var:x> \land <var:h2> = <var:x> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:R> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <var:x> \land <var:h2> = <var:x> ^ <nat:2> \land <var:h3> = <var:x> ^ <nat:3> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <var:x> \land <var:h2> = <var:x> ^ <nat:2> \land <var:h3> = <var:x> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:3> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <nat:3> \cdot <var:x> \land <var:h2> = <var:x> ^ <nat:2> \land <var:h3> = <var:x> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h2> := <var:h2> * <nat:9> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <nat:3> \cdot <var:x> \land <var:h2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:h3> = <var:x> ^ <nat:3> \land <var:h0> = <nat:8> \} \\ <var:h3> := <var:h3> * <nat:9> ; \\ \{ <var:R> = <var:x> \land <var:h1> = <nat:3> \cdot <var:x> \land <var:h2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:h3> = <nat:9> \cdot <var:x> ^ <nat:3> \land <var:h0> = <nat:8> \} \end{eqnarray} Allowing running this list of instructions results in : \begin{eqnarray} <var:s> := <var:h3> \\ \{ <var:R> = <var:x> \land <var:h1> = <nat:3> \cdot <var:x> \land <var:h2> = <nat:9> \cdot <var:x> ^ <nat:2> \land <var:h0> = <nat:8> \land <var:s> = <nat:9> \cdot <var:x> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:h2> \\ \{ <var:R> = <var:x> \land <var:h1> = <nat:3> \cdot <var:x> \land <var:h0> = <nat:8> \land <var:s> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:h1> \\ \{ <var:R> = <var:x> \land <var:h0> = <nat:8> \land <var:s> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> \} \\ <var:s> := <var:s> + <var:h0> \\ \{ <var:R> = <var:x> \land <var:s> = <nat:9> \cdot <var:x> ^ <nat:3> + <nat:9> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:8> \} \end{eqnarray} Thusly , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:R> ; <var:h2> := <var:h1> * <var:R> ; <var:h3> := <var:h2> * <var:R> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:3> ; <var:h2> := <var:h2> * <nat:9> ; <var:h3> := <var:h3> * <nat:9> ; <var:s> := <var:h3> <var:s> := <var:s> + <var:h2> <var:s> := <var:s> + <var:h1> <var:s> := <var:s> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:R> = <var:x> }} <def:poly> {{ <var:s> = <nat:9> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <var:x> /\ <var:h2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <var:x> /\ <var:h2> = <var:x> ^ <nat:2> /\ <var:h3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <var:x> /\ <var:h2> = <var:x> ^ <nat:2> /\ <var:h3> = <var:x> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <nat:3> * <var:x> /\ <var:h2> = <var:x> ^ <nat:2> /\ <var:h3> = <var:x> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <nat:3> * <var:x> /\ <var:h2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:h3> = <var:x> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <nat:3> * <var:x> /\ <var:h2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:h3> = <nat:9> * <var:x> ^ <nat:3> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <nat:3> * <var:x> /\ <var:h2> = <nat:9> * <var:x> ^ <nat:2> /\ <var:h0> = <nat:8> /\ <var:s> = <nat:9> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h1> = <nat:3> * <var:x> /\ <var:h0> = <nat:8> /\ <var:s> = <nat:9> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:h0> = <nat:8> /\ <var:s> = <nat:9> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:s> = <nat:9> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 