\begin{document} \begin{theorem} Consider the following set of commands such that \begin{verbatim} <var:v0> := <nat:2> ; <var:P> := <var:v0> \end{verbatim} Assume it to hold that $ <var:F> = <var:r> $ ahead of executing the list of instructions then we see $ <var:P> = <nat:2> $ after list of commands has finished executing . \end{theorem} \begin{proof} The method of proof for our program can be shown through typical Hoare logic . Honing in on the subsequent command found in the list of instructions , we see the environment update code defining $ <nat:2> $ into $ <var:v0>$ . This takes $ \{ <var:F> = <var:r> \} $ as the condition $ \{ <var:F> = <var:r> \land <var:v0> = <nat:2> \} $ . Honing in on the subsequent line of code in our code segment , we see the line \verb | <var:P> := <var:v0> | . This code forwards $ \{ <var:F> = <var:r> \land <var:v0> = <nat:2> \} $ as the condition $ \{ <var:F> = <var:r> \land <var:P> = <nat:2> \} $ . This is deduced by the assignment scheme given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:F> = <var:r> }} <var:v0> := <nat:2> ; <var:P> := <var:v0> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 