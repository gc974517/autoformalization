\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:N> ; <var:i> := <var:c1> ; <var:i> := <var:i> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Assuming $ <var:N> = <var:G> $ prior to interpreting the series of commands , it must be that we see $ <var:i> = <nat:1> \times <var:G> + <nat:3> $ once set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:G> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:N> = <var:G> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:1> ; \\ \{ <var:N> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> \} \\ <var:c1> := <var:c1> * <var:N> ; \\ \{ <var:N> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:1> \cdot <var:G> \} \\ <var:i> := <var:c1> ; \\ \{ <var:N> = <var:G> \land <var:c0> = <nat:3> \land <var:i> = <nat:1> \cdot <var:G> \} \\ <var:i> := <var:i> + <var:c0> \\ \{ <var:N> = <var:G> \land <var:i> = <nat:1> \cdot <var:G> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:N> ; <var:i> := <var:c1> ; <var:i> := <var:i> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:N> = <var:G> }} <def:poly> {{ <var:i> = <nat:1> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:c0> = <nat:3> /\ <var:i> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:G> /\ <var:i> = <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 