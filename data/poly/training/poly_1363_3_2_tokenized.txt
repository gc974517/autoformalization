\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:I> := <nat:1> ; <var:I> := <nat:3> + <var:I> * <var:q> ; <var:I> := <nat:1> + <var:I> * <var:q> \end{verbatim} Allowing , given positive integer coefficients $ <var:j> $ , that $ <var:q> = <var:j> $ before the evaluation of the list of commands it holds that $ <var:I> = <nat:1> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the series of commands can be demonstrated using standard Hoare logic . Taking a look at the upcoming step found in the code , the variable assignmet command assigning $ <nat:1> $ toward $ <var:I>$ . This code takes the precondition $ \{ <var:q> = <var:j> \} $ to the condition $ \{ <var:q> = <var:j> \land <var:I> = <nat:1> \} $ . After , the binding line \verb | <var:I> := <nat:3> + <var:I> * <var:q> ; | . This command moves the condition $ \{ <var:q> = <var:j> \land <var:I> = <nat:1> \} $ to the postcondition $ \{ <var:q> = <var:j> \land <var:I> = <nat:1> \cdot <var:j> + <nat:3> \} $ . This is sound through the assignment inference rule defined in usual Hoare logic . Looking at the proceeding line in our set of instructions , the variable binding statement binding $ <nat:1> + <var:I> * <var:q$ as $ <var:I>$ . This statement moves the precondition $ \{ <var:q> = <var:j> \land <var:I> = <nat:1> \cdot <var:j> + <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:j> \land <var:I> = <nat:1> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:1> \} $ . This is given through the assignment scheme defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:q> = <var:j> }} <var:I> := <nat:1> ; <var:I> := <nat:3> + <var:I> * <var:q> ; <var:I> := <nat:1> + <var:I> * <var:q> {{ <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:I> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:I> = <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 