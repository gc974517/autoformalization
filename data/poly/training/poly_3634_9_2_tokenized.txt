\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:Z> := <nat:2> ; <var:Z> := <nat:3> + <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> ; <var:Z> := <nat:4> + <var:Z> * <var:D> ; <var:Z> := <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> ; <var:Z> := <var:Z> * <var:D> ; <var:Z> := <nat:2> + <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> \end{verbatim} Allowing it to be that $ <var:D> = <var:a> $ prior to evaluating this list of instructions , it must be that we see $ <var:Z> = <nat:2> \times <var:a> ^ <nat:8> + <nat:3> \times <var:a> ^ <nat:7> + <nat:1> \times <var:a> ^ <nat:6> + <nat:4> \times <var:a> ^ <nat:5> + <nat:1> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> + <nat:1> $ once code segment exits . \end{theorem} \begin{proof} The argument for the set of instructions can be done by this decorated segment of code . \begin{eqnarray} \{ <var:D> = <var:a> \} \\ <var:Z> := <nat:2> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \} \end{eqnarray} Allowing running the list of instructions returns : \begin{eqnarray} <var:Z> := <nat:3> + <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> + <nat:3> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:1> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:4> \} \\ <var:Z> := <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + \} \\ <var:Z> := <nat:1> + <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:1> \} \\ <var:Z> := <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> + \} \\ <var:Z> := <nat:2> + <var:Z> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:7> + <nat:3> \cdot <var:a> ^ <nat:6> + <nat:1> \cdot <var:a> ^ <nat:5> + <nat:4> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:2> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:D> \\ \{ <var:D> = <var:a> \land <var:Z> = <nat:2> \cdot <var:a> ^ <nat:8> + <nat:3> \cdot <var:a> ^ <nat:7> + <nat:1> \cdot <var:a> ^ <nat:6> + <nat:4> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:D> = <var:a> }} <var:Z> := <nat:2> ; <var:Z> := <nat:3> + <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> ; <var:Z> := <nat:4> + <var:Z> * <var:D> ; <var:Z> := <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> ; <var:Z> := <var:Z> * <var:D> ; <var:Z> := <nat:2> + <var:Z> * <var:D> ; <var:Z> := <nat:1> + <var:Z> * <var:D> {{ <var:Z> = <nat:2> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:1> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:Z> = <nat:2> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:1> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 