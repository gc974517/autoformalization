\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:o> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:4> ; <var:L> := <var:J1> <var:L> := <var:L> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Assuming it to be that $ <var:o> = <var:A> $ prior to the execution of the list of instructions it must be that we see $ <var:L> = <nat:4> \times <var:A> + <nat:9> $ after list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is demonstrated with usual Hoare logic . Looking at the proceeding line of code found in our segment of code , we have the binding statement \verb | <var:J1> := <var:o> ; | . This redefines the condition $ \{ <var:o> = <var:A> \} $ to the condition $ \{ <var:o> = <var:A> \land <var:J1> = <var:A> \} $ . Focusing on the upcoming step contained in our series of instructions , we see the command \verb | <var:J0> := <nat:9> ; | . This redefines $ \{ <var:o> = <var:A> \land <var:J1> = <var:A> \} $ into the postcondition $ \{ <var:o> = <var:A> \land <var:J1> = <var:A> \land <var:J0> = <nat:9> \} $ . This is ensured with the assignment scheme found in standard Hoare techniques . Shifting focus toward the following line seen in the set of commands , we see the variable assignmet line \verb | <var:J1> := <var:J1> * <nat:4> ; | . This line takes the condition $ \{ <var:o> = <var:A> \land <var:J1> = <var:A> \land <var:J0> = <nat:9> \} $ as $ \{ <var:o> = <var:A> \land <var:J1> = <nat:4> \cdot <var:A> \land <var:J0> = <nat:9> \} $ . This is given with the assignment law defined in typical Hoare techniques . Jumping to the proceeding statement contained in the list of commands , we see the variable update line \verb | <var:L> := <var:J1> | . This moves $ \{ <var:o> = <var:A> \land <var:J1> = <nat:4> \cdot <var:A> \land <var:J0> = <nat:9> \} $ to the condition $ \{ <var:o> = <var:A> \land <var:J0> = <nat:9> \land <var:L> = <nat:4> \cdot <var:A> \} $ . This is given through the assignment law obtained from usual Hoare reasoning . Shifting focus toward the next line of code found in the set of instructions , we have the variable assignmet code giving $ <var:L> + <var:J0$ into $ <var:L>$ . This statement moves $ \{ <var:o> = <var:A> \land <var:J0> = <nat:9> \land <var:L> = <nat:4> \cdot <var:A> \} $ into $ \{ <var:o> = <var:A> \land <var:L> = <nat:4> \cdot <var:A> + <nat:9> \} $ . This is deduced through the assignment inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:o> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:4> ; <var:L> := <var:J1> <var:L> := <var:L> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:o> = <var:A> }} <def:poly> {{ <var:L> = <nat:4> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:J1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:J1> = <var:A> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:J1> = <nat:4> * <var:A> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:J0> = <nat:9> /\ <var:L> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:L> = <nat:4> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 