\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:5> ; <var:W1> := <var:W1> * <var:I> ; <var:w> := <var:W1> ; <var:w> := <var:w> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:I> = <var:s> $ before the execution of this series of commands then we have $ <var:w> = <nat:5> \cdot <var:s> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the program can be shown through Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:s> \} & <var:W0> := <nat:1> & \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \} \\ \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \} & <var:W1> := <nat:5> & \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \land <var:W1> = <nat:5> \} \end{tabular} This is ensured with the variable update law obtained from usual Hoare reasoning . Focusing on the next commands seen in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:s> \} & <var:W0> := <nat:1> & \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \} \\ \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \} & <var:W1> := <nat:5> & \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \land <var:W1> = <nat:5> \} \end{tabular} Taking another step toward the subsequent statement seen in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:s> \} & <var:W0> := <nat:1> & \{ <var:I> = <var:s> \land <var:W0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:W1> := <nat:5> ; <var:W1> := <var:W1> * <var:I> ; <var:w> := <var:W1> ; <var:w> := <var:w> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:I> = <var:s> }} <def:poly> {{ <var:w> = <nat:5> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:W0> = <nat:1> /\ <var:w> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:w> = <nat:5> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 