\begin{document} \begin{theorem} Consider a set of commands as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:o> ; <var:Q> := <var:g1> ; <var:Q> := <var:Q> + <var:g0> \end{verbatim} Assuming $ <var:o> = <var:F> $ prior to the evaluation of the segment of code it must be that $ <var:Q> = <nat:3> \cdot <var:F> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be seen with Hoare logic . Shifting focus toward the upcoming bits of codefound in the code segment , we have \begin{eqnarray} \{ <var:o> = <var:F> \} \, <var:g0> := <nat:3> \, \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \} \\ \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \} \, <var:g1> := <nat:3> \, \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \} \\ \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> \} \, <var:g1> := <var:g1> * <var:o> \, \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> * <var:F> \} \\ \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \land <var:g1> = <nat:3> * <var:F> \} \, <var:Q> := <var:g1> \, \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \land <var:Q> = <nat:3> * <var:F> \} \end{eqnarray} This is deduced through the binding scheme found in standard Hoare logic . Now , we have \begin{eqnarray} \{ <var:o> = <var:F> \} \, <var:g0> := <nat:3> \, \{ <var:o> = <var:F> \land <var:g0> = <nat:3> \} \end{eqnarray} This is sound with the variable binding law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:o> = <var:F> }} <var:g0> := <nat:3> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:o> ; <var:Q> := <var:g1> ; <var:Q> := <var:Q> + <var:g0> {{ <var:Q> = <nat:3> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:g0> = <nat:3> /\ <var:Q> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:Q> = <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 