\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:j> ; <var:G2> := <var:G1> * <var:j> ; <var:G3> := <var:G2> * <var:j> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:5> ; <var:i> := <var:G3> <var:i> := <var:i> + <var:G2> <var:i> := <var:i> + <var:G1> <var:i> := <var:i> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assume that we have $ <var:j> = <var:K> $ for any whole numbers $ <var:K> $ before executing our program then we see $ <var:i> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for this code can be done by typical Hoare techniques . Jumping to the upcoming lines in our set of instructions , \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | , \verb | { <var:j> = <var:K> \land <var:G1> = <var:K> } <var:G2> := <var:G1> * <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> } | and \verb | { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> } <var:G3> := <var:G2> * <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> } | . This is sound by the variable update scheme given in Hoare logic . Moving forward to the upcoming line contained in the set of instructions , \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | . This is shown to be logically sound by the variable update inference rule found in Hoare reasoning . Moving forward to the proceeding bits of codefound in our program , we see \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | , \verb | { <var:j> = <var:K> \land <var:G1> = <var:K> } <var:G2> := <var:G1> * <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> } | and \verb | { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> } <var:G3> := <var:G2> * <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> \land <var:G3> = <var:K> ^ <nat:3> } | . This is given by the binding rule from standard Hoare techniques . Shifting focus toward the next piece of code found in our list of instructions , \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | . This is given through the environment update law given by usual Hoare reasoning . Moving on to the next step , \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | and \verb | { <var:j> = <var:K> \land <var:G1> = <var:K> } <var:G2> := <var:G1> * <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> \land <var:G2> = <var:K> ^ <nat:2> } | . Honing in on the next piece of code seen in our segment of code , we have \verb | { <var:j> = <var:K> } <var:G1> := <var:j> { <var:j> = <var:K> \land <var:G1> = <var:K> } | . This is guaranteed through the binding rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:j> ; <var:G2> := <var:G1> * <var:j> ; <var:G3> := <var:G2> * <var:j> ; <var:G0> := <nat:7> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:5> ; <var:i> := <var:G3> <var:i> := <var:i> + <var:G2> <var:i> := <var:i> + <var:G1> <var:i> := <var:i> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:j> = <var:K> }} <def:poly> {{ <var:i> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <nat:4> * <var:K> /\ <var:G2> = <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <nat:4> * <var:K> /\ <var:G2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:G3> = <var:K> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <nat:4> * <var:K> /\ <var:G2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:G3> = <nat:5> * <var:K> ^ <nat:3> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <nat:4> * <var:K> /\ <var:G2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:G0> = <nat:7> /\ <var:i> = <nat:5> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G1> = <nat:4> * <var:K> /\ <var:G0> = <nat:7> /\ <var:i> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:G0> = <nat:7> /\ <var:i> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:i> = <nat:5> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 