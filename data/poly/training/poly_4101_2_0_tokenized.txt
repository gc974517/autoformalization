\begin{document} \begin{theorem} Define a program in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:w> := <var:n0> \end{verbatim} Allowing that we have $ <var:d> = <var:S> $ before executing the segment of code then we have $ <var:w> = <nat:1> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The proof of the series of instructions can be done by Hoare techniques . Immediately after , the code binding $ <nat:1> $ toward $ <var:n0>$ . This line redefines the precondition $ \{ <var:d> = <var:S> \} $ as $ \{ <var:d> = <var:S> \land <var:n0> = <nat:1> \} $ . Taking a look at the subsequent piece of code contained in the series of instructions , we have the variable binding statement binding $ <var:n0$ to $ <var:w>$ . This command redefines $ \{ <var:d> = <var:S> \land <var:n0> = <nat:1> \} $ into $ \{ <var:d> = <var:S> \land <var:w> = <nat:1> \} $ . This is deduced by the assignment scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:d> = <var:S> }} <var:n0> := <nat:1> ; <var:w> := <var:n0> {{ <var:w> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:w> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 