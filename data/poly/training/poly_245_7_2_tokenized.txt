\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:g> := <nat:2> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:4> + <var:g> * <var:e> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:4> + <var:g> * <var:e> ; <var:g> := <nat:2> + <var:g> * <var:e> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Allow $ <var:e> = <var:D> $ before interpreting the segment of code it follows that we see $ <var:g> = <nat:2> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:3> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:2> $ after code segment is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:D> \} \\ <var:g> := <nat:2> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> \} \\ <var:g> := <nat:3> + <var:g> * <var:e> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> + <nat:3> \} \\ <var:g> := <nat:3> + <var:g> * <var:e> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> \} \\ <var:g> := <nat:4> + <var:g> * <var:e> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} \\ <var:g> := <nat:3> + <var:g> * <var:e> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} \\ <var:g> := <nat:4> + <var:g> * <var:e> ; \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} \\ <var:g> := <nat:2> + <var:g> * <var:e> \\ \{ <var:e> = <var:D> \land <var:g> = <nat:2> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> \} \end{eqnarray} Applying Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:2> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:4> + <var:g> * <var:e> ; <var:g> := <nat:3> + <var:g> * <var:e> ; <var:g> := <nat:4> + <var:g> * <var:e> ; <var:g> := <nat:2> + <var:g> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:e> = <var:D> }} <def:poly> {{ <var:g> = <nat:2> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:D> /\ <var:g> = <nat:2> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 