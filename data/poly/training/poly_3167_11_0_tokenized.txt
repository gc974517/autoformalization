\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:q0> := <nat:8> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:F> ; <var:q2> := <var:q2> * <var:F> ; <var:q3> := <nat:8> ; <var:q3> := <var:q3> * <var:F> ; <var:q3> := <var:q3> * <var:F> ; <var:q3> := <var:q3> * <var:F> ; <var:E> := <var:q3> ; <var:E> := <var:E> + <var:q2> ; <var:E> := <var:E> + <var:q0> \end{verbatim} Given that $ <var:F> = <var:K> $ given positive integer coefficients $ <var:K> $ prior to interpreting the program it must be that we see $ <var:E> = <nat:8> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be accomplished by typical Hoare techniques . Now , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \\ \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} & <var:q2> := <nat:7> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> \} \\ \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> \} & <var:q2> := <var:q2> * <var:F> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> * <var:K> \} \\ \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> * <var:K> \} & <var:q2> := <var:q2> * <var:F> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> * <var:K> ^ <nat:2> \} \end{tabular} Taking a look at the proceeding bit of code contained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \end{tabular} This is deduced through the variable update inference rule in Hoare reasoning . Paying attention to the next commands in our series of commands , \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \\ \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} & <var:q2> := <nat:7> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> \} \\ \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> \} & <var:q2> := <var:q2> * <var:F> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \land <var:q2> = <nat:7> * <var:K> \} \end{tabular} Shifting focus toward the following line seen in the code , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \end{tabular} This is known to be sound by the law from standard Hoare logic . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \end{tabular} This is ensured through the variable binding inference rule defined in typical Hoare logic . Considering the following command found in the program , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:K> \} & <var:q0> := <nat:8> & \{ <var:F> = <var:K> \land <var:q0> = <nat:8> \} \end{tabular} This is deduced by the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:q0> := <nat:8> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:F> ; <var:q2> := <var:q2> * <var:F> ; <var:q3> := <nat:8> ; <var:q3> := <var:q3> * <var:F> ; <var:q3> := <var:q3> * <var:F> ; <var:q3> := <var:q3> * <var:F> ; <var:E> := <var:q3> ; <var:E> := <var:E> + <var:q2> ; <var:E> := <var:E> + <var:q0> {{ <var:E> = <nat:8> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:q3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:q3> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:q3> = <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:q3> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:E> = <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:q0> = <nat:8> /\ <var:E> = <nat:8> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:E> = <nat:8> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 