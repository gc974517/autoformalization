\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:2> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <var:c> * <var:H> ; <var:c> := <nat:4> + <var:c> * <var:H> \end{verbatim} Assume it to be that $ <var:H> = <var:U> $ ahead of evaluating our segment of code , it holds that we have $ <var:c> = <nat:2> \times <var:U> ^ <nat:6> + <nat:2> \times <var:U> ^ <nat:5> + <nat:1> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:4> $ when series of commands has finished executing . \end{theorem} \begin{proof} The proof of our code segment can be seen through standard Hoare logic . Moving forward to the next step , we have \verb | { <var:H> = <var:U> } <var:c> := <nat:2> { <var:H> = <var:U> \land <var:c> = <nat:2> } | and \verb | { <var:H> = <var:U> \land <var:c> = <nat:2> } <var:c> := <nat:2> + <var:c> * <var:H> { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> + <nat:2> } | . This is sound by the variable update law given by Hoare techniques . Advancing to the next steps contained in our series of commands , we see \verb | { <var:H> = <var:U> } <var:c> := <nat:2> { <var:H> = <var:U> \land <var:c> = <nat:2> } | , \verb | { <var:H> = <var:U> \land <var:c> = <nat:2> } <var:c> := <nat:2> + <var:c> * <var:H> { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> + <nat:2> } | , \verb | { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> + <nat:2> } <var:c> := <nat:1> + <var:c> * <var:H> { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> } | , \verb | { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> } <var:c> := <nat:1> + <var:c> * <var:H> { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } | and \verb | { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } <var:c> := <nat:1> + <var:c> * <var:H> { <var:H> = <var:U> \land <var:c> = <nat:2> \times <var:U> ^ <nat:4> + <nat:2> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:H> = <var:U> }} <var:c> := <nat:2> ; <var:c> := <nat:2> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <nat:1> + <var:c> * <var:H> ; <var:c> := <var:c> * <var:H> ; <var:c> := <nat:4> + <var:c> * <var:H> {{ <var:c> = <nat:2> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:c> = <nat:2> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 