\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:l0> := <nat:3> ; <var:v> := <var:l0> \end{verbatim} Assuming taking whole numbers $ <var:w> $ it to be that $ <var:s> = <var:w> $ ahead of running this list of commands then we have $ <var:v> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is given through standard Hoare reasoning . Advancing on , \begin{eqnarray} \{ <var:s> = <var:w> \} \, <var:l0> := <nat:3> \, \{ <var:s> = <var:w> \land <var:l0> = <nat:3> \} \\ \{ <var:s> = <var:w> \land <var:l0> = <nat:3> \} \, <var:v> := <var:l0\, \{ <var:s> = <var:w> \land <var:v> = <nat:3> \} \end{eqnarray} This is shown to be logically sound through the variable update scheme from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <var:l0> := <nat:3> ; <var:v> := <var:l0> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 