\begin{document} \begin{theorem} Consider the following code segment as \begin{verbatim} <var:V0> := <nat:6> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:K> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:K> ; <var:V2> := <var:V2> * <var:K> ; <var:j> := <var:V2> ; <var:j> := <var:j> + <var:V1> ; <var:j> := <var:j> + <var:V0> \end{verbatim} Allowing that we have $ <var:K> = <var:m> $ before the execution of our series of instructions , it follows that $ <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:6> $ when segment of code has finished . \end{theorem} \begin{proof} Proving correctness for the list of commands is shown with Hoare techniques . Next , we see the line \verb | <var:V0> := <nat:6> ; | . This command moves the condition $ \{ <var:K> = <var:m> \} $ as $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \} $ . This is shown with the assignment scheme defined in typical Hoare techniques . Stepping forward , we have the statement yielding $ <nat:5> $ as $ <var:V1>$ . This command moves the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \} $ to $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \} $ . This is known to be sound with the assignment inference rule from typical Hoare reasoning . Honing in on the upcoming line in the code , we see the variable assignmet line \verb | <var:V1> := <var:V1> * <var:K> ; | . This code takes $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \} $ as the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \} $ . Further , we have the variable update command \verb | <var:V2> := <nat:9> ; | . This forwards the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \} $ to the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \} $ . Keeping momentum , we have the variable update command binding $ <var:V2> * <var:K> $ to $ <var:V2>$ . This forwards the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \} $ as $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \cdot <var:m> \} $ . This is given using the assignment inference rule of Hoare reasoning . Next , the variable assignmet statement letting $ <var:V2> * <var:K> $ to $ <var:V2>$ . This redefines $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \cdot <var:m> \} $ toward the condition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \cdot <var:m> ^ <nat:2> \} $ . Moving on , we have the variable update statement \verb | <var:j> := <var:V2> ; | . This command takes the precondition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:V2> = <nat:9> \cdot <var:m> ^ <nat:2> \} $ to the postcondition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> \} $ . This is rigorously given by the assignment rule from standard Hoare techniques . Moving forward to the next line of code in our code , the variable update command defining $ <var:j> + <var:V1> $ to $ <var:j>$ . This line forwards $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:V1> = <nat:5> \cdot <var:m> \land <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> \} $ as the postcondition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> \} $ . This is given by the assignment law in typical Hoare techniques . Now , we have the assignment line yielding $ <var:j> + <var:V0$ to $ <var:j>$ . This code advances the precondition $ \{ <var:K> = <var:m> \land <var:V0> = <nat:6> \land <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> \} $ as $ \{ <var:K> = <var:m> \land <var:j> = <nat:9> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:K> = <var:m> }} <var:V0> := <nat:6> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:K> ; <var:V2> := <nat:9> ; <var:V2> := <var:V2> * <var:K> ; <var:V2> := <var:V2> * <var:K> ; <var:j> := <var:V2> ; <var:j> := <var:j> + <var:V1> ; <var:j> := <var:j> + <var:V0> {{ <var:j> = <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> * <var:m> /\ <var:V2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> * <var:m> /\ <var:V2> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> * <var:m> /\ <var:V2> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:V1> = <nat:5> * <var:m> /\ <var:j> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:V0> = <nat:6> /\ <var:j> = <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:j> = <nat:9> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 