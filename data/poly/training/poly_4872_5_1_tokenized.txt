\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:O> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:2> ; <var:y> := <var:r1> <var:y> := <var:y> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allowing , for some $ <var:d> \in \mathbb{Z}^+ $ , $ <var:O> = <var:d> $ ahead of evaluating this series of instructions , it follows that $ <var:y> = <nat:2> * <var:d> + <nat:4> $ when set of commands is done executing . \end{theorem} \begin{proof} The method of proof for our series of commands is evident through typical Hoare reasoning . Immediately following , \begin{eqnarray} \{ <var:O> = <var:d> \} \, <var:r1> := <var:O> \, \{ <var:O> = <var:d> \land <var:r1> = <var:d> \} \\ \{ <var:O> = <var:d> \land <var:r1> = <var:d> \} \, <var:r0> := <nat:4> \, \{ <var:O> = <var:d> \land <var:r1> = <var:d> \land <var:r0> = <nat:4> \} \\ \{ <var:O> = <var:d> \land <var:r1> = <var:d> \land <var:r0> = <nat:4> \} \, <var:r1> := <var:r1> * <nat:2> \, \{ <var:O> = <var:d> \land <var:r1> = <nat:2> * <var:d> \land <var:r0> = <nat:4> \} \end{eqnarray} Jumping to the following bits of codein our code segment , \begin{eqnarray} \{ <var:O> = <var:d> \} \, <var:r1> := <var:O> \, \{ <var:O> = <var:d> \land <var:r1> = <var:d> \} \\ \{ <var:O> = <var:d> \land <var:r1> = <var:d> \} \, <var:r0> := <nat:4> \, \{ <var:O> = <var:d> \land <var:r1> = <var:d> \land <var:r0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:O> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:2> ; <var:y> := <var:r1> <var:y> := <var:y> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:O> = <var:d> }} <def:poly> {{ <var:y> = <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:r1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:r1> = <var:d> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:r1> = <nat:2> * <var:d> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:r0> = <nat:4> /\ <var:y> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:d> /\ <var:y> = <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 