\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:8> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:5> ; <var:E> := <var:G3> <var:E> := <var:E> + <var:G2> <var:E> := <var:E> + <var:G0> \end{verbatim} Given it to be that $ <var:I> = <var:A> $ , for all positive integer coefficients $ <var:A> $ , prior to running our set of commands , then we see $ <var:E> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:8> $ when series of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:A> \} \\ <var:G1> := <var:I> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \} \end{eqnarray} Continuing evaluating the program returns : \begin{eqnarray} <var:G2> := <var:G1> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <var:A> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <var:A> ^ <nat:2> \land <var:G3> = <var:A> ^ <nat:3> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <var:A> ^ <nat:2> \land <var:G3> = <var:A> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G2> := <var:G2> * <nat:4> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <nat:4> * <var:A> ^ <nat:2> \land <var:G3> = <var:A> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:G3> := <var:G3> * <nat:5> ; \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <nat:4> * <var:A> ^ <nat:2> \land <var:G3> = <nat:5> * <var:A> ^ <nat:3> \land <var:G0> = <nat:8> \} \\ <var:E> := <var:G3> \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G2> = <nat:4> * <var:A> ^ <nat:2> \land <var:G0> = <nat:8> \land <var:E> = <nat:5> * <var:A> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:G2> \\ \{ <var:I> = <var:A> \land <var:G1> = <var:A> \land <var:G0> = <nat:8> \land <var:E> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:G0> \\ \{ <var:I> = <var:A> \land <var:E> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:8> \} \end{eqnarray} Advancing interpreting this code returns : \begin{eqnarray} \end{eqnarray} The application of standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <var:G1> := <var:I> ; <var:G2> := <var:G1> * <var:I> ; <var:G3> := <var:G2> * <var:I> ; <var:G0> := <nat:8> ; <var:G2> := <var:G2> * <nat:4> ; <var:G3> := <var:G3> * <nat:5> ; <var:E> := <var:G3> <var:E> := <var:E> + <var:G2> <var:E> := <var:E> + <var:G0> {{ <var:E> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <var:A> ^ <nat:2> /\ <var:G3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <var:A> ^ <nat:2> /\ <var:G3> = <var:A> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:G3> = <var:A> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:G3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G2> = <nat:4> * <var:A> ^ <nat:2> /\ <var:G0> = <nat:8> /\ <var:E> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:G1> = <var:A> /\ <var:G0> = <nat:8> /\ <var:E> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:E> = <nat:5> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 