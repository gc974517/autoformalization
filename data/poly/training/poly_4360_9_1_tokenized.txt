\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x3> := <var:x2> * <var:c> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:1> ; <var:g> := <var:x3> <var:g> := <var:g> + <var:x1> <var:g> := <var:g> + <var:x0> \end{verbatim} Given that we have $ <var:c> = <var:F> $ prior to the execution of the code it must be that $ <var:g> = <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> + <nat:2> $ once segment of code is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is accomplished with typical Hoare techniques . Taking a look at the following commands in our list of instructions , \begin{eqnarray} \{ <var:c> = <var:F> \} \, <var:x1> := <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \} \, <var:x2> := <var:x1> * <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} \, <var:x3> := <var:x2> * <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \} \, <var:x0> := <nat:2> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x0> = <nat:2> \} \, <var:x1> := <var:x1> * <nat:1> \, \{ <var:c> = <var:F> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x0> = <nat:2> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x0> = <nat:2> \} \, <var:x3> := <var:x3> * <nat:1> \, \{ <var:c> = <var:F> \land <var:x1> = <nat:1> * <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <nat:1> * <var:F> ^ <nat:3> \land <var:x0> = <nat:2> \} \end{eqnarray} Advancing , we see \begin{eqnarray} \{ <var:c> = <var:F> \} \, <var:x1> := <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \} \, <var:x2> := <var:x1> * <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} \\ \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} \, <var:x3> := <var:x2> * <var:c> \, \{ <var:c> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <var:x1> := <var:c> ; <var:x2> := <var:x1> * <var:c> ; <var:x3> := <var:x2> * <var:c> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:1> ; <var:g> := <var:x3> <var:g> := <var:g> + <var:x1> <var:g> := <var:g> + <var:x0> {{ <var:g> = <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:F> ^ <nat:3> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x0> = <nat:2> /\ <var:g> = <nat:1> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:x0> = <nat:2> /\ <var:g> = <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:g> = <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 