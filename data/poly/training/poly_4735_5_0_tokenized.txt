\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:9> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:J> ; <var:h> := <var:D1> ; <var:h> := <var:h> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:J> = <var:x> $ prior to executing our list of instructions , it must be that we see $ <var:h> = <nat:2> \cdot <var:x> + <nat:9> $ . \end{theorem} \begin{proof} The argument for this code segment can be done using typical Hoare logic . Focusing on the subsequent statement found in the program , \verb | { <var:J> = <var:x> } <var:D0> := <nat:9> { <var:J> = <var:x> \land <var:D0> = <nat:9> } | . Moving on to the next bits of codeseen in the code segment , we see \verb | { <var:J> = <var:x> } <var:D0> := <nat:9> { <var:J> = <var:x> \land <var:D0> = <nat:9> } | , \verb | { <var:J> = <var:x> \land <var:D0> = <nat:9> } <var:D1> := <nat:2> { <var:J> = <var:x> \land <var:D0> = <nat:9> \land <var:D1> = <nat:2> } | , \verb | { <var:J> = <var:x> \land <var:D0> = <nat:9> \land <var:D1> = <nat:2> } <var:D1> := <var:D1> * <var:J> { <var:J> = <var:x> \land <var:D0> = <nat:9> \land <var:D1> = <nat:2> \times <var:x> } | and \verb | { <var:J> = <var:x> \land <var:D0> = <nat:9> \land <var:D1> = <nat:2> \times <var:x> } <var:h> := <var:D1> { <var:J> = <var:x> \land <var:D0> = <nat:9> \land <var:h> = <nat:2> \times <var:x> } | . This is known to be sound using the variable binding inference rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:9> ; <var:D1> := <nat:2> ; <var:D1> := <var:D1> * <var:J> ; <var:h> := <var:D1> ; <var:h> := <var:h> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:J> = <var:x> }} <def:poly> {{ <var:h> = <nat:2> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:D0> = <nat:9> /\ <var:D1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:D0> = <nat:9> /\ <var:h> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:x> /\ <var:h> = <nat:2> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 