\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:c> ; <var:X2> := <var:X1> * <var:c> ; <var:X3> := <var:X2> * <var:c> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:1> ; <var:X3> := <var:X3> * <nat:6> ; <var:U> := <var:X3> <var:U> := <var:U> + <var:X2> <var:U> := <var:U> + <var:X1> <var:U> := <var:U> + <var:X0> \end{verbatim} Allowing that $ <var:c> = <var:M> $ ahead of running our program , it holds that we see $ <var:U> = <nat:6> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:8> \times <var:M> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques gives us : \begin{eqnarray} \{ <var:c> = <var:M> \} \\ <var:X1> := <var:c> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <var:M> \} \\ <var:X2> := <var:X1> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <var:M> \land <var:X2> = <var:M> ^ <nat:2> \} \end{eqnarray} Furthering the execution of the set of instructions gives : \begin{eqnarray} <var:X3> := <var:X2> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <var:M> \land <var:X2> = <var:M> ^ <nat:2> \land <var:X3> = <var:M> ^ <nat:3> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <var:M> \land <var:X2> = <var:M> ^ <nat:2> \land <var:X3> = <var:M> ^ <nat:3> \land <var:X0> = <nat:5> \} \\ <var:X1> := <var:X1> * <nat:8> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <nat:8> * <var:M> \land <var:X2> = <var:M> ^ <nat:2> \land <var:X3> = <var:M> ^ <nat:3> \land <var:X0> = <nat:5> \} \\ <var:X2> := <var:X2> * <nat:1> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <nat:8> * <var:M> \land <var:X2> = <nat:1> * <var:M> ^ <nat:2> \land <var:X3> = <var:M> ^ <nat:3> \land <var:X0> = <nat:5> \} \\ <var:X3> := <var:X3> * <nat:6> ; \\ \{ <var:c> = <var:M> \land <var:X1> = <nat:8> * <var:M> \land <var:X2> = <nat:1> * <var:M> ^ <nat:2> \land <var:X3> = <nat:6> * <var:M> ^ <nat:3> \land <var:X0> = <nat:5> \} \\ <var:U> := <var:X3> \\ \{ <var:c> = <var:M> \land <var:X1> = <nat:8> * <var:M> \land <var:X2> = <nat:1> * <var:M> ^ <nat:2> \land <var:X0> = <nat:5> \land <var:U> = <nat:6> * <var:M> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:X2> \\ \{ <var:c> = <var:M> \land <var:X1> = <nat:8> * <var:M> \land <var:X0> = <nat:5> \land <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:X1> \\ \{ <var:c> = <var:M> \land <var:X0> = <nat:5> \land <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> \} \\ <var:U> := <var:U> + <var:X0> \\ \{ <var:c> = <var:M> \land <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:5> \} \end{eqnarray} Thusly , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:c> = <var:M> }} <var:X1> := <var:c> ; <var:X2> := <var:X1> * <var:c> ; <var:X3> := <var:X2> * <var:c> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:1> ; <var:X3> := <var:X3> * <nat:6> ; <var:U> := <var:X3> <var:U> := <var:U> + <var:X2> <var:U> := <var:U> + <var:X1> <var:U> := <var:U> + <var:X0> {{ <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <var:M> /\ <var:X2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <var:M> /\ <var:X2> = <var:M> ^ <nat:2> /\ <var:X3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <var:M> /\ <var:X2> = <var:M> ^ <nat:2> /\ <var:X3> = <var:M> ^ <nat:3> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <nat:8> * <var:M> /\ <var:X2> = <var:M> ^ <nat:2> /\ <var:X3> = <var:M> ^ <nat:3> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <nat:8> * <var:M> /\ <var:X2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:X3> = <var:M> ^ <nat:3> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <nat:8> * <var:M> /\ <var:X2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:X3> = <nat:6> * <var:M> ^ <nat:3> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <nat:8> * <var:M> /\ <var:X2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:X0> = <nat:5> /\ <var:U> = <nat:6> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X1> = <nat:8> * <var:M> /\ <var:X0> = <nat:5> /\ <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:X0> = <nat:5> /\ <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:U> = <nat:6> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:8> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 