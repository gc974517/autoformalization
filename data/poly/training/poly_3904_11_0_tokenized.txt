\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:4> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:b3> := <nat:9> ; <var:b3> := <var:b3> * <var:v> ; <var:b3> := <var:b3> * <var:v> ; <var:b3> := <var:b3> * <var:v> ; <var:r> := <var:b3> ; <var:r> := <var:r> + <var:b2> ; <var:r> := <var:r> + <var:b0> \end{verbatim} Assume it to hold that $ <var:v> = <var:w> $ prior to evaluating this program , it holds that we have $ <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:4> $ when segment of code is done executing . \end{theorem} \begin{proof} The way to prove correctness for the code is accomplished through usual Hoare logic . Stepping forward , the variable binding line letting $ <nat:4> $ into $ <var:b0>$ . This line advances the condition $ \{ <var:v> = <var:w> \} $ into $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \} $ . This is guaranteed with the assignment law from usual Hoare reasoning . Moving on to the next step , we see the assignment line \verb | <var:b2> := <nat:9> ; | . This statement moves the precondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \} $ as the postcondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \} $ . This is guaranteed using the assignment rule given in Hoare logic . Moving on to the next step , the environment update code \verb | <var:b2> := <var:b2> * <var:v> ; | . This redefines $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \} $ into the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> \} $ . Taking a look at the subsequent step in the code , we see the binding command \verb | <var:b2> := <var:b2> * <var:v> ; | . This command transfers $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> \} $ as the postcondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \} $ . Going forward , we have the binding code letting $ <nat:9> $ toward $ <var:b3>$ . This line moves $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \} $ . This is given using the assignment rule defined by typical Hoare logic . Going forward , we have the variable binding code yielding $ <var:b3> * <var:v> $ toward $ <var:b3>$ . This code forwards the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \} $ to the postcondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> \} $ . Moving forward to the upcoming line of code contained in our program , we see the variable assignmet command letting $ <var:b3> * <var:v> $ into $ <var:b3>$ . This code takes the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> \} $ toward the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> ^ <nat:2> \} $ . This is rigorously given through the assignment rule in typical Hoare logic . Jumping to the upcoming bit of code in the program , the assignment statement defining $ <var:b3> * <var:v> $ to $ <var:b3>$ . This advances the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> ^ <nat:2> \} $ into the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> ^ <nat:3> \} $ . Moving forward to the following line seen in our list of instructions , the variable update line yielding $ <var:b3> $ into $ <var:r>$ . This statement forwards the precondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:b3> = <nat:9> \cdot <var:w> ^ <nat:3> \} $ into the postcondition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> \} $ . This is sound with the assignment rule defined in standard Hoare reasoning . Keeping momentum , we see the assignment command binding $ <var:r> + <var:b2> $ into $ <var:r>$ . This forwards the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:b2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> \} $ as the condition $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> \} $ . This is sound with the assignment rule obtained from typical Hoare techniques . Honing in on the upcoming line contained in the set of instructions , we have the assignment line \verb | <var:r> := <var:r> + <var:b0> | . This forwards $ \{ <var:v> = <var:w> \land <var:b0> = <nat:4> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> \} $ toward the postcondition $ \{ <var:v> = <var:w> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:v> = <var:w> }} <var:b0> := <nat:4> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:b3> := <nat:9> ; <var:b3> := <var:b3> * <var:v> ; <var:b3> := <var:b3> * <var:v> ; <var:b3> := <var:b3> * <var:v> ; <var:r> := <var:b3> ; <var:r> := <var:r> + <var:b2> ; <var:r> := <var:r> + <var:b0> {{ <var:r> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:b3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:b3> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:b3> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:b3> = <nat:9> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:b2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:r> = <nat:9> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:b0> = <nat:4> /\ <var:r> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:r> = <nat:9> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 