\begin{document} \begin{theorem} Let the following list of commands as follows \begin{verbatim} <var:G0> := <nat:5> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:X> ; <var:G3> := <var:G3> * <var:X> ; <var:G3> := <var:G3> * <var:X> ; <var:C> := <var:G3> ; <var:C> := <var:C> + <var:G0> \end{verbatim} Assume $ <var:X> = <var:T> $ given all integers $ <var:T> $ before running the program it holds that we see $ <var:C> = <nat:1> \times <var:T> ^ <nat:3> + <nat:5> $ . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:X> = <var:T> \} \\ <var:G0> := <nat:5> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \} \\ <var:G3> := <nat:1> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \land <var:G3> = <nat:1> \} \\ <var:G3> := <var:G3> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \land <var:G3> = <nat:1> * <var:T> \} \\ <var:G3> := <var:G3> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \land <var:G3> = <nat:1> * <var:T> ^ <nat:2> \} \\ <var:G3> := <var:G3> * <var:X> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \land <var:G3> = <nat:1> * <var:T> ^ <nat:3> \} \\ <var:C> := <var:G3> ; \\ \{ <var:X> = <var:T> \land <var:G0> = <nat:5> \land <var:C> = <nat:1> * <var:T> ^ <nat:3> \} \\ <var:C> := <var:C> + <var:G0> \\ \{ <var:X> = <var:T> \land <var:C> = <nat:1> * <var:T> ^ <nat:3> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <var:G0> := <nat:5> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:X> ; <var:G3> := <var:G3> * <var:X> ; <var:G3> := <var:G3> * <var:X> ; <var:C> := <var:G3> ; <var:C> := <var:C> + <var:G0> {{ <var:C> = <nat:1> * <var:T> ^ <nat:3> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> /\ <var:G3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> /\ <var:G3> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> /\ <var:G3> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> /\ <var:G3> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:G0> = <nat:5> /\ <var:C> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:C> = <nat:1> * <var:T> ^ <nat:3> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 