\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:1> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:W> ; <var:G> := <var:R1> ; <var:G> := <var:G> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:P> $ prior to running this series of instructions , it follows that we have $ <var:G> = <nat:4> * <var:P> + <nat:1> $ after series of instructions terminates . \end{theorem} \begin{proof} The method of proof for this code is evident using typical Hoare techniques . Moving forward , we see the environment update line \verb | <var:R0> := <nat:1> ; | . This transfers the condition $ \{ <var:W> = <var:P> \} $ to the condition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \} $ . This is shown to be logically sound by the assignment rule given in standard Hoare logic . Looking at the following line in our program , we see the line defining $ <nat:4> $ into $ <var:R1>$ . This transfers the condition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \} $ to the postcondition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:R1> = <nat:4> \} $ . This is deduced using the assignment rule in usual Hoare reasoning . Moving on to the upcoming bit of code seen in the segment of code , we have the assignment code \verb | <var:R1> := <var:R1> * <var:W> ; | . This forwards $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:R1> = <nat:4> \} $ toward the postcondition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:R1> = <nat:4> * <var:P> \} $ . This is ensured by the assignment rule of standard Hoare reasoning . Moving forward to the next step , we have the line \verb | <var:G> := <var:R1> ; | . This statement advances the precondition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:R1> = <nat:4> * <var:P> \} $ into the postcondition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:G> = <nat:4> * <var:P> \} $ . Moving on , we see the environment update code \verb | <var:G> := <var:G> + <var:R0> | . This code takes the precondition $ \{ <var:W> = <var:P> \land <var:R0> = <nat:1> \land <var:G> = <nat:4> * <var:P> \} $ toward the postcondition $ \{ <var:W> = <var:P> \land <var:G> = <nat:4> * <var:P> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:W> ; <var:G> := <var:R1> ; <var:G> := <var:G> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:W> = <var:P> }} <def:poly> {{ <var:G> = <nat:4> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:R0> = <nat:1> /\ <var:G> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:G> = <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 