\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:1> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:b> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:b> ; <var:B2> := <var:B2> * <var:b> ; <var:i> := <var:B2> ; <var:i> := <var:i> + <var:B1> ; <var:i> := <var:i> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:b> = <var:C> $ , given all integers $ <var:C> $ , ahead of executing the list of commands it holds that $ <var:i> = <nat:7> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:1> $ once series of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the code can be given by standard Hoare reasoning . Going forward , \begin{verbatim} { <var:b> = <var:C> } <var:B0> := <nat:1> { <var:b> = <var:C> \land <var:B0> = <nat:1> } { <var:b> = <var:C> \land <var:B0> = <nat:1> } <var:B1> := <nat:9> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> } <var:B1> := <var:B1> * <var:b> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> } <var:B2> := <nat:7> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> } <var:B2> := <var:B2> * <var:b> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> \times <var:C> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> \times <var:C> } <var:B2> := <var:B2> * <var:b> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> \times <var:C> ^ <nat:2> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:B2> = <nat:7> \times <var:C> ^ <nat:2> } <var:i> := <var:B2> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:i> = <nat:7> \times <var:C> ^ <nat:2> } { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:B1> = <nat:9> \times <var:C> \land <var:i> = <nat:7> \times <var:C> ^ <nat:2> } <var:i> := <var:i> + <var:B1> { <var:b> = <var:C> \land <var:B0> = <nat:1> \land <var:i> = <nat:7> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> } \end{verbatim} This is known to be sound using the variable update law given by usual Hoare reasoning . Stepping through , we have \begin{verbatim} { <var:b> = <var:C> } <var:B0> := <nat:1> { <var:b> = <var:C> \land <var:B0> = <nat:1> } \end{verbatim} This is known to be sound with the environment update inference rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:1> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:b> ; <var:B2> := <nat:7> ; <var:B2> := <var:B2> * <var:b> ; <var:B2> := <var:B2> * <var:b> ; <var:i> := <var:B2> ; <var:i> := <var:i> + <var:B1> ; <var:i> := <var:i> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:b> = <var:C> }} <def:poly> {{ <var:i> = <nat:7> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> * <var:C> /\ <var:B2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> * <var:C> /\ <var:B2> = <nat:7> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> * <var:C> /\ <var:B2> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:9> * <var:C> /\ <var:i> = <nat:7> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B0> = <nat:1> /\ <var:i> = <nat:7> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:i> = <nat:7> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 