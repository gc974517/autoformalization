\begin{document} \begin{theorem} Let the following code as \begin{verbatim} <var:s0> := <nat:6> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:u> ; <var:R> := <var:s1> ; <var:R> := <var:R> + <var:s0> \end{verbatim} Given --- taking positive integer coefficients $ <var:D> $ --- it to be that $ <var:u> = <var:D> $ prior to running this code segment then $ <var:R> = <nat:4> * <var:D> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:D> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:u> = <var:D> \land <var:s0> = <nat:6> \} \\ <var:s1> := <nat:4> ; \\ \{ <var:u> = <var:D> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \} \\ <var:s1> := <var:s1> * <var:u> ; \\ \{ <var:u> = <var:D> \land <var:s0> = <nat:6> \land <var:s1> = <nat:4> \cdot <var:D> \} \\ <var:R> := <var:s1> ; \\ \{ <var:u> = <var:D> \land <var:s0> = <nat:6> \land <var:R> = <nat:4> \cdot <var:D> \} \\ <var:R> := <var:R> + <var:s0> \\ \{ <var:u> = <var:D> \land <var:R> = <nat:4> \cdot <var:D> + <nat:6> \} \end{eqnarray} Applying standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:s0> := <nat:6> ; <var:s1> := <nat:4> ; <var:s1> := <var:s1> * <var:u> ; <var:R> := <var:s1> ; <var:R> := <var:R> + <var:s0> {{ <var:R> = <nat:4> * <var:D> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:s0> = <nat:6> /\ <var:R> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:R> = <nat:4> * <var:D> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 