\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:f> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:f> ; <var:c2> := <var:c2> * <var:f> ; <var:T> := <var:c2> ; <var:T> := <var:T> + <var:c1> ; <var:T> := <var:T> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Assuming $ <var:f> = <var:A> $ prior to running this series of instructions then we see $ <var:T> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> $ once program exits . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:A> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \} \\ <var:c1> := <nat:2> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \} \\ <var:c1> := <var:c1> * <var:f> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \cdot <var:A> \} \\ <var:c2> := <nat:4> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \cdot <var:A> \land <var:c2> = <nat:4> \} \\ <var:c2> := <var:c2> * <var:f> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> \} \\ <var:c2> := <var:c2> * <var:f> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \cdot <var:A> \land <var:c2> = <nat:4> \cdot <var:A> ^ <nat:2> \} \\ <var:T> := <var:c2> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:c1> = <nat:2> \cdot <var:A> \land <var:T> = <nat:4> \cdot <var:A> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:c1> ; \\ \{ <var:f> = <var:A> \land <var:c0> = <nat:2> \land <var:T> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> \} \\ <var:T> := <var:T> + <var:c0> \\ \{ <var:f> = <var:A> \land <var:T> = <nat:4> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:2> \} \end{eqnarray} Considering the above , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:2> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:f> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:f> ; <var:c2> := <var:c2> * <var:f> ; <var:T> := <var:c2> ; <var:T> := <var:T> + <var:c1> ; <var:T> := <var:T> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:f> = <var:A> }} <def:poly> {{ <var:T> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> * <var:A> /\ <var:c2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> * <var:A> /\ <var:c2> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> * <var:A> /\ <var:c2> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:2> * <var:A> /\ <var:T> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:c0> = <nat:2> /\ <var:T> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:T> = <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 