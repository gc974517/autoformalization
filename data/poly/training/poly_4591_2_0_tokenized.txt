\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:8> ; <var:d> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Allow $ <var:F> = <var:S> $ before evaluating our series of commands it holds that $ <var:d> = <nat:8> $ once program finishes . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:S> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:F> = <var:S> \land <var:G0> = <nat:8> \} \\ <var:d> := <var:G0> \\ \{ <var:F> = <var:S> \land <var:d> = <nat:8> \} \end{eqnarray} Given the preceding argument , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:d> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:F> = <var:S> }} <def:poly> {{ <var:d> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:S> /\ <var:d> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 