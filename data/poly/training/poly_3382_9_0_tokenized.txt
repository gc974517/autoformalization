\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:6> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:8> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:N> := <var:e2> ; <var:N> := <var:N> + <var:e1> ; <var:N> := <var:N> + <var:e0> \end{verbatim} Given that we have $ <var:G> = <var:d> $ , for positive coefficients $ <var:d> $ , ahead of running our code , then we see $ <var:N> = <nat:8> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:6> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives : \begin{eqnarray} \{ <var:G> = <var:d> \} \\ <var:e0> := <nat:6> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:G> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \times <var:d> \} \\ <var:e2> := <nat:8> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \times <var:d> \land <var:e2> = <nat:8> \} \\ <var:e2> := <var:e2> * <var:G> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \times <var:d> \land <var:e2> = <nat:8> \times <var:d> \} \\ <var:e2> := <var:e2> * <var:G> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \times <var:d> \land <var:e2> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:N> := <var:e2> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \times <var:d> \land <var:N> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:e1> ; \\ \{ <var:G> = <var:d> \land <var:e0> = <nat:6> \land <var:N> = <nat:8> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> \} \\ <var:N> := <var:N> + <var:e0> \\ \{ <var:G> = <var:d> \land <var:N> = <nat:8> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:6> \} \end{eqnarray} Thusly , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <var:e0> := <nat:6> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:8> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:N> := <var:e2> ; <var:N> := <var:N> + <var:e1> ; <var:N> := <var:N> + <var:e0> {{ <var:N> = <nat:8> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:d> /\ <var:e2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:d> /\ <var:e2> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:d> /\ <var:e2> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:d> /\ <var:N> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:e0> = <nat:6> /\ <var:N> = <nat:8> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:N> = <nat:8> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 