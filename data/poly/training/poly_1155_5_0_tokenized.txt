\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:T0> := <nat:8> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:Q> ; <var:H> := <var:T1> ; <var:H> := <var:H> + <var:T0> \end{verbatim} Assuming that we have $ <var:Q> = <var:a> $ ahead of executing this segment of code , it follows that $ <var:H> = <nat:2> \cdot <var:a> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be accomplished through Hoare logic . Advancing to the next step , we have \begin{eqnarray} \{ <var:Q> = <var:a> \} \, <var:T0> := <nat:8> \, \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \} \\ \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \} \, <var:T1> := <nat:2> \, \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:T1> = <nat:2> \} \\ \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:T1> = <nat:2> \} \, <var:T1> := <var:T1> * <var:Q> \, \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:T1> = <nat:2> * <var:a> \} \\ \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:T1> = <nat:2> * <var:a> \} \, <var:H> := <var:T1> \, \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:H> = <nat:2> * <var:a> \} \\ \{ <var:Q> = <var:a> \land <var:T0> = <nat:8> \land <var:H> = <nat:2> * <var:a> \} \, <var:H> := <var:H> + <var:T0\, \{ <var:Q> = <var:a> \land <var:H> = <nat:2> * <var:a> + <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Q> = <var:a> }} <var:T0> := <nat:8> ; <var:T1> := <nat:2> ; <var:T1> := <var:T1> * <var:Q> ; <var:H> := <var:T1> ; <var:H> := <var:H> + <var:T0> {{ <var:H> = <nat:2> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:T0> = <nat:8> /\ <var:H> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:a> /\ <var:H> = <nat:2> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 