\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:1> ; <var:M> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:j> = <var:Z> $ before evaluating this series of commands , it must be that $ <var:M> = <nat:1> $ when series of instructions exits . \end{theorem} \begin{proof} The method of proof for this segment of code can be shown by typical Hoare techniques . Following , the assignment command yielding $ <nat:1> $ into $ <var:F0>$ . This forwards $ \{ <var:j> = <var:Z> \} $ toward the condition $ \{ <var:j> = <var:Z> \land <var:F0> = <nat:1> \} $ . This is ensured with the assignment rule from usual Hoare techniques . Stepping forward , the variable update statement defining $ <var:F0$ as $ <var:M>$ . This transfers $ \{ <var:j> = <var:Z> \land <var:F0> = <nat:1> \} $ into the postcondition $ \{ <var:j> = <var:Z> \land <var:M> = <nat:1> \} $ . This is deduced through the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:M> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:j> = <var:Z> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 