\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:5> ; <var:B> := <var:z0> \end{verbatim} Allow that we have $ <var:O> = <var:W> $ prior to interpreting our list of instructions , it must be that we have $ <var:B> = <nat:5> $ . \end{theorem} \begin{proof} The argument for our series of instructions is shown by the below decorated series of instructions . \begin{eqnarray} \{ <var:O> = <var:W> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:O> = <var:W> \land <var:z0> = <nat:5> \} \\ <var:B> := <var:z0> \\ \{ <var:O> = <var:W> \land <var:B> = <nat:5> \} \end{eqnarray} Using standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:z0> := <nat:5> ; <var:B> := <var:z0> {{ <var:B> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:B> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 