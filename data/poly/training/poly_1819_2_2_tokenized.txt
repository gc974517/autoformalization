\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:3> + <var:x> * <var:v> \end{verbatim} Given it to hold that $ <var:v> = <var:E> $ , for every positive integers $ <var:E> $ , ahead of executing our list of commands it holds that we see $ <var:x> = <nat:1> * <var:E> + <nat:3> $ when series of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is demonstrated by typical Hoare reasoning . Taking another step toward the upcoming bit of code contained in our series of instructions , we see the assignment code \verb | <var:x> := <nat:1> ; | . This transfers $ \{ <var:v> = <var:E> \} $ to $ \{ <var:v> = <var:E> \land <var:x> = <nat:1> \} $ . This is given through the assignment scheme given by Hoare logic . Moving on , we see the assignment statement \verb | <var:x> := <nat:3> + <var:x> * <var:v> | . This redefines the condition $ \{ <var:v> = <var:E> \land <var:x> = <nat:1> \} $ to the postcondition $ \{ <var:v> = <var:E> \land <var:x> = <nat:1> \cdot <var:E> + <nat:3> \} $ . This is rigorously given using the assignment law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:v> = <var:E> }} <var:x> := <nat:1> ; <var:x> := <nat:3> + <var:x> * <var:v> {{ <var:x> = <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:E> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:E> /\ <var:x> = <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 