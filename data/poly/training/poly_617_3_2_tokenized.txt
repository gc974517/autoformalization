\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:T> ; <var:C> := <nat:4> + <var:C> * <var:T> \end{verbatim} Allowing that $ <var:T> = <var:G> $ , given all integers $ <var:G> $ , ahead of the evaluation of our list of instructions , it holds that we have $ <var:C> = <nat:2> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:4> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions can be demonstrated using standard Hoare logic . Focusing on the proceeding bits of codein the series of instructions , \[ \begin{tabular} {rcl} \{ <var:T> = <var:G> \} & <var:C> := <nat:2> & \{ <var:T> = <var:G> \land <var:C> = <nat:2> \} \\ \{ <var:T> = <var:G> \land <var:C> = <nat:2> \} & <var:C> := <nat:3> + <var:C> * <var:T> & \{ <var:T> = <var:G> \land <var:C> = <nat:2> \cdot <var:G> + <nat:3> \} \\ \{ <var:T> = <var:G> \land <var:C> = <nat:2> \cdot <var:G> + <nat:3> \} & <var:C> := <nat:4> + <var:C> * <var:T& \{ <var:T> = <var:G> \land <var:C> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:4> \} \end{tabular} This is shown through the scheme given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <var:C> := <nat:2> ; <var:C> := <nat:3> + <var:C> * <var:T> ; <var:C> := <nat:4> + <var:C> * <var:T> {{ <var:C> = <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:C> = <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:C> = <nat:2> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 