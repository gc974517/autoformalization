\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:7> ; <var:a> := <var:O0> \end{verbatim} Allowing that $ <var:X> = <var:z> $ ahead of evaluating this set of commands , then we see $ <var:a> = <nat:7> $ once series of instructions exits . \end{theorem} \begin{proof} The method of proof for this segment of code can be given through Hoare reasoning . Paying attention to the proceeding piece of code in our program , the variable binding command defining $ <nat:7> $ toward $ <var:O0>$ . This transfers the precondition $ \{ <var:X> = <var:z> \} $ as the condition $ \{ <var:X> = <var:z> \land <var:O0> = <nat:7> \} $ . Moving on , we see the variable assignmet line \verb | <var:a> := <var:O0> | . This transfers $ \{ <var:X> = <var:z> \land <var:O0> = <nat:7> \} $ as the postcondition $ \{ <var:X> = <var:z> \land <var:a> = <nat:7> \} $ . This is deduced using the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:X> = <var:z> }} <var:O0> := <nat:7> ; <var:a> := <var:O0> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 