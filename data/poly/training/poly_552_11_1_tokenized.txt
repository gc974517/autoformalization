\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:P1> := <var:s> ; <var:P2> := <var:P1> * <var:s> ; <var:P3> := <var:P2> * <var:s> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:2> ; <var:j> := <var:P3> <var:j> := <var:j> + <var:P2> <var:j> := <var:j> + <var:P1> <var:j> := <var:j> + <var:P0> \end{verbatim} Assuming that we have $ <var:s> = <var:y> $ ahead of running this list of instructions it follows that $ <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the code is evident with typical Hoare reasoning . Moving on , we see the variable assignmet code \verb | <var:P1> := <var:s> ; | . This line forwards $ \{ <var:s> = <var:y> \} $ into $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \} $ . Advancing to the upcoming piece of code contained in the series of instructions , the variable update statement \verb | <var:P2> := <var:P1> * <var:s> ; | . This line advances $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \} $ to the condition $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \} $ . Observing the next piece of code found in our series of instructions , we have the statement \verb | <var:P3> := <var:P2> * <var:s> ; | . This transfers $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \} $ . This is known to be sound using the assignment rule from Hoare logic . Taking another step toward the upcoming statement seen in our code , we see the variable update line defining $ <nat:7> $ into $ <var:P0>$ . This code forwards $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \} $ as $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ . This is guaranteed using the assignment scheme given in usual Hoare reasoning . Honing in on the upcoming bit of code found in our program , we see the variable binding command yielding $ <var:P1> * <nat:7> $ as $ <var:P1>$ . This redefines the condition $ \{ <var:s> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ as $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ . This is shown with the assignment law from usual Hoare techniques . Observing the proceeding command seen in our program , the line \verb | <var:P2> := <var:P2> * <nat:5> ; | . This line moves the condition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ as $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ . This is given by the assignment law obtained from typical Hoare logic . Jumping to the proceeding line in our set of instructions , the binding command \verb | <var:P3> := <var:P3> * <nat:2> ; | . This redefines the precondition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ toward $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \times <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ . Advancing to the next step , the variable update command \verb | <var:j> := <var:P3> | . This statement moves $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P3> = <nat:2> \times <var:y> ^ <nat:3> \land <var:P0> = <nat:7> \} $ into the condition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> \} $ . This is known to be sound through the assignment scheme of standard Hoare reasoning . Advancing to the next step , we see the binding command yielding $ <var:j> + <var:P2$ as $ <var:j>$ . This command forwards the condition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> \} $ to the condition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> \} $ . Jumping to the subsequent statement found in the code segment , the line letting $ <var:j> + <var:P1$ as $ <var:j>$ . This command advances the condition $ \{ <var:s> = <var:y> \land <var:P1> = <nat:7> \times <var:y> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> \} $ to the condition $ \{ <var:s> = <var:y> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> \} $ . This is shown with the assignment inference rule found in Hoare reasoning . Further , the variable assignmet statement \verb | <var:j> := <var:j> + <var:P0> | . This forwards the condition $ \{ <var:s> = <var:y> \land <var:P0> = <nat:7> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> \} $ to the condition $ \{ <var:s> = <var:y> \land <var:j> = <nat:2> \times <var:y> ^ <nat:3> + <nat:5> \times <var:y> ^ <nat:2> + <nat:7> \times <var:y> + <nat:7> \} $ . This is shown with the assignment law defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <var:P1> := <var:s> ; <var:P2> := <var:P1> * <var:s> ; <var:P3> := <var:P2> * <var:s> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:2> ; <var:j> := <var:P3> <var:j> := <var:j> + <var:P2> <var:j> := <var:j> + <var:P1> <var:j> := <var:j> + <var:P0> {{ <var:j> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <nat:7> * <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <nat:7> * <var:y> /\ <var:P2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <nat:7> * <var:y> /\ <var:P2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:2> * <var:y> ^ <nat:3> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <nat:7> * <var:y> /\ <var:P2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:P0> = <nat:7> /\ <var:j> = <nat:2> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P1> = <nat:7> * <var:y> /\ <var:P0> = <nat:7> /\ <var:j> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:P0> = <nat:7> /\ <var:j> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:j> = <nat:2> * <var:y> ^ <nat:3> + <nat:5> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 