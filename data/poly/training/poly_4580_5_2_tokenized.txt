\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <nat:2> + <var:A> * <var:H> ; <var:A> := <nat:4> + <var:A> * <var:H> ; <var:A> := <nat:1> + <var:A> * <var:H> ; <var:A> := <nat:3> + <var:A> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:H> = <var:Q> $ before the evaluation of this program , it follows that we have $ <var:A> = <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:3> $ once segment of code has exited . \end{theorem} \begin{proof} Proving correctness for the set of commands can be done using standard Hoare reasoning . Now , we see the variable update code \verb | <var:A> := <nat:3> ; | . This statement redefines the condition $ \{ <var:H> = <var:Q> \} $ to the postcondition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \} $ . Following , we see the line \verb | <var:A> := <nat:2> + <var:A> * <var:H> ; | . This forwards the precondition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \} $ to $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> + <nat:2> \} $ . Advancing on , we see the variable binding command defining $ <nat:4> + <var:A> * <var:H> $ toward $ <var:A>$ . This code takes the precondition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> + <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> \} $ . Keeping momentum , we see the environment update line letting $ <nat:1> + <var:A> * <var:H> $ toward $ <var:A>$ . This command redefines the condition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:1> \} $ . This is sound with the assignment rule given in usual Hoare techniques . Taking another step toward the following command seen in the segment of code , we see the assignment line giving $ <nat:3> + <var:A> * <var:H$ into $ <var:A>$ . This code redefines $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:1> \} $ to the condition $ \{ <var:H> = <var:Q> \land <var:A> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:3> \} $ . This is ensured using the assignment scheme found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:3> ; <var:A> := <nat:2> + <var:A> * <var:H> ; <var:A> := <nat:4> + <var:A> * <var:H> ; <var:A> := <nat:1> + <var:A> * <var:H> ; <var:A> := <nat:3> + <var:A> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:H> = <var:Q> }} <def:poly> {{ <var:A> = <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:A> = <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:A> = <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:A> = <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:A> = <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 