\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:M> ; <var:q> := <var:Q1> ; <var:q> := <var:q> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:M> = <var:I> $ ahead of the execution of the code it holds that we have $ <var:q> = <nat:5> * <var:I> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:I> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:M> = <var:I> \land <var:Q0> = <nat:6> \} \\ <var:Q1> := <nat:5> ; \\ \{ <var:M> = <var:I> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <var:M> ; \\ \{ <var:M> = <var:I> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:5> * <var:I> \} \\ <var:q> := <var:Q1> ; \\ \{ <var:M> = <var:I> \land <var:Q0> = <nat:6> \land <var:q> = <nat:5> * <var:I> \} \\ <var:q> := <var:q> + <var:Q0> \\ \{ <var:M> = <var:I> \land <var:q> = <nat:5> * <var:I> + <nat:6> \} \end{eqnarray} Applying standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:6> ; <var:Q1> := <nat:5> ; <var:Q1> := <var:Q1> * <var:M> ; <var:q> := <var:Q1> ; <var:q> := <var:q> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:M> = <var:I> }} <def:poly> {{ <var:q> = <nat:5> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:q> = <nat:5> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 