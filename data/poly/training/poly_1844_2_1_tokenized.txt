\begin{document} \begin{theorem} Consider the following series of commands such that \begin{verbatim} <var:Q0> := <nat:4> ; <var:M> := <var:Q0> \end{verbatim} Assuming it to be that $ <var:s> = <var:R> $ before the execution of our list of instructions , then we see $ <var:M> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be done through standard Hoare techniques . Paying attention to the upcoming piece of code seen in our code segment , we see the binding line assigning $ <nat:4> $ toward $ <var:Q0>$ . This redefines $ \{ <var:s> = <var:R> \} $ to the condition $ \{ <var:s> = <var:R> \land <var:Q0> = <nat:4> \} $ . This is deduced by the assignment rule obtained from typical Hoare logic . Moving on , we have the code \verb | <var:M> := <var:Q0> | . This command moves the condition $ \{ <var:s> = <var:R> \land <var:Q0> = <nat:4> \} $ toward the condition $ \{ <var:s> = <var:R> \land <var:M> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:s> = <var:R> }} <var:Q0> := <nat:4> ; <var:M> := <var:Q0> {{ <var:M> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:M> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 