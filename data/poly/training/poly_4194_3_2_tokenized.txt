\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <var:L> * <var:t> ; <var:L> := <nat:2> + <var:L> * <var:t> \end{verbatim} Allow that $ <var:t> = <var:P> $ , with some $ <var:P> \in \mathbb{N} $ , ahead of interpreting this list of instructions , then we see $ <var:L> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:2> $ once program executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:P> \} \\ <var:L> := <nat:1> ; \\ \{ <var:t> = <var:P> \land <var:L> = <nat:1> \} \\ <var:L> := <var:L> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:L> = <nat:1> \cdot <var:P> + \} \\ <var:L> := <nat:2> + <var:L> * <var:t> \\ \{ <var:t> = <var:P> \land <var:L> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:t> = <var:P> }} <var:L> := <nat:1> ; <var:L> := <var:L> * <var:t> ; <var:L> := <nat:2> + <var:L> * <var:t> {{ <var:L> = <nat:1> * <var:P> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:L> = <nat:1> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:L> = <nat:1> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 