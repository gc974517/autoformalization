\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:O> := <var:t2> ; <var:O> := <var:O> + <var:t1> ; <var:O> := <var:O> + <var:t0> \end{verbatim} Allowing $ <var:k> = <var:e> $ prior to interpreting this program it follows that we have $ <var:O> = <nat:2> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our series of instructions can be seen by typical Hoare logic . Following , the variable assignmet statement \verb | <var:t0> := <nat:6> ; | . This redefines the precondition $ \{ <var:k> = <var:e> \} $ to $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \} $ . This is known to be sound with the assignment rule defined in typical Hoare reasoning . Going forward , we have the variable binding line letting $ <nat:1> $ toward $ <var:t1>$ . This transfers $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \} $ into the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \} $ . This is deduced with the assignment rule given in usual Hoare reasoning . Observing the proceeding piece of code in our list of instructions , the command assigning $ <var:t1> * <var:k> $ into $ <var:t1>$ . This command moves the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \} $ to the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \} $ . This is known to be sound by the assignment rule obtained from usual Hoare techniques . Moving on to the subsequent line found in our list of instructions , we see the variable assignmet command assigning $ <nat:2> $ to $ <var:t2>$ . This command advances $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \} $ into the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \} $ . This is given using the assignment rule found in typical Hoare reasoning . Paying attention to the next line found in the code segment , the binding code \verb | <var:t2> := <var:t2> * <var:k> ; | . This transfers $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \cdot <var:e> \} $ . Advancing to the next bit of code contained in our set of instructions , the line defining $ <var:t2> * <var:k> $ into $ <var:t2>$ . This command takes $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \cdot <var:e> \} $ to the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \cdot <var:e> ^ <nat:2> \} $ . This is ensured by the assignment law given by standard Hoare logic . Shifting focus toward the next line of code found in our code , the environment update line \verb | <var:O> := <var:t2> ; | . This redefines the precondition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:t2> = <nat:2> \cdot <var:e> ^ <nat:2> \} $ as the postcondition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:O> = <nat:2> \cdot <var:e> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule given in Hoare logic . Immediately after , we see the binding line \verb | <var:O> := <var:O> + <var:t1> ; | . This statement takes the condition $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:t1> = <nat:1> \cdot <var:e> \land <var:O> = <nat:2> \cdot <var:e> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:O> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> \} $ . Moving on to the upcoming line of code in the list of instructions , we have the binding command yielding $ <var:O> + <var:t0$ to $ <var:O>$ . This transfers $ \{ <var:k> = <var:e> \land <var:t0> = <nat:6> \land <var:O> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> \} $ toward the postcondition $ \{ <var:k> = <var:e> \land <var:O> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:6> \} $ . This is shown by the assignment rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:k> = <var:e> }} <var:t0> := <nat:6> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:O> := <var:t2> ; <var:O> := <var:O> + <var:t1> ; <var:O> := <var:O> + <var:t0> {{ <var:O> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:e> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:e> /\ <var:t2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:e> /\ <var:t2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:1> * <var:e> /\ <var:O> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:t0> = <nat:6> /\ <var:O> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:O> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 