\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:n> = <var:e> $ prior to the execution of this set of commands , it must be that $ <var:w> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the set of commands can be done by standard Hoare logic . Advancing on , we see the variable update line \verb | <var:w> := <nat:4> ; | . This advances the precondition $ \{ <var:n> = <var:e> \} $ into $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> \} $ . This is sound using the assignment rule defined in usual Hoare logic . Taking a look at the next command contained in the code segment , we have the statement yielding $ <nat:2> + <var:w> * <var:n> $ to $ <var:w>$ . This transfers the precondition $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> \} $ into the postcondition $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> + <nat:2> \} $ . Jumping to the subsequent step in the code , the variable binding line \verb | <var:w> := <var:w> * <var:n> ; | . This takes $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> + <nat:2> \} $ toward $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + \} $ . This is deduced by the assignment rule defined by typical Hoare logic . Moving forward to the upcoming bit of code in our program , the environment update code \verb | <var:w> := <nat:1> + <var:w> * <var:n> ; | . This takes $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + \} $ to the condition $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> \} $ . Immediately following , the variable update code yielding $ <nat:1> + <var:w> * <var:n$ toward $ <var:w>$ . This command advances the precondition $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> \} $ into $ \{ <var:n> = <var:e> \land <var:w> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:1> \} $ . This is shown using the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:n> = <var:e> }} <def:poly> {{ <var:w> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:w> = <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:w> = <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:w> = <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:w> = <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 