\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:t> ; <var:N> := <var:Y1> ; <var:N> := <var:N> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:t> = <var:U> $ taking positive integers $ <var:U> $ before evaluating our code segment , it holds that $ <var:N> = <nat:5> * <var:U> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code can be demonstrated with Hoare techniques . Moving forward to the next step , we have \begin{eqnarray} \{ <var:t> = <var:U> \} \, <var:Y0> := <nat:8> \, \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \} \\ \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \} \, <var:Y1> := <nat:5> \, \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \} \\ \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> \} \, <var:Y1> := <var:Y1> * <var:t> \, \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:U> \} \\ \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:Y1> = <nat:5> * <var:U> \} \, <var:N> := <var:Y1> \, \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:N> = <nat:5> * <var:U> \} \\ \{ <var:t> = <var:U> \land <var:Y0> = <nat:8> \land <var:N> = <nat:5> * <var:U> \} \, <var:N> := <var:N> + <var:Y0\, \{ <var:t> = <var:U> \land <var:N> = <nat:5> * <var:U> + <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:8> ; <var:Y1> := <nat:5> ; <var:Y1> := <var:Y1> * <var:t> ; <var:N> := <var:Y1> ; <var:N> := <var:N> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:t> = <var:U> }} <def:poly> {{ <var:N> = <nat:5> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:Y0> = <nat:8> /\ <var:Y1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:Y0> = <nat:8> /\ <var:N> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:N> = <nat:5> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 