\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:f> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:f> ; <var:x2> := <var:x2> * <var:f> ; <var:A> := <var:x2> ; <var:A> := <var:A> + <var:x1> ; <var:A> := <var:A> + <var:x0> \end{verbatim} Allowing it to be that $ <var:f> = <var:X> $ prior to executing this set of instructions it follows that we see $ <var:A> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> + <nat:5> $ when list of commands executes . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:f> = <var:X> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \} \\ <var:x1> := <nat:7> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \} \\ <var:x1> := <var:x1> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \times <var:X> \} \\ <var:x2> := <nat:3> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \times <var:X> \land <var:x2> = <nat:3> \} \\ <var:x2> := <var:x2> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \times <var:X> \land <var:x2> = <nat:3> \times <var:X> \} \\ <var:x2> := <var:x2> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \times <var:X> \land <var:x2> = <nat:3> \times <var:X> ^ <nat:2> \} \\ <var:A> := <var:x2> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> \times <var:X> \land <var:A> = <nat:3> \times <var:X> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:x1> ; \\ \{ <var:f> = <var:X> \land <var:x0> = <nat:5> \land <var:A> = <nat:3> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> \} \\ <var:A> := <var:A> + <var:x0> \\ \{ <var:f> = <var:X> \land <var:A> = <nat:3> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> + <nat:5> \} \end{eqnarray} Considering the above , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:f> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:f> ; <var:x2> := <var:x2> * <var:f> ; <var:A> := <var:x2> ; <var:A> := <var:A> + <var:x1> ; <var:A> := <var:A> + <var:x0> {{ <var:A> = <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:X> /\ <var:x2> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:x0> = <nat:5> /\ <var:A> = <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 