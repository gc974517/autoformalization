\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:3> ; <var:s> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allow , given every integers $ <var:W> $ , $ <var:P> = <var:W> $ prior to executing the set of commands , it holds that $ <var:s> = <nat:3> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is demonstrated using usual Hoare logic . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:P> = <var:W> \} & <var:J0> := <nat:3> & \{ <var:P> = <var:W> \land <var:J0> = <nat:3> \} \\ \{ <var:P> = <var:W> \land <var:J0> = <nat:3> \} & <var:s> := <var:J0& \{ <var:P> = <var:W> \land <var:s> = <nat:3> \} \end{tabular} This is deduced with the variable update rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:3> ; <var:s> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:P> = <var:W> }} <def:poly> {{ <var:s> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:W> /\ <var:s> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 