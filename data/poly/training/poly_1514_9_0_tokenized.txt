\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:6> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:O> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:O> ; <var:I2> := <var:I2> * <var:O> ; <var:T> := <var:I2> ; <var:T> := <var:T> + <var:I1> ; <var:T> := <var:T> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:O> = <var:n> $ prior to executing this program it must be that we have $ <var:T> = <nat:9> \cdot <var:n> ^ <nat:2> + <nat:7> \cdot <var:n> + <nat:6> $ after program is done . \end{theorem} \begin{proof} Proving correctness for this list of instructions can be shown through Hoare techniques . After , \begin{verbatim} { <var:O> = <var:n> } <var:I0> := <nat:6> { <var:O> = <var:n> \land <var:I0> = <nat:6> } { <var:O> = <var:n> \land <var:I0> = <nat:6> } <var:I1> := <nat:7> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> } { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> } <var:I1> := <var:I1> * <var:O> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> } { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> } <var:I2> := <nat:9> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> } { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> } <var:I2> := <var:I2> * <var:O> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> \times <var:n> } { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> \times <var:n> } <var:I2> := <var:I2> * <var:O> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> \times <var:n> ^ <nat:2> } { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:I2> = <nat:9> \times <var:n> ^ <nat:2> } <var:T> := <var:I2> { <var:O> = <var:n> \land <var:I0> = <nat:6> \land <var:I1> = <nat:7> \times <var:n> \land <var:T> = <nat:9> \times <var:n> ^ <nat:2> } \end{verbatim} This is shown through the assignment law defined in typical Hoare techniques . Moving forward to the following line seen in our program , \begin{verbatim} { <var:O> = <var:n> } <var:I0> := <nat:6> { <var:O> = <var:n> \land <var:I0> = <nat:6> } \end{verbatim} Considering the following step found in the code segment , we see \begin{verbatim} { <var:O> = <var:n> } <var:I0> := <nat:6> { <var:O> = <var:n> \land <var:I0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:6> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:O> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:O> ; <var:I2> := <var:I2> * <var:O> ; <var:T> := <var:I2> ; <var:T> := <var:T> + <var:I1> ; <var:T> := <var:T> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:O> = <var:n> }} <def:poly> {{ <var:T> = <nat:9> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> * <var:n> /\ <var:I2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> * <var:n> /\ <var:I2> = <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> * <var:n> /\ <var:I2> = <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:I1> = <nat:7> * <var:n> /\ <var:T> = <nat:9> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:I0> = <nat:6> /\ <var:T> = <nat:9> * <var:n> ^ <nat:2> + <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:n> /\ <var:T> = <nat:9> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 