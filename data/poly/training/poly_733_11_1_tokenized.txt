\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:c> ; <var:v2> := <var:v1> * <var:c> ; <var:v3> := <var:v2> * <var:c> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:1> ; <var:A> := <var:v3> <var:A> := <var:A> + <var:v2> <var:A> := <var:A> + <var:v1> <var:A> := <var:A> + <var:v0> \end{verbatim} Given $ <var:c> = <var:H> $ prior to the execution of this series of commands it follows that $ <var:A> = <nat:1> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program is accomplished with typical Hoare techniques . Taking a look at the proceeding steps seen in our code , \verb | { <var:c> = <var:H> } <var:v1> := <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> } <var:v2> := <var:v1> * <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> } <var:v3> := <var:v2> * <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> } | and \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> } <var:v0> := <nat:6> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } | . Paying attention to the subsequent steps contained in our code , we see \verb | { <var:c> = <var:H> } <var:v1> := <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> } <var:v2> := <var:v1> * <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> } <var:v3> := <var:v2> * <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> } <var:v0> := <nat:6> { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } | , \verb | { <var:c> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } <var:v1> := <var:v1> * <nat:4> { <var:c> = <var:H> \land <var:v1> = <nat:4> \cdot <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } | and \verb | { <var:c> = <var:H> \land <var:v1> = <nat:4> \cdot <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } <var:v2> := <var:v2> * <nat:1> { <var:c> = <var:H> \land <var:v1> = <nat:4> \cdot <var:H> \land <var:v2> = <nat:1> \cdot <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> } | . This is rigorously given using the binding rule given in usual Hoare reasoning . Taking a look at the proceeding line of code seen in the series of commands , \verb | { <var:c> = <var:H> } <var:v1> := <var:c> { <var:c> = <var:H> \land <var:v1> = <var:H> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:v1> := <var:c> ; <var:v2> := <var:v1> * <var:c> ; <var:v3> := <var:v2> * <var:c> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:1> ; <var:A> := <var:v3> <var:A> := <var:A> + <var:v2> <var:A> := <var:A> + <var:v1> <var:A> := <var:A> + <var:v0> {{ <var:A> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <nat:4> * <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <nat:4> * <var:H> /\ <var:v2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <nat:4> * <var:H> /\ <var:v2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <nat:4> * <var:H> /\ <var:v2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:A> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v1> = <nat:4> * <var:H> /\ <var:v0> = <nat:6> /\ <var:A> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:v0> = <nat:6> /\ <var:A> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:A> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 