\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:7> ; <var:z> := <var:k3> <var:z> := <var:z> + <var:k2> <var:z> := <var:z> + <var:k1> <var:z> := <var:z> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assuming $ <var:r> = <var:h> $ before running this list of instructions , it holds that we see $ <var:z> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our program is given through Hoare techniques . Advancing , we have the binding command \verb | <var:k1> := <var:r> ; | . This statement redefines the precondition $ \{ <var:r> = <var:h> \} $ toward the postcondition $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \} $ . This is ensured using the assignment rule defined in typical Hoare techniques . Moving forward to the next step , we see the binding line defining $ <var:k1> * <var:r> $ to $ <var:k2>$ . This code forwards the condition $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \} $ as $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \} $ . This is given by the assignment scheme of usual Hoare techniques . Focusing on the subsequent statement found in our series of instructions , the variable assignmet command assigning $ <var:k2> * <var:r> $ into $ <var:k3>$ . This moves the condition $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \} $ . This is rigorously given through the assignment rule defined in Hoare logic . Moving on , we have the binding command \verb | <var:k0> := <nat:5> ; | . This advances $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \} $ as $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ . Moving on to the next step , the code binding $ <var:k1> * <nat:9> $ as $ <var:k1>$ . This redefines the condition $ \{ <var:r> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ into $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ . Advancing to the next step , we have the variable assignmet statement \verb | <var:k2> := <var:k2> * <nat:7> ; | . This takes the condition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ toward the condition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ . Moving forward , we have the variable update command assigning $ <var:k3> * <nat:7> $ as $ <var:k3>$ . This statement takes $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k3> = <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ toward the condition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k3> = <nat:7> \times <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ . This is given by the assignment law obtained from typical Hoare logic . Now , the binding line \verb | <var:z> := <var:k3> | . This command forwards the precondition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k3> = <nat:7> \times <var:h> ^ <nat:3> \land <var:k0> = <nat:5> \} $ as the postcondition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> \} $ . Immediately after , we see the variable binding command defining $ <var:z> + <var:k2$ to $ <var:z>$ . This moves the precondition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k2> = <nat:7> \times <var:h> ^ <nat:2> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> \} $ toward the condition $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> \} $ . Looking at the following step seen in our code segment , we see the assignment line yielding $ <var:z> + <var:k1$ into $ <var:z>$ . This redefines $ \{ <var:r> = <var:h> \land <var:k1> = <nat:9> \times <var:h> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> \} $ into $ \{ <var:r> = <var:h> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> \} $ . This is known to be sound through the assignment scheme found in Hoare techniques . Immediately following , we see the environment update line \verb | <var:z> := <var:z> + <var:k0> | . This line transfers the precondition $ \{ <var:r> = <var:h> \land <var:k0> = <nat:5> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> \} $ into the postcondition $ \{ <var:r> = <var:h> \land <var:z> = <nat:7> \times <var:h> ^ <nat:3> + <nat:7> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> + <nat:5> \} $ . This is guaranteed through the assignment scheme defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:5> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:7> ; <var:k3> := <var:k3> * <nat:7> ; <var:z> := <var:k3> <var:z> := <var:z> + <var:k2> <var:z> := <var:z> + <var:k1> <var:z> := <var:z> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:r> = <var:h> }} <def:poly> {{ <var:z> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <nat:9> * <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <nat:9> * <var:h> /\ <var:k2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:k3> = <var:h> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <nat:9> * <var:h> /\ <var:k2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:k3> = <nat:7> * <var:h> ^ <nat:3> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <nat:9> * <var:h> /\ <var:k2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:k0> = <nat:5> /\ <var:z> = <nat:7> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k1> = <nat:9> * <var:h> /\ <var:k0> = <nat:5> /\ <var:z> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:k0> = <nat:5> /\ <var:z> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:h> /\ <var:z> = <nat:7> * <var:h> ^ <nat:3> + <nat:7> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 