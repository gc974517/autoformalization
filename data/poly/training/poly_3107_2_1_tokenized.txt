\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:4> ; <var:a> := <var:Y0> \end{verbatim} Assume that $ <var:m> = <var:x> $ ( given every $ <var:x> \in \mathbb{Z}^+ $ ) prior to interpreting our series of instructions , then $ <var:a> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be seen by the following decorated code segment . \begin{eqnarray} \{ <var:m> = <var:x> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:m> = <var:x> \land <var:Y0> = <nat:4> \} \\ <var:a> := <var:Y0> \\ \{ <var:m> = <var:x> \land <var:a> = <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:m> = <var:x> }} <var:Y0> := <nat:4> ; <var:a> := <var:Y0> {{ <var:a> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:a> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 