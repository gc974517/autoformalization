\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:t> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Allow that $ <var:t> = <var:v> $ before interpreting this series of commands it must be that $ <var:k> = <nat:2> \times <var:v> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for our series of commands is clear with Hoare techniques . Now , we see the variable assignmet statement \verb | <var:R0> := <nat:8> ; | . This transfers the condition $ \{ <var:t> = <var:v> \} $ toward the postcondition $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \} $ . Moving onward , the environment update statement \verb | <var:R1> := <nat:2> ; | . This code moves $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \} $ toward $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \} $ . Moving forward to the next statement found in our code segment , we see the variable update line \verb | <var:R1> := <var:R1> * <var:t> ; | . This redefines $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> \} $ as $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> * <var:v> \} $ . This is ensured through the assignment inference rule given by standard Hoare logic . Paying attention to the upcoming step found in the set of instructions , we see the assignment command \verb | <var:k> := <var:R1> ; | . This command forwards the precondition $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:R1> = <nat:2> * <var:v> \} $ to $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:k> = <nat:2> * <var:v> \} $ . Now , we have the variable update statement \verb | <var:k> := <var:k> + <var:R0> | . This line transfers $ \{ <var:t> = <var:v> \land <var:R0> = <nat:8> \land <var:k> = <nat:2> * <var:v> \} $ to the postcondition $ \{ <var:t> = <var:v> \land <var:k> = <nat:2> * <var:v> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:t> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:t> = <var:v> }} <def:poly> {{ <var:k> = <nat:2> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:R0> = <nat:8> /\ <var:k> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:k> = <nat:2> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 