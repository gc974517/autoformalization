\begin{document} \begin{theorem} Consider the following set of commands as follows \begin{verbatim} <var:B0> := <nat:3> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:i> ; <var:B2> := <var:B2> * <var:i> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:i> ; <var:B3> := <var:B3> * <var:i> ; <var:B3> := <var:B3> * <var:i> ; <var:u> := <var:B3> ; <var:u> := <var:u> + <var:B2> ; <var:u> := <var:u> + <var:B0> \end{verbatim} Allowing that we have $ <var:i> = <var:H> $ ( given all $ <var:H> $ ) ahead of the execution of our set of commands , then we see $ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be done with typical Hoare techniques . Paying attention to the following line seen in the code , we have the variable assignmet code \verb | <var:B0> := <nat:3> ; | . This command forwards the precondition $ \{ <var:i> = <var:H> \} $ as the postcondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \} $ . This is sound with the assignment inference rule defined in usual Hoare logic . Taking a look at the next line found in our set of commands , the variable binding statement \verb | <var:B2> := <nat:1> ; | . This code advances the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \} $ toward the postcondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> \} $ . This is sound using the assignment inference rule in typical Hoare techniques . Considering the upcoming line of code seen in the list of instructions , the assignment code letting $ <var:B2> * <var:i> $ as $ <var:B2>$ . This statement moves the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> \} $ into the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> \} $ . This is sound with the assignment inference rule given by standard Hoare logic . Further , the variable update code \verb | <var:B2> := <var:B2> * <var:i> ; | . This line moves the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> \} $ toward the postcondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \} $ . This is rigorously given using the assignment law given by Hoare reasoning . Advancing on , we have the environment update line \verb | <var:B3> := <nat:2> ; | . This statement moves $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \} $ to $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> \} $ . Taking a look at the upcoming piece of code found in our code segment , we have the binding line letting $ <var:B3> * <var:i> $ to $ <var:B3>$ . This statement redefines the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> \} $ into the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> \} $ . This is ensured by the assignment scheme from standard Hoare logic . Honing in on the following step in our list of commands , we see the command \verb | <var:B3> := <var:B3> * <var:i> ; | . This statement advances the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> \} $ toward the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> ^ <nat:2> \} $ . This is sound using the assignment scheme obtained from standard Hoare techniques . Paying attention to the next command in the program , we have the environment update line \verb | <var:B3> := <var:B3> * <var:i> ; | . This redefines the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> ^ <nat:2> \} $ as $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> ^ <nat:3> \} $ . Shifting focus toward the proceeding command seen in our code , the variable binding command \verb | <var:u> := <var:B3> ; | . This transfers $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:B3> = <nat:2> * <var:H> ^ <nat:3> \} $ as the condition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment law in standard Hoare reasoning . Further , the variable update statement assigning $ <var:u> + <var:B2> $ into $ <var:u>$ . This takes the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:B2> = <nat:1> * <var:H> ^ <nat:2> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> \} $ into the postcondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> \} $ . Moving forward , the binding code \verb | <var:u> := <var:u> + <var:B0> | . This line takes the precondition $ \{ <var:i> = <var:H> \land <var:B0> = <nat:3> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> \} $ toward the condition $ \{ <var:i> = <var:H> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} $ . This is sound through the assignment law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:i> = <var:H> }} <var:B0> := <nat:3> ; <var:B2> := <nat:1> ; <var:B2> := <var:B2> * <var:i> ; <var:B2> := <var:B2> * <var:i> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:i> ; <var:B3> := <var:B3> * <var:i> ; <var:B3> := <var:B3> * <var:i> ; <var:u> := <var:B3> ; <var:u> := <var:u> + <var:B2> ; <var:u> := <var:u> + <var:B0> {{ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:B3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:B2> = <nat:1> * <var:H> ^ <nat:2> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:B0> = <nat:3> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 