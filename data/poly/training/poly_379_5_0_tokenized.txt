\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:2> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:Y> ; <var:D> := <var:d1> ; <var:D> := <var:D> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume --- for any positive integers $ <var:P> $ --- $ <var:Y> = <var:P> $ ahead of evaluating the series of commands , it must be that we see $ <var:D> = <nat:1> \times <var:P> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare reasoning produces : \begin{eqnarray} \{ <var:Y> = <var:P> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:Y> = <var:P> \land <var:d0> = <nat:2> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:Y> = <var:P> \land <var:d0> = <nat:2> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:Y> ; \\ \{ <var:Y> = <var:P> \land <var:d0> = <nat:2> \land <var:d1> = <nat:1> \cdot <var:P> \} \\ <var:D> := <var:d1> ; \\ \{ <var:Y> = <var:P> \land <var:d0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:P> \} \\ <var:D> := <var:D> + <var:d0> \\ \{ <var:Y> = <var:P> \land <var:D> = <nat:1> \cdot <var:P> + <nat:2> \} \end{eqnarray} As a consequence , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:Y> ; <var:D> := <var:d1> ; <var:D> := <var:D> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Y> = <var:P> }} <def:poly> {{ <var:D> = <nat:1> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:d0> = <nat:2> /\ <var:D> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:D> = <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 