\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:m> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:m> ; <var:A2> := <var:A2> * <var:m> ; <var:Z> := <var:A2> ; <var:Z> := <var:Z> + <var:A1> ; <var:Z> := <var:Z> + <var:A0> \end{verbatim} Assume $ <var:m> = <var:g> $ , with some positive numbers $ <var:g> $ , ahead of the execution of the set of commands , then we see $ <var:Z> = <nat:1> \times <var:g> ^ <nat:2> + <nat:8> \times <var:g> + <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:m> = <var:g> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \} \\ <var:A1> := <nat:8> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> \} \\ <var:A1> := <var:A1> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> * <var:g> \} \\ <var:A2> := <nat:1> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> * <var:g> \land <var:A2> = <nat:1> \} \\ <var:A2> := <var:A2> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> * <var:g> \land <var:A2> = <nat:1> * <var:g> \} \\ <var:A2> := <var:A2> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> * <var:g> \land <var:A2> = <nat:1> * <var:g> ^ <nat:2> \} \\ <var:Z> := <var:A2> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:A1> = <nat:8> * <var:g> \land <var:Z> = <nat:1> * <var:g> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:A1> ; \\ \{ <var:m> = <var:g> \land <var:A0> = <nat:2> \land <var:Z> = <nat:1> * <var:g> ^ <nat:2> + <nat:8> * <var:g> \} \\ <var:Z> := <var:Z> + <var:A0> \\ \{ <var:m> = <var:g> \land <var:Z> = <nat:1> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:2> \} \end{eqnarray} As a result , our list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <var:A0> := <nat:2> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:m> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:m> ; <var:A2> := <var:A2> * <var:m> ; <var:Z> := <var:A2> ; <var:Z> := <var:Z> + <var:A1> ; <var:Z> := <var:Z> + <var:A0> {{ <var:Z> = <nat:1> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> * <var:g> /\ <var:A2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:8> * <var:g> /\ <var:Z> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:A0> = <nat:2> /\ <var:Z> = <nat:1> * <var:g> ^ <nat:2> + <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:Z> = <nat:1> * <var:g> ^ <nat:2> + <nat:8> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 