\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:C> ; <var:I2> := <var:I1> * <var:C> ; <var:I3> := <var:I2> * <var:C> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:8> ; <var:I2> := <var:I2> * <nat:8> ; <var:I3> := <var:I3> * <nat:6> ; <var:w> := <var:I3> <var:w> := <var:w> + <var:I2> <var:w> := <var:w> + <var:I1> <var:w> := <var:w> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allow $ <var:C> = <var:l> $ prior to the execution of our series of instructions , it follows that $ <var:w> = <nat:6> \times <var:l> ^ <nat:3> + <nat:8> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:1> $ when code segment has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:C> = <var:l> \} \\ <var:I1> := <var:C> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <var:l> \} \\ <var:I2> := <var:I1> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <var:l> \land <var:I2> = <var:l> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:C> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <var:l> \land <var:I2> = <var:l> ^ <nat:2> \land <var:I3> = <var:l> ^ <nat:3> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <var:l> \land <var:I2> = <var:l> ^ <nat:2> \land <var:I3> = <var:l> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ <var:I1> := <var:I1> * <nat:8> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <nat:8> \cdot <var:l> \land <var:I2> = <var:l> ^ <nat:2> \land <var:I3> = <var:l> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ <var:I2> := <var:I2> * <nat:8> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <nat:8> \cdot <var:l> \land <var:I2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:I3> = <var:l> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ <var:I3> := <var:I3> * <nat:6> ; \\ \{ <var:C> = <var:l> \land <var:I1> = <nat:8> \cdot <var:l> \land <var:I2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:I3> = <nat:6> \cdot <var:l> ^ <nat:3> \land <var:I0> = <nat:1> \} \\ <var:w> := <var:I3> \\ \{ <var:C> = <var:l> \land <var:I1> = <nat:8> \cdot <var:l> \land <var:I2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:w> = <nat:6> \cdot <var:l> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:I2> \\ \{ <var:C> = <var:l> \land <var:I1> = <nat:8> \cdot <var:l> \land <var:I0> = <nat:1> \land <var:w> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:I1> \\ \{ <var:C> = <var:l> \land <var:I0> = <nat:1> \land <var:w> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> \} \\ <var:w> := <var:w> + <var:I0> \\ \{ <var:C> = <var:l> \land <var:w> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:8> \cdot <var:l> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:C> ; <var:I2> := <var:I1> * <var:C> ; <var:I3> := <var:I2> * <var:C> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:8> ; <var:I2> := <var:I2> * <nat:8> ; <var:I3> := <var:I3> * <nat:6> ; <var:w> := <var:I3> <var:w> := <var:w> + <var:I2> <var:w> := <var:w> + <var:I1> <var:w> := <var:w> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:C> = <var:l> }} <def:poly> {{ <var:w> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <var:l> /\ <var:I2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <var:l> /\ <var:I2> = <var:l> ^ <nat:2> /\ <var:I3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <var:l> /\ <var:I2> = <var:l> ^ <nat:2> /\ <var:I3> = <var:l> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <nat:8> * <var:l> /\ <var:I2> = <var:l> ^ <nat:2> /\ <var:I3> = <var:l> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <nat:8> * <var:l> /\ <var:I2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:I3> = <var:l> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <nat:8> * <var:l> /\ <var:I2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <nat:8> * <var:l> /\ <var:I2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:I0> = <nat:1> /\ <var:w> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I1> = <nat:8> * <var:l> /\ <var:I0> = <nat:1> /\ <var:w> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:I0> = <nat:1> /\ <var:w> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:l> /\ <var:w> = <nat:6> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 