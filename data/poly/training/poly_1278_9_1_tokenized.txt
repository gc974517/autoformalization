\begin{document} \begin{theorem} Take a program : \begin{verbatim} <var:W1> := <var:j> ; <var:W2> := <var:W1> * <var:j> ; <var:W3> := <var:W2> * <var:j> ; <var:W0> := <nat:1> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:7> ; <var:r> := <var:W3> <var:r> := <var:r> + <var:W2> <var:r> := <var:r> + <var:W0> \end{verbatim} Assume assuming some integers $ <var:E> $ that we have $ <var:j> = <var:E> $ prior to executing our code segment , it holds that we see $ <var:r> = <nat:7> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:j> = <var:E> \} \\ <var:W1> := <var:j> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \} \\ <var:W2> := <var:W1> * <var:j> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:j> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:1> \} \end{eqnarray} Allowing the execution of our set of commands results in : \begin{eqnarray} <var:W2> := <var:W2> * <nat:3> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:W3> = <var:E> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:W3> := <var:W3> * <nat:7> ; \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:E> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:r> := <var:W3> \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W2> = <nat:3> \times <var:E> ^ <nat:2> \land <var:W0> = <nat:1> \land <var:r> = <nat:7> \times <var:E> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:W2> \\ \{ <var:j> = <var:E> \land <var:W1> = <var:E> \land <var:W0> = <nat:1> \land <var:r> = <nat:7> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:W0> \\ \{ <var:j> = <var:E> \land <var:r> = <nat:7> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:1> \} \end{eqnarray} Thusly , this code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:j> = <var:E> }} <var:W1> := <var:j> ; <var:W2> := <var:W1> * <var:j> ; <var:W3> := <var:W2> * <var:j> ; <var:W0> := <nat:1> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:7> ; <var:r> := <var:W3> <var:r> := <var:r> + <var:W2> <var:r> := <var:r> + <var:W0> {{ <var:r> = <nat:7> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:W3> = <var:E> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:E> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:W0> = <nat:1> /\ <var:r> = <nat:7> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:W1> = <var:E> /\ <var:W0> = <nat:1> /\ <var:r> = <nat:7> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:E> /\ <var:r> = <nat:7> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 