\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:5> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:A> ; <var:j2> := <var:j2> * <var:A> ; <var:j3> := <nat:3> ; <var:j3> := <var:j3> * <var:A> ; <var:j3> := <var:j3> * <var:A> ; <var:j3> := <var:j3> * <var:A> ; <var:Z> := <var:j3> ; <var:Z> := <var:Z> + <var:j2> ; <var:Z> := <var:Z> + <var:j0> \end{verbatim} Assume given $ <var:B> $ it to be that $ <var:A> = <var:B> $ before interpreting our set of commands it follows that we see $ <var:Z> = <nat:3> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> $ once series of commands exits . \end{theorem} \begin{proof} The proof of this set of instructions can be demonstrated by Hoare reasoning . Focusing on the subsequent bits of codeseen in our code , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:B> \} & <var:j0> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} & <var:j2> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \} \end{tabular} This is guaranteed by the law in Hoare techniques . Taking another step toward the subsequent pieces of code seen in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:B> \} & <var:j0> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} & <var:j2> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \} & <var:j2> := <var:j2> * <var:A> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> \} & <var:j2> := <var:j2> * <var:A> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> ^ <nat:2> \} \end{tabular} This is shown using the variable binding inference rule defined by typical Hoare logic . Looking at the next pieces of code in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:B> \} & <var:j0> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} & <var:j2> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \} & <var:j2> := <var:j2> * <var:A> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> \} \\ \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> \} & <var:j2> := <var:j2> * <var:A> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \land <var:j2> = <nat:5> \times <var:B> ^ <nat:2> \} \end{tabular} This is ensured using the variable update scheme from standard Hoare techniques . Honing in on the subsequent line in the list of commands , \[ \begin{tabular} {rcl} \{ <var:A> = <var:B> \} & <var:j0> := <nat:5> & \{ <var:A> = <var:B> \land <var:j0> = <nat:5> \} \end{tabular} This is shown to be logically sound using the rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:A> = <var:B> }} <var:j0> := <nat:5> ; <var:j2> := <nat:5> ; <var:j2> := <var:j2> * <var:A> ; <var:j2> := <var:j2> * <var:A> ; <var:j3> := <nat:3> ; <var:j3> := <var:j3> * <var:A> ; <var:j3> := <var:j3> * <var:A> ; <var:j3> := <var:j3> * <var:A> ; <var:Z> := <var:j3> ; <var:Z> := <var:Z> + <var:j2> ; <var:Z> := <var:Z> + <var:j0> {{ <var:Z> = <nat:3> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:j2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:Z> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:j0> = <nat:5> /\ <var:Z> = <nat:3> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:Z> = <nat:3> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 