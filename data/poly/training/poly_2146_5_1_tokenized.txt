\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:q1> := <var:T> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:3> ; <var:r> := <var:q1> <var:r> := <var:r> + <var:q0> \end{verbatim} Assume $ <var:T> = <var:O> $ prior to running our list of instructions it holds that we have $ <var:r> = <nat:3> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be given with usual Hoare logic . Moving on to the proceeding step seen in our series of commands , we have the assignment statement yielding $ <var:T> $ toward $ <var:q1>$ . This redefines $ \{ <var:T> = <var:O> \} $ into the condition $ \{ <var:T> = <var:O> \land <var:q1> = <var:O> \} $ . Advancing to the upcoming line found in our list of instructions , the environment update code giving $ <nat:1> $ as $ <var:q0>$ . This advances the precondition $ \{ <var:T> = <var:O> \land <var:q1> = <var:O> \} $ to $ \{ <var:T> = <var:O> \land <var:q1> = <var:O> \land <var:q0> = <nat:1> \} $ . After , the variable binding line defining $ <var:q1> * <nat:3> $ as $ <var:q1>$ . This takes the condition $ \{ <var:T> = <var:O> \land <var:q1> = <var:O> \land <var:q0> = <nat:1> \} $ toward the postcondition $ \{ <var:T> = <var:O> \land <var:q1> = <nat:3> \cdot <var:O> \land <var:q0> = <nat:1> \} $ . Going forward , we see the variable assignmet statement assigning $ <var:q1$ to $ <var:r>$ . This statement moves the precondition $ \{ <var:T> = <var:O> \land <var:q1> = <nat:3> \cdot <var:O> \land <var:q0> = <nat:1> \} $ toward the condition $ \{ <var:T> = <var:O> \land <var:q0> = <nat:1> \land <var:r> = <nat:3> \cdot <var:O> \} $ . This is sound by the assignment inference rule defined by Hoare reasoning . Moving on to the next step , the code defining $ <var:r> + <var:q0$ as $ <var:r>$ . This line transfers the precondition $ \{ <var:T> = <var:O> \land <var:q0> = <nat:1> \land <var:r> = <nat:3> \cdot <var:O> \} $ into the postcondition $ \{ <var:T> = <var:O> \land <var:r> = <nat:3> \cdot <var:O> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:T> = <var:O> }} <var:q1> := <var:T> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:3> ; <var:r> := <var:q1> <var:r> := <var:r> + <var:q0> {{ <var:r> = <nat:3> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:q1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:q1> = <var:O> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:q1> = <nat:3> * <var:O> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:q0> = <nat:1> /\ <var:r> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:O> /\ <var:r> = <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 