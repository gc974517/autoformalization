\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:4> + <var:d> * <var:t> ; <var:d> := <nat:1> + <var:d> * <var:t> ; <var:d> := <nat:1> + <var:d> * <var:t> ; <var:d> := <nat:3> + <var:d> * <var:t> ; <var:d> := <nat:4> + <var:d> * <var:t> ; <var:d> := <nat:2> + <var:d> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assuming --- given any natural coefficients $ <var:S> $ --- that we have $ <var:t> = <var:S> $ before evaluating the series of commands it follows that we have $ <var:d> = <nat:2> \cdot <var:S> ^ <nat:6> + <nat:4> \cdot <var:S> ^ <nat:5> + <nat:1> \cdot <var:S> ^ <nat:4> + <nat:1> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:4> \cdot <var:S> + <nat:2> $ once code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this program can be given by Hoare reasoning . Shifting focus toward the subsequent piece of code found in the segment of code , we see the assignment line \verb | <var:d> := <nat:2> ; | . This redefines $ \{ <var:t> = <var:S> \} $ into the postcondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \} $ . This is known to be sound using the assignment rule from standard Hoare techniques . Further , we see the assignment statement defining $ <nat:4> + <var:d> * <var:t> $ to $ <var:d>$ . This moves the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \} $ toward the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> + <nat:4> \} $ . Jumping to the proceeding line of code contained in the series of commands , the binding line \verb | <var:d> := <nat:1> + <var:d> * <var:t> ; | . This statement moves the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> + <nat:4> \} $ toward the postcondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:1> \} $ . This is deduced with the assignment inference rule obtained from usual Hoare techniques . Shifting focus toward the upcoming step seen in the series of instructions , the assignment statement \verb | <var:d> := <nat:1> + <var:d> * <var:t> ; | . This statement advances the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:1> \} $ to the postcondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:1> \} $ . Considering the following command contained in our code , the assignment line yielding $ <nat:3> + <var:d> * <var:t> $ to $ <var:d>$ . This advances the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:1> \} $ into $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:3> \} $ . This is sound with the assignment law in usual Hoare logic . Taking another step toward the subsequent line contained in our list of instructions , we see the variable binding statement \verb | <var:d> := <nat:4> + <var:d> * <var:t> ; | . This moves the condition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:5> + <nat:4> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:4> \} $ . This is shown using the assignment scheme obtained from typical Hoare techniques . Honing in on the next step found in our list of commands , we have the variable update statement binding $ <nat:2> + <var:d> * <var:t$ as $ <var:d>$ . This redefines the precondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:5> + <nat:4> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:4> \} $ into the postcondition $ \{ <var:t> = <var:S> \land <var:d> = <nat:2> \times <var:S> ^ <nat:6> + <nat:4> \times <var:S> ^ <nat:5> + <nat:1> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:2> ; <var:d> := <nat:4> + <var:d> * <var:t> ; <var:d> := <nat:1> + <var:d> * <var:t> ; <var:d> := <nat:1> + <var:d> * <var:t> ; <var:d> := <nat:3> + <var:d> * <var:t> ; <var:d> := <nat:4> + <var:d> * <var:t> ; <var:d> := <nat:2> + <var:d> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:t> = <var:S> }} <def:poly> {{ <var:d> = <nat:2> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> ^ <nat:5> + <nat:4> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:d> = <nat:2> * <var:S> ^ <nat:6> + <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 