\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:h1> := <var:b> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:6> ; <var:I> := <var:h1> <var:I> := <var:I> + <var:h0> \end{verbatim} Allowing $ <var:b> = <var:j> $ before running our list of commands then we see $ <var:I> = <nat:6> * <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:b> = <var:j> \} \\ <var:h1> := <var:b> ; \\ \{ <var:b> = <var:j> \land <var:h1> = <var:j> \} \\ <var:h0> := <nat:5> ; \\ \{ <var:b> = <var:j> \land <var:h1> = <var:j> \land <var:h0> = <nat:5> \} \\ <var:h1> := <var:h1> * <nat:6> ; \\ \{ <var:b> = <var:j> \land <var:h1> = <nat:6> \times <var:j> \land <var:h0> = <nat:5> \} \\ <var:I> := <var:h1> \\ \{ <var:b> = <var:j> \land <var:h0> = <nat:5> \land <var:I> = <nat:6> \times <var:j> \} \\ <var:I> := <var:I> + <var:h0> \\ \{ <var:b> = <var:j> \land <var:I> = <nat:6> \times <var:j> + <nat:5> \} \end{eqnarray} Thusly , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:b> = <var:j> }} <var:h1> := <var:b> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:6> ; <var:I> := <var:h1> <var:I> := <var:I> + <var:h0> {{ <var:I> = <nat:6> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:h1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:h1> = <var:j> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:h1> = <nat:6> * <var:j> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:h0> = <nat:5> /\ <var:I> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:j> /\ <var:I> = <nat:6> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 