\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:4> + <var:P> * <var:W> ; <var:P> := <nat:2> + <var:P> * <var:W> ; <var:P> := <nat:2> + <var:P> * <var:W> ; <var:P> := <nat:1> + <var:P> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:W> = <var:U> $ ahead of evaluating this list of instructions , it holds that we have $ <var:P> = <nat:3> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:1> $ once series of instructions has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is done with usual Hoare reasoning . Keeping momentum , we have the assignment command \verb | <var:P> := <nat:3> ; | . This code transfers the condition $ \{ <var:W> = <var:U> \} $ into $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \} $ . Observing the following command found in our list of commands , we have the binding statement \verb | <var:P> := <nat:4> + <var:P> * <var:W> ; | . This statement redefines the condition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \} $ to the condition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> + <nat:4> \} $ . This is ensured with the assignment inference rule found in usual Hoare reasoning . After , we see the environment update statement \verb | <var:P> := <nat:2> + <var:P> * <var:W> ; | . This forwards the precondition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> + <nat:4> \} $ into the condition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:2> \} $ . This is ensured by the assignment law found in typical Hoare reasoning . Focusing on the upcoming bit of code contained in our series of commands , we see the variable binding code \verb | <var:P> := <nat:2> + <var:P> * <var:W> ; | . This statement moves the precondition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:2> \} $ toward the postcondition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:2> \} $ . This is sound through the assignment law obtained from Hoare techniques . Advancing to the following statement found in the set of instructions , we see the variable update code \verb | <var:P> := <nat:1> + <var:P> * <var:W> | . This statement takes $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:2> \} $ toward the postcondition $ \{ <var:W> = <var:U> \land <var:P> = <nat:3> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:3> ; <var:P> := <nat:4> + <var:P> * <var:W> ; <var:P> := <nat:2> + <var:P> * <var:W> ; <var:P> := <nat:2> + <var:P> * <var:W> ; <var:P> := <nat:1> + <var:P> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:W> = <var:U> }} <def:poly> {{ <var:P> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:P> = <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:P> = <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:P> = <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:P> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 