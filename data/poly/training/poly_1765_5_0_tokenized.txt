\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:3> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:g> ; <var:N> := <var:J1> ; <var:N> := <var:N> + <var:J0> \end{verbatim} Allowing , for some $ <var:u> $ , it to hold that $ <var:g> = <var:u> $ ahead of the execution of this set of commands , it must be that we have $ <var:N> = <nat:2> * <var:u> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:u> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:g> = <var:u> \land <var:J0> = <nat:3> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:g> = <var:u> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> \} \\ <var:J1> := <var:J1> * <var:g> ; \\ \{ <var:g> = <var:u> \land <var:J0> = <nat:3> \land <var:J1> = <nat:2> \times <var:u> \} \\ <var:N> := <var:J1> ; \\ \{ <var:g> = <var:u> \land <var:J0> = <nat:3> \land <var:N> = <nat:2> \times <var:u> \} \\ <var:N> := <var:N> + <var:J0> \\ \{ <var:g> = <var:u> \land <var:N> = <nat:2> \times <var:u> + <nat:3> \} \end{eqnarray} Therefore , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:g> = <var:u> }} <var:J0> := <nat:3> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:g> ; <var:N> := <var:J1> ; <var:N> := <var:N> + <var:J0> {{ <var:N> = <nat:2> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:J0> = <nat:3> /\ <var:J1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:J0> = <nat:3> /\ <var:N> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:N> = <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 