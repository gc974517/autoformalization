\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:A> ; <var:P> := <var:m1> ; <var:P> := <var:P> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Assuming --- with some integers $ <var:j> $ --- that we have $ <var:A> = <var:j> $ ahead of evaluating our series of commands , it must be that $ <var:P> = <nat:4> \times <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:A> = <var:j> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:A> = <var:j> \land <var:m0> = <nat:3> \} \\ <var:m1> := <nat:4> ; \\ \{ <var:A> = <var:j> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> \} \\ <var:m1> := <var:m1> * <var:A> ; \\ \{ <var:A> = <var:j> \land <var:m0> = <nat:3> \land <var:m1> = <nat:4> * <var:j> \} \\ <var:P> := <var:m1> ; \\ \{ <var:A> = <var:j> \land <var:m0> = <nat:3> \land <var:P> = <nat:4> * <var:j> \} \\ <var:P> := <var:P> + <var:m0> \\ \{ <var:A> = <var:j> \land <var:P> = <nat:4> * <var:j> + <nat:3> \} \end{eqnarray} Therefore , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:A> ; <var:P> := <var:m1> ; <var:P> := <var:P> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <def:poly> {{ <var:P> = <nat:4> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:m0> = <nat:3> /\ <var:P> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:P> = <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 