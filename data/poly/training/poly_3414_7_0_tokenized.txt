\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:4> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:h> ; <var:a3> := <var:a3> * <var:h> ; <var:a3> := <var:a3> * <var:h> ; <var:F> := <var:a3> ; <var:F> := <var:F> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume with some positive numbers $ <var:x> $ it to hold that $ <var:h> = <var:x> $ ahead of the execution of our segment of code , then we see $ <var:F> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of commands can be shown using typical Hoare logic . Looking at the upcoming pieces of code contained in our set of commands , we have \verb | { <var:h> = <var:x> } <var:a0> := <nat:4> { <var:h> = <var:x> \land <var:a0> = <nat:4> } | , \verb | { <var:h> = <var:x> \land <var:a0> = <nat:4> } <var:a3> := <nat:3> { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> } | , \verb | { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> } <var:a3> := <var:a3> * <var:h> { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> } | , \verb | { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> } <var:a3> := <var:a3> * <var:h> { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> ^ <nat:2> } | , \verb | { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> ^ <nat:2> } <var:a3> := <var:a3> * <var:h> { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> ^ <nat:3> } | and \verb | { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:a3> = <nat:3> \cdot <var:x> ^ <nat:3> } <var:F> := <var:a3> { <var:h> = <var:x> \land <var:a0> = <nat:4> \land <var:F> = <nat:3> \cdot <var:x> ^ <nat:3> } | . Paying attention to the subsequent step contained in the list of commands , we have \verb | { <var:h> = <var:x> } <var:a0> := <nat:4> { <var:h> = <var:x> \land <var:a0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:h> ; <var:a3> := <var:a3> * <var:h> ; <var:a3> := <var:a3> * <var:h> ; <var:F> := <var:a3> ; <var:F> := <var:F> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:h> = <var:x> }} <def:poly> {{ <var:F> = <nat:3> * <var:x> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> /\ <var:a3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> /\ <var:a3> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> /\ <var:a3> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> /\ <var:a3> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:a0> = <nat:4> /\ <var:F> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:x> /\ <var:F> = <nat:3> * <var:x> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 