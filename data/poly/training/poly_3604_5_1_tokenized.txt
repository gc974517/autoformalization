\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:l> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:7> ; <var:e> := <var:q1> <var:e> := <var:e> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume taking positive integer coefficients $ <var:R> $ it to hold that $ <var:l> = <var:R> $ ahead of interpreting our set of instructions , it holds that we have $ <var:e> = <nat:7> \times <var:R> + <nat:9> $ after list of instructions has finished . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:l> = <var:R> \} \\ <var:q1> := <var:l> ; \\ \{ <var:l> = <var:R> \land <var:q1> = <var:R> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:l> = <var:R> \land <var:q1> = <var:R> \land <var:q0> = <nat:9> \} \\ <var:q1> := <var:q1> * <nat:7> ; \\ \{ <var:l> = <var:R> \land <var:q1> = <nat:7> \times <var:R> \land <var:q0> = <nat:9> \} \\ <var:e> := <var:q1> \\ \{ <var:l> = <var:R> \land <var:q0> = <nat:9> \land <var:e> = <nat:7> \times <var:R> \} \\ <var:e> := <var:e> + <var:q0> \\ \{ <var:l> = <var:R> \land <var:e> = <nat:7> \times <var:R> + <nat:9> \} \end{eqnarray} Hence , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:l> ; <var:q0> := <nat:9> ; <var:q1> := <var:q1> * <nat:7> ; <var:e> := <var:q1> <var:e> := <var:e> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:l> = <var:R> }} <def:poly> {{ <var:e> = <nat:7> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:q1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:q1> = <var:R> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:q1> = <nat:7> * <var:R> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:q0> = <nat:9> /\ <var:e> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:e> = <nat:7> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 