\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <nat:1> + <var:P> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Assuming , given all natural coefficients $ <var:Q> $ , it to be that $ <var:d> = <var:Q> $ ahead of interpreting our list of commands it follows that we have $ <var:P> = <nat:1> \cdot <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code can be shown by Hoare techniques . After , we have the code defining $ <nat:1> $ into $ <var:P>$ . This redefines the precondition $ \{ <var:d> = <var:Q> \} $ as $ \{ <var:d> = <var:Q> \land <var:P> = <nat:1> \} $ . Stepping forward , the variable update command assigning $ <nat:1> + <var:P> * <var:d$ to $ <var:P>$ . This redefines the precondition $ \{ <var:d> = <var:Q> \land <var:P> = <nat:1> \} $ to the condition $ \{ <var:d> = <var:Q> \land <var:P> = <nat:1> \times <var:Q> + <nat:1> \} $ . This is guaranteed through the assignment law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:1> ; <var:P> := <nat:1> + <var:P> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:d> = <var:Q> }} <def:poly> {{ <var:P> = <nat:1> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:P> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 