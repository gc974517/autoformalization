\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:P> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Allow taking natural numbers $ <var:z> $ that we have $ <var:i> = <var:z> $ ahead of evaluating the series of commands it holds that $ <var:P> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be done by usual Hoare logic . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:i> = <var:z> \} & <var:g0> := <nat:3> & \{ <var:i> = <var:z> \land <var:g0> = <nat:3> \} \end{tabular} This is deduced through the variable update law from standard Hoare reasoning . Looking at the next command contained in our program , \[ \begin{tabular} {rcl} \{ <var:i> = <var:z> \} & <var:g0> := <nat:3> & \{ <var:i> = <var:z> \land <var:g0> = <nat:3> \} \end{tabular} This is ensured through the law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:P> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:i> = <var:z> }} <def:poly> {{ <var:P> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:P> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 