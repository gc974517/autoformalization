\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:5> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:h> := <var:M2> ; <var:h> := <var:h> + <var:M1> ; <var:h> := <var:h> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:w> = <var:f> $ prior to the evaluation of this list of commands it follows that $ <var:h> = <nat:5> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:f> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \} \\ <var:M1> := <nat:8> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \} \\ <var:M1> := <var:M1> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \times <var:f> \} \\ <var:M2> := <nat:5> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \times <var:f> \land <var:M2> = <nat:5> \} \\ <var:M2> := <var:M2> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \times <var:f> \land <var:M2> = <nat:5> \times <var:f> \} \\ <var:M2> := <var:M2> * <var:w> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \times <var:f> \land <var:M2> = <nat:5> \times <var:f> ^ <nat:2> \} \\ <var:h> := <var:M2> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:M1> = <nat:8> \times <var:f> \land <var:h> = <nat:5> \times <var:f> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:M1> ; \\ \{ <var:w> = <var:f> \land <var:M0> = <nat:5> \land <var:h> = <nat:5> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> \} \\ <var:h> := <var:h> + <var:M0> \\ \{ <var:w> = <var:f> \land <var:h> = <nat:5> \times <var:f> ^ <nat:2> + <nat:8> \times <var:f> + <nat:5> \} \end{eqnarray} The application of standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:5> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:h> := <var:M2> ; <var:h> := <var:h> + <var:M1> ; <var:h> := <var:h> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:w> = <var:f> }} <def:poly> {{ <var:h> = <nat:5> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:f> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:f> /\ <var:M2> = <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:f> /\ <var:M2> = <nat:5> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:8> * <var:f> /\ <var:h> = <nat:5> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:M0> = <nat:5> /\ <var:h> = <nat:5> * <var:f> ^ <nat:2> + <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:f> /\ <var:h> = <nat:5> * <var:f> ^ <nat:2> + <nat:8> * <var:f> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 