\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:P> ; <var:j2> := <var:j1> * <var:P> ; <var:j3> := <var:j2> * <var:P> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:7> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Allowing that $ <var:P> = <var:c> $ --- given all positive integer coefficients $ <var:c> $ --- before the execution of our code , it follows that $ <var:k> = <nat:7> \cdot <var:c> ^ <nat:3> + <nat:7> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:1> $ after segment of code has exited . \end{theorem} \begin{proof} The proof of this code can be done with standard Hoare reasoning . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:c> \} & <var:j1> := <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \} & <var:j2> := <var:j1> * <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \} & <var:j3> := <var:j2> * <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \} & <var:j0> := <nat:1> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} & <var:j1> := <var:j1> * <nat:3> & \{ <var:P> = <var:c> \land <var:j1> = <nat:3> * <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} \end{tabular} Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:P> = <var:c> \} & <var:j1> := <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \} & <var:j2> := <var:j1> * <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \} & <var:j3> := <var:j2> * <var:P> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \} & <var:j0> := <nat:1> & \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} & <var:j1> := <var:j1> * <nat:3> & \{ <var:P> = <var:c> \land <var:j1> = <nat:3> * <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ \{ <var:P> = <var:c> \land <var:j1> = <nat:3> * <var:c> \land <var:j2> = <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} & <var:j2> := <var:j2> * <nat:7> & \{ <var:P> = <var:c> \land <var:j1> = <nat:3> * <var:c> \land <var:j2> = <nat:7> * <var:c> ^ <nat:2> \land <var:j3> = <var:c> ^ <nat:3> \land <var:j0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j1> := <var:P> ; <var:j2> := <var:j1> * <var:P> ; <var:j3> := <var:j2> * <var:P> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:7> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:P> = <var:c> }} <def:poly> {{ <var:k> = <nat:7> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <var:c> /\ <var:j2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <var:c> /\ <var:j2> = <var:c> ^ <nat:2> /\ <var:j3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <var:c> /\ <var:j2> = <var:c> ^ <nat:2> /\ <var:j3> = <var:c> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <nat:3> * <var:c> /\ <var:j2> = <var:c> ^ <nat:2> /\ <var:j3> = <var:c> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <nat:3> * <var:c> /\ <var:j2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:j3> = <var:c> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <nat:3> * <var:c> /\ <var:j2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:c> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <nat:3> * <var:c> /\ <var:j2> = <nat:7> * <var:c> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:7> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j1> = <nat:3> * <var:c> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:7> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:j0> = <nat:1> /\ <var:k> = <nat:7> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:c> /\ <var:k> = <nat:7> * <var:c> ^ <nat:3> + <nat:7> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 