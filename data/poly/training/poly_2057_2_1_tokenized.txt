\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:4> ; <var:U> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:l> = <var:I> $ before the execution of our code it holds that we have $ <var:U> = <nat:4> $ after code finishes . \end{theorem} \begin{proof} Notice the following decorated set of instructions . \begin{eqnarray} \{ <var:l> = <var:I> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:l> = <var:I> \land <var:W0> = <nat:4> \} \end{eqnarray} Furthering interpreting the list of commands gives us : \begin{eqnarray} <var:U> := <var:W0> \\ \{ <var:l> = <var:I> \land <var:U> = <nat:4> \} \end{eqnarray} Using usual Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:U> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:l> = <var:I> }} <def:poly> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:I> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:I> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 