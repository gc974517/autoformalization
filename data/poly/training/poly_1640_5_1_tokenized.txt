\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:t> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:2> ; <var:J> := <var:j1> <var:J> := <var:J> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assuming that $ <var:t> = <var:w> $ before interpreting our code it follows that we have $ <var:J> = <nat:2> \times <var:w> + <nat:1> $ when series of instructions finishes . \end{theorem} \begin{proof} Proving correctness for the list of commands is done using typical Hoare techniques . Now , the variable binding command assigning $ <var:t> $ to $ <var:j1>$ . This takes the precondition $ \{ <var:t> = <var:w> \} $ as the condition $ \{ <var:t> = <var:w> \land <var:j1> = <var:w> \} $ . Shifting focus toward the subsequent command in the code , we see the binding code \verb | <var:j0> := <nat:1> ; | . This advances $ \{ <var:t> = <var:w> \land <var:j1> = <var:w> \} $ into $ \{ <var:t> = <var:w> \land <var:j1> = <var:w> \land <var:j0> = <nat:1> \} $ . This is given using the assignment scheme given in typical Hoare reasoning . Advancing on , the line yielding $ <var:j1> * <nat:2> $ as $ <var:j1>$ . This statement takes $ \{ <var:t> = <var:w> \land <var:j1> = <var:w> \land <var:j0> = <nat:1> \} $ into the condition $ \{ <var:t> = <var:w> \land <var:j1> = <nat:2> \cdot <var:w> \land <var:j0> = <nat:1> \} $ . Further , the variable update statement yielding $ <var:j1$ to $ <var:J>$ . This line forwards the condition $ \{ <var:t> = <var:w> \land <var:j1> = <nat:2> \cdot <var:w> \land <var:j0> = <nat:1> \} $ to the condition $ \{ <var:t> = <var:w> \land <var:j0> = <nat:1> \land <var:J> = <nat:2> \cdot <var:w> \} $ . Now , the assignment command \verb | <var:J> := <var:J> + <var:j0> | . This code forwards the condition $ \{ <var:t> = <var:w> \land <var:j0> = <nat:1> \land <var:J> = <nat:2> \cdot <var:w> \} $ as the postcondition $ \{ <var:t> = <var:w> \land <var:J> = <nat:2> \cdot <var:w> + <nat:1> \} $ . This is ensured by the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:t> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:2> ; <var:J> := <var:j1> <var:J> := <var:J> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:t> = <var:w> }} <def:poly> {{ <var:J> = <nat:2> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:j1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:j1> = <var:w> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:j1> = <nat:2> * <var:w> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:j0> = <nat:1> /\ <var:J> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:w> /\ <var:J> = <nat:2> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 