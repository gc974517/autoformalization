\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:h> ; <var:A4> := <nat:8> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:U> := <var:A4> ; <var:U> := <var:U> + <var:A1> ; <var:U> := <var:U> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:h> = <var:C> $ ahead of evaluating the set of commands it follows that $ <var:U> = <nat:8> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> + <nat:3> $ after code segment executes . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is done using standard Hoare techniques . Moving on to the next step , the environment update line binding $ <nat:3> $ to $ <var:A0>$ . This code transfers the condition $ \{ <var:h> = <var:C> \} $ into the condition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \} $ . Moving forward to the proceeding line seen in the code , the assignment line defining $ <nat:3> $ to $ <var:A1>$ . This forwards the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \} $ to the condition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \} $ . Immediately following , we see the variable binding code defining $ <var:A1> * <var:h> $ toward $ <var:A1>$ . This takes the condition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> \} $ to $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \} $ . This is shown through the assignment law obtained from typical Hoare reasoning . Shifting focus toward the following bit of code found in the segment of code , we see the assignment command defining $ <nat:8> $ toward $ <var:A4>$ . This statement moves the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \} $ to $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> \} $ . Keeping momentum , we see the variable update line letting $ <var:A4> * <var:h> $ into $ <var:A4>$ . This code moves the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> \} $ into the postcondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> \} $ . Moving on , we have the assignment code giving $ <var:A4> * <var:h> $ as $ <var:A4>$ . This command moves the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> \} $ toward the condition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:2> \} $ . Immediately after , we see the variable update command defining $ <var:A4> * <var:h> $ into $ <var:A4>$ . This forwards the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:2> \} $ toward $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:3> \} $ . This is known to be sound using the assignment scheme defined in standard Hoare reasoning . Looking at the next piece of code seen in the set of commands , we have the binding line defining $ <var:A4> * <var:h> $ toward $ <var:A4>$ . This advances $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:4> \} $ . Now , the code \verb | <var:U> := <var:A4> ; | . This line moves $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:A4> = <nat:8> * <var:C> ^ <nat:4> \} $ to the postcondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:U> = <nat:8> * <var:C> ^ <nat:4> \} $ . This is deduced by the assignment law from Hoare reasoning . Honing in on the following step seen in our program , we have the assignment code defining $ <var:U> + <var:A1> $ into $ <var:U>$ . This advances the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:A1> = <nat:3> * <var:C> \land <var:U> = <nat:8> * <var:C> ^ <nat:4> \} $ as $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> \} $ . Moving on to the proceeding line of code found in our list of commands , we see the variable binding line defining $ <var:U> + <var:A0$ as $ <var:U>$ . This redefines the precondition $ \{ <var:h> = <var:C> \land <var:A0> = <nat:3> \land <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> \} $ to the condition $ \{ <var:h> = <var:C> \land <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A4> : string := " <var:A4> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:h> ; <var:A4> := <nat:8> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:A4> := <var:A4> * <var:h> ; <var:U> := <var:A4> ; <var:U> := <var:U> + <var:A1> ; <var:U> := <var:U> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <def:poly> {{ <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:A4> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:A4> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:A4> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:A4> = <nat:8> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:A4> = <nat:8> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:3> * <var:C> /\ <var:U> = <nat:8> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:A0> = <nat:3> /\ <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U> = <nat:8> * <var:C> ^ <nat:4> + <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 