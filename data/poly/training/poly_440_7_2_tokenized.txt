\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:2> + <var:X> * <var:o> ; <var:X> := <nat:4> + <var:X> * <var:o> ; <var:X> := <nat:2> + <var:X> * <var:o> ; <var:X> := <nat:1> + <var:X> * <var:o> ; <var:X> := <nat:1> + <var:X> * <var:o> ; <var:X> := <nat:4> + <var:X> * <var:o> \end{verbatim} Given that $ <var:o> = <var:f> $ , taking positive integer coefficients $ <var:f> $ , ahead of the execution of our list of instructions it follows that we have $ <var:X> = <nat:4> \cdot <var:f> ^ <nat:6> + <nat:2> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:2> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:4> $ when code segment exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:o> = <var:f> \} \\ <var:X> := <nat:4> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \} \\ <var:X> := <nat:2> + <var:X> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> + <nat:2> \} \\ <var:X> := <nat:4> + <var:X> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:4> \} \\ <var:X> := <nat:2> + <var:X> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:2> \} \\ <var:X> := <nat:1> + <var:X> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> ^ <nat:4> + <nat:2> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:1> \} \\ <var:X> := <nat:1> + <var:X> * <var:o> ; \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> ^ <nat:5> + <nat:2> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:1> \} \\ <var:X> := <nat:4> + <var:X> * <var:o> \\ \{ <var:o> = <var:f> \land <var:X> = <nat:4> \cdot <var:f> ^ <nat:6> + <nat:2> \cdot <var:f> ^ <nat:5> + <nat:4> \cdot <var:f> ^ <nat:4> + <nat:2> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:4> \} \end{eqnarray} Therefore , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:o> = <var:f> }} <var:X> := <nat:4> ; <var:X> := <nat:2> + <var:X> * <var:o> ; <var:X> := <nat:4> + <var:X> * <var:o> ; <var:X> := <nat:2> + <var:X> * <var:o> ; <var:X> := <nat:1> + <var:X> * <var:o> ; <var:X> := <nat:1> + <var:X> * <var:o> ; <var:X> := <nat:4> + <var:X> * <var:o> {{ <var:X> = <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:X> = <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 