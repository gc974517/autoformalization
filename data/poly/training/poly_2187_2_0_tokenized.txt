\begin{document} \begin{theorem} Define a segment of code as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:Y> := <var:J0> \end{verbatim} Assume that we have $ <var:F> = <var:I> $ ahead of interpreting our segment of code it must be that $ <var:Y> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:I> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:F> = <var:I> \land <var:J0> = <nat:1> \} \\ <var:Y> := <var:J0> \\ \{ <var:F> = <var:I> \land <var:Y> = <nat:1> \} \end{eqnarray} Applying typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:F> = <var:I> }} <var:J0> := <nat:1> ; <var:Y> := <var:J0> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 