\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:3> ; <var:q> := <var:j0> \end{verbatim} Given it to be that $ <var:N> = <var:s> $ ahead of the evaluation of this list of commands , it must be that we have $ <var:q> = <nat:3> $ after code segment exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:s> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:N> = <var:s> \land <var:j0> = <nat:3> \} \\ <var:q> := <var:j0> \\ \{ <var:N> = <var:s> \land <var:q> = <nat:3> \} \end{eqnarray} The application of typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:N> = <var:s> }} <var:j0> := <nat:3> ; <var:q> := <var:j0> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 