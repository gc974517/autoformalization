\begin{document} \begin{theorem} Consider the following code in \emph{Imp} : \begin{verbatim} <var:y1> := <var:k> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:7> ; <var:O> := <var:y1> <var:O> := <var:O> + <var:y0> \end{verbatim} Assuming that $ <var:k> = <var:e> $ ahead of the evaluation of this code , it follows that $ <var:O> = <nat:7> \cdot <var:e> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:k> = <var:e> \} \\ <var:y1> := <var:k> ; \\ \{ <var:k> = <var:e> \land <var:y1> = <var:e> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:k> = <var:e> \land <var:y1> = <var:e> \land <var:y0> = <nat:6> \} \\ <var:y1> := <var:y1> * <nat:7> ; \\ \{ <var:k> = <var:e> \land <var:y1> = <nat:7> * <var:e> \land <var:y0> = <nat:6> \} \\ <var:O> := <var:y1> \\ \{ <var:k> = <var:e> \land <var:y0> = <nat:6> \land <var:O> = <nat:7> * <var:e> \} \\ <var:O> := <var:O> + <var:y0> \\ \{ <var:k> = <var:e> \land <var:O> = <nat:7> * <var:e> + <nat:6> \} \end{eqnarray} Considering the above , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:k> = <var:e> }} <var:y1> := <var:k> ; <var:y0> := <nat:6> ; <var:y1> := <var:y1> * <nat:7> ; <var:O> := <var:y1> <var:O> := <var:O> + <var:y0> {{ <var:O> = <nat:7> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:y1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:y1> = <var:e> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:y1> = <nat:7> * <var:e> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:y0> = <nat:6> /\ <var:O> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:e> /\ <var:O> = <nat:7> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 