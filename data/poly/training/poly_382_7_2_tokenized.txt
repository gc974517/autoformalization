\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:4> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> \end{verbatim} Allowing $ <var:c> = <var:A> $ ahead of evaluating the segment of code it follows that $ <var:I> = <nat:2> \times <var:A> ^ <nat:6> + <nat:4> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> $ once list of instructions has exited . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:c> = <var:A> \} \\ <var:I> := <nat:2> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> \} \\ <var:I> := <nat:4> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> + <nat:4> \} \\ <var:I> := <nat:1> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> \} \\ <var:I> := <nat:3> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:3> \} \\ <var:I> := <nat:3> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:3> \} \\ <var:I> := <nat:2> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> \} \\ <var:I> := <nat:2> + <var:I> * <var:c> \\ \{ <var:c> = <var:A> \land <var:I> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> \} \end{eqnarray} Hence , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:c> = <var:A> }} <var:I> := <nat:2> ; <var:I> := <nat:4> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> {{ <var:I> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:I> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 