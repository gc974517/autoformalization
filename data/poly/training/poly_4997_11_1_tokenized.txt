\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:7> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:2> ; <var:F> := <var:K3> <var:F> := <var:F> + <var:K2> <var:F> := <var:F> + <var:K1> <var:F> := <var:F> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:C> = <var:Q> $ ahead of evaluating the list of commands it follows that we have $ <var:F> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:8> \times <var:Q> ^ <nat:2> + <nat:7> \times <var:Q> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is accomplished with usual Hoare reasoning . Taking another step toward the proceeding line in our series of instructions , the assignment line giving $ <var:C> $ to $ <var:K1>$ . This line forwards the condition $ \{ <var:C> = <var:Q> \} $ toward $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \} $ . This is shown to be logically sound with the assignment law found in typical Hoare logic . Observing the subsequent step found in the set of commands , we see the variable assignmet code giving $ <var:K1> * <var:C> $ to $ <var:K2>$ . This advances the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \} $ to the postcondition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule given in Hoare techniques . Further , we see the binding code yielding $ <var:K2> * <var:C> $ to $ <var:K3>$ . This takes the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \} $ to the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \} $ . This is deduced using the assignment law found in typical Hoare logic . Moving on to the following bit of code contained in our code segment , the assignment code giving $ <nat:5> $ as $ <var:K0>$ . This command advances $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \} $ into the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ . Paying attention to the proceeding bit of code in the program , we see the variable update command \verb | <var:K1> := <var:K1> * <nat:7> ; | . This line redefines the precondition $ \{ <var:C> = <var:Q> \land <var:K1> = <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ toward the postcondition $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ . This is sound using the assignment inference rule defined by usual Hoare reasoning . Paying attention to the upcoming command found in the set of commands , we have the environment update statement \verb | <var:K2> := <var:K2> * <nat:8> ; | . This advances the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ as $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ . Further , we see the binding command \verb | <var:K3> := <var:K3> * <nat:2> ; | . This forwards $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K3> = <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ toward $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ . This is given through the assignment scheme defined by usual Hoare logic . Moving forward to the next step , we have the variable binding line \verb | <var:F> := <var:K3> | . This line forwards the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:Q> ^ <nat:3> \land <var:K0> = <nat:5> \} $ as the postcondition $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> \} $ . Looking at the upcoming statement found in the set of instructions , we see the variable binding command \verb | <var:F> := <var:F> + <var:K2> | . This command takes $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K2> = <nat:8> \cdot <var:Q> ^ <nat:2> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> \} $ toward $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> \} $ . Moving on , we see the line assigning $ <var:F> + <var:K1$ to $ <var:F>$ . This takes the condition $ \{ <var:C> = <var:Q> \land <var:K1> = <nat:7> \cdot <var:Q> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:Q> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:7> \cdot <var:Q> \} $ . Immediately after , the environment update command binding $ <var:F> + <var:K0$ toward $ <var:F>$ . This transfers $ \{ <var:C> = <var:Q> \land <var:K0> = <nat:5> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:7> \cdot <var:Q> \} $ into the postcondition $ \{ <var:C> = <var:Q> \land <var:F> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:8> \cdot <var:Q> ^ <nat:2> + <nat:7> \cdot <var:Q> + <nat:5> \} $ . This is shown to be logically sound with the assignment inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:5> ; <var:K1> := <var:K1> * <nat:7> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:2> ; <var:F> := <var:K3> <var:F> := <var:F> + <var:K2> <var:F> := <var:F> + <var:K1> <var:F> := <var:F> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:C> = <var:Q> }} <def:poly> {{ <var:F> = <nat:2> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <nat:7> * <var:Q> /\ <var:K2> = <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <nat:7> * <var:Q> /\ <var:K2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:K3> = <var:Q> ^ <nat:3> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <nat:7> * <var:Q> /\ <var:K2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:Q> ^ <nat:3> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <nat:7> * <var:Q> /\ <var:K2> = <nat:8> * <var:Q> ^ <nat:2> /\ <var:K0> = <nat:5> /\ <var:F> = <nat:2> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K1> = <nat:7> * <var:Q> /\ <var:K0> = <nat:5> /\ <var:F> = <nat:2> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:K0> = <nat:5> /\ <var:F> = <nat:2> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:F> = <nat:2> * <var:Q> ^ <nat:3> + <nat:8> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 