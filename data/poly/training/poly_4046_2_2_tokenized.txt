\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given $ <var:o> = <var:i> $ prior to the evaluation of our list of commands , it holds that $ <var:r> = <nat:2> \times <var:i> + <nat:4> $ when series of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:i> \} \\ <var:r> := <nat:2> ; \\ \{ <var:o> = <var:i> \land <var:r> = <nat:2> \} \end{eqnarray} Continuing executing this series of commands gives us : \begin{eqnarray} <var:r> := <nat:4> + <var:r> * <var:o> \\ \{ <var:o> = <var:i> \land <var:r> = <nat:2> * <var:i> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:o> = <var:i> }} <def:poly> {{ <var:r> = <nat:2> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:r> = <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 