\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:i> ; <var:V> := <var:Q1> ; <var:V> := <var:V> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Assume $ <var:i> = <var:g> $ before the evaluation of our list of instructions , it holds that we see $ <var:V> = <nat:8> \cdot <var:g> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:g> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:i> = <var:g> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <nat:8> ; \\ \{ <var:i> = <var:g> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:8> \} \\ <var:Q1> := <var:Q1> * <var:i> ; \\ \{ <var:i> = <var:g> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:8> \cdot <var:g> \} \\ <var:V> := <var:Q1> ; \\ \{ <var:i> = <var:g> \land <var:Q0> = <nat:1> \land <var:V> = <nat:8> \cdot <var:g> \} \\ <var:V> := <var:V> + <var:Q0> \\ \{ <var:i> = <var:g> \land <var:V> = <nat:8> \cdot <var:g> + <nat:1> \} \end{eqnarray} Utilizing usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:1> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:i> ; <var:V> := <var:Q1> ; <var:V> := <var:V> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <def:poly> {{ <var:V> = <nat:8> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:Q0> = <nat:1> /\ <var:V> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:V> = <nat:8> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 