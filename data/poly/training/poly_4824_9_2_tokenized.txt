\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:l> ; <var:H> := <nat:3> + <var:H> * <var:l> ; <var:H> := <nat:2> + <var:H> * <var:l> ; <var:H> := <nat:1> + <var:H> * <var:l> ; <var:H> := <nat:2> + <var:H> * <var:l> ; <var:H> := <nat:3> + <var:H> * <var:l> ; <var:H> := <nat:1> + <var:H> * <var:l> ; <var:H> := <nat:4> + <var:H> * <var:l> \end{verbatim} Given $ <var:l> = <var:P> $ --- given all positive coefficients $ <var:P> $ --- before interpreting our list of instructions it follows that we see $ <var:H> = <nat:3> \cdot <var:P> ^ <nat:8> + <nat:3> \cdot <var:P> ^ <nat:6> + <nat:2> \cdot <var:P> ^ <nat:5> + <nat:1> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this program is given using Hoare techniques . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:l> = <var:P> \} & <var:H> := <nat:3> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} \\ \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} & <var:H> := <var:H> * <var:l> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> + \} \\ \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> + \} & <var:H> := <nat:3> + <var:H> * <var:l> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \} \\ \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \} & <var:H> := <nat:2> + <var:H> * <var:l> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> + <nat:2> \} \\ \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> + <nat:2> \} & <var:H> := <nat:1> + <var:H> * <var:l> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> + <nat:1> \} \end{tabular} Taking another step toward the next statement in our program , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:P> \} & <var:H> := <nat:3> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:l> = <var:P> \} & <var:H> := <nat:3> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} \end{tabular} Now , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:P> \} & <var:H> := <nat:3> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:P> \} & <var:H> := <nat:3> & \{ <var:l> = <var:P> \land <var:H> = <nat:3> \} \end{tabular} This is guaranteed with the variable binding inference rule found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:l> ; <var:H> := <nat:3> + <var:H> * <var:l> ; <var:H> := <nat:2> + <var:H> * <var:l> ; <var:H> := <nat:1> + <var:H> * <var:l> ; <var:H> := <nat:2> + <var:H> * <var:l> ; <var:H> := <nat:3> + <var:H> * <var:l> ; <var:H> := <nat:1> + <var:H> * <var:l> ; <var:H> := <nat:4> + <var:H> * <var:l> {{ <var:H> = <nat:3> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:7> + <nat:3> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:H> = <nat:3> * <var:P> ^ <nat:8> + <nat:3> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 