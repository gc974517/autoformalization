\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:G0> := <nat:5> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:U> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:U> ; <var:G2> := <var:G2> * <var:U> ; <var:u> := <var:G2> ; <var:u> := <var:u> + <var:G1> ; <var:u> := <var:u> + <var:G0> \end{verbatim} Assume it to hold that $ <var:U> = <var:K> $ ahead of interpreting our program then we have $ <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:5> $ once list of instructions has executed . \end{theorem} \begin{proof} The argument for our set of commands can be demonstrated with Hoare reasoning . Moving onward , we have \verb | { <var:U> = <var:K> } <var:G0> := <nat:5> { <var:U> = <var:K> \land <var:G0> = <nat:5> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> } <var:G1> := <nat:6> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> } <var:G1> := <var:G1> * <var:U> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> } <var:G2> := <nat:1> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> } <var:G2> := <var:G2> * <var:U> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> \times <var:K> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> \times <var:K> } <var:G2> := <var:G2> * <var:U> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> \times <var:K> ^ <nat:2> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:G2> = <nat:1> \times <var:K> ^ <nat:2> } <var:u> := <var:G2> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:u> = <nat:1> \times <var:K> ^ <nat:2> } | , \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:G1> = <nat:6> \times <var:K> \land <var:u> = <nat:1> \times <var:K> ^ <nat:2> } <var:u> := <var:u> + <var:G1> { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:u> = <nat:1> \times <var:K> ^ <nat:2> + <nat:6> \times <var:K> } | and \verb | { <var:U> = <var:K> \land <var:G0> = <nat:5> \land <var:u> = <nat:1> \times <var:K> ^ <nat:2> + <nat:6> \times <var:K> } <var:u> := <var:u> + <var:G0{ <var:U> = <var:K> \land <var:u> = <nat:1> \times <var:K> ^ <nat:2> + <nat:6> \times <var:K> + <nat:5> } | . This is shown to be logically sound by the variable assignmet inference rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:U> = <var:K> }} <var:G0> := <nat:5> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:U> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:U> ; <var:G2> := <var:G2> * <var:U> ; <var:u> := <var:G2> ; <var:u> := <var:u> + <var:G1> ; <var:u> := <var:u> + <var:G0> {{ <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> * <var:K> /\ <var:G2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> * <var:K> /\ <var:G2> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> * <var:K> /\ <var:G2> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:G1> = <nat:6> * <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:G0> = <nat:5> /\ <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:6> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 