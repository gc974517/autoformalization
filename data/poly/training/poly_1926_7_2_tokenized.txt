\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:D> := <nat:3> ; <var:D> := <nat:1> + <var:D> * <var:e> ; <var:D> := <nat:3> + <var:D> * <var:e> ; <var:D> := <nat:2> + <var:D> * <var:e> ; <var:D> := <nat:4> + <var:D> * <var:e> ; <var:D> := <nat:3> + <var:D> * <var:e> ; <var:D> := <nat:1> + <var:D> * <var:e> \end{verbatim} Assuming it to be that $ <var:e> = <var:B> $ for any $ <var:B> \in \mathbb{N} $ ahead of interpreting the segment of code , it must be that we have $ <var:D> = <nat:3> \cdot <var:B> ^ <nat:6> + <nat:1> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:1> $ after set of commands finishes . \end{theorem} \begin{proof} The proof of our series of instructions is given using typical Hoare logic . Looking at the following lines of codein our segment of code , \begin{eqnarray} \{ <var:e> = <var:B> \} \, <var:D> := <nat:3> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \} \\ \{ <var:e> = <var:B> \land <var:D> = <nat:3> \} \, <var:D> := <nat:1> + <var:D> * <var:e> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> + <nat:1> \} \\ \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> + <nat:1> \} \, <var:D> := <nat:3> + <var:D> * <var:e> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \\ \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \, <var:D> := <nat:2> + <var:D> * <var:e> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:2> \} \end{eqnarray} Taking a look at the next commands found in our series of commands , \begin{eqnarray} \{ <var:e> = <var:B> \} \, <var:D> := <nat:3> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \} \\ \{ <var:e> = <var:B> \land <var:D> = <nat:3> \} \, <var:D> := <nat:1> + <var:D> * <var:e> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> + <nat:1> \} \\ \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> + <nat:1> \} \, <var:D> := <nat:3> + <var:D> * <var:e> \, \{ <var:e> = <var:B> \land <var:D> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <var:D> := <nat:3> ; <var:D> := <nat:1> + <var:D> * <var:e> ; <var:D> := <nat:3> + <var:D> * <var:e> ; <var:D> := <nat:2> + <var:D> * <var:e> ; <var:D> := <nat:4> + <var:D> * <var:e> ; <var:D> := <nat:3> + <var:D> * <var:e> ; <var:D> := <nat:1> + <var:D> * <var:e> {{ <var:D> = <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 