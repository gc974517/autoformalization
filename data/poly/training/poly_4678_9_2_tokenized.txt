\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:1> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Allowing for every positive coefficients $ <var:r> $ that we have $ <var:q> = <var:r> $ prior to running the code segment , it must be that we see $ <var:K> = <nat:3> \times <var:r> ^ <nat:8> + <nat:2> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is clear through usual Hoare reasoning . Looking at the upcoming piece of code seen in our code segment , we have the variable assignmet line \verb | <var:K> := <nat:3> ; | . This takes $ \{ <var:q> = <var:r> \} $ to the postcondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \} $ . Shifting focus toward the next line seen in our code segment , we have the variable assignmet code yielding $ <var:K> * <var:q> $ as $ <var:K>$ . This redefines $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \} $ into $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> + \} $ . Looking at the proceeding command found in our series of commands , the variable binding statement \verb | <var:K> := <nat:2> + <var:K> * <var:q> ; | . This code takes the precondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> + \} $ as the condition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:2> \} $ . This is known to be sound with the assignment scheme in standard Hoare logic . After , we have the variable assignmet code letting $ <nat:4> + <var:K> * <var:q> $ toward $ <var:K>$ . This code moves the precondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:2> \} $ as the postcondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> + <nat:4> \} $ . Following , the statement defining $ <nat:1> + <var:K> * <var:q> $ to $ <var:K>$ . This code takes $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> + <nat:4> \} $ toward the postcondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} $ . Advancing , the variable assignmet command \verb | <var:K> := <nat:4> + <var:K> * <var:q> ; | . This statement transfers the condition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:4> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} $ into the postcondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:5> + <nat:2> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:4> \} $ . Shifting focus toward the proceeding step seen in the code , we see the variable update command \verb | <var:K> := <nat:2> + <var:K> * <var:q> ; | . This advances $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:5> + <nat:2> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:4> \} $ into the condition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:6> + <nat:2> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:2> \} $ . This is deduced by the assignment rule found in typical Hoare reasoning . Advancing to the proceeding line in the series of commands , we have the environment update line binding $ <nat:4> + <var:K> * <var:q> $ as $ <var:K>$ . This takes the precondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:6> + <nat:2> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:2> \} $ into $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:7> + <nat:2> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:4> \} $ . Paying attention to the upcoming line of code in the code segment , we have the code defining $ <nat:2> + <var:K> * <var:q$ to $ <var:K>$ . This forwards $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:7> + <nat:2> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:4> \} $ to the postcondition $ \{ <var:q> = <var:r> \land <var:K> = <nat:3> \cdot <var:r> ^ <nat:8> + <nat:2> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:3> ; <var:K> := <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:1> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> ; <var:K> := <nat:4> + <var:K> * <var:q> ; <var:K> := <nat:2> + <var:K> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:q> = <var:r> }} <def:poly> {{ <var:K> = <nat:3> * <var:r> ^ <nat:8> + <nat:2> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:r> /\ <var:K> = <nat:3> * <var:r> ^ <nat:8> + <nat:2> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 