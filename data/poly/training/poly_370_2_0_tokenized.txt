\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:o0> := <nat:3> ; <var:b> := <var:o0> \end{verbatim} Assume it to be that $ <var:q> = <var:h> $ --- letting natural numbers $ <var:h> $ --- ahead of the evaluation of this code segment , then $ <var:b> = <nat:3> $ once code exits . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:q> = <var:h> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:q> = <var:h> \land <var:o0> = <nat:3> \} \\ <var:b> := <var:o0> \\ \{ <var:q> = <var:h> \land <var:b> = <nat:3> \} \end{eqnarray} Thus , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <var:o0> := <nat:3> ; <var:b> := <var:o0> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 