\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:3> + <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> ; <var:A> := <nat:3> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> ; <var:A> := <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Assume that $ <var:y> = <var:X> $ prior to the execution of the series of instructions it holds that we see $ <var:A> = <nat:3> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is given using standard Hoare reasoning . Paying attention to the next commands contained in the segment of code , \[ \begin{tabular} {rcl} \{ <var:y> = <var:X> \} & <var:A> := <nat:3> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \} & <var:A> := <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> + \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> + \} & <var:A> := <nat:1> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \} & <var:A> := <nat:3> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> + <nat:3> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> + <nat:3> \} & <var:A> := <nat:1> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:1> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:1> \} & <var:A> := <nat:4> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> \} & <var:A> := <nat:3> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:3> \} \end{tabular} This is guaranteed using the scheme of standard Hoare reasoning . Looking at the upcoming lines contained in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:X> \} & <var:A> := <nat:3> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \} & <var:A> := <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> + \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> + \} & <var:A> := <nat:1> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \} \\ \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \} & <var:A> := <nat:3> + <var:A> * <var:y> & \{ <var:y> = <var:X> \land <var:A> = <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> + <nat:3> \} \end{tabular} This is shown to be logically sound with the variable binding law of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:3> ; <var:A> := <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:3> + <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> ; <var:A> := <nat:3> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> ; <var:A> := <var:A> * <var:y> ; <var:A> := <nat:1> + <var:A> * <var:y> ; <var:A> := <nat:4> + <var:A> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:y> = <var:X> }} <def:poly> {{ <var:A> = <nat:3> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:X> /\ <var:A> = <nat:3> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 