\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:6> ; <var:y> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:q> = <var:Z> $ ahead of running this segment of code it holds that $ <var:y> = <nat:6> $ once list of commands is done . \end{theorem} \begin{proof} Let the following decorated code . \begin{eqnarray} \{ <var:q> = <var:Z> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:q> = <var:Z> \land <var:G0> = <nat:6> \} \\ <var:y> := <var:G0> \\ \{ <var:q> = <var:Z> \land <var:y> = <nat:6> \} \end{eqnarray} Using typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:6> ; <var:y> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:q> = <var:Z> }} <def:poly> {{ <var:y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 