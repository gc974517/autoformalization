\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:f1> := <var:A> ; <var:f2> := <var:f1> * <var:A> ; <var:f3> := <var:f2> * <var:A> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:6> ; <var:f2> := <var:f2> * <nat:5> ; <var:f3> := <var:f3> * <nat:4> ; <var:Z> := <var:f3> <var:Z> := <var:Z> + <var:f2> <var:Z> := <var:Z> + <var:f1> <var:Z> := <var:Z> + <var:f0> \end{verbatim} Assuming it to be that $ <var:A> = <var:t> $ --- for some whole numbers $ <var:t> $ --- prior to interpreting this list of commands it follows that we have $ <var:Z> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:5> \cdot <var:t> ^ <nat:2> + <nat:6> \cdot <var:t> + <nat:5> $ once list of instructions terminates . \end{theorem} \begin{proof} The argument for this segment of code is accomplished by usual Hoare logic . Considering the subsequent bit of code in our program , we have the binding command yielding $ <var:A> $ to $ <var:f1>$ . This advances the condition $ \{ <var:A> = <var:t> \} $ as the postcondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \} $ . Moving forward to the proceeding line of code in our series of commands , the assignment line yielding $ <var:f1> * <var:A> $ as $ <var:f2>$ . This code forwards $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \} $ as the postcondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule from standard Hoare reasoning . Stepping through , we see the binding command yielding $ <var:f2> * <var:A> $ toward $ <var:f3>$ . This moves the precondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \} $ into the postcondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \} $ . Going to the next step , the assignment line \verb | <var:f0> := <nat:5> ; | . This takes the precondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \} $ toward the postcondition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ . Moving on to the subsequent statement in our set of instructions , the variable update code giving $ <var:f1> * <nat:6> $ as $ <var:f1>$ . This advances the condition $ \{ <var:A> = <var:t> \land <var:f1> = <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ toward the condition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ . This is sound through the assignment scheme found in Hoare reasoning . Advancing to the proceeding step seen in the code , we have the variable update statement letting $ <var:f2> * <nat:5> $ to $ <var:f2>$ . This code forwards the condition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ to the condition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ . Moving forward , we see the binding line \verb | <var:f3> := <var:f3> * <nat:4> ; | . This command takes $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f3> = <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ into the condition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ . Going to the next step , we see the code \verb | <var:Z> := <var:f3> | . This command transfers the precondition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f3> = <nat:4> \times <var:t> ^ <nat:3> \land <var:f0> = <nat:5> \} $ into the condition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> \} $ . This is rigorously given using the assignment rule from usual Hoare logic . Moving on to the following line in our set of commands , we have the assignment line giving $ <var:Z> + <var:f2$ to $ <var:Z>$ . This code forwards $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f2> = <nat:5> \times <var:t> ^ <nat:2> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> \} $ . Considering the following line of code found in our code , we have the variable assignmet statement \verb | <var:Z> := <var:Z> + <var:f1> | . This statement moves $ \{ <var:A> = <var:t> \land <var:f1> = <nat:6> \times <var:t> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:t> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> \} $ . Immediately following , the assignment code \verb | <var:Z> := <var:Z> + <var:f0> | . This statement forwards $ \{ <var:A> = <var:t> \land <var:f0> = <nat:5> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> \} $ as $ \{ <var:A> = <var:t> \land <var:Z> = <nat:4> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> + <nat:5> \} $ . This is sound with the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:A> = <var:t> }} <var:f1> := <var:A> ; <var:f2> := <var:f1> * <var:A> ; <var:f3> := <var:f2> * <var:A> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:6> ; <var:f2> := <var:f2> * <nat:5> ; <var:f3> := <var:f3> * <nat:4> ; <var:Z> := <var:f3> <var:Z> := <var:Z> + <var:f2> <var:Z> := <var:Z> + <var:f1> <var:Z> := <var:Z> + <var:f0> {{ <var:Z> = <nat:4> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <var:t> /\ <var:f2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <var:t> /\ <var:f2> = <var:t> ^ <nat:2> /\ <var:f3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <var:t> /\ <var:f2> = <var:t> ^ <nat:2> /\ <var:f3> = <var:t> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f2> = <var:t> ^ <nat:2> /\ <var:f3> = <var:t> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:f3> = <var:t> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:t> ^ <nat:3> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:f0> = <nat:5> /\ <var:Z> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f0> = <nat:5> /\ <var:Z> = <nat:4> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:f0> = <nat:5> /\ <var:Z> = <nat:4> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:t> /\ <var:Z> = <nat:4> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 