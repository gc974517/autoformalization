\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:E> := <var:H0> \end{verbatim} Assuming ( given all positive coefficients $ <var:G> $ ) it to be that $ <var:n> = <var:G> $ prior to interpreting this program it must be that $ <var:E> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is given using Hoare reasoning . Moving on , we see the variable update statement \verb | <var:H0> := <nat:1> ; | . This transfers $ \{ <var:n> = <var:G> \} $ to the postcondition $ \{ <var:n> = <var:G> \land <var:H0> = <nat:1> \} $ . Advancing to the next step found in our segment of code , we see the variable update code binding $ <var:H0$ as $ <var:E>$ . This forwards the precondition $ \{ <var:n> = <var:G> \land <var:H0> = <nat:1> \} $ toward the postcondition $ \{ <var:n> = <var:G> \land <var:E> = <nat:1> \} $ . This is ensured with the assignment rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <var:H0> := <nat:1> ; <var:E> := <var:H0> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 