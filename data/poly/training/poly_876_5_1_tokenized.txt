\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:G1> := <var:i> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:5> ; <var:p> := <var:G1> <var:p> := <var:p> + <var:G0> \end{verbatim} Assume ( assuming some positive integer coefficients $ <var:g> $ ) that we have $ <var:i> = <var:g> $ ahead of evaluating the series of instructions it must be that we have $ <var:p> = <nat:5> * <var:g> + <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated set of instructions . \begin{eqnarray} \{ <var:i> = <var:g> \} \\ <var:G1> := <var:i> ; \\ \{ <var:i> = <var:g> \land <var:G1> = <var:g> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:i> = <var:g> \land <var:G1> = <var:g> \land <var:G0> = <nat:3> \} \\ <var:G1> := <var:G1> * <nat:5> ; \\ \{ <var:i> = <var:g> \land <var:G1> = <nat:5> \cdot <var:g> \land <var:G0> = <nat:3> \} \\ <var:p> := <var:G1> \\ \{ <var:i> = <var:g> \land <var:G0> = <nat:3> \land <var:p> = <nat:5> \cdot <var:g> \} \\ <var:p> := <var:p> + <var:G0> \\ \{ <var:i> = <var:g> \land <var:p> = <nat:5> \cdot <var:g> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:i> = <var:g> }} <var:G1> := <var:i> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:5> ; <var:p> := <var:G1> <var:p> := <var:p> + <var:G0> {{ <var:p> = <nat:5> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:G1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:G1> = <var:g> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:G1> = <nat:5> * <var:g> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:G0> = <nat:3> /\ <var:p> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:g> /\ <var:p> = <nat:5> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 