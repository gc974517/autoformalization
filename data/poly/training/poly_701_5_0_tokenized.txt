\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:2> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:a> ; <var:E> := <var:w1> ; <var:E> := <var:E> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allow it to hold that $ <var:a> = <var:d> $ before executing this series of instructions it follows that we see $ <var:E> = <nat:7> * <var:d> + <nat:2> $ once code segment terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:d> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:a> = <var:d> \land <var:w0> = <nat:2> \} \\ <var:w1> := <nat:7> ; \\ \{ <var:a> = <var:d> \land <var:w0> = <nat:2> \land <var:w1> = <nat:7> \} \\ <var:w1> := <var:w1> * <var:a> ; \\ \{ <var:a> = <var:d> \land <var:w0> = <nat:2> \land <var:w1> = <nat:7> * <var:d> \} \\ <var:E> := <var:w1> ; \\ \{ <var:a> = <var:d> \land <var:w0> = <nat:2> \land <var:E> = <nat:7> * <var:d> \} \\ <var:E> := <var:E> + <var:w0> \\ \{ <var:a> = <var:d> \land <var:E> = <nat:7> * <var:d> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:a> ; <var:E> := <var:w1> ; <var:E> := <var:E> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <def:poly> {{ <var:E> = <nat:7> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:w0> = <nat:2> /\ <var:E> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:E> = <nat:7> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 