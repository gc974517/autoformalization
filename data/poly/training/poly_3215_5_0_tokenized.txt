\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:U> ; <var:x> := <var:k1> ; <var:x> := <var:x> + <var:k0> \end{verbatim} Assuming , for every natural numbers $ <var:z> $ , that $ <var:U> = <var:z> $ ahead of the execution of our segment of code it follows that we have $ <var:x> = <nat:5> \times <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this code segment is given with typical Hoare reasoning . Looking at the next line in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:z> \} & <var:k0> := <nat:4> & \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \} \end{tabular} Focusing on the upcoming line of code contained in the series of commands , \[ \begin{tabular} {rcl} \{ <var:U> = <var:z> \} & <var:k0> := <nat:4> & \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \} \end{tabular} This is shown with the variable update scheme given by usual Hoare logic . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:z> \} & <var:k0> := <nat:4> & \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \} \end{tabular} Considering the proceeding steps seen in our code , \[ \begin{tabular} {rcl} \{ <var:U> = <var:z> \} & <var:k0> := <nat:4> & \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \} \\ \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \} & <var:k1> := <nat:5> & \{ <var:U> = <var:z> \land <var:k0> = <nat:4> \land <var:k1> = <nat:5> \} \end{tabular} This is guaranteed by the assignment scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:U> = <var:z> }} <var:k0> := <nat:4> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:U> ; <var:x> := <var:k1> ; <var:x> := <var:x> + <var:k0> {{ <var:x> = <nat:5> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:k0> = <nat:4> /\ <var:x> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:z> /\ <var:x> = <nat:5> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 