\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> \end{verbatim} Allowing that $ <var:U> = <var:Q> $ prior to evaluating the set of instructions , it must be that we have $ <var:W> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the series of commands can be demonstrated with usual Hoare techniques . Considering the upcoming piece of code contained in our program , we see the variable update command giving $ <nat:1> $ as $ <var:W>$ . This statement takes the condition $ \{ <var:U> = <var:Q> \} $ to $ \{ <var:U> = <var:Q> \land <var:W> = <nat:1> \} $ . This is deduced through the assignment scheme found in standard Hoare reasoning . Taking a look at the subsequent piece of code seen in our segment of code , the assignment code assigning $ <var:W> * <var:U> $ into $ <var:W>$ . This statement takes the precondition $ \{ <var:U> = <var:Q> \land <var:W> = <nat:1> \} $ to the condition $ \{ <var:U> = <var:Q> \land <var:W> = <nat:1> * <var:Q> + \} $ . This is sound by the assignment law given by Hoare techniques . Going to the next step , we have the variable binding command defining $ <nat:1> + <var:W> * <var:U$ to $ <var:W>$ . This code transfers $ \{ <var:U> = <var:Q> \land <var:W> = <nat:1> * <var:Q> + \} $ into $ \{ <var:U> = <var:Q> \land <var:W> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> \} $ . This is sound by the assignment law in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:U> = <var:Q> }} <var:W> := <nat:1> ; <var:W> := <var:W> * <var:U> ; <var:W> := <nat:1> + <var:W> * <var:U> {{ <var:W> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:W> = <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:W> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 