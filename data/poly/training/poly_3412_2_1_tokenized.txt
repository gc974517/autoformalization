\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:4> ; <var:f> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> . Assuming for some positive integers $ <var:N> $ that we have $ <var:k> = <var:N> $ ahead of the execution of our set of instructions then we have $ <var:f> = <nat:4> $ after list of instructions exits . \end{theorem} \begin{proof} The method of proof for the code is given through standard Hoare reasoning . Shifting focus toward the next piece of code contained in our code , \begin{verbatim} { <var:k> = <var:N> } <var:m0> := <nat:4> { <var:k> = <var:N> \land <var:m0> = <nat:4> } \end{verbatim} This is ensured using the assignment inference rule given by Hoare reasoning . Observing the next step in our program , we see \begin{verbatim} { <var:k> = <var:N> } <var:m0> := <nat:4> { <var:k> = <var:N> \land <var:m0> = <nat:4> } \end{verbatim} This is given using the binding law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:f> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:k> = <var:N> }} <def:poly> {{ <var:f> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:f> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 