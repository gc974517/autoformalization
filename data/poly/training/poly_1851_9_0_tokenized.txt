\begin{document} \begin{theorem} Define a list of instructions as follows \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:b> := <var:S2> ; <var:b> := <var:b> + <var:S1> ; <var:b> := <var:b> + <var:S0> \end{verbatim} Given $ <var:n> = <var:p> $ prior to the execution of our set of instructions , then we see $ <var:b> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:n> = <var:p> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \} \\ <var:S1> := <nat:9> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \} \\ <var:S1> := <var:S1> * <var:n> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \cdot <var:p> \} \\ <var:S2> := <nat:5> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \cdot <var:p> \land <var:S2> = <nat:5> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \cdot <var:p> \land <var:S2> = <nat:5> \cdot <var:p> \} \\ <var:S2> := <var:S2> * <var:n> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \cdot <var:p> \land <var:S2> = <nat:5> \cdot <var:p> ^ <nat:2> \} \\ <var:b> := <var:S2> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:S1> = <nat:9> \cdot <var:p> \land <var:b> = <nat:5> \cdot <var:p> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:S1> ; \\ \{ <var:n> = <var:p> \land <var:S0> = <nat:4> \land <var:b> = <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> \} \\ <var:b> := <var:b> + <var:S0> \\ \{ <var:n> = <var:p> \land <var:b> = <nat:5> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:n> = <var:p> }} <var:S0> := <nat:4> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:n> ; <var:S2> := <nat:5> ; <var:S2> := <var:S2> * <var:n> ; <var:S2> := <var:S2> * <var:n> ; <var:b> := <var:S2> ; <var:b> := <var:b> + <var:S1> ; <var:b> := <var:b> + <var:S0> {{ <var:b> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> * <var:p> /\ <var:S2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> * <var:p> /\ <var:S2> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> * <var:p> /\ <var:S2> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:9> * <var:p> /\ <var:b> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:S0> = <nat:4> /\ <var:b> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:b> = <nat:5> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 