\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:S> ; <var:m> := <var:s1> ; <var:m> := <var:m> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:S> = <var:l> $ --- for every $ <var:l> $ --- ahead of evaluating this set of instructions it holds that $ <var:m> = <nat:2> \times <var:l> + <nat:7> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Let the following decorated set of instructions . \begin{eqnarray} \{ <var:S> = <var:l> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:S> = <var:l> \land <var:s0> = <nat:7> \} \\ <var:s1> := <nat:2> ; \\ \{ <var:S> = <var:l> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> \} \\ <var:s1> := <var:s1> * <var:S> ; \\ \{ <var:S> = <var:l> \land <var:s0> = <nat:7> \land <var:s1> = <nat:2> \cdot <var:l> \} \\ <var:m> := <var:s1> ; \\ \{ <var:S> = <var:l> \land <var:s0> = <nat:7> \land <var:m> = <nat:2> \cdot <var:l> \} \\ <var:m> := <var:m> + <var:s0> \\ \{ <var:S> = <var:l> \land <var:m> = <nat:2> \cdot <var:l> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:7> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:S> ; <var:m> := <var:s1> ; <var:m> := <var:m> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:m> = <nat:2> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:s0> = <nat:7> /\ <var:m> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:m> = <nat:2> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 