\begin{document} \begin{theorem} We define the following program in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:N> ; <var:P> := <nat:3> + <var:P> * <var:N> \end{verbatim} Allowing that we have $ <var:N> = <var:Q> $ --- for $ <var:Q> \in \mathbb{N} $ --- prior to executing the set of instructions , it holds that $ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} Proving correctness for the series of commands can be seen through Hoare logic . Observing the following command found in our list of instructions , we have the line \verb | <var:P> := <nat:4> ; | . This redefines the precondition $ \{ <var:N> = <var:Q> \} $ as $ \{ <var:N> = <var:Q> \land <var:P> = <nat:4> \} $ . Taking a look at the following command found in the series of commands , we see the variable update code \verb | <var:P> := <nat:3> + <var:P> * <var:N> ; | . This code takes the precondition $ \{ <var:N> = <var:Q> \land <var:P> = <nat:4> \} $ as the postcondition $ \{ <var:N> = <var:Q> \land <var:P> = <nat:4> \times <var:Q> + <nat:3> \} $ . Looking at the upcoming command found in our series of commands , we have the variable binding command binding $ <nat:3> + <var:P> * <var:N$ as $ <var:P>$ . This takes $ \{ <var:N> = <var:Q> \land <var:P> = <nat:4> \times <var:Q> + <nat:3> \} $ as the postcondition $ \{ <var:N> = <var:Q> \land <var:P> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> \} $ . This is known to be sound using the assignment rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:N> = <var:Q> }} <var:P> := <nat:4> ; <var:P> := <nat:3> + <var:P> * <var:N> ; <var:P> := <nat:3> + <var:P> * <var:N> {{ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:P> = <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Q> /\ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 