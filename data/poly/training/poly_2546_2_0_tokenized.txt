\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:3> ; <var:d> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:A> = <var:P> $ ahead of executing this code , it must be that $ <var:d> = <nat:3> $ when code has executed . \end{theorem} \begin{proof} The way to prove correctness for this list of commands is done by Hoare reasoning . Observing the proceeding statement in our series of commands , we see \verb | { <var:A> = <var:P> } <var:t0> := <nat:3> { <var:A> = <var:P> \land <var:t0> = <nat:3> } | . This is guaranteed through the binding law obtained from Hoare techniques . Keeping momentum , \verb | { <var:A> = <var:P> } <var:t0> := <nat:3> { <var:A> = <var:P> \land <var:t0> = <nat:3> } | . This is given using the variable binding rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:d> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:A> = <var:P> }} <def:poly> {{ <var:d> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:d> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 