\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:M> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:M> ; <var:W2> := <var:W2> * <var:M> ; <var:e> := <var:W2> ; <var:e> := <var:e> + <var:W1> ; <var:e> := <var:e> + <var:W0> \end{verbatim} Allowing $ <var:M> = <var:Z> $ ahead of interpreting our series of instructions , it holds that $ <var:e> = <nat:4> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:6> $ when program has exited . \end{theorem} \begin{proof} The course of logic for our series of instructions is clear with usual Hoare reasoning . Looking at the following step in the list of commands , we see the variable assignmet command \verb | <var:W0> := <nat:6> ; | . This advances the condition $ \{ <var:M> = <var:Z> \} $ toward the condition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \} $ . After , we see the environment update code binding $ <nat:6> $ as $ <var:W1>$ . This command moves the precondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \} $ into the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \} $ . Looking at the subsequent line contained in our list of instructions , we see the line \verb | <var:W1> := <var:W1> * <var:M> ; | . This statement transfers the condition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \} $ toward the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \} $ . Moving forward , we have the statement giving $ <nat:4> $ toward $ <var:W2>$ . This redefines the precondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \} $ to the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \} $ . Advancing , we see the variable binding statement defining $ <var:W2> * <var:M> $ to $ <var:W2>$ . This forwards $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \} $ into the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \times <var:Z> \} $ . Taking a look at the subsequent piece of code seen in the list of commands , the binding line assigning $ <var:W2> * <var:M> $ as $ <var:W2>$ . This line transfers the precondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \times <var:Z> \} $ toward the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \times <var:Z> ^ <nat:2> \} $ . This is shown with the assignment rule defined by standard Hoare techniques . Further , the environment update statement assigning $ <var:W2> $ to $ <var:e>$ . This command transfers $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:W2> = <nat:4> \times <var:Z> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:e> = <nat:4> \times <var:Z> ^ <nat:2> \} $ . This is ensured using the assignment inference rule defined by usual Hoare logic . Considering the subsequent command contained in our series of instructions , we have the assignment command defining $ <var:e> + <var:W1> $ toward $ <var:e>$ . This code takes the condition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:W1> = <nat:6> \times <var:Z> \land <var:e> = <nat:4> \times <var:Z> ^ <nat:2> \} $ into the postcondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:e> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> \} $ . Going forward , we have the binding statement \verb | <var:e> := <var:e> + <var:W0> | . This line moves the precondition $ \{ <var:M> = <var:Z> \land <var:W0> = <nat:6> \land <var:e> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> \} $ to $ \{ <var:M> = <var:Z> \land <var:e> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:6> \} $ . This is deduced with the assignment law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:M> = <var:Z> }} <var:W0> := <nat:6> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:M> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:M> ; <var:W2> := <var:W2> * <var:M> ; <var:e> := <var:W2> ; <var:e> := <var:e> + <var:W1> ; <var:e> := <var:e> + <var:W0> {{ <var:e> = <nat:4> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> * <var:Z> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> * <var:Z> /\ <var:W2> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> * <var:Z> /\ <var:W2> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:6> * <var:Z> /\ <var:e> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:W0> = <nat:6> /\ <var:e> = <nat:4> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:e> = <nat:4> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 