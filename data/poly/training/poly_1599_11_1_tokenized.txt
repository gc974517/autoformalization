\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:u> ; <var:U2> := <var:U1> * <var:u> ; <var:U3> := <var:U2> * <var:u> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:1> ; <var:n> := <var:U3> <var:n> := <var:n> + <var:U2> <var:n> := <var:n> + <var:U1> <var:n> := <var:n> + <var:U0> \end{verbatim} Allowing it to hold that $ <var:u> = <var:T> $ , given natural numbers $ <var:T> $ , ahead of the execution of our list of commands it must be that $ <var:n> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:8> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:9> $ when series of instructions has terminated . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:u> = <var:T> \} \\ <var:U1> := <var:u> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <var:T> \} \\ <var:U2> := <var:U1> * <var:u> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:u> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U0> = <nat:9> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U0> = <nat:9> \} \\ <var:U2> := <var:U2> * <nat:8> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U0> = <nat:9> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:u> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:T> ^ <nat:3> \land <var:U0> = <nat:9> \} \\ <var:n> := <var:U3> \\ \{ <var:u> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:8> \times <var:T> ^ <nat:2> \land <var:U0> = <nat:9> \land <var:n> = <nat:1> \times <var:T> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:U2> \\ \{ <var:u> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U0> = <nat:9> \land <var:n> = <nat:1> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:U1> \\ \{ <var:u> = <var:T> \land <var:U0> = <nat:9> \land <var:n> = <nat:1> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> \} \\ <var:n> := <var:n> + <var:U0> \\ \{ <var:u> = <var:T> \land <var:n> = <nat:1> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:9> \} \end{eqnarray} Hence , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <var:U1> := <var:u> ; <var:U2> := <var:U1> * <var:u> ; <var:U3> := <var:U2> * <var:u> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:8> ; <var:U3> := <var:U3> * <nat:1> ; <var:n> := <var:U3> <var:n> := <var:n> + <var:U2> <var:n> := <var:n> + <var:U1> <var:n> := <var:n> + <var:U0> {{ <var:n> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:U0> = <nat:9> /\ <var:n> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U0> = <nat:9> /\ <var:n> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:U0> = <nat:9> /\ <var:n> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:n> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 