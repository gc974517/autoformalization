\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:j> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Assuming , taking natural numbers $ <var:Z> $ , it to be that $ <var:j> = <var:Z> $ prior to executing the set of commands it holds that we have $ <var:F> = <nat:1> \cdot <var:Z> + <nat:3> $ after set of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be given with typical Hoare logic . Following , we see \verb | { <var:j> = <var:Z> } <var:F> := <nat:1> { <var:j> = <var:Z> \land <var:F> = <nat:1> } | . This is shown to be logically sound through the binding inference rule defined in Hoare logic . Now , \verb | { <var:j> = <var:Z> } <var:F> := <nat:1> { <var:j> = <var:Z> \land <var:F> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:j> = <var:Z> }} <def:poly> {{ <var:F> = <nat:1> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:F> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 