\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:7> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:c> ; <var:B> := <var:D1> ; <var:B> := <var:B> + <var:D0> \end{verbatim} Assume that we have $ <var:c> = <var:T> $ prior to evaluating our list of instructions it holds that $ <var:B> = <nat:6> \times <var:T> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the code can be given by Hoare logic . Considering the following bit of code in the program , we see the variable binding line giving $ <nat:7> $ into $ <var:D0>$ . This takes the precondition $ \{ <var:c> = <var:T> \} $ as $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \} $ . This is given using the assignment scheme given by standard Hoare techniques . Taking another step toward the following line of code found in the code segment , the variable update command \verb | <var:D1> := <nat:6> ; | . This code redefines the precondition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \} $ into the postcondition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:D1> = <nat:6> \} $ . Taking a look at the following piece of code found in our set of instructions , we have the assignment code letting $ <var:D1> * <var:c> $ toward $ <var:D1>$ . This code transfers the condition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:D1> = <nat:6> \} $ toward $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:D1> = <nat:6> \cdot <var:T> \} $ . Honing in on the following piece of code seen in our list of instructions , we see the assignment command \verb | <var:B> := <var:D1> ; | . This advances the precondition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:D1> = <nat:6> \cdot <var:T> \} $ to the postcondition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:B> = <nat:6> \cdot <var:T> \} $ . Paying attention to the next step in our segment of code , we see the binding line \verb | <var:B> := <var:B> + <var:D0> | . This command advances the precondition $ \{ <var:c> = <var:T> \land <var:D0> = <nat:7> \land <var:B> = <nat:6> \cdot <var:T> \} $ as $ \{ <var:c> = <var:T> \land <var:B> = <nat:6> \cdot <var:T> + <nat:7> \} $ . This is shown with the assignment scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <var:D0> := <nat:7> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:c> ; <var:B> := <var:D1> ; <var:B> := <var:B> + <var:D0> {{ <var:B> = <nat:6> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:D0> = <nat:7> /\ <var:D1> = <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:D0> = <nat:7> /\ <var:B> = <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:B> = <nat:6> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 