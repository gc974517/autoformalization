\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:k> ; <var:e2> := <var:e1> * <var:k> ; <var:e3> := <var:e2> * <var:k> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:2> ; <var:e3> := <var:e3> * <nat:2> ; <var:V> := <var:e3> <var:V> := <var:V> + <var:e1> <var:V> := <var:V> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Assuming it to hold that $ <var:k> = <var:F> $ prior to the execution of our list of commands then we have $ <var:V> = <nat:2> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:k> = <var:F> \} \\ <var:e1> := <var:k> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <var:F> \} \\ <var:e2> := <var:e1> * <var:k> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:k> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:2> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <nat:2> \times <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <var:F> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:e3> := <var:e3> * <nat:2> ; \\ \{ <var:k> = <var:F> \land <var:e1> = <nat:2> \times <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e3> = <nat:2> \times <var:F> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:V> := <var:e3> \\ \{ <var:k> = <var:F> \land <var:e1> = <nat:2> \times <var:F> \land <var:e2> = <var:F> ^ <nat:2> \land <var:e0> = <nat:1> \land <var:V> = <nat:2> \times <var:F> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:e1> \\ \{ <var:k> = <var:F> \land <var:e0> = <nat:1> \land <var:V> = <nat:2> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> \} \\ <var:V> := <var:V> + <var:e0> \\ \{ <var:k> = <var:F> \land <var:V> = <nat:2> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> + <nat:1> \} \end{eqnarray} Hence , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:k> ; <var:e2> := <var:e1> * <var:k> ; <var:e3> := <var:e2> * <var:k> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:2> ; <var:e3> := <var:e3> * <nat:2> ; <var:V> := <var:e3> <var:V> := <var:V> + <var:e1> <var:V> := <var:V> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:k> = <var:F> }} <def:poly> {{ <var:V> = <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <nat:2> * <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <var:F> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <nat:2> * <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e1> = <nat:2> * <var:F> /\ <var:e2> = <var:F> ^ <nat:2> /\ <var:e0> = <nat:1> /\ <var:V> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:e0> = <nat:1> /\ <var:V> = <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:V> = <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 