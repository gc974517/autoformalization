\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:2> ; <var:h> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for some $ <var:B> $ ) that we have $ <var:e> = <var:B> $ before evaluating this code it must be that we see $ <var:h> = <nat:2> $ once set of commands has finished . \end{theorem} \begin{proof} Observe that the following decorated segment of code . \begin{eqnarray} \{ <var:e> = <var:B> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:e> = <var:B> \land <var:o0> = <nat:2> \} \\ <var:h> := <var:o0> \\ \{ <var:e> = <var:B> \land <var:h> = <nat:2> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:h> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <def:poly> {{ <var:h> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:h> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 