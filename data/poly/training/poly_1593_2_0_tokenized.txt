\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:j0> := <nat:8> ; <var:p> := <var:j0> \end{verbatim} Assuming ( for any positive numbers $ <var:N> $ ) $ <var:g> = <var:N> $ before the execution of the set of commands , it holds that $ <var:p> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be seen using typical Hoare techniques . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:N> \} & <var:j0> := <nat:8> & \{ <var:g> = <var:N> \land <var:j0> = <nat:8> \} \\ \{ <var:g> = <var:N> \land <var:j0> = <nat:8> \} & <var:p> := <var:j0& \{ <var:g> = <var:N> \land <var:p> = <nat:8> \} \end{tabular} This is sound using the inference rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <var:j0> := <nat:8> ; <var:p> := <var:j0> {{ <var:p> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:p> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 