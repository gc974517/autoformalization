\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:g> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:f> := <var:Q1> <var:f> := <var:f> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:g> = <var:z> $ ahead of evaluating our segment of code , it follows that $ <var:f> = <nat:5> \times <var:z> + <nat:1> $ when list of commands has terminated . \end{theorem} \begin{proof} The argument for this code segment can be done with standard Hoare logic . Looking at the upcoming lines of codefound in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:g> = <var:z> \} & <var:Q1> := <var:g> & \{ <var:g> = <var:z> \land <var:Q1> = <var:z> \} \\ \{ <var:g> = <var:z> \land <var:Q1> = <var:z> \} & <var:Q0> := <nat:1> & \{ <var:g> = <var:z> \land <var:Q1> = <var:z> \land <var:Q0> = <nat:1> \} \\ \{ <var:g> = <var:z> \land <var:Q1> = <var:z> \land <var:Q0> = <nat:1> \} & <var:Q1> := <var:Q1> * <nat:5> & \{ <var:g> = <var:z> \land <var:Q1> = <nat:5> \times <var:z> \land <var:Q0> = <nat:1> \} \\ \{ <var:g> = <var:z> \land <var:Q1> = <nat:5> \times <var:z> \land <var:Q0> = <nat:1> \} & <var:f> := <var:Q1& \{ <var:g> = <var:z> \land <var:Q0> = <nat:1> \land <var:f> = <nat:5> \times <var:z> \} \end{tabular} Looking at the subsequent line of code in the program , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:z> \} & <var:Q1> := <var:g> & \{ <var:g> = <var:z> \land <var:Q1> = <var:z> \} \end{tabular} This is sound with the variable assignmet law given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:g> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:f> := <var:Q1> <var:f> := <var:f> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:g> = <var:z> }} <def:poly> {{ <var:f> = <nat:5> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:Q1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:Q1> = <var:z> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:Q1> = <nat:5> * <var:z> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:Q0> = <nat:1> /\ <var:f> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:z> /\ <var:f> = <nat:5> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 