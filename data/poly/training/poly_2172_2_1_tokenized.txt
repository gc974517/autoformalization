\begin{document} \begin{theorem} Let the following code as \begin{verbatim} <var:W0> := <nat:6> ; <var:Q> := <var:W0> \end{verbatim} Allowing , assuming some whole numbers $ <var:i> $ , it to be that $ <var:G> = <var:i> $ ahead of the execution of this segment of code , it must be that we see $ <var:Q> = <nat:6> $ . \end{theorem} \begin{proof} The proof of the set of commands can be accomplished with typical Hoare logic . Jumping to the upcoming pieces of code in our program , we have \begin{eqnarray} \{ <var:G> = <var:i> \} \, <var:W0> := <nat:6> \, \{ <var:G> = <var:i> \land <var:W0> = <nat:6> \} \\ \{ <var:G> = <var:i> \land <var:W0> = <nat:6> \} \, <var:Q> := <var:W0\, \{ <var:G> = <var:i> \land <var:Q> = <nat:6> \} \end{eqnarray} This is sound using the binding inference rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <var:W0> := <nat:6> ; <var:Q> := <var:W0> {{ <var:Q> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:Q> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 