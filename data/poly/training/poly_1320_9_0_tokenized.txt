\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:6> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:N> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:N> ; <var:p2> := <var:p2> * <var:N> ; <var:H> := <var:p2> ; <var:H> := <var:H> + <var:p1> ; <var:H> := <var:H> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assume it to hold that $ <var:N> = <var:t> $ prior to evaluating our list of commands it holds that we see $ <var:H> = <nat:6> \times <var:t> ^ <nat:2> + <nat:9> \times <var:t> + <nat:6> $ when segment of code exits . \end{theorem} \begin{proof} The proof of our list of commands is accomplished by typical Hoare reasoning . Moving on to the next step , the environment update code \verb | <var:p0> := <nat:6> ; | . This line advances the precondition $ \{ <var:N> = <var:t> \} $ as the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \} $ . This is sound by the assignment inference rule defined in standard Hoare techniques . Advancing to the next step , we have the statement binding $ <nat:9> $ as $ <var:p1>$ . This command takes the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \} $ toward the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \} $ . This is rigorously given by the assignment inference rule found in usual Hoare techniques . Moving forward , we have the environment update statement yielding $ <var:p1> * <var:N> $ to $ <var:p1>$ . This statement advances the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \} $ into the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \} $ . This is known to be sound through the assignment inference rule in usual Hoare techniques . Taking another step toward the next line of code in our code , we see the assignment command \verb | <var:p2> := <nat:6> ; | . This command forwards $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \} $ to $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \} $ . Moving forward to the next step , we have the variable binding line letting $ <var:p2> * <var:N> $ to $ <var:p2>$ . This moves the precondition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \} $ as $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \cdot <var:t> \} $ . This is given using the assignment scheme given in standard Hoare logic . After , we see the environment update code giving $ <var:p2> * <var:N> $ into $ <var:p2>$ . This forwards the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \cdot <var:t> \} $ to $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \cdot <var:t> ^ <nat:2> \} $ . This is deduced with the assignment inference rule defined by typical Hoare logic . Looking at the upcoming piece of code found in the segment of code , the environment update command yielding $ <var:p2> $ as $ <var:H>$ . This transfers the condition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:p2> = <nat:6> \cdot <var:t> ^ <nat:2> \} $ to the postcondition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:H> = <nat:6> \cdot <var:t> ^ <nat:2> \} $ . Moving on , we have the variable update statement \verb | <var:H> := <var:H> + <var:p1> ; | . This advances the precondition $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:p1> = <nat:9> \cdot <var:t> \land <var:H> = <nat:6> \cdot <var:t> ^ <nat:2> \} $ as $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:H> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ . This is ensured using the assignment inference rule from standard Hoare techniques . After , we have the binding command \verb | <var:H> := <var:H> + <var:p0> | . This advances $ \{ <var:N> = <var:t> \land <var:p0> = <nat:6> \land <var:H> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ as the postcondition $ \{ <var:N> = <var:t> \land <var:H> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> + <nat:6> \} $ . This is known to be sound through the assignment inference rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:6> ; <var:p1> := <nat:9> ; <var:p1> := <var:p1> * <var:N> ; <var:p2> := <nat:6> ; <var:p2> := <var:p2> * <var:N> ; <var:p2> := <var:p2> * <var:N> ; <var:H> := <var:p2> ; <var:H> := <var:H> + <var:p1> ; <var:H> := <var:H> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:N> = <var:t> }} <def:poly> {{ <var:H> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> * <var:t> /\ <var:p2> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:p1> = <nat:9> * <var:t> /\ <var:H> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:p0> = <nat:6> /\ <var:H> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:t> /\ <var:H> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 