\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:c1> := <var:V> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:8> ; <var:y> := <var:c1> <var:y> := <var:y> + <var:c0> \end{verbatim} Given that we have $ <var:V> = <var:C> $ prior to running this code segment it follows that $ <var:y> = <nat:8> \cdot <var:C> + <nat:6> $ once series of commands executes . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be given by standard Hoare logic . Taking another step toward the upcoming lines seen in the series of commands , we see \verb | { <var:V> = <var:C> } <var:c1> := <var:V> { <var:V> = <var:C> \land <var:c1> = <var:C> } | and \verb | { <var:V> = <var:C> \land <var:c1> = <var:C> } <var:c0> := <nat:6> { <var:V> = <var:C> \land <var:c1> = <var:C> \land <var:c0> = <nat:6> } | . This is known to be sound with the variable binding scheme found in typical Hoare logic . Moving forward to the subsequent command contained in our set of instructions , we see \verb | { <var:V> = <var:C> } <var:c1> := <var:V> { <var:V> = <var:C> \land <var:c1> = <var:C> } | . This is ensured with the variable update rule in standard Hoare techniques . Focusing on the proceeding lines of codefound in the program , \verb | { <var:V> = <var:C> } <var:c1> := <var:V> { <var:V> = <var:C> \land <var:c1> = <var:C> } | and \verb | { <var:V> = <var:C> \land <var:c1> = <var:C> } <var:c0> := <nat:6> { <var:V> = <var:C> \land <var:c1> = <var:C> \land <var:c0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <var:c1> := <var:V> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:8> ; <var:y> := <var:c1> <var:y> := <var:y> + <var:c0> {{ <var:y> = <nat:8> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:c1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:c1> = <var:C> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:c1> = <nat:8> * <var:C> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:c0> = <nat:6> /\ <var:y> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:y> = <nat:8> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 