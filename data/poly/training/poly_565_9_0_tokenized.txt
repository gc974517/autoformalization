\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:n0> := <nat:4> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:T> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:T> ; <var:n2> := <var:n2> * <var:T> ; <var:V> := <var:n2> ; <var:V> := <var:V> + <var:n1> ; <var:V> := <var:V> + <var:n0> \end{verbatim} Allow it to hold that $ <var:T> = <var:s> $ before the execution of our series of instructions , it follows that we have $ <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:T> = <var:s> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:T> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:s> \} \\ <var:n2> := <nat:1> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:s> \land <var:n2> = <nat:1> \} \\ <var:n2> := <var:n2> * <var:T> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:s> \land <var:n2> = <nat:1> * <var:s> \} \\ <var:n2> := <var:n2> * <var:T> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:s> \land <var:n2> = <nat:1> * <var:s> ^ <nat:2> \} \\ <var:V> := <var:n2> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:n1> = <nat:3> * <var:s> \land <var:V> = <nat:1> * <var:s> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:n1> ; \\ \{ <var:T> = <var:s> \land <var:n0> = <nat:4> \land <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> \} \\ <var:V> := <var:V> + <var:n0> \\ \{ <var:T> = <var:s> \land <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:T> = <var:s> }} <var:n0> := <nat:4> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:T> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:T> ; <var:n2> := <var:n2> * <var:T> ; <var:V> := <var:n2> ; <var:V> := <var:V> + <var:n1> ; <var:V> := <var:V> + <var:n0> {{ <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:s> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:s> /\ <var:n2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:s> /\ <var:n2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:3> * <var:s> /\ <var:V> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:n0> = <nat:4> /\ <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:s> /\ <var:V> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 