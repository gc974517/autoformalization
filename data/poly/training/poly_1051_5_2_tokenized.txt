\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:2> ; <var:y> := <nat:4> + <var:y> * <var:S> ; <var:y> := <nat:4> + <var:y> * <var:S> ; <var:y> := <nat:2> + <var:y> * <var:S> ; <var:y> := <nat:1> + <var:y> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Allow it to hold that $ <var:S> = <var:f> $ ahead of evaluating the set of commands it must be that $ <var:y> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:4> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:2> \cdot <var:f> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our program can be done using Hoare reasoning . Taking another step toward the next statement found in the code , we see the environment update statement giving $ <nat:2> $ to $ <var:y>$ . This forwards the precondition $ \{ <var:S> = <var:f> \} $ into the condition $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \} $ . Jumping to the upcoming line seen in the list of instructions , we see the variable update line letting $ <nat:4> + <var:y> * <var:S> $ toward $ <var:y>$ . This transfers $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \} $ to $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> + <nat:4> \} $ . This is shown using the assignment inference rule given by usual Hoare reasoning . Advancing on , we have the binding line yielding $ <nat:4> + <var:y> * <var:S> $ toward $ <var:y>$ . This command transfers $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> + <nat:4> \} $ as the condition $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> \} $ . This is shown to be logically sound using the assignment law defined in usual Hoare reasoning . Going to the next step , the variable update line letting $ <nat:2> + <var:y> * <var:S> $ to $ <var:y>$ . This code advances the condition $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> \} $ into $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ . This is shown through the assignment rule of usual Hoare reasoning . Moving forward , we have the binding code \verb | <var:y> := <nat:1> + <var:y> * <var:S> | . This line redefines the precondition $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} $ toward the condition $ \{ <var:S> = <var:f> \land <var:y> = <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:1> \} $ . This is shown with the assignment inference rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:2> ; <var:y> := <nat:4> + <var:y> * <var:S> ; <var:y> := <nat:4> + <var:y> * <var:S> ; <var:y> := <nat:2> + <var:y> * <var:S> ; <var:y> := <nat:1> + <var:y> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:S> = <var:f> }} <def:poly> {{ <var:y> = <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:y> = <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:y> = <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:y> = <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:f> /\ <var:y> = <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 