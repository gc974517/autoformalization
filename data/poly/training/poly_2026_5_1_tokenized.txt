\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:L> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:3> ; <var:v> := <var:O1> <var:v> := <var:v> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Given --- with some positive coefficients $ <var:N> $ --- it to be that $ <var:L> = <var:N> $ before evaluating this code it holds that $ <var:v> = <nat:3> \times <var:N> + <nat:3> $ when list of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for the series of instructions is done through Hoare logic . Focusing on the next line of code in the set of commands , \[ \begin{tabular} {rcl} \{ <var:L> = <var:N> \} & <var:O1> := <var:L> & \{ <var:L> = <var:N> \land <var:O1> = <var:N> \} \end{tabular} This is guaranteed by the variable assignmet rule obtained from Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:N> \} & <var:O1> := <var:L> & \{ <var:L> = <var:N> \land <var:O1> = <var:N> \} \\ \{ <var:L> = <var:N> \land <var:O1> = <var:N> \} & <var:O0> := <nat:3> & \{ <var:L> = <var:N> \land <var:O1> = <var:N> \land <var:O0> = <nat:3> \} \\ \{ <var:L> = <var:N> \land <var:O1> = <var:N> \land <var:O0> = <nat:3> \} & <var:O1> := <var:O1> * <nat:3> & \{ <var:L> = <var:N> \land <var:O1> = <nat:3> \cdot <var:N> \land <var:O0> = <nat:3> \} \end{tabular} This is ensured through the variable update rule obtained from standard Hoare techniques . Moving forward to the upcoming step found in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:N> \} & <var:O1> := <var:L> & \{ <var:L> = <var:N> \land <var:O1> = <var:N> \} \end{tabular} This is shown with the variable binding rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <def:poly> := <var:O1> := <var:L> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:3> ; <var:v> := <var:O1> <var:v> := <var:v> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:L> = <var:N> }} <def:poly> {{ <var:v> = <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:O1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:O1> = <var:N> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:O1> = <nat:3> * <var:N> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:O0> = <nat:3> /\ <var:v> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:v> = <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 