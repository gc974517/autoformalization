\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:7> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:x> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:x> ; <var:T2> := <var:T2> * <var:x> ; <var:i> := <var:T2> ; <var:i> := <var:i> + <var:T1> ; <var:i> := <var:i> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assuming given all positive numbers $ <var:d> $ $ <var:x> = <var:d> $ prior to the execution of this segment of code , it follows that we have $ <var:i> = <nat:8> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:7> $ . \end{theorem} \begin{proof} Observe this decorated series of commands . \begin{eqnarray} \{ <var:x> = <var:d> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \} \\ <var:T1> := <nat:4> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \} \\ <var:T1> := <var:T1> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \times <var:d> \} \\ <var:T2> := <nat:8> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \times <var:d> \land <var:T2> = <nat:8> \} \\ <var:T2> := <var:T2> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \times <var:d> \land <var:T2> = <nat:8> \times <var:d> \} \\ <var:T2> := <var:T2> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \times <var:d> \land <var:T2> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:i> := <var:T2> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:T1> = <nat:4> \times <var:d> \land <var:i> = <nat:8> \times <var:d> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:T1> ; \\ \{ <var:x> = <var:d> \land <var:T0> = <nat:7> \land <var:i> = <nat:8> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> \} \\ <var:i> := <var:i> + <var:T0> \\ \{ <var:x> = <var:d> \land <var:i> = <nat:8> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:7> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:7> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:x> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:x> ; <var:T2> := <var:T2> * <var:x> ; <var:i> := <var:T2> ; <var:i> := <var:i> + <var:T1> ; <var:i> := <var:i> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:x> = <var:d> }} <def:poly> {{ <var:i> = <nat:8> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> * <var:d> /\ <var:T2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> * <var:d> /\ <var:T2> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> * <var:d> /\ <var:T2> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:T1> = <nat:4> * <var:d> /\ <var:i> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:T0> = <nat:7> /\ <var:i> = <nat:8> * <var:d> ^ <nat:2> + <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:i> = <nat:8> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 