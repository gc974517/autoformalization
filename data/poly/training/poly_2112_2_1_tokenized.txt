\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:8> ; <var:p> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Given it to hold that $ <var:I> = <var:L> $ --- given some positive integers $ <var:L> $ --- prior to evaluating our code , then we see $ <var:p> = <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is demonstrated through standard Hoare logic . Moving on to the following step found in our set of instructions , we have the variable assignmet code yielding $ <nat:8> $ to $ <var:e0>$ . This forwards the precondition $ \{ <var:I> = <var:L> \} $ toward the postcondition $ \{ <var:I> = <var:L> \land <var:e0> = <nat:8> \} $ . This is shown through the assignment law in typical Hoare reasoning . Advancing on , we see the variable update command \verb | <var:p> := <var:e0> | . This transfers the precondition $ \{ <var:I> = <var:L> \land <var:e0> = <nat:8> \} $ as $ \{ <var:I> = <var:L> \land <var:p> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:8> ; <var:p> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <def:poly> {{ <var:p> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:e0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:p> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 