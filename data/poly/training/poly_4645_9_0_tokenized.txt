\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:A> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:A> ; <var:w2> := <var:w2> * <var:A> ; <var:M> := <var:w2> ; <var:M> := <var:M> + <var:w1> ; <var:M> := <var:M> + <var:w0> \end{verbatim} Assume that we have $ <var:A> = <var:i> $ ahead of interpreting this set of instructions , then $ <var:M> = <nat:9> \times <var:i> ^ <nat:2> + <nat:7> \times <var:i> + <nat:5> $ when list of commands has executed . \end{theorem} \begin{proof} The flow of logic for this set of commands is accomplished through typical Hoare logic . Considering the upcoming statements found in our list of instructions , \begin{verbatim} { <var:A> = <var:i> } <var:w0> := <nat:5> { <var:A> = <var:i> \land <var:w0> = <nat:5> } { <var:A> = <var:i> \land <var:w0> = <nat:5> } <var:w1> := <nat:7> { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> } { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> } <var:w1> := <var:w1> * <var:A> { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \times <var:i> } { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \times <var:i> } <var:w2> := <nat:9> { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \times <var:i> \land <var:w2> = <nat:9> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:A> = <var:i> } <var:w0> := <nat:5> { <var:A> = <var:i> \land <var:w0> = <nat:5> } { <var:A> = <var:i> \land <var:w0> = <nat:5> } <var:w1> := <nat:7> { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> } { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> } <var:w1> := <var:w1> * <var:A> { <var:A> = <var:i> \land <var:w0> = <nat:5> \land <var:w1> = <nat:7> \times <var:i> } \end{verbatim} This is guaranteed through the variable update inference rule in typical Hoare reasoning . Observing the proceeding statement seen in our list of instructions , we have \begin{verbatim} { <var:A> = <var:i> } <var:w0> := <nat:5> { <var:A> = <var:i> \land <var:w0> = <nat:5> } \end{verbatim} Next , \begin{verbatim} { <var:A> = <var:i> } <var:w0> := <nat:5> { <var:A> = <var:i> \land <var:w0> = <nat:5> } \end{verbatim} This is ensured through the binding scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:A> = <var:i> }} <var:w0> := <nat:5> ; <var:w1> := <nat:7> ; <var:w1> := <var:w1> * <var:A> ; <var:w2> := <nat:9> ; <var:w2> := <var:w2> * <var:A> ; <var:w2> := <var:w2> * <var:A> ; <var:M> := <var:w2> ; <var:M> := <var:M> + <var:w1> ; <var:M> := <var:M> + <var:w0> {{ <var:M> = <nat:9> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:i> /\ <var:w2> = <nat:9> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:7> * <var:i> /\ <var:M> = <nat:9> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w0> = <nat:5> /\ <var:M> = <nat:9> * <var:i> ^ <nat:2> + <nat:7> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:M> = <nat:9> * <var:i> ^ <nat:2> + <nat:7> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 