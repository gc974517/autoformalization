\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:F> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:F> ; <var:a2> := <var:a2> * <var:F> ; <var:j> := <var:a2> ; <var:j> := <var:j> + <var:a1> ; <var:j> := <var:j> + <var:a0> \end{verbatim} Given given $ <var:v> \in \mathbb{N} $ that we have $ <var:F> = <var:v> $ ahead of the execution of our segment of code then $ <var:j> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:v> \} \\ <var:a0> := <nat:2> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \} \\ <var:a1> := <nat:6> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \} \\ <var:a1> := <var:a1> * <var:F> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:v> \} \\ <var:a2> := <nat:4> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:v> \land <var:a2> = <nat:4> \} \\ <var:a2> := <var:a2> * <var:F> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:v> \land <var:a2> = <nat:4> \cdot <var:v> \} \\ <var:a2> := <var:a2> * <var:F> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:v> \land <var:a2> = <nat:4> \cdot <var:v> ^ <nat:2> \} \\ <var:j> := <var:a2> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:v> \land <var:j> = <nat:4> \cdot <var:v> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:a1> ; \\ \{ <var:F> = <var:v> \land <var:a0> = <nat:2> \land <var:j> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> \} \\ <var:j> := <var:j> + <var:a0> \\ \{ <var:F> = <var:v> \land <var:j> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:6> \cdot <var:v> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <var:a0> := <nat:2> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:F> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:F> ; <var:a2> := <var:a2> * <var:F> ; <var:j> := <var:a2> ; <var:j> := <var:j> + <var:a1> ; <var:j> := <var:j> + <var:a0> {{ <var:j> = <nat:4> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:v> /\ <var:a2> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:v> /\ <var:j> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:a0> = <nat:2> /\ <var:j> = <nat:4> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:j> = <nat:4> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 