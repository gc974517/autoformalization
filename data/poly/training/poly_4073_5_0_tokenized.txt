\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:8> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:Z> ; <var:t> := <var:p1> ; <var:t> := <var:t> + <var:p0> \end{verbatim} Given it to be that $ <var:Z> = <var:S> $ ( given all $ <var:S> $ ) before interpreting this list of instructions , then we see $ <var:t> = <nat:2> \cdot <var:S> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:S> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:Z> = <var:S> \land <var:p0> = <nat:8> \} \\ <var:p1> := <nat:2> ; \\ \{ <var:Z> = <var:S> \land <var:p0> = <nat:8> \land <var:p1> = <nat:2> \} \\ <var:p1> := <var:p1> * <var:Z> ; \\ \{ <var:Z> = <var:S> \land <var:p0> = <nat:8> \land <var:p1> = <nat:2> \cdot <var:S> \} \\ <var:t> := <var:p1> ; \\ \{ <var:Z> = <var:S> \land <var:p0> = <nat:8> \land <var:t> = <nat:2> \cdot <var:S> \} \\ <var:t> := <var:t> + <var:p0> \\ \{ <var:Z> = <var:S> \land <var:t> = <nat:2> \cdot <var:S> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Z> = <var:S> }} <var:p0> := <nat:8> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:Z> ; <var:t> := <var:p1> ; <var:t> := <var:t> + <var:p0> {{ <var:t> = <nat:2> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:p0> = <nat:8> /\ <var:t> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:S> /\ <var:t> = <nat:2> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 