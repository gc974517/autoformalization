\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:e> := <var:t2> ; <var:e> := <var:e> + <var:t1> ; <var:e> := <var:e> + <var:t0> \end{verbatim} Allowing letting integers $ <var:A> $ that $ <var:k> = <var:A> $ ahead of the execution of the code segment it holds that we have $ <var:e> = <nat:2> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program is accomplished by usual Hoare reasoning . Jumping to the upcoming statements found in the segment of code , we have \begin{eqnarray} \{ <var:k> = <var:A> \} \, <var:t0> := <nat:3> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \, <var:t1> := <nat:8> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} \, <var:t1> := <var:t1> * <var:k> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> * <var:A> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> * <var:A> \} \, <var:t2> := <nat:2> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> * <var:A> \land <var:t2> = <nat:2> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> * <var:A> \land <var:t2> = <nat:2> \} \, <var:t2> := <var:t2> * <var:k> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> * <var:A> \land <var:t2> = <nat:2> * <var:A> \} \end{eqnarray} This is given with the variable binding scheme in usual Hoare reasoning . Following , \begin{eqnarray} \{ <var:k> = <var:A> \} \, <var:t0> := <nat:3> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \, <var:t1> := <nat:8> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} \end{eqnarray} This is ensured using the variable binding scheme in typical Hoare logic . Advancing to the following bits of codein our list of commands , \begin{eqnarray} \{ <var:k> = <var:A> \} \, <var:t0> := <nat:3> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \\ \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \} \, <var:t1> := <nat:8> \, \{ <var:k> = <var:A> \land <var:t0> = <nat:3> \land <var:t1> = <nat:8> \} \end{eqnarray} This is rigorously given using the assignment inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:k> = <var:A> }} <var:t0> := <nat:3> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:k> ; <var:t2> := <nat:2> ; <var:t2> := <var:t2> * <var:k> ; <var:t2> := <var:t2> * <var:k> ; <var:e> := <var:t2> ; <var:e> := <var:e> + <var:t1> ; <var:e> := <var:e> + <var:t0> {{ <var:e> = <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:A> /\ <var:t2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:A> /\ <var:t2> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:A> /\ <var:t2> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:8> * <var:A> /\ <var:e> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:t0> = <nat:3> /\ <var:e> = <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:e> = <nat:2> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 