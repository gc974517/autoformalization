\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:2> ; <var:r> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:n> = <var:B> $ ( given every $ <var:B> $ ) ahead of the execution of the series of instructions it follows that we have $ <var:r> = <nat:2> $ after list of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is done by the below decorated segment of code . \begin{eqnarray} \{ <var:n> = <var:B> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:n> = <var:B> \land <var:f0> = <nat:2> \} \\ <var:r> := <var:f0> \\ \{ <var:n> = <var:B> \land <var:r> = <nat:2> \} \end{eqnarray} The application of Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:2> ; <var:r> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:n> = <var:B> }} <def:poly> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 