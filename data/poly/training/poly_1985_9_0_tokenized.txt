\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:E> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:E> ; <var:Z2> := <var:Z2> * <var:E> ; <var:a> := <var:Z2> ; <var:a> := <var:a> + <var:Z1> ; <var:a> := <var:a> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Given for all natural numbers $ <var:e> $ that we have $ <var:E> = <var:e> $ prior to running this series of instructions , then we have $ <var:a> = <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> $ once series of commands has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:E> = <var:e> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \} \\ <var:Z1> := <nat:3> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> \} \\ <var:Z1> := <var:Z1> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> * <var:e> \} \\ <var:Z2> := <nat:4> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> * <var:e> \land <var:Z2> = <nat:4> \} \\ <var:Z2> := <var:Z2> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> * <var:e> \land <var:Z2> = <nat:4> * <var:e> \} \\ <var:Z2> := <var:Z2> * <var:E> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> * <var:e> \land <var:Z2> = <nat:4> * <var:e> ^ <nat:2> \} \\ <var:a> := <var:Z2> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:3> * <var:e> \land <var:a> = <nat:4> * <var:e> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:Z1> ; \\ \{ <var:E> = <var:e> \land <var:Z0> = <nat:2> \land <var:a> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> \} \\ <var:a> := <var:a> + <var:Z0> \\ \{ <var:E> = <var:e> \land <var:a> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> \} \end{eqnarray} Given the preceding argument , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:E> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:E> ; <var:Z2> := <var:Z2> * <var:E> ; <var:a> := <var:Z2> ; <var:a> := <var:a> + <var:Z1> ; <var:a> := <var:a> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:E> = <var:e> }} <def:poly> {{ <var:a> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> * <var:e> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> * <var:e> /\ <var:Z2> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> * <var:e> /\ <var:Z2> = <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:3> * <var:e> /\ <var:a> = <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:Z0> = <nat:2> /\ <var:a> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:e> /\ <var:a> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 