\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:8> ; <var:Q> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:X> = <var:K> $ before executing our code it follows that we see $ <var:Q> = <nat:8> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:X> = <var:K> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:X> = <var:K> \land <var:o0> = <nat:8> \} \\ <var:Q> := <var:o0> \\ \{ <var:X> = <var:K> \land <var:Q> = <nat:8> \} \end{eqnarray} Hence , the list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:8> ; <var:Q> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:X> = <var:K> }} <def:poly> {{ <var:Q> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:Q> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 