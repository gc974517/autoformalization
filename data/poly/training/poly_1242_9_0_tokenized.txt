\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:2> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:f> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:f> ; <var:G2> := <var:G2> * <var:f> ; <var:W> := <var:G2> ; <var:W> := <var:W> + <var:G1> ; <var:W> := <var:W> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:f> = <var:Z> $ ahead of the evaluation of our series of commands it must be that we see $ <var:W> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:2> $ after series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:Z> \} \\ <var:G0> := <nat:2> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \} \\ <var:G1> := <nat:3> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \} \\ <var:G1> := <var:G1> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \cdot <var:Z> \} \\ <var:G2> := <nat:3> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \cdot <var:Z> \land <var:G2> = <nat:3> \} \\ <var:G2> := <var:G2> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \cdot <var:Z> \land <var:G2> = <nat:3> \cdot <var:Z> \} \\ <var:G2> := <var:G2> * <var:f> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \cdot <var:Z> \land <var:G2> = <nat:3> \cdot <var:Z> ^ <nat:2> \} \\ <var:W> := <var:G2> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:G1> = <nat:3> \cdot <var:Z> \land <var:W> = <nat:3> \cdot <var:Z> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:G1> ; \\ \{ <var:f> = <var:Z> \land <var:G0> = <nat:2> \land <var:W> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> \} \\ <var:W> := <var:W> + <var:G0> \\ \{ <var:f> = <var:Z> \land <var:W> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:2> \} \end{eqnarray} The application of typical Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:2> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:f> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:f> ; <var:G2> := <var:G2> * <var:f> ; <var:W> := <var:G2> ; <var:W> := <var:W> + <var:G1> ; <var:W> := <var:W> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:f> = <var:Z> }} <def:poly> {{ <var:W> = <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:Z> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:Z> /\ <var:G2> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:Z> /\ <var:G2> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:G1> = <nat:3> * <var:Z> /\ <var:W> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:G0> = <nat:2> /\ <var:W> = <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:W> = <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 