\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:8> ; <var:V1> := <var:V1> * <var:m> ; <var:n> := <var:V1> ; <var:n> := <var:n> + <var:V0> \end{verbatim} Assuming that $ <var:m> = <var:K> $ before running the code , then $ <var:n> = <nat:8> * <var:K> + <nat:4> $ when segment of code has executed . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:m> = <var:K> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:m> = <var:K> \land <var:V0> = <nat:4> \} \\ <var:V1> := <nat:8> ; \\ \{ <var:m> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:8> \} \\ <var:V1> := <var:V1> * <var:m> ; \\ \{ <var:m> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:8> \cdot <var:K> \} \\ <var:n> := <var:V1> ; \\ \{ <var:m> = <var:K> \land <var:V0> = <nat:4> \land <var:n> = <nat:8> \cdot <var:K> \} \\ <var:n> := <var:n> + <var:V0> \\ \{ <var:m> = <var:K> \land <var:n> = <nat:8> \cdot <var:K> + <nat:4> \} \end{eqnarray} Considering the above , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <var:V0> := <nat:4> ; <var:V1> := <nat:8> ; <var:V1> := <var:V1> * <var:m> ; <var:n> := <var:V1> ; <var:n> := <var:n> + <var:V0> {{ <var:n> = <nat:8> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:V0> = <nat:4> /\ <var:n> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:n> = <nat:8> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 