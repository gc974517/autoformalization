\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:3> ; <var:U> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:W> = <var:h> $ before the evaluation of this set of instructions , it must be that we see $ <var:U> = <nat:3> $ once program executes . \end{theorem} \begin{proof} The argument for the code segment can be done using standard Hoare techniques . Observing the next lines seen in our program , we see \begin{verbatim} { <var:W> = <var:h> } <var:A0> := <nat:3> { <var:W> = <var:h> \land <var:A0> = <nat:3> } { <var:W> = <var:h> \land <var:A0> = <nat:3> } <var:U> := <var:A0{ <var:W> = <var:h> \land <var:U> = <nat:3> } \end{verbatim} This is known to be sound using the variable update scheme of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:U> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:W> = <var:h> }} <def:poly> {{ <var:U> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:U> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 