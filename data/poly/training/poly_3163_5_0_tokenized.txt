\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:t> ; <var:O> := <var:r1> ; <var:O> := <var:O> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:t> = <var:R> $ before evaluating this set of commands , it holds that we have $ <var:O> = <nat:6> \times <var:R> + <nat:6> $ after list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:R> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:t> = <var:R> \land <var:r0> = <nat:6> \} \\ <var:r1> := <nat:6> ; \\ \{ <var:t> = <var:R> \land <var:r0> = <nat:6> \land <var:r1> = <nat:6> \} \\ <var:r1> := <var:r1> * <var:t> ; \\ \{ <var:t> = <var:R> \land <var:r0> = <nat:6> \land <var:r1> = <nat:6> * <var:R> \} \\ <var:O> := <var:r1> ; \\ \{ <var:t> = <var:R> \land <var:r0> = <nat:6> \land <var:O> = <nat:6> * <var:R> \} \\ <var:O> := <var:O> + <var:r0> \\ \{ <var:t> = <var:R> \land <var:O> = <nat:6> * <var:R> + <nat:6> \} \end{eqnarray} Furthering evaluating this segment of code produces : \begin{eqnarray} \end{eqnarray} The application of Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:6> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:t> ; <var:O> := <var:r1> ; <var:O> := <var:O> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:t> = <var:R> }} <def:poly> {{ <var:O> = <nat:6> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:r0> = <nat:6> /\ <var:O> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:O> = <nat:6> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 