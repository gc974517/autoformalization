\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:8> ; <var:r> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:n> = <var:L> $ , for some integers $ <var:L> $ , prior to executing our code segment , then we have $ <var:r> = <nat:8> $ when series of instructions finishes . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:n> = <var:L> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:n> = <var:L> \land <var:d0> = <nat:8> \} \\ <var:r> := <var:d0> \\ \{ <var:n> = <var:L> \land <var:r> = <nat:8> \} \end{eqnarray} Therefore , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:r> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:n> = <var:L> }} <def:poly> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 