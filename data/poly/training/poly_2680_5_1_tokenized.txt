\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:p1> := <var:a> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:4> ; <var:A> := <var:p1> <var:A> := <var:A> + <var:p0> \end{verbatim} Allow it to be that $ <var:a> = <var:u> $ before interpreting this series of commands it follows that we see $ <var:A> = <nat:4> * <var:u> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be accomplished by typical Hoare logic . Immediately after , the line giving $ <var:a> $ to $ <var:p1>$ . This takes the precondition $ \{ <var:a> = <var:u> \} $ into the condition $ \{ <var:a> = <var:u> \land <var:p1> = <var:u> \} $ . Moving on to the following piece of code in the set of instructions , we have the assignment code binding $ <nat:6> $ as $ <var:p0>$ . This statement takes $ \{ <var:a> = <var:u> \land <var:p1> = <var:u> \} $ to the condition $ \{ <var:a> = <var:u> \land <var:p1> = <var:u> \land <var:p0> = <nat:6> \} $ . This is shown to be logically sound with the assignment law from usual Hoare reasoning . Paying attention to the subsequent line found in the segment of code , the binding line assigning $ <var:p1> * <nat:4> $ as $ <var:p1>$ . This takes $ \{ <var:a> = <var:u> \land <var:p1> = <var:u> \land <var:p0> = <nat:6> \} $ into the postcondition $ \{ <var:a> = <var:u> \land <var:p1> = <nat:4> * <var:u> \land <var:p0> = <nat:6> \} $ . This is rigorously given by the assignment rule defined in typical Hoare techniques . Following , we have the assignment statement \verb | <var:A> := <var:p1> | . This forwards $ \{ <var:a> = <var:u> \land <var:p1> = <nat:4> * <var:u> \land <var:p0> = <nat:6> \} $ into the condition $ \{ <var:a> = <var:u> \land <var:p0> = <nat:6> \land <var:A> = <nat:4> * <var:u> \} $ . This is given with the assignment law of usual Hoare logic . Stepping through , we have the environment update line \verb | <var:A> := <var:A> + <var:p0> | . This takes the precondition $ \{ <var:a> = <var:u> \land <var:p0> = <nat:6> \land <var:A> = <nat:4> * <var:u> \} $ as the postcondition $ \{ <var:a> = <var:u> \land <var:A> = <nat:4> * <var:u> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:a> = <var:u> }} <var:p1> := <var:a> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:4> ; <var:A> := <var:p1> <var:A> := <var:A> + <var:p0> {{ <var:A> = <nat:4> * <var:u> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:p1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:p1> = <var:u> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:p1> = <nat:4> * <var:u> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:p0> = <nat:6> /\ <var:A> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:u> /\ <var:A> = <nat:4> * <var:u> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 