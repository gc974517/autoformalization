\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:N0> := <nat:9> ; <var:y> := <var:N0> \end{verbatim} Allow it to be that $ <var:D> = <var:X> $ before evaluating the set of commands , it holds that $ <var:y> = <nat:9> $ when series of instructions exits . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:X> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:D> = <var:X> \land <var:N0> = <nat:9> \} \\ <var:y> := <var:N0> \\ \{ <var:D> = <var:X> \land <var:y> = <nat:9> \} \end{eqnarray} Therefore , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:D> = <var:X> }} <var:N0> := <nat:9> ; <var:y> := <var:N0> {{ <var:y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 