\begin{document} \begin{theorem} We define the following list of instructions as \begin{verbatim} <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e3> := <var:e2> * <var:q> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:1> ; <var:F> := <var:e3> <var:F> := <var:F> + <var:e2> <var:F> := <var:F> + <var:e1> <var:F> := <var:F> + <var:e0> \end{verbatim} Assume it to hold that $ <var:q> = <var:Y> $ prior to executing our program , it holds that we have $ <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands can be given through usual Hoare techniques . Further , the variable update line yielding $ <var:q> $ toward $ <var:e1>$ . This redefines the condition $ \{ <var:q> = <var:Y> \} $ into the condition $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \} $ . Advancing , we have the statement \verb | <var:e2> := <var:e1> * <var:q> ; | . This command moves the precondition $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \} $ to $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \} $ . Honing in on the subsequent line seen in our set of commands , we see the binding statement \verb | <var:e3> := <var:e2> * <var:q> ; | . This transfers the condition $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \} $ toward $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \} $ . This is rigorously given using the assignment inference rule defined in usual Hoare logic . Moving forward to the proceeding piece of code contained in the segment of code , the variable assignmet command assigning $ <nat:7> $ as $ <var:e0>$ . This redefines the precondition $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \} $ as $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ . Looking at the following bit of code seen in the series of commands , we have the variable assignmet statement \verb | <var:e1> := <var:e1> * <nat:3> ; | . This code transfers $ \{ <var:q> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ to the postcondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ . Taking another step toward the following bit of code found in our list of instructions , we have the variable update line letting $ <var:e2> * <nat:8> $ as $ <var:e2>$ . This statement forwards the precondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ toward $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ . This is rigorously given with the assignment rule of typical Hoare techniques . Taking a look at the following piece of code seen in our code , we see the variable update line \verb | <var:e3> := <var:e3> * <nat:1> ; | . This advances the precondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ toward the postcondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e3> = <nat:1> \cdot <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ . This is rigorously given using the assignment law in Hoare techniques . Now , we have the command giving $ <var:e3$ as $ <var:F>$ . This line advances the condition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e3> = <nat:1> \cdot <var:Y> ^ <nat:3> \land <var:e0> = <nat:7> \} $ as $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> \} $ . This is guaranteed using the assignment scheme defined in typical Hoare techniques . Observing the upcoming piece of code in the list of commands , we see the code defining $ <var:F> + <var:e2$ toward $ <var:F>$ . This forwards the condition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e2> = <nat:8> \cdot <var:Y> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> \} $ to the postcondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> \} $ . This is ensured with the assignment inference rule defined in usual Hoare logic . Stepping through , we have the variable update code \verb | <var:F> := <var:F> + <var:e1> | . This transfers the precondition $ \{ <var:q> = <var:Y> \land <var:e1> = <nat:3> \cdot <var:Y> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:Y> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> \} $ . Focusing on the upcoming piece of code contained in our code , we have the variable update line \verb | <var:F> := <var:F> + <var:e0> | . This code redefines $ \{ <var:q> = <var:Y> \land <var:e0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> \} $ into the postcondition $ \{ <var:q> = <var:Y> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:8> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <var:e1> := <var:q> ; <var:e2> := <var:e1> * <var:q> ; <var:e3> := <var:e2> * <var:q> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:1> ; <var:F> := <var:e3> <var:F> := <var:F> + <var:e2> <var:F> := <var:F> + <var:e1> <var:F> := <var:F> + <var:e0> {{ <var:F> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:3> * <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:3> * <var:Y> /\ <var:e2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:3> * <var:Y> /\ <var:e2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:Y> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:3> * <var:Y> /\ <var:e2> = <nat:8> * <var:Y> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e1> = <nat:3> * <var:Y> /\ <var:e0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:e0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:3> + <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 