\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:7> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:z> := <var:v2> ; <var:z> := <var:z> + <var:v1> ; <var:z> := <var:z> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assume that we have $ <var:F> = <var:H> $ ahead of evaluating the code segment it follows that $ <var:z> = <nat:5> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:7> $ after code segment terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:H> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \} \\ <var:v1> := <nat:2> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \} \\ <var:v1> := <var:v1> * <var:F> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \times <var:H> \} \\ <var:v2> := <nat:5> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \times <var:H> \land <var:v2> = <nat:5> \} \\ <var:v2> := <var:v2> * <var:F> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \times <var:H> \land <var:v2> = <nat:5> \times <var:H> \} \\ <var:v2> := <var:v2> * <var:F> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \times <var:H> \land <var:v2> = <nat:5> \times <var:H> ^ <nat:2> \} \\ <var:z> := <var:v2> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:v1> = <nat:2> \times <var:H> \land <var:z> = <nat:5> \times <var:H> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:v1> ; \\ \{ <var:F> = <var:H> \land <var:v0> = <nat:7> \land <var:z> = <nat:5> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> \} \\ <var:z> := <var:z> + <var:v0> \\ \{ <var:F> = <var:H> \land <var:z> = <nat:5> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:7> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:F> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:F> ; <var:v2> := <var:v2> * <var:F> ; <var:z> := <var:v2> ; <var:z> := <var:z> + <var:v1> ; <var:z> := <var:z> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:F> = <var:H> }} <def:poly> {{ <var:z> = <nat:5> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> * <var:H> /\ <var:v2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> * <var:H> /\ <var:v2> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> * <var:H> /\ <var:v2> = <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:2> * <var:H> /\ <var:z> = <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:v0> = <nat:7> /\ <var:z> = <nat:5> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:z> = <nat:5> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 