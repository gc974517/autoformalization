\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:4> ; <var:L> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing , assuming some $ <var:g> \in \mathbb{N} $ , that $ <var:B> = <var:g> $ ahead of running the code segment it follows that we see $ <var:L> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions is done with Hoare logic . Immediately after , \begin{eqnarray} \{ <var:B> = <var:g> \} \, <var:l0> := <nat:4> \, \{ <var:B> = <var:g> \land <var:l0> = <nat:4> \} \end{eqnarray} This is sound by the inference rule defined in typical Hoare techniques . Advancing on , we see \begin{eqnarray} \{ <var:B> = <var:g> \} \, <var:l0> := <nat:4> \, \{ <var:B> = <var:g> \land <var:l0> = <nat:4> \} \end{eqnarray} This is guaranteed with the scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:L> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:B> = <var:g> }} <def:poly> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 