\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:w> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:7> ; <var:n> := <var:C1> <var:n> := <var:n> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:w> = <var:L> $ --- for some positive coefficients $ <var:L> $ --- ahead of interpreting our list of instructions , it holds that we have $ <var:n> = <nat:7> \cdot <var:L> + <nat:2> $ after list of instructions terminates . \end{theorem} \begin{proof} The method of proof for this series of commands is accomplished with Hoare logic . Looking at the proceeding command contained in the set of commands , we see the environment update command letting $ <var:w> $ to $ <var:C1>$ . This redefines the condition $ \{ <var:w> = <var:L> \} $ toward the postcondition $ \{ <var:w> = <var:L> \land <var:C1> = <var:L> \} $ . This is guaranteed through the assignment rule given in usual Hoare techniques . Taking another step toward the subsequent step in the set of instructions , the statement \verb | <var:C0> := <nat:2> ; | . This advances $ \{ <var:w> = <var:L> \land <var:C1> = <var:L> \} $ to the condition $ \{ <var:w> = <var:L> \land <var:C1> = <var:L> \land <var:C0> = <nat:2> \} $ . Advancing on , the binding line \verb | <var:C1> := <var:C1> * <nat:7> ; | . This moves $ \{ <var:w> = <var:L> \land <var:C1> = <var:L> \land <var:C0> = <nat:2> \} $ to $ \{ <var:w> = <var:L> \land <var:C1> = <nat:7> \cdot <var:L> \land <var:C0> = <nat:2> \} $ . This is rigorously given with the assignment law given in Hoare logic . Jumping to the upcoming line of code seen in our code , we see the statement \verb | <var:n> := <var:C1> | . This code moves the condition $ \{ <var:w> = <var:L> \land <var:C1> = <nat:7> \cdot <var:L> \land <var:C0> = <nat:2> \} $ into $ \{ <var:w> = <var:L> \land <var:C0> = <nat:2> \land <var:n> = <nat:7> \cdot <var:L> \} $ . This is deduced through the assignment rule found in Hoare techniques . Going forward , the environment update command \verb | <var:n> := <var:n> + <var:C0> | . This line takes the precondition $ \{ <var:w> = <var:L> \land <var:C0> = <nat:2> \land <var:n> = <nat:7> \cdot <var:L> \} $ into the postcondition $ \{ <var:w> = <var:L> \land <var:n> = <nat:7> \cdot <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:w> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:7> ; <var:n> := <var:C1> <var:n> := <var:n> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:w> = <var:L> }} <def:poly> {{ <var:n> = <nat:7> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:C1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:C1> = <var:L> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:C1> = <nat:7> * <var:L> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:C0> = <nat:2> /\ <var:n> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:L> /\ <var:n> = <nat:7> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 