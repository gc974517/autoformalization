\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:Y> ; <var:q2> := <var:q1> * <var:Y> ; <var:q3> := <var:q2> * <var:Y> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:6> ; <var:q2> := <var:q2> * <nat:1> ; <var:q3> := <var:q3> * <nat:4> ; <var:w> := <var:q3> <var:w> := <var:w> + <var:q2> <var:w> := <var:w> + <var:q1> <var:w> := <var:w> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( assuming some positive integers $ <var:b> $ ) that we have $ <var:Y> = <var:b> $ before evaluating our series of instructions , then we see $ <var:w> = <nat:4> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> ^ <nat:2> + <nat:6> \times <var:b> + <nat:3> $ after program exits . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions can be seen by usual Hoare techniques . Moving forward to the proceeding bits of codeseen in our code segment , \begin{eqnarray} \{ <var:Y> = <var:b> \} \, <var:q1> := <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \} \, <var:q2> := <var:q1> * <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \} \, <var:q0> := <nat:3> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q1> := <var:q1> * <nat:6> \, \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q2> := <var:q2> * <nat:1> \, \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:q3> = <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q3> := <var:q3> * <nat:4> \, \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:q3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:q3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:w> := <var:q3\, \{ <var:Y> = <var:b> \land <var:q1> = <nat:6> \cdot <var:b> \land <var:q2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:q0> = <nat:3> \land <var:w> = <nat:4> \cdot <var:b> ^ <nat:3> \} \end{eqnarray} Moving forward , we see \begin{eqnarray} \{ <var:Y> = <var:b> \} \, <var:q1> := <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \} \end{eqnarray} This is known to be sound using the variable assignmet law defined by standard Hoare techniques . Advancing to the next step , \begin{eqnarray} \{ <var:Y> = <var:b> \} \, <var:q1> := <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \} \\ \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \} \, <var:q2> := <var:q1> * <var:Y> \, \{ <var:Y> = <var:b> \land <var:q1> = <var:b> \land <var:q2> = <var:b> ^ <nat:2> \} \end{eqnarray} This is ensured through the binding scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:Y> ; <var:q2> := <var:q1> * <var:Y> ; <var:q3> := <var:q2> * <var:Y> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:6> ; <var:q2> := <var:q2> * <nat:1> ; <var:q3> := <var:q3> * <nat:4> ; <var:w> := <var:q3> <var:w> := <var:w> + <var:q2> <var:w> := <var:w> + <var:q1> <var:w> := <var:w> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Y> = <var:b> }} <def:poly> {{ <var:w> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <var:b> /\ <var:q2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <var:b> /\ <var:q2> = <var:b> ^ <nat:2> /\ <var:q3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <var:b> /\ <var:q2> = <var:b> ^ <nat:2> /\ <var:q3> = <var:b> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <nat:6> * <var:b> /\ <var:q2> = <var:b> ^ <nat:2> /\ <var:q3> = <var:b> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <nat:6> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <var:b> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <nat:6> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <nat:6> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q0> = <nat:3> /\ <var:w> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q1> = <nat:6> * <var:b> /\ <var:q0> = <nat:3> /\ <var:w> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:q0> = <nat:3> /\ <var:w> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:b> /\ <var:w> = <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 