\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:m> := <var:a0> \end{verbatim} Allow $ <var:U> = <var:r> $ prior to the execution of the list of instructions , it must be that we have $ <var:m> = <nat:8> $ after code has finished . \end{theorem} \begin{proof} The argument for our segment of code is shown using usual Hoare techniques . Moving forward to the upcoming step found in the code , we see the assignment line \verb | <var:a0> := <nat:8> ; | . This statement transfers the precondition $ \{ <var:U> = <var:r> \} $ into the condition $ \{ <var:U> = <var:r> \land <var:a0> = <nat:8> \} $ . After , we have the statement \verb | <var:m> := <var:a0> | . This moves the condition $ \{ <var:U> = <var:r> \land <var:a0> = <nat:8> \} $ to $ \{ <var:U> = <var:r> \land <var:m> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <var:a0> := <nat:8> ; <var:m> := <var:a0> {{ <var:m> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:m> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 