\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:f0> := <nat:3> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:v> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:v> ; <var:f2> := <var:f2> * <var:v> ; <var:t> := <var:f2> ; <var:t> := <var:t> + <var:f1> ; <var:t> := <var:t> + <var:f0> \end{verbatim} Allowing it to hold that $ <var:v> = <var:J> $ prior to the evaluation of the list of instructions , it follows that $ <var:t> = <nat:7> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is given by typical Hoare reasoning . Now , \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \end{tabular} Paying attention to the proceeding pieces of code seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \\ \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} & <var:f1> := <nat:1> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \land <var:f1> = <nat:1> \} \\ \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \land <var:f1> = <nat:1> \} & <var:f1> := <var:f1> * <var:v> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \land <var:f1> = <nat:1> * <var:J> \} \\ \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \land <var:f1> = <nat:1> * <var:J> \} & <var:f2> := <nat:7> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \land <var:f1> = <nat:1> * <var:J> \land <var:f2> = <nat:7> \} \end{tabular} Going to the next step , \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \end{tabular} This is known to be sound by the binding law found in Hoare reasoning . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \end{tabular} Moving on , \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \end{tabular} This is guaranteed using the variable update inference rule found in usual Hoare techniques . Following , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:J> \} & <var:f0> := <nat:3> & \{ <var:v> = <var:J> \land <var:f0> = <nat:3> \} \end{tabular} This is sound through the binding scheme given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:v> = <var:J> }} <var:f0> := <nat:3> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:v> ; <var:f2> := <nat:7> ; <var:f2> := <var:f2> * <var:v> ; <var:f2> := <var:f2> * <var:v> ; <var:t> := <var:f2> ; <var:t> := <var:t> + <var:f1> ; <var:t> := <var:t> + <var:f0> {{ <var:t> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> * <var:J> /\ <var:f2> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:1> * <var:J> /\ <var:t> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:f0> = <nat:3> /\ <var:t> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:t> = <nat:7> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 