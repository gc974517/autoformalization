\begin{document} \begin{theorem} Take the following list of instructions as \begin{verbatim} <var:D0> := <nat:9> ; <var:Q> := <var:D0> \end{verbatim} Assume , given every positive numbers $ <var:W> $ , that $ <var:T> = <var:W> $ prior to the evaluation of this list of commands then $ <var:Q> = <nat:9> $ when code exits . \end{theorem} \begin{proof} The method of proof for our code segment can be given by usual Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:T> = <var:W> \} \, <var:D0> := <nat:9> \, \{ <var:T> = <var:W> \land <var:D0> = <nat:9> \} \end{eqnarray} This is sound by the assignment scheme of typical Hoare techniques . Keeping momentum , we have \begin{eqnarray} \{ <var:T> = <var:W> \} \, <var:D0> := <nat:9> \, \{ <var:T> = <var:W> \land <var:D0> = <nat:9> \} \end{eqnarray} This is guaranteed by the rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:T> = <var:W> }} <var:D0> := <nat:9> ; <var:Q> := <var:D0> {{ <var:Q> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:W> /\ <var:Q> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 