\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:7> ; <var:z> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allow --- letting positive numbers $ <var:m> $ --- that we have $ <var:X> = <var:m> $ ahead of evaluating our list of commands , then we see $ <var:z> = <nat:7> $ after segment of code finishes . \end{theorem} \begin{proof} The course of logic for our segment of code can be accomplished through the following decorated list of instructions . \begin{eqnarray} \{ <var:X> = <var:m> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:X> = <var:m> \land <var:c0> = <nat:7> \} \\ <var:z> := <var:c0> \\ \{ <var:X> = <var:m> \land <var:z> = <nat:7> \} \end{eqnarray} Applying Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:7> ; <var:z> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:z> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:z> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 