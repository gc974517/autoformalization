\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:5> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:x> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:x> ; <var:S2> := <var:S2> * <var:x> ; <var:I> := <var:S2> ; <var:I> := <var:I> + <var:S1> ; <var:I> := <var:I> + <var:S0> \end{verbatim} Allow it to hold that $ <var:x> = <var:H> $ , letting natural coefficients $ <var:H> $ , prior to executing this list of instructions it must be that $ <var:I> = <nat:1> \times <var:H> ^ <nat:2> + <nat:6> \times <var:H> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our code is demonstrated using the below decorated code . \begin{eqnarray} \{ <var:x> = <var:H> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \} \end{eqnarray} Furthering running the set of commands produces : \begin{eqnarray} <var:S1> := <nat:6> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \} \\ <var:S1> := <var:S1> * <var:x> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \times <var:H> \} \end{eqnarray} Furthering evaluating this series of instructions yields : \begin{eqnarray} <var:S2> := <nat:1> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \times <var:H> \land <var:S2> = <nat:1> \} \\ <var:S2> := <var:S2> * <var:x> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \times <var:H> \land <var:S2> = <nat:1> \times <var:H> \} \\ <var:S2> := <var:S2> * <var:x> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \times <var:H> \land <var:S2> = <nat:1> \times <var:H> ^ <nat:2> \} \\ <var:I> := <var:S2> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:S1> = <nat:6> \times <var:H> \land <var:I> = <nat:1> \times <var:H> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:S1> ; \\ \{ <var:x> = <var:H> \land <var:S0> = <nat:5> \land <var:I> = <nat:1> \times <var:H> ^ <nat:2> + <nat:6> \times <var:H> \} \\ <var:I> := <var:I> + <var:S0> \\ \{ <var:x> = <var:H> \land <var:I> = <nat:1> \times <var:H> ^ <nat:2> + <nat:6> \times <var:H> + <nat:5> \} \end{eqnarray} Furthering the evaluation of our series of instructions produces : \begin{eqnarray} \end{eqnarray} Utilizing usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <var:S0> := <nat:5> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:x> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:x> ; <var:S2> := <var:S2> * <var:x> ; <var:I> := <var:S2> ; <var:I> := <var:I> + <var:S1> ; <var:I> := <var:I> + <var:S0> {{ <var:I> = <nat:1> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> * <var:H> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> * <var:H> /\ <var:S2> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> * <var:H> /\ <var:S2> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:6> * <var:H> /\ <var:I> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:S0> = <nat:5> /\ <var:I> = <nat:1> * <var:H> ^ <nat:2> + <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:I> = <nat:1> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 