\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:9> ; <var:R3> := <var:R3> * <nat:3> ; <var:G> := <var:R3> <var:G> := <var:G> + <var:R2> <var:G> := <var:G> + <var:R1> <var:G> := <var:G> + <var:R0> \end{verbatim} Given that we have $ <var:n> = <var:h> $ before running this set of instructions it follows that we have $ <var:G> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:9> \cdot <var:h> ^ <nat:2> + <nat:6> \cdot <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is shown through standard Hoare logic . Taking a look at the subsequent pieces of code contained in our list of commands , we have \begin{verbatim} { <var:n> = <var:h> } <var:R1> := <var:n> { <var:n> = <var:h> \land <var:R1> = <var:h> } { <var:n> = <var:h> \land <var:R1> = <var:h> } <var:R2> := <var:R1> * <var:n> { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> } { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> } <var:R3> := <var:R2> * <var:n> { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> } { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> } <var:R0> := <nat:4> { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:n> = <var:h> \land <var:R1> = <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R1> := <var:R1> * <nat:6> { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R2> := <var:R2> * <nat:9> { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R3> = <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } <var:R3> := <var:R3> * <nat:3> { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R3> = <nat:3> * <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R3> = <nat:3> * <var:h> ^ <nat:3> \land <var:R0> = <nat:4> } <var:G> := <var:R3{ <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:G> = <nat:3> * <var:h> ^ <nat:3> } { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R2> = <nat:9> * <var:h> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:G> = <nat:3> * <var:h> ^ <nat:3> } <var:G> := <var:G> + <var:R2{ <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R0> = <nat:4> \land <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> } { <var:n> = <var:h> \land <var:R1> = <nat:6> * <var:h> \land <var:R0> = <nat:4> \land <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> } <var:G> := <var:G> + <var:R1{ <var:n> = <var:h> \land <var:R0> = <nat:4> \land <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:6> * <var:h> } \end{verbatim} This is known to be sound through the assignment scheme obtained from typical Hoare reasoning . Further , \begin{verbatim} { <var:n> = <var:h> } <var:R1> := <var:n> { <var:n> = <var:h> \land <var:R1> = <var:h> } \end{verbatim} This is known to be sound using the variable assignmet inference rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:n> = <var:h> }} <var:R1> := <var:n> ; <var:R2> := <var:R1> * <var:n> ; <var:R3> := <var:R2> * <var:n> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:9> ; <var:R3> := <var:R3> * <nat:3> ; <var:G> := <var:R3> <var:G> := <var:G> + <var:R2> <var:G> := <var:G> + <var:R1> <var:G> := <var:G> + <var:R0> {{ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <var:h> /\ <var:R2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <var:h> /\ <var:R2> = <var:h> ^ <nat:2> /\ <var:R3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <var:h> /\ <var:R2> = <var:h> ^ <nat:2> /\ <var:R3> = <var:h> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <nat:6> * <var:h> /\ <var:R2> = <var:h> ^ <nat:2> /\ <var:R3> = <var:h> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <nat:6> * <var:h> /\ <var:R2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:R3> = <var:h> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <nat:6> * <var:h> /\ <var:R2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:h> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <nat:6> * <var:h> /\ <var:R2> = <nat:9> * <var:h> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R1> = <nat:6> * <var:h> /\ <var:R0> = <nat:4> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:R0> = <nat:4> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:9> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 