\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:u1> := <var:H> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:9> ; <var:Z> := <var:u1> <var:Z> := <var:Z> + <var:u0> \end{verbatim} Assume that $ <var:H> = <var:d> $ ( given positive numbers $ <var:d> $ ) ahead of the execution of this program it follows that we have $ <var:Z> = <nat:9> \cdot <var:d> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is done through this decorated set of instructions . \begin{eqnarray} \{ <var:H> = <var:d> \} \\ <var:u1> := <var:H> ; \\ \{ <var:H> = <var:d> \land <var:u1> = <var:d> \} \\ <var:u0> := <nat:9> ; \\ \{ <var:H> = <var:d> \land <var:u1> = <var:d> \land <var:u0> = <nat:9> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:H> = <var:d> \land <var:u1> = <nat:9> \times <var:d> \land <var:u0> = <nat:9> \} \\ <var:Z> := <var:u1> \\ \{ <var:H> = <var:d> \land <var:u0> = <nat:9> \land <var:Z> = <nat:9> \times <var:d> \} \\ <var:Z> := <var:Z> + <var:u0> \\ \{ <var:H> = <var:d> \land <var:Z> = <nat:9> \times <var:d> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:H> = <var:d> }} <var:u1> := <var:H> ; <var:u0> := <nat:9> ; <var:u1> := <var:u1> * <nat:9> ; <var:Z> := <var:u1> <var:Z> := <var:Z> + <var:u0> {{ <var:Z> = <nat:9> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:u1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:u1> = <var:d> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:u1> = <nat:9> * <var:d> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:u0> = <nat:9> /\ <var:Z> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:Z> = <nat:9> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 