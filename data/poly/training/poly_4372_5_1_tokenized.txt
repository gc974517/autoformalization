\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:y1> := <var:n> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:4> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> \end{verbatim} Allowing it to be that $ <var:n> = <var:I> $ before executing this code it must be that we have $ <var:D> = <nat:4> * <var:I> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this code segment can be seen with usual Hoare techniques . Honing in on the next piece of code found in our set of commands , the variable binding code \verb | <var:y1> := <var:n> ; | . This line takes the precondition $ \{ <var:n> = <var:I> \} $ as the postcondition $ \{ <var:n> = <var:I> \land <var:y1> = <var:I> \} $ . This is guaranteed through the assignment rule found in typical Hoare techniques . Advancing , we see the line \verb | <var:y0> := <nat:9> ; | . This line forwards the precondition $ \{ <var:n> = <var:I> \land <var:y1> = <var:I> \} $ to $ \{ <var:n> = <var:I> \land <var:y1> = <var:I> \land <var:y0> = <nat:9> \} $ . Jumping to the subsequent statement found in the segment of code , the variable update code giving $ <var:y1> * <nat:4> $ into $ <var:y1>$ . This moves $ \{ <var:n> = <var:I> \land <var:y1> = <var:I> \land <var:y0> = <nat:9> \} $ toward $ \{ <var:n> = <var:I> \land <var:y1> = <nat:4> \cdot <var:I> \land <var:y0> = <nat:9> \} $ . Observing the next line contained in our program , we see the variable update statement defining $ <var:y1$ to $ <var:D>$ . This statement moves the precondition $ \{ <var:n> = <var:I> \land <var:y1> = <nat:4> \cdot <var:I> \land <var:y0> = <nat:9> \} $ as the condition $ \{ <var:n> = <var:I> \land <var:y0> = <nat:9> \land <var:D> = <nat:4> \cdot <var:I> \} $ . Considering the following statement contained in our segment of code , the variable update code yielding $ <var:D> + <var:y0$ into $ <var:D>$ . This command transfers $ \{ <var:n> = <var:I> \land <var:y0> = <nat:9> \land <var:D> = <nat:4> \cdot <var:I> \} $ toward the condition $ \{ <var:n> = <var:I> \land <var:D> = <nat:4> \cdot <var:I> + <nat:9> \} $ . This is ensured using the assignment rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <var:y1> := <var:n> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:4> ; <var:D> := <var:y1> <var:D> := <var:D> + <var:y0> {{ <var:D> = <nat:4> * <var:I> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:y1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:y1> = <var:I> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:y1> = <nat:4> * <var:I> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:y0> = <nat:9> /\ <var:D> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:D> = <nat:4> * <var:I> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 