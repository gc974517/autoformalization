\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:P1> := <var:n> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:8> ; <var:r> := <var:P1> <var:r> := <var:r> + <var:P0> \end{verbatim} Given that we have $ <var:n> = <var:y> $ , for any positive integers $ <var:y> $ , prior to the evaluation of this series of commands , it holds that we see $ <var:r> = <nat:8> \cdot <var:y> + <nat:9> $ once segment of code finishes . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:n> = <var:y> \} \\ <var:P1> := <var:n> ; \\ \{ <var:n> = <var:y> \land <var:P1> = <var:y> \} \\ <var:P0> := <nat:9> ; \\ \{ <var:n> = <var:y> \land <var:P1> = <var:y> \land <var:P0> = <nat:9> \} \\ <var:P1> := <var:P1> * <nat:8> ; \\ \{ <var:n> = <var:y> \land <var:P1> = <nat:8> \cdot <var:y> \land <var:P0> = <nat:9> \} \\ <var:r> := <var:P1> \\ \{ <var:n> = <var:y> \land <var:P0> = <nat:9> \land <var:r> = <nat:8> \cdot <var:y> \} \\ <var:r> := <var:r> + <var:P0> \\ \{ <var:n> = <var:y> \land <var:r> = <nat:8> \cdot <var:y> + <nat:9> \} \end{eqnarray} Thus , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:n> = <var:y> }} <var:P1> := <var:n> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:8> ; <var:r> := <var:P1> <var:r> := <var:r> + <var:P0> {{ <var:r> = <nat:8> * <var:y> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:P1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:P1> = <var:y> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:P0> = <nat:9> /\ <var:r> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:y> /\ <var:r> = <nat:8> * <var:y> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 