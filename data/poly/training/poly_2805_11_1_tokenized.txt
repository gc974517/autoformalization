\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:x1> := <var:i> ; <var:x2> := <var:x1> * <var:i> ; <var:x3> := <var:x2> * <var:i> ; <var:x0> := <nat:3> ; <var:x1> := <var:x1> * <nat:7> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:7> ; <var:D> := <var:x3> <var:D> := <var:D> + <var:x2> <var:D> := <var:D> + <var:x1> <var:D> := <var:D> + <var:x0> \end{verbatim} Allowing that $ <var:i> = <var:m> $ prior to the execution of this code , then we have $ <var:D> = <nat:7> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:3> $ once list of instructions executes . \end{theorem} \begin{proof} Proving correctness for this segment of code is evident through Hoare logic . Moving on , \begin{verbatim} { <var:i> = <var:m> } <var:x1> := <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> } { <var:i> = <var:m> \land <var:x1> = <var:m> } <var:x2> := <var:x1> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } <var:x3> := <var:x2> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> } { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> } <var:x0> := <nat:3> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> \land <var:x0> = <nat:3> } \end{verbatim} This is rigorously given with the environment update law of standard Hoare reasoning . Advancing to the next lines of codein the series of instructions , we have \begin{verbatim} { <var:i> = <var:m> } <var:x1> := <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> } { <var:i> = <var:m> \land <var:x1> = <var:m> } <var:x2> := <var:x1> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } <var:x3> := <var:x2> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> } \end{verbatim} This is deduced by the variable assignmet rule defined by usual Hoare techniques . Shifting focus toward the proceeding lines of codecontained in our set of commands , we see \begin{verbatim} { <var:i> = <var:m> } <var:x1> := <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> } { <var:i> = <var:m> \land <var:x1> = <var:m> } <var:x2> := <var:x1> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> } <var:x3> := <var:x2> * <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x3> = <var:m> ^ <nat:3> } \end{verbatim} This is sound using the assignment scheme of Hoare reasoning . Moving on to the subsequent piece of code in the set of instructions , \begin{verbatim} { <var:i> = <var:m> } <var:x1> := <var:i> { <var:i> = <var:m> \land <var:x1> = <var:m> } \end{verbatim} This is ensured by the variable update scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:i> = <var:m> }} <var:x1> := <var:i> ; <var:x2> := <var:x1> * <var:i> ; <var:x3> := <var:x2> * <var:i> ; <var:x0> := <nat:3> ; <var:x1> := <var:x1> * <nat:7> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:7> ; <var:D> := <var:x3> <var:D> := <var:D> + <var:x2> <var:D> := <var:D> + <var:x1> <var:D> := <var:D> + <var:x0> {{ <var:D> = <nat:7> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <var:m> ^ <nat:3> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x3> = <nat:7> * <var:m> ^ <nat:3> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:x0> = <nat:3> /\ <var:D> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x1> = <nat:7> * <var:m> /\ <var:x0> = <nat:3> /\ <var:D> = <nat:7> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:x0> = <nat:3> /\ <var:D> = <nat:7> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:m> /\ <var:D> = <nat:7> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 