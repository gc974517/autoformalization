\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:5> ; <var:T> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume ( assuming some integers $ <var:V> $ ) $ <var:a> = <var:V> $ before executing the set of instructions it must be that we see $ <var:T> = <nat:5> $ after segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is accomplished using usual Hoare logic . Immediately following , we have \verb | { <var:a> = <var:V> } <var:u0> := <nat:5> { <var:a> = <var:V> \land <var:u0> = <nat:5> } | . Observing the upcoming line of code seen in the series of commands , \verb | { <var:a> = <var:V> } <var:u0> := <nat:5> { <var:a> = <var:V> \land <var:u0> = <nat:5> } | . This is given through the assignment law given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:T> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <def:poly> {{ <var:T> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:T> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 