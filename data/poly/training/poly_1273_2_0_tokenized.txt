\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:8> ; <var:z> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Allowing --- for any integers $ <var:L> $ --- that we have $ <var:n> = <var:L> $ ahead of the execution of this series of commands it holds that we see $ <var:z> = <nat:8> $ when list of commands has exited . \end{theorem} \begin{proof} The method of proof for the set of commands can be demonstrated by usual Hoare reasoning . Immediately after , the environment update code \verb | <var:T0> := <nat:8> ; | . This statement forwards the condition $ \{ <var:n> = <var:L> \} $ to $ \{ <var:n> = <var:L> \land <var:T0> = <nat:8> \} $ . This is shown to be logically sound by the assignment scheme in typical Hoare reasoning . Immediately following , we see the assignment code assigning $ <var:T0$ as $ <var:z>$ . This command redefines $ \{ <var:n> = <var:L> \land <var:T0> = <nat:8> \} $ as the postcondition $ \{ <var:n> = <var:L> \land <var:z> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:8> ; <var:z> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:n> = <var:L> }} <def:poly> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 