\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:Q1> := <var:Z> ; <var:Q2> := <var:Q1> * <var:Z> ; <var:Q3> := <var:Q2> * <var:Z> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:n> := <var:Q3> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> \end{verbatim} Given --- letting positive integers $ <var:N> $ --- it to hold that $ <var:Z> = <var:N> $ prior to the evaluation of this code segment it follows that $ <var:n> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:9> \cdot <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code is shown by Hoare logic . Now , we have the statement yielding $ <var:Z> $ toward $ <var:Q1>$ . This line moves the precondition $ \{ <var:Z> = <var:N> \} $ as $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \} $ . This is shown to be logically sound through the assignment law defined in usual Hoare reasoning . Moving forward , the variable assignmet code \verb | <var:Q2> := <var:Q1> * <var:Z> ; | . This statement takes $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \} $ as the condition $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \} $ . Stepping forward , we see the assignment statement yielding $ <var:Q2> * <var:Z> $ as $ <var:Q3>$ . This advances $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \} $ . This is given by the assignment scheme given in standard Hoare techniques . Stepping through , we see the variable assignmet command binding $ <nat:1> $ to $ <var:Q0>$ . This statement moves the precondition $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . Paying attention to the next line of code found in the set of instructions , we have the assignment command assigning $ <var:Q1> * <nat:9> $ toward $ <var:Q1>$ . This advances $ \{ <var:Z> = <var:N> \land <var:Q1> = <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ to $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . This is given using the assignment scheme found in Hoare reasoning . Moving forward to the next step , we see the binding statement yielding $ <var:Q3> * <nat:3> $ toward $ <var:Q3>$ . This command takes the condition $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ as the postcondition $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <nat:3> \times <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . This is shown using the assignment inference rule found in typical Hoare logic . Next , we have the binding statement letting $ <var:Q3$ to $ <var:n>$ . This transfers the condition $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q3> = <nat:3> \times <var:N> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ into the postcondition $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:n> = <nat:3> \times <var:N> ^ <nat:3> \} $ . Following , the variable binding line \verb | <var:n> := <var:n> + <var:Q1> | . This code forwards $ \{ <var:Z> = <var:N> \land <var:Q1> = <nat:9> \times <var:N> \land <var:Q2> = <var:N> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:n> = <nat:3> \times <var:N> ^ <nat:3> \} $ to the condition $ \{ <var:Z> = <var:N> \land <var:Q0> = <nat:1> \land <var:n> = <nat:3> \times <var:N> ^ <nat:3> + <nat:9> \times <var:N> \} $ . This is known to be sound through the assignment law obtained from standard Hoare logic . Shifting focus toward the subsequent statement in our code segment , we see the variable update code binding $ <var:n> + <var:Q0$ toward $ <var:n>$ . This takes $ \{ <var:Z> = <var:N> \land <var:Q0> = <nat:1> \land <var:n> = <nat:3> \times <var:N> ^ <nat:3> + <nat:9> \times <var:N> \} $ as the condition $ \{ <var:Z> = <var:N> \land <var:n> = <nat:3> \times <var:N> ^ <nat:3> + <nat:9> \times <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <var:Q1> := <var:Z> ; <var:Q2> := <var:Q1> * <var:Z> ; <var:Q3> := <var:Q2> * <var:Z> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:n> := <var:Q3> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> {{ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:9> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <nat:9> * <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <var:N> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <nat:9> * <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:N> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q1> = <nat:9> * <var:N> /\ <var:Q2> = <var:N> ^ <nat:2> /\ <var:Q0> = <nat:1> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:Q0> = <nat:1> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:9> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 