\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:I> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:I> ; <var:J2> := <var:J2> * <var:I> ; <var:j> := <var:J2> ; <var:j> := <var:j> + <var:J1> ; <var:j> := <var:j> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:I> = <var:N> $ prior to running our program it holds that we see $ <var:j> = <nat:5> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:I> = <var:N> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:6> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \} \\ <var:J1> := <var:J1> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \times <var:N> \} \\ <var:J2> := <nat:5> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \times <var:N> \land <var:J2> = <nat:5> \} \\ <var:J2> := <var:J2> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \times <var:N> \land <var:J2> = <nat:5> \times <var:N> \} \\ <var:J2> := <var:J2> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \times <var:N> \land <var:J2> = <nat:5> \times <var:N> ^ <nat:2> \} \\ <var:j> := <var:J2> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:J1> = <nat:6> \times <var:N> \land <var:j> = <nat:5> \times <var:N> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:J1> ; \\ \{ <var:I> = <var:N> \land <var:J0> = <nat:1> \land <var:j> = <nat:5> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> \} \\ <var:j> := <var:j> + <var:J0> \\ \{ <var:I> = <var:N> \land <var:j> = <nat:5> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:1> \} \end{eqnarray} Thus , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:1> ; <var:J1> := <nat:6> ; <var:J1> := <var:J1> * <var:I> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:I> ; <var:J2> := <var:J2> * <var:I> ; <var:j> := <var:J2> ; <var:j> := <var:j> + <var:J1> ; <var:j> := <var:j> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:j> = <nat:5> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:N> /\ <var:J2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:N> /\ <var:J2> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:N> /\ <var:J2> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:6> * <var:N> /\ <var:j> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J0> = <nat:1> /\ <var:j> = <nat:5> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:j> = <nat:5> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 