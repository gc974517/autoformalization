\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t3> := <var:t2> * <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:2> ; <var:T> := <var:t3> <var:T> := <var:T> + <var:t2> <var:T> := <var:T> + <var:t1> <var:T> := <var:T> + <var:t0> \end{verbatim} Allow it to hold that $ <var:s> = <var:f> $ ahead of the evaluation of our set of commands it follows that we have $ <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> + <nat:6> $ after set of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for our list of commands is clear using Hoare techniques . Taking another step toward the following piece of code found in our list of commands , we see the binding code \verb | <var:t1> := <var:s> ; | . This line takes the condition $ \{ <var:s> = <var:f> \} $ toward $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \} $ . This is rigorously given through the assignment rule given by usual Hoare reasoning . Now , we see the environment update code \verb | <var:t2> := <var:t1> * <var:s> ; | . This takes the condition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \} $ into the condition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule found in typical Hoare reasoning . Observing the subsequent bit of code found in the code segment , we have the variable assignmet code letting $ <var:t2> * <var:s> $ toward $ <var:t3>$ . This command redefines the condition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \} $ . This is ensured with the assignment inference rule found in usual Hoare reasoning . Going to the next step , we see the environment update statement \verb | <var:t0> := <nat:6> ; | . This line advances the condition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \} $ into the postcondition $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . This is shown using the assignment scheme defined by Hoare reasoning . Advancing to the next step , the assignment line assigning $ <var:t1> * <nat:6> $ into $ <var:t1>$ . This command moves $ \{ <var:s> = <var:f> \land <var:t1> = <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ into the condition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . This is shown by the assignment scheme obtained from standard Hoare logic . Advancing to the proceeding line of code seen in the set of instructions , we see the command \verb | <var:t2> := <var:t2> * <nat:2> ; | . This line moves the condition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ as the condition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . This is ensured with the assignment rule defined by typical Hoare reasoning . Advancing to the proceeding line of code contained in the code , the variable binding line binding $ <var:t3> * <nat:2> $ into $ <var:t3>$ . This transfers the precondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t3> = <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ into $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ . Honing in on the upcoming line found in our series of commands , we see the line giving $ <var:t3$ to $ <var:T>$ . This statement redefines $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:f> ^ <nat:3> \land <var:t0> = <nat:6> \} $ to the postcondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> \} $ . After , we have the line \verb | <var:T> := <var:T> + <var:t2> | . This redefines the precondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t2> = <nat:2> \cdot <var:f> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> \} $ into $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> \} $ . Moving forward to the next step , the line giving $ <var:T> + <var:t1$ as $ <var:T>$ . This advances the precondition $ \{ <var:s> = <var:f> \land <var:t1> = <nat:6> \cdot <var:f> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> \} $ into $ \{ <var:s> = <var:f> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> \} $ . This is shown to be logically sound with the assignment scheme given by standard Hoare logic . Considering the subsequent statement contained in the series of instructions , the variable assignmet statement \verb | <var:T> := <var:T> + <var:t0> | . This line redefines the condition $ \{ <var:s> = <var:f> \land <var:t0> = <nat:6> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> \} $ into the postcondition $ \{ <var:s> = <var:f> \land <var:T> = <nat:2> \cdot <var:f> ^ <nat:3> + <nat:2> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> + <nat:6> \} $ . This is known to be sound with the assignment inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:s> = <var:f> }} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t3> := <var:t2> * <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:2> ; <var:T> := <var:t3> <var:T> := <var:T> + <var:t2> <var:T> := <var:T> + <var:t1> <var:T> := <var:T> + <var:t0> {{ <var:T> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> /\ <var:t2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> /\ <var:t2> = <var:f> ^ <nat:2> /\ <var:t3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <var:f> /\ <var:t2> = <var:f> ^ <nat:2> /\ <var:t3> = <var:f> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:6> * <var:f> /\ <var:t2> = <var:f> ^ <nat:2> /\ <var:t3> = <var:f> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:6> * <var:f> /\ <var:t2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:t3> = <var:f> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:6> * <var:f> /\ <var:t2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:f> ^ <nat:3> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:6> * <var:f> /\ <var:t2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:t0> = <nat:6> /\ <var:T> = <nat:2> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t1> = <nat:6> * <var:f> /\ <var:t0> = <nat:6> /\ <var:T> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:t0> = <nat:6> /\ <var:T> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:f> /\ <var:T> = <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 