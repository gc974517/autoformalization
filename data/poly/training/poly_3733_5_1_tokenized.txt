\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:P1> := <var:s> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:6> ; <var:m> := <var:P1> <var:m> := <var:m> + <var:P0> \end{verbatim} Allowing it to hold that $ <var:s> = <var:g> $ --- for some integers $ <var:g> $ --- prior to interpreting the series of instructions , it must be that we have $ <var:m> = <nat:6> * <var:g> + <nat:3> $ when set of commands has exited . \end{theorem} \begin{proof} The proof of the series of commands can be done by typical Hoare reasoning . Honing in on the subsequent bit of code found in our list of instructions , the command \verb | <var:P1> := <var:s> ; | . This redefines the condition $ \{ <var:s> = <var:g> \} $ into $ \{ <var:s> = <var:g> \land <var:P1> = <var:g> \} $ . This is deduced using the assignment rule defined in usual Hoare reasoning . Advancing to the next step , the variable binding line \verb | <var:P0> := <nat:3> ; | . This redefines the precondition $ \{ <var:s> = <var:g> \land <var:P1> = <var:g> \} $ into the condition $ \{ <var:s> = <var:g> \land <var:P1> = <var:g> \land <var:P0> = <nat:3> \} $ . This is sound using the assignment rule defined in Hoare reasoning . Paying attention to the next bit of code in our set of instructions , we have the variable assignmet code \verb | <var:P1> := <var:P1> * <nat:6> ; | . This code advances $ \{ <var:s> = <var:g> \land <var:P1> = <var:g> \land <var:P0> = <nat:3> \} $ toward the condition $ \{ <var:s> = <var:g> \land <var:P1> = <nat:6> * <var:g> \land <var:P0> = <nat:3> \} $ . This is guaranteed using the assignment rule found in Hoare reasoning . Moving on to the next step , the variable update line \verb | <var:m> := <var:P1> | . This line forwards the precondition $ \{ <var:s> = <var:g> \land <var:P1> = <nat:6> * <var:g> \land <var:P0> = <nat:3> \} $ as the postcondition $ \{ <var:s> = <var:g> \land <var:P0> = <nat:3> \land <var:m> = <nat:6> * <var:g> \} $ . This is rigorously given with the assignment law obtained from usual Hoare reasoning . Moving on to the subsequent command found in the series of commands , we have the variable update statement \verb | <var:m> := <var:m> + <var:P0> | . This advances the condition $ \{ <var:s> = <var:g> \land <var:P0> = <nat:3> \land <var:m> = <nat:6> * <var:g> \} $ to $ \{ <var:s> = <var:g> \land <var:m> = <nat:6> * <var:g> + <nat:3> \} $ . This is given using the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:s> = <var:g> }} <var:P1> := <var:s> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:6> ; <var:m> := <var:P1> <var:m> := <var:m> + <var:P0> {{ <var:m> = <nat:6> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:P1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:P1> = <var:g> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:P1> = <nat:6> * <var:g> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:P0> = <nat:3> /\ <var:m> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:m> = <nat:6> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 