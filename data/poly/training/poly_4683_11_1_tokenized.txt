\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:F> := <var:Q3> <var:F> := <var:F> + <var:Q2> <var:F> := <var:F> + <var:Q1> <var:F> := <var:F> + <var:Q0> \end{verbatim} Allowing --- given positive coefficients $ <var:U> $ --- that we have $ <var:b> = <var:U> $ before the execution of this series of commands , it must be that we have $ <var:F> = <nat:8> \cdot <var:U> ^ <nat:3> + <nat:1> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:4> $ when code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:U> \} \\ <var:Q1> := <var:b> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <var:U> \} \\ <var:Q2> := <var:Q1> * <var:b> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <var:U> \land <var:Q2> = <var:U> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:b> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <var:U> \land <var:Q2> = <var:U> ^ <nat:2> \land <var:Q3> = <var:U> ^ <nat:3> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <var:U> \land <var:Q2> = <var:U> ^ <nat:2> \land <var:Q3> = <var:U> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:2> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <nat:2> \times <var:U> \land <var:Q2> = <var:U> ^ <nat:2> \land <var:Q3> = <var:U> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q2> := <var:Q2> * <nat:1> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <nat:2> \times <var:U> \land <var:Q2> = <nat:1> \times <var:U> ^ <nat:2> \land <var:Q3> = <var:U> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:Q3> := <var:Q3> * <nat:8> ; \\ \{ <var:b> = <var:U> \land <var:Q1> = <nat:2> \times <var:U> \land <var:Q2> = <nat:1> \times <var:U> ^ <nat:2> \land <var:Q3> = <nat:8> \times <var:U> ^ <nat:3> \land <var:Q0> = <nat:4> \} \\ <var:F> := <var:Q3> \\ \{ <var:b> = <var:U> \land <var:Q1> = <nat:2> \times <var:U> \land <var:Q2> = <nat:1> \times <var:U> ^ <nat:2> \land <var:Q0> = <nat:4> \land <var:F> = <nat:8> \times <var:U> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:Q2> \\ \{ <var:b> = <var:U> \land <var:Q1> = <nat:2> \times <var:U> \land <var:Q0> = <nat:4> \land <var:F> = <nat:8> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:Q1> \\ \{ <var:b> = <var:U> \land <var:Q0> = <nat:4> \land <var:F> = <nat:8> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> \} \\ <var:F> := <var:F> + <var:Q0> \\ \{ <var:b> = <var:U> \land <var:F> = <nat:8> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:4> \} \end{eqnarray} The application of Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:b> = <var:U> }} <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:2> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:F> := <var:Q3> <var:F> := <var:F> + <var:Q2> <var:F> := <var:F> + <var:Q1> <var:F> := <var:F> + <var:Q0> {{ <var:F> = <nat:8> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <var:U> /\ <var:Q2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <var:U> /\ <var:Q2> = <var:U> ^ <nat:2> /\ <var:Q3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <var:U> /\ <var:Q2> = <var:U> ^ <nat:2> /\ <var:Q3> = <var:U> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <nat:2> * <var:U> /\ <var:Q2> = <var:U> ^ <nat:2> /\ <var:Q3> = <var:U> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <nat:2> * <var:U> /\ <var:Q2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:Q3> = <var:U> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <nat:2> * <var:U> /\ <var:Q2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:U> ^ <nat:3> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <nat:2> * <var:U> /\ <var:Q2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:Q0> = <nat:4> /\ <var:F> = <nat:8> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q1> = <nat:2> * <var:U> /\ <var:Q0> = <nat:4> /\ <var:F> = <nat:8> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:Q0> = <nat:4> /\ <var:F> = <nat:8> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:F> = <nat:8> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 