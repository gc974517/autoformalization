\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:d> ; <var:A> := <var:k1> ; <var:A> := <var:A> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Assuming $ <var:d> = <var:g> $ ahead of the evaluation of the set of instructions it must be that we have $ <var:A> = <nat:1> \cdot <var:g> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of commands is accomplished with typical Hoare logic . Moving onward , we see the variable binding statement \verb | <var:k0> := <nat:2> ; | . This command moves $ \{ <var:d> = <var:g> \} $ as the postcondition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \} $ . This is ensured by the assignment scheme given by usual Hoare techniques . Shifting focus toward the upcoming bit of code in our segment of code , the variable binding statement letting $ <nat:1> $ to $ <var:k1>$ . This moves $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \} $ into the condition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:k1> = <nat:1> \} $ . Going to the next step , the variable binding statement giving $ <var:k1> * <var:d> $ as $ <var:k1>$ . This redefines the precondition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:k1> = <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:k1> = <nat:1> * <var:g> \} $ . This is known to be sound using the assignment law defined in usual Hoare techniques . Further , the environment update command assigning $ <var:k1> $ into $ <var:A>$ . This takes the precondition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:k1> = <nat:1> * <var:g> \} $ to $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:A> = <nat:1> * <var:g> \} $ . Advancing to the next step , the assignment statement \verb | <var:A> := <var:A> + <var:k0> | . This takes the condition $ \{ <var:d> = <var:g> \land <var:k0> = <nat:2> \land <var:A> = <nat:1> * <var:g> \} $ to the postcondition $ \{ <var:d> = <var:g> \land <var:A> = <nat:1> * <var:g> + <nat:2> \} $ . This is deduced through the assignment scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:d> ; <var:A> := <var:k1> ; <var:A> := <var:A> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:d> = <var:g> }} <def:poly> {{ <var:A> = <nat:1> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:g> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:g> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:g> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:g> /\ <var:k0> = <nat:2> /\ <var:A> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:g> /\ <var:A> = <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 