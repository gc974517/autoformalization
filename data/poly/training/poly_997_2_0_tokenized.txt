\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:M0> := <nat:9> ; <var:H> := <var:M0> \end{verbatim} Allow that $ <var:q> = <var:d> $ prior to interpreting this segment of code it follows that $ <var:H> = <nat:9> $ . \end{theorem} \begin{proof} The argument for the set of commands is done by standard Hoare logic . Looking at the next bit of code in the program , the variable update code letting $ <nat:9> $ to $ <var:M0>$ . This advances the precondition $ \{ <var:q> = <var:d> \} $ to the postcondition $ \{ <var:q> = <var:d> \land <var:M0> = <nat:9> \} $ . Honing in on the next line in our series of commands , we see the line letting $ <var:M0$ to $ <var:H>$ . This transfers the condition $ \{ <var:q> = <var:d> \land <var:M0> = <nat:9> \} $ as the postcondition $ \{ <var:q> = <var:d> \land <var:H> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:q> = <var:d> }} <var:M0> := <nat:9> ; <var:H> := <var:M0> {{ <var:H> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:H> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 