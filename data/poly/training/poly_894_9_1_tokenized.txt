\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:x> ; <var:h2> := <var:h1> * <var:x> ; <var:h3> := <var:h2> * <var:x> ; <var:h0> := <nat:2> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:W> := <var:h3> <var:W> := <var:W> + <var:h2> <var:W> := <var:W> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:x> = <var:N> $ ahead of running this set of instructions , it holds that we have $ <var:W> = <nat:5> \times <var:N> ^ <nat:3> + <nat:8> \times <var:N> ^ <nat:2> + <nat:2> $ once code segment has finished executing . \end{theorem} \begin{proof} The course of logic for the code segment can be shown through typical Hoare techniques . Taking a look at the proceeding piece of code seen in the list of instructions , we see the environment update command letting $ <var:x> $ toward $ <var:h1>$ . This redefines the condition $ \{ <var:x> = <var:N> \} $ into $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \} $ . Taking another step toward the upcoming line of code seen in our series of commands , we see the variable assignmet statement \verb | <var:h2> := <var:h1> * <var:x> ; | . This code takes the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \} $ toward the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \} $ . Now , the variable binding statement \verb | <var:h3> := <var:h2> * <var:x> ; | . This statement transfers the precondition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \} $ . Keeping momentum , we see the binding statement defining $ <nat:2> $ toward $ <var:h0>$ . This statement transfers $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \} $ as the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . This is rigorously given through the assignment scheme of standard Hoare logic . Looking at the proceeding statement found in our code segment , we have the variable assignmet statement \verb | <var:h2> := <var:h2> * <nat:8> ; | . This line takes the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . Keeping momentum , we see the environment update statement \verb | <var:h3> := <var:h3> * <nat:5> ; | . This line transfers $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h3> = <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ as the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h3> = <nat:5> \cdot <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . Honing in on the subsequent command in our code segment , the environment update command yielding $ <var:h3$ to $ <var:W>$ . This forwards $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h3> = <nat:5> \cdot <var:N> ^ <nat:3> \land <var:h0> = <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:W> = <nat:5> \cdot <var:N> ^ <nat:3> \} $ . Stepping forward , we have the environment update code defining $ <var:W> + <var:h2$ to $ <var:W>$ . This command forwards the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h2> = <nat:8> \cdot <var:N> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:W> = <nat:5> \cdot <var:N> ^ <nat:3> \} $ as $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h0> = <nat:2> \land <var:W> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} $ . Moving onward , we have the binding command \verb | <var:W> := <var:W> + <var:h0> | . This command transfers the condition $ \{ <var:x> = <var:N> \land <var:h1> = <var:N> \land <var:h0> = <nat:2> \land <var:W> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:N> \land <var:W> = <nat:5> \cdot <var:N> ^ <nat:3> + <nat:8> \cdot <var:N> ^ <nat:2> + <nat:2> \} $ . This is sound with the assignment scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:x> ; <var:h2> := <var:h1> * <var:x> ; <var:h3> := <var:h2> * <var:x> ; <var:h0> := <nat:2> ; <var:h2> := <var:h2> * <nat:8> ; <var:h3> := <var:h3> * <nat:5> ; <var:W> := <var:h3> <var:W> := <var:W> + <var:h2> <var:W> := <var:W> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <def:poly> {{ <var:W> = <nat:5> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <var:N> ^ <nat:2> /\ <var:h3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <var:N> ^ <nat:2> /\ <var:h3> = <var:N> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:h3> = <var:N> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:h3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h2> = <nat:8> * <var:N> ^ <nat:2> /\ <var:h0> = <nat:2> /\ <var:W> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:h1> = <var:N> /\ <var:h0> = <nat:2> /\ <var:W> = <nat:5> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:W> = <nat:5> * <var:N> ^ <nat:3> + <nat:8> * <var:N> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 