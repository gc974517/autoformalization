\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:p> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:4> ; <var:Y> := <var:M1> <var:Y> := <var:Y> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:p> = <var:v> $ before executing the code it must be that $ <var:Y> = <nat:4> * <var:v> + <nat:8> $ after series of instructions finishes . \end{theorem} \begin{proof} The proof of this code is clear through Hoare logic . Immediately after , the variable assignmet command letting $ <var:p> $ into $ <var:M1>$ . This line transfers the condition $ \{ <var:p> = <var:v> \} $ as the postcondition $ \{ <var:p> = <var:v> \land <var:M1> = <var:v> \} $ . This is guaranteed by the assignment scheme of usual Hoare reasoning . Stepping forward , we have the assignment statement giving $ <nat:8> $ toward $ <var:M0>$ . This code transfers the precondition $ \{ <var:p> = <var:v> \land <var:M1> = <var:v> \} $ into the condition $ \{ <var:p> = <var:v> \land <var:M1> = <var:v> \land <var:M0> = <nat:8> \} $ . Following , we have the binding command defining $ <var:M1> * <nat:4> $ to $ <var:M1>$ . This code transfers the precondition $ \{ <var:p> = <var:v> \land <var:M1> = <var:v> \land <var:M0> = <nat:8> \} $ to the postcondition $ \{ <var:p> = <var:v> \land <var:M1> = <nat:4> * <var:v> \land <var:M0> = <nat:8> \} $ . Advancing on , we have the variable update line binding $ <var:M1$ as $ <var:Y>$ . This moves the precondition $ \{ <var:p> = <var:v> \land <var:M1> = <nat:4> * <var:v> \land <var:M0> = <nat:8> \} $ as the postcondition $ \{ <var:p> = <var:v> \land <var:M0> = <nat:8> \land <var:Y> = <nat:4> * <var:v> \} $ . Further , we see the variable binding line \verb | <var:Y> := <var:Y> + <var:M0> | . This line moves the condition $ \{ <var:p> = <var:v> \land <var:M0> = <nat:8> \land <var:Y> = <nat:4> * <var:v> \} $ to the postcondition $ \{ <var:p> = <var:v> \land <var:Y> = <nat:4> * <var:v> + <nat:8> \} $ . This is shown to be logically sound using the assignment law defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:p> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:4> ; <var:Y> := <var:M1> <var:Y> := <var:Y> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:p> = <var:v> }} <def:poly> {{ <var:Y> = <nat:4> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:v> /\ <var:M1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:v> /\ <var:M1> = <var:v> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:v> /\ <var:M1> = <nat:4> * <var:v> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:v> /\ <var:M0> = <nat:8> /\ <var:Y> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:v> /\ <var:Y> = <nat:4> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 