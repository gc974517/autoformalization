\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:2> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:Y> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:Y> ; <var:s2> := <var:s2> * <var:Y> ; <var:q> := <var:s2> ; <var:q> := <var:q> + <var:s1> ; <var:q> := <var:q> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Assuming --- given $ <var:e> \in \mathbb{Z}^+ $ --- that we have $ <var:Y> = <var:e> $ ahead of evaluating this set of commands , it must be that we have $ <var:q> = <nat:3> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:2> $ when set of commands is done . \end{theorem} \begin{proof} The argument for the set of instructions is demonstrated by usual Hoare reasoning . Next , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:e> \} & <var:s0> := <nat:2> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \} & <var:s1> := <nat:1> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> \} & <var:s1> := <var:s1> * <var:Y> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \} & <var:s2> := <nat:3> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> \} & <var:s2> := <var:s2> * <var:Y> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> * <var:e> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> * <var:e> \} & <var:s2> := <var:s2> * <var:Y> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> * <var:e> ^ <nat:2> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:s2> = <nat:3> * <var:e> ^ <nat:2> \} & <var:q> := <var:s2> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:q> = <nat:3> * <var:e> ^ <nat:2> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:s1> = <nat:1> * <var:e> \land <var:q> = <nat:3> * <var:e> ^ <nat:2> \} & <var:q> := <var:q> + <var:s1> & \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> \} \\ \{ <var:Y> = <var:e> \land <var:s0> = <nat:2> \land <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> \} & <var:q> := <var:q> + <var:s0& \{ <var:Y> = <var:e> \land <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:Y> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:Y> ; <var:s2> := <var:s2> * <var:Y> ; <var:q> := <var:s2> ; <var:q> := <var:q> + <var:s1> ; <var:q> := <var:q> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Y> = <var:e> }} <def:poly> {{ <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> * <var:e> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> * <var:e> /\ <var:s2> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> * <var:e> /\ <var:s2> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:1> * <var:e> /\ <var:q> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:s0> = <nat:2> /\ <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:e> /\ <var:q> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 