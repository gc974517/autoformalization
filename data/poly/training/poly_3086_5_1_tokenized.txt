\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:z> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:3> ; <var:X> := <var:R1> <var:X> := <var:X> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume --- with some whole numbers $ <var:p> $ --- that we have $ <var:z> = <var:p> $ before running the code segment , it must be that we see $ <var:X> = <nat:3> \times <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is given with Hoare reasoning . Advancing to the next step , the assignment code giving $ <var:z> $ into $ <var:R1>$ . This advances the precondition $ \{ <var:z> = <var:p> \} $ toward the condition $ \{ <var:z> = <var:p> \land <var:R1> = <var:p> \} $ . Immediately after , we have the assignment line yielding $ <nat:1> $ as $ <var:R0>$ . This takes $ \{ <var:z> = <var:p> \land <var:R1> = <var:p> \} $ toward the condition $ \{ <var:z> = <var:p> \land <var:R1> = <var:p> \land <var:R0> = <nat:1> \} $ . This is shown with the assignment inference rule from Hoare reasoning . Paying attention to the subsequent line seen in our code segment , we see the environment update command assigning $ <var:R1> * <nat:3> $ to $ <var:R1>$ . This statement moves $ \{ <var:z> = <var:p> \land <var:R1> = <var:p> \land <var:R0> = <nat:1> \} $ to the postcondition $ \{ <var:z> = <var:p> \land <var:R1> = <nat:3> \cdot <var:p> \land <var:R0> = <nat:1> \} $ . This is known to be sound by the assignment scheme given by Hoare logic . Moving on to the next step , we have the binding statement \verb | <var:X> := <var:R1> | . This moves the precondition $ \{ <var:z> = <var:p> \land <var:R1> = <nat:3> \cdot <var:p> \land <var:R0> = <nat:1> \} $ into the condition $ \{ <var:z> = <var:p> \land <var:R0> = <nat:1> \land <var:X> = <nat:3> \cdot <var:p> \} $ . This is guaranteed by the assignment scheme in usual Hoare techniques . Moving forward to the proceeding line seen in our segment of code , we see the binding code \verb | <var:X> := <var:X> + <var:R0> | . This command redefines the condition $ \{ <var:z> = <var:p> \land <var:R0> = <nat:1> \land <var:X> = <nat:3> \cdot <var:p> \} $ into the postcondition $ \{ <var:z> = <var:p> \land <var:X> = <nat:3> \cdot <var:p> + <nat:1> \} $ . This is deduced with the assignment rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:z> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:3> ; <var:X> := <var:R1> <var:X> := <var:X> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:X> = <nat:3> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:R1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:R1> = <var:p> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:R1> = <nat:3> * <var:p> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:R0> = <nat:1> /\ <var:X> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:X> = <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 