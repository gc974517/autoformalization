\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:N> ; <var:b> := <var:L1> ; <var:b> := <var:b> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Assuming ( given all positive coefficients $ <var:M> $ ) that we have $ <var:N> = <var:M> $ prior to the evaluation of our set of instructions it follows that $ <var:b> = <nat:2> * <var:M> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:M> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:N> = <var:M> \land <var:L0> = <nat:2> \} \\ <var:L1> := <nat:2> ; \\ \{ <var:N> = <var:M> \land <var:L0> = <nat:2> \land <var:L1> = <nat:2> \} \\ <var:L1> := <var:L1> * <var:N> ; \\ \{ <var:N> = <var:M> \land <var:L0> = <nat:2> \land <var:L1> = <nat:2> \times <var:M> \} \end{eqnarray} Continuing executing this list of instructions yields : \begin{eqnarray} <var:b> := <var:L1> ; \\ \{ <var:N> = <var:M> \land <var:L0> = <nat:2> \land <var:b> = <nat:2> \times <var:M> \} \\ <var:b> := <var:b> + <var:L0> \\ \{ <var:N> = <var:M> \land <var:b> = <nat:2> \times <var:M> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:2> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:N> ; <var:b> := <var:L1> ; <var:b> := <var:b> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:N> = <var:M> }} <def:poly> {{ <var:b> = <nat:2> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:L0> = <nat:2> /\ <var:b> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:M> /\ <var:b> = <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 