\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:j> ; <var:N2> := <var:N1> * <var:j> ; <var:N3> := <var:N2> * <var:j> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:7> ; <var:V> := <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Given it to hold that $ <var:j> = <var:T> $ prior to evaluating this series of instructions , it holds that we have $ <var:V> = <nat:7> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> + <nat:5> \times <var:T> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this code segment can be done with typical Hoare logic . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:T> \} & <var:N1> := <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <var:T> \} & <var:N2> := <var:N1> * <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \} \end{tabular} Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:T> \} & <var:N1> := <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \} \end{tabular} This is guaranteed using the variable binding inference rule defined in Hoare reasoning . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:T> \} & <var:N1> := <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <var:T> \} & <var:N2> := <var:N1> * <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \} & <var:N3> := <var:N2> * <var:j> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \} & <var:N0> := <nat:2> & \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} & <var:N1> := <var:N1> * <nat:5> & \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} & <var:N2> := <var:N2> * <nat:2> & \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:N3> = <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} & <var:N3> := <var:N3> * <nat:7> & \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:N3> = <nat:7> \times <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} \\ \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:N3> = <nat:7> \times <var:T> ^ <nat:3> \land <var:N0> = <nat:2> \} & <var:V> := <var:N3& \{ <var:j> = <var:T> \land <var:N1> = <nat:5> \times <var:T> \land <var:N2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:V> = <nat:7> \times <var:T> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:j> ; <var:N2> := <var:N1> * <var:j> ; <var:N3> := <var:N2> * <var:j> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:7> ; <var:V> := <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N1> <var:V> := <var:V> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:j> = <var:T> }} <def:poly> {{ <var:V> = <nat:7> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <var:T> /\ <var:N2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <var:T> /\ <var:N2> = <var:T> ^ <nat:2> /\ <var:N3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <var:T> /\ <var:N2> = <var:T> ^ <nat:2> /\ <var:N3> = <var:T> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <nat:5> * <var:T> /\ <var:N2> = <var:T> ^ <nat:2> /\ <var:N3> = <var:T> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <nat:5> * <var:T> /\ <var:N2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:N3> = <var:T> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <nat:5> * <var:T> /\ <var:N2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:T> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <nat:5> * <var:T> /\ <var:N2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:N0> = <nat:2> /\ <var:V> = <nat:7> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N1> = <nat:5> * <var:T> /\ <var:N0> = <nat:2> /\ <var:V> = <nat:7> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:N0> = <nat:2> /\ <var:V> = <nat:7> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:T> /\ <var:V> = <nat:7> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 