\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:s0> := <nat:7> ; <var:U> := <var:s0> \end{verbatim} Assuming it to hold that $ <var:d> = <var:T> $ prior to the execution of the code segment , it follows that we see $ <var:U> = <nat:7> $ after list of instructions finishes . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is given through typical Hoare techniques . Going to the next step , we see the variable assignmet code binding $ <nat:7> $ toward $ <var:s0>$ . This moves the condition $ \{ <var:d> = <var:T> \} $ toward the postcondition $ \{ <var:d> = <var:T> \land <var:s0> = <nat:7> \} $ . Honing in on the upcoming command found in the set of commands , the variable update code \verb | <var:U> := <var:s0> | . This statement transfers $ \{ <var:d> = <var:T> \land <var:s0> = <nat:7> \} $ as the condition $ \{ <var:d> = <var:T> \land <var:U> = <nat:7> \} $ . This is given with the assignment scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:d> = <var:T> }} <var:s0> := <nat:7> ; <var:U> := <var:s0> {{ <var:U> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:U> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 