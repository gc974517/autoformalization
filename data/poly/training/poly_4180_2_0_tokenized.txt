\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:8> ; <var:C> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:Y> = <var:E> $ prior to the execution of this set of instructions then $ <var:C> = <nat:8> $ when series of commands terminates . \end{theorem} \begin{proof} The course of logic for the segment of code can be done with Hoare logic . Immediately after , we have \begin{verbatim} { <var:Y> = <var:E> } <var:f0> := <nat:8> { <var:Y> = <var:E> \land <var:f0> = <nat:8> } \end{verbatim} Moving forward to the next line of code seen in the set of commands , \begin{verbatim} { <var:Y> = <var:E> } <var:f0> := <nat:8> { <var:Y> = <var:E> \land <var:f0> = <nat:8> } \end{verbatim} This is known to be sound by the environment update inference rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:C> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <def:poly> {{ <var:C> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:C> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 