\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:K1> := <var:V> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:7> ; <var:H> := <var:K1> <var:H> := <var:H> + <var:K0> \end{verbatim} Given that $ <var:V> = <var:B> $ ( for all $ <var:B> $ ) before interpreting this program , it follows that we have $ <var:H> = <nat:7> \times <var:B> + <nat:7> $ after list of commands exits . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:V> = <var:B> \} \\ <var:K1> := <var:V> ; \\ \{ <var:V> = <var:B> \land <var:K1> = <var:B> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:V> = <var:B> \land <var:K1> = <var:B> \land <var:K0> = <nat:7> \} \\ <var:K1> := <var:K1> * <nat:7> ; \\ \{ <var:V> = <var:B> \land <var:K1> = <nat:7> * <var:B> \land <var:K0> = <nat:7> \} \\ <var:H> := <var:K1> \\ \{ <var:V> = <var:B> \land <var:K0> = <nat:7> \land <var:H> = <nat:7> * <var:B> \} \\ <var:H> := <var:H> + <var:K0> \\ \{ <var:V> = <var:B> \land <var:H> = <nat:7> * <var:B> + <nat:7> \} \end{eqnarray} Therefore , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:V> = <var:B> }} <var:K1> := <var:V> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:7> ; <var:H> := <var:K1> <var:H> := <var:H> + <var:K0> {{ <var:H> = <nat:7> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:K1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:K1> = <var:B> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:K0> = <nat:7> /\ <var:H> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:H> = <nat:7> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 