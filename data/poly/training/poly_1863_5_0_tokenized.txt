\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:l0> := <nat:4> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:u> ; <var:M> := <var:l1> ; <var:M> := <var:M> + <var:l0> \end{verbatim} Allowing it to hold that $ <var:u> = <var:T> $ , given any integers $ <var:T> $ , before evaluating our code segment then we have $ <var:M> = <nat:8> \times <var:T> + <nat:4> $ once code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:T> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:4> \} \\ <var:l1> := <nat:8> ; \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:4> \land <var:l1> = <nat:8> \} \\ <var:l1> := <var:l1> * <var:u> ; \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:4> \land <var:l1> = <nat:8> \cdot <var:T> \} \\ <var:M> := <var:l1> ; \\ \{ <var:u> = <var:T> \land <var:l0> = <nat:4> \land <var:M> = <nat:8> \cdot <var:T> \} \\ <var:M> := <var:M> + <var:l0> \\ \{ <var:u> = <var:T> \land <var:M> = <nat:8> \cdot <var:T> + <nat:4> \} \end{eqnarray} Using usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:u> = <var:T> }} <var:l0> := <nat:4> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:u> ; <var:M> := <var:l1> ; <var:M> := <var:M> + <var:l0> {{ <var:M> = <nat:8> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:l0> = <nat:4> /\ <var:M> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:T> /\ <var:M> = <nat:8> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 