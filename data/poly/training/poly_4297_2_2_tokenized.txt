\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:4> + <var:H> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assume --- letting natural coefficients $ <var:a> $ --- $ <var:l> = <var:a> $ before the evaluation of this code segment it follows that $ <var:H> = <nat:3> \cdot <var:a> + <nat:4> $ once list of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:a> \} \\ <var:H> := <nat:3> ; \\ \{ <var:l> = <var:a> \land <var:H> = <nat:3> \} \\ <var:H> := <nat:4> + <var:H> * <var:l> \\ \{ <var:l> = <var:a> \land <var:H> = <nat:3> \cdot <var:a> + <nat:4> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:4> + <var:H> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:l> = <var:a> }} <def:poly> {{ <var:H> = <nat:3> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:a> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:a> /\ <var:H> = <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 