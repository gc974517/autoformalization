\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:G> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:5> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given given any positive integer coefficients $ <var:J> $ that $ <var:G> = <var:J> $ before the evaluation of the code segment it holds that $ <var:m> = <nat:5> \times <var:J> + <nat:7> $ when program finishes . \end{theorem} \begin{proof} The proof of this set of instructions is demonstrated by typical Hoare techniques . Now , the variable assignmet statement defining $ <var:G> $ toward $ <var:K1>$ . This command advances the condition $ \{ <var:G> = <var:J> \} $ into $ \{ <var:G> = <var:J> \land <var:K1> = <var:J> \} $ . Moving forward , we have the variable update statement assigning $ <nat:7> $ toward $ <var:K0>$ . This redefines the condition $ \{ <var:G> = <var:J> \land <var:K1> = <var:J> \} $ toward the postcondition $ \{ <var:G> = <var:J> \land <var:K1> = <var:J> \land <var:K0> = <nat:7> \} $ . This is given with the assignment rule found in usual Hoare techniques . Shifting focus toward the next step in the set of instructions , we have the variable assignmet statement defining $ <var:K1> * <nat:5> $ into $ <var:K1>$ . This statement takes the precondition $ \{ <var:G> = <var:J> \land <var:K1> = <var:J> \land <var:K0> = <nat:7> \} $ to $ \{ <var:G> = <var:J> \land <var:K1> = <nat:5> \cdot <var:J> \land <var:K0> = <nat:7> \} $ . This is given using the assignment inference rule defined by typical Hoare techniques . Stepping forward , the environment update statement binding $ <var:K1$ toward $ <var:m>$ . This line transfers $ \{ <var:G> = <var:J> \land <var:K1> = <nat:5> \cdot <var:J> \land <var:K0> = <nat:7> \} $ into $ \{ <var:G> = <var:J> \land <var:K0> = <nat:7> \land <var:m> = <nat:5> \cdot <var:J> \} $ . Further , the variable binding line \verb | <var:m> := <var:m> + <var:K0> | . This advances the precondition $ \{ <var:G> = <var:J> \land <var:K0> = <nat:7> \land <var:m> = <nat:5> \cdot <var:J> \} $ to the condition $ \{ <var:G> = <var:J> \land <var:m> = <nat:5> \cdot <var:J> + <nat:7> \} $ . This is rigorously given with the assignment rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:G> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:5> ; <var:m> := <var:K1> <var:m> := <var:m> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <def:poly> {{ <var:m> = <nat:5> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:K1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:K1> = <var:J> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:K1> = <nat:5> * <var:J> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:K0> = <nat:7> /\ <var:m> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:m> = <nat:5> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 