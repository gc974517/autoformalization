\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:C> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:8> ; <var:Z> := <var:H1> <var:Z> := <var:Z> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow , for all integers $ <var:i> $ , $ <var:C> = <var:i> $ prior to the execution of the series of instructions it holds that $ <var:Z> = <nat:8> \times <var:i> + <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare techniques results in : \begin{eqnarray} \{ <var:C> = <var:i> \} \\ <var:H1> := <var:C> ; \\ \{ <var:C> = <var:i> \land <var:H1> = <var:i> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:C> = <var:i> \land <var:H1> = <var:i> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:8> ; \\ \{ <var:C> = <var:i> \land <var:H1> = <nat:8> * <var:i> \land <var:H0> = <nat:6> \} \\ <var:Z> := <var:H1> \\ \{ <var:C> = <var:i> \land <var:H0> = <nat:6> \land <var:Z> = <nat:8> * <var:i> \} \\ <var:Z> := <var:Z> + <var:H0> \\ \{ <var:C> = <var:i> \land <var:Z> = <nat:8> * <var:i> + <nat:6> \} \end{eqnarray} As a result , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:C> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:8> ; <var:Z> := <var:H1> <var:Z> := <var:Z> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:C> = <var:i> }} <def:poly> {{ <var:Z> = <nat:8> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:H1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:H1> = <var:i> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:H1> = <nat:8> * <var:i> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:H0> = <nat:6> /\ <var:Z> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:Z> = <nat:8> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 