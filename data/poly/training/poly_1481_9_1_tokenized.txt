\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:r1> := <var:l> ; <var:r2> := <var:r1> * <var:l> ; <var:r3> := <var:r2> * <var:l> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:2> ; <var:r3> := <var:r3> * <nat:4> ; <var:Z> := <var:r3> <var:Z> := <var:Z> + <var:r1> <var:Z> := <var:Z> + <var:r0> \end{verbatim} Assume that we have $ <var:l> = <var:b> $ , given every positive integers $ <var:b> $ , ahead of running our list of instructions , it holds that $ <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our series of instructions can be seen with typical Hoare techniques . Following , we have \begin{verbatim} { <var:l> = <var:b> } <var:r1> := <var:l> { <var:l> = <var:b> \land <var:r1> = <var:b> } { <var:l> = <var:b> \land <var:r1> = <var:b> } <var:r2> := <var:r1> * <var:l> { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> } { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> } <var:r3> := <var:r2> * <var:l> { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> } { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> } <var:r0> := <nat:4> { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } { <var:l> = <var:b> \land <var:r1> = <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } <var:r1> := <var:r1> * <nat:2> { <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } { <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } <var:r3> := <var:r3> * <nat:4> { <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } { <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r3> = <nat:4> \cdot <var:b> ^ <nat:3> \land <var:r0> = <nat:4> } <var:Z> := <var:r3{ <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> } { <var:l> = <var:b> \land <var:r1> = <nat:2> \cdot <var:b> \land <var:r2> = <var:b> ^ <nat:2> \land <var:r0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> } <var:Z> := <var:Z> + <var:r1{ <var:l> = <var:b> \land <var:r0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> } { <var:l> = <var:b> \land <var:r0> = <nat:4> \land <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> } <var:Z> := <var:Z> + <var:r0{ <var:l> = <var:b> \land <var:Z> = <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> + <nat:4> } \end{verbatim} This is given using the binding scheme given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:l> = <var:b> }} <var:r1> := <var:l> ; <var:r2> := <var:r1> * <var:l> ; <var:r3> := <var:r2> * <var:l> ; <var:r0> := <nat:4> ; <var:r1> := <var:r1> * <nat:2> ; <var:r3> := <var:r3> * <nat:4> ; <var:Z> := <var:r3> <var:Z> := <var:Z> + <var:r1> <var:Z> := <var:Z> + <var:r0> {{ <var:Z> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <var:b> /\ <var:r2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <var:b> /\ <var:r2> = <var:b> ^ <nat:2> /\ <var:r3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <var:b> /\ <var:r2> = <var:b> ^ <nat:2> /\ <var:r3> = <var:b> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <nat:2> * <var:b> /\ <var:r2> = <var:b> ^ <nat:2> /\ <var:r3> = <var:b> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <nat:2> * <var:b> /\ <var:r2> = <var:b> ^ <nat:2> /\ <var:r3> = <nat:4> * <var:b> ^ <nat:3> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r1> = <nat:2> * <var:b> /\ <var:r2> = <var:b> ^ <nat:2> /\ <var:r0> = <nat:4> /\ <var:Z> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:r0> = <nat:4> /\ <var:Z> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:b> /\ <var:Z> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 