\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:9> ; <var:A> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:k> = <var:K> $ before running this code segment , it follows that we see $ <var:A> = <nat:9> $ when code segment has terminated . \end{theorem} \begin{proof} Proving correctness for this program is shown using typical Hoare logic . Taking another step toward the following bit of code in our set of commands , the variable update command \verb | <var:Q0> := <nat:9> ; | . This code redefines the condition $ \{ <var:k> = <var:K> \} $ toward the postcondition $ \{ <var:k> = <var:K> \land <var:Q0> = <nat:9> \} $ . Considering the following bit of code seen in our list of commands , we see the variable binding code \verb | <var:A> := <var:Q0> | . This forwards the precondition $ \{ <var:k> = <var:K> \land <var:Q0> = <nat:9> \} $ toward the condition $ \{ <var:k> = <var:K> \land <var:A> = <nat:9> \} $ . This is shown through the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:9> ; <var:A> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:k> = <var:K> }} <def:poly> {{ <var:A> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:A> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 