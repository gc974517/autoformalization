\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:m> ; <var:B2> := <var:B1> * <var:m> ; <var:B3> := <var:B2> * <var:m> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:3> ; <var:B3> := <var:B3> * <nat:2> ; <var:N> := <var:B3> <var:N> := <var:N> + <var:B2> <var:N> := <var:N> + <var:B1> <var:N> := <var:N> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:m> = <var:x> $ before evaluating this segment of code , it holds that we see $ <var:N> = <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:2> $ once list of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:x> \} \\ <var:B1> := <var:m> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <var:x> \} \\ <var:B2> := <var:B1> * <var:m> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:m> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \} \\ <var:B0> := <nat:2> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B1> := <var:B1> * <nat:4> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <nat:4> * <var:x> \land <var:B2> = <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B2> := <var:B2> * <nat:3> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <nat:4> * <var:x> \land <var:B2> = <nat:3> * <var:x> ^ <nat:2> \land <var:B3> = <var:x> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:B3> := <var:B3> * <nat:2> ; \\ \{ <var:m> = <var:x> \land <var:B1> = <nat:4> * <var:x> \land <var:B2> = <nat:3> * <var:x> ^ <nat:2> \land <var:B3> = <nat:2> * <var:x> ^ <nat:3> \land <var:B0> = <nat:2> \} \\ <var:N> := <var:B3> \\ \{ <var:m> = <var:x> \land <var:B1> = <nat:4> * <var:x> \land <var:B2> = <nat:3> * <var:x> ^ <nat:2> \land <var:B0> = <nat:2> \land <var:N> = <nat:2> * <var:x> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:B2> \\ \{ <var:m> = <var:x> \land <var:B1> = <nat:4> * <var:x> \land <var:B0> = <nat:2> \land <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:B1> \\ \{ <var:m> = <var:x> \land <var:B0> = <nat:2> \land <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> \} \\ <var:N> := <var:N> + <var:B0> \\ \{ <var:m> = <var:x> \land <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:m> ; <var:B2> := <var:B1> * <var:m> ; <var:B3> := <var:B2> * <var:m> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:3> ; <var:B3> := <var:B3> * <nat:2> ; <var:N> := <var:B3> <var:N> := <var:N> + <var:B2> <var:N> := <var:N> + <var:B1> <var:N> := <var:N> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:m> = <var:x> }} <def:poly> {{ <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <var:x> /\ <var:B2> = <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <nat:4> * <var:x> /\ <var:B2> = <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <nat:4> * <var:x> /\ <var:B2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:B3> = <var:x> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <nat:4> * <var:x> /\ <var:B2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:x> ^ <nat:3> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <nat:4> * <var:x> /\ <var:B2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:B0> = <nat:2> /\ <var:N> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B1> = <nat:4> * <var:x> /\ <var:B0> = <nat:2> /\ <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:B0> = <nat:2> /\ <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:x> /\ <var:N> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 