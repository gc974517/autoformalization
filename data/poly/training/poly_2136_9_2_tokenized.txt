\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:H> = <var:l> $ before executing the series of instructions , it holds that $ <var:u> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:l> \} \\ <var:u> := <nat:1> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> + <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> \} \\ <var:u> := <nat:2> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> \} \\ <var:u> := <nat:2> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> \} \\ <var:u> := <nat:3> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} \\ <var:u> := <nat:3> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> \} \\ <var:u> := <nat:3> + <var:u> * <var:H> \\ \{ <var:H> = <var:l> \land <var:u> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> ; <var:u> := <nat:2> + <var:u> * <var:H> ; <var:u> := <nat:3> + <var:u> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:H> = <var:l> }} <def:poly> {{ <var:u> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:u> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 