\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> ; <var:g> := <nat:3> + <var:g> * <var:f> ; <var:g> := <nat:4> + <var:g> * <var:f> ; <var:g> := <nat:2> + <var:g> * <var:f> ; <var:g> := <var:g> * <var:f> ; <var:g> := <var:g> * <var:f> ; <var:g> := <nat:3> + <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Allowing ( taking $ <var:I> \in \mathbb{Z}^+ $ ) that $ <var:f> = <var:I> $ prior to the evaluation of our program it must be that we see $ <var:g> = <nat:3> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be done using usual Hoare reasoning . Moving on , \begin{eqnarray} \{ <var:f> = <var:I> \} \, <var:g> := <nat:3> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \} \, <var:g> := <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> + \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> + \} \, <var:g> := <nat:1> + <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:2> + <nat:1> \} \, <var:g> := <nat:1> + <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> + <nat:1> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> + <nat:1> \} \, <var:g> := <nat:3> + <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:3> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:3> \} \, <var:g> := <nat:4> + <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:4> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:4> \} \, <var:g> := <nat:2> + <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} \, <var:g> := <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + \} \end{eqnarray} This is guaranteed with the environment update inference rule obtained from Hoare logic . Observing the next bits of codein the series of instructions , \begin{eqnarray} \{ <var:f> = <var:I> \} \, <var:g> := <nat:3> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \} \\ \{ <var:f> = <var:I> \land <var:g> = <nat:3> \} \, <var:g> := <var:g> * <var:f> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \cdot <var:I> + \} \end{eqnarray} Taking a look at the proceeding piece of code found in our segment of code , we have \begin{eqnarray} \{ <var:f> = <var:I> \} \, <var:g> := <nat:3> \, \{ <var:f> = <var:I> \land <var:g> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> ; <var:g> := <nat:3> + <var:g> * <var:f> ; <var:g> := <nat:4> + <var:g> * <var:f> ; <var:g> := <nat:2> + <var:g> * <var:f> ; <var:g> := <var:g> * <var:f> ; <var:g> := <var:g> * <var:f> ; <var:g> := <nat:3> + <var:g> * <var:f> ; <var:g> := <nat:1> + <var:g> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:f> = <var:I> }} <def:poly> {{ <var:g> = <nat:3> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:g> = <nat:3> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 