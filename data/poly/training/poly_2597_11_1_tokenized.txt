\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:K1> := <var:L> ; <var:K2> := <var:K1> * <var:L> ; <var:K3> := <var:K2> * <var:L> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:6> ; <var:Q> := <var:K3> <var:Q> := <var:Q> + <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:L> = <var:B> $ prior to evaluating our set of instructions , it follows that $ <var:Q> = <nat:6> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:6> $ when code segment finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:B> \} \\ <var:K1> := <var:L> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <var:B> \} \\ <var:K2> := <var:K1> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:L> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:K1> := <var:K1> * <nat:2> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <nat:2> \times <var:B> \land <var:K2> = <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:K2> := <var:K2> * <nat:8> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <nat:2> \times <var:B> \land <var:K2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:K3> = <var:B> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:K3> := <var:K3> * <nat:6> ; \\ \{ <var:L> = <var:B> \land <var:K1> = <nat:2> \times <var:B> \land <var:K2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:K3> = <nat:6> \times <var:B> ^ <nat:3> \land <var:K0> = <nat:6> \} \\ <var:Q> := <var:K3> \\ \{ <var:L> = <var:B> \land <var:K1> = <nat:2> \times <var:B> \land <var:K2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:K0> = <nat:6> \land <var:Q> = <nat:6> \times <var:B> ^ <nat:3> \} \end{eqnarray} Allowing executing the segment of code returns : \begin{eqnarray} <var:Q> := <var:Q> + <var:K2> \\ \{ <var:L> = <var:B> \land <var:K1> = <nat:2> \times <var:B> \land <var:K0> = <nat:6> \land <var:Q> = <nat:6> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:K1> \\ \{ <var:L> = <var:B> \land <var:K0> = <nat:6> \land <var:Q> = <nat:6> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> \} \\ <var:Q> := <var:Q> + <var:K0> \\ \{ <var:L> = <var:B> \land <var:Q> = <nat:6> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:6> \} \end{eqnarray} Using Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:L> ; <var:K2> := <var:K1> * <var:L> ; <var:K3> := <var:K2> * <var:L> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:K2> := <var:K2> * <nat:8> ; <var:K3> := <var:K3> * <nat:6> ; <var:Q> := <var:K3> <var:Q> := <var:Q> + <var:K2> <var:Q> := <var:Q> + <var:K1> <var:Q> := <var:Q> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:L> = <var:B> }} <def:poly> {{ <var:Q> = <nat:6> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <nat:2> * <var:B> /\ <var:K2> = <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <nat:2> * <var:B> /\ <var:K2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:K3> = <var:B> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <nat:2> * <var:B> /\ <var:K2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:6> * <var:B> ^ <nat:3> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <nat:2> * <var:B> /\ <var:K2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:K0> = <nat:6> /\ <var:Q> = <nat:6> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K1> = <nat:2> * <var:B> /\ <var:K0> = <nat:6> /\ <var:Q> = <nat:6> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:K0> = <nat:6> /\ <var:Q> = <nat:6> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:Q> = <nat:6> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 