\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:d> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:d> ; <var:q2> := <var:q2> * <var:d> ; <var:Y> := <var:q2> ; <var:Y> := <var:Y> + <var:q1> ; <var:Y> := <var:Y> + <var:q0> \end{verbatim} Allowing $ <var:d> = <var:i> $ ( letting integers $ <var:i> $ ) before the execution of our code , then we see $ <var:Y> = <nat:5> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is evident by standard Hoare reasoning . Taking a look at the upcoming line of code contained in the code , we have the variable update code giving $ <nat:8> $ to $ <var:q0>$ . This command takes the condition $ \{ <var:d> = <var:i> \} $ toward the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \} $ . This is shown to be logically sound with the assignment scheme given in Hoare techniques . Considering the proceeding line of code in our series of commands , we see the variable binding command \verb | <var:q1> := <nat:4> ; | . This command redefines the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \} $ as the postcondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \} $ . This is given through the assignment law in Hoare reasoning . Immediately after , we have the binding command \verb | <var:q1> := <var:q1> * <var:d> ; | . This statement moves the precondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \} $ as the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \} $ . Looking at the upcoming command seen in the series of commands , we have the assignment statement \verb | <var:q2> := <nat:5> ; | . This transfers the precondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \} $ to the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \} $ . Looking at the upcoming command seen in the code segment , the variable binding code giving $ <var:q2> * <var:d> $ to $ <var:q2>$ . This statement advances the precondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \} $ into the postcondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \times <var:i> \} $ . This is deduced using the assignment scheme defined in typical Hoare reasoning . Stepping through , we see the statement \verb | <var:q2> := <var:q2> * <var:d> ; | . This takes the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \times <var:i> \} $ into $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \times <var:i> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule in standard Hoare reasoning . Advancing to the following step in our series of commands , we see the assignment line defining $ <var:q2> $ toward $ <var:Y>$ . This line takes $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:q2> = <nat:5> \times <var:i> ^ <nat:2> \} $ as the postcondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:Y> = <nat:5> \times <var:i> ^ <nat:2> \} $ . Following , the variable update code letting $ <var:Y> + <var:q1> $ to $ <var:Y>$ . This forwards the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:i> \land <var:Y> = <nat:5> \times <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:Y> = <nat:5> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> \} $ . Moving forward , we have the variable assignmet statement giving $ <var:Y> + <var:q0$ to $ <var:Y>$ . This code advances the precondition $ \{ <var:d> = <var:i> \land <var:q0> = <nat:8> \land <var:Y> = <nat:5> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> \} $ toward the condition $ \{ <var:d> = <var:i> \land <var:Y> = <nat:5> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:8> \} $ . This is shown to be logically sound by the assignment rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:d> = <var:i> }} <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:d> ; <var:q2> := <nat:5> ; <var:q2> := <var:q2> * <var:d> ; <var:q2> := <var:q2> * <var:d> ; <var:Y> := <var:q2> ; <var:Y> := <var:Y> + <var:q1> ; <var:Y> := <var:Y> + <var:q0> {{ <var:Y> = <nat:5> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:i> /\ <var:q2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:i> /\ <var:q2> = <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:i> /\ <var:q2> = <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:i> /\ <var:Y> = <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:q0> = <nat:8> /\ <var:Y> = <nat:5> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:i> /\ <var:Y> = <nat:5> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 