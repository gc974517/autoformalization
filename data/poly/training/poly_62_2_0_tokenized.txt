\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:9> ; <var:g> := <var:L0> \end{verbatim} Assume that $ <var:r> = <var:O> $ prior to interpreting our series of instructions , it holds that we see $ <var:g> = <nat:9> $ when set of instructions has terminated . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:r> = <var:O> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:r> = <var:O> \land <var:L0> = <nat:9> \} \\ <var:g> := <var:L0> \\ \{ <var:r> = <var:O> \land <var:g> = <nat:9> \} \end{eqnarray} Thus , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:r> = <var:O> }} <var:L0> := <nat:9> ; <var:g> := <var:L0> {{ <var:g> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:O> /\ <var:g> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 