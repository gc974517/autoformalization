\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:L> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:9> ; <var:S> := <var:i1> <var:S> := <var:S> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume , letting natural coefficients $ <var:F> $ , that we have $ <var:L> = <var:F> $ before the execution of this list of commands , then $ <var:S> = <nat:9> \times <var:F> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is demonstrated by typical Hoare reasoning . Immediately following , we see \begin{eqnarray} \{ <var:L> = <var:F> \} \, <var:i1> := <var:L> \, \{ <var:L> = <var:F> \land <var:i1> = <var:F> \} \\ \{ <var:L> = <var:F> \land <var:i1> = <var:F> \} \, <var:i0> := <nat:1> \, \{ <var:L> = <var:F> \land <var:i1> = <var:F> \land <var:i0> = <nat:1> \} \end{eqnarray} This is guaranteed with the law obtained from typical Hoare techniques . Stepping forward , \begin{eqnarray} \{ <var:L> = <var:F> \} \, <var:i1> := <var:L> \, \{ <var:L> = <var:F> \land <var:i1> = <var:F> \} \\ \{ <var:L> = <var:F> \land <var:i1> = <var:F> \} \, <var:i0> := <nat:1> \, \{ <var:L> = <var:F> \land <var:i1> = <var:F> \land <var:i0> = <nat:1> \} \\ \{ <var:L> = <var:F> \land <var:i1> = <var:F> \land <var:i0> = <nat:1> \} \, <var:i1> := <var:i1> * <nat:9> \, \{ <var:L> = <var:F> \land <var:i1> = <nat:9> \times <var:F> \land <var:i0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:L> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:9> ; <var:S> := <var:i1> <var:S> := <var:S> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:L> = <var:F> }} <def:poly> {{ <var:S> = <nat:9> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:i1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:i1> = <var:F> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:i1> = <nat:9> * <var:F> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:i0> = <nat:1> /\ <var:S> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:S> = <nat:9> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 