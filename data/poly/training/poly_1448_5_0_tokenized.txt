\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:3> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:C> ; <var:k> := <var:j1> ; <var:k> := <var:k> + <var:j0> \end{verbatim} Assume $ <var:C> = <var:S> $ prior to running our program it follows that we have $ <var:k> = <nat:1> \times <var:S> + <nat:3> $ when series of instructions has finished . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:C> = <var:S> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:C> = <var:S> \land <var:j0> = <nat:3> \} \\ <var:j1> := <nat:1> ; \\ \{ <var:C> = <var:S> \land <var:j0> = <nat:3> \land <var:j1> = <nat:1> \} \\ <var:j1> := <var:j1> * <var:C> ; \\ \{ <var:C> = <var:S> \land <var:j0> = <nat:3> \land <var:j1> = <nat:1> * <var:S> \} \\ <var:k> := <var:j1> ; \\ \{ <var:C> = <var:S> \land <var:j0> = <nat:3> \land <var:k> = <nat:1> * <var:S> \} \\ <var:k> := <var:k> + <var:j0> \\ \{ <var:C> = <var:S> \land <var:k> = <nat:1> * <var:S> + <nat:3> \} \end{eqnarray} Given the above , our segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:C> = <var:S> }} <var:j0> := <nat:3> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:C> ; <var:k> := <var:j1> ; <var:k> := <var:k> + <var:j0> {{ <var:k> = <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:j0> = <nat:3> /\ <var:k> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:S> /\ <var:k> = <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 