\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:o> ; <var:S> := <var:G1> ; <var:S> := <var:S> + <var:G0> \end{verbatim} Assuming that $ <var:o> = <var:B> $ before evaluating the set of instructions , then we have $ <var:S> = <nat:1> * <var:B> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:o> = <var:B> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:o> = <var:B> \land <var:G0> = <nat:3> \} \\ <var:G1> := <nat:1> ; \\ \{ <var:o> = <var:B> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} \\ <var:G1> := <var:G1> * <var:o> ; \\ \{ <var:o> = <var:B> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \cdot <var:B> \} \\ <var:S> := <var:G1> ; \\ \{ <var:o> = <var:B> \land <var:G0> = <nat:3> \land <var:S> = <nat:1> \cdot <var:B> \} \\ <var:S> := <var:S> + <var:G0> \\ \{ <var:o> = <var:B> \land <var:S> = <nat:1> \cdot <var:B> + <nat:3> \} \end{eqnarray} Therefore , this series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:o> = <var:B> }} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:o> ; <var:S> := <var:G1> ; <var:S> := <var:S> + <var:G0> {{ <var:S> = <nat:1> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:G0> = <nat:3> /\ <var:S> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:S> = <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 