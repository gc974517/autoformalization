\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:n> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Assuming --- assuming some positive integer coefficients $ <var:K> $ --- that $ <var:b> = <var:K> $ ahead of the evaluation of our segment of code , then we have $ <var:n> = <nat:2> $ when code segment executes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is given using standard Hoare techniques . Keeping momentum , we see the environment update statement letting $ <nat:2> $ as $ <var:e0>$ . This statement forwards the condition $ \{ <var:b> = <var:K> \} $ into the condition $ \{ <var:b> = <var:K> \land <var:e0> = <nat:2> \} $ . This is known to be sound with the assignment rule obtained from standard Hoare techniques . Going to the next step , we have the environment update line assigning $ <var:e0$ to $ <var:n>$ . This forwards the condition $ \{ <var:b> = <var:K> \land <var:e0> = <nat:2> \} $ toward $ \{ <var:b> = <var:K> \land <var:n> = <nat:2> \} $ . This is ensured with the assignment law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:n> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:b> = <var:K> }} <def:poly> {{ <var:n> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:K> /\ <var:n> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 