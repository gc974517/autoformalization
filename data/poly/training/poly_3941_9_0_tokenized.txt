\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:K> ; <var:P2> := <nat:2> ; <var:P2> := <var:P2> * <var:K> ; <var:P2> := <var:P2> * <var:K> ; <var:B> := <var:P2> ; <var:B> := <var:B> + <var:P1> ; <var:B> := <var:B> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Allow ( for some positive integer coefficients $ <var:A> $ ) $ <var:K> = <var:A> $ prior to running this series of commands , then $ <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:4> $ after series of instructions has terminated . \end{theorem} \begin{proof} The argument for the list of instructions is accomplished with typical Hoare logic . Advancing , the variable binding code letting $ <nat:4> $ toward $ <var:P0>$ . This statement transfers the condition $ \{ <var:K> = <var:A> \} $ to the postcondition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \} $ . This is guaranteed by the assignment inference rule in typical Hoare reasoning . Honing in on the next line contained in our set of commands , we see the variable binding command \verb | <var:P1> := <nat:1> ; | . This forwards $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \} $ to the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \} $ . This is sound by the assignment rule found in Hoare logic . Going forward , we see the code \verb | <var:P1> := <var:P1> * <var:K> ; | . This moves the precondition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \} $ as the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \} $ . Immediately after , we have the variable update line \verb | <var:P2> := <nat:2> ; | . This command advances $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \} $ toward the postcondition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \} $ . Taking a look at the upcoming line of code found in the set of instructions , we have the assignment statement \verb | <var:P2> := <var:P2> * <var:K> ; | . This transfers the precondition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \} $ into the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \cdot <var:A> \} $ . Moving forward to the next step , the variable binding line assigning $ <var:P2> * <var:K> $ into $ <var:P2>$ . This takes $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \cdot <var:A> \} $ to the postcondition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ . Advancing to the subsequent line of code found in the series of commands , the variable binding line binding $ <var:P2> $ toward $ <var:B>$ . This forwards $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:P2> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ toward $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ . Moving forward to the following step found in our list of commands , we see the environment update line letting $ <var:B> + <var:P1> $ as $ <var:B>$ . This statement redefines the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:P1> = <nat:1> \cdot <var:A> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ to the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ . Looking at the proceeding piece of code contained in the code , we see the assignment code \verb | <var:B> := <var:B> + <var:P0> | . This code forwards the condition $ \{ <var:K> = <var:A> \land <var:P0> = <nat:4> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> \} $ as $ \{ <var:K> = <var:A> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:1> \cdot <var:A> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:4> ; <var:P1> := <nat:1> ; <var:P1> := <var:P1> * <var:K> ; <var:P2> := <nat:2> ; <var:P2> := <var:P2> * <var:K> ; <var:P2> := <var:P2> * <var:K> ; <var:B> := <var:P2> ; <var:B> := <var:B> + <var:P1> ; <var:B> := <var:B> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:K> = <var:A> }} <def:poly> {{ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> * <var:A> /\ <var:P2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> * <var:A> /\ <var:P2> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> * <var:A> /\ <var:P2> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:1> * <var:A> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:P0> = <nat:4> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:A> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 