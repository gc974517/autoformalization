\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:E1> := <var:I> ; <var:E2> := <var:E1> * <var:I> ; <var:E3> := <var:E2> * <var:I> ; <var:E0> := <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:Q> := <var:E3> <var:Q> := <var:Q> + <var:E2> <var:Q> := <var:Q> + <var:E0> \end{verbatim} Given taking positive coefficients $ <var:o> $ it to hold that $ <var:I> = <var:o> $ ahead of evaluating our code segment it must be that $ <var:Q> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:3> $ when series of commands executes . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be given by standard Hoare techniques . Paying attention to the next bits of codein our set of instructions , \begin{verbatim} { <var:I> = <var:o> } <var:E1> := <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> } { <var:I> = <var:o> \land <var:E1> = <var:o> } <var:E2> := <var:E1> * <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> } \end{verbatim} Paying attention to the next bits of codein the series of instructions , we have \begin{verbatim} { <var:I> = <var:o> } <var:E1> := <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> } { <var:I> = <var:o> \land <var:E1> = <var:o> } <var:E2> := <var:E1> * <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> } { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> } <var:E3> := <var:E2> * <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> } { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> } <var:E0> := <nat:3> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> \land <var:E0> = <nat:3> } \end{verbatim} Moving forward to the proceeding steps seen in the set of commands , we see \begin{verbatim} { <var:I> = <var:o> } <var:E1> := <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> } { <var:I> = <var:o> \land <var:E1> = <var:o> } <var:E2> := <var:E1> * <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> } { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> } <var:E3> := <var:E2> * <var:I> { <var:I> = <var:o> \land <var:E1> = <var:o> \land <var:E2> = <var:o> ^ <nat:2> \land <var:E3> = <var:o> ^ <nat:3> } \end{verbatim} This is rigorously given using the environment update scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <var:E1> := <var:I> ; <var:E2> := <var:E1> * <var:I> ; <var:E3> := <var:E2> * <var:I> ; <var:E0> := <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:Q> := <var:E3> <var:Q> := <var:Q> + <var:E2> <var:Q> := <var:Q> + <var:E0> {{ <var:Q> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:E3> = <var:o> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:E0> = <nat:3> /\ <var:Q> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E1> = <var:o> /\ <var:E0> = <nat:3> /\ <var:Q> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:Q> = <nat:2> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 