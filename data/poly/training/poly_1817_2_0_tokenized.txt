\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:1> ; <var:O> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:k> = <var:Q> $ before interpreting this series of commands it follows that we have $ <var:O> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of instructions is accomplished through standard Hoare logic . Honing in on the following commands found in our code , \begin{verbatim} { <var:k> = <var:Q> } <var:x0> := <nat:1> { <var:k> = <var:Q> \land <var:x0> = <nat:1> } { <var:k> = <var:Q> \land <var:x0> = <nat:1> } <var:O> := <var:x0{ <var:k> = <var:Q> \land <var:O> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:O> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:k> = <var:Q> }} <def:poly> {{ <var:O> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Q> /\ <var:O> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 