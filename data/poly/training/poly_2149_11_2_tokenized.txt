\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Assume --- given all positive integers $ <var:M> $ --- $ <var:U> = <var:M> $ prior to executing our list of commands it holds that $ <var:e> = <nat:2> \times <var:M> ^ <nat:10> + <nat:2> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:1> $ when program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is evident by this decorated list of commands . \begin{eqnarray} \{ <var:U> = <var:M> \} \\ <var:e> := <nat:2> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \} \\ <var:e> := <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> + \} \\ <var:e> := <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:2> + \} \\ <var:e> := <nat:2> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:3> + <nat:2> \} \\ <var:e> := <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> + \} \\ <var:e> := <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:2> + \} \\ <var:e> := <nat:2> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:3> + <nat:2> \} \\ <var:e> := <nat:3> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> + <nat:3> \} \\ <var:e> := <nat:2> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:8> + <nat:2> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:2> \} \\ <var:e> := <nat:1> + <var:e> * <var:U> ; \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:9> + <nat:2> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:1> \} \\ <var:e> := <nat:1> + <var:e> * <var:U> \\ \{ <var:U> = <var:M> \land <var:e> = <nat:2> \times <var:M> ^ <nat:10> + <nat:2> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:2> ; <var:e> := <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:3> + <var:e> * <var:U> ; <var:e> := <nat:2> + <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> ; <var:e> := <nat:1> + <var:e> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:U> = <var:M> }} <def:poly> {{ <var:e> = <nat:2> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:M> /\ <var:e> = <nat:2> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 