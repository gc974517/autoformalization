\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:M> ; <var:O2> := <var:O1> * <var:M> ; <var:O3> := <var:O2> * <var:M> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:7> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:1> ; <var:I> := <var:O3> <var:I> := <var:I> + <var:O2> <var:I> := <var:I> + <var:O1> <var:I> := <var:I> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Assume $ <var:M> = <var:p> $ --- assuming some positive integers $ <var:p> $ --- before interpreting this program , then we have $ <var:I> = <nat:1> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:8> $ after program finishes . \end{theorem} \begin{proof} The method of proof for the list of commands can be accomplished through Hoare logic . Moving forward to the next statement seen in our code , we have the variable assignmet command \verb | <var:O1> := <var:M> ; | . This code moves the precondition $ \{ <var:M> = <var:p> \} $ toward the condition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \} $ . This is ensured using the assignment scheme from usual Hoare techniques . Observing the proceeding piece of code seen in our list of commands , the binding statement binding $ <var:O1> * <var:M> $ as $ <var:O2>$ . This takes the condition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \} $ to $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \} $ . Moving forward to the upcoming step seen in our code , we have the assignment statement \verb | <var:O3> := <var:O2> * <var:M> ; | . This line advances the condition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \} $ as the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \} $ . This is known to be sound through the assignment law from Hoare reasoning . Immediately following , we see the variable binding line \verb | <var:O0> := <nat:8> ; | . This statement forwards the precondition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ . This is sound with the assignment rule defined in Hoare reasoning . Looking at the subsequent piece of code seen in our set of instructions , we see the binding code defining $ <var:O1> * <nat:7> $ to $ <var:O1>$ . This statement advances $ \{ <var:M> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ toward $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ . This is ensured with the assignment inference rule from usual Hoare techniques . Shifting focus toward the upcoming piece of code found in our code segment , we have the statement \verb | <var:O2> := <var:O2> * <nat:6> ; | . This line takes the condition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ as the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ . This is rigorously given by the assignment scheme from Hoare techniques . Observing the following command found in our program , we have the binding statement defining $ <var:O3> * <nat:1> $ as $ <var:O3>$ . This command advances $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O3> = <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ into the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O3> = <nat:1> \times <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ . This is ensured through the assignment inference rule given by Hoare reasoning . Advancing to the next step , we see the code letting $ <var:O3$ as $ <var:I>$ . This moves $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O3> = <nat:1> \times <var:p> ^ <nat:3> \land <var:O0> = <nat:8> \} $ to the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> \} $ . Advancing to the next step , the binding command \verb | <var:I> := <var:I> + <var:O2> | . This code moves the condition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O2> = <nat:6> \times <var:p> ^ <nat:2> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> \} $ . This is shown with the assignment scheme of standard Hoare logic . Moving forward to the next step , we see the variable update code \verb | <var:I> := <var:I> + <var:O1> | . This advances the precondition $ \{ <var:M> = <var:p> \land <var:O1> = <nat:7> \times <var:p> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> \} $ as the condition $ \{ <var:M> = <var:p> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> \} $ . After , we have the command \verb | <var:I> := <var:I> + <var:O0> | . This advances $ \{ <var:M> = <var:p> \land <var:O0> = <nat:8> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> \} $ toward the condition $ \{ <var:M> = <var:p> \land <var:I> = <nat:1> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> + <nat:7> \times <var:p> + <nat:8> \} $ . This is sound using the assignment law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:M> ; <var:O2> := <var:O1> * <var:M> ; <var:O3> := <var:O2> * <var:M> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:7> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:1> ; <var:I> := <var:O3> <var:I> := <var:I> + <var:O2> <var:I> := <var:I> + <var:O1> <var:I> := <var:I> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <def:poly> {{ <var:I> = <nat:1> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <nat:7> * <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <nat:7> * <var:p> /\ <var:O2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:O3> = <var:p> ^ <nat:3> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <nat:7> * <var:p> /\ <var:O2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:O3> = <nat:1> * <var:p> ^ <nat:3> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <nat:7> * <var:p> /\ <var:O2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:O0> = <nat:8> /\ <var:I> = <nat:1> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O1> = <nat:7> * <var:p> /\ <var:O0> = <nat:8> /\ <var:I> = <nat:1> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:O0> = <nat:8> /\ <var:I> = <nat:1> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:I> = <nat:1> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 