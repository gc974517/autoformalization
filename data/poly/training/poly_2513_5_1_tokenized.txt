\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:E> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:K> := <var:Q1> <var:K> := <var:K> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given any natural numbers $ <var:B> $ ) it to be that $ <var:E> = <var:B> $ prior to evaluating this program , it holds that we have $ <var:K> = <nat:7> * <var:B> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is done by typical Hoare reasoning . Paying attention to the proceeding lines seen in our program , we have \begin{verbatim} { <var:E> = <var:B> } <var:Q1> := <var:E> { <var:E> = <var:B> \land <var:Q1> = <var:B> } { <var:E> = <var:B> \land <var:Q1> = <var:B> } <var:Q0> := <nat:5> { <var:E> = <var:B> \land <var:Q1> = <var:B> \land <var:Q0> = <nat:5> } \end{verbatim} Immediately following , \begin{verbatim} { <var:E> = <var:B> } <var:Q1> := <var:E> { <var:E> = <var:B> \land <var:Q1> = <var:B> } { <var:E> = <var:B> \land <var:Q1> = <var:B> } <var:Q0> := <nat:5> { <var:E> = <var:B> \land <var:Q1> = <var:B> \land <var:Q0> = <nat:5> } { <var:E> = <var:B> \land <var:Q1> = <var:B> \land <var:Q0> = <nat:5> } <var:Q1> := <var:Q1> * <nat:7> { <var:E> = <var:B> \land <var:Q1> = <nat:7> * <var:B> \land <var:Q0> = <nat:5> } \end{verbatim} This is sound through the environment update inference rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:E> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:K> := <var:Q1> <var:K> := <var:K> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:E> = <var:B> }} <def:poly> {{ <var:K> = <nat:7> * <var:B> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:Q1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:Q1> = <nat:7> * <var:B> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:Q0> = <nat:5> /\ <var:K> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:B> /\ <var:K> = <nat:7> * <var:B> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 