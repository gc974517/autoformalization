\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:R> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:U> := <var:o2> ; <var:U> := <var:U> + <var:o1> ; <var:U> := <var:U> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Assuming that $ <var:R> = <var:c> $ prior to the evaluation of the series of commands , it must be that we see $ <var:U> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:R> = <var:c> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:3> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:R> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \cdot <var:c> \} \\ <var:o2> := <nat:5> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \cdot <var:c> \land <var:o2> = <nat:5> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \cdot <var:c> \land <var:o2> = <nat:5> \cdot <var:c> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \cdot <var:c> \land <var:o2> = <nat:5> \cdot <var:c> ^ <nat:2> \} \\ <var:U> := <var:o2> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \cdot <var:c> \land <var:U> = <nat:5> \cdot <var:c> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:o1> ; \\ \{ <var:R> = <var:c> \land <var:o0> = <nat:3> \land <var:U> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> \} \\ <var:U> := <var:U> + <var:o0> \\ \{ <var:R> = <var:c> \land <var:U> = <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:3> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:R> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:U> := <var:o2> ; <var:U> := <var:U> + <var:o1> ; <var:U> := <var:U> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:R> = <var:c> }} <def:poly> {{ <var:U> = <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:c> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:c> /\ <var:o2> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:c> /\ <var:o2> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:c> /\ <var:U> = <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:o0> = <nat:3> /\ <var:U> = <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:c> /\ <var:U> = <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 