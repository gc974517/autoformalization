\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:b1> := <var:d> ; <var:b2> := <var:b1> * <var:d> ; <var:b3> := <var:b2> * <var:d> ; <var:b0> := <nat:2> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:4> ; <var:G> := <var:b3> <var:G> := <var:G> + <var:b2> <var:G> := <var:G> + <var:b0> \end{verbatim} Allowing that $ <var:d> = <var:T> $ ahead of evaluating this list of commands , it must be that $ <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:T> \} \\ <var:b1> := <var:d> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \} \\ <var:b2> := <var:b1> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <nat:1> * <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} \\ <var:b3> := <var:b3> * <nat:4> ; \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <nat:1> * <var:T> ^ <nat:2> \land <var:b3> = <nat:4> * <var:T> ^ <nat:3> \land <var:b0> = <nat:2> \} \\ <var:G> := <var:b3> \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <nat:1> * <var:T> ^ <nat:2> \land <var:b0> = <nat:2> \land <var:G> = <nat:4> * <var:T> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:b2> \\ \{ <var:d> = <var:T> \land <var:b1> = <var:T> \land <var:b0> = <nat:2> \land <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:b0> \\ \{ <var:d> = <var:T> \land <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:d> = <var:T> }} <var:b1> := <var:d> ; <var:b2> := <var:b1> * <var:d> ; <var:b3> := <var:b2> * <var:d> ; <var:b0> := <nat:2> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:4> ; <var:G> := <var:b3> <var:G> := <var:G> + <var:b2> <var:G> := <var:G> + <var:b0> {{ <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:T> ^ <nat:3> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:b0> = <nat:2> /\ <var:G> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:b1> = <var:T> /\ <var:b0> = <nat:2> /\ <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:G> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 