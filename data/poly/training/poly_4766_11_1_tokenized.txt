\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:L1> := <var:m> ; <var:L2> := <var:L1> * <var:m> ; <var:L3> := <var:L2> * <var:m> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:2> ; <var:h> := <var:L3> <var:h> := <var:h> + <var:L2> <var:h> := <var:h> + <var:L1> <var:h> := <var:h> + <var:L0> \end{verbatim} Assuming ( assuming some natural coefficients $ <var:N> $ ) that we have $ <var:m> = <var:N> $ prior to the execution of the program then we see $ <var:h> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:5> \cdot <var:N> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this program can be shown by standard Hoare techniques . Moving forward to the following steps in our code , \begin{eqnarray} \{ <var:m> = <var:N> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \} \, <var:L0> := <nat:1> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \land <var:L0> = <nat:1> \} \end{eqnarray} This is shown to be logically sound by the variable update inference rule in typical Hoare reasoning . Moving on to the next step , \begin{eqnarray} \{ <var:m> = <var:N> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \} \end{eqnarray} This is ensured with the law found in standard Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:m> = <var:N> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \, <var:L2> := <var:L1> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \\ \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \} \end{eqnarray} Focusing on the subsequent step found in our series of commands , we see \begin{eqnarray} \{ <var:m> = <var:N> \} \, <var:L1> := <var:m> \, \{ <var:m> = <var:N> \land <var:L1> = <var:N> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:m> = <var:N> }} <var:L1> := <var:m> ; <var:L2> := <var:L1> * <var:m> ; <var:L3> := <var:L2> * <var:m> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:2> ; <var:h> := <var:L3> <var:h> := <var:h> + <var:L2> <var:h> := <var:h> + <var:L1> <var:h> := <var:h> + <var:L0> {{ <var:h> = <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <nat:5> * <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <nat:5> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <nat:5> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <nat:5> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:h> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L1> = <nat:5> * <var:N> /\ <var:L0> = <nat:1> /\ <var:h> = <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:L0> = <nat:1> /\ <var:h> = <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:h> = <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 