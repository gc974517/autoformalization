\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:w> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:3> ; <var:J> := <var:u1> <var:J> := <var:J> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:w> = <var:F> $ ahead of the evaluation of this list of commands , then $ <var:J> = <nat:3> \cdot <var:F> + <nat:3> $ when series of commands finishes . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:w> = <var:F> \} \\ <var:u1> := <var:w> ; \\ \{ <var:w> = <var:F> \land <var:u1> = <var:F> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:w> = <var:F> \land <var:u1> = <var:F> \land <var:u0> = <nat:3> \} \\ <var:u1> := <var:u1> * <nat:3> ; \\ \{ <var:w> = <var:F> \land <var:u1> = <nat:3> \times <var:F> \land <var:u0> = <nat:3> \} \\ <var:J> := <var:u1> \\ \{ <var:w> = <var:F> \land <var:u0> = <nat:3> \land <var:J> = <nat:3> \times <var:F> \} \\ <var:J> := <var:J> + <var:u0> \\ \{ <var:w> = <var:F> \land <var:J> = <nat:3> \times <var:F> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u1> := <var:w> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:3> ; <var:J> := <var:u1> <var:J> := <var:J> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:w> = <var:F> }} <def:poly> {{ <var:J> = <nat:3> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:u1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:u1> = <var:F> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:u1> = <nat:3> * <var:F> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:u0> = <nat:3> /\ <var:J> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:J> = <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 