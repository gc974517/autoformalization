\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:5> ; <var:F> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:H> = <var:A> $ prior to the execution of our code it must be that we see $ <var:F> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands is demonstrated through Hoare logic . Honing in on the upcoming piece of code in our segment of code , we see the assignment line binding $ <nat:5> $ toward $ <var:w0>$ . This advances the precondition $ \{ <var:H> = <var:A> \} $ to the condition $ \{ <var:H> = <var:A> \land <var:w0> = <nat:5> \} $ . This is known to be sound with the assignment law defined in Hoare reasoning . Immediately after , the variable binding command \verb | <var:F> := <var:w0> | . This line redefines $ \{ <var:H> = <var:A> \land <var:w0> = <nat:5> \} $ to $ \{ <var:H> = <var:A> \land <var:F> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:5> ; <var:F> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:H> = <var:A> }} <def:poly> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 