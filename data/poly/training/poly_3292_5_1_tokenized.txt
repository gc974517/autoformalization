\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:L> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:Q> := <var:J1> <var:Q> := <var:Q> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assuming --- assuming some whole numbers $ <var:Y> $ --- that $ <var:L> = <var:Y> $ prior to the evaluation of our program , it must be that we have $ <var:Q> = <nat:5> \times <var:Y> + <nat:4> $ when series of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:Y> \} \\ <var:J1> := <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:J1> = <var:Y> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:L> = <var:Y> \land <var:J1> = <var:Y> \land <var:J0> = <nat:4> \} \\ <var:J1> := <var:J1> * <nat:5> ; \\ \{ <var:L> = <var:Y> \land <var:J1> = <nat:5> \cdot <var:Y> \land <var:J0> = <nat:4> \} \\ <var:Q> := <var:J1> \\ \{ <var:L> = <var:Y> \land <var:J0> = <nat:4> \land <var:Q> = <nat:5> \cdot <var:Y> \} \\ <var:Q> := <var:Q> + <var:J0> \\ \{ <var:L> = <var:Y> \land <var:Q> = <nat:5> \cdot <var:Y> + <nat:4> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:L> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:Q> := <var:J1> <var:Q> := <var:Q> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:L> = <var:Y> }} <def:poly> {{ <var:Q> = <nat:5> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:J1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:J1> = <nat:5> * <var:Y> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:J0> = <nat:4> /\ <var:Q> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:Q> = <nat:5> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 