\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:D> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:D> ; <var:C2> := <var:C2> * <var:D> ; <var:P> := <var:C2> ; <var:P> := <var:P> + <var:C1> ; <var:P> := <var:P> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allowing that $ <var:D> = <var:f> $ prior to the execution of this list of instructions , it holds that $ <var:P> = <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> $ when set of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is demonstrated through standard Hoare logic . Advancing to the next lines of codeseen in the program , we see \verb | { <var:D> = <var:f> } <var:C0> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> } | , \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> } <var:C1> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> } | , \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> } <var:C1> := <var:C1> * <var:D> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> } | and \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> } <var:C2> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> \land <var:C2> = <nat:2> } | . After , we see \verb | { <var:D> = <var:f> } <var:C0> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> } | , \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> } <var:C1> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> } | , \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> } <var:C1> := <var:C1> * <var:D> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> } | and \verb | { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> } <var:C2> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:f> \land <var:C2> = <nat:2> } | . This is given by the variable assignmet scheme given in standard Hoare logic . Advancing , \verb | { <var:D> = <var:f> } <var:C0> := <nat:2> { <var:D> = <var:f> \land <var:C0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:D> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:D> ; <var:C2> := <var:C2> * <var:D> ; <var:P> := <var:C2> ; <var:P> := <var:P> + <var:C1> ; <var:P> := <var:P> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:D> = <var:f> }} <def:poly> {{ <var:P> = <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:f> /\ <var:C2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:f> /\ <var:C2> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:f> /\ <var:C2> = <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:C0> = <nat:2> /\ <var:P> = <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 