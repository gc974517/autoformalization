\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:2> + <var:R> * <var:H> ; <var:R> := <nat:1> + <var:R> * <var:H> ; <var:R> := <nat:2> + <var:R> * <var:H> ; <var:R> := <nat:3> + <var:R> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Assume that $ <var:H> = <var:I> $ for all $ <var:I> \in \mathbb{N} $ prior to running the list of instructions , then $ <var:R> = <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our segment of code can be given with the below decorated program . \begin{eqnarray} \{ <var:H> = <var:I> \} \\ <var:R> := <nat:4> ; \\ \{ <var:H> = <var:I> \land <var:R> = <nat:4> \} \\ <var:R> := <nat:2> + <var:R> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> + <nat:2> \} \\ <var:R> := <nat:1> + <var:R> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> \} \\ <var:R> := <nat:2> + <var:R> * <var:H> ; \\ \{ <var:H> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:2> \} \\ <var:R> := <nat:3> + <var:R> * <var:H> \\ \{ <var:H> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:4> ; <var:R> := <nat:2> + <var:R> * <var:H> ; <var:R> := <nat:1> + <var:R> * <var:H> ; <var:R> := <nat:2> + <var:R> * <var:H> ; <var:R> := <nat:3> + <var:R> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:H> = <var:I> }} <def:poly> {{ <var:R> = <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:R> = <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 