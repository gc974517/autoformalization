\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <var:b> * <var:x> ; <var:b> := <nat:1> + <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <nat:1> + <var:b> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:x> = <var:w> $ before executing the code it holds that $ <var:b> = <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> $ when series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is demonstrated through standard Hoare reasoning . Taking another step toward the upcoming command seen in the program , we see the environment update statement \verb | <var:b> := <nat:3> ; | . This takes the condition $ \{ <var:x> = <var:w> \} $ as the postcondition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \} $ . This is ensured by the assignment inference rule found in Hoare logic . Stepping through , we see the variable update command letting $ <var:b> * <var:x> $ as $ <var:b>$ . This statement forwards the precondition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \} $ into the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> + \} $ . Going to the next step , we have the binding code \verb | <var:b> := <nat:4> + <var:b> * <var:x> ; | . This statement moves the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> + \} $ toward the postcondition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> \} $ . Stepping forward , we have the binding command \verb | <var:b> := <var:b> * <var:x> ; | . This transfers $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + \} $ . Advancing to the next step contained in the program , the environment update code \verb | <var:b> := <nat:1> + <var:b> * <var:x> ; | . This takes $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> + \} $ toward the postcondition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \} $ . This is rigorously given using the assignment scheme in typical Hoare reasoning . Going forward , we see the variable assignmet line \verb | <var:b> := <nat:4> + <var:b> * <var:x> ; | . This statement advances the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> + <nat:4> \} $ . This is shown to be logically sound by the assignment law from Hoare reasoning . Considering the proceeding step in our set of instructions , we see the variable update command \verb | <var:b> := <nat:1> + <var:b> * <var:x> | . This redefines the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> + <nat:4> \} $ to the condition $ \{ <var:x> = <var:w> \land <var:b> = <nat:3> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:3> ; <var:b> := <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <var:b> * <var:x> ; <var:b> := <nat:1> + <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <nat:1> + <var:b> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <def:poly> {{ <var:b> = <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:b> = <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 