\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:4> ; <var:Q> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allowing $ <var:G> = <var:q> $ before interpreting the list of commands , it holds that we have $ <var:Q> = <nat:4> $ when set of instructions has terminated . \end{theorem} \begin{proof} The course of logic for our series of instructions can be seen with standard Hoare logic . Moving forward to the upcoming bit of code contained in our code segment , we have the variable assignmet command \verb | <var:H0> := <nat:4> ; | . This forwards the condition $ \{ <var:G> = <var:q> \} $ as the condition $ \{ <var:G> = <var:q> \land <var:H0> = <nat:4> \} $ . Going to the next step , the environment update code \verb | <var:Q> := <var:H0> | . This statement moves the precondition $ \{ <var:G> = <var:q> \land <var:H0> = <nat:4> \} $ into the condition $ \{ <var:G> = <var:q> \land <var:Q> = <nat:4> \} $ . This is ensured by the assignment inference rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:4> ; <var:Q> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:G> = <var:q> }} <def:poly> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:q> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 