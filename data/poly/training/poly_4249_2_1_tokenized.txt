\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:9> ; <var:T> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allow that $ <var:j> = <var:i> $ ahead of evaluating the segment of code it must be that we see $ <var:T> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our program is accomplished with Hoare logic . Paying attention to the next line of code seen in our program , we have the environment update command assigning $ <nat:9> $ as $ <var:k0>$ . This statement moves the precondition $ \{ <var:j> = <var:i> \} $ as the postcondition $ \{ <var:j> = <var:i> \land <var:k0> = <nat:9> \} $ . Moving on , we see the binding code assigning $ <var:k0$ as $ <var:T>$ . This advances the precondition $ \{ <var:j> = <var:i> \land <var:k0> = <nat:9> \} $ to the postcondition $ \{ <var:j> = <var:i> \land <var:T> = <nat:9> \} $ . This is given using the assignment scheme of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:9> ; <var:T> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:j> = <var:i> }} <def:poly> {{ <var:T> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:i> /\ <var:T> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 