\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:D> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:X> := <var:Q1> <var:X> := <var:X> + <var:Q0> \end{verbatim} Allowing --- for $ <var:A> $ --- that $ <var:D> = <var:A> $ before executing this code , then we have $ <var:X> = <nat:3> \times <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be demonstrated by Hoare logic . Next , we have \begin{eqnarray} \{ <var:D> = <var:A> \} \, <var:Q1> := <var:D> \, \{ <var:D> = <var:A> \land <var:Q1> = <var:A> \} \\ \{ <var:D> = <var:A> \land <var:Q1> = <var:A> \} \, <var:Q0> := <nat:1> \, \{ <var:D> = <var:A> \land <var:Q1> = <var:A> \land <var:Q0> = <nat:1> \} \\ \{ <var:D> = <var:A> \land <var:Q1> = <var:A> \land <var:Q0> = <nat:1> \} \, <var:Q1> := <var:Q1> * <nat:3> \, \{ <var:D> = <var:A> \land <var:Q1> = <nat:3> \times <var:A> \land <var:Q0> = <nat:1> \} \\ \{ <var:D> = <var:A> \land <var:Q1> = <nat:3> \times <var:A> \land <var:Q0> = <nat:1> \} \, <var:X> := <var:Q1\, \{ <var:D> = <var:A> \land <var:Q0> = <nat:1> \land <var:X> = <nat:3> \times <var:A> \} \end{eqnarray} This is shown through the variable binding rule given in Hoare reasoning . Taking a look at the following line seen in our list of instructions , we see \begin{eqnarray} \{ <var:D> = <var:A> \} \, <var:Q1> := <var:D> \, \{ <var:D> = <var:A> \land <var:Q1> = <var:A> \} \end{eqnarray} This is shown to be logically sound with the assignment rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <var:Q1> := <var:D> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:X> := <var:Q1> <var:X> := <var:X> + <var:Q0> {{ <var:X> = <nat:3> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:Q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:Q1> = <nat:3> * <var:A> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:Q0> = <nat:1> /\ <var:X> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:X> = <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 