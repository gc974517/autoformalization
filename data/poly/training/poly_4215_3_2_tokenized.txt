\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:1> + <var:H> * <var:k> ; <var:H> := <nat:3> + <var:H> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:k> = <var:N> $ before evaluating our code segment it holds that we have $ <var:H> = <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:k> = <var:N> \} \\ <var:H> := <nat:3> ; \\ \{ <var:k> = <var:N> \land <var:H> = <nat:3> \} \\ <var:H> := <nat:1> + <var:H> * <var:k> ; \\ \{ <var:k> = <var:N> \land <var:H> = <nat:3> \times <var:N> + <nat:1> \} \\ <var:H> := <nat:3> + <var:H> * <var:k> \\ \{ <var:k> = <var:N> \land <var:H> = <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} \end{eqnarray} As a consequence , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:1> + <var:H> * <var:k> ; <var:H> := <nat:3> + <var:H> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:k> = <var:N> }} <def:poly> {{ <var:H> = <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:H> = <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:H> = <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 