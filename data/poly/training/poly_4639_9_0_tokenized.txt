\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:1> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:b> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:b> ; <var:O2> := <var:O2> * <var:b> ; <var:m> := <var:O2> ; <var:m> := <var:m> + <var:O1> ; <var:m> := <var:m> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Given that $ <var:b> = <var:k> $ ahead of the execution of this list of commands it holds that we see $ <var:m> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is shown using standard Hoare techniques . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:k> \} & <var:O0> := <nat:1> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \} & <var:O1> := <nat:2> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \} & <var:O1> := <var:O1> * <var:b> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \} & <var:O2> := <nat:2> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \} & <var:O2> := <var:O2> * <var:b> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \cdot <var:k> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \cdot <var:k> \} & <var:O2> := <var:O2> * <var:b> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \cdot <var:k> ^ <nat:2> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:O2> = <nat:2> \cdot <var:k> ^ <nat:2> \} & <var:m> := <var:O2> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:m> = <nat:2> \cdot <var:k> ^ <nat:2> \} \\ \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:O1> = <nat:2> \cdot <var:k> \land <var:m> = <nat:2> \cdot <var:k> ^ <nat:2> \} & <var:m> := <var:m> + <var:O1> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \land <var:m> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> \} \end{tabular} Shifting focus toward the following step seen in our list of instructions , \[ \begin{tabular} {rcl} \{ <var:b> = <var:k> \} & <var:O0> := <nat:1> & \{ <var:b> = <var:k> \land <var:O0> = <nat:1> \} \end{tabular} This is guaranteed with the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:1> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:b> ; <var:O2> := <nat:2> ; <var:O2> := <var:O2> * <var:b> ; <var:O2> := <var:O2> * <var:b> ; <var:m> := <var:O2> ; <var:m> := <var:m> + <var:O1> ; <var:m> := <var:m> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:b> = <var:k> }} <def:poly> {{ <var:m> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> * <var:k> /\ <var:O2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> * <var:k> /\ <var:O2> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> * <var:k> /\ <var:O2> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:2> * <var:k> /\ <var:m> = <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:O0> = <nat:1> /\ <var:m> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:k> /\ <var:m> = <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 