\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:1> + <var:o> * <var:e> ; <var:o> := <nat:3> + <var:o> * <var:e> \end{verbatim} Given that we have $ <var:e> = <var:a> $ before interpreting the segment of code , it must be that we have $ <var:o> = <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:e> = <var:a> \} \\ <var:o> := <nat:2> ; \\ \{ <var:e> = <var:a> \land <var:o> = <nat:2> \} \\ <var:o> := <nat:1> + <var:o> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:o> = <nat:2> * <var:a> + <nat:1> \} \\ <var:o> := <nat:3> + <var:o> * <var:e> \\ \{ <var:e> = <var:a> \land <var:o> = <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} \end{eqnarray} Continuing the evaluation of this series of commands returns : \begin{eqnarray} \end{eqnarray} Therefore , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:e> = <var:a> }} <var:o> := <nat:2> ; <var:o> := <nat:1> + <var:o> * <var:e> ; <var:o> := <nat:3> + <var:o> * <var:e> {{ <var:o> = <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:o> = <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:o> = <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 