\begin{document} \begin{theorem} Take the following set of commands : \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:d> ; <var:n> := <nat:2> + <var:n> * <var:d> \end{verbatim} Given $ <var:d> = <var:L> $ prior to running our list of instructions it holds that we have $ <var:n> = <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:2> $ after series of commands has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:d> = <var:L> \} \\ <var:n> := <nat:1> ; \\ \{ <var:d> = <var:L> \land <var:n> = <nat:1> \} \\ <var:n> := <nat:3> + <var:n> * <var:d> ; \\ \{ <var:d> = <var:L> \land <var:n> = <nat:1> \times <var:L> + <nat:3> \} \\ <var:n> := <nat:2> + <var:n> * <var:d> \\ \{ <var:d> = <var:L> \land <var:n> = <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:2> \} \end{eqnarray} Considering the above , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:d> = <var:L> }} <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:d> ; <var:n> := <nat:2> + <var:n> * <var:d> {{ <var:n> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:n> = <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:L> /\ <var:n> = <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 