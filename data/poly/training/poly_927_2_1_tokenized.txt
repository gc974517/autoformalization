\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:3> ; <var:T> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for $ <var:x> \in \mathbb{Z}^+ $ , $ <var:V> = <var:x> $ ahead of the evaluation of this series of instructions , it holds that we see $ <var:T> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is done using typical Hoare reasoning . Moving forward to the next step , we see \begin{verbatim} { <var:V> = <var:x> } <var:L0> := <nat:3> { <var:V> = <var:x> \land <var:L0> = <nat:3> } { <var:V> = <var:x> \land <var:L0> = <nat:3> } <var:T> := <var:L0{ <var:V> = <var:x> \land <var:T> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:T> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <def:poly> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 