\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:4> ; <var:H> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:N> = <var:Z> $ prior to the evaluation of our list of instructions it holds that $ <var:H> = <nat:4> $ once set of instructions terminates . \end{theorem} \begin{proof} The proof of our series of commands is given with usual Hoare techniques . Advancing , we have the variable binding code \verb | <var:m0> := <nat:4> ; | . This statement forwards the condition $ \{ <var:N> = <var:Z> \} $ into the condition $ \{ <var:N> = <var:Z> \land <var:m0> = <nat:4> \} $ . This is sound by the assignment law of usual Hoare logic . Further , we have the variable assignmet code \verb | <var:H> := <var:m0> | . This advances the condition $ \{ <var:N> = <var:Z> \land <var:m0> = <nat:4> \} $ as the postcondition $ \{ <var:N> = <var:Z> \land <var:H> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:H> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:N> = <var:Z> }} <def:poly> {{ <var:H> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Z> /\ <var:H> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 