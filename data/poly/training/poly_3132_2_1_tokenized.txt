\begin{document} \begin{theorem} Take a code segment in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:3> ; <var:n> := <var:I0> \end{verbatim} Allowing that $ <var:V> = <var:G> $ prior to the execution of the list of commands , it holds that $ <var:n> = <nat:3> $ when code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be shown by Hoare logic . Paying attention to the proceeding line in our code segment , we have \verb | { <var:V> = <var:G> } <var:I0> := <nat:3> { <var:V> = <var:G> \land <var:I0> = <nat:3> } | . Advancing to the proceeding command contained in our program , we see \verb | { <var:V> = <var:G> } <var:I0> := <nat:3> { <var:V> = <var:G> \land <var:I0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:V> = <var:G> }} <var:I0> := <nat:3> ; <var:n> := <var:I0> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 