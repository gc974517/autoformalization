\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:6> ; <var:G> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allowing that $ <var:U> = <var:Y> $ prior to the execution of this list of instructions it follows that we have $ <var:G> = <nat:6> $ . \end{theorem} \begin{proof} The argument for the series of instructions is demonstrated using Hoare logic . Taking another step toward the following statement seen in the series of commands , we see the environment update code \verb | <var:a0> := <nat:6> ; | . This code takes the precondition $ \{ <var:U> = <var:Y> \} $ toward the condition $ \{ <var:U> = <var:Y> \land <var:a0> = <nat:6> \} $ . Following , we see the assignment statement \verb | <var:G> := <var:a0> | . This line advances the condition $ \{ <var:U> = <var:Y> \land <var:a0> = <nat:6> \} $ into the condition $ \{ <var:U> = <var:Y> \land <var:G> = <nat:6> \} $ . This is shown to be logically sound through the assignment inference rule given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:G> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:U> = <var:Y> }} <def:poly> {{ <var:G> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Y> /\ <var:G> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 