\begin{document} \begin{theorem} We define a list of instructions as \begin{verbatim} <var:m1> := <var:u> ; <var:m2> := <var:m1> * <var:u> ; <var:m3> := <var:m2> * <var:u> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:1> ; <var:h> := <var:m3> <var:h> := <var:h> + <var:m2> <var:h> := <var:h> + <var:m1> <var:h> := <var:h> + <var:m0> \end{verbatim} Allowing taking natural coefficients $ <var:W> $ $ <var:u> = <var:W> $ before the execution of our code segment it follows that $ <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:9> $ once code segment has finished . \end{theorem} \begin{proof} The flow of logic for our program is done with typical Hoare reasoning . Moving on to the proceeding command found in our code , we see the command \verb | <var:m1> := <var:u> ; | . This advances the precondition $ \{ <var:u> = <var:W> \} $ into the postcondition $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \} $ . This is shown to be logically sound using the assignment inference rule from usual Hoare techniques . Taking another step toward the subsequent line of code found in the list of instructions , the environment update code \verb | <var:m2> := <var:m1> * <var:u> ; | . This command forwards $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \} $ into the condition $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \} $ . This is ensured using the assignment inference rule found in usual Hoare techniques . Jumping to the proceeding piece of code in the series of instructions , we see the command assigning $ <var:m2> * <var:u> $ into $ <var:m3>$ . This statement advances $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \} $ as the postcondition $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \} $ . This is ensured with the assignment inference rule defined in usual Hoare reasoning . Taking a look at the following bit of code in our code segment , we see the variable assignmet command giving $ <nat:9> $ toward $ <var:m0>$ . This line redefines the condition $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \} $ as $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is known to be sound through the assignment scheme given in Hoare techniques . Next , the variable binding code \verb | <var:m1> := <var:m1> * <nat:4> ; | . This statement transfers the precondition $ \{ <var:u> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ into $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is given through the assignment inference rule in Hoare logic . Moving forward to the proceeding line of code found in our set of commands , we have the command \verb | <var:m2> := <var:m2> * <nat:5> ; | . This redefines $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ to the condition $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is ensured through the assignment law defined in usual Hoare logic . Looking at the proceeding line seen in the set of commands , we see the variable update statement \verb | <var:m3> := <var:m3> * <nat:1> ; | . This statement transfers the condition $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m3> = <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ toward the postcondition $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is known to be sound with the assignment law in Hoare logic . Following , we see the variable update command \verb | <var:h> := <var:m3> | . This advances $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:W> ^ <nat:3> \land <var:m0> = <nat:9> \} $ to $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ . Taking another step toward the proceeding line in the segment of code , the line \verb | <var:h> := <var:h> + <var:m2> | . This transfers $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m2> = <nat:5> \cdot <var:W> ^ <nat:2> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> \} $ toward the condition $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> \} $ . Following , the variable assignmet statement \verb | <var:h> := <var:h> + <var:m1> | . This takes the precondition $ \{ <var:u> = <var:W> \land <var:m1> = <nat:4> \cdot <var:W> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> \} $ toward $ \{ <var:u> = <var:W> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> \} $ . This is deduced using the assignment inference rule found in Hoare techniques . Taking another step toward the following line of code in the list of commands , we see the environment update code yielding $ <var:h> + <var:m0$ as $ <var:h>$ . This redefines $ \{ <var:u> = <var:W> \land <var:m0> = <nat:9> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> \} $ toward the postcondition $ \{ <var:u> = <var:W> \land <var:h> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:5> \cdot <var:W> ^ <nat:2> + <nat:4> \cdot <var:W> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:u> = <var:W> }} <var:m1> := <var:u> ; <var:m2> := <var:m1> * <var:u> ; <var:m3> := <var:m2> * <var:u> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:1> ; <var:h> := <var:m3> <var:h> := <var:h> + <var:m2> <var:h> := <var:h> + <var:m1> <var:h> := <var:h> + <var:m0> {{ <var:h> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <nat:4> * <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <nat:4> * <var:W> /\ <var:m2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:m3> = <var:W> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <nat:4> * <var:W> /\ <var:m2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:W> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <nat:4> * <var:W> /\ <var:m2> = <nat:5> * <var:W> ^ <nat:2> /\ <var:m0> = <nat:9> /\ <var:h> = <nat:1> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m1> = <nat:4> * <var:W> /\ <var:m0> = <nat:9> /\ <var:h> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:m0> = <nat:9> /\ <var:h> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:h> = <nat:1> * <var:W> ^ <nat:3> + <nat:5> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 