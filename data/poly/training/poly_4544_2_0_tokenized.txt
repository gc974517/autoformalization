\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:1> ; <var:Q> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Allow for $ <var:m> \in \mathbb{Z}^+ $ $ <var:y> = <var:m> $ prior to interpreting this list of instructions , then we have $ <var:Q> = <nat:1> $ when program exits . \end{theorem} \begin{proof} The proof of the list of instructions is demonstrated using standard Hoare reasoning . Moving forward to the proceeding steps contained in our set of instructions , we have \begin{eqnarray} \{ <var:y> = <var:m> \} \, <var:s0> := <nat:1> \, \{ <var:y> = <var:m> \land <var:s0> = <nat:1> \} \\ \{ <var:y> = <var:m> \land <var:s0> = <nat:1> \} \, <var:Q> := <var:s0\, \{ <var:y> = <var:m> \land <var:Q> = <nat:1> \} \end{eqnarray} This is ensured using the variable assignmet rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:1> ; <var:Q> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 