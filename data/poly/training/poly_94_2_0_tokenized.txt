\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:3> ; <var:a> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:w> = <var:D> $ prior to executing our list of instructions , it holds that we have $ <var:a> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands is shown through typical Hoare reasoning . Looking at the proceeding statement seen in the code , \verb | { <var:w> = <var:D> } <var:V0> := <nat:3> { <var:w> = <var:D> \land <var:V0> = <nat:3> } | . This is shown through the environment update law obtained from usual Hoare logic . After , \verb | { <var:w> = <var:D> } <var:V0> := <nat:3> { <var:w> = <var:D> \land <var:V0> = <nat:3> } | . This is known to be sound by the environment update law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:a> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <def:poly> {{ <var:a> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:a> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 