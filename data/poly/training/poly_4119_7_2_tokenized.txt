\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <var:P> * <var:I> ; <var:P> := <var:P> * <var:I> ; <var:P> := <nat:4> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:I> = <var:f> $ ahead of interpreting the series of commands it follows that we have $ <var:P> = <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the series of commands is clear with Hoare reasoning . Stepping through , we see \begin{eqnarray} \{ <var:I> = <var:f> \} \, <var:P> := <nat:2> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \} \, <var:P> := <var:P> * <var:I> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> + \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> + \} \, <var:P> := <var:P> * <var:I> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:2> + \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:2> + \} \, <var:P> := <nat:4> + <var:P> * <var:I> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:3> + <nat:4> \} \, <var:P> := <nat:1> + <var:P> * <var:I> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> + <nat:1> \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> + <nat:1> \} \, <var:P> := <nat:1> + <var:P> * <var:I> \, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> \} \\ \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> \} \, <var:P> := <nat:3> + <var:P> * <var:I\, \{ <var:I> = <var:f> \land <var:P> = <nat:2> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:2> ; <var:P> := <var:P> * <var:I> ; <var:P> := <var:P> * <var:I> ; <var:P> := <nat:4> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:I> = <var:f> }} <def:poly> {{ <var:P> = <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:f> /\ <var:P> = <nat:2> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 