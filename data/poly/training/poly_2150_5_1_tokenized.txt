\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:H> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:3> ; <var:A> := <var:k1> <var:A> := <var:A> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:H> = <var:t> $ before interpreting our series of commands it holds that $ <var:A> = <nat:3> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the series of commands can be seen through standard Hoare logic . Now , we have the binding line letting $ <var:H> $ to $ <var:k1>$ . This command transfers the precondition $ \{ <var:H> = <var:t> \} $ toward the condition $ \{ <var:H> = <var:t> \land <var:k1> = <var:t> \} $ . Paying attention to the proceeding line found in the segment of code , the assignment command binding $ <nat:1> $ toward $ <var:k0>$ . This transfers $ \{ <var:H> = <var:t> \land <var:k1> = <var:t> \} $ as the condition $ \{ <var:H> = <var:t> \land <var:k1> = <var:t> \land <var:k0> = <nat:1> \} $ . This is deduced with the assignment scheme given in standard Hoare techniques . Moving forward to the upcoming statement seen in our list of instructions , we have the binding code yielding $ <var:k1> * <nat:3> $ to $ <var:k1>$ . This redefines the condition $ \{ <var:H> = <var:t> \land <var:k1> = <var:t> \land <var:k0> = <nat:1> \} $ to the condition $ \{ <var:H> = <var:t> \land <var:k1> = <nat:3> \times <var:t> \land <var:k0> = <nat:1> \} $ . This is guaranteed through the assignment law from Hoare techniques . Shifting focus toward the proceeding step seen in the code segment , we see the code assigning $ <var:k1$ into $ <var:A>$ . This transfers $ \{ <var:H> = <var:t> \land <var:k1> = <nat:3> \times <var:t> \land <var:k0> = <nat:1> \} $ into the condition $ \{ <var:H> = <var:t> \land <var:k0> = <nat:1> \land <var:A> = <nat:3> \times <var:t> \} $ . This is shown to be logically sound using the assignment inference rule found in Hoare reasoning . Immediately after , we have the variable binding line yielding $ <var:A> + <var:k0$ as $ <var:A>$ . This code moves the precondition $ \{ <var:H> = <var:t> \land <var:k0> = <nat:1> \land <var:A> = <nat:3> \times <var:t> \} $ to $ \{ <var:H> = <var:t> \land <var:A> = <nat:3> \times <var:t> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:H> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:3> ; <var:A> := <var:k1> <var:A> := <var:A> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:H> = <var:t> }} <def:poly> {{ <var:A> = <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:k1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:k1> = <var:t> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:k1> = <nat:3> * <var:t> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:k0> = <nat:1> /\ <var:A> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:t> /\ <var:A> = <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 