\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:6> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:q> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:q> ; <var:A2> := <var:A2> * <var:q> ; <var:Z> := <var:A2> ; <var:Z> := <var:Z> + <var:A1> ; <var:Z> := <var:Z> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:q> = <var:h> $ prior to interpreting this set of commands , it holds that we see $ <var:Z> = <nat:2> \times <var:h> ^ <nat:2> + <nat:8> \times <var:h> + <nat:6> $ after list of commands has executed . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:h> \} \\ <var:A0> := <nat:6> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \} \\ <var:A1> := <nat:8> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \} \\ <var:A1> := <var:A1> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \cdot <var:h> \} \\ <var:A2> := <nat:2> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \cdot <var:h> \land <var:A2> = <nat:2> \} \\ <var:A2> := <var:A2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \cdot <var:h> \land <var:A2> = <nat:2> \cdot <var:h> \} \\ <var:A2> := <var:A2> * <var:q> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \cdot <var:h> \land <var:A2> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:Z> := <var:A2> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:A1> = <nat:8> \cdot <var:h> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:A1> ; \\ \{ <var:q> = <var:h> \land <var:A0> = <nat:6> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:8> \cdot <var:h> \} \\ <var:Z> := <var:Z> + <var:A0> \\ \{ <var:q> = <var:h> \land <var:Z> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:8> \cdot <var:h> + <nat:6> \} \end{eqnarray} As a result , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:6> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:q> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:q> ; <var:A2> := <var:A2> * <var:q> ; <var:Z> := <var:A2> ; <var:Z> := <var:Z> + <var:A1> ; <var:Z> := <var:Z> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:q> = <var:h> }} <def:poly> {{ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> * <var:h> /\ <var:A2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> * <var:h> /\ <var:A2> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> * <var:h> /\ <var:A2> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:A1> = <nat:8> * <var:h> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:A0> = <nat:6> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:h> /\ <var:Z> = <nat:2> * <var:h> ^ <nat:2> + <nat:8> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 