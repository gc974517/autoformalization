\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:5> ; <var:I> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume ( taking positive numbers $ <var:h> $ ) that $ <var:n> = <var:h> $ ahead of interpreting this list of commands then we have $ <var:I> = <nat:5> $ . \end{theorem} \begin{proof} The proof of the program can be given using typical Hoare reasoning . Advancing to the next step , the binding command \verb | <var:y0> := <nat:5> ; | . This takes the precondition $ \{ <var:n> = <var:h> \} $ into the postcondition $ \{ <var:n> = <var:h> \land <var:y0> = <nat:5> \} $ . Further , we see the environment update statement \verb | <var:I> := <var:y0> | . This code moves $ \{ <var:n> = <var:h> \land <var:y0> = <nat:5> \} $ as the postcondition $ \{ <var:n> = <var:h> \land <var:I> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:I> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:n> = <var:h> }} <def:poly> {{ <var:I> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:h> /\ <var:I> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 