\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:4> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:I> ; <var:s> := <var:R1> ; <var:s> := <var:s> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:I> = <var:L> $ prior to interpreting the list of commands , it must be that we see $ <var:s> = <nat:7> \cdot <var:L> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our series of commands is given by usual Hoare techniques . Looking at the proceeding line of code contained in the list of instructions , we have the environment update command \verb | <var:R0> := <nat:4> ; | . This redefines $ \{ <var:I> = <var:L> \} $ to the condition $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \} $ . This is shown to be logically sound with the assignment rule defined in usual Hoare logic . Jumping to the subsequent line of code contained in our code , we have the variable assignmet command \verb | <var:R1> := <nat:7> ; | . This transfers the condition $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \} $ as the postcondition $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \} $ . This is ensured by the assignment scheme given in typical Hoare techniques . Advancing to the upcoming step found in the series of instructions , we have the assignment line \verb | <var:R1> := <var:R1> * <var:I> ; | . This takes $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> \} $ to the condition $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> * <var:L> \} $ . This is deduced by the assignment inference rule of typical Hoare techniques . Considering the subsequent line of code found in our code segment , we have the assignment statement \verb | <var:s> := <var:R1> ; | . This code forwards $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:R1> = <nat:7> * <var:L> \} $ to $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:s> = <nat:7> * <var:L> \} $ . This is rigorously given through the assignment inference rule given in Hoare logic . Looking at the subsequent line of code contained in our list of commands , we see the environment update statement letting $ <var:s> + <var:R0$ to $ <var:s>$ . This takes the condition $ \{ <var:I> = <var:L> \land <var:R0> = <nat:4> \land <var:s> = <nat:7> * <var:L> \} $ to $ \{ <var:I> = <var:L> \land <var:s> = <nat:7> * <var:L> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:4> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:I> ; <var:s> := <var:R1> ; <var:s> := <var:s> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <def:poly> {{ <var:s> = <nat:7> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:R0> = <nat:4> /\ <var:s> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:7> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 