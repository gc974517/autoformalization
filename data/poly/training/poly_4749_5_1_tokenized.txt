\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:c> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:9> ; <var:U> := <var:g1> <var:U> := <var:U> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:c> = <var:F> $ for any positive numbers $ <var:F> $ prior to executing this code segment , it holds that we have $ <var:U> = <nat:9> \times <var:F> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions is clear with Hoare techniques . Observing the proceeding commands found in the code segment , we have \begin{eqnarray} \{ <var:c> = <var:F> \} \, <var:g1> := <var:c> \, \{ <var:c> = <var:F> \land <var:g1> = <var:F> \} \\ \{ <var:c> = <var:F> \land <var:g1> = <var:F> \} \, <var:g0> := <nat:6> \, \{ <var:c> = <var:F> \land <var:g1> = <var:F> \land <var:g0> = <nat:6> \} \\ \{ <var:c> = <var:F> \land <var:g1> = <var:F> \land <var:g0> = <nat:6> \} \, <var:g1> := <var:g1> * <nat:9> \, \{ <var:c> = <var:F> \land <var:g1> = <nat:9> \cdot <var:F> \land <var:g0> = <nat:6> \} \\ \{ <var:c> = <var:F> \land <var:g1> = <nat:9> \cdot <var:F> \land <var:g0> = <nat:6> \} \, <var:U> := <var:g1\, \{ <var:c> = <var:F> \land <var:g0> = <nat:6> \land <var:U> = <nat:9> \cdot <var:F> \} \\ \{ <var:c> = <var:F> \land <var:g0> = <nat:6> \land <var:U> = <nat:9> \cdot <var:F> \} \, <var:U> := <var:U> + <var:g0\, \{ <var:c> = <var:F> \land <var:U> = <nat:9> \cdot <var:F> + <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:c> ; <var:g0> := <nat:6> ; <var:g1> := <var:g1> * <nat:9> ; <var:U> := <var:g1> <var:U> := <var:U> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <def:poly> {{ <var:U> = <nat:9> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:g1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:g1> = <var:F> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:g1> = <nat:9> * <var:F> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:g0> = <nat:6> /\ <var:U> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U> = <nat:9> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 