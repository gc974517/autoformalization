\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:2> ; <var:k> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allow that we have $ <var:M> = <var:p> $ --- with some positive integer coefficients $ <var:p> $ --- prior to executing our series of commands it holds that we see $ <var:k> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is done through typical Hoare techniques . Focusing on the next bit of code found in our segment of code , the variable update code \verb | <var:d0> := <nat:2> ; | . This forwards the condition $ \{ <var:M> = <var:p> \} $ as the postcondition $ \{ <var:M> = <var:p> \land <var:d0> = <nat:2> \} $ . This is known to be sound using the assignment law given by usual Hoare reasoning . Moving on to the subsequent piece of code contained in the set of instructions , we see the assignment code yielding $ <var:d0$ into $ <var:k>$ . This command forwards the precondition $ \{ <var:M> = <var:p> \land <var:d0> = <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:p> \land <var:k> = <nat:2> \} $ . This is ensured with the assignment rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:k> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <def:poly> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 