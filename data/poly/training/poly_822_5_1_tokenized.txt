\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as \begin{verbatim} <var:I1> := <var:Z> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:8> ; <var:v> := <var:I1> <var:v> := <var:v> + <var:I0> \end{verbatim} Allowing it to hold that $ <var:Z> = <var:T> $ prior to evaluating the segment of code , it holds that $ <var:v> = <nat:8> * <var:T> + <nat:6> $ once program finishes . \end{theorem} \begin{proof} Arguing the correctness of our program can be shown through standard Hoare techniques . Keeping momentum , \verb | { <var:Z> = <var:T> } <var:I1> := <var:Z> { <var:Z> = <var:T> \land <var:I1> = <var:T> } | , \verb | { <var:Z> = <var:T> \land <var:I1> = <var:T> } <var:I0> := <nat:6> { <var:Z> = <var:T> \land <var:I1> = <var:T> \land <var:I0> = <nat:6> } | , \verb | { <var:Z> = <var:T> \land <var:I1> = <var:T> \land <var:I0> = <nat:6> } <var:I1> := <var:I1> * <nat:8> { <var:Z> = <var:T> \land <var:I1> = <nat:8> \cdot <var:T> \land <var:I0> = <nat:6> } | and \verb | { <var:Z> = <var:T> \land <var:I1> = <nat:8> \cdot <var:T> \land <var:I0> = <nat:6> } <var:v> := <var:I1{ <var:Z> = <var:T> \land <var:I0> = <nat:6> \land <var:v> = <nat:8> \cdot <var:T> } | . This is ensured using the assignment law found in Hoare logic . Moving on to the next step , we have \verb | { <var:Z> = <var:T> } <var:I1> := <var:Z> { <var:Z> = <var:T> \land <var:I1> = <var:T> } | . This is given using the assignment law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Z> = <var:T> }} <var:I1> := <var:Z> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:8> ; <var:v> := <var:I1> <var:v> := <var:v> + <var:I0> {{ <var:v> = <nat:8> * <var:T> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:I1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:I1> = <var:T> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:I1> = <nat:8> * <var:T> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:I0> = <nat:6> /\ <var:v> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:T> /\ <var:v> = <nat:8> * <var:T> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 