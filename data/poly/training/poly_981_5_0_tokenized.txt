\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:U> ; <var:B> := <var:k1> ; <var:B> := <var:B> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:U> = <var:v> $ taking natural coefficients $ <var:v> $ prior to evaluating our set of commands then $ <var:B> = <nat:5> \times <var:v> + <nat:7> $ . \end{theorem} \begin{proof} We can see that the below decorated code segment . \begin{eqnarray} \{ <var:U> = <var:v> \} \\ <var:k0> := <nat:7> ; \\ \{ <var:U> = <var:v> \land <var:k0> = <nat:7> \} \\ <var:k1> := <nat:5> ; \\ \{ <var:U> = <var:v> \land <var:k0> = <nat:7> \land <var:k1> = <nat:5> \} \\ <var:k1> := <var:k1> * <var:U> ; \\ \{ <var:U> = <var:v> \land <var:k0> = <nat:7> \land <var:k1> = <nat:5> \cdot <var:v> \} \\ <var:B> := <var:k1> ; \\ \{ <var:U> = <var:v> \land <var:k0> = <nat:7> \land <var:B> = <nat:5> \cdot <var:v> \} \\ <var:B> := <var:B> + <var:k0> \\ \{ <var:U> = <var:v> \land <var:B> = <nat:5> \cdot <var:v> + <nat:7> \} \end{eqnarray} Applying usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:k1> := <nat:5> ; <var:k1> := <var:k1> * <var:U> ; <var:B> := <var:k1> ; <var:B> := <var:B> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:B> = <nat:5> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:k0> = <nat:7> /\ <var:B> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:B> = <nat:5> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 