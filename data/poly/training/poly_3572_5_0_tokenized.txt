\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:1> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:m> ; <var:u> := <var:S1> ; <var:u> := <var:u> + <var:S0> \end{verbatim} Assuming $ <var:m> = <var:o> $ ahead of executing this series of instructions it holds that we see $ <var:u> = <nat:4> \cdot <var:o> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives us : \begin{eqnarray} \{ <var:m> = <var:o> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:m> = <var:o> \land <var:S0> = <nat:1> \} \\ <var:S1> := <nat:4> ; \\ \{ <var:m> = <var:o> \land <var:S0> = <nat:1> \land <var:S1> = <nat:4> \} \\ <var:S1> := <var:S1> * <var:m> ; \\ \{ <var:m> = <var:o> \land <var:S0> = <nat:1> \land <var:S1> = <nat:4> \times <var:o> \} \\ <var:u> := <var:S1> ; \\ \{ <var:m> = <var:o> \land <var:S0> = <nat:1> \land <var:u> = <nat:4> \times <var:o> \} \\ <var:u> := <var:u> + <var:S0> \\ \{ <var:m> = <var:o> \land <var:u> = <nat:4> \times <var:o> + <nat:1> \} \end{eqnarray} Therefore , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:m> = <var:o> }} <var:S0> := <nat:1> ; <var:S1> := <nat:4> ; <var:S1> := <var:S1> * <var:m> ; <var:u> := <var:S1> ; <var:u> := <var:u> + <var:S0> {{ <var:u> = <nat:4> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:S0> = <nat:1> /\ <var:u> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:o> /\ <var:u> = <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 