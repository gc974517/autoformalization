\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:2> ; <var:u> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:M> = <var:m> $ before running this series of commands it must be that $ <var:u> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this code can be accomplished with typical Hoare logic . Moving on to the upcoming bits of codecontained in the set of instructions , we see \begin{eqnarray} \{ <var:M> = <var:m> \} \, <var:x0> := <nat:2> \, \{ <var:M> = <var:m> \land <var:x0> = <nat:2> \} \\ \{ <var:M> = <var:m> \land <var:x0> = <nat:2> \} \, <var:u> := <var:x0\, \{ <var:M> = <var:m> \land <var:u> = <nat:2> \} \end{eqnarray} This is deduced by the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:2> ; <var:u> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:M> = <var:m> }} <def:poly> {{ <var:u> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:m> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:m> /\ <var:u> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 