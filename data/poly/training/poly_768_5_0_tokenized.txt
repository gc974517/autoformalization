\begin{document} \begin{theorem} We define a program as follows \begin{verbatim} <var:M0> := <nat:2> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:J> ; <var:C> := <var:M1> ; <var:C> := <var:C> + <var:M0> \end{verbatim} Assuming , given every $ <var:F> $ , that we have $ <var:J> = <var:F> $ ahead of interpreting the set of commands , it holds that we have $ <var:C> = <nat:5> \cdot <var:F> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:J> = <var:F> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:J> = <var:F> \land <var:M0> = <nat:2> \} \\ <var:M1> := <nat:5> ; \\ \{ <var:J> = <var:F> \land <var:M0> = <nat:2> \land <var:M1> = <nat:5> \} \\ <var:M1> := <var:M1> * <var:J> ; \\ \{ <var:J> = <var:F> \land <var:M0> = <nat:2> \land <var:M1> = <nat:5> \cdot <var:F> \} \\ <var:C> := <var:M1> ; \\ \{ <var:J> = <var:F> \land <var:M0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:F> \} \\ <var:C> := <var:C> + <var:M0> \\ \{ <var:J> = <var:F> \land <var:C> = <nat:5> \cdot <var:F> + <nat:2> \} \end{eqnarray} Thusly , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:J> = <var:F> }} <var:M0> := <nat:2> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:J> ; <var:C> := <var:M1> ; <var:C> := <var:C> + <var:M0> {{ <var:C> = <nat:5> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:M0> = <nat:2> /\ <var:C> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:F> /\ <var:C> = <nat:5> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 