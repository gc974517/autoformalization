\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:B0> := <nat:4> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:S> ; <var:E> := <var:B1> ; <var:E> := <var:E> + <var:B0> \end{verbatim} Assuming $ <var:S> = <var:C> $ --- given any positive integer coefficients $ <var:C> $ --- prior to executing the code , then we have $ <var:E> = <nat:1> * <var:C> + <nat:4> $ after code terminates . \end{theorem} \begin{proof} Proving correctness for this series of commands is evident by usual Hoare reasoning . Advancing to the next statement contained in the program , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:C> \} & <var:B0> := <nat:4> & \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \} \end{tabular} Looking at the following steps seen in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:S> = <var:C> \} & <var:B0> := <nat:4> & \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \} \\ \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \} & <var:B1> := <nat:1> & \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \land <var:B1> = <nat:1> \} \\ \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \land <var:B1> = <nat:1> \} & <var:B1> := <var:B1> * <var:S> & \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \land <var:B1> = <nat:1> \times <var:C> \} \\ \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \land <var:B1> = <nat:1> \times <var:C> \} & <var:E> := <var:B1> & \{ <var:S> = <var:C> \land <var:B0> = <nat:4> \land <var:E> = <nat:1> \times <var:C> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <var:B0> := <nat:4> ; <var:B1> := <nat:1> ; <var:B1> := <var:B1> * <var:S> ; <var:E> := <var:B1> ; <var:E> := <var:E> + <var:B0> {{ <var:E> = <nat:1> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:B0> = <nat:4> /\ <var:B1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:B0> = <nat:4> /\ <var:E> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:E> = <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 