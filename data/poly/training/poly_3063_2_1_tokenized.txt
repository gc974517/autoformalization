\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:2> ; <var:k> := <var:R0> \end{verbatim} Allowing --- taking $ <var:P> \in \mathbb{Z}^+ $ --- that $ <var:W> = <var:P> $ prior to running our segment of code , then we see $ <var:k> = <nat:2> $ once list of commands terminates . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:W> = <var:P> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:W> = <var:P> \land <var:R0> = <nat:2> \} \\ <var:k> := <var:R0> \\ \{ <var:W> = <var:P> \land <var:k> = <nat:2> \} \end{eqnarray} Given the preceding argument , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:W> = <var:P> }} <var:R0> := <nat:2> ; <var:k> := <var:R0> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:P> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 