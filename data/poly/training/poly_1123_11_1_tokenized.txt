\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:3> ; <var:X> := <var:k3> <var:X> := <var:X> + <var:k2> <var:X> := <var:X> + <var:k1> <var:X> := <var:X> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:r> = <var:D> $ ( for some positive integer coefficients $ <var:D> $ ) prior to executing this segment of code it holds that we have $ <var:X> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:r> = <var:D> \} \\ <var:k1> := <var:r> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <var:D> \} \\ <var:k2> := <var:k1> * <var:r> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:r> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k1> := <var:k1> * <nat:3> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <nat:3> \cdot <var:D> \land <var:k2> = <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <nat:3> \cdot <var:D> \land <var:k2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:k3> = <var:D> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:k3> := <var:k3> * <nat:3> ; \\ \{ <var:r> = <var:D> \land <var:k1> = <nat:3> \cdot <var:D> \land <var:k2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:k3> = <nat:3> \cdot <var:D> ^ <nat:3> \land <var:k0> = <nat:3> \} \\ <var:X> := <var:k3> \\ \{ <var:r> = <var:D> \land <var:k1> = <nat:3> \cdot <var:D> \land <var:k2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:X> = <nat:3> \cdot <var:D> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:k2> \\ \{ <var:r> = <var:D> \land <var:k1> = <nat:3> \cdot <var:D> \land <var:k0> = <nat:3> \land <var:X> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:k1> \\ \{ <var:r> = <var:D> \land <var:k0> = <nat:3> \land <var:X> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> \} \\ <var:X> := <var:X> + <var:k0> \\ \{ <var:r> = <var:D> \land <var:X> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:3> \} \end{eqnarray} Therefore , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:3> ; <var:X> := <var:k3> <var:X> := <var:X> + <var:k2> <var:X> := <var:X> + <var:k1> <var:X> := <var:X> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:r> = <var:D> }} <def:poly> {{ <var:X> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <nat:3> * <var:D> /\ <var:k2> = <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <nat:3> * <var:D> /\ <var:k2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:k3> = <var:D> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <nat:3> * <var:D> /\ <var:k2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <nat:3> * <var:D> /\ <var:k2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:X> = <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k1> = <nat:3> * <var:D> /\ <var:k0> = <nat:3> /\ <var:X> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:k0> = <nat:3> /\ <var:X> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:D> /\ <var:X> = <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 