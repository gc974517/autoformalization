\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:C> ; <var:X> := <var:z1> ; <var:X> := <var:X> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:C> = <var:y> $ --- for every natural coefficients $ <var:y> $ --- before interpreting the list of commands , then we see $ <var:X> = <nat:2> \times <var:y> + <nat:3> $ after list of instructions has exited . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:C> = <var:y> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:C> = <var:y> \land <var:z0> = <nat:3> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:C> = <var:y> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:C> ; \\ \{ <var:C> = <var:y> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> * <var:y> \} \\ <var:X> := <var:z1> ; \\ \{ <var:C> = <var:y> \land <var:z0> = <nat:3> \land <var:X> = <nat:2> * <var:y> \} \\ <var:X> := <var:X> + <var:z0> \\ \{ <var:C> = <var:y> \land <var:X> = <nat:2> * <var:y> + <nat:3> \} \end{eqnarray} Thus , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:C> ; <var:X> := <var:z1> ; <var:X> := <var:X> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <def:poly> {{ <var:X> = <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:z0> = <nat:3> /\ <var:X> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:X> = <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 