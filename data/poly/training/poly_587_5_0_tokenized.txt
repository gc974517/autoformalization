\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:9> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:B> ; <var:i> := <var:J1> ; <var:i> := <var:i> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> . Assuming $ <var:B> = <var:f> $ before running this program it must be that we have $ <var:i> = <nat:1> * <var:f> + <nat:9> $ once list of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:f> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:B> = <var:f> \land <var:J0> = <nat:9> \} \\ <var:J1> := <nat:1> ; \\ \{ <var:B> = <var:f> \land <var:J0> = <nat:9> \land <var:J1> = <nat:1> \} \\ <var:J1> := <var:J1> * <var:B> ; \\ \{ <var:B> = <var:f> \land <var:J0> = <nat:9> \land <var:J1> = <nat:1> * <var:f> \} \\ <var:i> := <var:J1> ; \\ \{ <var:B> = <var:f> \land <var:J0> = <nat:9> \land <var:i> = <nat:1> * <var:f> \} \\ <var:i> := <var:i> + <var:J0> \\ \{ <var:B> = <var:f> \land <var:i> = <nat:1> * <var:f> + <nat:9> \} \end{eqnarray} Using standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:B> ; <var:i> := <var:J1> ; <var:i> := <var:i> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:B> = <var:f> }} <def:poly> {{ <var:i> = <nat:1> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:J0> = <nat:9> /\ <var:i> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:f> /\ <var:i> = <nat:1> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 