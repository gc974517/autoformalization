\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:H1> := <var:K> ; <var:H2> := <var:H1> * <var:K> ; <var:H3> := <var:H2> * <var:K> ; <var:H0> := <nat:4> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:3> ; <var:X> := <var:H3> <var:X> := <var:X> + <var:H2> <var:X> := <var:X> + <var:H0> \end{verbatim} Allowing it to be that $ <var:K> = <var:Y> $ before running the program it must be that we see $ <var:X> = <nat:3> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> $ when code has finished . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be demonstrated through Hoare techniques . Shifting focus toward the subsequent lines contained in the list of commands , \begin{eqnarray} \{ <var:K> = <var:Y> \} \, <var:H1> := <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \} \, <var:H2> := <var:H1> * <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \} \, <var:H3> := <var:H2> * <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \} \, <var:H0> := <nat:4> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \land <var:H0> = <nat:4> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:K> = <var:Y> \} \, <var:H1> := <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \} \end{eqnarray} This is ensured through the assignment law defined in typical Hoare logic . Honing in on the proceeding bits of codecontained in our series of instructions , we see \begin{eqnarray} \{ <var:K> = <var:Y> \} \, <var:H1> := <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \} \, <var:H2> := <var:H1> * <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \} \, <var:H3> := <var:H2> * <var:K> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \} \\ \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \} \, <var:H0> := <nat:4> \, \{ <var:K> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H3> = <var:Y> ^ <nat:3> \land <var:H0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:K> = <var:Y> }} <var:H1> := <var:K> ; <var:H2> := <var:H1> * <var:K> ; <var:H3> := <var:H2> * <var:K> ; <var:H0> := <nat:4> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:3> ; <var:X> := <var:H3> <var:X> := <var:X> + <var:H2> <var:X> := <var:X> + <var:H0> {{ <var:X> = <nat:3> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <var:Y> ^ <nat:2> /\ <var:H3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <var:Y> ^ <nat:2> /\ <var:H3> = <var:Y> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:H3> = <var:Y> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:H0> = <nat:4> /\ <var:X> = <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H0> = <nat:4> /\ <var:X> = <nat:3> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Y> /\ <var:X> = <nat:3> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 