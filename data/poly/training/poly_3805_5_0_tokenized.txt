\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:o> ; <var:N> := <var:G1> ; <var:N> := <var:N> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:o> = <var:w> $ ahead of interpreting the list of commands , then we have $ <var:N> = <nat:1> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:o> = <var:w> \land <var:G0> = <nat:3> \} \\ <var:G1> := <nat:1> ; \\ \{ <var:o> = <var:w> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} \\ <var:G1> := <var:G1> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \times <var:w> \} \\ <var:N> := <var:G1> ; \\ \{ <var:o> = <var:w> \land <var:G0> = <nat:3> \land <var:N> = <nat:1> \times <var:w> \} \\ <var:N> := <var:N> + <var:G0> \\ \{ <var:o> = <var:w> \land <var:N> = <nat:1> \times <var:w> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:o> ; <var:N> := <var:G1> ; <var:N> := <var:N> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <def:poly> {{ <var:N> = <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:G0> = <nat:3> /\ <var:N> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:N> = <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 