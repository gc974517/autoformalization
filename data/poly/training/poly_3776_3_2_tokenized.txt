\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:a> ; <var:W> := <nat:2> + <var:W> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Assuming that we have $ <var:a> = <var:Y> $ before the evaluation of the set of instructions , it follows that we see $ <var:W> = <nat:4> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:2> $ once program executes . \end{theorem} \begin{proof} The method of proof for our program is accomplished using typical Hoare techniques . Shifting focus toward the following line of code in the program , we see the code letting $ <nat:4> $ as $ <var:W>$ . This moves the precondition $ \{ <var:a> = <var:Y> \} $ into $ \{ <var:a> = <var:Y> \land <var:W> = <nat:4> \} $ . Honing in on the subsequent command in our set of commands , we see the command binding $ <nat:3> + <var:W> * <var:a> $ to $ <var:W>$ . This command takes the precondition $ \{ <var:a> = <var:Y> \land <var:W> = <nat:4> \} $ into $ \{ <var:a> = <var:Y> \land <var:W> = <nat:4> \cdot <var:Y> + <nat:3> \} $ . Jumping to the following command in the list of commands , we see the variable binding command letting $ <nat:2> + <var:W> * <var:a$ to $ <var:W>$ . This statement advances the precondition $ \{ <var:a> = <var:Y> \land <var:W> = <nat:4> \cdot <var:Y> + <nat:3> \} $ into the postcondition $ \{ <var:a> = <var:Y> \land <var:W> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:2> \} $ . This is known to be sound through the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:4> ; <var:W> := <nat:3> + <var:W> * <var:a> ; <var:W> := <nat:2> + <var:W> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <def:poly> {{ <var:W> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:W> = <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:W> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 