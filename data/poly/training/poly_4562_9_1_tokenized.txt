\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as \begin{verbatim} <var:X1> := <var:t> ; <var:X2> := <var:X1> * <var:t> ; <var:X3> := <var:X2> * <var:t> ; <var:X0> := <nat:9> ; <var:X2> := <var:X2> * <nat:7> ; <var:X3> := <var:X3> * <nat:8> ; <var:B> := <var:X3> <var:B> := <var:B> + <var:X2> <var:B> := <var:B> + <var:X0> \end{verbatim} Assume $ <var:t> = <var:Z> $ before evaluating the code it follows that $ <var:B> = <nat:8> \cdot <var:Z> ^ <nat:3> + <nat:7> \cdot <var:Z> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is given through usual Hoare reasoning . Stepping through , we have the variable binding code binding $ <var:t> $ toward $ <var:X1>$ . This advances the precondition $ \{ <var:t> = <var:Z> \} $ to the postcondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \} $ . Shifting focus toward the next step contained in the set of commands , the variable assignmet command letting $ <var:X1> * <var:t> $ into $ <var:X2>$ . This advances the precondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \} $ as the postcondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \} $ . Going forward , we see the variable update code defining $ <var:X2> * <var:t> $ into $ <var:X3>$ . This transfers the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme found in Hoare reasoning . Moving forward to the next step found in our set of instructions , we see the variable binding line binding $ <nat:9> $ to $ <var:X0>$ . This advances the precondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \} $ into the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ . This is sound using the assignment scheme obtained from standard Hoare reasoning . Observing the upcoming command found in our code segment , the variable binding code defining $ <var:X2> * <nat:7> $ into $ <var:X2>$ . This code advances $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ into $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ . Further , the command binding $ <var:X3> * <nat:8> $ to $ <var:X3>$ . This forwards the precondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X3> = <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ as the postcondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X3> = <nat:8> * <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ . This is shown to be logically sound by the assignment scheme in usual Hoare reasoning . Moving on to the following command in our segment of code , we see the binding statement assigning $ <var:X3$ into $ <var:B>$ . This line transfers the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X3> = <nat:8> * <var:Z> ^ <nat:3> \land <var:X0> = <nat:9> \} $ into the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:B> = <nat:8> * <var:Z> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment scheme in typical Hoare logic . Moving on to the next step , the assignment line binding $ <var:B> + <var:X2$ into $ <var:B>$ . This statement transfers the precondition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X2> = <nat:7> * <var:Z> ^ <nat:2> \land <var:X0> = <nat:9> \land <var:B> = <nat:8> * <var:Z> ^ <nat:3> \} $ to $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X0> = <nat:9> \land <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> \} $ . This is rigorously given using the assignment rule from typical Hoare reasoning . Advancing on , we see the environment update command assigning $ <var:B> + <var:X0$ toward $ <var:B>$ . This code forwards the condition $ \{ <var:t> = <var:Z> \land <var:X1> = <var:Z> \land <var:X0> = <nat:9> \land <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:Z> \land <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:t> = <var:Z> }} <var:X1> := <var:t> ; <var:X2> := <var:X1> * <var:t> ; <var:X3> := <var:X2> * <var:t> ; <var:X0> := <nat:9> ; <var:X2> := <var:X2> * <nat:7> ; <var:X3> := <var:X3> * <nat:8> ; <var:B> := <var:X3> <var:B> := <var:B> + <var:X2> <var:B> := <var:B> + <var:X0> {{ <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <var:Z> ^ <nat:2> /\ <var:X3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <var:Z> ^ <nat:2> /\ <var:X3> = <var:Z> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <nat:7> * <var:Z> ^ <nat:2> /\ <var:X3> = <var:Z> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <nat:7> * <var:Z> ^ <nat:2> /\ <var:X3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X2> = <nat:7> * <var:Z> ^ <nat:2> /\ <var:X0> = <nat:9> /\ <var:B> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:X1> = <var:Z> /\ <var:X0> = <nat:9> /\ <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:B> = <nat:8> * <var:Z> ^ <nat:3> + <nat:7> * <var:Z> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 