\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:2> ; <var:w> := <var:s0> \end{verbatim} Given it to be that $ <var:Y> = <var:l> $ before interpreting our set of instructions it follows that we see $ <var:w> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the program can be seen with standard Hoare techniques . Going to the next step , we see the variable assignmet command binding $ <nat:2> $ toward $ <var:s0>$ . This advances $ \{ <var:Y> = <var:l> \} $ to $ \{ <var:Y> = <var:l> \land <var:s0> = <nat:2> \} $ . This is sound by the assignment law defined in Hoare reasoning . Advancing to the next step , we see the variable assignmet line \verb | <var:w> := <var:s0> | . This forwards $ \{ <var:Y> = <var:l> \land <var:s0> = <nat:2> \} $ to $ \{ <var:Y> = <var:l> \land <var:w> = <nat:2> \} $ . This is sound through the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Y> = <var:l> }} <var:s0> := <nat:2> ; <var:w> := <var:s0> {{ <var:w> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:l> /\ <var:w> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 