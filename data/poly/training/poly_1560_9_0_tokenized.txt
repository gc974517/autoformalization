\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:u> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:u> ; <var:b2> := <var:b2> * <var:u> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> \end{verbatim} Allow it to hold that $ <var:u> = <var:Z> $ prior to the evaluation of the program , it follows that we have $ <var:h> = <nat:9> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:u> = <var:Z> \} \\ <var:b0> := <nat:6> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \} \\ <var:b1> := <nat:3> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> \} \\ <var:b1> := <var:b1> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> * <var:Z> \} \\ <var:b2> := <nat:9> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> * <var:Z> \land <var:b2> = <nat:9> \} \\ <var:b2> := <var:b2> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> * <var:Z> \land <var:b2> = <nat:9> * <var:Z> \} \\ <var:b2> := <var:b2> * <var:u> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> * <var:Z> \land <var:b2> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:h> := <var:b2> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:b1> = <nat:3> * <var:Z> \land <var:h> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:b1> ; \\ \{ <var:u> = <var:Z> \land <var:b0> = <nat:6> \land <var:h> = <nat:9> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> \} \\ <var:h> := <var:h> + <var:b0> \\ \{ <var:u> = <var:Z> \land <var:h> = <nat:9> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> \} \end{eqnarray} Given the above , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:u> = <var:Z> }} <var:b0> := <nat:6> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:u> ; <var:b2> := <nat:9> ; <var:b2> := <var:b2> * <var:u> ; <var:b2> := <var:b2> * <var:u> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> {{ <var:h> = <nat:9> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> * <var:Z> /\ <var:b2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> * <var:Z> /\ <var:b2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> * <var:Z> /\ <var:b2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:3> * <var:Z> /\ <var:h> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:b0> = <nat:6> /\ <var:h> = <nat:9> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Z> /\ <var:h> = <nat:9> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 