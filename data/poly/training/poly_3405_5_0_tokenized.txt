\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:Q0> := <nat:7> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:J> ; <var:w> := <var:Q1> ; <var:w> := <var:w> + <var:Q0> \end{verbatim} Allow $ <var:J> = <var:p> $ , for every positive numbers $ <var:p> $ , ahead of running our code segment , then we see $ <var:w> = <nat:4> \cdot <var:p> + <nat:7> $ once list of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands can be done with typical Hoare logic . Moving forward to the next step , \verb | { <var:J> = <var:p> } <var:Q0> := <nat:7> { <var:J> = <var:p> \land <var:Q0> = <nat:7> } | and \verb | { <var:J> = <var:p> \land <var:Q0> = <nat:7> } <var:Q1> := <nat:4> { <var:J> = <var:p> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:4> } | . Going to the next step , we have \verb | { <var:J> = <var:p> } <var:Q0> := <nat:7> { <var:J> = <var:p> \land <var:Q0> = <nat:7> } | . Moving on to the next step , we see \verb | { <var:J> = <var:p> } <var:Q0> := <nat:7> { <var:J> = <var:p> \land <var:Q0> = <nat:7> } | and \verb | { <var:J> = <var:p> \land <var:Q0> = <nat:7> } <var:Q1> := <nat:4> { <var:J> = <var:p> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:J> = <var:p> }} <var:Q0> := <nat:7> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:J> ; <var:w> := <var:Q1> ; <var:w> := <var:w> + <var:Q0> {{ <var:w> = <nat:4> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:Q0> = <nat:7> /\ <var:w> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:w> = <nat:4> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 