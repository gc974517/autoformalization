\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:5> ; <var:i1> := <var:i1> * <var:j> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:j> ; <var:i2> := <var:i2> * <var:j> ; <var:r> := <var:i2> ; <var:r> := <var:r> + <var:i1> ; <var:r> := <var:r> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:j> = <var:N> $ before running the list of instructions it follows that we have $ <var:r> = <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:j> = <var:N> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \} \\ <var:i1> := <nat:5> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \} \end{eqnarray} Allowing executing our code segment results in : \begin{eqnarray} <var:i1> := <var:i1> * <var:j> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \cdot <var:N> \} \\ <var:i2> := <nat:4> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \cdot <var:N> \land <var:i2> = <nat:4> \} \\ <var:i2> := <var:i2> * <var:j> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \cdot <var:N> \land <var:i2> = <nat:4> \cdot <var:N> \} \end{eqnarray} Allowing executing our set of commands yields : \begin{eqnarray} <var:i2> := <var:i2> * <var:j> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \cdot <var:N> \land <var:i2> = <nat:4> \cdot <var:N> ^ <nat:2> \} \\ <var:r> := <var:i2> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:i1> = <nat:5> \cdot <var:N> \land <var:r> = <nat:4> \cdot <var:N> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:i1> ; \\ \{ <var:j> = <var:N> \land <var:i0> = <nat:3> \land <var:r> = <nat:4> \cdot <var:N> ^ <nat:2> + <nat:5> \cdot <var:N> \} \\ <var:r> := <var:r> + <var:i0> \\ \{ <var:j> = <var:N> \land <var:r> = <nat:4> \cdot <var:N> ^ <nat:2> + <nat:5> \cdot <var:N> + <nat:3> \} \end{eqnarray} Given the preceding argument , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:i1> := <nat:5> ; <var:i1> := <var:i1> * <var:j> ; <var:i2> := <nat:4> ; <var:i2> := <var:i2> * <var:j> ; <var:i2> := <var:i2> * <var:j> ; <var:r> := <var:i2> ; <var:r> := <var:r> + <var:i1> ; <var:r> := <var:r> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:j> = <var:N> }} <def:poly> {{ <var:r> = <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> * <var:N> /\ <var:i2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> * <var:N> /\ <var:i2> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> * <var:N> /\ <var:i2> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:5> * <var:N> /\ <var:r> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:i0> = <nat:3> /\ <var:r> = <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:r> = <nat:4> * <var:N> ^ <nat:2> + <nat:5> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 