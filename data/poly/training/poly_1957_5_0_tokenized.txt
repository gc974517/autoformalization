\begin{document} \begin{theorem} Take a program : \begin{verbatim} <var:q0> := <nat:1> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:R> ; <var:p> := <var:q1> ; <var:p> := <var:p> + <var:q0> \end{verbatim} Assuming it to be that $ <var:R> = <var:b> $ ahead of the execution of our series of instructions it must be that we have $ <var:p> = <nat:7> \times <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions can be given with standard Hoare logic . Advancing on , we see \begin{eqnarray} \{ <var:R> = <var:b> \} \, <var:q0> := <nat:1> \, \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \} \\ \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \} \, <var:q1> := <nat:7> \, \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:q1> = <nat:7> \} \\ \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:q1> = <nat:7> \} \, <var:q1> := <var:q1> * <var:R> \, \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:q1> = <nat:7> \cdot <var:b> \} \\ \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:q1> = <nat:7> \cdot <var:b> \} \, <var:p> := <var:q1> \, \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:p> = <nat:7> \cdot <var:b> \} \\ \{ <var:R> = <var:b> \land <var:q0> = <nat:1> \land <var:p> = <nat:7> \cdot <var:b> \} \, <var:p> := <var:p> + <var:q0\, \{ <var:R> = <var:b> \land <var:p> = <nat:7> \cdot <var:b> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:R> = <var:b> }} <var:q0> := <nat:1> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:R> ; <var:p> := <var:q1> ; <var:p> := <var:p> + <var:q0> {{ <var:p> = <nat:7> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:q0> = <nat:1> /\ <var:q1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:q0> = <nat:1> /\ <var:p> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:p> = <nat:7> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 