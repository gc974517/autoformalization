\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:g> ; <var:y2> := <var:y1> * <var:g> ; <var:y3> := <var:y2> * <var:g> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:8> ; <var:y3> := <var:y3> * <nat:5> ; <var:b> := <var:y3> <var:b> := <var:b> + <var:y1> <var:b> := <var:b> + <var:y0> \end{verbatim} Given it to be that $ <var:g> = <var:J> $ given any positive coefficients $ <var:J> $ before evaluating the series of commands , it follows that we see $ <var:b> = <nat:5> \cdot <var:J> ^ <nat:3> + <nat:8> \cdot <var:J> + <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives us : \begin{eqnarray} \{ <var:g> = <var:J> \} \\ <var:y1> := <var:g> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <var:J> \} \\ <var:y2> := <var:y1> * <var:g> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <var:J> \land <var:y2> = <var:J> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:g> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <var:J> \land <var:y2> = <var:J> ^ <nat:2> \land <var:y3> = <var:J> ^ <nat:3> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <var:J> \land <var:y2> = <var:J> ^ <nat:2> \land <var:y3> = <var:J> ^ <nat:3> \land <var:y0> = <nat:7> \} \end{eqnarray} Continuing the evaluation of this segment of code gives : \begin{eqnarray} <var:y1> := <var:y1> * <nat:8> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <nat:8> \cdot <var:J> \land <var:y2> = <var:J> ^ <nat:2> \land <var:y3> = <var:J> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ <var:y3> := <var:y3> * <nat:5> ; \\ \{ <var:g> = <var:J> \land <var:y1> = <nat:8> \cdot <var:J> \land <var:y2> = <var:J> ^ <nat:2> \land <var:y3> = <nat:5> \cdot <var:J> ^ <nat:3> \land <var:y0> = <nat:7> \} \\ <var:b> := <var:y3> \\ \{ <var:g> = <var:J> \land <var:y1> = <nat:8> \cdot <var:J> \land <var:y2> = <var:J> ^ <nat:2> \land <var:y0> = <nat:7> \land <var:b> = <nat:5> \cdot <var:J> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:y1> \\ \{ <var:g> = <var:J> \land <var:y0> = <nat:7> \land <var:b> = <nat:5> \cdot <var:J> ^ <nat:3> + <nat:8> \cdot <var:J> \} \\ <var:b> := <var:b> + <var:y0> \\ \{ <var:g> = <var:J> \land <var:b> = <nat:5> \cdot <var:J> ^ <nat:3> + <nat:8> \cdot <var:J> + <nat:7> \} \end{eqnarray} Therefore , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:g> = <var:J> }} <var:y1> := <var:g> ; <var:y2> := <var:y1> * <var:g> ; <var:y3> := <var:y2> * <var:g> ; <var:y0> := <nat:7> ; <var:y1> := <var:y1> * <nat:8> ; <var:y3> := <var:y3> * <nat:5> ; <var:b> := <var:y3> <var:b> := <var:b> + <var:y1> <var:b> := <var:b> + <var:y0> {{ <var:b> = <nat:5> * <var:J> ^ <nat:3> + <nat:8> * <var:J> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <var:J> /\ <var:y2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <var:J> /\ <var:y2> = <var:J> ^ <nat:2> /\ <var:y3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <var:J> /\ <var:y2> = <var:J> ^ <nat:2> /\ <var:y3> = <var:J> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <nat:8> * <var:J> /\ <var:y2> = <var:J> ^ <nat:2> /\ <var:y3> = <var:J> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <nat:8> * <var:J> /\ <var:y2> = <var:J> ^ <nat:2> /\ <var:y3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y1> = <nat:8> * <var:J> /\ <var:y2> = <var:J> ^ <nat:2> /\ <var:y0> = <nat:7> /\ <var:b> = <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:y0> = <nat:7> /\ <var:b> = <nat:5> * <var:J> ^ <nat:3> + <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:b> = <nat:5> * <var:J> ^ <nat:3> + <nat:8> * <var:J> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 