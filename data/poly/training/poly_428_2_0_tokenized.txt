\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:3> ; <var:K> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Assume --- given natural coefficients $ <var:u> $ --- that $ <var:g> = <var:u> $ ahead of executing this set of commands , it follows that we see $ <var:K> = <nat:3> $ after program has executed . \end{theorem} \begin{proof} The argument for the program is done using usual Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:g> = <var:u> \} \, <var:w0> := <nat:3> \, \{ <var:g> = <var:u> \land <var:w0> = <nat:3> \} \end{eqnarray} This is shown to be logically sound through the environment update scheme in usual Hoare logic . Honing in on the next step in the set of instructions , we have \begin{eqnarray} \{ <var:g> = <var:u> \} \, <var:w0> := <nat:3> \, \{ <var:g> = <var:u> \land <var:w0> = <nat:3> \} \end{eqnarray} This is known to be sound by the binding rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:K> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:g> = <var:u> }} <def:poly> {{ <var:K> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:K> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 