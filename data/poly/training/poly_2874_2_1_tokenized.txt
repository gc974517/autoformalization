\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:7> ; <var:G> := <var:w0> \end{verbatim} Allowing $ <var:a> = <var:d> $ , for all $ <var:d> \in \mathbb{N} $ , ahead of the execution of our series of commands it must be that we have $ <var:G> = <nat:7> $ once list of commands executes . \end{theorem} \begin{proof} The proof of our list of commands can be demonstrated by Hoare logic . Honing in on the upcoming line found in our segment of code , we see the variable update command \verb | <var:w0> := <nat:7> ; | . This code takes $ \{ <var:a> = <var:d> \} $ to $ \{ <var:a> = <var:d> \land <var:w0> = <nat:7> \} $ . Next , the binding command assigning $ <var:w0$ as $ <var:G>$ . This moves the precondition $ \{ <var:a> = <var:d> \land <var:w0> = <nat:7> \} $ to the postcondition $ \{ <var:a> = <var:d> \land <var:G> = <nat:7> \} $ . This is shown with the assignment inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <var:w0> := <nat:7> ; <var:G> := <var:w0> {{ <var:G> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:G> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 