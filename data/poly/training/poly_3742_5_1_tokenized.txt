\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:e> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:3> ; <var:q> := <var:D1> <var:q> := <var:q> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assume , with some $ <var:h> \in \mathbb{N} $ , it to be that $ <var:e> = <var:h> $ before the evaluation of this series of commands , it must be that we see $ <var:q> = <nat:3> \times <var:h> + <nat:4> $ once list of commands terminates . \end{theorem} \begin{proof} The method of proof for the series of instructions is done through usual Hoare reasoning . Moving onward , we have the environment update code defining $ <var:e> $ to $ <var:D1>$ . This command moves the condition $ \{ <var:e> = <var:h> \} $ toward the postcondition $ \{ <var:e> = <var:h> \land <var:D1> = <var:h> \} $ . This is rigorously given by the assignment law obtained from Hoare logic . Considering the proceeding bit of code seen in the list of instructions , we see the line \verb | <var:D0> := <nat:4> ; | . This code moves the condition $ \{ <var:e> = <var:h> \land <var:D1> = <var:h> \} $ to the postcondition $ \{ <var:e> = <var:h> \land <var:D1> = <var:h> \land <var:D0> = <nat:4> \} $ . This is sound using the assignment scheme in Hoare logic . Paying attention to the subsequent piece of code found in our list of instructions , the variable update command yielding $ <var:D1> * <nat:3> $ to $ <var:D1>$ . This redefines the condition $ \{ <var:e> = <var:h> \land <var:D1> = <var:h> \land <var:D0> = <nat:4> \} $ toward the postcondition $ \{ <var:e> = <var:h> \land <var:D1> = <nat:3> * <var:h> \land <var:D0> = <nat:4> \} $ . This is shown with the assignment inference rule obtained from standard Hoare logic . Next , we see the assignment line yielding $ <var:D1$ to $ <var:q>$ . This takes $ \{ <var:e> = <var:h> \land <var:D1> = <nat:3> * <var:h> \land <var:D0> = <nat:4> \} $ to the condition $ \{ <var:e> = <var:h> \land <var:D0> = <nat:4> \land <var:q> = <nat:3> * <var:h> \} $ . Advancing to the next line contained in our series of instructions , we have the variable assignmet statement giving $ <var:q> + <var:D0$ toward $ <var:q>$ . This command redefines $ \{ <var:e> = <var:h> \land <var:D0> = <nat:4> \land <var:q> = <nat:3> * <var:h> \} $ to the condition $ \{ <var:e> = <var:h> \land <var:q> = <nat:3> * <var:h> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:e> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:3> ; <var:q> := <var:D1> <var:q> := <var:q> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:e> = <var:h> }} <def:poly> {{ <var:q> = <nat:3> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:D1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:D1> = <var:h> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:D1> = <nat:3> * <var:h> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:D0> = <nat:4> /\ <var:q> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:q> = <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 