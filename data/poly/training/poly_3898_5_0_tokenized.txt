\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:P> ; <var:r> := <var:L1> ; <var:r> := <var:r> + <var:L0> \end{verbatim} Given $ <var:P> = <var:l> $ prior to running the set of commands , then we have $ <var:r> = <nat:3> \times <var:l> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our series of commands can be done through typical Hoare logic . Moving onward , we have \begin{eqnarray} \{ <var:P> = <var:l> \} \, <var:L0> := <nat:3> \, \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \} \\ \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \} \, <var:L1> := <nat:3> \, \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> \} \\ \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> \} \, <var:L1> := <var:L1> * <var:P> \, \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \} \\ \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \} \, <var:r> := <var:L1> \, \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \land <var:r> = <nat:3> * <var:l> \} \end{eqnarray} This is known to be sound with the assignment scheme of typical Hoare logic . Considering the subsequent command contained in the list of commands , \begin{eqnarray} \{ <var:P> = <var:l> \} \, <var:L0> := <nat:3> \, \{ <var:P> = <var:l> \land <var:L0> = <nat:3> \} \end{eqnarray} This is shown using the variable assignmet inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:P> ; <var:r> := <var:L1> ; <var:r> := <var:r> + <var:L0> {{ <var:r> = <nat:3> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:L0> = <nat:3> /\ <var:r> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:r> = <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 