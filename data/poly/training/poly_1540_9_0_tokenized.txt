\begin{document} \begin{theorem} Define a set of commands as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:W> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:W> ; <var:f2> := <var:f2> * <var:W> ; <var:y> := <var:f2> ; <var:y> := <var:y> + <var:f1> ; <var:y> := <var:y> + <var:f0> \end{verbatim} Allowing --- given any natural coefficients $ <var:I> $ --- that we have $ <var:W> = <var:I> $ ahead of evaluating the list of commands , then we have $ <var:y> = <nat:4> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:2> $ after code segment finishes . \end{theorem} \begin{proof} The way to prove correctness for this code segment is given through usual Hoare techniques . Jumping to the upcoming statement found in the list of instructions , we have the assignment command \verb | <var:f0> := <nat:2> ; | . This takes the precondition $ \{ <var:W> = <var:I> \} $ as $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \} $ . Going forward , we have the assignment code \verb | <var:f1> := <nat:8> ; | . This transfers $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \} $ toward the condition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \} $ . Further , the environment update command assigning $ <var:f1> * <var:W> $ toward $ <var:f1>$ . This moves the precondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \} $ toward the condition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \} $ . Immediately after , we see the statement \verb | <var:f2> := <nat:4> ; | . This advances the precondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \} $ as the condition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \} $ . Going to the next step , we see the variable assignmet statement binding $ <var:f2> * <var:W> $ toward $ <var:f2>$ . This line moves the condition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \} $ to the postcondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \times <var:I> \} $ . This is rigorously given using the assignment scheme found in standard Hoare reasoning . Moving forward to the next step , the variable assignmet code \verb | <var:f2> := <var:f2> * <var:W> ; | . This redefines $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \times <var:I> \} $ as the postcondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \times <var:I> ^ <nat:2> \} $ . Jumping to the subsequent line seen in the code segment , we have the environment update code \verb | <var:y> := <var:f2> ; | . This forwards the precondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:f2> = <nat:4> \times <var:I> ^ <nat:2> \} $ to the condition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:y> = <nat:4> \times <var:I> ^ <nat:2> \} $ . This is shown by the assignment inference rule obtained from Hoare logic . Following , we see the assignment line yielding $ <var:y> + <var:f1> $ as $ <var:y>$ . This statement moves $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:f1> = <nat:8> \times <var:I> \land <var:y> = <nat:4> \times <var:I> ^ <nat:2> \} $ to $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:y> = <nat:4> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} $ . Taking a look at the following step contained in our program , the variable binding line \verb | <var:y> := <var:y> + <var:f0> | . This takes the precondition $ \{ <var:W> = <var:I> \land <var:f0> = <nat:2> \land <var:y> = <nat:4> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} $ toward $ \{ <var:W> = <var:I> \land <var:y> = <nat:4> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:2> \} $ . This is sound by the assignment rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:W> = <var:I> }} <var:f0> := <nat:2> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:W> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:W> ; <var:f2> := <var:f2> * <var:W> ; <var:y> := <var:f2> ; <var:y> := <var:y> + <var:f1> ; <var:y> := <var:y> + <var:f0> {{ <var:y> = <nat:4> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:I> /\ <var:f2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:I> /\ <var:f2> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:I> /\ <var:f2> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:8> * <var:I> /\ <var:y> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:f0> = <nat:2> /\ <var:y> = <nat:4> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:I> /\ <var:y> = <nat:4> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 