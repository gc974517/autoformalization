\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:o1> := <var:I> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:1> ; <var:U> := <var:o1> <var:U> := <var:U> + <var:o0> \end{verbatim} Given that we have $ <var:I> = <var:p> $ --- for all positive integers $ <var:p> $ --- prior to the evaluation of this code , it holds that we see $ <var:U> = <nat:1> \cdot <var:p> + <nat:8> $ once segment of code is done executing . \end{theorem} \begin{proof} Proving correctness for our program is clear using usual Hoare techniques . Immediately after , we see the assignment line assigning $ <var:I> $ to $ <var:o1>$ . This forwards the condition $ \{ <var:I> = <var:p> \} $ as $ \{ <var:I> = <var:p> \land <var:o1> = <var:p> \} $ . This is rigorously given with the assignment law of typical Hoare techniques . Stepping through , the assignment line \verb | <var:o0> := <nat:8> ; | . This line redefines the condition $ \{ <var:I> = <var:p> \land <var:o1> = <var:p> \} $ into the postcondition $ \{ <var:I> = <var:p> \land <var:o1> = <var:p> \land <var:o0> = <nat:8> \} $ . This is sound by the assignment law given in standard Hoare techniques . Advancing on , we have the line giving $ <var:o1> * <nat:1> $ as $ <var:o1>$ . This line transfers the precondition $ \{ <var:I> = <var:p> \land <var:o1> = <var:p> \land <var:o0> = <nat:8> \} $ to the condition $ \{ <var:I> = <var:p> \land <var:o1> = <nat:1> * <var:p> \land <var:o0> = <nat:8> \} $ . Looking at the proceeding statement in the series of commands , the environment update statement binding $ <var:o1$ to $ <var:U>$ . This moves the precondition $ \{ <var:I> = <var:p> \land <var:o1> = <nat:1> * <var:p> \land <var:o0> = <nat:8> \} $ as $ \{ <var:I> = <var:p> \land <var:o0> = <nat:8> \land <var:U> = <nat:1> * <var:p> \} $ . This is shown to be logically sound with the assignment law found in usual Hoare techniques . Moving forward , we see the statement giving $ <var:U> + <var:o0$ to $ <var:U>$ . This advances the precondition $ \{ <var:I> = <var:p> \land <var:o0> = <nat:8> \land <var:U> = <nat:1> * <var:p> \} $ as $ \{ <var:I> = <var:p> \land <var:U> = <nat:1> * <var:p> + <nat:8> \} $ . This is given by the assignment scheme defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:I> = <var:p> }} <var:o1> := <var:I> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:1> ; <var:U> := <var:o1> <var:U> := <var:U> + <var:o0> {{ <var:U> = <nat:1> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:o1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:o1> = <var:p> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:o1> = <nat:1> * <var:p> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:o0> = <nat:8> /\ <var:U> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:p> /\ <var:U> = <nat:1> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 