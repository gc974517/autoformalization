\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y1> := <var:h> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:f> := <var:Y1> <var:f> := <var:f> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Given given some integers $ <var:k> $ that we have $ <var:h> = <var:k> $ ahead of the evaluation of the series of instructions , it must be that we see $ <var:f> = <nat:6> \times <var:k> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our code can be given by standard Hoare reasoning . Now , we see the environment update command giving $ <var:h> $ as $ <var:Y1>$ . This command takes $ \{ <var:h> = <var:k> \} $ as the postcondition $ \{ <var:h> = <var:k> \land <var:Y1> = <var:k> \} $ . Jumping to the next piece of code found in our set of commands , we see the variable assignmet statement giving $ <nat:4> $ into $ <var:Y0>$ . This statement advances the condition $ \{ <var:h> = <var:k> \land <var:Y1> = <var:k> \} $ as the postcondition $ \{ <var:h> = <var:k> \land <var:Y1> = <var:k> \land <var:Y0> = <nat:4> \} $ . This is shown to be logically sound using the assignment rule given in Hoare logic . Following , we see the variable binding statement yielding $ <var:Y1> * <nat:6> $ to $ <var:Y1>$ . This moves the condition $ \{ <var:h> = <var:k> \land <var:Y1> = <var:k> \land <var:Y0> = <nat:4> \} $ to the condition $ \{ <var:h> = <var:k> \land <var:Y1> = <nat:6> * <var:k> \land <var:Y0> = <nat:4> \} $ . Advancing on , the variable binding command defining $ <var:Y1$ toward $ <var:f>$ . This transfers $ \{ <var:h> = <var:k> \land <var:Y1> = <nat:6> * <var:k> \land <var:Y0> = <nat:4> \} $ toward $ \{ <var:h> = <var:k> \land <var:Y0> = <nat:4> \land <var:f> = <nat:6> * <var:k> \} $ . This is deduced with the assignment law from standard Hoare techniques . Looking at the upcoming statement in our code segment , we see the variable binding command defining $ <var:f> + <var:Y0$ into $ <var:f>$ . This transfers $ \{ <var:h> = <var:k> \land <var:Y0> = <nat:4> \land <var:f> = <nat:6> * <var:k> \} $ toward $ \{ <var:h> = <var:k> \land <var:f> = <nat:6> * <var:k> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:h> ; <var:Y0> := <nat:4> ; <var:Y1> := <var:Y1> * <nat:6> ; <var:f> := <var:Y1> <var:f> := <var:f> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:h> = <var:k> }} <def:poly> {{ <var:f> = <nat:6> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:Y1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:Y1> = <var:k> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:Y1> = <nat:6> * <var:k> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:Y0> = <nat:4> /\ <var:f> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:f> = <nat:6> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 