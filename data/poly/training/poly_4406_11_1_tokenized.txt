\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:q1> := <var:j> ; <var:q2> := <var:q1> * <var:j> ; <var:q3> := <var:q2> * <var:j> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:9> ; <var:D> := <var:q3> <var:D> := <var:D> + <var:q2> <var:D> := <var:D> + <var:q1> <var:D> := <var:D> + <var:q0> \end{verbatim} Allowing $ <var:j> = <var:Q> $ ahead of evaluating this code segment , it must be that we have $ <var:D> = <nat:9> \cdot <var:Q> ^ <nat:3> + <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our code can be done using standard Hoare techniques . Looking at the following line seen in our series of commands , we have the assignment line defining $ <var:j> $ into $ <var:q1>$ . This line transfers the precondition $ \{ <var:j> = <var:Q> \} $ to the postcondition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \} $ . Taking a look at the proceeding bit of code seen in the series of commands , the variable update line giving $ <var:q1> * <var:j> $ toward $ <var:q2>$ . This advances $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \} $ toward the postcondition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \} $ . Next , we have the binding command \verb | <var:q3> := <var:q2> * <var:j> ; | . This forwards the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \} $ to $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \} $ . Taking a look at the next line found in our segment of code , we see the command defining $ <nat:2> $ into $ <var:q0>$ . This command redefines the precondition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ . Immediately after , we see the variable update command \verb | <var:q1> := <var:q1> * <nat:4> ; | . This moves the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ as $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ . Going to the next step , we have the environment update statement \verb | <var:q2> := <var:q2> * <nat:7> ; | . This transfers the precondition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ into the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ . Shifting focus toward the upcoming statement in the series of instructions , we see the variable update line \verb | <var:q3> := <var:q3> * <nat:9> ; | . This line moves the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q3> = <nat:9> \times <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ . This is sound by the assignment inference rule from usual Hoare techniques . Focusing on the proceeding line of code seen in the list of commands , we have the variable binding code \verb | <var:D> := <var:q3> | . This statement forwards the precondition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q3> = <nat:9> \times <var:Q> ^ <nat:3> \land <var:q0> = <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> \} $ . Moving on to the next step , we have the variable assignmet command \verb | <var:D> := <var:D> + <var:q2> | . This command forwards the condition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q2> = <nat:7> \times <var:Q> ^ <nat:2> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> \} $ as $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> \} $ . This is deduced using the assignment rule defined by usual Hoare reasoning . Focusing on the next piece of code contained in the list of instructions , we have the binding statement \verb | <var:D> := <var:D> + <var:q1> | . This code forwards the precondition $ \{ <var:j> = <var:Q> \land <var:q1> = <nat:4> \times <var:Q> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> \} $ toward the condition $ \{ <var:j> = <var:Q> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> \} $ . Taking a look at the following bit of code in our set of commands , we have the assignment statement defining $ <var:D> + <var:q0$ into $ <var:D>$ . This takes the condition $ \{ <var:j> = <var:Q> \land <var:q0> = <nat:2> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> \} $ to $ \{ <var:j> = <var:Q> \land <var:D> = <nat:9> \times <var:Q> ^ <nat:3> + <nat:7> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:2> \} $ . This is ensured through the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <var:q1> := <var:j> ; <var:q2> := <var:q1> * <var:j> ; <var:q3> := <var:q2> * <var:j> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:9> ; <var:D> := <var:q3> <var:D> := <var:D> + <var:q2> <var:D> := <var:D> + <var:q1> <var:D> := <var:D> + <var:q0> {{ <var:D> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <nat:4> * <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <nat:4> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <nat:4> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q3> = <nat:9> * <var:Q> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <nat:4> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q0> = <nat:2> /\ <var:D> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q1> = <nat:4> * <var:Q> /\ <var:q0> = <nat:2> /\ <var:D> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:q0> = <nat:2> /\ <var:D> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:D> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 