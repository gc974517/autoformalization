\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:7> ; <var:c> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:P> = <var:S> $ --- given $ <var:S> \in \mathbb{Z}^+ $ --- ahead of executing this set of instructions it must be that we see $ <var:c> = <nat:7> $ . \end{theorem} \begin{proof} The argument for our code is accomplished with usual Hoare logic . Honing in on the next bit of code found in our list of commands , we have \verb | { <var:P> = <var:S> } <var:Z0> := <nat:7> { <var:P> = <var:S> \land <var:Z0> = <nat:7> } | . This is given using the inference rule defined in Hoare techniques . Honing in on the proceeding line of code seen in the list of commands , \verb | { <var:P> = <var:S> } <var:Z0> := <nat:7> { <var:P> = <var:S> \land <var:Z0> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:7> ; <var:c> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:P> = <var:S> }} <def:poly> {{ <var:c> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:c> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 