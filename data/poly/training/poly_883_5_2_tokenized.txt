\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:b> := <nat:1> ; <var:b> := <nat:2> + <var:b> * <var:x> ; <var:b> := <nat:3> + <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <nat:3> + <var:b> * <var:x> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assuming that we have $ <var:x> = <var:p> $ , with some $ <var:p> \in \mathbb{N} $ , prior to the evaluation of our set of instructions it must be that we see $ <var:b> = <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> $ once segment of code has exited . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be seen through standard Hoare reasoning . Focusing on the proceeding lines of codeseen in our code segment , we see \begin{verbatim} { <var:x> = <var:p> } <var:b> := <nat:1> { <var:x> = <var:p> \land <var:b> = <nat:1> } { <var:x> = <var:p> \land <var:b> = <nat:1> } <var:b> := <nat:2> + <var:b> * <var:x> { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> + <nat:2> } { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> + <nat:2> } <var:b> := <nat:3> + <var:b> * <var:x> { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> } { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> } <var:b> := <nat:4> + <var:b> * <var:x> { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:4> } { <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:4> } <var:b> := <nat:3> + <var:b> * <var:x{ <var:x> = <var:p> \land <var:b> = <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:1> ; <var:b> := <nat:2> + <var:b> * <var:x> ; <var:b> := <nat:3> + <var:b> * <var:x> ; <var:b> := <nat:4> + <var:b> * <var:x> ; <var:b> := <nat:3> + <var:b> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:x> = <var:p> }} <def:poly> {{ <var:b> = <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:b> = <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 