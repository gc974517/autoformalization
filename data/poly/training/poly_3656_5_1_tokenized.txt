\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:L1> := <var:o> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:N> := <var:L1> <var:N> := <var:N> + <var:L0> \end{verbatim} Allow that we have $ <var:o> = <var:J> $ ahead of the evaluation of the code segment it follows that $ <var:N> = <nat:2> \times <var:J> + <nat:4> $ when set of commands has terminated . \end{theorem} \begin{proof} The application of Hoare techniques produces : \begin{eqnarray} \{ <var:o> = <var:J> \} \\ <var:L1> := <var:o> ; \\ \{ <var:o> = <var:J> \land <var:L1> = <var:J> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:o> = <var:J> \land <var:L1> = <var:J> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:o> = <var:J> \land <var:L1> = <nat:2> * <var:J> \land <var:L0> = <nat:4> \} \\ <var:N> := <var:L1> \\ \{ <var:o> = <var:J> \land <var:L0> = <nat:4> \land <var:N> = <nat:2> * <var:J> \} \end{eqnarray} Continuing evaluating our set of instructions gives : \begin{eqnarray} <var:N> := <var:N> + <var:L0> \\ \{ <var:o> = <var:J> \land <var:N> = <nat:2> * <var:J> + <nat:4> \} \end{eqnarray} Considering the above , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:o> = <var:J> }} <var:L1> := <var:o> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:N> := <var:L1> <var:N> := <var:N> + <var:L0> {{ <var:N> = <nat:2> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:L1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:L1> = <var:J> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:L1> = <nat:2> * <var:J> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:L0> = <nat:4> /\ <var:N> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:N> = <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 