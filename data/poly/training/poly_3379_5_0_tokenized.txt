\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:L> ; <var:t> := <var:O1> ; <var:t> := <var:t> + <var:O0> \end{verbatim} Allow --- letting natural coefficients $ <var:I> $ --- that $ <var:L> = <var:I> $ before the evaluation of this set of instructions it follows that we have $ <var:t> = <nat:1> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare reasoning results in : \begin{eqnarray} \{ <var:L> = <var:I> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:L> = <var:I> \land <var:O0> = <nat:4> \} \\ <var:O1> := <nat:1> ; \\ \{ <var:L> = <var:I> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \} \\ <var:O1> := <var:O1> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:I> \} \\ <var:t> := <var:O1> ; \\ \{ <var:L> = <var:I> \land <var:O0> = <nat:4> \land <var:t> = <nat:1> \times <var:I> \} \\ <var:t> := <var:t> + <var:O0> \\ \{ <var:L> = <var:I> \land <var:t> = <nat:1> \times <var:I> + <nat:4> \} \end{eqnarray} Thusly , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:L> ; <var:t> := <var:O1> ; <var:t> := <var:t> + <var:O0> {{ <var:t> = <nat:1> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:O0> = <nat:4> /\ <var:t> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:t> = <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 