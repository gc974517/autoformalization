\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:x1> := <var:L> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:5> ; <var:s> := <var:x1> <var:s> := <var:s> + <var:x0> \end{verbatim} Assuming that $ <var:L> = <var:m> $ prior to the execution of this code segment it must be that $ <var:s> = <nat:5> \times <var:m> + <nat:5> $ when series of instructions is done . \end{theorem} \begin{proof} See that the following decorated program . \begin{eqnarray} \{ <var:L> = <var:m> \} \\ <var:x1> := <var:L> ; \\ \{ <var:L> = <var:m> \land <var:x1> = <var:m> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:L> = <var:m> \land <var:x1> = <var:m> \land <var:x0> = <nat:5> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:L> = <var:m> \land <var:x1> = <nat:5> \cdot <var:m> \land <var:x0> = <nat:5> \} \\ <var:s> := <var:x1> \\ \{ <var:L> = <var:m> \land <var:x0> = <nat:5> \land <var:s> = <nat:5> \cdot <var:m> \} \\ <var:s> := <var:s> + <var:x0> \\ \{ <var:L> = <var:m> \land <var:s> = <nat:5> \cdot <var:m> + <nat:5> \} \end{eqnarray} Applying standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:L> = <var:m> }} <var:x1> := <var:L> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:5> ; <var:s> := <var:x1> <var:s> := <var:s> + <var:x0> {{ <var:s> = <nat:5> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:x1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:x1> = <var:m> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:x1> = <nat:5> * <var:m> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:x0> = <nat:5> /\ <var:s> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:s> = <nat:5> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 