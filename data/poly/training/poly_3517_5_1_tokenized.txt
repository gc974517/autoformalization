\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:A> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:1> ; <var:z> := <var:v1> <var:z> := <var:z> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:A> = <var:C> $ --- given $ <var:C> \in \mathbb{Z}^+ $ --- ahead of interpreting the list of instructions , then $ <var:z> = <nat:1> \cdot <var:C> + <nat:5> $ once code has terminated . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:C> \} \\ <var:v1> := <var:A> ; \\ \{ <var:A> = <var:C> \land <var:v1> = <var:C> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:A> = <var:C> \land <var:v1> = <var:C> \land <var:v0> = <nat:5> \} \\ <var:v1> := <var:v1> * <nat:1> ; \\ \{ <var:A> = <var:C> \land <var:v1> = <nat:1> \times <var:C> \land <var:v0> = <nat:5> \} \\ <var:z> := <var:v1> \\ \{ <var:A> = <var:C> \land <var:v0> = <nat:5> \land <var:z> = <nat:1> \times <var:C> \} \\ <var:z> := <var:z> + <var:v0> \\ \{ <var:A> = <var:C> \land <var:z> = <nat:1> \times <var:C> + <nat:5> \} \end{eqnarray} As a result , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:A> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:1> ; <var:z> := <var:v1> <var:z> := <var:z> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <def:poly> {{ <var:z> = <nat:1> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:v1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:v1> = <var:C> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:v1> = <nat:1> * <var:C> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:v0> = <nat:5> /\ <var:z> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:z> = <nat:1> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 