\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:d1> := <var:r> ; <var:d2> := <var:d1> * <var:r> ; <var:d3> := <var:d2> * <var:r> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:8> ; <var:F> := <var:d3> <var:F> := <var:F> + <var:d2> <var:F> := <var:F> + <var:d1> <var:F> := <var:F> + <var:d0> \end{verbatim} Allowing that we have $ <var:r> = <var:j> $ --- given integers $ <var:j> $ --- ahead of the execution of our series of commands then we see $ <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be demonstrated through Hoare logic . Further , we have the variable update code \verb | <var:d1> := <var:r> ; | . This statement moves the condition $ \{ <var:r> = <var:j> \} $ into the condition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \} $ . Looking at the next statement contained in the series of instructions , we have the assignment line binding $ <var:d1> * <var:r> $ as $ <var:d2>$ . This advances the precondition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \} $ into the condition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \} $ . Stepping through , we see the variable binding command letting $ <var:d2> * <var:r> $ as $ <var:d3>$ . This forwards $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \} $ . Immediately after , we see the assignment line \verb | <var:d0> := <nat:2> ; | . This line redefines $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \} $ toward the postcondition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ . This is guaranteed using the assignment scheme found in Hoare techniques . Moving on , we see the code \verb | <var:d1> := <var:d1> * <nat:4> ; | . This line redefines the condition $ \{ <var:r> = <var:j> \land <var:d1> = <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ toward the condition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ . Honing in on the upcoming line of code found in the list of instructions , we see the variable assignmet statement \verb | <var:d2> := <var:d2> * <nat:2> ; | . This redefines $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ to $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ . This is given through the assignment scheme obtained from standard Hoare techniques . Looking at the proceeding piece of code seen in our set of instructions , we have the environment update line defining $ <var:d3> * <nat:8> $ into $ <var:d3>$ . This line advances the condition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d3> = <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ into the condition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d3> = <nat:8> * <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ . This is rigorously given with the assignment inference rule of typical Hoare reasoning . Moving forward to the proceeding piece of code found in the segment of code , the variable binding statement \verb | <var:F> := <var:d3> | . This forwards the precondition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d3> = <nat:8> * <var:j> ^ <nat:3> \land <var:d0> = <nat:2> \} $ to the condition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> \} $ . This is guaranteed using the assignment inference rule given by typical Hoare techniques . Observing the next statement seen in the segment of code , we see the assignment command \verb | <var:F> := <var:F> + <var:d2> | . This forwards $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d2> = <nat:2> * <var:j> ^ <nat:2> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> \} $ into $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> \} $ . Observing the subsequent line in the set of instructions , we have the environment update statement defining $ <var:F> + <var:d1$ toward $ <var:F>$ . This statement transfers the precondition $ \{ <var:r> = <var:j> \land <var:d1> = <nat:4> * <var:j> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:j> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> \} $ . This is ensured through the assignment rule of usual Hoare logic . Paying attention to the following bit of code in our code segment , the statement yielding $ <var:F> + <var:d0$ into $ <var:F>$ . This transfers the precondition $ \{ <var:r> = <var:j> \land <var:d0> = <nat:2> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> \} $ into the postcondition $ \{ <var:r> = <var:j> \land <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> \} $ . This is shown through the assignment rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:r> = <var:j> }} <var:d1> := <var:r> ; <var:d2> := <var:d1> * <var:r> ; <var:d3> := <var:d2> * <var:r> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:8> ; <var:F> := <var:d3> <var:F> := <var:F> + <var:d2> <var:F> := <var:F> + <var:d1> <var:F> := <var:F> + <var:d0> {{ <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <var:j> /\ <var:d2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <var:j> /\ <var:d2> = <var:j> ^ <nat:2> /\ <var:d3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <var:j> /\ <var:d2> = <var:j> ^ <nat:2> /\ <var:d3> = <var:j> ^ <nat:3> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <nat:4> * <var:j> /\ <var:d2> = <var:j> ^ <nat:2> /\ <var:d3> = <var:j> ^ <nat:3> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <nat:4> * <var:j> /\ <var:d2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:d3> = <var:j> ^ <nat:3> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <nat:4> * <var:j> /\ <var:d2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:j> ^ <nat:3> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <nat:4> * <var:j> /\ <var:d2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:d0> = <nat:2> /\ <var:F> = <nat:8> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d1> = <nat:4> * <var:j> /\ <var:d0> = <nat:2> /\ <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:d0> = <nat:2> /\ <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:j> /\ <var:F> = <nat:8> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 