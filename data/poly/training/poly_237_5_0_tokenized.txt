\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:I> ; <var:J> := <var:b1> ; <var:J> := <var:J> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:I> = <var:v> $ ( given all $ <var:v> \in \mathbb{N} $ ) ahead of evaluating this code segment , it follows that $ <var:J> = <nat:5> \times <var:v> + <nat:2> $ once list of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of the code segment is shown through standard Hoare techniques . Jumping to the proceeding bit of code found in our series of instructions , we have the binding line letting $ <nat:2> $ toward $ <var:b0>$ . This line forwards the precondition $ \{ <var:I> = <var:v> \} $ into $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \} $ . Focusing on the upcoming statement seen in the code , we have the variable update command binding $ <nat:5> $ toward $ <var:b1>$ . This redefines the condition $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \} $ into the postcondition $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:b1> = <nat:5> \} $ . Advancing to the subsequent line of code in the list of instructions , we see the assignment code \verb | <var:b1> := <var:b1> * <var:I> ; | . This code advances the condition $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:b1> = <nat:5> \} $ into the condition $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:b1> = <nat:5> \cdot <var:v> \} $ . Stepping through , the binding code binding $ <var:b1> $ toward $ <var:J>$ . This line advances $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:b1> = <nat:5> \cdot <var:v> \} $ toward $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:J> = <nat:5> \cdot <var:v> \} $ . This is deduced with the assignment inference rule defined by Hoare reasoning . Keeping momentum , the variable update statement \verb | <var:J> := <var:J> + <var:b0> | . This statement transfers the condition $ \{ <var:I> = <var:v> \land <var:b0> = <nat:2> \land <var:J> = <nat:5> \cdot <var:v> \} $ to the condition $ \{ <var:I> = <var:v> \land <var:J> = <nat:5> \cdot <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:2> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:I> ; <var:J> := <var:b1> ; <var:J> := <var:J> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:I> = <var:v> }} <def:poly> {{ <var:J> = <nat:5> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:b0> = <nat:2> /\ <var:J> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:J> = <nat:5> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 