\begin{document} \begin{theorem} Consider the following program in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:8> ; <var:A> := <var:r0> \end{verbatim} Allow it to be that $ <var:x> = <var:w> $ prior to running this code it follows that we have $ <var:A> = <nat:8> $ when code has finished . \end{theorem} \begin{proof} Demonstrating correctness of this code is demonstrated through usual Hoare logic . Moving forward to the next step , we see the variable binding statement assigning $ <nat:8> $ to $ <var:r0>$ . This code transfers the precondition $ \{ <var:x> = <var:w> \} $ into $ \{ <var:x> = <var:w> \land <var:r0> = <nat:8> \} $ . This is shown to be logically sound by the assignment scheme defined by usual Hoare techniques . Immediately after , we have the binding line yielding $ <var:r0$ as $ <var:A>$ . This advances the condition $ \{ <var:x> = <var:w> \land <var:r0> = <nat:8> \} $ toward the postcondition $ \{ <var:x> = <var:w> \land <var:A> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <var:r0> := <nat:8> ; <var:A> := <var:r0> {{ <var:A> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:A> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 