\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <var:k> * <var:J> ; <var:k> := <nat:4> + <var:k> * <var:J> ; <var:k> := <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> ; <var:k> := <nat:1> + <var:k> * <var:J> ; <var:k> := <nat:3> + <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> \end{verbatim} Given , given any positive integers $ <var:e> $ , it to hold that $ <var:J> = <var:e> $ ahead of the execution of our series of instructions it follows that we have $ <var:k> = <nat:3> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is done by Hoare logic . Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:e> \} & <var:k> := <nat:3> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} \\ \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} & <var:k> := <var:k> * <var:J> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \cdot <var:e> + \} \end{tabular} Going forward , \[ \begin{tabular} {rcl} \{ <var:J> = <var:e> \} & <var:k> := <nat:3> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} \\ \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} & <var:k> := <var:k> * <var:J> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \cdot <var:e> + \} \\ \{ <var:J> = <var:e> \land <var:k> = <nat:3> \cdot <var:e> + \} & <var:k> := <nat:4> + <var:k> * <var:J> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \cdot <var:e> ^ <nat:2> + <nat:4> \} \end{tabular} Immediately after , \[ \begin{tabular} {rcl} \{ <var:J> = <var:e> \} & <var:k> := <nat:3> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} \\ \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} & <var:k> := <var:k> * <var:J> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \cdot <var:e> + \} \end{tabular} Honing in on the next step in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:e> \} & <var:k> := <nat:3> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} \end{tabular} This is deduced through the environment update inference rule given by typical Hoare logic . Observing the subsequent piece of code seen in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:e> \} & <var:k> := <nat:3> & \{ <var:J> = <var:e> \land <var:k> = <nat:3> \} \end{tabular} This is guaranteed with the variable binding rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:J> = <var:e> }} <var:k> := <nat:3> ; <var:k> := <var:k> * <var:J> ; <var:k> := <nat:4> + <var:k> * <var:J> ; <var:k> := <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> ; <var:k> := <nat:1> + <var:k> * <var:J> ; <var:k> := <nat:3> + <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> ; <var:k> := <nat:2> + <var:k> * <var:J> {{ <var:k> = <nat:3> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:k> = <nat:3> * <var:e> ^ <nat:8> + <nat:4> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 