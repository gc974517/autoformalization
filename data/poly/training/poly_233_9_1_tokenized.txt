\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:I1> := <var:c> ; <var:I2> := <var:I1> * <var:c> ; <var:I3> := <var:I2> * <var:c> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:7> ; <var:I3> := <var:I3> * <nat:7> ; <var:F> := <var:I3> <var:F> := <var:F> + <var:I1> <var:F> := <var:F> + <var:I0> \end{verbatim} Assume it to hold that $ <var:c> = <var:U> $ ahead of evaluating our set of instructions , it must be that we see $ <var:F> = <nat:7> \times <var:U> ^ <nat:3> + <nat:7> \times <var:U> + <nat:2> $ when set of commands is done executing . \end{theorem} \begin{proof} The method of proof for the set of commands can be done with standard Hoare logic . Further , we have the variable binding statement defining $ <var:c> $ into $ <var:I1>$ . This line transfers $ \{ <var:c> = <var:U> \} $ toward the postcondition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \} $ . Shifting focus toward the subsequent bit of code seen in the series of instructions , the statement defining $ <var:I1> * <var:c> $ into $ <var:I2>$ . This advances the condition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \} $ as $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \} $ . Stepping forward , we see the assignment code binding $ <var:I2> * <var:c> $ as $ <var:I3>$ . This command advances the precondition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme found in usual Hoare techniques . Moving on to the proceeding command found in our code , we have the variable binding command yielding $ <nat:2> $ toward $ <var:I0>$ . This transfers $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \} $ as the postcondition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ . This is shown through the assignment rule defined by usual Hoare logic . Now , we have the environment update code defining $ <var:I1> * <nat:7> $ to $ <var:I1>$ . This advances the precondition $ \{ <var:c> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ . This is rigorously given with the assignment inference rule defined by Hoare reasoning . Advancing to the subsequent line found in our set of instructions , we see the variable update command \verb | <var:I3> := <var:I3> * <nat:7> ; | . This command forwards $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ to $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <nat:7> \cdot <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ . This is known to be sound with the assignment scheme found in typical Hoare logic . After , we have the environment update command binding $ <var:I3$ into $ <var:F>$ . This forwards $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I3> = <nat:7> \cdot <var:U> ^ <nat:3> \land <var:I0> = <nat:2> \} $ to $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:2> \land <var:F> = <nat:7> \cdot <var:U> ^ <nat:3> \} $ . Observing the subsequent line seen in the code segment , the variable update line \verb | <var:F> := <var:F> + <var:I1> | . This takes $ \{ <var:c> = <var:U> \land <var:I1> = <nat:7> \cdot <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:2> \land <var:F> = <nat:7> \cdot <var:U> ^ <nat:3> \} $ as the postcondition $ \{ <var:c> = <var:U> \land <var:I0> = <nat:2> \land <var:F> = <nat:7> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> \} $ . Advancing to the next step , we have the environment update command \verb | <var:F> := <var:F> + <var:I0> | . This code transfers the condition $ \{ <var:c> = <var:U> \land <var:I0> = <nat:2> \land <var:F> = <nat:7> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> \} $ toward $ \{ <var:c> = <var:U> \land <var:F> = <nat:7> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> + <nat:2> \} $ . This is known to be sound with the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:c> = <var:U> }} <var:I1> := <var:c> ; <var:I2> := <var:I1> * <var:c> ; <var:I3> := <var:I2> * <var:c> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:7> ; <var:I3> := <var:I3> * <nat:7> ; <var:F> := <var:I3> <var:F> := <var:F> + <var:I1> <var:F> := <var:F> + <var:I0> {{ <var:F> = <nat:7> * <var:U> ^ <nat:3> + <nat:7> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <nat:7> * <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <var:U> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <nat:7> * <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I3> = <nat:7> * <var:U> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I1> = <nat:7> * <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I0> = <nat:2> /\ <var:F> = <nat:7> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:I0> = <nat:2> /\ <var:F> = <nat:7> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:U> /\ <var:F> = <nat:7> * <var:U> ^ <nat:3> + <nat:7> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 