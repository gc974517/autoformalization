\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:V> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:3> ; <var:n> := <var:m1> <var:n> := <var:n> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( with some natural numbers $ <var:Y> $ ) that we have $ <var:V> = <var:Y> $ before the evaluation of our segment of code , it follows that $ <var:n> = <nat:3> \cdot <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is done by Hoare reasoning . Jumping to the following pieces of code in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:Y> \} & <var:m1> := <var:V> & \{ <var:V> = <var:Y> \land <var:m1> = <var:Y> \} \\ \{ <var:V> = <var:Y> \land <var:m1> = <var:Y> \} & <var:m0> := <nat:3> & \{ <var:V> = <var:Y> \land <var:m1> = <var:Y> \land <var:m0> = <nat:3> \} \\ \{ <var:V> = <var:Y> \land <var:m1> = <var:Y> \land <var:m0> = <nat:3> \} & <var:m1> := <var:m1> * <nat:3> & \{ <var:V> = <var:Y> \land <var:m1> = <nat:3> \times <var:Y> \land <var:m0> = <nat:3> \} \\ \{ <var:V> = <var:Y> \land <var:m1> = <nat:3> \times <var:Y> \land <var:m0> = <nat:3> \} & <var:n> := <var:m1& \{ <var:V> = <var:Y> \land <var:m0> = <nat:3> \land <var:n> = <nat:3> \times <var:Y> \} \end{tabular} This is deduced by the assignment rule in Hoare techniques . Following , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:Y> \} & <var:m1> := <var:V> & \{ <var:V> = <var:Y> \land <var:m1> = <var:Y> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:V> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:3> ; <var:n> := <var:m1> <var:n> := <var:n> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:V> = <var:Y> }} <def:poly> {{ <var:n> = <nat:3> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:m1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:m1> = <var:Y> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:m1> = <nat:3> * <var:Y> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:m0> = <nat:3> /\ <var:n> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:n> = <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 