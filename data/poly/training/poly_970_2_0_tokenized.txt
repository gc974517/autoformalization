\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:H0> := <nat:2> ; <var:G> := <var:H0> \end{verbatim} Assume it to be that $ <var:w> = <var:F> $ ahead of the execution of our list of commands , then we see $ <var:G> = <nat:2> $ after code segment terminates . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:w> = <var:F> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:w> = <var:F> \land <var:H0> = <nat:2> \} \\ <var:G> := <var:H0> \\ \{ <var:w> = <var:F> \land <var:G> = <nat:2> \} \end{eqnarray} Given the above , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:w> = <var:F> }} <var:H0> := <nat:2> ; <var:G> := <var:H0> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 