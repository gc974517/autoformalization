\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:2> + <var:J> * <var:j> ; <var:J> := <var:J> * <var:j> ; <var:J> := <nat:3> + <var:J> * <var:j> ; <var:J> := <nat:2> + <var:J> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Assume that $ <var:j> = <var:X> $ ahead of the execution of the set of commands it follows that $ <var:J> = <nat:3> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> + <nat:2> $ when set of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is given by typical Hoare logic . Paying attention to the upcoming piece of code seen in our set of instructions , we have \begin{eqnarray} \{ <var:j> = <var:X> \} \, <var:J> := <nat:3> \, \{ <var:j> = <var:X> \land <var:J> = <nat:3> \} \end{eqnarray} This is ensured through the variable binding scheme of Hoare reasoning . Going to the next step , we see \begin{eqnarray} \{ <var:j> = <var:X> \} \, <var:J> := <nat:3> \, \{ <var:j> = <var:X> \land <var:J> = <nat:3> \} \\ \{ <var:j> = <var:X> \land <var:J> = <nat:3> \} \, <var:J> := <nat:2> + <var:J> * <var:j> \, \{ <var:j> = <var:X> \land <var:J> = <nat:3> * <var:X> + <nat:2> \} \end{eqnarray} This is shown to be logically sound using the variable binding law from typical Hoare logic . Advancing to the subsequent line seen in our list of commands , \begin{eqnarray} \{ <var:j> = <var:X> \} \, <var:J> := <nat:3> \, \{ <var:j> = <var:X> \land <var:J> = <nat:3> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:j> = <var:X> \} \, <var:J> := <nat:3> \, \{ <var:j> = <var:X> \land <var:J> = <nat:3> \} \end{eqnarray} This is given by the binding rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:3> ; <var:J> := <nat:2> + <var:J> * <var:j> ; <var:J> := <var:J> * <var:j> ; <var:J> := <nat:3> + <var:J> * <var:j> ; <var:J> := <nat:2> + <var:J> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:j> = <var:X> }} <def:poly> {{ <var:J> = <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:J> = <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:J> = <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:J> = <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:J> = <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 