\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:2> ; <var:k> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:u> = <var:y> $ given every natural numbers $ <var:y> $ ahead of executing the code , then $ <var:k> = <nat:2> $ when list of instructions has terminated . \end{theorem} \begin{proof} The proof of our set of commands is clear by Hoare techniques . Advancing on , the assignment code \verb | <var:B0> := <nat:2> ; | . This transfers the condition $ \{ <var:u> = <var:y> \} $ to the postcondition $ \{ <var:u> = <var:y> \land <var:B0> = <nat:2> \} $ . This is sound through the assignment inference rule defined by Hoare logic . Moving forward to the next step , the variable binding line \verb | <var:k> := <var:B0> | . This advances $ \{ <var:u> = <var:y> \land <var:B0> = <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:y> \land <var:k> = <nat:2> \} $ . This is shown with the assignment scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:2> ; <var:k> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:u> = <var:y> }} <def:poly> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 