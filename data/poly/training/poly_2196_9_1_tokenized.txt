\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:V> ; <var:t2> := <var:t1> * <var:V> ; <var:t3> := <var:t2> * <var:V> ; <var:t0> := <nat:4> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:6> ; <var:c> := <var:t3> <var:c> := <var:c> + <var:t2> <var:c> := <var:c> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:V> = <var:n> $ , given all whole numbers $ <var:n> $ , ahead of executing our set of instructions , it must be that we see $ <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:V> = <var:n> \} \\ <var:t1> := <var:V> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \} \\ <var:t2> := <var:t1> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <var:n> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <var:n> ^ <nat:2> \land <var:t3> = <var:n> ^ <nat:3> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <var:n> ^ <nat:2> \land <var:t3> = <var:n> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:t2> := <var:t2> * <nat:7> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <nat:7> * <var:n> ^ <nat:2> \land <var:t3> = <var:n> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:t3> := <var:t3> * <nat:6> ; \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <nat:7> * <var:n> ^ <nat:2> \land <var:t3> = <nat:6> * <var:n> ^ <nat:3> \land <var:t0> = <nat:4> \} \\ <var:c> := <var:t3> \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t2> = <nat:7> * <var:n> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:c> = <nat:6> * <var:n> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:t2> \\ \{ <var:V> = <var:n> \land <var:t1> = <var:n> \land <var:t0> = <nat:4> \land <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:t0> \\ \{ <var:V> = <var:n> \land <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a consequence , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:V> ; <var:t2> := <var:t1> * <var:V> ; <var:t3> := <var:t2> * <var:V> ; <var:t0> := <nat:4> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:6> ; <var:c> := <var:t3> <var:c> := <var:c> + <var:t2> <var:c> := <var:c> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <var:n> ^ <nat:2> /\ <var:t3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <var:n> ^ <nat:2> /\ <var:t3> = <var:n> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <var:n> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:n> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:c> = <nat:6> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:t1> = <var:n> /\ <var:t0> = <nat:4> /\ <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:c> = <nat:6> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 