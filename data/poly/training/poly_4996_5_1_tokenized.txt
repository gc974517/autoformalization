\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:d1> := <var:b> ; <var:d0> := <nat:9> ; <var:d1> := <var:d1> * <nat:1> ; <var:m> := <var:d1> <var:m> := <var:m> + <var:d0> \end{verbatim} Allowing , for every $ <var:M> \in \mathbb{Z}^+ $ , it to be that $ <var:b> = <var:M> $ prior to the evaluation of the set of commands , then we have $ <var:m> = <nat:1> \times <var:M> + <nat:9> $ once series of instructions exits . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:b> = <var:M> \} \\ <var:d1> := <var:b> ; \\ \{ <var:b> = <var:M> \land <var:d1> = <var:M> \} \\ <var:d0> := <nat:9> ; \\ \{ <var:b> = <var:M> \land <var:d1> = <var:M> \land <var:d0> = <nat:9> \} \\ <var:d1> := <var:d1> * <nat:1> ; \\ \{ <var:b> = <var:M> \land <var:d1> = <nat:1> \cdot <var:M> \land <var:d0> = <nat:9> \} \\ <var:m> := <var:d1> \\ \{ <var:b> = <var:M> \land <var:d0> = <nat:9> \land <var:m> = <nat:1> \cdot <var:M> \} \\ <var:m> := <var:m> + <var:d0> \\ \{ <var:b> = <var:M> \land <var:m> = <nat:1> \cdot <var:M> + <nat:9> \} \end{eqnarray} Hence , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:b> = <var:M> }} <var:d1> := <var:b> ; <var:d0> := <nat:9> ; <var:d1> := <var:d1> * <nat:1> ; <var:m> := <var:d1> <var:m> := <var:m> + <var:d0> {{ <var:m> = <nat:1> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:d1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:d1> = <var:M> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:d1> = <nat:1> * <var:M> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:d0> = <nat:9> /\ <var:m> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:m> = <nat:1> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 