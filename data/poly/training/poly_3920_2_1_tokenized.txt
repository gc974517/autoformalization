\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:W0> := <nat:3> ; <var:G> := <var:W0> \end{verbatim} Assume $ <var:M> = <var:g> $ ahead of evaluating our segment of code it follows that we have $ <var:G> = <nat:3> $ when series of instructions has finished . \end{theorem} \begin{proof} Showing our claim about correctness for our code is given through Hoare reasoning . Advancing to the next step , we have the environment update code giving $ <nat:3> $ to $ <var:W0>$ . This code moves $ \{ <var:M> = <var:g> \} $ as the condition $ \{ <var:M> = <var:g> \land <var:W0> = <nat:3> \} $ . Following , we have the assignment line \verb | <var:G> := <var:W0> | . This command advances the precondition $ \{ <var:M> = <var:g> \land <var:W0> = <nat:3> \} $ into $ \{ <var:M> = <var:g> \land <var:G> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:M> = <var:g> }} <var:W0> := <nat:3> ; <var:G> := <var:W0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 