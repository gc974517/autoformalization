\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:m> ; <var:u> := <var:q1> ; <var:u> := <var:u> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Allow that $ <var:m> = <var:L> $ ahead of the evaluation of our set of instructions then we have $ <var:u> = <nat:3> \cdot <var:L> + <nat:3> $ once segment of code has terminated . \end{theorem} \begin{proof} Notice this decorated code . \begin{eqnarray} \{ <var:m> = <var:L> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:m> = <var:L> \land <var:q0> = <nat:3> \} \\ <var:q1> := <nat:3> ; \\ \{ <var:m> = <var:L> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \} \\ <var:q1> := <var:q1> * <var:m> ; \\ \{ <var:m> = <var:L> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \cdot <var:L> \} \\ <var:u> := <var:q1> ; \\ \{ <var:m> = <var:L> \land <var:q0> = <nat:3> \land <var:u> = <nat:3> \cdot <var:L> \} \\ <var:u> := <var:u> + <var:q0> \\ \{ <var:m> = <var:L> \land <var:u> = <nat:3> \cdot <var:L> + <nat:3> \} \end{eqnarray} Using typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:m> ; <var:u> := <var:q1> ; <var:u> := <var:u> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:m> = <var:L> }} <def:poly> {{ <var:u> = <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:q0> = <nat:3> /\ <var:u> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:u> = <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 