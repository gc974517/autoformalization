\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:T0> := <nat:8> ; <var:T1> := <nat:3> ; <var:T1> := <var:T1> * <var:M> ; <var:h> := <var:T1> ; <var:h> := <var:h> + <var:T0> \end{verbatim} Allow $ <var:M> = <var:E> $ ahead of the execution of our set of instructions , it must be that we have $ <var:h> = <nat:3> \cdot <var:E> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare techniques produces : \begin{eqnarray} \{ <var:M> = <var:E> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:M> = <var:E> \land <var:T0> = <nat:8> \} \\ <var:T1> := <nat:3> ; \\ \{ <var:M> = <var:E> \land <var:T0> = <nat:8> \land <var:T1> = <nat:3> \} \\ <var:T1> := <var:T1> * <var:M> ; \\ \{ <var:M> = <var:E> \land <var:T0> = <nat:8> \land <var:T1> = <nat:3> \times <var:E> \} \\ <var:h> := <var:T1> ; \\ \{ <var:M> = <var:E> \land <var:T0> = <nat:8> \land <var:h> = <nat:3> \times <var:E> \} \\ <var:h> := <var:h> + <var:T0> \\ \{ <var:M> = <var:E> \land <var:h> = <nat:3> \times <var:E> + <nat:8> \} \end{eqnarray} Given the above , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:M> = <var:E> }} <var:T0> := <nat:8> ; <var:T1> := <nat:3> ; <var:T1> := <var:T1> * <var:M> ; <var:h> := <var:T1> ; <var:h> := <var:h> + <var:T0> {{ <var:h> = <nat:3> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:T0> = <nat:8> /\ <var:h> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:h> = <nat:3> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 