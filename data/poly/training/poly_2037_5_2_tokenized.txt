\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:1> + <var:p> * <var:b> ; <var:p> := <var:p> * <var:b> ; <var:p> := <nat:2> + <var:p> * <var:b> ; <var:p> := <nat:3> + <var:p> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:b> = <var:o> $ for all positive integers $ <var:o> $ prior to evaluating this list of instructions , it holds that $ <var:p> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be given through typical Hoare reasoning . Taking a look at the subsequent line in the set of commands , we have the variable assignmet code \verb | <var:p> := <nat:4> ; | . This line forwards the precondition $ \{ <var:b> = <var:o> \} $ into $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \} $ . This is deduced by the assignment rule found in standard Hoare logic . Looking at the next bit of code in the code , the variable assignmet command \verb | <var:p> := <nat:1> + <var:p> * <var:b> ; | . This statement forwards the precondition $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \} $ toward the condition $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> + <nat:1> \} $ . This is guaranteed with the assignment rule given in Hoare reasoning . Taking another step toward the proceeding statement in our code , we have the environment update line yielding $ <var:p> * <var:b> $ as $ <var:p>$ . This takes $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> + <nat:1> \} $ to $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + \} $ . Stepping forward , we have the variable update line binding $ <nat:2> + <var:p> * <var:b> $ as $ <var:p>$ . This advances the condition $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> ^ <nat:2> + <nat:1> \times <var:o> + \} $ into $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:2> \} $ . Shifting focus toward the next line of code in the series of commands , we see the variable assignmet statement defining $ <nat:3> + <var:p> * <var:b$ toward $ <var:p>$ . This line advances $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:o> \land <var:p> = <nat:4> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:4> ; <var:p> := <nat:1> + <var:p> * <var:b> ; <var:p> := <var:p> * <var:b> ; <var:p> := <nat:2> + <var:p> * <var:b> ; <var:p> := <nat:3> + <var:p> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:b> = <var:o> }} <def:poly> {{ <var:p> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:p> = <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:p> = <nat:4> * <var:o> ^ <nat:2> + <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:p> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:p> = <nat:4> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 