\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:n0> := <nat:4> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:E> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:E> ; <var:n2> := <var:n2> * <var:E> ; <var:c> := <var:n2> ; <var:c> := <var:c> + <var:n1> ; <var:c> := <var:c> + <var:n0> \end{verbatim} Allowing that we have $ <var:E> = <var:J> $ before running the set of commands , it follows that we have $ <var:c> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> + <nat:4> $ when program executes . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:E> = <var:J> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \} \\ <var:n1> := <nat:7> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> \} \\ <var:n1> := <var:n1> * <var:E> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> * <var:J> \} \\ <var:n2> := <nat:1> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> * <var:J> \land <var:n2> = <nat:1> \} \\ <var:n2> := <var:n2> * <var:E> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> * <var:J> \land <var:n2> = <nat:1> * <var:J> \} \\ <var:n2> := <var:n2> * <var:E> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> * <var:J> \land <var:n2> = <nat:1> * <var:J> ^ <nat:2> \} \\ <var:c> := <var:n2> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:n1> = <nat:7> * <var:J> \land <var:c> = <nat:1> * <var:J> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:n1> ; \\ \{ <var:E> = <var:J> \land <var:n0> = <nat:4> \land <var:c> = <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> \} \\ <var:c> := <var:c> + <var:n0> \\ \{ <var:E> = <var:J> \land <var:c> = <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> \} \end{eqnarray} Thusly , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:E> = <var:J> }} <var:n0> := <nat:4> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:E> ; <var:n2> := <nat:1> ; <var:n2> := <var:n2> * <var:E> ; <var:n2> := <var:n2> * <var:E> ; <var:c> := <var:n2> ; <var:c> := <var:c> + <var:n1> ; <var:c> := <var:c> + <var:n0> {{ <var:c> = <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> * <var:J> /\ <var:n2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> * <var:J> /\ <var:n2> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> * <var:J> /\ <var:n2> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:7> * <var:J> /\ <var:c> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:n0> = <nat:4> /\ <var:c> = <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:J> /\ <var:c> = <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 