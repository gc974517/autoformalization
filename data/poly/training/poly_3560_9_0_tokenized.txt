\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:i1> := <nat:9> ; <var:i1> := <var:i1> * <var:F> ; <var:i2> := <nat:7> ; <var:i2> := <var:i2> * <var:F> ; <var:i2> := <var:i2> * <var:F> ; <var:G> := <var:i2> ; <var:G> := <var:G> + <var:i1> ; <var:G> := <var:G> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Assume that we have $ <var:F> = <var:n> $ ahead of running our series of instructions it follows that we have $ <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques results in : \begin{eqnarray} \{ <var:F> = <var:n> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \} \\ <var:i1> := <nat:9> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> \} \\ <var:i1> := <var:i1> * <var:F> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> * <var:n> \} \\ <var:i2> := <nat:7> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> * <var:n> \land <var:i2> = <nat:7> \} \\ <var:i2> := <var:i2> * <var:F> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> * <var:n> \land <var:i2> = <nat:7> * <var:n> \} \\ <var:i2> := <var:i2> * <var:F> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> * <var:n> \land <var:i2> = <nat:7> * <var:n> ^ <nat:2> \} \\ <var:G> := <var:i2> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:i1> = <nat:9> * <var:n> \land <var:G> = <nat:7> * <var:n> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:i1> ; \\ \{ <var:F> = <var:n> \land <var:i0> = <nat:4> \land <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> \} \\ <var:G> := <var:G> + <var:i0> \\ \{ <var:F> = <var:n> \land <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> \} \end{eqnarray} Thusly , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:i1> := <nat:9> ; <var:i1> := <var:i1> * <var:F> ; <var:i2> := <nat:7> ; <var:i2> := <var:i2> * <var:F> ; <var:i2> := <var:i2> * <var:F> ; <var:G> := <var:i2> ; <var:G> := <var:G> + <var:i1> ; <var:G> := <var:G> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:F> = <var:n> }} <def:poly> {{ <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> * <var:n> /\ <var:i2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> * <var:n> /\ <var:i2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> * <var:n> /\ <var:i2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:9> * <var:n> /\ <var:G> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:i0> = <nat:4> /\ <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:G> = <nat:7> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 