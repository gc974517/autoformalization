\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:V> ; <var:m> := <var:M1> ; <var:m> := <var:m> + <var:M0> \end{verbatim} Assuming it to hold that $ <var:V> = <var:K> $ --- for any integers $ <var:K> $ --- prior to interpreting our code segment , it must be that we have $ <var:m> = <nat:3> \cdot <var:K> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be shown using typical Hoare reasoning . Moving forward , we have the statement yielding $ <nat:1> $ to $ <var:M0>$ . This takes the condition $ \{ <var:V> = <var:K> \} $ toward $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \} $ . Paying attention to the proceeding command found in the list of instructions , we see the variable update statement defining $ <nat:3> $ into $ <var:M1>$ . This statement advances the precondition $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \} $ to $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \} $ . Immediately after , we have the variable binding command \verb | <var:M1> := <var:M1> * <var:V> ; | . This transfers $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \times <var:K> \} $ . This is shown using the assignment scheme from usual Hoare techniques . Shifting focus toward the following line contained in our set of instructions , the code \verb | <var:m> := <var:M1> ; | . This moves $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:M1> = <nat:3> \times <var:K> \} $ toward $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:m> = <nat:3> \times <var:K> \} $ . This is guaranteed using the assignment law found in standard Hoare techniques . Immediately after , the variable assignmet command \verb | <var:m> := <var:m> + <var:M0> | . This transfers $ \{ <var:V> = <var:K> \land <var:M0> = <nat:1> \land <var:m> = <nat:3> \times <var:K> \} $ into the condition $ \{ <var:V> = <var:K> \land <var:m> = <nat:3> \times <var:K> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:V> = <var:K> }} <var:M0> := <nat:1> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:V> ; <var:m> := <var:M1> ; <var:m> := <var:m> + <var:M0> {{ <var:m> = <nat:3> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:M0> = <nat:1> /\ <var:m> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:m> = <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 