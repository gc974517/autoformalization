\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:d> ; <var:i2> := <var:i1> * <var:d> ; <var:i3> := <var:i2> * <var:d> ; <var:i0> := <nat:4> ; <var:i2> := <var:i2> * <nat:5> ; <var:i3> := <var:i3> * <nat:1> ; <var:J> := <var:i3> <var:J> := <var:J> + <var:i2> <var:J> := <var:J> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allowing , for natural coefficients $ <var:V> $ , $ <var:d> = <var:V> $ ahead of evaluating our code it must be that we have $ <var:J> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be seen using standard Hoare techniques . Next , we see \verb | { <var:d> = <var:V> } <var:i1> := <var:d> { <var:d> = <var:V> \land <var:i1> = <var:V> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> } <var:i2> := <var:i1> * <var:d> { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> } <var:i3> := <var:i2> * <var:d> { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> } <var:i0> := <nat:4> { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } <var:i2> := <var:i2> * <nat:5> { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i3> = <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } <var:i3> := <var:i3> * <nat:1> { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i3> = <nat:1> \times <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i3> = <nat:1> \times <var:V> ^ <nat:3> \land <var:i0> = <nat:4> } <var:J> := <var:i3{ <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i0> = <nat:4> \land <var:J> = <nat:1> \times <var:V> ^ <nat:3> } | , \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:i0> = <nat:4> \land <var:J> = <nat:1> \times <var:V> ^ <nat:3> } <var:J> := <var:J> + <var:i2{ <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i0> = <nat:4> \land <var:J> = <nat:1> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> } | and \verb | { <var:d> = <var:V> \land <var:i1> = <var:V> \land <var:i0> = <nat:4> \land <var:J> = <nat:1> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> } <var:J> := <var:J> + <var:i0{ <var:d> = <var:V> \land <var:J> = <nat:1> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:d> ; <var:i2> := <var:i1> * <var:d> ; <var:i3> := <var:i2> * <var:d> ; <var:i0> := <nat:4> ; <var:i2> := <var:i2> * <nat:5> ; <var:i3> := <var:i3> * <nat:1> ; <var:J> := <var:i3> <var:J> := <var:J> + <var:i2> <var:J> := <var:J> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:d> = <var:V> }} <def:poly> {{ <var:J> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <var:V> ^ <nat:2> /\ <var:i3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <var:V> ^ <nat:2> /\ <var:i3> = <var:V> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:i3> = <var:V> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:V> ^ <nat:3> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:i0> = <nat:4> /\ <var:J> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:i1> = <var:V> /\ <var:i0> = <nat:4> /\ <var:J> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:J> = <nat:1> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 