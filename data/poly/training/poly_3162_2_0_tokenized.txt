\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:v0> := <nat:7> ; <var:a> := <var:v0> \end{verbatim} Given $ <var:C> = <var:I> $ prior to executing our set of instructions it follows that $ <var:a> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:C> = <var:I> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:C> = <var:I> \land <var:v0> = <nat:7> \} \\ <var:a> := <var:v0> \\ \{ <var:C> = <var:I> \land <var:a> = <nat:7> \} \end{eqnarray} Given the preceding argument , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <var:v0> := <nat:7> ; <var:a> := <var:v0> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 