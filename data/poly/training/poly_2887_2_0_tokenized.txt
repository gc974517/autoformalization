\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:W0> := <nat:3> ; <var:X> := <var:W0> \end{verbatim} Assume for all natural coefficients $ <var:I> $ that we have $ <var:L> = <var:I> $ before the evaluation of our code segment then $ <var:X> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is clear using typical Hoare logic . Stepping through , we see \begin{verbatim} { <var:L> = <var:I> } <var:W0> := <nat:3> { <var:L> = <var:I> \land <var:W0> = <nat:3> } { <var:L> = <var:I> \land <var:W0> = <nat:3> } <var:X> := <var:W0{ <var:L> = <var:I> \land <var:X> = <nat:3> } \end{verbatim} This is known to be sound through the binding law of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <var:W0> := <nat:3> ; <var:X> := <var:W0> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 