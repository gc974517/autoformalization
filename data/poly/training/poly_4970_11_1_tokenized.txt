\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as \begin{verbatim} <var:M1> := <var:k> ; <var:M2> := <var:M1> * <var:k> ; <var:M3> := <var:M2> * <var:k> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:6> ; <var:W> := <var:M3> <var:W> := <var:W> + <var:M2> <var:W> := <var:W> + <var:M1> <var:W> := <var:W> + <var:M0> \end{verbatim} Allowing that $ <var:k> = <var:U> $ , given every positive coefficients $ <var:U> $ , before evaluating our code segment then we see $ <var:W> = <nat:6> \times <var:U> ^ <nat:3> + <nat:6> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is done with typical Hoare logic . Advancing , \[ \begin{tabular} {rcl} \{ <var:k> = <var:U> \} & <var:M1> := <var:k> & \{ <var:k> = <var:U> \land <var:M1> = <var:U> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <var:U> \} & <var:M2> := <var:M1> * <var:k> & \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \} & <var:M3> := <var:M2> * <var:k> & \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \} & <var:M0> := <nat:8> & \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} & <var:M1> := <var:M1> * <nat:2> & \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} & <var:M2> := <var:M2> * <nat:6> & \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M3> = <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} & <var:M3> := <var:M3> * <nat:6> & \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M3> = <nat:6> * <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M3> = <nat:6> * <var:U> ^ <nat:3> \land <var:M0> = <nat:8> \} & <var:W> := <var:M3& \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M0> = <nat:8> \land <var:W> = <nat:6> * <var:U> ^ <nat:3> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M2> = <nat:6> * <var:U> ^ <nat:2> \land <var:M0> = <nat:8> \land <var:W> = <nat:6> * <var:U> ^ <nat:3> \} & <var:W> := <var:W> + <var:M2& \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M0> = <nat:8> \land <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> \} \\ \{ <var:k> = <var:U> \land <var:M1> = <nat:2> * <var:U> \land <var:M0> = <nat:8> \land <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> \} & <var:W> := <var:W> + <var:M1& \{ <var:k> = <var:U> \land <var:M0> = <nat:8> \land <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:2> * <var:U> \} \end{tabular} Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:U> \} & <var:M1> := <var:k> & \{ <var:k> = <var:U> \land <var:M1> = <var:U> \} \end{tabular} This is rigorously given with the scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <var:M1> := <var:k> ; <var:M2> := <var:M1> * <var:k> ; <var:M3> := <var:M2> * <var:k> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:6> ; <var:M3> := <var:M3> * <nat:6> ; <var:W> := <var:M3> <var:W> := <var:W> + <var:M2> <var:W> := <var:W> + <var:M1> <var:W> := <var:W> + <var:M0> {{ <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <var:U> /\ <var:M2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <var:U> /\ <var:M2> = <var:U> ^ <nat:2> /\ <var:M3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <var:U> /\ <var:M2> = <var:U> ^ <nat:2> /\ <var:M3> = <var:U> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <nat:2> * <var:U> /\ <var:M2> = <var:U> ^ <nat:2> /\ <var:M3> = <var:U> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <nat:2> * <var:U> /\ <var:M2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:M3> = <var:U> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <nat:2> * <var:U> /\ <var:M2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:M3> = <nat:6> * <var:U> ^ <nat:3> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <nat:2> * <var:U> /\ <var:M2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:M0> = <nat:8> /\ <var:W> = <nat:6> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M1> = <nat:2> * <var:U> /\ <var:M0> = <nat:8> /\ <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:M0> = <nat:8> /\ <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:W> = <nat:6> * <var:U> ^ <nat:3> + <nat:6> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 