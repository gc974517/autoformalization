\begin{document} \begin{theorem} Consider a set of instructions as \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:U> ; <var:N2> := <nat:7> ; <var:N2> := <var:N2> * <var:U> ; <var:N2> := <var:N2> * <var:U> ; <var:f> := <var:N2> ; <var:f> := <var:f> + <var:N1> ; <var:f> := <var:f> + <var:N0> \end{verbatim} Given it to hold that $ <var:U> = <var:S> $ ( for any integers $ <var:S> $ ) prior to running our list of instructions , it holds that we see $ <var:f> = <nat:7> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:S> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \} \end{eqnarray} Furthering interpreting this set of instructions results in : \begin{eqnarray} <var:N1> := <nat:1> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \} \\ <var:N1> := <var:N1> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \cdot <var:S> \} \\ <var:N2> := <nat:7> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:7> \} \\ <var:N2> := <var:N2> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:7> \cdot <var:S> \} \\ <var:N2> := <var:N2> * <var:U> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:N2> = <nat:7> \cdot <var:S> ^ <nat:2> \} \\ <var:f> := <var:N2> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:N1> = <nat:1> \cdot <var:S> \land <var:f> = <nat:7> \cdot <var:S> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:N1> ; \\ \{ <var:U> = <var:S> \land <var:N0> = <nat:3> \land <var:f> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> \} \\ <var:f> := <var:f> + <var:N0> \\ \{ <var:U> = <var:S> \land <var:f> = <nat:7> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:3> \} \end{eqnarray} Applying standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:U> = <var:S> }} <var:N0> := <nat:3> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:U> ; <var:N2> := <nat:7> ; <var:N2> := <var:N2> * <var:U> ; <var:N2> := <var:N2> * <var:U> ; <var:f> := <var:N2> ; <var:f> := <var:f> + <var:N1> ; <var:f> := <var:f> + <var:N0> {{ <var:f> = <nat:7> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> * <var:S> /\ <var:N2> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:1> * <var:S> /\ <var:f> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:N0> = <nat:3> /\ <var:f> = <nat:7> * <var:S> ^ <nat:2> + <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:S> /\ <var:f> = <nat:7> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 