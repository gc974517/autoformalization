\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:9> ; <var:C> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Assuming , given integers $ <var:K> $ , that $ <var:Q> = <var:K> $ prior to interpreting this series of commands , then $ <var:C> = <nat:9> $ when list of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:K> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:Q> = <var:K> \land <var:O0> = <nat:9> \} \\ <var:C> := <var:O0> \\ \{ <var:Q> = <var:K> \land <var:C> = <nat:9> \} \end{eqnarray} Applying standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:9> ; <var:C> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Q> = <var:K> }} <def:poly> {{ <var:C> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:C> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 