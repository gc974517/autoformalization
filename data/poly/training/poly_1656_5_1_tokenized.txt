\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:a> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:x> := <var:Z1> <var:x> := <var:x> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given any positive numbers $ <var:p> $ ) that we have $ <var:a> = <var:p> $ prior to evaluating our code then $ <var:x> = <nat:3> \cdot <var:p> + <nat:8> $ once set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:p> \} \\ <var:Z1> := <var:a> ; \\ \{ <var:a> = <var:p> \land <var:Z1> = <var:p> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:a> = <var:p> \land <var:Z1> = <var:p> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <var:Z1> * <nat:3> ; \\ \{ <var:a> = <var:p> \land <var:Z1> = <nat:3> \cdot <var:p> \land <var:Z0> = <nat:8> \} \\ <var:x> := <var:Z1> \\ \{ <var:a> = <var:p> \land <var:Z0> = <nat:8> \land <var:x> = <nat:3> \cdot <var:p> \} \\ <var:x> := <var:x> + <var:Z0> \\ \{ <var:a> = <var:p> \land <var:x> = <nat:3> \cdot <var:p> + <nat:8> \} \end{eqnarray} Applying usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:a> ; <var:Z0> := <nat:8> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:x> := <var:Z1> <var:x> := <var:x> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:a> = <var:p> }} <def:poly> {{ <var:x> = <nat:3> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:Z1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:Z1> = <var:p> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:Z1> = <nat:3> * <var:p> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:Z0> = <nat:8> /\ <var:x> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:x> = <nat:3> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 