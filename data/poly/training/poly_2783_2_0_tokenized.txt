\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:8> ; <var:E> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:j> = <var:H> $ assuming some positive integer coefficients $ <var:H> $ before evaluating our code segment then we see $ <var:E> = <nat:8> $ after set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for this series of instructions is done using standard Hoare logic . Going forward , we have \verb | { <var:j> = <var:H> } <var:u0> := <nat:8> { <var:j> = <var:H> \land <var:u0> = <nat:8> } | and \verb | { <var:j> = <var:H> \land <var:u0> = <nat:8> } <var:E> := <var:u0{ <var:j> = <var:H> \land <var:E> = <nat:8> } | . This is guaranteed with the variable update rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:E> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:j> = <var:H> }} <def:poly> {{ <var:E> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:E> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 