\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:I> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:1> ; <var:s> := <var:f1> <var:s> := <var:s> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow ( letting $ <var:Z> \in \mathbb{N} $ ) that we have $ <var:I> = <var:Z> $ ahead of the evaluation of our code , it holds that we see $ <var:s> = <nat:1> \times <var:Z> + <nat:5> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning returns : \begin{eqnarray} \{ <var:I> = <var:Z> \} \\ <var:f1> := <var:I> ; \\ \{ <var:I> = <var:Z> \land <var:f1> = <var:Z> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:I> = <var:Z> \land <var:f1> = <var:Z> \land <var:f0> = <nat:5> \} \\ <var:f1> := <var:f1> * <nat:1> ; \\ \{ <var:I> = <var:Z> \land <var:f1> = <nat:1> * <var:Z> \land <var:f0> = <nat:5> \} \\ <var:s> := <var:f1> \\ \{ <var:I> = <var:Z> \land <var:f0> = <nat:5> \land <var:s> = <nat:1> * <var:Z> \} \\ <var:s> := <var:s> + <var:f0> \\ \{ <var:I> = <var:Z> \land <var:s> = <nat:1> * <var:Z> + <nat:5> \} \end{eqnarray} As a consequence , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:I> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:1> ; <var:s> := <var:f1> <var:s> := <var:s> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:s> = <nat:1> * <var:Z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:f1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:f1> = <var:Z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:f1> = <nat:1> * <var:Z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:f0> = <nat:5> /\ <var:s> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:s> = <nat:1> * <var:Z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 