\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:6> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:U> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:U> = <var:Z> $ , given every $ <var:Z> \in \mathbb{N} $ , before evaluating this series of commands , then $ <var:n> = <nat:6> * <var:Z> + <nat:6> $ when segment of code has executed . \end{theorem} \begin{proof} The method of proof for the program is clear through standard Hoare logic . Advancing on , we have \begin{eqnarray} \{ <var:U> = <var:Z> \} \, <var:N0> := <nat:6> \, \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \} \\ \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \} \, <var:N1> := <nat:6> \, \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \land <var:N1> = <nat:6> \} \\ \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \land <var:N1> = <nat:6> \} \, <var:N1> := <var:N1> * <var:U> \, \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \land <var:N1> = <nat:6> \cdot <var:Z> \} \\ \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \land <var:N1> = <nat:6> \cdot <var:Z> \} \, <var:n> := <var:N1> \, \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \land <var:n> = <nat:6> \cdot <var:Z> \} \end{eqnarray} This is shown to be logically sound through the binding rule given in typical Hoare techniques . Advancing , we have \begin{eqnarray} \{ <var:U> = <var:Z> \} \, <var:N0> := <nat:6> \, \{ <var:U> = <var:Z> \land <var:N0> = <nat:6> \} \end{eqnarray} This is known to be sound through the binding scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N0> := <nat:6> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:U> ; <var:n> := <var:N1> ; <var:n> := <var:n> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:U> = <var:Z> }} <def:poly> {{ <var:n> = <nat:6> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:N0> = <nat:6> /\ <var:N1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:N0> = <nat:6> /\ <var:n> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:n> = <nat:6> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 