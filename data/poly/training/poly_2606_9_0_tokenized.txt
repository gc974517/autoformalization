\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:4> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:f> := <var:N2> ; <var:f> := <var:f> + <var:N1> ; <var:f> := <var:f> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming for all positive integers $ <var:m> $ $ <var:Y> = <var:m> $ before evaluating this code segment it must be that we have $ <var:f> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> $ when series of instructions finishes . \end{theorem} \begin{proof} Applying standard Hoare logic yields : \begin{eqnarray} \{ <var:Y> = <var:m> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \} \\ <var:N1> := <nat:4> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \} \\ <var:N1> := <var:N1> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \cdot <var:m> \} \\ <var:N2> := <nat:1> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \cdot <var:m> \land <var:N2> = <nat:1> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \cdot <var:m> \land <var:N2> = <nat:1> \cdot <var:m> \} \\ <var:N2> := <var:N2> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \cdot <var:m> \land <var:N2> = <nat:1> \cdot <var:m> ^ <nat:2> \} \\ <var:f> := <var:N2> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:N1> = <nat:4> \cdot <var:m> \land <var:f> = <nat:1> \cdot <var:m> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:N1> ; \\ \{ <var:Y> = <var:m> \land <var:N0> = <nat:4> \land <var:f> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> \} \\ <var:f> := <var:f> + <var:N0> \\ \{ <var:Y> = <var:m> \land <var:f> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:N1> := <nat:4> ; <var:N1> := <var:N1> * <var:Y> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:Y> ; <var:N2> := <var:N2> * <var:Y> ; <var:f> := <var:N2> ; <var:f> := <var:f> + <var:N1> ; <var:f> := <var:f> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Y> = <var:m> }} <def:poly> {{ <var:f> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> * <var:m> /\ <var:N2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> * <var:m> /\ <var:N2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> * <var:m> /\ <var:N2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:4> * <var:m> /\ <var:f> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:N0> = <nat:4> /\ <var:f> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:f> = <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 