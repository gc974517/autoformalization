\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:9> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:G> ; <var:u> := <var:a1> ; <var:u> := <var:u> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Assuming it to be that $ <var:G> = <var:J> $ ahead of running the list of commands , it follows that $ <var:u> = <nat:4> * <var:J> + <nat:9> $ once code has finished . \end{theorem} \begin{proof} The argument for our program is given using Hoare techniques . Focusing on the subsequent line of code in the code , the binding code \verb | <var:a0> := <nat:9> ; | . This moves the condition $ \{ <var:G> = <var:J> \} $ into the postcondition $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \} $ . Jumping to the proceeding line contained in our list of instructions , the variable assignmet line \verb | <var:a1> := <nat:4> ; | . This advances $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \} $ as $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:4> \} $ . This is known to be sound with the assignment law in Hoare techniques . Moving on , we see the variable binding statement giving $ <var:a1> * <var:G> $ toward $ <var:a1>$ . This code moves $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:4> \} $ toward the postcondition $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:4> \times <var:J> \} $ . Considering the subsequent piece of code found in the set of instructions , we have the variable assignmet statement assigning $ <var:a1> $ to $ <var:u>$ . This line forwards $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:a1> = <nat:4> \times <var:J> \} $ as the postcondition $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:u> = <nat:4> \times <var:J> \} $ . This is known to be sound through the assignment inference rule obtained from typical Hoare reasoning . Next , we have the command binding $ <var:u> + <var:a0$ into $ <var:u>$ . This code moves the condition $ \{ <var:G> = <var:J> \land <var:a0> = <nat:9> \land <var:u> = <nat:4> \times <var:J> \} $ as the condition $ \{ <var:G> = <var:J> \land <var:u> = <nat:4> \times <var:J> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:9> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:G> ; <var:u> := <var:a1> ; <var:u> := <var:u> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <def:poly> {{ <var:u> = <nat:4> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a0> = <nat:9> /\ <var:a1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:a0> = <nat:9> /\ <var:u> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:u> = <nat:4> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 