\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:7> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:U> ; <var:Y> := <var:u1> ; <var:Y> := <var:Y> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:U> = <var:c> $ ahead of evaluating the set of instructions , it must be that $ <var:Y> = <nat:1> \cdot <var:c> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands is done using typical Hoare techniques . Advancing on , we have the binding code giving $ <nat:7> $ to $ <var:u0>$ . This command forwards the precondition $ \{ <var:U> = <var:c> \} $ as $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \} $ . This is guaranteed using the assignment inference rule given in typical Hoare techniques . Considering the upcoming piece of code in the set of instructions , we have the binding command \verb | <var:u1> := <nat:1> ; | . This advances $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:u1> = <nat:1> \} $ . Focusing on the next step seen in our set of commands , we see the command \verb | <var:u1> := <var:u1> * <var:U> ; | . This moves the precondition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:u1> = <nat:1> \} $ as the condition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:u1> = <nat:1> * <var:c> \} $ . This is shown to be logically sound through the assignment rule in Hoare reasoning . Moving forward , the binding statement defining $ <var:u1> $ toward $ <var:Y>$ . This statement redefines the precondition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:u1> = <nat:1> * <var:c> \} $ as the postcondition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:Y> = <nat:1> * <var:c> \} $ . Honing in on the next line seen in the code segment , we see the variable update statement giving $ <var:Y> + <var:u0$ into $ <var:Y>$ . This moves the precondition $ \{ <var:U> = <var:c> \land <var:u0> = <nat:7> \land <var:Y> = <nat:1> * <var:c> \} $ into the condition $ \{ <var:U> = <var:c> \land <var:Y> = <nat:1> * <var:c> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:7> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:U> ; <var:Y> := <var:u1> ; <var:Y> := <var:Y> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <def:poly> {{ <var:Y> = <nat:1> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:u0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:u0> = <nat:7> /\ <var:u1> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:u0> = <nat:7> /\ <var:Y> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:Y> = <nat:1> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 