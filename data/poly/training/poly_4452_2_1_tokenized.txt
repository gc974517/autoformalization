\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:8> ; <var:V> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:w> = <var:U> $ ahead of evaluating the segment of code , it follows that we have $ <var:V> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is accomplished with usual Hoare techniques . Going to the next step , \begin{verbatim} { <var:w> = <var:U> } <var:I0> := <nat:8> { <var:w> = <var:U> \land <var:I0> = <nat:8> } { <var:w> = <var:U> \land <var:I0> = <nat:8> } <var:V> := <var:I0{ <var:w> = <var:U> \land <var:V> = <nat:8> } \end{verbatim} This is known to be sound by the assignment inference rule found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:V> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:w> = <var:U> }} <def:poly> {{ <var:V> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:U> /\ <var:V> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 