\begin{document} \begin{theorem} Define a set of commands as follows \begin{verbatim} <var:k1> := <var:z> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:4> ; <var:c> := <var:k1> <var:c> := <var:c> + <var:k0> \end{verbatim} Given it to hold that $ <var:z> = <var:v> $ , given any positive integer coefficients $ <var:v> $ , ahead of running the code then we see $ <var:c> = <nat:4> \cdot <var:v> + <nat:8> $ once segment of code has terminated . \end{theorem} \begin{proof} Proving correctness for this code segment is clear using usual Hoare techniques . Going to the next step , \begin{eqnarray} \{ <var:z> = <var:v> \} \, <var:k1> := <var:z> \, \{ <var:z> = <var:v> \land <var:k1> = <var:v> \} \\ \{ <var:z> = <var:v> \land <var:k1> = <var:v> \} \, <var:k0> := <nat:8> \, \{ <var:z> = <var:v> \land <var:k1> = <var:v> \land <var:k0> = <nat:8> \} \\ \{ <var:z> = <var:v> \land <var:k1> = <var:v> \land <var:k0> = <nat:8> \} \, <var:k1> := <var:k1> * <nat:4> \, \{ <var:z> = <var:v> \land <var:k1> = <nat:4> \cdot <var:v> \land <var:k0> = <nat:8> \} \\ \{ <var:z> = <var:v> \land <var:k1> = <nat:4> \cdot <var:v> \land <var:k0> = <nat:8> \} \, <var:c> := <var:k1\, \{ <var:z> = <var:v> \land <var:k0> = <nat:8> \land <var:c> = <nat:4> \cdot <var:v> \} \end{eqnarray} This is shown to be logically sound through the environment update rule of standard Hoare techniques . Advancing to the subsequent step in the series of commands , we have \begin{eqnarray} \{ <var:z> = <var:v> \} \, <var:k1> := <var:z> \, \{ <var:z> = <var:v> \land <var:k1> = <var:v> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:z> = <var:v> }} <var:k1> := <var:z> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:4> ; <var:c> := <var:k1> <var:c> := <var:c> + <var:k0> {{ <var:c> = <nat:4> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:k1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:k1> = <var:v> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:k1> = <nat:4> * <var:v> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:k0> = <nat:8> /\ <var:c> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:v> /\ <var:c> = <nat:4> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 