\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:p> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:p> ; <var:s2> := <var:s2> * <var:p> ; <var:F> := <var:s2> ; <var:F> := <var:F> + <var:s1> ; <var:F> := <var:F> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:p> = <var:n> $ ahead of interpreting the segment of code , then we see $ <var:F> = <nat:2> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:7> $ after code terminates . \end{theorem} \begin{proof} The argument for the series of instructions is shown by Hoare techniques . Going forward , we see \verb | { <var:p> = <var:n> } <var:s0> := <nat:7> { <var:p> = <var:n> \land <var:s0> = <nat:7> } | and \verb | { <var:p> = <var:n> \land <var:s0> = <nat:7> } <var:s1> := <nat:5> { <var:p> = <var:n> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> } | . This is guaranteed by the binding law given by Hoare logic . Moving on to the subsequent statements in the program , we see \verb | { <var:p> = <var:n> } <var:s0> := <nat:7> { <var:p> = <var:n> \land <var:s0> = <nat:7> } | and \verb | { <var:p> = <var:n> \land <var:s0> = <nat:7> } <var:s1> := <nat:5> { <var:p> = <var:n> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> } | . This is deduced with the assignment scheme in standard Hoare techniques . Observing the upcoming bits of codecontained in the program , we have \verb | { <var:p> = <var:n> } <var:s0> := <nat:7> { <var:p> = <var:n> \land <var:s0> = <nat:7> } | , \verb | { <var:p> = <var:n> \land <var:s0> = <nat:7> } <var:s1> := <nat:5> { <var:p> = <var:n> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> } | and \verb | { <var:p> = <var:n> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> } <var:s1> := <var:s1> * <var:p> { <var:p> = <var:n> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> * <var:n> } | . This is shown by the binding law given in standard Hoare logic . Immediately following , we have \verb | { <var:p> = <var:n> } <var:s0> := <nat:7> { <var:p> = <var:n> \land <var:s0> = <nat:7> } | . This is shown to be logically sound by the assignment rule found in Hoare reasoning . Moving forward to the upcoming step in our series of commands , we have \verb | { <var:p> = <var:n> } <var:s0> := <nat:7> { <var:p> = <var:n> \land <var:s0> = <nat:7> } | . This is ensured through the environment update scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:7> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:p> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:p> ; <var:s2> := <var:s2> * <var:p> ; <var:F> := <var:s2> ; <var:F> := <var:F> + <var:s1> ; <var:F> := <var:F> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:p> = <var:n> }} <def:poly> {{ <var:F> = <nat:2> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:n> /\ <var:s2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:n> /\ <var:s2> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:n> /\ <var:s2> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:n> /\ <var:F> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:s0> = <nat:7> /\ <var:F> = <nat:2> * <var:n> ^ <nat:2> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:F> = <nat:2> * <var:n> ^ <nat:2> + <nat:5> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 