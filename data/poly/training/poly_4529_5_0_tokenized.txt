\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:8> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:r> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:r> = <var:l> $ given some $ <var:l> $ before executing the code , it follows that we see $ <var:W> = <nat:2> \times <var:l> + <nat:8> $ after series of commands terminates . \end{theorem} \begin{proof} The method of proof for the series of instructions can be shown with usual Hoare reasoning . Moving forward , the statement defining $ <nat:8> $ to $ <var:X0>$ . This command takes $ \{ <var:r> = <var:l> \} $ to the condition $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \} $ . Moving forward to the following line of code seen in our code segment , we see the environment update line \verb | <var:X1> := <nat:2> ; | . This code transfers $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \} $ to $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:X1> = <nat:2> \} $ . This is given using the assignment rule from standard Hoare logic . Paying attention to the following command contained in the code , the environment update code letting $ <var:X1> * <var:r> $ as $ <var:X1>$ . This code moves the condition $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:X1> = <nat:2> \} $ as the condition $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:X1> = <nat:2> * <var:l> \} $ . Keeping momentum , the variable assignmet line assigning $ <var:X1> $ into $ <var:W>$ . This redefines the precondition $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:X1> = <nat:2> * <var:l> \} $ to $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:W> = <nat:2> * <var:l> \} $ . Now , the assignment command assigning $ <var:W> + <var:X0$ toward $ <var:W>$ . This advances $ \{ <var:r> = <var:l> \land <var:X0> = <nat:8> \land <var:W> = <nat:2> * <var:l> \} $ into the postcondition $ \{ <var:r> = <var:l> \land <var:W> = <nat:2> * <var:l> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:8> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:r> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:r> = <var:l> }} <def:poly> {{ <var:W> = <nat:2> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:X0> = <nat:8> /\ <var:W> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:W> = <nat:2> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 