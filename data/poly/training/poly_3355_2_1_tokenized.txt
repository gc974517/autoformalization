\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:w0> := <nat:7> ; <var:u> := <var:w0> \end{verbatim} Allowing that $ <var:O> = <var:c> $ before interpreting this series of instructions it follows that we see $ <var:u> = <nat:7> $ after program executes . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is demonstrated with the below decorated program . \begin{eqnarray} \{ <var:O> = <var:c> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:O> = <var:c> \land <var:w0> = <nat:7> \} \\ <var:u> := <var:w0> \\ \{ <var:O> = <var:c> \land <var:u> = <nat:7> \} \end{eqnarray} Using standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:O> = <var:c> }} <var:w0> := <nat:7> ; <var:u> := <var:w0> {{ <var:u> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:u> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 