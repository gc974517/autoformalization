\begin{document} \begin{theorem} Take the following series of commands such that \begin{verbatim} <var:h1> := <var:k> ; <var:h2> := <var:h1> * <var:k> ; <var:h3> := <var:h2> * <var:k> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:3> ; <var:O> := <var:h3> <var:O> := <var:O> + <var:h2> <var:O> := <var:O> + <var:h1> <var:O> := <var:O> + <var:h0> \end{verbatim} Given it to hold that $ <var:k> = <var:z> $ for some positive integers $ <var:z> $ ahead of the execution of this series of commands , it holds that we have $ <var:O> = <nat:3> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the segment of code can be seen through Hoare logic . Moving forward , we have the variable binding line \verb | <var:h1> := <var:k> ; | . This moves the condition $ \{ <var:k> = <var:z> \} $ into $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \} $ . Stepping forward , we have the variable update statement \verb | <var:h2> := <var:h1> * <var:k> ; | . This statement advances $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \} $ as $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \} $ . Moving onward , the assignment code assigning $ <var:h2> * <var:k> $ into $ <var:h3>$ . This takes $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \} $ . This is ensured with the assignment inference rule in usual Hoare reasoning . Advancing , we see the variable assignmet command yielding $ <nat:5> $ toward $ <var:h0>$ . This moves the condition $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \} $ into the condition $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is given by the assignment law given in typical Hoare techniques . Stepping forward , we have the variable binding statement yielding $ <var:h1> * <nat:1> $ as $ <var:h1>$ . This line moves the condition $ \{ <var:k> = <var:z> \land <var:h1> = <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ toward $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is shown using the assignment inference rule found in standard Hoare techniques . Moving forward to the proceeding line seen in our list of instructions , we see the statement \verb | <var:h2> := <var:h2> * <nat:2> ; | . This command moves the condition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . This is ensured by the assignment rule of Hoare logic . Shifting focus toward the upcoming line of code contained in our segment of code , we have the environment update statement yielding $ <var:h3> * <nat:3> $ into $ <var:h3>$ . This statement takes $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h3> = <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ into the condition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:3> \cdot <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ . Immediately after , we have the variable update command \verb | <var:O> := <var:h3> | . This line redefines the precondition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h3> = <nat:3> \cdot <var:z> ^ <nat:3> \land <var:h0> = <nat:5> \} $ into the postcondition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> \} $ . This is guaranteed by the assignment inference rule in standard Hoare logic . Taking another step toward the upcoming command contained in the set of commands , we have the line yielding $ <var:O> + <var:h2$ into $ <var:O>$ . This statement redefines the condition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h2> = <nat:2> \cdot <var:z> ^ <nat:2> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> \} $ . Moving on to the following step in the list of instructions , we see the line defining $ <var:O> + <var:h1$ to $ <var:O>$ . This takes $ \{ <var:k> = <var:z> \land <var:h1> = <nat:1> \cdot <var:z> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> \} $ to $ \{ <var:k> = <var:z> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> \} $ . This is shown to be logically sound through the assignment inference rule from usual Hoare reasoning . Shifting focus toward the proceeding statement seen in our list of instructions , we see the variable assignmet line \verb | <var:O> := <var:O> + <var:h0> | . This transfers $ \{ <var:k> = <var:z> \land <var:h0> = <nat:5> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> \} $ toward the postcondition $ \{ <var:k> = <var:z> \land <var:O> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:k> = <var:z> }} <var:h1> := <var:k> ; <var:h2> := <var:h1> * <var:k> ; <var:h3> := <var:h2> * <var:k> ; <var:h0> := <nat:5> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:3> ; <var:O> := <var:h3> <var:O> := <var:O> + <var:h2> <var:O> := <var:O> + <var:h1> <var:O> := <var:O> + <var:h0> {{ <var:O> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <var:z> /\ <var:h2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <var:z> /\ <var:h2> = <var:z> ^ <nat:2> /\ <var:h3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <var:z> /\ <var:h2> = <var:z> ^ <nat:2> /\ <var:h3> = <var:z> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <nat:1> * <var:z> /\ <var:h2> = <var:z> ^ <nat:2> /\ <var:h3> = <var:z> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <nat:1> * <var:z> /\ <var:h2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:h3> = <var:z> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <nat:1> * <var:z> /\ <var:h2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:h3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <nat:1> * <var:z> /\ <var:h2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:h0> = <nat:5> /\ <var:O> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h1> = <nat:1> * <var:z> /\ <var:h0> = <nat:5> /\ <var:O> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:h0> = <nat:5> /\ <var:O> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:O> = <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 