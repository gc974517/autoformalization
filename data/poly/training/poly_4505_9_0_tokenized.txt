\begin{document} \begin{theorem} Let the following code as \begin{verbatim} <var:t0> := <nat:9> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:T> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:u> := <var:t2> ; <var:u> := <var:u> + <var:t1> ; <var:u> := <var:u> + <var:t0> \end{verbatim} Assuming --- given some $ <var:Z> \in \mathbb{Z}^+ $ --- it to hold that $ <var:T> = <var:Z> $ ahead of running the series of instructions it must be that we have $ <var:u> = <nat:8> \times <var:Z> ^ <nat:2> + <nat:8> \times <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare logic yields : \begin{eqnarray} \{ <var:T> = <var:Z> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \} \\ <var:t1> := <nat:8> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \} \\ <var:t1> := <var:t1> * <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:Z> \} \\ <var:t2> := <nat:8> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:Z> \land <var:t2> = <nat:8> \} \\ <var:t2> := <var:t2> * <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:Z> \land <var:t2> = <nat:8> \times <var:Z> \} \\ <var:t2> := <var:t2> * <var:T> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:Z> \land <var:t2> = <nat:8> \times <var:Z> ^ <nat:2> \} \\ <var:u> := <var:t2> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:t1> = <nat:8> \times <var:Z> \land <var:u> = <nat:8> \times <var:Z> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:t1> ; \\ \{ <var:T> = <var:Z> \land <var:t0> = <nat:9> \land <var:u> = <nat:8> \times <var:Z> ^ <nat:2> + <nat:8> \times <var:Z> \} \\ <var:u> := <var:u> + <var:t0> \\ \{ <var:T> = <var:Z> \land <var:u> = <nat:8> \times <var:Z> ^ <nat:2> + <nat:8> \times <var:Z> + <nat:9> \} \end{eqnarray} Hence , our list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:t0> := <nat:9> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:T> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:T> ; <var:t2> := <var:t2> * <var:T> ; <var:u> := <var:t2> ; <var:u> := <var:u> + <var:t1> ; <var:u> := <var:u> + <var:t0> {{ <var:u> = <nat:8> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t2> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t2> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:u> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:t0> = <nat:9> /\ <var:u> = <nat:8> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:u> = <nat:8> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 