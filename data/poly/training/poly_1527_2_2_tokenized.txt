\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <nat:1> + <var:e> * <var:O> \end{verbatim} Given it to be that $ <var:O> = <var:H> $ given any $ <var:H> $ before the execution of the list of commands , then $ <var:e> = <nat:2> * <var:H> + <nat:1> $ after code has executed . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:O> = <var:H> \} \\ <var:e> := <nat:2> ; \\ \{ <var:O> = <var:H> \land <var:e> = <nat:2> \} \\ <var:e> := <nat:1> + <var:e> * <var:O> \\ \{ <var:O> = <var:H> \land <var:e> = <nat:2> \cdot <var:H> + <nat:1> \} \end{eqnarray} As a result , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:O> = <var:H> }} <var:e> := <nat:2> ; <var:e> := <nat:1> + <var:e> * <var:O> {{ <var:e> = <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:e> = <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 