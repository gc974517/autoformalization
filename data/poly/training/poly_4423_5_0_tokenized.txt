\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:7> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:R> ; <var:f> := <var:O1> ; <var:f> := <var:f> + <var:O0> \end{verbatim} Assume it to hold that $ <var:R> = <var:m> $ prior to the execution of our set of commands it follows that $ <var:f> = <nat:8> \times <var:m> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:O0> := <nat:7> ; \\ \{ <var:R> = <var:m> \land <var:O0> = <nat:7> \} \\ <var:O1> := <nat:8> ; \\ \{ <var:R> = <var:m> \land <var:O0> = <nat:7> \land <var:O1> = <nat:8> \} \\ <var:O1> := <var:O1> * <var:R> ; \\ \{ <var:R> = <var:m> \land <var:O0> = <nat:7> \land <var:O1> = <nat:8> \cdot <var:m> \} \\ <var:f> := <var:O1> ; \\ \{ <var:R> = <var:m> \land <var:O0> = <nat:7> \land <var:f> = <nat:8> \cdot <var:m> \} \\ <var:f> := <var:f> + <var:O0> \\ \{ <var:R> = <var:m> \land <var:f> = <nat:8> \cdot <var:m> + <nat:7> \} \end{eqnarray} The application of Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:O0> := <nat:7> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:R> ; <var:f> := <var:O1> ; <var:f> := <var:f> + <var:O0> {{ <var:f> = <nat:8> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:O0> = <nat:7> /\ <var:O1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:O0> = <nat:7> /\ <var:f> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:f> = <nat:8> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 