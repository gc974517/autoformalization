\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:u> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:4> ; <var:h> := <var:l1> <var:h> := <var:h> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:u> = <var:L> $ prior to running our set of instructions , it follows that we see $ <var:h> = <nat:4> \times <var:L> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is shown by Hoare reasoning . Honing in on the upcoming piece of code seen in our code segment , we see the command \verb | <var:l1> := <var:u> ; | . This code transfers the condition $ \{ <var:u> = <var:L> \} $ as $ \{ <var:u> = <var:L> \land <var:l1> = <var:L> \} $ . Moving forward to the next step , we see the variable assignmet command giving $ <nat:4> $ into $ <var:l0>$ . This transfers the precondition $ \{ <var:u> = <var:L> \land <var:l1> = <var:L> \} $ to $ \{ <var:u> = <var:L> \land <var:l1> = <var:L> \land <var:l0> = <nat:4> \} $ . Paying attention to the subsequent statement found in our code , the variable update statement \verb | <var:l1> := <var:l1> * <nat:4> ; | . This code moves the condition $ \{ <var:u> = <var:L> \land <var:l1> = <var:L> \land <var:l0> = <nat:4> \} $ into $ \{ <var:u> = <var:L> \land <var:l1> = <nat:4> \times <var:L> \land <var:l0> = <nat:4> \} $ . This is given through the assignment law in typical Hoare reasoning . Observing the subsequent line in our list of commands , we have the variable assignmet line binding $ <var:l1$ toward $ <var:h>$ . This line redefines the condition $ \{ <var:u> = <var:L> \land <var:l1> = <nat:4> \times <var:L> \land <var:l0> = <nat:4> \} $ to the condition $ \{ <var:u> = <var:L> \land <var:l0> = <nat:4> \land <var:h> = <nat:4> \times <var:L> \} $ . This is shown through the assignment inference rule defined by typical Hoare reasoning . Stepping forward , we see the variable binding code \verb | <var:h> := <var:h> + <var:l0> | . This moves the condition $ \{ <var:u> = <var:L> \land <var:l0> = <nat:4> \land <var:h> = <nat:4> \times <var:L> \} $ to the postcondition $ \{ <var:u> = <var:L> \land <var:h> = <nat:4> \times <var:L> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:u> ; <var:l0> := <nat:4> ; <var:l1> := <var:l1> * <nat:4> ; <var:h> := <var:l1> <var:h> := <var:h> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:u> = <var:L> }} <def:poly> {{ <var:h> = <nat:4> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:l1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:l1> = <var:L> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:l1> = <nat:4> * <var:L> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:l0> = <nat:4> /\ <var:h> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:L> /\ <var:h> = <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 