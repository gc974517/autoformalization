\begin{document} \begin{theorem} Define the following set of instructions as \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:2> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:1> + <var:g> * <var:N> ; <var:g> := <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> \end{verbatim} Allowing it to be that $ <var:N> = <var:H> $ ahead of interpreting the program it holds that we see $ <var:g> = <nat:4> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:3> \cdot <var:H> ^ <nat:6> + <nat:3> \cdot <var:H> ^ <nat:5> + <nat:3> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions can be done through typical Hoare techniques . Advancing to the subsequent line contained in the set of instructions , we see the environment update command yielding $ <nat:4> $ into $ <var:g>$ . This line transfers the precondition $ \{ <var:N> = <var:H> \} $ to $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> \} $ . Stepping forward , we have the line assigning $ <nat:2> + <var:g> * <var:N> $ to $ <var:g>$ . This takes the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> \} $ toward the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> + <nat:2> \} $ . Focusing on the upcoming statement found in our set of instructions , the code letting $ <nat:3> + <var:g> * <var:N> $ toward $ <var:g>$ . This statement moves the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> + <nat:2> \} $ as $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} $ . Moving on , we see the environment update code defining $ <nat:3> + <var:g> * <var:N> $ toward $ <var:g>$ . This command moves $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} $ to $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ . Moving forward to the upcoming line of code found in our list of commands , the assignment line assigning $ <nat:3> + <var:g> * <var:N> $ to $ <var:g>$ . This line forwards the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ toward the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ . Stepping through , we see the variable binding code \verb | <var:g> := <nat:1> + <var:g> * <var:N> ; | . This transfers the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> \} $ into the postcondition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> \} $ . Shifting focus toward the following statement seen in our series of commands , we have the code \verb | <var:g> := <var:g> * <var:N> ; | . This command redefines $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> \} $ toward the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + \} $ . Taking another step toward the upcoming line of code seen in the segment of code , we have the command \verb | <var:g> := <nat:3> + <var:g> * <var:N> ; | . This redefines the precondition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + \} $ toward the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} $ . This is given through the assignment scheme defined by Hoare techniques . Immediately after , we have the variable assignmet code \verb | <var:g> := <nat:3> + <var:g> * <var:N> | . This advances the precondition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} $ as the condition $ \{ <var:N> = <var:H> \land <var:g> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> \} $ . This is ensured using the assignment law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:N> = <var:H> }} <var:g> := <nat:4> ; <var:g> := <nat:2> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:1> + <var:g> * <var:N> ; <var:g> := <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> ; <var:g> := <nat:3> + <var:g> * <var:N> {{ <var:g> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:H> /\ <var:g> = <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 