\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:J0> := <nat:5> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:V> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:V> ; <var:J2> := <var:J2> * <var:V> ; <var:F> := <var:J2> ; <var:F> := <var:F> + <var:J1> ; <var:F> := <var:F> + <var:J0> \end{verbatim} Given it to be that $ <var:V> = <var:u> $ for all $ <var:u> \in \mathbb{Z}^+ $ ahead of the evaluation of this code , it holds that we have $ <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:u> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \} \\ <var:J1> := <nat:4> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> \} \end{eqnarray} Advancing the execution of this code segment produces : \begin{eqnarray} <var:J1> := <var:J1> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> * <var:u> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> * <var:u> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> * <var:u> \land <var:J2> = <nat:2> * <var:u> \} \\ <var:J2> := <var:J2> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> * <var:u> \land <var:J2> = <nat:2> * <var:u> ^ <nat:2> \} \\ <var:F> := <var:J2> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:J1> = <nat:4> * <var:u> \land <var:F> = <nat:2> * <var:u> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:J1> ; \\ \{ <var:V> = <var:u> \land <var:J0> = <nat:5> \land <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> \} \\ <var:F> := <var:F> + <var:J0> \\ \{ <var:V> = <var:u> \land <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> \} \end{eqnarray} Using typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:V> = <var:u> }} <var:J0> := <nat:5> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:V> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:V> ; <var:J2> := <var:J2> * <var:V> ; <var:F> := <var:J2> ; <var:F> := <var:F> + <var:J1> ; <var:F> := <var:F> + <var:J0> {{ <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> * <var:u> /\ <var:J2> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:J1> = <nat:4> * <var:u> /\ <var:F> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:J0> = <nat:5> /\ <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:F> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 