\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:9> ; <var:B> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:C> = <var:Z> $ before interpreting the list of instructions , it must be that $ <var:B> = <nat:9> $ once list of instructions is done executing . \end{theorem} \begin{proof} The application of standard Hoare logic produces : \begin{eqnarray} \{ <var:C> = <var:Z> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:C> = <var:Z> \land <var:G0> = <nat:9> \} \\ <var:B> := <var:G0> \\ \{ <var:C> = <var:Z> \land <var:B> = <nat:9> \} \end{eqnarray} Considering the preceding argument , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:9> ; <var:B> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <def:poly> {{ <var:B> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:B> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 