\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <nat:2> + <var:Q> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Allowing $ <var:n> = <var:B> $ prior to the evaluation of the segment of code it must be that we see $ <var:Q> = <nat:2> \times <var:B> + <nat:2> $ after list of commands terminates . \end{theorem} \begin{proof} The flow of logic for this code segment can be seen with standard Hoare logic . Taking a look at the subsequent lines of codein the code , \begin{eqnarray} \{ <var:n> = <var:B> \} \, <var:Q> := <nat:2> \, \{ <var:n> = <var:B> \land <var:Q> = <nat:2> \} \\ \{ <var:n> = <var:B> \land <var:Q> = <nat:2> \} \, <var:Q> := <nat:2> + <var:Q> * <var:n\, \{ <var:n> = <var:B> \land <var:Q> = <nat:2> * <var:B> + <nat:2> \} \end{eqnarray} This is sound with the variable binding inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:2> ; <var:Q> := <nat:2> + <var:Q> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:n> = <var:B> }} <def:poly> {{ <var:Q> = <nat:2> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:Q> = <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 