\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:2> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:M> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:M> ; <var:w2> := <var:w2> * <var:M> ; <var:u> := <var:w2> ; <var:u> := <var:u> + <var:w1> ; <var:u> := <var:u> + <var:w0> \end{verbatim} Assuming , for all $ <var:D> \in \mathbb{Z}^+ $ , it to hold that $ <var:M> = <var:D> $ prior to running this list of commands , it must be that we have $ <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> + <nat:6> \cdot <var:D> + <nat:2> $ when set of instructions has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be accomplished through usual Hoare reasoning . Next , we have the statement binding $ <nat:2> $ as $ <var:w0>$ . This transfers $ \{ <var:M> = <var:D> \} $ into the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \} $ . This is sound by the assignment inference rule from standard Hoare reasoning . Moving forward to the upcoming line of code found in our list of commands , the command \verb | <var:w1> := <nat:6> ; | . This transfers the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \} $ as the postcondition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \} $ . Advancing , we see the binding code letting $ <var:w1> * <var:M> $ into $ <var:w1>$ . This advances $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \} $ toward $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \} $ . Paying attention to the proceeding statement contained in our set of commands , the binding code letting $ <nat:5> $ as $ <var:w2>$ . This advances the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \} $ as the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \} $ . This is shown to be logically sound with the assignment scheme from Hoare techniques . Taking a look at the next step found in the list of commands , the environment update line binding $ <var:w2> * <var:M> $ as $ <var:w2>$ . This code transfers $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \} $ to $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \cdot <var:D> \} $ . This is deduced using the assignment law given by usual Hoare reasoning . Advancing to the next step , the variable assignmet statement giving $ <var:w2> * <var:M> $ into $ <var:w2>$ . This forwards $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \cdot <var:D> \} $ as $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \cdot <var:D> ^ <nat:2> \} $ . Taking a look at the upcoming line of code found in our set of commands , we have the code \verb | <var:u> := <var:w2> ; | . This transfers the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:w2> = <nat:5> \cdot <var:D> ^ <nat:2> \} $ into $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> \} $ . Jumping to the next step seen in our program , the variable assignmet statement \verb | <var:u> := <var:u> + <var:w1> ; | . This line moves the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:w1> = <nat:6> \cdot <var:D> \land <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> \} $ toward $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> + <nat:6> \cdot <var:D> \} $ . Jumping to the next line of code found in our list of instructions , we have the variable binding command \verb | <var:u> := <var:u> + <var:w0> | . This advances the condition $ \{ <var:M> = <var:D> \land <var:w0> = <nat:2> \land <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> + <nat:6> \cdot <var:D> \} $ to $ \{ <var:M> = <var:D> \land <var:u> = <nat:5> \cdot <var:D> ^ <nat:2> + <nat:6> \cdot <var:D> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <var:w0> := <nat:2> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:M> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:M> ; <var:w2> := <var:w2> * <var:M> ; <var:u> := <var:w2> ; <var:u> := <var:u> + <var:w1> ; <var:u> := <var:u> + <var:w0> {{ <var:u> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> * <var:D> /\ <var:w2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> * <var:D> /\ <var:w2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> * <var:D> /\ <var:w2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:6> * <var:D> /\ <var:u> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:w0> = <nat:2> /\ <var:u> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:u> = <nat:5> * <var:D> ^ <nat:2> + <nat:6> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 