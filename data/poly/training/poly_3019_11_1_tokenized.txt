\begin{document} \begin{theorem} Consider a code segment as \begin{verbatim} <var:W1> := <var:n> ; <var:W2> := <var:W1> * <var:n> ; <var:W3> := <var:W2> * <var:n> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:7> ; <var:S> := <var:W3> <var:S> := <var:S> + <var:W2> <var:S> := <var:S> + <var:W1> <var:S> := <var:S> + <var:W0> \end{verbatim} Allowing that we have $ <var:n> = <var:G> $ ahead of interpreting this series of instructions then we see $ <var:S> = <nat:7> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:7> $ when list of commands has exited . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:n> = <var:G> \} \\ <var:W1> := <var:n> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <var:G> \} \\ <var:W2> := <var:W1> * <var:n> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <var:G> \land <var:W2> = <var:G> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:n> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <var:G> \land <var:W2> = <var:G> ^ <nat:2> \land <var:W3> = <var:G> ^ <nat:3> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <var:G> \land <var:W2> = <var:G> ^ <nat:2> \land <var:W3> = <var:G> ^ <nat:3> \land <var:W0> = <nat:7> \} \\ <var:W1> := <var:W1> * <nat:1> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <nat:1> \times <var:G> \land <var:W2> = <var:G> ^ <nat:2> \land <var:W3> = <var:G> ^ <nat:3> \land <var:W0> = <nat:7> \} \\ <var:W2> := <var:W2> * <nat:2> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <nat:1> \times <var:G> \land <var:W2> = <nat:2> \times <var:G> ^ <nat:2> \land <var:W3> = <var:G> ^ <nat:3> \land <var:W0> = <nat:7> \} \\ <var:W3> := <var:W3> * <nat:7> ; \\ \{ <var:n> = <var:G> \land <var:W1> = <nat:1> \times <var:G> \land <var:W2> = <nat:2> \times <var:G> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:G> ^ <nat:3> \land <var:W0> = <nat:7> \} \\ <var:S> := <var:W3> \\ \{ <var:n> = <var:G> \land <var:W1> = <nat:1> \times <var:G> \land <var:W2> = <nat:2> \times <var:G> ^ <nat:2> \land <var:W0> = <nat:7> \land <var:S> = <nat:7> \times <var:G> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:W2> \\ \{ <var:n> = <var:G> \land <var:W1> = <nat:1> \times <var:G> \land <var:W0> = <nat:7> \land <var:S> = <nat:7> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:W1> \\ \{ <var:n> = <var:G> \land <var:W0> = <nat:7> \land <var:S> = <nat:7> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> \} \\ <var:S> := <var:S> + <var:W0> \\ \{ <var:n> = <var:G> \land <var:S> = <nat:7> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:7> \} \end{eqnarray} Therefore , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <var:W1> := <var:n> ; <var:W2> := <var:W1> * <var:n> ; <var:W3> := <var:W2> * <var:n> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:7> ; <var:S> := <var:W3> <var:S> := <var:S> + <var:W2> <var:S> := <var:S> + <var:W1> <var:S> := <var:S> + <var:W0> {{ <var:S> = <nat:7> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <var:G> /\ <var:W2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <var:G> /\ <var:W2> = <var:G> ^ <nat:2> /\ <var:W3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <var:G> /\ <var:W2> = <var:G> ^ <nat:2> /\ <var:W3> = <var:G> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <nat:1> * <var:G> /\ <var:W2> = <var:G> ^ <nat:2> /\ <var:W3> = <var:G> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <nat:1> * <var:G> /\ <var:W2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:W3> = <var:G> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <nat:1> * <var:G> /\ <var:W2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:G> ^ <nat:3> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <nat:1> * <var:G> /\ <var:W2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:W0> = <nat:7> /\ <var:S> = <nat:7> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W1> = <nat:1> * <var:G> /\ <var:W0> = <nat:7> /\ <var:S> = <nat:7> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:W0> = <nat:7> /\ <var:S> = <nat:7> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:S> = <nat:7> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 