\begin{document} \begin{theorem} Take the following series of instructions : \begin{verbatim} <var:O0> := <nat:9> ; <var:N> := <var:O0> \end{verbatim} Given $ <var:b> = <var:X> $ prior to interpreting our program , it must be that $ <var:N> = <nat:9> $ after program has terminated . \end{theorem} \begin{proof} The proof of this series of instructions is done through usual Hoare reasoning . Paying attention to the upcoming command found in the code , we see \begin{eqnarray} \{ <var:b> = <var:X> \} \, <var:O0> := <nat:9> \, \{ <var:b> = <var:X> \land <var:O0> = <nat:9> \} \end{eqnarray} This is shown to be logically sound through the binding scheme of standard Hoare reasoning . Observing the next line of code seen in our code , \begin{eqnarray} \{ <var:b> = <var:X> \} \, <var:O0> := <nat:9> \, \{ <var:b> = <var:X> \land <var:O0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <var:O0> := <nat:9> ; <var:N> := <var:O0> {{ <var:N> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:N> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 