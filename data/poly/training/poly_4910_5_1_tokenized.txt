\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:K1> := <var:e> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:7> ; <var:r> := <var:K1> <var:r> := <var:r> + <var:K0> \end{verbatim} Allow --- given whole numbers $ <var:d> $ --- that we have $ <var:e> = <var:d> $ prior to the execution of the set of instructions it holds that we see $ <var:r> = <nat:7> \cdot <var:d> + <nat:9> $ once segment of code has executed . \end{theorem} \begin{proof} Observe that the following decorated program . \begin{eqnarray} \{ <var:e> = <var:d> \} \\ <var:K1> := <var:e> ; \\ \{ <var:e> = <var:d> \land <var:K1> = <var:d> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:e> = <var:d> \land <var:K1> = <var:d> \land <var:K0> = <nat:9> \} \\ <var:K1> := <var:K1> * <nat:7> ; \\ \{ <var:e> = <var:d> \land <var:K1> = <nat:7> \times <var:d> \land <var:K0> = <nat:9> \} \\ <var:r> := <var:K1> \\ \{ <var:e> = <var:d> \land <var:K0> = <nat:9> \land <var:r> = <nat:7> \times <var:d> \} \\ <var:r> := <var:r> + <var:K0> \\ \{ <var:e> = <var:d> \land <var:r> = <nat:7> \times <var:d> + <nat:9> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:e> = <var:d> }} <var:K1> := <var:e> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:7> ; <var:r> := <var:K1> <var:r> := <var:r> + <var:K0> {{ <var:r> = <nat:7> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:K1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:K1> = <var:d> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:K1> = <nat:7> * <var:d> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:K0> = <nat:9> /\ <var:r> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:d> /\ <var:r> = <nat:7> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 