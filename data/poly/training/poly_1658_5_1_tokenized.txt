\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:T> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:8> ; <var:M> := <var:k1> <var:M> := <var:M> + <var:k0> \end{verbatim} Given it to hold that $ <var:T> = <var:a> $ ahead of the execution of the list of commands it must be that we have $ <var:M> = <nat:8> \cdot <var:a> + <nat:9> $ after set of commands has executed . \end{theorem} \begin{proof} See that the following decorated list of commands . \begin{eqnarray} \{ <var:T> = <var:a> \} \\ <var:k1> := <var:T> ; \\ \{ <var:T> = <var:a> \land <var:k1> = <var:a> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:T> = <var:a> \land <var:k1> = <var:a> \land <var:k0> = <nat:9> \} \\ <var:k1> := <var:k1> * <nat:8> ; \\ \{ <var:T> = <var:a> \land <var:k1> = <nat:8> * <var:a> \land <var:k0> = <nat:9> \} \\ <var:M> := <var:k1> \\ \{ <var:T> = <var:a> \land <var:k0> = <nat:9> \land <var:M> = <nat:8> * <var:a> \} \\ <var:M> := <var:M> + <var:k0> \\ \{ <var:T> = <var:a> \land <var:M> = <nat:8> * <var:a> + <nat:9> \} \end{eqnarray} The application of typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:T> = <var:a> }} <var:k1> := <var:T> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:8> ; <var:M> := <var:k1> <var:M> := <var:M> + <var:k0> {{ <var:M> = <nat:8> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:k1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:k1> = <var:a> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:k1> = <nat:8> * <var:a> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:k0> = <nat:9> /\ <var:M> = <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:a> /\ <var:M> = <nat:8> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 