\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:z0> := <nat:6> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:M> ; <var:z2> := <var:z2> * <var:M> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:M> ; <var:z3> := <var:z3> * <var:M> ; <var:z3> := <var:z3> * <var:M> ; <var:L> := <var:z3> ; <var:L> := <var:L> + <var:z2> ; <var:L> := <var:L> + <var:z0> \end{verbatim} Assuming it to hold that $ <var:M> = <var:O> $ prior to the execution of the code segment it must be that we have $ <var:L> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:6> $ after series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is accomplished through usual Hoare techniques . Following , we have the variable update command \verb | <var:z0> := <nat:6> ; | . This code redefines the precondition $ \{ <var:M> = <var:O> \} $ as the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \} $ . This is guaranteed by the assignment scheme found in Hoare techniques . Advancing , the statement \verb | <var:z2> := <nat:3> ; | . This command advances $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \} $ into the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \} $ . Going to the next step , we see the command \verb | <var:z2> := <var:z2> * <var:M> ; | . This advances $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \} $ into the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> \} $ . This is known to be sound with the assignment law of standard Hoare techniques . Moving on to the next bit of code found in the code segment , we see the variable update line \verb | <var:z2> := <var:z2> * <var:M> ; | . This takes the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> \} $ into the postcondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule obtained from standard Hoare reasoning . Next , the line assigning $ <nat:1> $ to $ <var:z3>$ . This statement forwards the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \} $ . Immediately after , we have the variable binding code binding $ <var:z3> * <var:M> $ toward $ <var:z3>$ . This redefines the precondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \} $ into $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> \} $ . Taking another step toward the subsequent command seen in our series of instructions , the variable update line \verb | <var:z3> := <var:z3> * <var:M> ; | . This transfers the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> \} $ as $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> ^ <nat:2> \} $ . Moving forward , we see the variable binding statement \verb | <var:z3> := <var:z3> * <var:M> ; | . This takes $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> ^ <nat:2> \} $ to $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule found in usual Hoare techniques . Moving onward , the variable binding statement giving $ <var:z3> $ to $ <var:L>$ . This redefines the precondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:O> ^ <nat:3> \} $ toward the condition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:L> = <nat:1> \cdot <var:O> ^ <nat:3> \} $ . This is known to be sound using the assignment law in typical Hoare reasoning . Next , we see the variable assignmet statement \verb | <var:L> := <var:L> + <var:z2> ; | . This moves the precondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:z2> = <nat:3> \cdot <var:O> ^ <nat:2> \land <var:L> = <nat:1> \cdot <var:O> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:L> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> \} $ . Following , we see the binding code \verb | <var:L> := <var:L> + <var:z0> | . This line forwards the precondition $ \{ <var:M> = <var:O> \land <var:z0> = <nat:6> \land <var:L> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:O> \land <var:L> = <nat:1> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:6> \} $ . This is guaranteed through the assignment scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:M> = <var:O> }} <var:z0> := <nat:6> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:M> ; <var:z2> := <var:z2> * <var:M> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:M> ; <var:z3> := <var:z3> * <var:M> ; <var:z3> := <var:z3> * <var:M> ; <var:L> := <var:z3> ; <var:L> := <var:L> + <var:z2> ; <var:L> := <var:L> + <var:z0> {{ <var:L> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:z2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:L> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:z0> = <nat:6> /\ <var:L> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:O> /\ <var:L> = <nat:1> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 