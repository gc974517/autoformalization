\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:G0> := <nat:2> ; <var:h> := <var:G0> \end{verbatim} Allow that $ <var:I> = <var:b> $ ( for positive integer coefficients $ <var:b> $ ) ahead of executing our program , then we see $ <var:h> = <nat:2> $ when code exits . \end{theorem} \begin{proof} The proof of this series of commands can be shown with usual Hoare techniques . Immediately after , we have the environment update command \verb | <var:G0> := <nat:2> ; | . This takes the precondition $ \{ <var:I> = <var:b> \} $ as $ \{ <var:I> = <var:b> \land <var:G0> = <nat:2> \} $ . This is rigorously given by the assignment law found in typical Hoare techniques . Next , we see the binding statement giving $ <var:G0$ to $ <var:h>$ . This statement moves the precondition $ \{ <var:I> = <var:b> \land <var:G0> = <nat:2> \} $ to the postcondition $ \{ <var:I> = <var:b> \land <var:h> = <nat:2> \} $ . This is rigorously given with the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:I> = <var:b> }} <var:G0> := <nat:2> ; <var:h> := <var:G0> {{ <var:h> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:b> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:b> /\ <var:h> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 