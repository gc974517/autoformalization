\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:U> ; <var:B> := <var:d1> ; <var:B> := <var:B> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:U> = <var:n> $ ( for any $ <var:n> \in \mathbb{N} $ ) ahead of the execution of the code , then we have $ <var:B> = <nat:1> \cdot <var:n> + <nat:4> $ after series of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be demonstrated through typical Hoare logic . Following , we have the environment update code \verb | <var:d0> := <nat:4> ; | . This statement moves the precondition $ \{ <var:U> = <var:n> \} $ as the postcondition $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \} $ . Moving forward , we have the variable binding command \verb | <var:d1> := <nat:1> ; | . This statement advances the precondition $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \} $ into the condition $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \} $ . This is ensured through the assignment scheme obtained from usual Hoare techniques . Going to the next step , the variable binding statement binding $ <var:d1> * <var:U> $ to $ <var:d1>$ . This forwards $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \} $ toward $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \times <var:n> \} $ . This is shown to be logically sound using the assignment law given by typical Hoare reasoning . Moving forward to the next step , we have the environment update line \verb | <var:B> := <var:d1> ; | . This forwards the condition $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \times <var:n> \} $ into the postcondition $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:B> = <nat:1> \times <var:n> \} $ . Stepping through , we see the environment update statement \verb | <var:B> := <var:B> + <var:d0> | . This advances $ \{ <var:U> = <var:n> \land <var:d0> = <nat:4> \land <var:B> = <nat:1> \times <var:n> \} $ to the condition $ \{ <var:U> = <var:n> \land <var:B> = <nat:1> \times <var:n> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:U> ; <var:B> := <var:d1> ; <var:B> := <var:B> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <def:poly> {{ <var:B> = <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:d0> = <nat:4> /\ <var:B> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:B> = <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 