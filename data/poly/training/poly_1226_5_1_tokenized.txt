\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:H> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:6> ; <var:u> := <var:i1> <var:u> := <var:u> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:H> = <var:E> $ --- assuming some $ <var:E> $ --- prior to interpreting this set of commands then $ <var:u> = <nat:6> * <var:E> + <nat:3> $ once code has exited . \end{theorem} \begin{proof} Proving correctness for our code is shown by standard Hoare techniques . Moving on to the upcoming statement contained in our code , we have the code \verb | <var:i1> := <var:H> ; | . This command redefines the precondition $ \{ <var:H> = <var:E> \} $ to $ \{ <var:H> = <var:E> \land <var:i1> = <var:E> \} $ . This is shown to be logically sound using the assignment rule in typical Hoare logic . Now , we have the variable update line letting $ <nat:3> $ toward $ <var:i0>$ . This takes the condition $ \{ <var:H> = <var:E> \land <var:i1> = <var:E> \} $ as $ \{ <var:H> = <var:E> \land <var:i1> = <var:E> \land <var:i0> = <nat:3> \} $ . Moving on , we have the line defining $ <var:i1> * <nat:6> $ into $ <var:i1>$ . This takes $ \{ <var:H> = <var:E> \land <var:i1> = <var:E> \land <var:i0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:E> \land <var:i1> = <nat:6> \cdot <var:E> \land <var:i0> = <nat:3> \} $ . Advancing to the next step , we see the variable assignmet statement defining $ <var:i1$ toward $ <var:u>$ . This forwards $ \{ <var:H> = <var:E> \land <var:i1> = <nat:6> \cdot <var:E> \land <var:i0> = <nat:3> \} $ into $ \{ <var:H> = <var:E> \land <var:i0> = <nat:3> \land <var:u> = <nat:6> \cdot <var:E> \} $ . Focusing on the subsequent step found in the series of instructions , we have the environment update command binding $ <var:u> + <var:i0$ toward $ <var:u>$ . This line transfers $ \{ <var:H> = <var:E> \land <var:i0> = <nat:3> \land <var:u> = <nat:6> \cdot <var:E> \} $ toward the postcondition $ \{ <var:H> = <var:E> \land <var:u> = <nat:6> \cdot <var:E> + <nat:3> \} $ . This is ensured with the assignment scheme of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:H> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:6> ; <var:u> := <var:i1> <var:u> := <var:u> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:H> = <var:E> }} <def:poly> {{ <var:u> = <nat:6> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:i1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:i1> = <var:E> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:i1> = <nat:6> * <var:E> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:i0> = <nat:3> /\ <var:u> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:E> /\ <var:u> = <nat:6> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 