\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:6> ; <var:R> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allow that we have $ <var:T> = <var:X> $ prior to running our segment of code it follows that we see $ <var:R> = <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:T> = <var:X> \} \\ <var:h0> := <nat:6> ; \\ \{ <var:T> = <var:X> \land <var:h0> = <nat:6> \} \\ <var:R> := <var:h0> \\ \{ <var:T> = <var:X> \land <var:R> = <nat:6> \} \end{eqnarray} Hence , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:R> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <def:poly> {{ <var:R> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:R> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 