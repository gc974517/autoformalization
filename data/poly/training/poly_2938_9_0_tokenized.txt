\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:M> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:M> ; <var:m2> := <var:m2> * <var:M> ; <var:Q> := <var:m2> ; <var:Q> := <var:Q> + <var:m1> ; <var:Q> := <var:Q> + <var:m0> \end{verbatim} Assume that $ <var:M> = <var:f> $ , given some $ <var:f> \in \mathbb{N} $ , ahead of interpreting this code , it follows that we see $ <var:Q> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> + <nat:7> $ after series of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:f> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \} \\ <var:m1> := <nat:9> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> \} \\ <var:m1> := <var:m1> * <var:M> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> * <var:f> \} \\ <var:m2> := <nat:4> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> * <var:f> \land <var:m2> = <nat:4> \} \\ <var:m2> := <var:m2> * <var:M> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> * <var:f> \land <var:m2> = <nat:4> * <var:f> \} \\ <var:m2> := <var:m2> * <var:M> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> * <var:f> \land <var:m2> = <nat:4> * <var:f> ^ <nat:2> \} \\ <var:Q> := <var:m2> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:m1> = <nat:9> * <var:f> \land <var:Q> = <nat:4> * <var:f> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:m1> ; \\ \{ <var:M> = <var:f> \land <var:m0> = <nat:7> \land <var:Q> = <nat:4> * <var:f> ^ <nat:2> + <nat:9> * <var:f> \} \\ <var:Q> := <var:Q> + <var:m0> \\ \{ <var:M> = <var:f> \land <var:Q> = <nat:4> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> \} \end{eqnarray} Applying Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:M> = <var:f> }} <var:m0> := <nat:7> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:M> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:M> ; <var:m2> := <var:m2> * <var:M> ; <var:Q> := <var:m2> ; <var:Q> := <var:Q> + <var:m1> ; <var:Q> := <var:Q> + <var:m0> {{ <var:Q> = <nat:4> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> * <var:f> /\ <var:m2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> * <var:f> /\ <var:m2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> * <var:f> /\ <var:m2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:9> * <var:f> /\ <var:Q> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:m0> = <nat:7> /\ <var:Q> = <nat:4> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:f> /\ <var:Q> = <nat:4> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 