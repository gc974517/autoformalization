\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <nat:3> + <var:d> * <var:e> ; <var:d> := <var:d> * <var:e> ; <var:d> := <nat:2> + <var:d> * <var:e> ; <var:d> := <nat:3> + <var:d> * <var:e> \end{verbatim} Assume $ <var:e> = <var:V> $ before running the set of instructions it follows that we have $ <var:d> = <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:3> $ when list of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:V> \} \\ <var:d> := <nat:3> ; \\ \{ <var:e> = <var:V> \land <var:d> = <nat:3> \} \\ <var:d> := <nat:3> + <var:d> * <var:e> ; \\ \{ <var:e> = <var:V> \land <var:d> = <nat:3> \times <var:V> + <nat:3> \} \\ <var:d> := <var:d> * <var:e> ; \\ \{ <var:e> = <var:V> \land <var:d> = <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + \} \\ <var:d> := <nat:2> + <var:d> * <var:e> ; \\ \{ <var:e> = <var:V> \land <var:d> = <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \} \\ <var:d> := <nat:3> + <var:d> * <var:e> \\ \{ <var:e> = <var:V> \land <var:d> = <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> + <nat:3> \} \end{eqnarray} Applying Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:e> = <var:V> }} <var:d> := <nat:3> ; <var:d> := <nat:3> + <var:d> * <var:e> ; <var:d> := <var:d> * <var:e> ; <var:d> := <nat:2> + <var:d> * <var:e> ; <var:d> := <nat:3> + <var:d> * <var:e> {{ <var:d> = <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:d> = <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:d> = <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:d> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:V> /\ <var:d> = <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 