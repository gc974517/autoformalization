\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:x> := <var:e0> \end{verbatim} Allow ( with some $ <var:S> \in \mathbb{Z}^+ $ ) it to be that $ <var:n> = <var:S> $ ahead of executing our series of instructions , then we see $ <var:x> = <nat:2> $ when set of instructions is done executing . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:n> = <var:S> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:n> = <var:S> \land <var:e0> = <nat:2> \} \\ <var:x> := <var:e0> \\ \{ <var:n> = <var:S> \land <var:x> = <nat:2> \} \end{eqnarray} Considering the above , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <var:e0> := <nat:2> ; <var:x> := <var:e0> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 