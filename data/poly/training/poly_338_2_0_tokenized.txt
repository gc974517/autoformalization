\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:6> ; <var:e> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:v> = <var:j> $ with some natural coefficients $ <var:j> $ ahead of the execution of this code then we see $ <var:e> = <nat:6> $ after program has executed . \end{theorem} \begin{proof} Observe the following decorated set of instructions . \begin{eqnarray} \{ <var:v> = <var:j> \} \\ <var:P0> := <nat:6> ; \\ \{ <var:v> = <var:j> \land <var:P0> = <nat:6> \} \\ <var:e> := <var:P0> \\ \{ <var:v> = <var:j> \land <var:e> = <nat:6> \} \end{eqnarray} Using Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:e> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <def:poly> {{ <var:e> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:e> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 