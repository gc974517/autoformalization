\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:R0> := <nat:2> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:A> ; <var:r> := <var:R1> ; <var:r> := <var:r> + <var:R0> \end{verbatim} Allowing it to hold that $ <var:A> = <var:P> $ prior to executing our set of instructions it holds that we have $ <var:r> = <nat:4> * <var:P> + <nat:2> $ after segment of code has terminated . \end{theorem} \begin{proof} The proof of our code can be accomplished using typical Hoare logic . Paying attention to the subsequent step found in the series of commands , the line giving $ <nat:2> $ toward $ <var:R0>$ . This moves $ \{ <var:A> = <var:P> \} $ toward the postcondition $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \} $ . This is sound by the assignment inference rule defined in typical Hoare reasoning . Looking at the upcoming line of code contained in our set of instructions , the statement yielding $ <nat:4> $ into $ <var:R1>$ . This statement forwards $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \} $ toward the condition $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} $ . Following , the variable assignmet line \verb | <var:R1> := <var:R1> * <var:A> ; | . This line advances the condition $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} $ into $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> * <var:P> \} $ . This is guaranteed through the assignment rule obtained from standard Hoare techniques . Focusing on the upcoming bit of code seen in our segment of code , we have the variable assignmet command \verb | <var:r> := <var:R1> ; | . This advances $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> * <var:P> \} $ into $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:r> = <nat:4> * <var:P> \} $ . Jumping to the next line seen in the code segment , we see the variable update command \verb | <var:r> := <var:r> + <var:R0> | . This line moves $ \{ <var:A> = <var:P> \land <var:R0> = <nat:2> \land <var:r> = <nat:4> * <var:P> \} $ as $ \{ <var:A> = <var:P> \land <var:r> = <nat:4> * <var:P> + <nat:2> \} $ . This is known to be sound with the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:A> = <var:P> }} <var:R0> := <nat:2> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:A> ; <var:r> := <var:R1> ; <var:r> := <var:r> + <var:R0> {{ <var:r> = <nat:4> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:R0> = <nat:2> /\ <var:r> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:P> /\ <var:r> = <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 