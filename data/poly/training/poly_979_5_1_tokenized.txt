\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:p> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:z> := <var:W1> <var:z> := <var:z> + <var:W0> \end{verbatim} Given --- assuming some natural coefficients $ <var:B> $ --- it to hold that $ <var:p> = <var:B> $ before evaluating our segment of code , it must be that we see $ <var:z> = <nat:6> \times <var:B> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our code segment can be demonstrated through standard Hoare techniques . Taking another step toward the following lines in the program , we have \begin{verbatim} { <var:p> = <var:B> } <var:W1> := <var:p> { <var:p> = <var:B> \land <var:W1> = <var:B> } { <var:p> = <var:B> \land <var:W1> = <var:B> } <var:W0> := <nat:1> { <var:p> = <var:B> \land <var:W1> = <var:B> \land <var:W0> = <nat:1> } \end{verbatim} Paying attention to the upcoming commands found in our code , we see \begin{verbatim} { <var:p> = <var:B> } <var:W1> := <var:p> { <var:p> = <var:B> \land <var:W1> = <var:B> } { <var:p> = <var:B> \land <var:W1> = <var:B> } <var:W0> := <nat:1> { <var:p> = <var:B> \land <var:W1> = <var:B> \land <var:W0> = <nat:1> } \end{verbatim} Paying attention to the following bit of code seen in our segment of code , \begin{verbatim} { <var:p> = <var:B> } <var:W1> := <var:p> { <var:p> = <var:B> \land <var:W1> = <var:B> } \end{verbatim} This is shown with the variable assignmet scheme given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:p> = <var:B> }} <var:W1> := <var:p> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:6> ; <var:z> := <var:W1> <var:z> := <var:z> + <var:W0> {{ <var:z> = <nat:6> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:W1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:W1> = <var:B> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:W1> = <nat:6> * <var:B> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:W0> = <nat:1> /\ <var:z> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:z> = <nat:6> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 