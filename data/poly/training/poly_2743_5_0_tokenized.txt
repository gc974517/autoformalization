\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:F> ; <var:Q> := <var:V1> ; <var:Q> := <var:Q> + <var:V0> \end{verbatim} Allowing --- for every $ <var:o> \in \mathbb{N} $ --- that we have $ <var:F> = <var:o> $ before the evaluation of our set of instructions it follows that $ <var:Q> = <nat:7> \times <var:o> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code is evident through Hoare techniques . Next , we have the environment update command \verb | <var:V0> := <nat:1> ; | . This command forwards the condition $ \{ <var:F> = <var:o> \} $ to $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \} $ . This is rigorously given by the assignment law in Hoare techniques . Considering the following statement in the series of commands , we have the environment update statement \verb | <var:V1> := <nat:7> ; | . This statement forwards the condition $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \} $ to $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:V1> = <nat:7> \} $ . This is deduced through the assignment inference rule in usual Hoare logic . Stepping forward , we see the binding statement letting $ <var:V1> * <var:F> $ into $ <var:V1>$ . This takes the condition $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:V1> = <nat:7> \} $ to the condition $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:V1> = <nat:7> * <var:o> \} $ . This is rigorously given by the assignment scheme of standard Hoare logic . Stepping through , we see the variable assignmet line \verb | <var:Q> := <var:V1> ; | . This command moves the precondition $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:V1> = <nat:7> * <var:o> \} $ as the condition $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:Q> = <nat:7> * <var:o> \} $ . This is given by the assignment law obtained from Hoare logic . Going forward , the variable update line \verb | <var:Q> := <var:Q> + <var:V0> | . This transfers $ \{ <var:F> = <var:o> \land <var:V0> = <nat:1> \land <var:Q> = <nat:7> * <var:o> \} $ into the condition $ \{ <var:F> = <var:o> \land <var:Q> = <nat:7> * <var:o> + <nat:1> \} $ . This is shown by the assignment scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:F> = <var:o> }} <var:V0> := <nat:1> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:F> ; <var:Q> := <var:V1> ; <var:Q> := <var:Q> + <var:V0> {{ <var:Q> = <nat:7> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:o> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:o> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:o> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:o> /\ <var:V0> = <nat:1> /\ <var:Q> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:o> /\ <var:Q> = <nat:7> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 