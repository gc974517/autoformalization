\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:L> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:L> ; <var:c2> := <var:c2> * <var:L> ; <var:A> := <var:c2> ; <var:A> := <var:A> + <var:c1> ; <var:A> := <var:A> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Given , for every $ <var:G> \in \mathbb{N} $ , $ <var:L> = <var:G> $ ahead of the execution of this series of commands it must be that we have $ <var:A> = <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:3> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:G> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:2> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} \\ <var:c1> := <var:c1> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \times <var:G> \} \\ <var:c2> := <nat:1> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \times <var:G> \land <var:c2> = <nat:1> \} \\ <var:c2> := <var:c2> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \times <var:G> \land <var:c2> = <nat:1> \times <var:G> \} \\ <var:c2> := <var:c2> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \times <var:G> \land <var:c2> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:A> := <var:c2> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \times <var:G> \land <var:A> = <nat:1> \times <var:G> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:c1> ; \\ \{ <var:L> = <var:G> \land <var:c0> = <nat:3> \land <var:A> = <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> \} \\ <var:A> := <var:A> + <var:c0> \\ \{ <var:L> = <var:G> \land <var:A> = <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:L> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:L> ; <var:c2> := <var:c2> * <var:L> ; <var:A> := <var:c2> ; <var:A> := <var:A> + <var:c1> ; <var:A> := <var:A> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <def:poly> {{ <var:A> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:G> /\ <var:c2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:G> /\ <var:c2> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:G> /\ <var:c2> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:G> /\ <var:A> = <nat:1> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:c0> = <nat:3> /\ <var:A> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:A> = <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 