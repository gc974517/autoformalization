\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:2> + <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> ; <var:P> := <nat:2> + <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:K> = <var:z> $ for some $ <var:z> $ ahead of executing the list of instructions it follows that we have $ <var:P> = <nat:4> \cdot <var:z> ^ <nat:10> + <nat:2> \cdot <var:z> ^ <nat:7> + <nat:4> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:4> $ once set of commands is done . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:K> = <var:z> \} \\ <var:P> := <nat:4> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> \} \\ <var:P> := <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> + \} \\ <var:P> := <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:2> + \} \end{eqnarray} Continuing the execution of our set of instructions results in : \begin{eqnarray} <var:P> := <nat:2> + <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> \} \\ <var:P> := <nat:4> + <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> + <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> \} \\ <var:P> := <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + \} \\ <var:P> := <nat:4> + <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> \} \\ <var:P> := <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + \} \\ <var:P> := <var:P> * <var:K> ; \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + \} \\ <var:P> := <nat:4> + <var:P> * <var:K> \\ \{ <var:K> = <var:z> \land <var:P> = <nat:4> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> \} \end{eqnarray} Considering the above , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:2> + <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> ; <var:P> := <nat:2> + <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <var:P> * <var:K> ; <var:P> := <nat:4> + <var:P> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:K> = <var:z> }} <def:poly> {{ <var:P> = <nat:4> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:z> /\ <var:P> = <nat:4> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 