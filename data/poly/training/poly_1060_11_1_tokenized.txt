\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e1> := <var:W> ; <var:e2> := <var:e1> * <var:W> ; <var:e3> := <var:e2> * <var:W> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:5> ; <var:l> := <var:e3> <var:l> := <var:l> + <var:e2> <var:l> := <var:l> + <var:e1> <var:l> := <var:l> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:W> = <var:m> $ --- given $ <var:m> $ --- before the execution of the program it must be that we see $ <var:l> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:7> $ once code terminates . \end{theorem} \begin{proof} The flow of logic for our series of commands is demonstrated by typical Hoare techniques . Considering the next bits of codeseen in the segment of code , we see \verb | { <var:W> = <var:m> } <var:e1> := <var:W> { <var:W> = <var:m> \land <var:e1> = <var:m> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <var:m> } <var:e2> := <var:e1> * <var:W> { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> } <var:e3> := <var:e2> * <var:W> { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> } <var:e0> := <nat:7> { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e1> := <var:e1> * <nat:2> { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e2> := <var:e2> * <nat:2> { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e3> = <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } <var:e3> := <var:e3> * <nat:5> { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e3> = <nat:5> \times <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e3> = <nat:5> \times <var:m> ^ <nat:3> \land <var:e0> = <nat:7> } <var:l> := <var:e3{ <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:l> = <nat:5> \times <var:m> ^ <nat:3> } | , \verb | { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:l> = <nat:5> \times <var:m> ^ <nat:3> } <var:l> := <var:l> + <var:e2{ <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e0> = <nat:7> \land <var:l> = <nat:5> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> } | and \verb | { <var:W> = <var:m> \land <var:e1> = <nat:2> \times <var:m> \land <var:e0> = <nat:7> \land <var:l> = <nat:5> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> } <var:l> := <var:l> + <var:e1{ <var:W> = <var:m> \land <var:e0> = <nat:7> \land <var:l> = <nat:5> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> } | . This is rigorously given with the assignment law given in standard Hoare reasoning . Taking a look at the subsequent bit of code seen in the set of commands , \verb | { <var:W> = <var:m> } <var:e1> := <var:W> { <var:W> = <var:m> \land <var:e1> = <var:m> } | . This is given by the scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:W> ; <var:e2> := <var:e1> * <var:W> ; <var:e3> := <var:e2> * <var:W> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:5> ; <var:l> := <var:e3> <var:l> := <var:l> + <var:e2> <var:l> := <var:l> + <var:e1> <var:l> := <var:l> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:W> = <var:m> }} <def:poly> {{ <var:l> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <var:m> /\ <var:e2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <var:m> /\ <var:e2> = <var:m> ^ <nat:2> /\ <var:e3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <var:m> /\ <var:e2> = <var:m> ^ <nat:2> /\ <var:e3> = <var:m> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <nat:2> * <var:m> /\ <var:e2> = <var:m> ^ <nat:2> /\ <var:e3> = <var:m> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <nat:2> * <var:m> /\ <var:e2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:e3> = <var:m> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <nat:2> * <var:m> /\ <var:e2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:e3> = <nat:5> * <var:m> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <nat:2> * <var:m> /\ <var:e2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:l> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e1> = <nat:2> * <var:m> /\ <var:e0> = <nat:7> /\ <var:l> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:e0> = <nat:7> /\ <var:l> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:m> /\ <var:l> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 