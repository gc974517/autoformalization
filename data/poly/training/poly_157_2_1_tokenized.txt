\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:6> ; <var:i> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:O> = <var:E> $ ahead of evaluating this series of instructions , then we have $ <var:i> = <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be given using standard Hoare techniques . Jumping to the next step contained in the segment of code , we have \verb | { <var:O> = <var:E> } <var:k0> := <nat:6> { <var:O> = <var:E> \land <var:k0> = <nat:6> } | . This is guaranteed by the rule defined by standard Hoare techniques . Going to the next step , we see \verb | { <var:O> = <var:E> } <var:k0> := <nat:6> { <var:O> = <var:E> \land <var:k0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:i> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:O> = <var:E> }} <def:poly> {{ <var:i> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:i> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 