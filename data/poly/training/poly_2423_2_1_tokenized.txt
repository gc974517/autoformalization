\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:j0> := <nat:5> ; <var:X> := <var:j0> \end{verbatim} Allowing it to hold that $ <var:W> = <var:x> $ before evaluating this code segment , then we have $ <var:X> = <nat:5> $ after series of commands exits . \end{theorem} \begin{proof} Observe this decorated program . \begin{eqnarray} \{ <var:W> = <var:x> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:W> = <var:x> \land <var:j0> = <nat:5> \} \\ <var:X> := <var:j0> \\ \{ <var:W> = <var:x> \land <var:X> = <nat:5> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:W> = <var:x> }} <var:j0> := <nat:5> ; <var:X> := <var:j0> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 