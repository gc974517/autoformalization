\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:d> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Assume , assuming some natural coefficients $ <var:N> $ , $ <var:d> = <var:N> $ prior to the evaluation of our list of commands it must be that we have $ <var:U> = <nat:7> * <var:N> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is clear with usual Hoare techniques . Further , \verb | { <var:d> = <var:N> } <var:y0> := <nat:6> { <var:d> = <var:N> \land <var:y0> = <nat:6> } | . This is deduced through the binding scheme given by standard Hoare logic . Jumping to the following step seen in our set of instructions , we have \verb | { <var:d> = <var:N> } <var:y0> := <nat:6> { <var:d> = <var:N> \land <var:y0> = <nat:6> } | . This is rigorously given through the assignment scheme in Hoare logic . Observing the following bits of codeseen in the program , we see \verb | { <var:d> = <var:N> } <var:y0> := <nat:6> { <var:d> = <var:N> \land <var:y0> = <nat:6> } | , \verb | { <var:d> = <var:N> \land <var:y0> = <nat:6> } <var:y1> := <nat:7> { <var:d> = <var:N> \land <var:y0> = <nat:6> \land <var:y1> = <nat:7> } | and \verb | { <var:d> = <var:N> \land <var:y0> = <nat:6> \land <var:y1> = <nat:7> } <var:y1> := <var:y1> * <var:d> { <var:d> = <var:N> \land <var:y0> = <nat:6> \land <var:y1> = <nat:7> * <var:N> } | . This is known to be sound with the variable assignmet rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:d> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:d> = <var:N> }} <def:poly> {{ <var:U> = <nat:7> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:y0> = <nat:6> /\ <var:U> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:U> = <nat:7> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 