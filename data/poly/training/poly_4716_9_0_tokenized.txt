\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:F> ; <var:O2> := <nat:6> ; <var:O2> := <var:O2> * <var:F> ; <var:O2> := <var:O2> * <var:F> ; <var:o> := <var:O2> ; <var:o> := <var:o> + <var:O1> ; <var:o> := <var:o> + <var:O0> \end{verbatim} Given ( given every positive integer coefficients $ <var:s> $ ) that we have $ <var:F> = <var:s> $ before running the program then we see $ <var:o> = <nat:6> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:3> $ . \end{theorem} \begin{proof} See that this decorated segment of code . \begin{eqnarray} \{ <var:F> = <var:s> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \} \\ <var:O1> := <nat:9> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \} \\ <var:O1> := <var:O1> * <var:F> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \times <var:s> \} \\ <var:O2> := <nat:6> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \times <var:s> \land <var:O2> = <nat:6> \} \\ <var:O2> := <var:O2> * <var:F> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \times <var:s> \land <var:O2> = <nat:6> \times <var:s> \} \\ <var:O2> := <var:O2> * <var:F> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \times <var:s> \land <var:O2> = <nat:6> \times <var:s> ^ <nat:2> \} \\ <var:o> := <var:O2> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:O1> = <nat:9> \times <var:s> \land <var:o> = <nat:6> \times <var:s> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:O1> ; \\ \{ <var:F> = <var:s> \land <var:O0> = <nat:3> \land <var:o> = <nat:6> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> \} \\ <var:o> := <var:o> + <var:O0> \\ \{ <var:F> = <var:s> \land <var:o> = <nat:6> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:F> = <var:s> }} <var:O0> := <nat:3> ; <var:O1> := <nat:9> ; <var:O1> := <var:O1> * <var:F> ; <var:O2> := <nat:6> ; <var:O2> := <var:O2> * <var:F> ; <var:O2> := <var:O2> * <var:F> ; <var:o> := <var:O2> ; <var:o> := <var:o> + <var:O1> ; <var:o> := <var:o> + <var:O0> {{ <var:o> = <nat:6> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> * <var:s> /\ <var:O2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> * <var:s> /\ <var:O2> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> * <var:s> /\ <var:O2> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:9> * <var:s> /\ <var:o> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:O0> = <nat:3> /\ <var:o> = <nat:6> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:s> /\ <var:o> = <nat:6> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 