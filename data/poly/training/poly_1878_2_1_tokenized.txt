\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:3> ; <var:v> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:q> = <var:N> $ prior to the execution of the segment of code it must be that $ <var:v> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is clear using usual Hoare techniques . Looking at the following line of code seen in our set of instructions , we see the variable assignmet command assigning $ <nat:3> $ toward $ <var:t0>$ . This statement transfers $ \{ <var:q> = <var:N> \} $ as $ \{ <var:q> = <var:N> \land <var:t0> = <nat:3> \} $ . Considering the next statement seen in our list of instructions , the binding statement letting $ <var:t0$ to $ <var:v>$ . This statement forwards the condition $ \{ <var:q> = <var:N> \land <var:t0> = <nat:3> \} $ as the postcondition $ \{ <var:q> = <var:N> \land <var:v> = <nat:3> \} $ . This is shown using the assignment rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:v> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:q> = <var:N> }} <def:poly> {{ <var:v> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:v> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 