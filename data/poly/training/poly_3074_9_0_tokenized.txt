\begin{document} \begin{theorem} Consider the following list of commands such that \begin{verbatim} <var:L0> := <nat:6> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:p> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:p> ; <var:L2> := <var:L2> * <var:p> ; <var:J> := <var:L2> ; <var:J> := <var:J> + <var:L1> ; <var:J> := <var:J> + <var:L0> \end{verbatim} Assume it to be that $ <var:p> = <var:E> $ prior to evaluating this list of commands , it holds that $ <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions can be given through Hoare logic . Taking a look at the next statement contained in our set of commands , the environment update command \verb | <var:L0> := <nat:6> ; | . This forwards $ \{ <var:p> = <var:E> \} $ as the postcondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \} $ . This is guaranteed by the assignment inference rule found in typical Hoare techniques . Immediately after , the environment update line \verb | <var:L1> := <nat:2> ; | . This code takes the precondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \} $ toward the postcondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \} $ . Looking at the upcoming bit of code contained in the program , the variable update code defining $ <var:L1> * <var:p> $ into $ <var:L1>$ . This moves the precondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \} $ . Observing the subsequent piece of code seen in the series of instructions , we see the assignment line \verb | <var:L2> := <nat:8> ; | . This moves the condition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \} $ into $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \} $ . Moving onward , the binding statement assigning $ <var:L2> * <var:p> $ as $ <var:L2>$ . This code moves $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \} $ as the condition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \cdot <var:E> \} $ . Honing in on the following line seen in the program , the variable update line binding $ <var:L2> * <var:p> $ into $ <var:L2>$ . This redefines the precondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \cdot <var:E> \} $ as $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule of usual Hoare logic . Observing the upcoming line of code in the code segment , we see the binding code \verb | <var:J> := <var:L2> ; | . This forwards the condition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:L2> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ toward the postcondition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ . This is ensured through the assignment inference rule given in usual Hoare techniques . Advancing , we see the variable assignmet statement letting $ <var:J> + <var:L1> $ toward $ <var:J>$ . This statement moves the condition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:L1> = <nat:2> \cdot <var:E> \land <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ to $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> \} $ . Moving forward to the upcoming line of code in the series of commands , the command binding $ <var:J> + <var:L0$ into $ <var:J>$ . This statement advances the condition $ \{ <var:p> = <var:E> \land <var:L0> = <nat:6> \land <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> \} $ to the postcondition $ \{ <var:p> = <var:E> \land <var:J> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:L0> := <nat:6> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:p> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:p> ; <var:L2> := <var:L2> * <var:p> ; <var:J> := <var:L2> ; <var:J> := <var:J> + <var:L1> ; <var:J> := <var:J> + <var:L0> {{ <var:J> = <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> * <var:E> /\ <var:L2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> * <var:E> /\ <var:L2> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> * <var:E> /\ <var:L2> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:L1> = <nat:2> * <var:E> /\ <var:J> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:L0> = <nat:6> /\ <var:J> = <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:J> = <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 