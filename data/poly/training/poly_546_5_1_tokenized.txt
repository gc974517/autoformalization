\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:w> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:5> ; <var:i> := <var:h1> <var:i> := <var:i> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:w> = <var:o> $ ( taking positive integer coefficients $ <var:o> $ ) before running our series of commands then we have $ <var:i> = <nat:5> \times <var:o> + <nat:2> $ once series of commands terminates . \end{theorem} \begin{proof} The argument for our series of commands can be done by standard Hoare techniques . Immediately after , we have \verb | { <var:w> = <var:o> } <var:h1> := <var:w> { <var:w> = <var:o> \land <var:h1> = <var:o> } | , \verb | { <var:w> = <var:o> \land <var:h1> = <var:o> } <var:h0> := <nat:2> { <var:w> = <var:o> \land <var:h1> = <var:o> \land <var:h0> = <nat:2> } | , \verb | { <var:w> = <var:o> \land <var:h1> = <var:o> \land <var:h0> = <nat:2> } <var:h1> := <var:h1> * <nat:5> { <var:w> = <var:o> \land <var:h1> = <nat:5> \times <var:o> \land <var:h0> = <nat:2> } | and \verb | { <var:w> = <var:o> \land <var:h1> = <nat:5> \times <var:o> \land <var:h0> = <nat:2> } <var:i> := <var:h1{ <var:w> = <var:o> \land <var:h0> = <nat:2> \land <var:i> = <nat:5> \times <var:o> } | . Going forward , \verb | { <var:w> = <var:o> } <var:h1> := <var:w> { <var:w> = <var:o> \land <var:h1> = <var:o> } | . This is deduced through the variable binding scheme defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:w> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:5> ; <var:i> := <var:h1> <var:i> := <var:i> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <def:poly> {{ <var:i> = <nat:5> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:h1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:h1> = <var:o> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:h1> = <nat:5> * <var:o> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:h0> = <nat:2> /\ <var:i> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:i> = <nat:5> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 