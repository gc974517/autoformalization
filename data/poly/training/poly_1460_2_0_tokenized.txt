\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:4> ; <var:s> := <var:J0> \end{verbatim} Assuming it to hold that $ <var:Z> = <var:o> $ prior to running the list of commands it holds that $ <var:s> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of instructions can be given using usual Hoare logic . After , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:o> \} & <var:J0> := <nat:4> & \{ <var:Z> = <var:o> \land <var:J0> = <nat:4> \} \\ \{ <var:Z> = <var:o> \land <var:J0> = <nat:4> \} & <var:s> := <var:J0& \{ <var:Z> = <var:o> \land <var:s> = <nat:4> \} \end{tabular} This is ensured with the binding rule defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Z> = <var:o> }} <var:J0> := <nat:4> ; <var:s> := <var:J0> {{ <var:s> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:s> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 