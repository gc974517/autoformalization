\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:y> ; <var:n> := <var:k1> ; <var:n> := <var:n> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for all whole numbers $ <var:z> $ --- that we have $ <var:y> = <var:z> $ before running our segment of code , it holds that $ <var:n> = <nat:1> * <var:z> + <nat:3> $ when code has terminated . \end{theorem} \begin{proof} Proving correctness for the set of commands is clear with usual Hoare techniques . After , we have the variable binding line \verb | <var:k0> := <nat:3> ; | . This moves $ \{ <var:y> = <var:z> \} $ to the condition $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \} $ . This is shown to be logically sound by the assignment scheme of usual Hoare techniques . Moving forward to the subsequent step contained in the series of instructions , we have the assignment code \verb | <var:k1> := <nat:1> ; | . This takes the condition $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \} $ as $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \} $ . This is deduced through the assignment rule of standard Hoare logic . Now , the assignment statement \verb | <var:k1> := <var:k1> * <var:y> ; | . This takes the condition $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \} $ toward the condition $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \cdot <var:z> \} $ . Moving on , we have the variable assignmet command giving $ <var:k1> $ toward $ <var:n>$ . This takes $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \cdot <var:z> \} $ to $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:n> = <nat:1> \cdot <var:z> \} $ . After , we see the statement \verb | <var:n> := <var:n> + <var:k0> | . This line takes $ \{ <var:y> = <var:z> \land <var:k0> = <nat:3> \land <var:n> = <nat:1> \cdot <var:z> \} $ as the postcondition $ \{ <var:y> = <var:z> \land <var:n> = <nat:1> \cdot <var:z> + <nat:3> \} $ . This is shown by the assignment inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:3> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:y> ; <var:n> := <var:k1> ; <var:n> := <var:n> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:y> = <var:z> }} <def:poly> {{ <var:n> = <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:k0> = <nat:3> /\ <var:n> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:n> = <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 