\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:4> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:Y> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:Y> ; <var:H2> := <var:H2> * <var:Y> ; <var:g> := <var:H2> ; <var:g> := <var:g> + <var:H1> ; <var:g> := <var:g> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:Y> = <var:E> $ prior to executing this series of commands , it must be that we see $ <var:g> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions is given using standard Hoare logic . Further , we have \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:H0> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \} \end{eqnarray} This is shown through the binding scheme given in standard Hoare techniques . Taking another step toward the upcoming statements in the segment of code , we have \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:H0> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \} \, <var:H1> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> \} \, <var:H1> := <var:H1> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \} \, <var:H2> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \land <var:H2> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \land <var:H2> = <nat:4> \} \, <var:H2> := <var:H2> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \land <var:H2> = <nat:4> * <var:E> \} \end{eqnarray} Advancing to the next step , we have \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:H0> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \} \, <var:H1> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> \} \, <var:H1> := <var:H1> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:H0> = <nat:4> \land <var:H1> = <nat:4> * <var:E> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:4> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:Y> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:Y> ; <var:H2> := <var:H2> * <var:Y> ; <var:g> := <var:H2> ; <var:g> := <var:g> + <var:H1> ; <var:g> := <var:g> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <def:poly> {{ <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:E> /\ <var:H2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:E> /\ <var:H2> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:E> /\ <var:H2> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:H1> = <nat:4> * <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:H0> = <nat:4> /\ <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 