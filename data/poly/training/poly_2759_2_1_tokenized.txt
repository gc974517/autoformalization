\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:8> ; <var:z> := <var:D0> \end{verbatim} Allow that we have $ <var:m> = <var:F> $ ahead of the execution of our program , it must be that we have $ <var:z> = <nat:8> $ once code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:F> \} \\ <var:D0> := <nat:8> ; \\ \{ <var:m> = <var:F> \land <var:D0> = <nat:8> \} \\ <var:z> := <var:D0> \\ \{ <var:m> = <var:F> \land <var:z> = <nat:8> \} \end{eqnarray} Using standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:m> = <var:F> }} <var:D0> := <nat:8> ; <var:z> := <var:D0> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:D0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:F> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 