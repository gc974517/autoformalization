\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:F> ; <var:v2> := <var:v1> * <var:F> ; <var:v3> := <var:v2> * <var:F> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:4> ; <var:P> := <var:v3> <var:P> := <var:P> + <var:v2> <var:P> := <var:P> + <var:v1> <var:P> := <var:P> + <var:v0> \end{verbatim} Allowing $ <var:F> = <var:r> $ prior to executing this series of commands it must be that we have $ <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> $ . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:F> = <var:r> \} \\ <var:v1> := <var:F> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <var:r> \} \\ <var:v2> := <var:v1> * <var:F> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:F> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v0> = <nat:5> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <nat:4> * <var:r> \land <var:v2> = <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v0> = <nat:5> \} \\ <var:v2> := <var:v2> * <nat:8> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <nat:4> * <var:r> \land <var:v2> = <nat:8> * <var:r> ^ <nat:2> \land <var:v3> = <var:r> ^ <nat:3> \land <var:v0> = <nat:5> \} \\ <var:v3> := <var:v3> * <nat:4> ; \\ \{ <var:F> = <var:r> \land <var:v1> = <nat:4> * <var:r> \land <var:v2> = <nat:8> * <var:r> ^ <nat:2> \land <var:v3> = <nat:4> * <var:r> ^ <nat:3> \land <var:v0> = <nat:5> \} \\ <var:P> := <var:v3> \\ \{ <var:F> = <var:r> \land <var:v1> = <nat:4> * <var:r> \land <var:v2> = <nat:8> * <var:r> ^ <nat:2> \land <var:v0> = <nat:5> \land <var:P> = <nat:4> * <var:r> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:v2> \\ \{ <var:F> = <var:r> \land <var:v1> = <nat:4> * <var:r> \land <var:v0> = <nat:5> \land <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:v1> \\ \{ <var:F> = <var:r> \land <var:v0> = <nat:5> \land <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> \} \\ <var:P> := <var:P> + <var:v0> \\ \{ <var:F> = <var:r> \land <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:F> = <var:r> }} <var:v1> := <var:F> ; <var:v2> := <var:v1> * <var:F> ; <var:v3> := <var:v2> * <var:F> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:4> ; <var:P> := <var:v3> <var:P> := <var:P> + <var:v2> <var:P> := <var:P> + <var:v1> <var:P> := <var:P> + <var:v0> {{ <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v2> = <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:v3> = <var:r> ^ <nat:3> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:v0> = <nat:5> /\ <var:P> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v0> = <nat:5> /\ <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:v0> = <nat:5> /\ <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:P> = <nat:4> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 