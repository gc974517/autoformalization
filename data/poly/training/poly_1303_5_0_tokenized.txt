\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:5> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:k> ; <var:K> := <var:D1> ; <var:K> := <var:K> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:k> = <var:T> $ prior to running this program it follows that $ <var:K> = <nat:7> \times <var:T> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be given using Hoare reasoning . Now , we see \verb | { <var:k> = <var:T> } <var:D0> := <nat:5> { <var:k> = <var:T> \land <var:D0> = <nat:5> } | , \verb | { <var:k> = <var:T> \land <var:D0> = <nat:5> } <var:D1> := <nat:7> { <var:k> = <var:T> \land <var:D0> = <nat:5> \land <var:D1> = <nat:7> } | , \verb | { <var:k> = <var:T> \land <var:D0> = <nat:5> \land <var:D1> = <nat:7> } <var:D1> := <var:D1> * <var:k> { <var:k> = <var:T> \land <var:D0> = <nat:5> \land <var:D1> = <nat:7> \cdot <var:T> } | and \verb | { <var:k> = <var:T> \land <var:D0> = <nat:5> \land <var:D1> = <nat:7> \cdot <var:T> } <var:K> := <var:D1> { <var:k> = <var:T> \land <var:D0> = <nat:5> \land <var:K> = <nat:7> \cdot <var:T> } | . This is deduced by the environment update law from typical Hoare logic . Moving on to the next statement seen in our list of commands , we see \verb | { <var:k> = <var:T> } <var:D0> := <nat:5> { <var:k> = <var:T> \land <var:D0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D0> := <nat:5> ; <var:D1> := <nat:7> ; <var:D1> := <var:D1> * <var:k> ; <var:K> := <var:D1> ; <var:K> := <var:K> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:k> = <var:T> }} <def:poly> {{ <var:K> = <nat:7> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:D0> = <nat:5> /\ <var:D1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:D0> = <nat:5> /\ <var:D1> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:D0> = <nat:5> /\ <var:K> = <nat:7> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:K> = <nat:7> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 