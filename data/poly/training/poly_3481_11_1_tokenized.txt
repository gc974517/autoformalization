\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:E> ; <var:J2> := <var:J1> * <var:E> ; <var:J3> := <var:J2> * <var:E> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:7> ; <var:J3> := <var:J3> * <nat:7> ; <var:P> := <var:J3> <var:P> := <var:P> + <var:J2> <var:P> := <var:P> + <var:J1> <var:P> := <var:P> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:E> = <var:S> $ ( for every natural numbers $ <var:S> $ ) before the evaluation of our series of instructions , it must be that we have $ <var:P> = <nat:7> \cdot <var:S> ^ <nat:3> + <nat:7> \cdot <var:S> ^ <nat:2> + <nat:6> \cdot <var:S> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be demonstrated using standard Hoare logic . Immediately following , the binding line \verb | <var:J1> := <var:E> ; | . This code moves the condition $ \{ <var:E> = <var:S> \} $ as the postcondition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \} $ . Advancing , we see the assignment command assigning $ <var:J1> * <var:E> $ into $ <var:J2>$ . This takes the condition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \} $ into the condition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule defined in Hoare techniques . Considering the upcoming step found in our program , the variable assignmet line giving $ <var:J2> * <var:E> $ to $ <var:J3>$ . This forwards the condition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \} $ as the postcondition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \} $ . This is given through the assignment rule in Hoare techniques . Taking a look at the proceeding statement contained in our code , the statement \verb | <var:J0> := <nat:9> ; | . This transfers $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \} $ as the postcondition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . This is ensured using the assignment inference rule found in standard Hoare logic . Moving forward , the assignment statement binding $ <var:J1> * <nat:6> $ as $ <var:J1>$ . This line moves the condition $ \{ <var:E> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ to $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . This is shown to be logically sound by the assignment inference rule given in typical Hoare logic . Immediately following , the command defining $ <var:J2> * <nat:7> $ as $ <var:J2>$ . This line transfers the precondition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ toward the condition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . Shifting focus toward the subsequent line contained in the set of commands , we have the assignment statement yielding $ <var:J3> * <nat:7> $ into $ <var:J3>$ . This advances the precondition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ as the condition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J3> = <nat:7> * <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . Moving forward to the upcoming command contained in our program , we have the environment update statement \verb | <var:P> := <var:J3> | . This transfers the precondition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J3> = <nat:7> * <var:S> ^ <nat:3> \land <var:J0> = <nat:9> \} $ to the postcondition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule defined in typical Hoare reasoning . Going forward , we see the binding statement \verb | <var:P> := <var:P> + <var:J2> | . This moves the condition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J2> = <nat:7> * <var:S> ^ <nat:2> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> \} $ as the condition $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> \} $ . Moving forward , the assignment command defining $ <var:P> + <var:J1$ into $ <var:P>$ . This advances $ \{ <var:E> = <var:S> \land <var:J1> = <nat:6> * <var:S> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> \} $ as the postcondition $ \{ <var:E> = <var:S> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> \} $ . This is shown to be logically sound by the assignment inference rule defined by Hoare techniques . Further , the statement letting $ <var:P> + <var:J0$ into $ <var:P>$ . This takes the condition $ \{ <var:E> = <var:S> \land <var:J0> = <nat:9> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> \} $ into $ \{ <var:E> = <var:S> \land <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> \} $ . This is known to be sound by the assignment law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:E> ; <var:J2> := <var:J1> * <var:E> ; <var:J3> := <var:J2> * <var:E> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:7> ; <var:J3> := <var:J3> * <nat:7> ; <var:P> := <var:J3> <var:P> := <var:P> + <var:J2> <var:P> := <var:P> + <var:J1> <var:P> := <var:P> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:E> = <var:S> }} <def:poly> {{ <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <nat:6> * <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <nat:6> * <var:S> /\ <var:J2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <nat:6> * <var:S> /\ <var:J2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:J3> = <nat:7> * <var:S> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <nat:6> * <var:S> /\ <var:J2> = <nat:7> * <var:S> ^ <nat:2> /\ <var:J0> = <nat:9> /\ <var:P> = <nat:7> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J1> = <nat:6> * <var:S> /\ <var:J0> = <nat:9> /\ <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:J0> = <nat:9> /\ <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:S> /\ <var:P> = <nat:7> * <var:S> ^ <nat:3> + <nat:7> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 