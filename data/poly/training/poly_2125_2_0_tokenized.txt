\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:5> ; <var:C> := <var:f0> \end{verbatim} Assume $ <var:I> = <var:d> $ ahead of the evaluation of our code segment , it must be that we see $ <var:C> = <nat:5> $ . \end{theorem} \begin{proof} The argument for the list of instructions can be given with typical Hoare techniques . Moving onward , we see the variable binding line \verb | <var:f0> := <nat:5> ; | . This statement takes $ \{ <var:I> = <var:d> \} $ as $ \{ <var:I> = <var:d> \land <var:f0> = <nat:5> \} $ . Considering the next statement seen in our series of commands , the variable assignmet line letting $ <var:f0$ as $ <var:C>$ . This line advances the precondition $ \{ <var:I> = <var:d> \land <var:f0> = <nat:5> \} $ into $ \{ <var:I> = <var:d> \land <var:C> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:I> = <var:d> }} <var:f0> := <nat:5> ; <var:C> := <var:f0> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:d> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 