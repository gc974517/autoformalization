\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:r> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:r> ; <var:z2> := <var:z2> * <var:r> ; <var:B> := <var:z2> ; <var:B> := <var:B> + <var:z1> ; <var:B> := <var:B> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assuming it to hold that $ <var:r> = <var:e> $ before the execution of this set of instructions , then $ <var:B> = <nat:6> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:4> $ after code executes . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:r> = <var:e> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> * <var:e> \} \\ <var:z2> := <nat:6> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> * <var:e> \land <var:z2> = <nat:6> \} \\ <var:z2> := <var:z2> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> * <var:e> \land <var:z2> = <nat:6> * <var:e> \} \\ <var:z2> := <var:z2> * <var:r> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> * <var:e> \land <var:z2> = <nat:6> * <var:e> ^ <nat:2> \} \\ <var:B> := <var:z2> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> * <var:e> \land <var:B> = <nat:6> * <var:e> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:z1> ; \\ \{ <var:r> = <var:e> \land <var:z0> = <nat:4> \land <var:B> = <nat:6> * <var:e> ^ <nat:2> + <nat:4> * <var:e> \} \\ <var:B> := <var:B> + <var:z0> \\ \{ <var:r> = <var:e> \land <var:B> = <nat:6> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:4> \} \end{eqnarray} Considering the above , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:r> ; <var:z2> := <nat:6> ; <var:z2> := <var:z2> * <var:r> ; <var:z2> := <var:z2> * <var:r> ; <var:B> := <var:z2> ; <var:B> := <var:B> + <var:z1> ; <var:B> := <var:B> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:r> = <var:e> }} <def:poly> {{ <var:B> = <nat:6> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:e> /\ <var:z2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:e> /\ <var:z2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:e> /\ <var:z2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:e> /\ <var:B> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:z0> = <nat:4> /\ <var:B> = <nat:6> * <var:e> ^ <nat:2> + <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:e> /\ <var:B> = <nat:6> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 