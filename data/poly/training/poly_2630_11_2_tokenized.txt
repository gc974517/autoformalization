\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume $ <var:Y> = <var:H> $ prior to executing this program , then we have $ <var:u> = <nat:2> \cdot <var:H> ^ <nat:10> + <nat:3> \cdot <var:H> ^ <nat:9> + <nat:4> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:1> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:2> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the series of instructions can be done through Hoare logic . Honing in on the next pieces of code found in the list of commands , \begin{verbatim} { <var:Y> = <var:H> } <var:u> := <nat:2> { <var:Y> = <var:H> \land <var:u> = <nat:2> } { <var:Y> = <var:H> \land <var:u> = <nat:2> } <var:u> := <nat:3> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } <var:u> := <nat:4> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:4> } { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:4> } <var:u> := <nat:2> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> } \end{verbatim} This is known to be sound using the variable binding scheme from usual Hoare techniques . Keeping momentum , \begin{verbatim} { <var:Y> = <var:H> } <var:u> := <nat:2> { <var:Y> = <var:H> \land <var:u> = <nat:2> } { <var:Y> = <var:H> \land <var:u> = <nat:2> } <var:u> := <nat:3> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } <var:u> := <nat:4> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:4> } \end{verbatim} This is shown to be logically sound using the assignment scheme given by standard Hoare logic . Honing in on the upcoming step in our code segment , we see \begin{verbatim} { <var:Y> = <var:H> } <var:u> := <nat:2> { <var:Y> = <var:H> \land <var:u> = <nat:2> } \end{verbatim} This is shown through the environment update inference rule given in Hoare techniques . Stepping through , \begin{verbatim} { <var:Y> = <var:H> } <var:u> := <nat:2> { <var:Y> = <var:H> \land <var:u> = <nat:2> } { <var:Y> = <var:H> \land <var:u> = <nat:2> } <var:u> := <nat:3> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> + <nat:3> } <var:u> := <nat:4> + <var:u> * <var:Y> { <var:Y> = <var:H> \land <var:u> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:3> + <var:u> * <var:Y> ; <var:u> := <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <def:poly> {{ <var:u> = <nat:2> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 