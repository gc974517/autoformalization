\begin{document} \begin{theorem} Define the following program such that \begin{verbatim} <var:h0> := <nat:7> ; <var:C> := <var:h0> \end{verbatim} Allow that $ <var:O> = <var:o> $ before the execution of the code segment it must be that we see $ <var:C> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:o> \} \\ <var:h0> := <nat:7> ; \\ \{ <var:O> = <var:o> \land <var:h0> = <nat:7> \} \\ <var:C> := <var:h0> \\ \{ <var:O> = <var:o> \land <var:C> = <nat:7> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <var:h0> := <nat:7> ; <var:C> := <var:h0> {{ <var:C> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:C> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 