\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:O> ; <var:q2> := <var:q1> * <var:O> ; <var:q3> := <var:q2> * <var:O> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:3> ; <var:q2> := <var:q2> * <nat:1> ; <var:q3> := <var:q3> * <nat:4> ; <var:M> := <var:q3> <var:M> := <var:M> + <var:q2> <var:M> := <var:M> + <var:q1> <var:M> := <var:M> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:O> = <var:X> $ prior to the execution of our series of commands it holds that we have $ <var:M> = <nat:4> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:2> $ once code segment has finished executing . \end{theorem} \begin{proof} The course of logic for this set of commands is accomplished by usual Hoare reasoning . Moving on to the next step , we have \begin{verbatim} { <var:O> = <var:X> } <var:q1> := <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> } { <var:O> = <var:X> \land <var:q1> = <var:X> } <var:q2> := <var:q1> * <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> } { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> } <var:q3> := <var:q2> * <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> } \end{verbatim} Moving forward , we have \begin{verbatim} { <var:O> = <var:X> } <var:q1> := <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> } { <var:O> = <var:X> \land <var:q1> = <var:X> } <var:q2> := <var:q1> * <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> } { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> } <var:q3> := <var:q2> * <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> } { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> } <var:q0> := <nat:2> { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> \land <var:q0> = <nat:2> } { <var:O> = <var:X> \land <var:q1> = <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> \land <var:q0> = <nat:2> } <var:q1> := <var:q1> * <nat:3> { <var:O> = <var:X> \land <var:q1> = <nat:3> \times <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> \land <var:q0> = <nat:2> } { <var:O> = <var:X> \land <var:q1> = <nat:3> \times <var:X> \land <var:q2> = <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> \land <var:q0> = <nat:2> } <var:q2> := <var:q2> * <nat:1> { <var:O> = <var:X> \land <var:q1> = <nat:3> \times <var:X> \land <var:q2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:q3> = <var:X> ^ <nat:3> \land <var:q0> = <nat:2> } \end{verbatim} This is shown with the binding rule given by usual Hoare logic . Following , \begin{verbatim} { <var:O> = <var:X> } <var:q1> := <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> } \end{verbatim} This is deduced by the variable update rule found in Hoare reasoning . Taking a look at the upcoming statement contained in the set of instructions , we have \begin{verbatim} { <var:O> = <var:X> } <var:q1> := <var:O> { <var:O> = <var:X> \land <var:q1> = <var:X> } \end{verbatim} This is sound using the law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:O> ; <var:q2> := <var:q1> * <var:O> ; <var:q3> := <var:q2> * <var:O> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:3> ; <var:q2> := <var:q2> * <nat:1> ; <var:q3> := <var:q3> * <nat:4> ; <var:M> := <var:q3> <var:M> := <var:M> + <var:q2> <var:M> := <var:M> + <var:q1> <var:M> := <var:M> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:O> = <var:X> }} <def:poly> {{ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <var:X> /\ <var:q2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <var:X> /\ <var:q2> = <var:X> ^ <nat:2> /\ <var:q3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <var:X> /\ <var:q2> = <var:X> ^ <nat:2> /\ <var:q3> = <var:X> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <nat:3> * <var:X> /\ <var:q2> = <var:X> ^ <nat:2> /\ <var:q3> = <var:X> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <nat:3> * <var:X> /\ <var:q2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:q3> = <var:X> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <nat:3> * <var:X> /\ <var:q2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:q3> = <nat:4> * <var:X> ^ <nat:3> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <nat:3> * <var:X> /\ <var:q2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:4> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q1> = <nat:3> * <var:X> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:X> /\ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 