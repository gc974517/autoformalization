\begin{document} \begin{theorem} Consider the following list of commands as \begin{verbatim} <var:o0> := <nat:1> ; <var:P> := <var:o0> \end{verbatim} Assuming that $ <var:t> = <var:u> $ ahead of interpreting the list of instructions , it follows that we see $ <var:P> = <nat:1> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:t> = <var:u> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:t> = <var:u> \land <var:o0> = <nat:1> \} \\ <var:P> := <var:o0> \\ \{ <var:t> = <var:u> \land <var:P> = <nat:1> \} \end{eqnarray} As a consequence , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:t> = <var:u> }} <var:o0> := <nat:1> ; <var:P> := <var:o0> {{ <var:P> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:P> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 