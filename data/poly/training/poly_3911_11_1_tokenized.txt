\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:j> ; <var:z2> := <var:z1> * <var:j> ; <var:z3> := <var:z2> * <var:j> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:6> ; <var:z2> := <var:z2> * <nat:6> ; <var:z3> := <var:z3> * <nat:1> ; <var:L> := <var:z3> <var:L> := <var:L> + <var:z2> <var:L> := <var:L> + <var:z1> <var:L> := <var:L> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:j> = <var:m> $ before running the series of instructions , then we have $ <var:L> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> + <nat:9> $ once list of instructions is done . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:j> = <var:m> \} \\ <var:z1> := <var:j> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <var:m> \} \\ <var:z2> := <var:z1> * <var:j> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <var:m> \land <var:z2> = <var:m> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:j> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <var:m> \land <var:z2> = <var:m> ^ <nat:2> \land <var:z3> = <var:m> ^ <nat:3> \} \\ <var:z0> := <nat:9> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <var:m> \land <var:z2> = <var:m> ^ <nat:2> \land <var:z3> = <var:m> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z1> := <var:z1> * <nat:6> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <nat:6> \cdot <var:m> \land <var:z2> = <var:m> ^ <nat:2> \land <var:z3> = <var:m> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z2> := <var:z2> * <nat:6> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <nat:6> \cdot <var:m> \land <var:z2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:z3> = <var:m> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:z3> := <var:z3> * <nat:1> ; \\ \{ <var:j> = <var:m> \land <var:z1> = <nat:6> \cdot <var:m> \land <var:z2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:z3> = <nat:1> \cdot <var:m> ^ <nat:3> \land <var:z0> = <nat:9> \} \\ <var:L> := <var:z3> \\ \{ <var:j> = <var:m> \land <var:z1> = <nat:6> \cdot <var:m> \land <var:z2> = <nat:6> \cdot <var:m> ^ <nat:2> \land <var:z0> = <nat:9> \land <var:L> = <nat:1> \cdot <var:m> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:z2> \\ \{ <var:j> = <var:m> \land <var:z1> = <nat:6> \cdot <var:m> \land <var:z0> = <nat:9> \land <var:L> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:z1> \\ \{ <var:j> = <var:m> \land <var:z0> = <nat:9> \land <var:L> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> \} \\ <var:L> := <var:L> + <var:z0> \\ \{ <var:j> = <var:m> \land <var:L> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> + <nat:9> \} \end{eqnarray} Therefore , our list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z1> := <var:j> ; <var:z2> := <var:z1> * <var:j> ; <var:z3> := <var:z2> * <var:j> ; <var:z0> := <nat:9> ; <var:z1> := <var:z1> * <nat:6> ; <var:z2> := <var:z2> * <nat:6> ; <var:z3> := <var:z3> * <nat:1> ; <var:L> := <var:z3> <var:L> := <var:L> + <var:z2> <var:L> := <var:L> + <var:z1> <var:L> := <var:L> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:j> = <var:m> }} <def:poly> {{ <var:L> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <var:m> /\ <var:z2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <var:m> /\ <var:z2> = <var:m> ^ <nat:2> /\ <var:z3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <var:m> /\ <var:z2> = <var:m> ^ <nat:2> /\ <var:z3> = <var:m> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <nat:6> * <var:m> /\ <var:z2> = <var:m> ^ <nat:2> /\ <var:z3> = <var:m> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <nat:6> * <var:m> /\ <var:z2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:z3> = <var:m> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <nat:6> * <var:m> /\ <var:z2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:m> ^ <nat:3> /\ <var:z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <nat:6> * <var:m> /\ <var:z2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:z0> = <nat:9> /\ <var:L> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z1> = <nat:6> * <var:m> /\ <var:z0> = <nat:9> /\ <var:L> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:z0> = <nat:9> /\ <var:L> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:m> /\ <var:L> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 