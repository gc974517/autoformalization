\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:n1> := <var:k> ; <var:n2> := <var:n1> * <var:k> ; <var:n3> := <var:n2> * <var:k> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:7> ; <var:a> := <var:n3> <var:a> := <var:a> + <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:k> = <var:A> $ before executing our list of commands , then $ <var:a> = <nat:7> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for our program is given with typical Hoare techniques . Moving forward , we have the command binding $ <var:k> $ into $ <var:n1>$ . This code transfers $ \{ <var:k> = <var:A> \} $ to the postcondition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \} $ . Further , we have the variable update statement \verb | <var:n2> := <var:n1> * <var:k> ; | . This advances the condition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \} $ into the condition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \} $ . Taking a look at the next line of code found in our code , we see the environment update statement giving $ <var:n2> * <var:k> $ into $ <var:n3>$ . This transfers the precondition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \} $ to $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \} $ . Considering the proceeding line of code contained in our list of instructions , we have the assignment line \verb | <var:n0> := <nat:9> ; | . This line takes the precondition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \} $ into $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ . Paying attention to the subsequent bit of code contained in the series of commands , we see the code \verb | <var:n1> := <var:n1> * <nat:5> ; | . This line redefines the precondition $ \{ <var:k> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ as the condition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ . After , we have the variable binding line \verb | <var:n2> := <var:n2> * <nat:6> ; | . This redefines the condition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ as $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ . This is known to be sound with the assignment inference rule given by typical Hoare logic . Next , the variable binding code \verb | <var:n3> := <var:n3> * <nat:7> ; | . This line redefines $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ into $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ . Going to the next step , we see the variable update statement defining $ <var:n3$ as $ <var:a>$ . This statement moves $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:n0> = <nat:9> \} $ into the postcondition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> \} $ . Jumping to the subsequent step found in the list of instructions , the variable binding statement \verb | <var:a> := <var:a> + <var:n2> | . This code forwards the precondition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> \} $ toward the postcondition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> \} $ . This is guaranteed with the assignment rule of usual Hoare reasoning . Moving on to the following piece of code in our program , we have the statement \verb | <var:a> := <var:a> + <var:n1> | . This moves the condition $ \{ <var:k> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> \} $ to $ \{ <var:k> = <var:A> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> \} $ . Immediately following , we see the variable update code \verb | <var:a> := <var:a> + <var:n0> | . This takes $ \{ <var:k> = <var:A> \land <var:n0> = <nat:9> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> \} $ to $ \{ <var:k> = <var:A> \land <var:a> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> + <nat:9> \} $ . This is shown using the assignment scheme given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:k> ; <var:n2> := <var:n1> * <var:k> ; <var:n3> := <var:n2> * <var:k> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:7> ; <var:a> := <var:n3> <var:a> := <var:a> + <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:k> = <var:A> }} <def:poly> {{ <var:a> = <nat:7> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:n3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:n0> = <nat:9> /\ <var:a> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n0> = <nat:9> /\ <var:a> = <nat:7> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:n0> = <nat:9> /\ <var:a> = <nat:7> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:A> /\ <var:a> = <nat:7> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 