\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:s> ; <var:W> := <nat:4> + <var:W> * <var:s> ; <var:W> := <nat:4> + <var:W> * <var:s> ; <var:W> := <nat:2> + <var:W> * <var:s> ; <var:W> := <var:W> * <var:s> ; <var:W> := <nat:3> + <var:W> * <var:s> ; <var:W> := <nat:3> + <var:W> * <var:s> ; <var:W> := <nat:1> + <var:W> * <var:s> \end{verbatim} Assume it to be that $ <var:s> = <var:I> $ ahead of the evaluation of the program it must be that we see $ <var:W> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> $ when series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be seen using usual Hoare reasoning . Immediately after , we have \verb | { <var:s> = <var:I> } <var:W> := <nat:3> { <var:s> = <var:I> \land <var:W> = <nat:3> } | . Advancing to the upcoming commands contained in our series of instructions , we have \verb | { <var:s> = <var:I> } <var:W> := <nat:3> { <var:s> = <var:I> \land <var:W> = <nat:3> } | , \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> } <var:W> := <nat:2> + <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> + <nat:2> } | , \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> + <nat:2> } <var:W> := <nat:4> + <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:4> } | , \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:4> } <var:W> := <nat:4> + <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:4> } | , \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:4> } <var:W> := <nat:2> + <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:2> } | and \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:4> + <nat:2> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:2> } <var:W> := <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> ^ <nat:5> + <nat:2> \times <var:I> ^ <nat:4> + <nat:4> \times <var:I> ^ <nat:3> + <nat:4> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + } | . Moving on to the following lines of codefound in the code , \verb | { <var:s> = <var:I> } <var:W> := <nat:3> { <var:s> = <var:I> \land <var:W> = <nat:3> } | and \verb | { <var:s> = <var:I> \land <var:W> = <nat:3> } <var:W> := <nat:2> + <var:W> * <var:s> { <var:s> = <var:I> \land <var:W> = <nat:3> \times <var:I> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:s> = <var:I> }} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:s> ; <var:W> := <nat:4> + <var:W> * <var:s> ; <var:W> := <nat:4> + <var:W> * <var:s> ; <var:W> := <nat:2> + <var:W> * <var:s> ; <var:W> := <var:W> * <var:s> ; <var:W> := <nat:3> + <var:W> * <var:s> ; <var:W> := <nat:3> + <var:W> * <var:s> ; <var:W> := <nat:1> + <var:W> * <var:s> {{ <var:W> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:I> /\ <var:W> = <nat:3> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 