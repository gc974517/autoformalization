\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:2> ; <var:G> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:b> = <var:T> $ --- given positive coefficients $ <var:T> $ --- before the execution of this set of commands , it must be that we have $ <var:G> = <nat:2> $ once segment of code finishes . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:T> \} \\ <var:S0> := <nat:2> ; \\ \{ <var:b> = <var:T> \land <var:S0> = <nat:2> \} \\ <var:G> := <var:S0> \\ \{ <var:b> = <var:T> \land <var:G> = <nat:2> \} \end{eqnarray} Thusly , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:2> ; <var:G> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:b> = <var:T> }} <def:poly> {{ <var:G> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:T> /\ <var:G> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 