\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:m> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:R> := <var:U1> <var:R> := <var:R> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allow ( assuming some whole numbers $ <var:u> $ ) that $ <var:m> = <var:u> $ before interpreting the series of commands , it holds that we see $ <var:R> = <nat:4> \cdot <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions is given using usual Hoare reasoning . Further , we have the binding code \verb | <var:U1> := <var:m> ; | . This redefines $ \{ <var:m> = <var:u> \} $ to the condition $ \{ <var:m> = <var:u> \land <var:U1> = <var:u> \} $ . Going to the next step , we have the assignment code \verb | <var:U0> := <nat:1> ; | . This line moves $ \{ <var:m> = <var:u> \land <var:U1> = <var:u> \} $ to $ \{ <var:m> = <var:u> \land <var:U1> = <var:u> \land <var:U0> = <nat:1> \} $ . Taking a look at the following command in our list of commands , we see the assignment line \verb | <var:U1> := <var:U1> * <nat:4> ; | . This takes the condition $ \{ <var:m> = <var:u> \land <var:U1> = <var:u> \land <var:U0> = <nat:1> \} $ into the condition $ \{ <var:m> = <var:u> \land <var:U1> = <nat:4> * <var:u> \land <var:U0> = <nat:1> \} $ . This is deduced using the assignment rule found in typical Hoare techniques . Advancing to the proceeding statement seen in the code segment , the variable assignmet statement binding $ <var:U1$ to $ <var:R>$ . This takes the condition $ \{ <var:m> = <var:u> \land <var:U1> = <nat:4> * <var:u> \land <var:U0> = <nat:1> \} $ into the condition $ \{ <var:m> = <var:u> \land <var:U0> = <nat:1> \land <var:R> = <nat:4> * <var:u> \} $ . Jumping to the subsequent line in the set of instructions , we have the variable assignmet line \verb | <var:R> := <var:R> + <var:U0> | . This advances $ \{ <var:m> = <var:u> \land <var:U0> = <nat:1> \land <var:R> = <nat:4> * <var:u> \} $ as the postcondition $ \{ <var:m> = <var:u> \land <var:R> = <nat:4> * <var:u> + <nat:1> \} $ . This is sound through the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:m> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:R> := <var:U1> <var:R> := <var:R> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:m> = <var:u> }} <def:poly> {{ <var:R> = <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:U1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:U1> = <var:u> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:U1> = <nat:4> * <var:u> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:U0> = <nat:1> /\ <var:R> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:u> /\ <var:R> = <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 