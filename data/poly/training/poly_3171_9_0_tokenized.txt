\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:2> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:Y> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:Y> ; <var:l2> := <var:l2> * <var:Y> ; <var:J> := <var:l2> ; <var:J> := <var:J> + <var:l1> ; <var:J> := <var:J> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:Y> = <var:z> $ before the execution of the segment of code it holds that we see $ <var:J> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> $ once set of commands has finished executing . \end{theorem} \begin{proof} The argument for this list of commands can be shown with the below decorated code segment . \begin{eqnarray} \{ <var:Y> = <var:z> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \} \\ <var:l1> := <nat:8> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \} \\ <var:l1> := <var:l1> * <var:Y> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:z> \} \\ <var:l2> := <nat:4> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:z> \land <var:l2> = <nat:4> \} \\ <var:l2> := <var:l2> * <var:Y> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:z> \land <var:l2> = <nat:4> \cdot <var:z> \} \\ <var:l2> := <var:l2> * <var:Y> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:z> \land <var:l2> = <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:J> := <var:l2> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:l1> = <nat:8> \cdot <var:z> \land <var:J> = <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:l1> ; \\ \{ <var:Y> = <var:z> \land <var:l0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> \} \\ <var:J> := <var:J> + <var:l0> \\ \{ <var:Y> = <var:z> \land <var:J> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:2> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:Y> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:Y> ; <var:l2> := <var:l2> * <var:Y> ; <var:J> := <var:l2> ; <var:J> := <var:J> + <var:l1> ; <var:J> := <var:J> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Y> = <var:z> }} <def:poly> {{ <var:J> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:z> /\ <var:l2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:z> /\ <var:l2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:z> /\ <var:l2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:8> * <var:z> /\ <var:J> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:l0> = <nat:2> /\ <var:J> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:J> = <nat:4> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 