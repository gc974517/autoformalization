\begin{document} \begin{theorem} Consider a set of instructions as \begin{verbatim} <var:P1> := <var:V> ; <var:P2> := <var:P1> * <var:V> ; <var:P3> := <var:P2> * <var:V> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:6> ; <var:P3> := <var:P3> * <nat:9> ; <var:z> := <var:P3> <var:z> := <var:z> + <var:P2> <var:z> := <var:z> + <var:P1> <var:z> := <var:z> + <var:P0> \end{verbatim} Given given positive integer coefficients $ <var:I> $ that $ <var:V> = <var:I> $ ahead of executing our code it holds that we see $ <var:z> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:6> \cdot <var:I> ^ <nat:2> + <nat:9> \cdot <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is demonstrated using typical Hoare techniques . Moving on , \begin{verbatim} { <var:V> = <var:I> } <var:P1> := <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> } { <var:V> = <var:I> \land <var:P1> = <var:I> } <var:P2> := <var:P1> * <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> } \end{verbatim} Considering the subsequent statement found in our series of commands , \begin{verbatim} { <var:V> = <var:I> } <var:P1> := <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> } \end{verbatim} Taking another step toward the subsequent pieces of code seen in the list of commands , we see \begin{verbatim} { <var:V> = <var:I> } <var:P1> := <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> } { <var:V> = <var:I> \land <var:P1> = <var:I> } <var:P2> := <var:P1> * <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> } { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> } <var:P3> := <var:P2> * <var:V> { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> } { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> } <var:P0> := <nat:4> { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } { <var:V> = <var:I> \land <var:P1> = <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } <var:P1> := <var:P1> * <nat:9> { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } <var:P2> := <var:P2> * <nat:6> { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:P3> = <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } <var:P3> := <var:P3> * <nat:9> { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:P3> = <nat:9> \cdot <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } { <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:P3> = <nat:9> \cdot <var:I> ^ <nat:3> \land <var:P0> = <nat:4> } <var:z> := <var:P3{ <var:V> = <var:I> \land <var:P1> = <nat:9> \cdot <var:I> \land <var:P2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:P0> = <nat:4> \land <var:z> = <nat:9> \cdot <var:I> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:V> = <var:I> }} <var:P1> := <var:V> ; <var:P2> := <var:P1> * <var:V> ; <var:P3> := <var:P2> * <var:V> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:6> ; <var:P3> := <var:P3> * <nat:9> ; <var:z> := <var:P3> <var:z> := <var:z> + <var:P2> <var:z> := <var:z> + <var:P1> <var:z> := <var:z> + <var:P0> {{ <var:z> = <nat:9> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <var:I> /\ <var:P2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <var:I> /\ <var:P2> = <var:I> ^ <nat:2> /\ <var:P3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <var:I> /\ <var:P2> = <var:I> ^ <nat:2> /\ <var:P3> = <var:I> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <var:I> ^ <nat:2> /\ <var:P3> = <var:I> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:P3> = <var:I> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:P3> = <nat:9> * <var:I> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:P0> = <nat:4> /\ <var:z> = <nat:9> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P1> = <nat:9> * <var:I> /\ <var:P0> = <nat:4> /\ <var:z> = <nat:9> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:P0> = <nat:4> /\ <var:z> = <nat:9> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:I> /\ <var:z> = <nat:9> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 