\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:i1> := <var:z> ; <var:i2> := <var:i1> * <var:z> ; <var:i3> := <var:i2> * <var:z> ; <var:i0> := <nat:8> ; <var:i2> := <var:i2> * <nat:4> ; <var:i3> := <var:i3> * <nat:4> ; <var:L> := <var:i3> <var:L> := <var:L> + <var:i2> <var:L> := <var:L> + <var:i0> \end{verbatim} Assuming ( given some $ <var:I> $ ) $ <var:z> = <var:I> $ prior to the execution of this series of commands , then we have $ <var:L> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:8> $ when program has finished . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be demonstrated using typical Hoare logic . Taking another step toward the following bits of codefound in the series of commands , \begin{eqnarray} \{ <var:z> = <var:I> \} \, <var:i1> := <var:z> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \} \, <var:i2> := <var:i1> * <var:z> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \} \, <var:i3> := <var:i2> * <var:z> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \} \, <var:i0> := <nat:8> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:i2> := <var:i2> * <nat:4> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i3> = <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:i3> := <var:i3> * <nat:4> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i3> = <nat:4> * <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i3> = <nat:4> * <var:I> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:L> := <var:i3\, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i0> = <nat:8> \land <var:L> = <nat:4> * <var:I> ^ <nat:3> \} \\ \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i2> = <nat:4> * <var:I> ^ <nat:2> \land <var:i0> = <nat:8> \land <var:L> = <nat:4> * <var:I> ^ <nat:3> \} \, <var:L> := <var:L> + <var:i2\, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \land <var:i0> = <nat:8> \land <var:L> = <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> \} \end{eqnarray} Jumping to the upcoming line of code in the set of commands , we see \begin{eqnarray} \{ <var:z> = <var:I> \} \, <var:i1> := <var:z> \, \{ <var:z> = <var:I> \land <var:i1> = <var:I> \} \end{eqnarray} This is guaranteed with the variable assignmet law given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:z> = <var:I> }} <var:i1> := <var:z> ; <var:i2> := <var:i1> * <var:z> ; <var:i3> := <var:i2> * <var:z> ; <var:i0> := <nat:8> ; <var:i2> := <var:i2> * <nat:4> ; <var:i3> := <var:i3> * <nat:4> ; <var:L> := <var:i3> <var:L> := <var:L> + <var:i2> <var:L> := <var:L> + <var:i0> {{ <var:L> = <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <var:I> ^ <nat:2> /\ <var:i3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <var:I> ^ <nat:2> /\ <var:i3> = <var:I> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:i3> = <var:I> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:I> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:i0> = <nat:8> /\ <var:L> = <nat:4> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:i1> = <var:I> /\ <var:i0> = <nat:8> /\ <var:L> = <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:I> /\ <var:L> = <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 