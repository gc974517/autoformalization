\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:v> ; <var:b2> := <nat:4> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:n> := <var:b2> ; <var:n> := <var:n> + <var:b1> ; <var:n> := <var:n> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:v> = <var:z> $ before executing our program , then we see $ <var:n> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:z> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \} \\ <var:b1> := <nat:2> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \} \\ <var:b1> := <var:b1> * <var:v> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \times <var:z> \} \\ <var:b2> := <nat:4> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \times <var:z> \land <var:b2> = <nat:4> \} \\ <var:b2> := <var:b2> * <var:v> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \times <var:z> \land <var:b2> = <nat:4> \times <var:z> \} \end{eqnarray} Allowing evaluating our series of instructions produces : \begin{eqnarray} <var:b2> := <var:b2> * <var:v> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \times <var:z> \land <var:b2> = <nat:4> \times <var:z> ^ <nat:2> \} \\ <var:n> := <var:b2> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:b1> = <nat:2> \times <var:z> \land <var:n> = <nat:4> \times <var:z> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:b1> ; \\ \{ <var:v> = <var:z> \land <var:b0> = <nat:9> \land <var:n> = <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> \} \\ <var:n> := <var:n> + <var:b0> \\ \{ <var:v> = <var:z> \land <var:n> = <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:v> ; <var:b2> := <nat:4> ; <var:b2> := <var:b2> * <var:v> ; <var:b2> := <var:b2> * <var:v> ; <var:n> := <var:b2> ; <var:n> := <var:n> + <var:b1> ; <var:n> := <var:n> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:v> = <var:z> }} <def:poly> {{ <var:n> = <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> * <var:z> /\ <var:b2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> * <var:z> /\ <var:b2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> * <var:z> /\ <var:b2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:2> * <var:z> /\ <var:n> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:b0> = <nat:9> /\ <var:n> = <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:n> = <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 