\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <var:i> * <var:T> ; <var:i> := <nat:3> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> \end{verbatim} Allow $ <var:T> = <var:y> $ prior to executing the list of instructions it must be that $ <var:i> = <nat:1> \times <var:y> ^ <nat:10> + <nat:2> \times <var:y> ^ <nat:9> + <nat:2> \times <var:y> ^ <nat:8> + <nat:4> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:5> + <nat:4> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:2> $ when program finishes . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:T> = <var:y> \} \\ <var:i> := <nat:1> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> \} \\ <var:i> := <nat:2> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> + <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> \} \\ <var:i> := <nat:4> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> \} \\ <var:i> := <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + \} \\ <var:i> := <nat:2> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> \} \\ <var:i> := <nat:4> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:4> \} \\ <var:i> := <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + \} \\ <var:i> := <nat:3> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> \} \end{eqnarray} Continuing evaluating this code segment yields : \begin{eqnarray} <var:i> := <nat:4> + <var:i> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:4> \} \\ <var:i> := <nat:2> + <var:i> * <var:T> \\ \{ <var:T> = <var:y> \land <var:i> = <nat:1> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> \} \end{eqnarray} Given the preceding argument , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:T> = <var:y> }} <var:i> := <nat:1> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <var:i> * <var:T> ; <var:i> := <nat:3> + <var:i> * <var:T> ; <var:i> := <nat:4> + <var:i> * <var:T> ; <var:i> := <nat:2> + <var:i> * <var:T> {{ <var:i> = <nat:1> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:i> = <nat:1> * <var:y> ^ <nat:10> + <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 