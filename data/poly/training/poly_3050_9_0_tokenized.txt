\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:v> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:v> ; <var:n2> := <var:n2> * <var:v> ; <var:T> := <var:n2> ; <var:T> := <var:T> + <var:n1> ; <var:T> := <var:T> + <var:n0> \end{verbatim} Allow it to be that $ <var:v> = <var:R> $ ahead of executing this series of instructions it holds that $ <var:T> = <nat:8> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:8> $ when code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:R> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \} \\ <var:n1> := <nat:9> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \} \\ <var:n1> := <var:n1> * <var:v> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \times <var:R> \} \\ <var:n2> := <nat:8> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \times <var:R> \land <var:n2> = <nat:8> \} \\ <var:n2> := <var:n2> * <var:v> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \times <var:R> \land <var:n2> = <nat:8> \times <var:R> \} \\ <var:n2> := <var:n2> * <var:v> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \times <var:R> \land <var:n2> = <nat:8> \times <var:R> ^ <nat:2> \} \\ <var:T> := <var:n2> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:n1> = <nat:9> \times <var:R> \land <var:T> = <nat:8> \times <var:R> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:n1> ; \\ \{ <var:v> = <var:R> \land <var:n0> = <nat:8> \land <var:T> = <nat:8> \times <var:R> ^ <nat:2> + <nat:9> \times <var:R> \} \\ <var:T> := <var:T> + <var:n0> \\ \{ <var:v> = <var:R> \land <var:T> = <nat:8> \times <var:R> ^ <nat:2> + <nat:9> \times <var:R> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:v> = <var:R> }} <var:n0> := <nat:8> ; <var:n1> := <nat:9> ; <var:n1> := <var:n1> * <var:v> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:v> ; <var:n2> := <var:n2> * <var:v> ; <var:T> := <var:n2> ; <var:T> := <var:T> + <var:n1> ; <var:T> := <var:T> + <var:n0> {{ <var:T> = <nat:8> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> * <var:R> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> * <var:R> /\ <var:n2> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> * <var:R> /\ <var:n2> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:9> * <var:R> /\ <var:T> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:n0> = <nat:8> /\ <var:T> = <nat:8> * <var:R> ^ <nat:2> + <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:R> /\ <var:T> = <nat:8> * <var:R> ^ <nat:2> + <nat:9> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 