\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:7> ; <var:A> := <var:s0> \end{verbatim} Assume ( taking natural numbers $ <var:f> $ ) $ <var:p> = <var:f> $ ahead of the execution of our segment of code , it follows that we see $ <var:A> = <nat:7> $ once code has executed . \end{theorem} \begin{proof} The flow of logic for this list of commands is clear with standard Hoare reasoning . Keeping momentum , we have the variable assignmet command \verb | <var:s0> := <nat:7> ; | . This forwards the precondition $ \{ <var:p> = <var:f> \} $ into the condition $ \{ <var:p> = <var:f> \land <var:s0> = <nat:7> \} $ . Moving on , the binding line \verb | <var:A> := <var:s0> | . This line transfers the condition $ \{ <var:p> = <var:f> \land <var:s0> = <nat:7> \} $ to the condition $ \{ <var:p> = <var:f> \land <var:A> = <nat:7> \} $ . This is shown to be logically sound through the assignment inference rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:s0> := <nat:7> ; <var:A> := <var:s0> {{ <var:A> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:A> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 