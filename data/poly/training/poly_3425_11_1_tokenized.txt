\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:V> ; <var:N2> := <var:N1> * <var:V> ; <var:N3> := <var:N2> * <var:V> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:2> ; <var:F> := <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Given that we have $ <var:V> = <var:J> $ prior to evaluating the series of commands , then we see $ <var:F> = <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:7> \times <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:V> = <var:J> \} \\ <var:N1> := <var:V> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <var:J> \} \\ <var:N2> := <var:N1> * <var:V> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:V> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:7> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <nat:7> \cdot <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N2> := <var:N2> * <nat:4> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <nat:7> \cdot <var:J> \land <var:N2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N3> := <var:N3> * <nat:2> ; \\ \{ <var:V> = <var:J> \land <var:N1> = <nat:7> \cdot <var:J> \land <var:N2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:J> ^ <nat:3> \land <var:N0> = <nat:4> \} \end{eqnarray} Furthering running this list of instructions yields : \begin{eqnarray} <var:F> := <var:N3> \\ \{ <var:V> = <var:J> \land <var:N1> = <nat:7> \cdot <var:J> \land <var:N2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:N0> = <nat:4> \land <var:F> = <nat:2> \cdot <var:J> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:N2> \\ \{ <var:V> = <var:J> \land <var:N1> = <nat:7> \cdot <var:J> \land <var:N0> = <nat:4> \land <var:F> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:N1> \\ \{ <var:V> = <var:J> \land <var:N0> = <nat:4> \land <var:F> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> \} \end{eqnarray} Advancing interpreting this set of instructions yields : \begin{eqnarray} <var:F> := <var:F> + <var:N0> \\ \{ <var:V> = <var:J> \land <var:F> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> + <nat:4> \} \end{eqnarray} Hence , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:V> ; <var:N2> := <var:N1> * <var:V> ; <var:N3> := <var:N2> * <var:V> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:2> ; <var:F> := <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:V> = <var:J> }} <def:poly> {{ <var:F> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <nat:7> * <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <nat:7> * <var:J> /\ <var:N2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <nat:7> * <var:J> /\ <var:N2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:J> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <nat:7> * <var:J> /\ <var:N2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:N0> = <nat:4> /\ <var:F> = <nat:2> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N1> = <nat:7> * <var:J> /\ <var:N0> = <nat:4> /\ <var:F> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:N0> = <nat:4> /\ <var:F> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:J> /\ <var:F> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 