\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:5> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:t> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:t> ; <var:h2> := <var:h2> * <var:t> ; <var:I> := <var:h2> ; <var:I> := <var:I> + <var:h1> ; <var:I> := <var:I> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:t> = <var:j> $ before the evaluation of the set of instructions , it follows that we have $ <var:I> = <nat:1> \times <var:j> ^ <nat:2> + <nat:8> \times <var:j> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be demonstrated by usual Hoare techniques . Moving on to the next step , we have the assignment line \verb | <var:h0> := <nat:5> ; | . This moves the condition $ \{ <var:t> = <var:j> \} $ toward $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \} $ . This is given through the assignment law in usual Hoare logic . Now , we have the environment update statement \verb | <var:h1> := <nat:8> ; | . This advances $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \} $ to $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> \} $ . Moving forward to the next step , we have the assignment code \verb | <var:h1> := <var:h1> * <var:t> ; | . This command advances the condition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> \} $ into $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \} $ . Considering the upcoming bit of code contained in the list of commands , we see the variable assignmet command \verb | <var:h2> := <nat:1> ; | . This forwards the precondition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \} $ as the postcondition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> \} $ . This is sound by the assignment law in usual Hoare reasoning . Moving on to the upcoming step in our code segment , we have the variable assignmet command \verb | <var:h2> := <var:h2> * <var:t> ; | . This statement takes $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> \} $ as the condition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> * <var:j> \} $ . This is shown using the assignment scheme found in standard Hoare techniques . Taking a look at the proceeding step contained in the series of instructions , the environment update line binding $ <var:h2> * <var:t> $ to $ <var:h2>$ . This redefines the precondition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> * <var:j> \} $ as $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> * <var:j> ^ <nat:2> \} $ . Taking another step toward the next piece of code seen in the set of instructions , we see the variable binding statement \verb | <var:I> := <var:h2> ; | . This advances the precondition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:h2> = <nat:1> * <var:j> ^ <nat:2> \} $ to the condition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:I> = <nat:1> * <var:j> ^ <nat:2> \} $ . Further , we have the variable assignmet code \verb | <var:I> := <var:I> + <var:h1> ; | . This statement moves $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:h1> = <nat:8> * <var:j> \land <var:I> = <nat:1> * <var:j> ^ <nat:2> \} $ as the condition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ . Considering the upcoming line in our segment of code , we see the variable update statement binding $ <var:I> + <var:h0$ to $ <var:I>$ . This redefines the precondition $ \{ <var:t> = <var:j> \land <var:h0> = <nat:5> \land <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ toward $ \{ <var:t> = <var:j> \land <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:5> \} $ . This is given with the assignment inference rule defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:h1> := <nat:8> ; <var:h1> := <var:h1> * <var:t> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:t> ; <var:h2> := <var:h2> * <var:t> ; <var:I> := <var:h2> ; <var:I> := <var:I> + <var:h1> ; <var:I> := <var:I> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <def:poly> {{ <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> * <var:j> /\ <var:h2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> * <var:j> /\ <var:h2> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> * <var:j> /\ <var:h2> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:h1> = <nat:8> * <var:j> /\ <var:I> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:h0> = <nat:5> /\ <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:I> = <nat:1> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 