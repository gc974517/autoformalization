\begin{document} \begin{theorem} Consider a code segment as \begin{verbatim} <var:C0> := <nat:7> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:V> ; <var:C2> := <nat:5> ; <var:C2> := <var:C2> * <var:V> ; <var:C2> := <var:C2> * <var:V> ; <var:G> := <var:C2> ; <var:G> := <var:G> + <var:C1> ; <var:G> := <var:G> + <var:C0> \end{verbatim} Assume it to hold that $ <var:V> = <var:L> $ --- given every $ <var:L> \in \mathbb{Z}^+ $ --- prior to running the set of instructions it must be that we have $ <var:G> = <nat:5> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:7> $ once segment of code terminates . \end{theorem} \begin{proof} Observe this decorated series of instructions . \begin{eqnarray} \{ <var:V> = <var:L> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \} \\ <var:C1> := <nat:1> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \} \\ <var:C1> := <var:C1> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \times <var:L> \} \\ <var:C2> := <nat:5> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \times <var:L> \land <var:C2> = <nat:5> \} \\ <var:C2> := <var:C2> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \times <var:L> \land <var:C2> = <nat:5> \times <var:L> \} \\ <var:C2> := <var:C2> * <var:V> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \times <var:L> \land <var:C2> = <nat:5> \times <var:L> ^ <nat:2> \} \\ <var:G> := <var:C2> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:C1> = <nat:1> \times <var:L> \land <var:G> = <nat:5> \times <var:L> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:C1> ; \\ \{ <var:V> = <var:L> \land <var:C0> = <nat:7> \land <var:G> = <nat:5> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> \} \\ <var:G> := <var:G> + <var:C0> \\ \{ <var:V> = <var:L> \land <var:G> = <nat:5> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:7> \} \end{eqnarray} Utilizing Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:V> = <var:L> }} <var:C0> := <nat:7> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:V> ; <var:C2> := <nat:5> ; <var:C2> := <var:C2> * <var:V> ; <var:C2> := <var:C2> * <var:V> ; <var:G> := <var:C2> ; <var:G> := <var:G> + <var:C1> ; <var:G> := <var:G> + <var:C0> {{ <var:G> = <nat:5> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> * <var:L> /\ <var:C2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> * <var:L> /\ <var:C2> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> * <var:L> /\ <var:C2> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:1> * <var:L> /\ <var:G> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:C0> = <nat:7> /\ <var:G> = <nat:5> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:L> /\ <var:G> = <nat:5> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 