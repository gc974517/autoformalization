\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:8> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:D> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:D> ; <var:d2> := <var:d2> * <var:D> ; <var:N> := <var:d2> ; <var:N> := <var:N> + <var:d1> ; <var:N> := <var:N> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:D> = <var:Z> $ ahead of the evaluation of our code segment , then we have $ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> + <nat:8> $ when segment of code has finished executing . \end{theorem} \begin{proof} The course of logic for the code is clear through usual Hoare logic . Moving on to the proceeding lines of codein our set of commands , \begin{verbatim} { <var:D> = <var:Z> } <var:d0> := <nat:8> { <var:D> = <var:Z> \land <var:d0> = <nat:8> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> } <var:d1> := <nat:7> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } <var:d1> := <var:d1> * <var:D> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> \times <var:Z> } \end{verbatim} This is sound by the assignment rule given by usual Hoare logic . Immediately following , we have \begin{verbatim} { <var:D> = <var:Z> } <var:d0> := <nat:8> { <var:D> = <var:Z> \land <var:d0> = <nat:8> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> } <var:d1> := <nat:7> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } <var:d1> := <var:d1> * <var:D> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> \times <var:Z> } \end{verbatim} This is rigorously given using the law obtained from Hoare techniques . Jumping to the upcoming pieces of code found in our set of instructions , we have \begin{verbatim} { <var:D> = <var:Z> } <var:d0> := <nat:8> { <var:D> = <var:Z> \land <var:d0> = <nat:8> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> } <var:d1> := <nat:7> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> } <var:d1> := <var:d1> * <var:D> { <var:D> = <var:Z> \land <var:d0> = <nat:8> \land <var:d1> = <nat:7> \times <var:Z> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:D> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:D> ; <var:d2> := <var:d2> * <var:D> ; <var:N> := <var:d2> ; <var:N> := <var:N> + <var:d1> ; <var:N> := <var:N> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:D> = <var:Z> }} <def:poly> {{ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:Z> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:Z> /\ <var:d2> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:Z> /\ <var:d2> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:7> * <var:Z> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:d0> = <nat:8> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Z> /\ <var:N> = <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 