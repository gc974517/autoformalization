\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T1> := <var:j> ; <var:T2> := <var:T1> * <var:j> ; <var:T3> := <var:T2> * <var:j> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:6> ; <var:w> := <var:T3> <var:w> := <var:w> + <var:T2> <var:w> := <var:w> + <var:T1> <var:w> := <var:w> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Given it to be that $ <var:j> = <var:x> $ ahead of the evaluation of our segment of code , it holds that $ <var:w> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for our code segment is demonstrated using standard Hoare techniques . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:j> = <var:x> \} & <var:T1> := <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} & <var:T2> := <var:T1> * <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} \end{tabular} This is shown to be logically sound through the variable binding scheme found in typical Hoare logic . Moving forward to the following lines seen in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:x> \} & <var:T1> := <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} & <var:T2> := <var:T1> * <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} & <var:T3> := <var:T2> * <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \} & <var:T0> := <nat:6> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} & <var:T1> := <var:T1> * <nat:7> & \{ <var:j> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} & <var:T2> := <var:T2> * <nat:8> & \{ <var:j> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:T3> = <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} & <var:T3> := <var:T3> * <nat:6> & \{ <var:j> = <var:x> \land <var:T1> = <nat:7> \cdot <var:x> \land <var:T2> = <nat:8> \cdot <var:x> ^ <nat:2> \land <var:T3> = <nat:6> \cdot <var:x> ^ <nat:3> \land <var:T0> = <nat:6> \} \end{tabular} Going forward , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:x> \} & <var:T1> := <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} \\ \{ <var:j> = <var:x> \land <var:T1> = <var:x> \} & <var:T2> := <var:T1> * <var:j> & \{ <var:j> = <var:x> \land <var:T1> = <var:x> \land <var:T2> = <var:x> ^ <nat:2> \} \end{tabular} This is ensured using the assignment scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:j> ; <var:T2> := <var:T1> * <var:j> ; <var:T3> := <var:T2> * <var:j> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:6> ; <var:w> := <var:T3> <var:w> := <var:w> + <var:T2> <var:w> := <var:w> + <var:T1> <var:w> := <var:w> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:j> = <var:x> }} <def:poly> {{ <var:w> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:T3> = <var:x> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:x> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T2> = <nat:8> * <var:x> ^ <nat:2> /\ <var:T0> = <nat:6> /\ <var:w> = <nat:6> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T1> = <nat:7> * <var:x> /\ <var:T0> = <nat:6> /\ <var:w> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:T0> = <nat:6> /\ <var:w> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:x> /\ <var:w> = <nat:6> * <var:x> ^ <nat:3> + <nat:8> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 