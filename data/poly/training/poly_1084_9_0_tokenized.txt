\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:6> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:t> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:t> ; <var:c2> := <var:c2> * <var:t> ; <var:o> := <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:t> = <var:j> $ prior to the evaluation of our code segment , it follows that $ <var:o> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:6> $ when set of instructions has executed . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:t> = <var:j> \} \\ <var:c0> := <nat:6> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \} \\ <var:c1> := <nat:1> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \} \\ <var:c1> := <var:c1> * <var:t> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \times <var:j> \} \end{eqnarray} Furthering running our set of commands returns : \begin{eqnarray} <var:c2> := <nat:3> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \times <var:j> \land <var:c2> = <nat:3> \} \\ <var:c2> := <var:c2> * <var:t> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \times <var:j> \land <var:c2> = <nat:3> \times <var:j> \} \end{eqnarray} Advancing running our set of instructions yields : \begin{eqnarray} <var:c2> := <var:c2> * <var:t> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \times <var:j> \land <var:c2> = <nat:3> \times <var:j> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of this code segment produces : \begin{eqnarray} <var:o> := <var:c2> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:c1> = <nat:1> \times <var:j> \land <var:o> = <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:c1> ; \\ \{ <var:t> = <var:j> \land <var:c0> = <nat:6> \land <var:o> = <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> \} \\ <var:o> := <var:o> + <var:c0> \\ \{ <var:t> = <var:j> \land <var:o> = <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:6> \} \end{eqnarray} Considering the above , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:6> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:t> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:t> ; <var:c2> := <var:c2> * <var:t> ; <var:o> := <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <def:poly> {{ <var:o> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> * <var:j> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> * <var:j> /\ <var:c2> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> * <var:j> /\ <var:c2> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:c1> = <nat:1> * <var:j> /\ <var:o> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:c0> = <nat:6> /\ <var:o> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:o> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 