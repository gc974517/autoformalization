\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:3> ; <var:p> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allow it to hold that $ <var:h> = <var:r> $ before evaluating the program , it must be that we see $ <var:p> = <nat:3> $ once series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for the program is done using standard Hoare reasoning . Advancing on , the assignment command \verb | <var:W0> := <nat:3> ; | . This forwards the condition $ \{ <var:h> = <var:r> \} $ into $ \{ <var:h> = <var:r> \land <var:W0> = <nat:3> \} $ . After , the binding statement \verb | <var:p> := <var:W0> | . This line redefines the condition $ \{ <var:h> = <var:r> \land <var:W0> = <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:r> \land <var:p> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:3> ; <var:p> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:h> = <var:r> }} <def:poly> {{ <var:p> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:p> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 