\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:v0> := <nat:6> ; <var:W> := <var:v0> \end{verbatim} Given $ <var:e> = <var:c> $ prior to executing the set of instructions , then we have $ <var:W> = <nat:6> $ . \end{theorem} \begin{proof} The argument for our series of commands is done using the below decorated code segment . \begin{eqnarray} \{ <var:e> = <var:c> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:e> = <var:c> \land <var:v0> = <nat:6> \} \\ <var:W> := <var:v0> \\ \{ <var:e> = <var:c> \land <var:W> = <nat:6> \} \end{eqnarray} Applying usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <var:v0> := <nat:6> ; <var:W> := <var:v0> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 