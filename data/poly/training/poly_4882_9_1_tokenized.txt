\begin{document} \begin{theorem} Define a program in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:y> ; <var:v2> := <var:v1> * <var:y> ; <var:v3> := <var:v2> * <var:y> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:1> ; <var:v3> := <var:v3> * <nat:7> ; <var:T> := <var:v3> <var:T> := <var:T> + <var:v1> <var:T> := <var:T> + <var:v0> \end{verbatim} Given $ <var:y> = <var:a> $ prior to the execution of our code , it must be that $ <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:y> = <var:a> \} \\ <var:v1> := <var:y> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <var:a> \} \\ <var:v2> := <var:v1> * <var:y> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:y> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:v1> := <var:v1> * <nat:1> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <nat:1> * <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:v3> := <var:v3> * <nat:7> ; \\ \{ <var:y> = <var:a> \land <var:v1> = <nat:1> * <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <nat:7> * <var:a> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:T> := <var:v3> \\ \{ <var:y> = <var:a> \land <var:v1> = <nat:1> * <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:1> \land <var:T> = <nat:7> * <var:a> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:v1> \\ \{ <var:y> = <var:a> \land <var:v0> = <nat:1> \land <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> \} \\ <var:T> := <var:T> + <var:v0> \\ \{ <var:y> = <var:a> \land <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:1> \} \end{eqnarray} Therefore , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:y> = <var:a> }} <var:v1> := <var:y> ; <var:v2> := <var:v1> * <var:y> ; <var:v3> := <var:v2> * <var:y> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:1> ; <var:v3> := <var:v3> * <nat:7> ; <var:T> := <var:v3> <var:T> := <var:T> + <var:v1> <var:T> := <var:T> + <var:v0> {{ <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <nat:1> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <nat:1> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <nat:7> * <var:a> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v1> = <nat:1> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v0> = <nat:1> /\ <var:T> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:v0> = <nat:1> /\ <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:a> /\ <var:T> = <nat:7> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 