\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:p1> := <var:t> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:6> ; <var:d> := <var:p1> <var:d> := <var:d> + <var:p0> \end{verbatim} Given that we have $ <var:t> = <var:c> $ for some $ <var:c> \in \mathbb{Z}^+ $ ahead of the execution of this series of commands then $ <var:d> = <nat:6> \times <var:c> + <nat:2> $ once set of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:c> \} \\ <var:p1> := <var:t> ; \\ \{ <var:t> = <var:c> \land <var:p1> = <var:c> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:t> = <var:c> \land <var:p1> = <var:c> \land <var:p0> = <nat:2> \} \\ <var:p1> := <var:p1> * <nat:6> ; \\ \{ <var:t> = <var:c> \land <var:p1> = <nat:6> \cdot <var:c> \land <var:p0> = <nat:2> \} \\ <var:d> := <var:p1> \\ \{ <var:t> = <var:c> \land <var:p0> = <nat:2> \land <var:d> = <nat:6> \cdot <var:c> \} \\ <var:d> := <var:d> + <var:p0> \\ \{ <var:t> = <var:c> \land <var:d> = <nat:6> \cdot <var:c> + <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:t> = <var:c> }} <var:p1> := <var:t> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:6> ; <var:d> := <var:p1> <var:d> := <var:d> + <var:p0> {{ <var:d> = <nat:6> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:p1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:p1> = <var:c> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:p1> = <nat:6> * <var:c> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:p0> = <nat:2> /\ <var:d> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:c> /\ <var:d> = <nat:6> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 