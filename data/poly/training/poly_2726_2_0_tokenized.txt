\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:4> ; <var:M> := <var:w0> \end{verbatim} Allow it to be that $ <var:k> = <var:a> $ before evaluating this list of instructions it holds that $ <var:M> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be seen by usual Hoare techniques . Paying attention to the proceeding bit of code in the segment of code , we have \begin{eqnarray} \{ <var:k> = <var:a> \} \, <var:w0> := <nat:4> \, \{ <var:k> = <var:a> \land <var:w0> = <nat:4> \} \end{eqnarray} Moving on to the next step , we have \begin{eqnarray} \{ <var:k> = <var:a> \} \, <var:w0> := <nat:4> \, \{ <var:k> = <var:a> \land <var:w0> = <nat:4> \} \end{eqnarray} This is guaranteed by the environment update scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:k> = <var:a> }} <var:w0> := <nat:4> ; <var:M> := <var:w0> {{ <var:M> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:M> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 