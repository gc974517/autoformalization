\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:q> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:q> ; <var:C2> := <var:C2> * <var:q> ; <var:O> := <var:C2> ; <var:O> := <var:O> + <var:C1> ; <var:O> := <var:O> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow letting $ <var:j> \in \mathbb{N} $ it to hold that $ <var:q> = <var:j> $ ahead of the execution of the program it follows that we have $ <var:O> = <nat:2> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:5> $ once set of instructions is done . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:j> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:3> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> \} \\ <var:C1> := <var:C1> * <var:q> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> * <var:j> \} \\ <var:C2> := <nat:2> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> * <var:j> \land <var:C2> = <nat:2> \} \\ <var:C2> := <var:C2> * <var:q> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> * <var:j> \land <var:C2> = <nat:2> * <var:j> \} \\ <var:C2> := <var:C2> * <var:q> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> * <var:j> \land <var:C2> = <nat:2> * <var:j> ^ <nat:2> \} \\ <var:O> := <var:C2> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:C1> = <nat:3> * <var:j> \land <var:O> = <nat:2> * <var:j> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:C1> ; \\ \{ <var:q> = <var:j> \land <var:C0> = <nat:5> \land <var:O> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> \} \\ <var:O> := <var:O> + <var:C0> \\ \{ <var:q> = <var:j> \land <var:O> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:5> \} \end{eqnarray} Thus , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:q> ; <var:C2> := <nat:2> ; <var:C2> := <var:C2> * <var:q> ; <var:C2> := <var:C2> * <var:q> ; <var:O> := <var:C2> ; <var:O> := <var:O> + <var:C1> ; <var:O> := <var:O> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:q> = <var:j> }} <def:poly> {{ <var:O> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:j> /\ <var:C2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:j> /\ <var:C2> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:j> /\ <var:C2> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:3> * <var:j> /\ <var:O> = <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:C0> = <nat:5> /\ <var:O> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:j> /\ <var:O> = <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 