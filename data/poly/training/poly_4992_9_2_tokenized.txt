\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> ; <var:f> := <nat:2> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> \end{verbatim} Allowing that we have $ <var:K> = <var:F> $ prior to executing this set of commands , it holds that we have $ <var:f> = <nat:2> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:2> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:1> $ when set of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:F> \} \\ <var:f> := <nat:2> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> \} \\ <var:f> := <nat:4> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> + <nat:4> \} \\ <var:f> := <nat:1> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> \} \\ <var:f> := <nat:4> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> \} \\ <var:f> := <nat:1> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> \} \\ <var:f> := <nat:4> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> \} \\ <var:f> := <nat:4> + <var:f> * <var:K> ; \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> \} \\ <var:f> := <nat:1> + <var:f> * <var:K> \\ \{ <var:K> = <var:F> \land <var:f> = <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> \} \end{eqnarray} Using standard Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:K> = <var:F> }} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> ; <var:f> := <nat:2> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:4> + <var:f> * <var:K> ; <var:f> := <nat:1> + <var:f> * <var:K> {{ <var:f> = <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:F> /\ <var:f> = <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 