\begin{document} \begin{theorem} Consider a series of commands : \begin{verbatim} <var:g1> := <var:d> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:7> ; <var:c> := <var:g1> <var:c> := <var:c> + <var:g0> \end{verbatim} Allow that we have $ <var:d> = <var:n> $ before the execution of our list of instructions , it follows that we see $ <var:c> = <nat:7> \cdot <var:n> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is accomplished with standard Hoare reasoning . Observing the subsequent commands in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:n> \} & <var:g1> := <var:d> & \{ <var:d> = <var:n> \land <var:g1> = <var:n> \} \\ \{ <var:d> = <var:n> \land <var:g1> = <var:n> \} & <var:g0> := <nat:9> & \{ <var:d> = <var:n> \land <var:g1> = <var:n> \land <var:g0> = <nat:9> \} \\ \{ <var:d> = <var:n> \land <var:g1> = <var:n> \land <var:g0> = <nat:9> \} & <var:g1> := <var:g1> * <nat:7> & \{ <var:d> = <var:n> \land <var:g1> = <nat:7> \times <var:n> \land <var:g0> = <nat:9> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:n> \} & <var:g1> := <var:d> & \{ <var:d> = <var:n> \land <var:g1> = <var:n> \} \\ \{ <var:d> = <var:n> \land <var:g1> = <var:n> \} & <var:g0> := <nat:9> & \{ <var:d> = <var:n> \land <var:g1> = <var:n> \land <var:g0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:d> = <var:n> }} <var:g1> := <var:d> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:7> ; <var:c> := <var:g1> <var:c> := <var:c> + <var:g0> {{ <var:c> = <nat:7> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <var:n> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g1> = <nat:7> * <var:n> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:g0> = <nat:9> /\ <var:c> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:n> /\ <var:c> = <nat:7> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 