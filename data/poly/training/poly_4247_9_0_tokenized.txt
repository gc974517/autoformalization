\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:b> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:b> ; <var:K2> := <var:K2> * <var:b> ; <var:u> := <var:K2> ; <var:u> := <var:u> + <var:K1> ; <var:u> := <var:u> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:b> = <var:L> $ ahead of executing our segment of code , it must be that we see $ <var:u> = <nat:3> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:1> $ when set of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is accomplished with typical Hoare techniques . Taking another step toward the upcoming steps seen in our series of commands , we have \verb | { <var:b> = <var:L> } <var:K0> := <nat:1> { <var:b> = <var:L> \land <var:K0> = <nat:1> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> } <var:K1> := <nat:6> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> } <var:K1> := <var:K1> * <var:b> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> } <var:K2> := <nat:3> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> } <var:K2> := <var:K2> * <var:b> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> \times <var:L> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> \times <var:L> } <var:K2> := <var:K2> * <var:b> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> \times <var:L> ^ <nat:2> } | , \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:K2> = <nat:3> \times <var:L> ^ <nat:2> } <var:u> := <var:K2> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:u> = <nat:3> \times <var:L> ^ <nat:2> } | and \verb | { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:K1> = <nat:6> \times <var:L> \land <var:u> = <nat:3> \times <var:L> ^ <nat:2> } <var:u> := <var:u> + <var:K1> { <var:b> = <var:L> \land <var:K0> = <nat:1> \land <var:u> = <nat:3> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> } | . This is deduced using the assignment inference rule defined in typical Hoare logic . Honing in on the proceeding piece of code in our series of instructions , we see \verb | { <var:b> = <var:L> } <var:K0> := <nat:1> { <var:b> = <var:L> \land <var:K0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:b> ; <var:K2> := <nat:3> ; <var:K2> := <var:K2> * <var:b> ; <var:K2> := <var:K2> * <var:b> ; <var:u> := <var:K2> ; <var:u> := <var:u> + <var:K1> ; <var:u> := <var:u> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:b> = <var:L> }} <def:poly> {{ <var:u> = <nat:3> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> * <var:L> /\ <var:K2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> * <var:L> /\ <var:K2> = <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> * <var:L> /\ <var:K2> = <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:6> * <var:L> /\ <var:u> = <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:K0> = <nat:1> /\ <var:u> = <nat:3> * <var:L> ^ <nat:2> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:u> = <nat:3> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 