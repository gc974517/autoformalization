\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:D1> := <var:l> ; <var:D2> := <var:D1> * <var:l> ; <var:D3> := <var:D2> * <var:l> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:9> ; <var:D3> := <var:D3> * <nat:5> ; <var:T> := <var:D3> <var:T> := <var:T> + <var:D1> <var:T> := <var:T> + <var:D0> \end{verbatim} Allowing ( given all $ <var:S> \in \mathbb{N} $ ) that $ <var:l> = <var:S> $ ahead of the evaluation of the segment of code it follows that we have $ <var:T> = <nat:5> * <var:S> ^ <nat:3> + <nat:9> * <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the series of instructions is demonstrated using Hoare techniques . Considering the proceeding pieces of code contained in our list of commands , \begin{eqnarray} \{ <var:l> = <var:S> \} \, <var:D1> := <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \\ \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \, <var:D2> := <var:D1> * <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \} \end{eqnarray} This is guaranteed through the variable assignmet scheme in typical Hoare techniques . Moving forward to the upcoming pieces of code seen in the program , \begin{eqnarray} \{ <var:l> = <var:S> \} \, <var:D1> := <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \\ \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \, <var:D2> := <var:D1> * <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \} \\ \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \} \, <var:D3> := <var:D2> * <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \land <var:D3> = <var:S> ^ <nat:3> \} \\ \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \land <var:D3> = <var:S> ^ <nat:3> \} \, <var:D0> := <nat:3> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \land <var:D3> = <var:S> ^ <nat:3> \land <var:D0> = <nat:3> \} \end{eqnarray} Keeping momentum , \begin{eqnarray} \{ <var:l> = <var:S> \} \, <var:D1> := <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \\ \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \, <var:D2> := <var:D1> * <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \land <var:D2> = <var:S> ^ <nat:2> \} \end{eqnarray} Moving forward to the upcoming step seen in the series of instructions , we have \begin{eqnarray} \{ <var:l> = <var:S> \} \, <var:D1> := <var:l> \, \{ <var:l> = <var:S> \land <var:D1> = <var:S> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:l> = <var:S> }} <var:D1> := <var:l> ; <var:D2> := <var:D1> * <var:l> ; <var:D3> := <var:D2> * <var:l> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:9> ; <var:D3> := <var:D3> * <nat:5> ; <var:T> := <var:D3> <var:T> := <var:T> + <var:D1> <var:T> := <var:T> + <var:D0> {{ <var:T> = <nat:5> * <var:S> ^ <nat:3> + <nat:9> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <var:S> /\ <var:D2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <var:S> /\ <var:D2> = <var:S> ^ <nat:2> /\ <var:D3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <var:S> /\ <var:D2> = <var:S> ^ <nat:2> /\ <var:D3> = <var:S> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <nat:9> * <var:S> /\ <var:D2> = <var:S> ^ <nat:2> /\ <var:D3> = <var:S> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <nat:9> * <var:S> /\ <var:D2> = <var:S> ^ <nat:2> /\ <var:D3> = <nat:5> * <var:S> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D1> = <nat:9> * <var:S> /\ <var:D2> = <var:S> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:T> = <nat:5> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:D0> = <nat:3> /\ <var:T> = <nat:5> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:T> = <nat:5> * <var:S> ^ <nat:3> + <nat:9> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 