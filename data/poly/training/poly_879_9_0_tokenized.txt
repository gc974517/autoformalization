\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:7> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:S> ; <var:J2> := <nat:3> ; <var:J2> := <var:J2> * <var:S> ; <var:J2> := <var:J2> * <var:S> ; <var:U> := <var:J2> ; <var:U> := <var:U> + <var:J1> ; <var:U> := <var:U> + <var:J0> \end{verbatim} Allowing it to hold that $ <var:S> = <var:C> $ prior to evaluating the program then we see $ <var:U> = <nat:3> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:C> \} \\ <var:J0> := <nat:7> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \} \\ <var:J1> := <nat:2> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> \} \\ <var:J1> := <var:J1> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> * <var:C> \} \\ <var:J2> := <nat:3> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> * <var:C> \land <var:J2> = <nat:3> \} \\ <var:J2> := <var:J2> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> * <var:C> \land <var:J2> = <nat:3> * <var:C> \} \\ <var:J2> := <var:J2> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> * <var:C> \land <var:J2> = <nat:3> * <var:C> ^ <nat:2> \} \\ <var:U> := <var:J2> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:J1> = <nat:2> * <var:C> \land <var:U> = <nat:3> * <var:C> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:J1> ; \\ \{ <var:S> = <var:C> \land <var:J0> = <nat:7> \land <var:U> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} \\ <var:U> := <var:U> + <var:J0> \\ \{ <var:S> = <var:C> \land <var:U> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <var:J0> := <nat:7> ; <var:J1> := <nat:2> ; <var:J1> := <var:J1> * <var:S> ; <var:J2> := <nat:3> ; <var:J2> := <var:J2> * <var:S> ; <var:J2> := <var:J2> * <var:S> ; <var:U> := <var:J2> ; <var:U> := <var:U> + <var:J1> ; <var:U> := <var:U> + <var:J0> {{ <var:U> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J2> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:2> * <var:C> /\ <var:U> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:J0> = <nat:7> /\ <var:U> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:U> = <nat:3> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 