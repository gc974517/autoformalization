\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:4> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:B> ; <var:V> := <var:x1> ; <var:V> := <var:V> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:B> = <var:W> $ ahead of evaluating the code segment , it follows that we see $ <var:V> = <nat:1> * <var:W> + <nat:4> $ . \end{theorem} \begin{proof} Note that the following decorated program . \begin{eqnarray} \{ <var:B> = <var:W> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:B> = <var:W> \land <var:x0> = <nat:4> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:B> = <var:W> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:B> ; \\ \{ <var:B> = <var:W> \land <var:x0> = <nat:4> \land <var:x1> = <nat:1> \times <var:W> \} \\ <var:V> := <var:x1> ; \\ \{ <var:B> = <var:W> \land <var:x0> = <nat:4> \land <var:V> = <nat:1> \times <var:W> \} \\ <var:V> := <var:V> + <var:x0> \\ \{ <var:B> = <var:W> \land <var:V> = <nat:1> \times <var:W> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:B> ; <var:V> := <var:x1> ; <var:V> := <var:V> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:B> = <var:W> }} <def:poly> {{ <var:V> = <nat:1> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:x0> = <nat:4> /\ <var:V> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:W> /\ <var:V> = <nat:1> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 