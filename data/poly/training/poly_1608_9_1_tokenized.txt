\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l0> := <nat:3> ; <var:l2> := <var:l2> * <nat:2> ; <var:l3> := <var:l3> * <nat:9> ; <var:z> := <var:l3> <var:z> := <var:z> + <var:l2> <var:z> := <var:z> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Assuming --- with some positive integer coefficients $ <var:X> $ --- it to hold that $ <var:c> = <var:X> $ ahead of executing this series of commands , it follows that $ <var:z> = <nat:9> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:3> $ when list of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands can be seen with Hoare logic . Honing in on the following pieces of code found in our list of commands , \[ \begin{tabular} {rcl} \{ <var:c> = <var:X> \} & <var:l1> := <var:c> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \} & <var:l2> := <var:l1> * <var:c> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \} & <var:l3> := <var:l2> * <var:c> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \} & <var:l0> := <nat:3> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} & <var:l2> := <var:l2> * <nat:2> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:l3> = <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} & <var:l3> := <var:l3> * <nat:9> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:l3> = <nat:9> \times <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:l3> = <nat:9> \times <var:X> ^ <nat:3> \land <var:l0> = <nat:3> \} & <var:z> := <var:l3& \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <nat:2> \times <var:X> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:z> = <nat:9> \times <var:X> ^ <nat:3> \} \end{tabular} This is given by the assignment law given by typical Hoare logic . Moving on to the next commands found in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:c> = <var:X> \} & <var:l1> := <var:c> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \} \\ \{ <var:c> = <var:X> \land <var:l1> = <var:X> \} & <var:l2> := <var:l1> * <var:c> & \{ <var:c> = <var:X> \land <var:l1> = <var:X> \land <var:l2> = <var:X> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l0> := <nat:3> ; <var:l2> := <var:l2> * <nat:2> ; <var:l3> := <var:l3> * <nat:9> ; <var:z> := <var:l3> <var:z> := <var:z> + <var:l2> <var:z> := <var:z> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:c> = <var:X> }} <def:poly> {{ <var:z> = <nat:9> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:l3> = <var:X> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:l3> = <nat:9> * <var:X> ^ <nat:3> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:z> = <nat:9> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:l1> = <var:X> /\ <var:l0> = <nat:3> /\ <var:z> = <nat:9> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:z> = <nat:9> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 