\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:h> ; <var:e2> := <var:e2> * <var:h> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:h> ; <var:e3> := <var:e3> * <var:h> ; <var:e3> := <var:e3> * <var:h> ; <var:A> := <var:e3> ; <var:A> := <var:A> + <var:e2> ; <var:A> := <var:A> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allowing for all positive coefficients $ <var:O> $ it to hold that $ <var:h> = <var:O> $ ahead of executing the set of commands it must be that we have $ <var:A> = <nat:2> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:O> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \} \\ <var:e2> := <nat:1> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \} \\ <var:e2> := <var:e2> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> \} \\ <var:e2> := <var:e2> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \} \\ <var:e3> := <nat:2> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \land <var:e3> = <nat:2> \} \\ <var:e3> := <var:e3> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \land <var:e3> = <nat:2> \times <var:O> \} \\ <var:e3> := <var:e3> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \land <var:e3> = <nat:2> \times <var:O> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:h> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \land <var:e3> = <nat:2> \times <var:O> ^ <nat:3> \} \\ <var:A> := <var:e3> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:e2> = <nat:1> \times <var:O> ^ <nat:2> \land <var:A> = <nat:2> \times <var:O> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:e2> ; \\ \{ <var:h> = <var:O> \land <var:e0> = <nat:2> \land <var:A> = <nat:2> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:e0> \\ \{ <var:h> = <var:O> \land <var:A> = <nat:2> \times <var:O> ^ <nat:3> + <nat:1> \times <var:O> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:h> ; <var:e2> := <var:e2> * <var:h> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:h> ; <var:e3> := <var:e3> * <var:h> ; <var:e3> := <var:e3> * <var:h> ; <var:A> := <var:e3> ; <var:A> := <var:A> + <var:e2> ; <var:A> := <var:A> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:h> = <var:O> }} <def:poly> {{ <var:A> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:e3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:e2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:A> = <nat:2> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e0> = <nat:2> /\ <var:A> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:A> = <nat:2> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 