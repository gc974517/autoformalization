\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:6> ; <var:Z> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assume it to hold that $ <var:h> = <var:d> $ before interpreting our code segment , then we see $ <var:Z> = <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the code is accomplished using usual Hoare reasoning . Honing in on the proceeding line of code seen in our code , we see \begin{eqnarray} \{ <var:h> = <var:d> \} \, <var:u0> := <nat:6> \, \{ <var:h> = <var:d> \land <var:u0> = <nat:6> \} \end{eqnarray} Paying attention to the upcoming bit of code contained in our list of instructions , \begin{eqnarray} \{ <var:h> = <var:d> \} \, <var:u0> := <nat:6> \, \{ <var:h> = <var:d> \land <var:u0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:Z> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:h> = <var:d> }} <def:poly> {{ <var:Z> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:d> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:d> /\ <var:Z> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 