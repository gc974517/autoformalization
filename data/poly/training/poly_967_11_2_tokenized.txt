\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I> := <nat:1> ; <var:I> := <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> ; <var:I> := <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> ; <var:I> := <nat:2> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Assume it to be that $ <var:j> = <var:L> $ ahead of the evaluation of this list of commands it follows that we see $ <var:I> = <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> $ after list of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this segment of code is given by standard Hoare reasoning . Shifting focus toward the proceeding bit of code in our list of commands , we have the variable update code letting $ <nat:1> $ to $ <var:I>$ . This forwards the condition $ \{ <var:j> = <var:L> \} $ as the postcondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> \} $ . This is given using the assignment inference rule defined by standard Hoare logic . Moving forward , we have the assignment statement \verb | <var:I> := <var:I> * <var:j> ; | . This code moves $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> \} $ as the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> + \} $ . Moving forward , we see the command defining $ <nat:1> + <var:I> * <var:j> $ to $ <var:I>$ . This command moves the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> + \} $ to the postcondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> \} $ . This is shown to be logically sound with the assignment inference rule from standard Hoare reasoning . Looking at the subsequent command seen in our series of instructions , the variable assignmet code \verb | <var:I> := <var:I> * <var:j> ; | . This moves the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + \} $ . Paying attention to the upcoming line of code seen in the program , we see the variable update line assigning $ <nat:3> + <var:I> * <var:j> $ as $ <var:I>$ . This command forwards $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + \} $ toward the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> \} $ . Moving on , the assignment line yielding $ <nat:3> + <var:I> * <var:j> $ into $ <var:I>$ . This advances the precondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> \} $ . This is given with the assignment law found in typical Hoare logic . Observing the following command found in the series of instructions , we see the variable update command giving $ <nat:3> + <var:I> * <var:j> $ as $ <var:I>$ . This advances $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> \} $ as the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> \} $ . Immediately after , we have the command \verb | <var:I> := <nat:1> + <var:I> * <var:j> ; | . This forwards $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> \} $ into the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> \} $ . Going forward , we have the assignment code \verb | <var:I> := <nat:2> + <var:I> * <var:j> ; | . This code takes the precondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> \} $ toward $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> \} $ . Stepping through , we see the binding statement \verb | <var:I> := <nat:3> + <var:I> * <var:j> ; | . This transfers the precondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> \} $ . This is shown by the assignment law obtained from standard Hoare logic . Advancing to the next step , we see the line yielding $ <nat:1> + <var:I> * <var:j$ as $ <var:I>$ . This transfers the precondition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> \} $ toward the condition $ \{ <var:j> = <var:L> \land <var:I> = <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:1> ; <var:I> := <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> ; <var:I> := <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> ; <var:I> := <nat:2> + <var:I> * <var:j> ; <var:I> := <nat:3> + <var:I> * <var:j> ; <var:I> := <nat:1> + <var:I> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:j> = <var:L> }} <def:poly> {{ <var:I> = <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:3> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:L> /\ <var:I> = <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 