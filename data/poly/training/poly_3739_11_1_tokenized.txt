\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:m> ; <var:n2> := <var:n1> * <var:m> ; <var:n3> := <var:n2> * <var:m> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:2> ; <var:b> := <var:n3> <var:b> := <var:b> + <var:n2> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assuming given any natural coefficients $ <var:i> $ it to be that $ <var:m> = <var:i> $ ahead of interpreting our code segment , it follows that we see $ <var:b> = <nat:2> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:9> $ once set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:i> \} \\ <var:n1> := <var:m> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <var:i> \} \\ <var:n2> := <var:n1> * <var:m> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <var:i> \land <var:n2> = <var:i> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:m> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <var:i> \land <var:n2> = <var:i> ^ <nat:2> \land <var:n3> = <var:i> ^ <nat:3> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <var:i> \land <var:n2> = <var:i> ^ <nat:2> \land <var:n3> = <var:i> ^ <nat:3> \land <var:n0> = <nat:9> \} \\ <var:n1> := <var:n1> * <nat:2> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <nat:2> \times <var:i> \land <var:n2> = <var:i> ^ <nat:2> \land <var:n3> = <var:i> ^ <nat:3> \land <var:n0> = <nat:9> \} \\ <var:n2> := <var:n2> * <nat:8> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <nat:2> \times <var:i> \land <var:n2> = <nat:8> \times <var:i> ^ <nat:2> \land <var:n3> = <var:i> ^ <nat:3> \land <var:n0> = <nat:9> \} \\ <var:n3> := <var:n3> * <nat:2> ; \\ \{ <var:m> = <var:i> \land <var:n1> = <nat:2> \times <var:i> \land <var:n2> = <nat:8> \times <var:i> ^ <nat:2> \land <var:n3> = <nat:2> \times <var:i> ^ <nat:3> \land <var:n0> = <nat:9> \} \\ <var:b> := <var:n3> \\ \{ <var:m> = <var:i> \land <var:n1> = <nat:2> \times <var:i> \land <var:n2> = <nat:8> \times <var:i> ^ <nat:2> \land <var:n0> = <nat:9> \land <var:b> = <nat:2> \times <var:i> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:n2> \\ \{ <var:m> = <var:i> \land <var:n1> = <nat:2> \times <var:i> \land <var:n0> = <nat:9> \land <var:b> = <nat:2> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:n1> \\ \{ <var:m> = <var:i> \land <var:n0> = <nat:9> \land <var:b> = <nat:2> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> \} \\ <var:b> := <var:b> + <var:n0> \\ \{ <var:m> = <var:i> \land <var:b> = <nat:2> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:9> \} \end{eqnarray} Using usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <def:poly> := <var:n1> := <var:m> ; <var:n2> := <var:n1> * <var:m> ; <var:n3> := <var:n2> * <var:m> ; <var:n0> := <nat:9> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:8> ; <var:n3> := <var:n3> * <nat:2> ; <var:b> := <var:n3> <var:b> := <var:b> + <var:n2> <var:b> := <var:b> + <var:n1> <var:b> := <var:b> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:m> = <var:i> }} <def:poly> {{ <var:b> = <nat:2> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <var:i> /\ <var:n2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <var:i> /\ <var:n2> = <var:i> ^ <nat:2> /\ <var:n3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <var:i> /\ <var:n2> = <var:i> ^ <nat:2> /\ <var:n3> = <var:i> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <nat:2> * <var:i> /\ <var:n2> = <var:i> ^ <nat:2> /\ <var:n3> = <var:i> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <nat:2> * <var:i> /\ <var:n2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:n3> = <var:i> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <nat:2> * <var:i> /\ <var:n2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:i> ^ <nat:3> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <nat:2> * <var:i> /\ <var:n2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:n0> = <nat:9> /\ <var:b> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n1> = <nat:2> * <var:i> /\ <var:n0> = <nat:9> /\ <var:b> = <nat:2> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:n0> = <nat:9> /\ <var:b> = <nat:2> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:b> = <nat:2> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 