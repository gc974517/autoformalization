\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:9> ; <var:r> := <var:s0> \end{verbatim} Assuming letting positive integer coefficients $ <var:d> $ that we have $ <var:n> = <var:d> $ prior to interpreting our list of instructions it follows that we see $ <var:r> = <nat:9> $ after set of instructions terminates . \end{theorem} \begin{proof} The course of logic for this list of instructions is given using standard Hoare logic . After , we see the variable update code defining $ <nat:9> $ toward $ <var:s0>$ . This statement forwards the precondition $ \{ <var:n> = <var:d> \} $ to the condition $ \{ <var:n> = <var:d> \land <var:s0> = <nat:9> \} $ . Next , the variable assignmet command \verb | <var:r> := <var:s0> | . This code transfers the condition $ \{ <var:n> = <var:d> \land <var:s0> = <nat:9> \} $ into $ \{ <var:n> = <var:d> \land <var:r> = <nat:9> \} $ . This is deduced with the assignment law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:n> = <var:d> }} <var:s0> := <nat:9> ; <var:r> := <var:s0> {{ <var:r> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:d> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:d> /\ <var:r> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 