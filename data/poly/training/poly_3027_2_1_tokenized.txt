\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:8> ; <var:e> := <var:R0> \end{verbatim} Allowing ( for every integers $ <var:E> $ ) that we have $ <var:v> = <var:E> $ before running our code it holds that we see $ <var:e> = <nat:8> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is clear using typical Hoare logic . Going forward , we see the variable binding statement binding $ <nat:8> $ into $ <var:R0>$ . This command moves the precondition $ \{ <var:v> = <var:E> \} $ into the postcondition $ \{ <var:v> = <var:E> \land <var:R0> = <nat:8> \} $ . Moving on , the environment update command yielding $ <var:R0$ as $ <var:e>$ . This advances the precondition $ \{ <var:v> = <var:E> \land <var:R0> = <nat:8> \} $ as the condition $ \{ <var:v> = <var:E> \land <var:e> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:v> = <var:E> }} <var:R0> := <nat:8> ; <var:e> := <var:R0> {{ <var:e> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:E> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:E> /\ <var:e> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 