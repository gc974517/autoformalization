\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:4> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:h> ; <var:n2> := <nat:7> ; <var:n2> := <var:n2> * <var:h> ; <var:n2> := <var:n2> * <var:h> ; <var:v> := <var:n2> ; <var:v> := <var:v> + <var:n1> ; <var:v> := <var:v> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Allow that $ <var:h> = <var:V> $ before evaluating our set of instructions , it follows that $ <var:v> = <nat:7> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:4> $ after series of commands has finished . \end{theorem} \begin{proof} The proof of this list of commands can be given with usual Hoare techniques . Focusing on the proceeding step in the program , we have the environment update line defining $ <nat:4> $ as $ <var:n0>$ . This line takes the precondition $ \{ <var:h> = <var:V> \} $ into the condition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \} $ . This is guaranteed through the assignment law given in standard Hoare reasoning . Moving on to the subsequent line contained in our series of commands , the variable assignmet line \verb | <var:n1> := <nat:1> ; | . This moves the condition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \} $ toward the postcondition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> \} $ . This is known to be sound using the assignment inference rule from typical Hoare logic . Immediately following , we have the assignment line assigning $ <var:n1> * <var:h> $ to $ <var:n1>$ . This redefines the precondition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> \} $ to the condition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \} $ . Further , we see the assignment line \verb | <var:n2> := <nat:7> ; | . This advances $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \} $ as the condition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> \} $ . This is ensured by the assignment inference rule given by Hoare reasoning . Moving forward , we see the binding code assigning $ <var:n2> * <var:h> $ as $ <var:n2>$ . This redefines the precondition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> \} $ into $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> * <var:V> \} $ . Immediately after , we have the variable assignmet command \verb | <var:n2> := <var:n2> * <var:h> ; | . This line moves $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> * <var:V> \} $ as $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> * <var:V> ^ <nat:2> \} $ . After , we have the statement \verb | <var:v> := <var:n2> ; | . This statement redefines the precondition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:n2> = <nat:7> * <var:V> ^ <nat:2> \} $ into $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:v> = <nat:7> * <var:V> ^ <nat:2> \} $ . Going to the next step , we see the environment update command \verb | <var:v> := <var:v> + <var:n1> ; | . This command transfers the condition $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:n1> = <nat:1> * <var:V> \land <var:v> = <nat:7> * <var:V> ^ <nat:2> \} $ toward $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> \} $ . Going to the next step , the statement \verb | <var:v> := <var:v> + <var:n0> | . This redefines $ \{ <var:h> = <var:V> \land <var:n0> = <nat:4> \land <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> \} $ to $ \{ <var:h> = <var:V> \land <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:4> ; <var:n1> := <nat:1> ; <var:n1> := <var:n1> * <var:h> ; <var:n2> := <nat:7> ; <var:n2> := <var:n2> * <var:h> ; <var:n2> := <var:n2> * <var:h> ; <var:v> := <var:n2> ; <var:v> := <var:v> + <var:n1> ; <var:v> := <var:v> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <def:poly> {{ <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> * <var:V> /\ <var:n2> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:n1> = <nat:1> * <var:V> /\ <var:v> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:n0> = <nat:4> /\ <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:v> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 