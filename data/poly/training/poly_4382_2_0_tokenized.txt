\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:9> ; <var:x> := <var:K0> \end{verbatim} Allow that we have $ <var:D> = <var:b> $ ahead of the evaluation of this series of instructions , it must be that we see $ <var:x> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be done using standard Hoare logic . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:b> \} & <var:K0> := <nat:9> & \{ <var:D> = <var:b> \land <var:K0> = <nat:9> \} \\ \{ <var:D> = <var:b> \land <var:K0> = <nat:9> \} & <var:x> := <var:K0& \{ <var:D> = <var:b> \land <var:x> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <var:K0> := <nat:9> ; <var:x> := <var:K0> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 