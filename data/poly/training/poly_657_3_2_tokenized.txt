\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:3> + <var:U> * <var:e> ; <var:U> := <nat:4> + <var:U> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Allow that we have $ <var:e> = <var:Q> $ before the execution of our program , it follows that we see $ <var:U> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the program is evident by standard Hoare techniques . Focusing on the next step in the list of instructions , we have the environment update statement giving $ <nat:2> $ as $ <var:U>$ . This moves the precondition $ \{ <var:e> = <var:Q> \} $ toward $ \{ <var:e> = <var:Q> \land <var:U> = <nat:2> \} $ . This is sound by the assignment inference rule in Hoare reasoning . Honing in on the upcoming line found in the set of instructions , we have the environment update line giving $ <nat:3> + <var:U> * <var:e> $ to $ <var:U>$ . This advances $ \{ <var:e> = <var:Q> \land <var:U> = <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:Q> \land <var:U> = <nat:2> * <var:Q> + <nat:3> \} $ . Stepping forward , the binding statement \verb | <var:U> := <nat:4> + <var:U> * <var:e> | . This redefines the precondition $ \{ <var:e> = <var:Q> \land <var:U> = <nat:2> * <var:Q> + <nat:3> \} $ toward $ \{ <var:e> = <var:Q> \land <var:U> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> \} $ . This is known to be sound through the assignment rule defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <nat:3> + <var:U> * <var:e> ; <var:U> := <nat:4> + <var:U> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:e> = <var:Q> }} <def:poly> {{ <var:U> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:U> = <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Q> /\ <var:U> = <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 