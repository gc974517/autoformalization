\begin{document} \begin{theorem} Define the following code segment as \begin{verbatim} <var:p0> := <nat:4> ; <var:Y> := <var:p0> \end{verbatim} Allowing it to be that $ <var:M> = <var:q> $ ahead of running this list of instructions , it follows that we have $ <var:Y> = <nat:4> $ after code exits . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be shown using the following decorated set of commands . \begin{eqnarray} \{ <var:M> = <var:q> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:M> = <var:q> \land <var:p0> = <nat:4> \} \\ <var:Y> := <var:p0> \\ \{ <var:M> = <var:q> \land <var:Y> = <nat:4> \} \end{eqnarray} Using usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:M> = <var:q> }} <var:p0> := <nat:4> ; <var:Y> := <var:p0> {{ <var:Y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:q> /\ <var:Y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 