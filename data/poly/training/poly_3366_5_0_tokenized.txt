\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:f> ; <var:q> := <var:i1> ; <var:q> := <var:q> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:f> = <var:H> $ ahead of executing this series of instructions , then $ <var:q> = <nat:1> \cdot <var:H> + <nat:2> $ when segment of code terminates . \end{theorem} \begin{proof} The argument for the series of instructions can be accomplished by this decorated list of commands . \begin{eqnarray} \{ <var:f> = <var:H> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:f> = <var:H> \land <var:i0> = <nat:2> \} \\ <var:i1> := <nat:1> ; \\ \{ <var:f> = <var:H> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \} \\ <var:i1> := <var:i1> * <var:f> ; \\ \{ <var:f> = <var:H> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \cdot <var:H> \} \\ <var:q> := <var:i1> ; \\ \{ <var:f> = <var:H> \land <var:i0> = <nat:2> \land <var:q> = <nat:1> \cdot <var:H> \} \\ <var:q> := <var:q> + <var:i0> \\ \{ <var:f> = <var:H> \land <var:q> = <nat:1> \cdot <var:H> + <nat:2> \} \end{eqnarray} Using Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:f> ; <var:q> := <var:i1> ; <var:q> := <var:q> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:f> = <var:H> }} <def:poly> {{ <var:q> = <nat:1> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:i0> = <nat:2> /\ <var:q> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:H> /\ <var:q> = <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 