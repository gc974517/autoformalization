\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:4> ; <var:V> := <var:X0> \end{verbatim} Allowing it to hold that $ <var:Y> = <var:G> $ --- for all positive numbers $ <var:G> $ --- before interpreting our set of commands , it must be that we have $ <var:V> = <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:Y> = <var:G> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:Y> = <var:G> \land <var:X0> = <nat:4> \} \\ <var:V> := <var:X0> \\ \{ <var:Y> = <var:G> \land <var:V> = <nat:4> \} \end{eqnarray} Considering the preceding argument , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <var:X0> := <nat:4> ; <var:V> := <var:X0> {{ <var:V> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:V> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 