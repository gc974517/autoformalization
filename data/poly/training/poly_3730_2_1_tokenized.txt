\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:3> ; <var:K> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Assume it to hold that $ <var:H> = <var:b> $ before interpreting our code , it follows that $ <var:K> = <nat:3> $ . \end{theorem} \begin{proof} The argument for our set of commands can be given by typical Hoare logic . Shifting focus toward the subsequent piece of code in our series of commands , we have the line \verb | <var:V0> := <nat:3> ; | . This command transfers $ \{ <var:H> = <var:b> \} $ as $ \{ <var:H> = <var:b> \land <var:V0> = <nat:3> \} $ . Considering the subsequent command contained in the set of commands , we see the binding line binding $ <var:V0$ into $ <var:K>$ . This forwards $ \{ <var:H> = <var:b> \land <var:V0> = <nat:3> \} $ as the condition $ \{ <var:H> = <var:b> \land <var:K> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:K> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:H> = <var:b> }} <def:poly> {{ <var:K> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:b> /\ <var:K> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 