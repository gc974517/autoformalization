\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:A> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:A> = <var:i> $ before the execution of our code it holds that we have $ <var:k> = <nat:3> \times <var:i> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be given through typical Hoare reasoning . Taking a look at the upcoming step contained in our list of commands , we see the assignment code giving $ <nat:5> $ into $ <var:R0>$ . This redefines $ \{ <var:A> = <var:i> \} $ toward the postcondition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \} $ . This is sound by the assignment law given by typical Hoare reasoning . Moving forward , the binding statement defining $ <nat:3> $ to $ <var:R1>$ . This line redefines the precondition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \} $ into $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \} $ . Focusing on the upcoming command found in our segment of code , we see the variable update command giving $ <var:R1> * <var:A> $ toward $ <var:R1>$ . This advances the precondition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> * <var:i> \} $ . This is shown to be logically sound with the assignment law defined by typical Hoare techniques . Keeping momentum , we see the code \verb | <var:k> := <var:R1> ; | . This command advances the precondition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:R1> = <nat:3> * <var:i> \} $ to the condition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:k> = <nat:3> * <var:i> \} $ . This is sound with the assignment law of usual Hoare logic . Jumping to the upcoming statement seen in the set of commands , we see the environment update statement binding $ <var:k> + <var:R0$ as $ <var:k>$ . This advances the condition $ \{ <var:A> = <var:i> \land <var:R0> = <nat:5> \land <var:k> = <nat:3> * <var:i> \} $ to the condition $ \{ <var:A> = <var:i> \land <var:k> = <nat:3> * <var:i> + <nat:5> \} $ . This is guaranteed using the assignment rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:5> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:A> ; <var:k> := <var:R1> ; <var:k> := <var:k> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:A> = <var:i> }} <def:poly> {{ <var:k> = <nat:3> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:R0> = <nat:5> /\ <var:k> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:k> = <nat:3> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 