\begin{document} \begin{theorem} Take a set of instructions as follows \begin{verbatim} <var:f1> := <var:L> ; <var:f2> := <var:f1> * <var:L> ; <var:f3> := <var:f2> * <var:L> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:7> ; <var:f2> := <var:f2> * <nat:7> ; <var:f3> := <var:f3> * <nat:4> ; <var:p> := <var:f3> <var:p> := <var:p> + <var:f2> <var:p> := <var:p> + <var:f1> <var:p> := <var:p> + <var:f0> \end{verbatim} Allow that we have $ <var:L> = <var:N> $ ahead of evaluating our segment of code , then we have $ <var:p> = <nat:4> \times <var:N> ^ <nat:3> + <nat:7> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:N> \} \\ <var:f1> := <var:L> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <var:N> \} \\ <var:f2> := <var:f1> * <var:L> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:L> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \} \end{eqnarray} Continuing the execution of this segment of code produces : \begin{eqnarray} <var:f0> := <nat:9> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f1> := <var:f1> * <nat:7> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <nat:7> \cdot <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f2> := <var:f2> * <nat:7> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <nat:7> \cdot <var:N> \land <var:f2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:f3> := <var:f3> * <nat:4> ; \\ \{ <var:L> = <var:N> \land <var:f1> = <nat:7> \cdot <var:N> \land <var:f2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:N> ^ <nat:3> \land <var:f0> = <nat:9> \} \\ <var:p> := <var:f3> \\ \{ <var:L> = <var:N> \land <var:f1> = <nat:7> \cdot <var:N> \land <var:f2> = <nat:7> \cdot <var:N> ^ <nat:2> \land <var:f0> = <nat:9> \land <var:p> = <nat:4> \cdot <var:N> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:f2> \\ \{ <var:L> = <var:N> \land <var:f1> = <nat:7> \cdot <var:N> \land <var:f0> = <nat:9> \land <var:p> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:f1> \\ \{ <var:L> = <var:N> \land <var:f0> = <nat:9> \land <var:p> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> \} \\ <var:p> := <var:p> + <var:f0> \\ \{ <var:L> = <var:N> \land <var:p> = <nat:4> \cdot <var:N> ^ <nat:3> + <nat:7> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> + <nat:9> \} \end{eqnarray} Applying standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:L> = <var:N> }} <var:f1> := <var:L> ; <var:f2> := <var:f1> * <var:L> ; <var:f3> := <var:f2> * <var:L> ; <var:f0> := <nat:9> ; <var:f1> := <var:f1> * <nat:7> ; <var:f2> := <var:f2> * <nat:7> ; <var:f3> := <var:f3> * <nat:4> ; <var:p> := <var:f3> <var:p> := <var:p> + <var:f2> <var:p> := <var:p> + <var:f1> <var:p> := <var:p> + <var:f0> {{ <var:p> = <nat:4> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <nat:7> * <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <nat:7> * <var:N> /\ <var:f2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <nat:7> * <var:N> /\ <var:f2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:N> ^ <nat:3> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <nat:7> * <var:N> /\ <var:f2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:f0> = <nat:9> /\ <var:p> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f1> = <nat:7> * <var:N> /\ <var:f0> = <nat:9> /\ <var:p> = <nat:4> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:f0> = <nat:9> /\ <var:p> = <nat:4> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:N> /\ <var:p> = <nat:4> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 