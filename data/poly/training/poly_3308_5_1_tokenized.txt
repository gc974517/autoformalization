\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:n> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:1> ; <var:u> := <var:X1> <var:u> := <var:u> + <var:X0> \end{verbatim} Assume it to be that $ <var:n> = <var:B> $ --- with some natural coefficients $ <var:B> $ --- ahead of evaluating our series of instructions then we see $ <var:u> = <nat:1> \cdot <var:B> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:n> = <var:B> \} \\ <var:X1> := <var:n> ; \\ \{ <var:n> = <var:B> \land <var:X1> = <var:B> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:n> = <var:B> \land <var:X1> = <var:B> \land <var:X0> = <nat:4> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:n> = <var:B> \land <var:X1> = <nat:1> \times <var:B> \land <var:X0> = <nat:4> \} \\ <var:u> := <var:X1> \\ \{ <var:n> = <var:B> \land <var:X0> = <nat:4> \land <var:u> = <nat:1> \times <var:B> \} \\ <var:u> := <var:u> + <var:X0> \\ \{ <var:n> = <var:B> \land <var:u> = <nat:1> \times <var:B> + <nat:4> \} \end{eqnarray} As a result , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:n> = <var:B> }} <var:X1> := <var:n> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:1> ; <var:u> := <var:X1> <var:u> := <var:u> + <var:X0> {{ <var:u> = <nat:1> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:X1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:X1> = <var:B> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:X1> = <nat:1> * <var:B> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:X0> = <nat:4> /\ <var:u> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:B> /\ <var:u> = <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 