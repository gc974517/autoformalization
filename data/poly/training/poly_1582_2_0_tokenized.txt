\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:7> ; <var:g> := <var:y0> \end{verbatim} Given it to be that $ <var:u> = <var:D> $ prior to executing the set of instructions then we have $ <var:g> = <nat:7> $ once code finishes . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:u> = <var:D> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:u> = <var:D> \land <var:y0> = <nat:7> \} \\ <var:g> := <var:y0> \\ \{ <var:u> = <var:D> \land <var:g> = <nat:7> \} \end{eqnarray} As a consequence , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:y0> := <nat:7> ; <var:g> := <var:y0> {{ <var:g> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:g> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 