\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:i> ; <var:t2> := <var:t1> * <var:i> ; <var:t3> := <var:t2> * <var:i> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:9> ; <var:U> := <var:t3> <var:U> := <var:U> + <var:t2> <var:U> := <var:U> + <var:t1> <var:U> := <var:U> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:i> = <var:u> $ before evaluating the list of commands , it follows that we see $ <var:U> = <nat:9> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> + <nat:6> \cdot <var:u> + <nat:9> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:i> = <var:u> \} \\ <var:t1> := <var:i> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <var:u> \} \\ <var:t2> := <var:t1> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <var:u> \land <var:t2> = <var:u> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <var:u> \land <var:t2> = <var:u> ^ <nat:2> \land <var:t3> = <var:u> ^ <nat:3> \} \\ <var:t0> := <nat:9> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <var:u> \land <var:t2> = <var:u> ^ <nat:2> \land <var:t3> = <var:u> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:t1> := <var:t1> * <nat:6> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <nat:6> \times <var:u> \land <var:t2> = <var:u> ^ <nat:2> \land <var:t3> = <var:u> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:t2> := <var:t2> * <nat:5> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <nat:6> \times <var:u> \land <var:t2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:t3> = <var:u> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:t3> := <var:t3> * <nat:9> ; \\ \{ <var:i> = <var:u> \land <var:t1> = <nat:6> \times <var:u> \land <var:t2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:u> ^ <nat:3> \land <var:t0> = <nat:9> \} \\ <var:U> := <var:t3> \\ \{ <var:i> = <var:u> \land <var:t1> = <nat:6> \times <var:u> \land <var:t2> = <nat:5> \times <var:u> ^ <nat:2> \land <var:t0> = <nat:9> \land <var:U> = <nat:9> \times <var:u> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:t2> \\ \{ <var:i> = <var:u> \land <var:t1> = <nat:6> \times <var:u> \land <var:t0> = <nat:9> \land <var:U> = <nat:9> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:t1> \\ \{ <var:i> = <var:u> \land <var:t0> = <nat:9> \land <var:U> = <nat:9> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:6> \times <var:u> \} \\ <var:U> := <var:U> + <var:t0> \\ \{ <var:i> = <var:u> \land <var:U> = <nat:9> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> ^ <nat:2> + <nat:6> \times <var:u> + <nat:9> \} \end{eqnarray} Thus , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:i> ; <var:t2> := <var:t1> * <var:i> ; <var:t3> := <var:t2> * <var:i> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:5> ; <var:t3> := <var:t3> * <nat:9> ; <var:U> := <var:t3> <var:U> := <var:U> + <var:t2> <var:U> := <var:U> + <var:t1> <var:U> := <var:U> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:i> = <var:u> }} <def:poly> {{ <var:U> = <nat:9> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <var:u> /\ <var:t2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <var:u> /\ <var:t2> = <var:u> ^ <nat:2> /\ <var:t3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <var:u> /\ <var:t2> = <var:u> ^ <nat:2> /\ <var:t3> = <var:u> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <nat:6> * <var:u> /\ <var:t2> = <var:u> ^ <nat:2> /\ <var:t3> = <var:u> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <nat:6> * <var:u> /\ <var:t2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:t3> = <var:u> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <nat:6> * <var:u> /\ <var:t2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:t3> = <nat:9> * <var:u> ^ <nat:3> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <nat:6> * <var:u> /\ <var:t2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:t0> = <nat:9> /\ <var:U> = <nat:9> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t1> = <nat:6> * <var:u> /\ <var:t0> = <nat:9> /\ <var:U> = <nat:9> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:t0> = <nat:9> /\ <var:U> = <nat:9> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:U> = <nat:9> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 