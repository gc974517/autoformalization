\begin{document} \begin{theorem} Take the following program in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:5> ; <var:l> := <var:W0> \end{verbatim} Assume that we have $ <var:q> = <var:A> $ ahead of evaluating the series of instructions , it follows that $ <var:l> = <nat:5> $ after list of commands is done . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is clear through usual Hoare logic . Advancing , we see the environment update command binding $ <nat:5> $ into $ <var:W0>$ . This command redefines the precondition $ \{ <var:q> = <var:A> \} $ to $ \{ <var:q> = <var:A> \land <var:W0> = <nat:5> \} $ . Paying attention to the upcoming line in our code segment , the binding code letting $ <var:W0$ to $ <var:l>$ . This moves the precondition $ \{ <var:q> = <var:A> \land <var:W0> = <nat:5> \} $ toward $ \{ <var:q> = <var:A> \land <var:l> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:q> = <var:A> }} <var:W0> := <nat:5> ; <var:l> := <var:W0> {{ <var:l> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:l> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 