\begin{document} \begin{theorem} Let the following code segment : \begin{verbatim} <var:C0> := <nat:3> ; <var:W> := <var:C0> \end{verbatim} Given $ <var:Y> = <var:m> $ before interpreting the code , it must be that we have $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} The proof of our program is given through usual Hoare logic . Now , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:m> \} & <var:C0> := <nat:3> & \{ <var:Y> = <var:m> \land <var:C0> = <nat:3> \} \\ \{ <var:Y> = <var:m> \land <var:C0> = <nat:3> \} & <var:W> := <var:C0& \{ <var:Y> = <var:m> \land <var:W> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Y> = <var:m> }} <var:C0> := <nat:3> ; <var:W> := <var:C0> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 