\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:r> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:1> ; <var:I> := <var:z1> <var:I> := <var:I> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:r> = <var:b> $ ahead of running this program , it holds that we see $ <var:I> = <nat:1> * <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is given through this decorated code segment . \begin{eqnarray} \{ <var:r> = <var:b> \} \\ <var:z1> := <var:r> ; \\ \{ <var:r> = <var:b> \land <var:z1> = <var:b> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:r> = <var:b> \land <var:z1> = <var:b> \land <var:z0> = <nat:2> \} \\ <var:z1> := <var:z1> * <nat:1> ; \\ \{ <var:r> = <var:b> \land <var:z1> = <nat:1> \cdot <var:b> \land <var:z0> = <nat:2> \} \\ <var:I> := <var:z1> \\ \{ <var:r> = <var:b> \land <var:z0> = <nat:2> \land <var:I> = <nat:1> \cdot <var:b> \} \\ <var:I> := <var:I> + <var:z0> \\ \{ <var:r> = <var:b> \land <var:I> = <nat:1> \cdot <var:b> + <nat:2> \} \end{eqnarray} Using standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:r> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:1> ; <var:I> := <var:z1> <var:I> := <var:I> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:r> = <var:b> }} <def:poly> {{ <var:I> = <nat:1> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:z1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:z1> = <var:b> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:z0> = <nat:2> /\ <var:I> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:b> /\ <var:I> = <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 