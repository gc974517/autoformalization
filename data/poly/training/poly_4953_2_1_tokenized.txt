\begin{document} \begin{theorem} Take the following program such that \begin{verbatim} <var:T0> := <nat:7> ; <var:Q> := <var:T0> \end{verbatim} Given $ <var:n> = <var:g> $ before the execution of our set of instructions , then $ <var:Q> = <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our list of commands is shown through standard Hoare techniques . Moving on to the proceeding line of code seen in our list of instructions , the binding command assigning $ <nat:7> $ as $ <var:T0>$ . This line moves the precondition $ \{ <var:n> = <var:g> \} $ as the condition $ \{ <var:n> = <var:g> \land <var:T0> = <nat:7> \} $ . Advancing , we see the statement binding $ <var:T0$ into $ <var:Q>$ . This statement moves the precondition $ \{ <var:n> = <var:g> \land <var:T0> = <nat:7> \} $ into $ \{ <var:n> = <var:g> \land <var:Q> = <nat:7> \} $ . This is sound with the assignment law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:n> = <var:g> }} <var:T0> := <nat:7> ; <var:Q> := <var:T0> {{ <var:Q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:g> /\ <var:Q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 