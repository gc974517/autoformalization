\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:w0> := <nat:7> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:y> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:y> ; <var:w2> := <var:w2> * <var:y> ; <var:t> := <var:w2> ; <var:t> := <var:t> + <var:w1> ; <var:t> := <var:t> + <var:w0> \end{verbatim} Allowing it to hold that $ <var:y> = <var:R> $ before evaluating the series of commands then we see $ <var:t> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is evident with standard Hoare reasoning . Moving on to the upcoming piece of code contained in our set of instructions , \verb | { <var:y> = <var:R> } <var:w0> := <nat:7> { <var:y> = <var:R> \land <var:w0> = <nat:7> } | . Moving on , \verb | { <var:y> = <var:R> } <var:w0> := <nat:7> { <var:y> = <var:R> \land <var:w0> = <nat:7> } | , \verb | { <var:y> = <var:R> \land <var:w0> = <nat:7> } <var:w1> := <nat:2> { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> } | , \verb | { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> } <var:w1> := <var:w1> * <var:y> { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> \cdot <var:R> } | , \verb | { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> \cdot <var:R> } <var:w2> := <nat:4> { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> \cdot <var:R> \land <var:w2> = <nat:4> } | and \verb | { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> \cdot <var:R> \land <var:w2> = <nat:4> } <var:w2> := <var:w2> * <var:y> { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> \cdot <var:R> \land <var:w2> = <nat:4> \cdot <var:R> } | . This is shown to be logically sound by the variable binding law found in Hoare logic . Jumping to the next line of code seen in the set of commands , we see \verb | { <var:y> = <var:R> } <var:w0> := <nat:7> { <var:y> = <var:R> \land <var:w0> = <nat:7> } | . Next , \verb | { <var:y> = <var:R> } <var:w0> := <nat:7> { <var:y> = <var:R> \land <var:w0> = <nat:7> } | and \verb | { <var:y> = <var:R> \land <var:w0> = <nat:7> } <var:w1> := <nat:2> { <var:y> = <var:R> \land <var:w0> = <nat:7> \land <var:w1> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:y> = <var:R> }} <var:w0> := <nat:7> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:y> ; <var:w2> := <nat:4> ; <var:w2> := <var:w2> * <var:y> ; <var:w2> := <var:w2> * <var:y> ; <var:t> := <var:w2> ; <var:t> := <var:t> + <var:w1> ; <var:t> := <var:t> + <var:w0> {{ <var:t> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> * <var:R> /\ <var:w2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> * <var:R> /\ <var:w2> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> * <var:R> /\ <var:w2> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:2> * <var:R> /\ <var:t> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:w0> = <nat:7> /\ <var:t> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:t> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 