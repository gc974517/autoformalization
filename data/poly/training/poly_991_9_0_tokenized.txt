\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:5> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:p> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:p> ; <var:j2> := <var:j2> * <var:p> ; <var:k> := <var:j2> ; <var:k> := <var:k> + <var:j1> ; <var:k> := <var:k> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:p> = <var:h> $ before executing the code , it holds that $ <var:k> = <nat:1> \times <var:h> ^ <nat:2> + <nat:6> \times <var:h> + <nat:5> $ after set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for the set of instructions can be shown with typical Hoare techniques . Moving forward to the next step , \begin{eqnarray} \{ <var:p> = <var:h> \} \, <var:j0> := <nat:5> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \\ \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \, <var:j1> := <nat:6> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \} \end{eqnarray} This is shown by the environment update scheme in standard Hoare logic . Advancing , \begin{eqnarray} \{ <var:p> = <var:h> \} \, <var:j0> := <nat:5> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \\ \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \, <var:j1> := <nat:6> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \} \\ \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \} \, <var:j1> := <var:j1> * <var:p> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \cdot <var:h> \} \\ \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \cdot <var:h> \} \, <var:j2> := <nat:1> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \cdot <var:h> \land <var:j2> = <nat:1> \} \end{eqnarray} This is rigorously given with the environment update law from Hoare reasoning . Moving forward to the next commands found in our set of commands , \begin{eqnarray} \{ <var:p> = <var:h> \} \, <var:j0> := <nat:5> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \\ \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \, <var:j1> := <nat:6> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \land <var:j1> = <nat:6> \} \end{eqnarray} Immediately following , \begin{eqnarray} \{ <var:p> = <var:h> \} \, <var:j0> := <nat:5> \, \{ <var:p> = <var:h> \land <var:j0> = <nat:5> \} \end{eqnarray} This is given through the variable update scheme obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:5> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:p> ; <var:j2> := <nat:1> ; <var:j2> := <var:j2> * <var:p> ; <var:j2> := <var:j2> * <var:p> ; <var:k> := <var:j2> ; <var:k> := <var:k> + <var:j1> ; <var:k> := <var:k> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:p> = <var:h> }} <def:poly> {{ <var:k> = <nat:1> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> * <var:h> /\ <var:j2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> * <var:h> /\ <var:j2> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> * <var:h> /\ <var:j2> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:j1> = <nat:6> * <var:h> /\ <var:k> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:j0> = <nat:5> /\ <var:k> = <nat:1> * <var:h> ^ <nat:2> + <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:k> = <nat:1> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 