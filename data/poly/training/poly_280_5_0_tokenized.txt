\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:d0> := <nat:2> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:o> ; <var:A> := <var:d1> ; <var:A> := <var:A> + <var:d0> \end{verbatim} Allowing it to be that $ <var:o> = <var:s> $ before the evaluation of this program , it follows that $ <var:A> = <nat:3> * <var:s> + <nat:2> $ once series of commands terminates . \end{theorem} \begin{proof} Proving correctness for the code can be given by Hoare logic . Honing in on the following statements found in the list of commands , we see \begin{eqnarray} \{ <var:o> = <var:s> \} \, <var:d0> := <nat:2> \, \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \} \\ \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \} \, <var:d1> := <nat:3> \, \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:d1> = <nat:3> \} \\ \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:d1> = <nat:3> \} \, <var:d1> := <var:d1> * <var:o> \, \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:d1> = <nat:3> * <var:s> \} \\ \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:d1> = <nat:3> * <var:s> \} \, <var:A> := <var:d1> \, \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:A> = <nat:3> * <var:s> \} \\ \{ <var:o> = <var:s> \land <var:d0> = <nat:2> \land <var:A> = <nat:3> * <var:s> \} \, <var:A> := <var:A> + <var:d0\, \{ <var:o> = <var:s> \land <var:A> = <nat:3> * <var:s> + <nat:2> \} \end{eqnarray} This is rigorously given using the assignment inference rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:o> = <var:s> }} <var:d0> := <nat:2> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:o> ; <var:A> := <var:d1> ; <var:A> := <var:A> + <var:d0> {{ <var:A> = <nat:3> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:d0> = <nat:2> /\ <var:A> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:A> = <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 