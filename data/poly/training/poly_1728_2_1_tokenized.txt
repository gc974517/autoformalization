\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:5> ; <var:g> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given given all $ <var:Q> \in \mathbb{N} $ that we have $ <var:K> = <var:Q> $ ahead of evaluating our series of instructions it follows that $ <var:g> = <nat:5> $ . \end{theorem} \begin{proof} The argument for this segment of code is evident through standard Hoare reasoning . Shifting focus toward the upcoming command found in our code segment , we see the assignment command \verb | <var:x0> := <nat:5> ; | . This advances the precondition $ \{ <var:K> = <var:Q> \} $ to the postcondition $ \{ <var:K> = <var:Q> \land <var:x0> = <nat:5> \} $ . This is sound with the assignment rule in standard Hoare techniques . Further , we have the assignment command letting $ <var:x0$ to $ <var:g>$ . This statement transfers $ \{ <var:K> = <var:Q> \land <var:x0> = <nat:5> \} $ to the condition $ \{ <var:K> = <var:Q> \land <var:g> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:g> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <def:poly> {{ <var:g> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:g> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 