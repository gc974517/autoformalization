\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:c> ; <var:J2> := <var:J1> * <var:c> ; <var:J3> := <var:J2> * <var:c> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:4> ; <var:J3> := <var:J3> * <nat:1> ; <var:h> := <var:J3> <var:h> := <var:h> + <var:J1> <var:h> := <var:h> + <var:J0> \end{verbatim} Allow that we have $ <var:c> = <var:S> $ before executing the segment of code , it must be that $ <var:h> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:6> $ when list of instructions has exited . \end{theorem} \begin{proof} The flow of logic for this series of commands is given with typical Hoare techniques . Jumping to the proceeding commands seen in our list of instructions , \begin{eqnarray} \{ <var:c> = <var:S> \} \, <var:J1> := <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \\ \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \, <var:J2> := <var:J1> * <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \} \end{eqnarray} This is ensured by the assignment inference rule given by standard Hoare logic . Immediately after , we have \begin{eqnarray} \{ <var:c> = <var:S> \} \, <var:J1> := <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \\ \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \, <var:J2> := <var:J1> * <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \} \\ \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \} \, <var:J3> := <var:J2> * <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \} \\ \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \} \, <var:J0> := <nat:6> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:6> \} \\ \{ <var:c> = <var:S> \land <var:J1> = <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:6> \} \, <var:J1> := <var:J1> * <nat:4> \, \{ <var:c> = <var:S> \land <var:J1> = <nat:4> * <var:S> \land <var:J2> = <var:S> ^ <nat:2> \land <var:J3> = <var:S> ^ <nat:3> \land <var:J0> = <nat:6> \} \end{eqnarray} After , we have \begin{eqnarray} \{ <var:c> = <var:S> \} \, <var:J1> := <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \end{eqnarray} Moving forward , \begin{eqnarray} \{ <var:c> = <var:S> \} \, <var:J1> := <var:c> \, \{ <var:c> = <var:S> \land <var:J1> = <var:S> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:c> = <var:S> }} <var:J1> := <var:c> ; <var:J2> := <var:J1> * <var:c> ; <var:J3> := <var:J2> * <var:c> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:4> ; <var:J3> := <var:J3> * <nat:1> ; <var:h> := <var:J3> <var:h> := <var:h> + <var:J1> <var:h> := <var:h> + <var:J0> {{ <var:h> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <nat:4> * <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <var:S> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <nat:4> * <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J1> = <nat:4> * <var:S> /\ <var:J2> = <var:S> ^ <nat:2> /\ <var:J0> = <nat:6> /\ <var:h> = <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:J0> = <nat:6> /\ <var:h> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:h> = <nat:1> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 