\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:K1> := <var:R> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:y> := <var:K1> <var:y> := <var:y> + <var:K0> \end{verbatim} Assuming that we have $ <var:R> = <var:u> $ before the execution of our list of instructions it holds that we have $ <var:y> = <nat:3> \times <var:u> + <nat:2> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The proof of our set of instructions is demonstrated by typical Hoare techniques . Looking at the proceeding statement in our list of commands , the environment update command \verb | <var:K1> := <var:R> ; | . This code redefines the precondition $ \{ <var:R> = <var:u> \} $ into the postcondition $ \{ <var:R> = <var:u> \land <var:K1> = <var:u> \} $ . This is shown using the assignment scheme defined in Hoare reasoning . Stepping forward , we have the environment update statement \verb | <var:K0> := <nat:2> ; | . This statement takes $ \{ <var:R> = <var:u> \land <var:K1> = <var:u> \} $ to the postcondition $ \{ <var:R> = <var:u> \land <var:K1> = <var:u> \land <var:K0> = <nat:2> \} $ . Shifting focus toward the subsequent piece of code seen in our list of instructions , we have the variable assignmet line \verb | <var:K1> := <var:K1> * <nat:3> ; | . This forwards the condition $ \{ <var:R> = <var:u> \land <var:K1> = <var:u> \land <var:K0> = <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:u> \land <var:K1> = <nat:3> \times <var:u> \land <var:K0> = <nat:2> \} $ . Moving forward to the proceeding statement seen in our segment of code , the variable assignmet code giving $ <var:K1$ to $ <var:y>$ . This takes the condition $ \{ <var:R> = <var:u> \land <var:K1> = <nat:3> \times <var:u> \land <var:K0> = <nat:2> \} $ toward $ \{ <var:R> = <var:u> \land <var:K0> = <nat:2> \land <var:y> = <nat:3> \times <var:u> \} $ . This is deduced with the assignment inference rule defined in standard Hoare reasoning . Advancing to the next step , we have the environment update command \verb | <var:y> := <var:y> + <var:K0> | . This code takes the condition $ \{ <var:R> = <var:u> \land <var:K0> = <nat:2> \land <var:y> = <nat:3> \times <var:u> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:y> = <nat:3> \times <var:u> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:R> = <var:u> }} <var:K1> := <var:R> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:y> := <var:K1> <var:y> := <var:y> + <var:K0> {{ <var:y> = <nat:3> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:K1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:K1> = <var:u> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:K1> = <nat:3> * <var:u> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:K0> = <nat:2> /\ <var:y> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:y> = <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 