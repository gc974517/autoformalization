\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:j> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:r> = <var:J> $ , letting positive coefficients $ <var:J> $ , ahead of executing our series of commands , it follows that we have $ <var:j> = <nat:4> $ after code has exited . \end{theorem} \begin{proof} Observe this decorated list of instructions . \begin{eqnarray} \{ <var:r> = <var:J> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:r> = <var:J> \land <var:V0> = <nat:4> \} \\ <var:j> := <var:V0> \\ \{ <var:r> = <var:J> \land <var:j> = <nat:4> \} \end{eqnarray} Using usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:j> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:r> = <var:J> }} <def:poly> {{ <var:j> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:J> /\ <var:j> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 