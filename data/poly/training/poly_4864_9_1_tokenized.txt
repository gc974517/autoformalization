\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w3> := <var:w2> * <var:V> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:9> ; <var:w3> := <var:w3> * <nat:9> ; <var:S> := <var:w3> <var:S> := <var:S> + <var:w1> <var:S> := <var:S> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:V> = <var:F> $ given all positive numbers $ <var:F> $ before the execution of this segment of code , it holds that we see $ <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> + <nat:5> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment can be accomplished using usual Hoare logic . Moving on to the next step , we see the variable update command \verb | <var:w1> := <var:V> ; | . This code forwards the precondition $ \{ <var:V> = <var:F> \} $ into the postcondition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \} $ . Advancing to the proceeding step found in our program , the variable assignmet code \verb | <var:w2> := <var:w1> * <var:V> ; | . This statement takes the condition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \} $ into the postcondition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \} $ . Honing in on the upcoming line contained in our list of commands , the variable assignmet code \verb | <var:w3> := <var:w2> * <var:V> ; | . This transfers the precondition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \} $ into the condition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \} $ . This is given using the assignment inference rule from typical Hoare logic . Focusing on the proceeding line seen in our series of instructions , we see the command binding $ <nat:5> $ as $ <var:w0>$ . This code redefines $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ . Focusing on the following command found in our series of instructions , we see the binding line \verb | <var:w1> := <var:w1> * <nat:9> ; | . This line moves $ \{ <var:V> = <var:F> \land <var:w1> = <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ as the postcondition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ . This is given using the assignment inference rule defined in Hoare logic . Keeping momentum , the variable assignmet statement \verb | <var:w3> := <var:w3> * <nat:9> ; | . This statement forwards the precondition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ into the condition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <nat:9> \cdot <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ . This is given by the assignment scheme defined in Hoare techniques . Moving on to the next step , we have the assignment statement \verb | <var:S> := <var:w3> | . This code advances the condition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w3> = <nat:9> \cdot <var:F> ^ <nat:3> \land <var:w0> = <nat:5> \} $ into the postcondition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w0> = <nat:5> \land <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> \} $ . Jumping to the following statement in the code , we see the line \verb | <var:S> := <var:S> + <var:w1> | . This forwards the condition $ \{ <var:V> = <var:F> \land <var:w1> = <nat:9> \cdot <var:F> \land <var:w2> = <var:F> ^ <nat:2> \land <var:w0> = <nat:5> \land <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:F> \land <var:w0> = <nat:5> \land <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> \} $ . This is guaranteed through the assignment scheme found in standard Hoare techniques . Shifting focus toward the next line found in the set of commands , we see the assignment code defining $ <var:S> + <var:w0$ into $ <var:S>$ . This moves the condition $ \{ <var:V> = <var:F> \land <var:w0> = <nat:5> \land <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> \} $ into the postcondition $ \{ <var:V> = <var:F> \land <var:S> = <nat:9> \cdot <var:F> ^ <nat:3> + <nat:9> \cdot <var:F> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w3> := <var:w2> * <var:V> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:9> ; <var:w3> := <var:w3> * <nat:9> ; <var:S> := <var:w3> <var:S> := <var:S> + <var:w1> <var:S> := <var:S> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <def:poly> {{ <var:S> = <nat:9> * <var:F> ^ <nat:3> + <nat:9> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <var:F> /\ <var:w2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <var:F> /\ <var:w2> = <var:F> ^ <nat:2> /\ <var:w3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <var:F> /\ <var:w2> = <var:F> ^ <nat:2> /\ <var:w3> = <var:F> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <nat:9> * <var:F> /\ <var:w2> = <var:F> ^ <nat:2> /\ <var:w3> = <var:F> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <nat:9> * <var:F> /\ <var:w2> = <var:F> ^ <nat:2> /\ <var:w3> = <nat:9> * <var:F> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w1> = <nat:9> * <var:F> /\ <var:w2> = <var:F> ^ <nat:2> /\ <var:w0> = <nat:5> /\ <var:S> = <nat:9> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w0> = <nat:5> /\ <var:S> = <nat:9> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:S> = <nat:9> * <var:F> ^ <nat:3> + <nat:9> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 