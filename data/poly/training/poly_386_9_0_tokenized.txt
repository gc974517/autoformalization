\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:9> ; <var:B1> := <nat:5> ; <var:B1> := <var:B1> * <var:Q> ; <var:B2> := <nat:2> ; <var:B2> := <var:B2> * <var:Q> ; <var:B2> := <var:B2> * <var:Q> ; <var:O> := <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> in \emph{Imp} . Assuming that we have $ <var:Q> = <var:T> $ prior to the execution of this code , it follows that we have $ <var:O> = <nat:2> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> + <nat:9> $ once series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:T> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \} \\ <var:B1> := <nat:5> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> \} \\ <var:B1> := <var:B1> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> * <var:T> \} \\ <var:B2> := <nat:2> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> * <var:T> \land <var:B2> = <nat:2> \} \\ <var:B2> := <var:B2> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> * <var:T> \land <var:B2> = <nat:2> * <var:T> \} \\ <var:B2> := <var:B2> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> * <var:T> \land <var:B2> = <nat:2> * <var:T> ^ <nat:2> \} \\ <var:O> := <var:B2> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:B1> = <nat:5> * <var:T> \land <var:O> = <nat:2> * <var:T> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:B1> ; \\ \{ <var:Q> = <var:T> \land <var:B0> = <nat:9> \land <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> \} \\ <var:O> := <var:O> + <var:B0> \\ \{ <var:Q> = <var:T> \land <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:9> \} \end{eqnarray} Utilizing usual Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:9> ; <var:B1> := <nat:5> ; <var:B1> := <var:B1> * <var:Q> ; <var:B2> := <nat:2> ; <var:B2> := <var:B2> * <var:Q> ; <var:B2> := <var:B2> * <var:Q> ; <var:O> := <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Q> = <var:T> }} <def:poly> {{ <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> * <var:T> /\ <var:B2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> * <var:T> /\ <var:B2> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> * <var:T> /\ <var:B2> = <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:5> * <var:T> /\ <var:O> = <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:B0> = <nat:9> /\ <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:O> = <nat:2> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 