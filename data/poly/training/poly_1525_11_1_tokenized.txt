\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:j> ; <var:E2> := <var:E1> * <var:j> ; <var:E3> := <var:E2> * <var:j> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:4> ; <var:K> := <var:E3> <var:K> := <var:K> + <var:E2> <var:K> := <var:K> + <var:E1> <var:K> := <var:K> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:j> = <var:Q> $ , letting $ <var:Q> \in \mathbb{N} $ , ahead of the evaluation of this set of commands , then we have $ <var:K> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:3> $ when code has executed . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:j> = <var:Q> \} \\ <var:E1> := <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <var:Q> \} \\ <var:E2> := <var:E1> * <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E1> := <var:E1> * <nat:8> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <nat:8> \times <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E2> := <var:E2> * <nat:3> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <nat:8> \times <var:Q> \land <var:E2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:E3> := <var:E3> * <nat:4> ; \\ \{ <var:j> = <var:Q> \land <var:E1> = <nat:8> \times <var:Q> \land <var:E2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:Q> ^ <nat:3> \land <var:E0> = <nat:3> \} \\ <var:K> := <var:E3> \\ \{ <var:j> = <var:Q> \land <var:E1> = <nat:8> \times <var:Q> \land <var:E2> = <nat:3> \times <var:Q> ^ <nat:2> \land <var:E0> = <nat:3> \land <var:K> = <nat:4> \times <var:Q> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:E2> \\ \{ <var:j> = <var:Q> \land <var:E1> = <nat:8> \times <var:Q> \land <var:E0> = <nat:3> \land <var:K> = <nat:4> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:E1> \\ \{ <var:j> = <var:Q> \land <var:E0> = <nat:3> \land <var:K> = <nat:4> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> \} \\ <var:K> := <var:K> + <var:E0> \\ \{ <var:j> = <var:Q> \land <var:K> = <nat:4> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:3> \} \end{eqnarray} Hence , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:j> ; <var:E2> := <var:E1> * <var:j> ; <var:E3> := <var:E2> * <var:j> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:3> ; <var:E3> := <var:E3> * <nat:4> ; <var:K> := <var:E3> <var:K> := <var:K> + <var:E2> <var:K> := <var:K> + <var:E1> <var:K> := <var:K> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <def:poly> {{ <var:K> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <nat:8> * <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <nat:8> * <var:Q> /\ <var:E2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <nat:8> * <var:Q> /\ <var:E2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:Q> ^ <nat:3> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <nat:8> * <var:Q> /\ <var:E2> = <nat:3> * <var:Q> ^ <nat:2> /\ <var:E0> = <nat:3> /\ <var:K> = <nat:4> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E1> = <nat:8> * <var:Q> /\ <var:E0> = <nat:3> /\ <var:K> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:E0> = <nat:3> /\ <var:K> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:K> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 