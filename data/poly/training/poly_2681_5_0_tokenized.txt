\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:y> ; <var:v> := <var:X1> ; <var:v> := <var:v> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:y> = <var:k> $ before running our series of instructions , it holds that we have $ <var:v> = <nat:3> \cdot <var:k> + <nat:4> $ after series of commands has executed . \end{theorem} \begin{proof} The application of standard Hoare logic returns : \begin{eqnarray} \{ <var:y> = <var:k> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:y> = <var:k> \land <var:X0> = <nat:4> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:y> = <var:k> \land <var:X0> = <nat:4> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:y> ; \\ \{ <var:y> = <var:k> \land <var:X0> = <nat:4> \land <var:X1> = <nat:3> \cdot <var:k> \} \\ <var:v> := <var:X1> ; \\ \{ <var:y> = <var:k> \land <var:X0> = <nat:4> \land <var:v> = <nat:3> \cdot <var:k> \} \\ <var:v> := <var:v> + <var:X0> \\ \{ <var:y> = <var:k> \land <var:v> = <nat:3> \cdot <var:k> + <nat:4> \} \end{eqnarray} Given the preceding argument , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:y> ; <var:v> := <var:X1> ; <var:v> := <var:v> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:y> = <var:k> }} <def:poly> {{ <var:v> = <nat:3> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:X0> = <nat:4> /\ <var:v> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:k> /\ <var:v> = <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 