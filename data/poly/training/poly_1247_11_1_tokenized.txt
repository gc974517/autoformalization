\begin{document} \begin{theorem} Consider a code segment such that \begin{verbatim} <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u3> := <var:u2> * <var:Y> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:8> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> \end{verbatim} Assuming --- letting $ <var:h> \in \mathbb{N} $ --- that we have $ <var:Y> = <var:h> $ ahead of the evaluation of this code , it must be that we have $ <var:A> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:Y> = <var:h> \} \\ <var:u1> := <var:Y> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <var:h> \} \\ <var:u2> := <var:u1> * <var:Y> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <var:h> \land <var:u2> = <var:h> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:Y> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <var:h> \land <var:u2> = <var:h> ^ <nat:2> \land <var:u3> = <var:h> ^ <nat:3> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <var:h> \land <var:u2> = <var:h> ^ <nat:2> \land <var:u3> = <var:h> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:6> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <nat:6> \times <var:h> \land <var:u2> = <var:h> ^ <nat:2> \land <var:u3> = <var:h> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u2> := <var:u2> * <nat:5> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <nat:6> \times <var:h> \land <var:u2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:u3> = <var:h> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u3> := <var:u3> * <nat:8> ; \\ \{ <var:Y> = <var:h> \land <var:u1> = <nat:6> \times <var:h> \land <var:u2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:8> \times <var:h> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:A> := <var:u3> \\ \{ <var:Y> = <var:h> \land <var:u1> = <nat:6> \times <var:h> \land <var:u2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:A> = <nat:8> \times <var:h> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:u2> \\ \{ <var:Y> = <var:h> \land <var:u1> = <nat:6> \times <var:h> \land <var:u0> = <nat:1> \land <var:A> = <nat:8> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:u1> \\ \{ <var:Y> = <var:h> \land <var:u0> = <nat:1> \land <var:A> = <nat:8> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:6> \times <var:h> \} \\ <var:A> := <var:A> + <var:u0> \\ \{ <var:Y> = <var:h> \land <var:A> = <nat:8> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:6> \times <var:h> + <nat:1> \} \end{eqnarray} Given the above , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Y> = <var:h> }} <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u3> := <var:u2> * <var:Y> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:5> ; <var:u3> := <var:u3> * <nat:8> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> {{ <var:A> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <var:h> /\ <var:u2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <var:h> /\ <var:u2> = <var:h> ^ <nat:2> /\ <var:u3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <var:h> /\ <var:u2> = <var:h> ^ <nat:2> /\ <var:u3> = <var:h> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <nat:6> * <var:h> /\ <var:u2> = <var:h> ^ <nat:2> /\ <var:u3> = <var:h> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <nat:6> * <var:h> /\ <var:u2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:u3> = <var:h> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <nat:6> * <var:h> /\ <var:u2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <nat:6> * <var:h> /\ <var:u2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:A> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u1> = <nat:6> * <var:h> /\ <var:u0> = <nat:1> /\ <var:A> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:u0> = <nat:1> /\ <var:A> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:A> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 