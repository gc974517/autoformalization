\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:1> ; <var:e> := <var:I0> \end{verbatim} Assume it to hold that $ <var:h> = <var:Q> $ before the evaluation of our segment of code it must be that we see $ <var:e> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands is demonstrated by Hoare reasoning . Focusing on the subsequent line of code seen in the list of instructions , we see the binding command binding $ <nat:1> $ to $ <var:I0>$ . This advances the condition $ \{ <var:h> = <var:Q> \} $ to the postcondition $ \{ <var:h> = <var:Q> \land <var:I0> = <nat:1> \} $ . This is shown through the assignment scheme of standard Hoare reasoning . Observing the proceeding piece of code in our series of instructions , the assignment line assigning $ <var:I0$ into $ <var:e>$ . This takes the condition $ \{ <var:h> = <var:Q> \land <var:I0> = <nat:1> \} $ to the postcondition $ \{ <var:h> = <var:Q> \land <var:e> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:h> = <var:Q> }} <var:I0> := <nat:1> ; <var:e> := <var:I0> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 