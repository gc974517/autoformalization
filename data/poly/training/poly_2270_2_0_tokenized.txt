\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:2> ; <var:P> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given some integers $ <var:S> $ , that we have $ <var:p> = <var:S> $ before the execution of our set of instructions , it follows that $ <var:P> = <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare techniques yields : \begin{eqnarray} \{ <var:p> = <var:S> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:p> = <var:S> \land <var:C0> = <nat:2> \} \\ <var:P> := <var:C0> \\ \{ <var:p> = <var:S> \land <var:P> = <nat:2> \} \end{eqnarray} Considering the preceding argument , this set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:P> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:p> = <var:S> }} <def:poly> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 