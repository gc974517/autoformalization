\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:b0> := <nat:7> ; <var:n> := <var:b0> \end{verbatim} Assuming that $ <var:Z> = <var:w> $ --- taking whole numbers $ <var:w> $ --- prior to interpreting the program it must be that we see $ <var:n> = <nat:7> $ . \end{theorem} \begin{proof} Observe this decorated set of commands . \begin{eqnarray} \{ <var:Z> = <var:w> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:Z> = <var:w> \land <var:b0> = <nat:7> \} \\ <var:n> := <var:b0> \\ \{ <var:Z> = <var:w> \land <var:n> = <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Z> = <var:w> }} <var:b0> := <nat:7> ; <var:n> := <var:b0> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:w> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 