\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:d> ; <var:W> := <var:A1> ; <var:W> := <var:W> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:d> = <var:Q> $ prior to the execution of our segment of code it holds that we see $ <var:W> = <nat:5> \times <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:d> = <var:Q> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:d> = <var:Q> \land <var:A0> = <nat:2> \} \\ <var:A1> := <nat:5> ; \\ \{ <var:d> = <var:Q> \land <var:A0> = <nat:2> \land <var:A1> = <nat:5> \} \\ <var:A1> := <var:A1> * <var:d> ; \\ \{ <var:d> = <var:Q> \land <var:A0> = <nat:2> \land <var:A1> = <nat:5> * <var:Q> \} \\ <var:W> := <var:A1> ; \\ \{ <var:d> = <var:Q> \land <var:A0> = <nat:2> \land <var:W> = <nat:5> * <var:Q> \} \\ <var:W> := <var:W> + <var:A0> \\ \{ <var:d> = <var:Q> \land <var:W> = <nat:5> * <var:Q> + <nat:2> \} \end{eqnarray} As a consequence , the list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:2> ; <var:A1> := <nat:5> ; <var:A1> := <var:A1> * <var:d> ; <var:W> := <var:A1> ; <var:W> := <var:W> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:d> = <var:Q> }} <def:poly> {{ <var:W> = <nat:5> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:A0> = <nat:2> /\ <var:W> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Q> /\ <var:W> = <nat:5> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 