\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:i> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:i> ; <var:a2> := <var:a2> * <var:i> ; <var:D> := <var:a2> ; <var:D> := <var:D> + <var:a1> ; <var:D> := <var:D> + <var:a0> \end{verbatim} Assume , for natural coefficients $ <var:t> $ , it to be that $ <var:i> = <var:t> $ prior to interpreting this program , it must be that we see $ <var:D> = <nat:3> \times <var:t> ^ <nat:2> + <nat:6> \times <var:t> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for this program is demonstrated by usual Hoare techniques . Going to the next step , we have \verb | { <var:i> = <var:t> } <var:a0> := <nat:8> { <var:i> = <var:t> \land <var:a0> = <nat:8> } | , \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> } <var:a1> := <nat:6> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> } | , \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> } <var:a1> := <var:a1> * <var:i> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> } | , \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> } <var:a2> := <nat:3> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> } | , \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> } <var:a2> := <var:a2> * <var:i> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> \cdot <var:t> } | , \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> \cdot <var:t> } <var:a2> := <var:a2> * <var:i> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> \cdot <var:t> ^ <nat:2> } | and \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:a2> = <nat:3> \cdot <var:t> ^ <nat:2> } <var:D> := <var:a2> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> \cdot <var:t> \land <var:D> = <nat:3> \cdot <var:t> ^ <nat:2> } | . Moving forward to the next step , \verb | { <var:i> = <var:t> } <var:a0> := <nat:8> { <var:i> = <var:t> \land <var:a0> = <nat:8> } | and \verb | { <var:i> = <var:t> \land <var:a0> = <nat:8> } <var:a1> := <nat:6> { <var:i> = <var:t> \land <var:a0> = <nat:8> \land <var:a1> = <nat:6> } | . This is ensured by the variable binding scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:i> = <var:t> }} <var:a0> := <nat:8> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:i> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:i> ; <var:a2> := <var:a2> * <var:i> ; <var:D> := <var:a2> ; <var:D> := <var:D> + <var:a1> ; <var:D> := <var:D> + <var:a0> {{ <var:D> = <nat:3> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> * <var:t> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> * <var:t> /\ <var:a2> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> * <var:t> /\ <var:a2> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:6> * <var:t> /\ <var:D> = <nat:3> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:a0> = <nat:8> /\ <var:D> = <nat:3> * <var:t> ^ <nat:2> + <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:D> = <nat:3> * <var:t> ^ <nat:2> + <nat:6> * <var:t> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 