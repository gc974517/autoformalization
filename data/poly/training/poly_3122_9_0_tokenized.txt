\begin{document} \begin{theorem} We define a program such that \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:f> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:f> ; <var:E2> := <var:E2> * <var:f> ; <var:A> := <var:E2> ; <var:A> := <var:A> + <var:E1> ; <var:A> := <var:A> + <var:E0> \end{verbatim} Assume it to be that $ <var:f> = <var:Y> $ before interpreting this segment of code it must be that we have $ <var:A> = <nat:8> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:f> = <var:Y> \} \\ <var:E0> := <nat:4> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \} \\ <var:E1> := <nat:9> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \} \\ <var:E1> := <var:E1> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:Y> \} \\ <var:E2> := <nat:8> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:Y> \land <var:E2> = <nat:8> \} \\ <var:E2> := <var:E2> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:Y> \land <var:E2> = <nat:8> \times <var:Y> \} \\ <var:E2> := <var:E2> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:Y> \land <var:E2> = <nat:8> \times <var:Y> ^ <nat:2> \} \\ <var:A> := <var:E2> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:E1> = <nat:9> \times <var:Y> \land <var:A> = <nat:8> \times <var:Y> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:E1> ; \\ \{ <var:f> = <var:Y> \land <var:E0> = <nat:4> \land <var:A> = <nat:8> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> \} \\ <var:A> := <var:A> + <var:E0> \\ \{ <var:f> = <var:Y> \land <var:A> = <nat:8> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> + <nat:4> \} \end{eqnarray} Considering the above , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:f> = <var:Y> }} <var:E0> := <nat:4> ; <var:E1> := <nat:9> ; <var:E1> := <var:E1> * <var:f> ; <var:E2> := <nat:8> ; <var:E2> := <var:E2> * <var:f> ; <var:E2> := <var:E2> * <var:f> ; <var:A> := <var:E2> ; <var:A> := <var:A> + <var:E1> ; <var:A> := <var:A> + <var:E0> {{ <var:A> = <nat:8> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:Y> /\ <var:E2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:Y> /\ <var:E2> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:Y> /\ <var:E2> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:9> * <var:Y> /\ <var:A> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:A> = <nat:8> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:A> = <nat:8> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 