\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:a0> := <nat:6> ; <var:K> := <var:a0> \end{verbatim} Assuming it to be that $ <var:k> = <var:q> $ , given integers $ <var:q> $ , before the execution of our list of commands it follows that $ <var:K> = <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:k> = <var:q> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:k> = <var:q> \land <var:a0> = <nat:6> \} \end{eqnarray} Furthering the evaluation of the series of commands returns : \begin{eqnarray} <var:K> := <var:a0> \\ \{ <var:k> = <var:q> \land <var:K> = <nat:6> \} \end{eqnarray} As a consequence , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <var:a0> := <nat:6> ; <var:K> := <var:a0> {{ <var:K> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:K> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 