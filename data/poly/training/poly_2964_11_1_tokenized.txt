\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:v1> := <var:y> ; <var:v2> := <var:v1> * <var:y> ; <var:v3> := <var:v2> * <var:y> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:4> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> \end{verbatim} Allowing for every natural coefficients $ <var:L> $ it to be that $ <var:y> = <var:L> $ before the execution of this set of instructions it must be that we see $ <var:j> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> $ when set of instructions executes . \end{theorem} \begin{proof} Applying Hoare techniques results in : \begin{eqnarray} \{ <var:y> = <var:L> \} \\ <var:v1> := <var:y> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <var:L> \} \\ <var:v2> := <var:v1> * <var:y> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <var:L> \land <var:v2> = <var:L> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:y> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <var:L> \land <var:v2> = <var:L> ^ <nat:2> \land <var:v3> = <var:L> ^ <nat:3> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <var:L> \land <var:v2> = <var:L> ^ <nat:2> \land <var:v3> = <var:L> ^ <nat:3> \land <var:v0> = <nat:3> \} \\ <var:v1> := <var:v1> * <nat:3> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <nat:3> \cdot <var:L> \land <var:v2> = <var:L> ^ <nat:2> \land <var:v3> = <var:L> ^ <nat:3> \land <var:v0> = <nat:3> \} \\ <var:v2> := <var:v2> * <nat:1> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <nat:3> \cdot <var:L> \land <var:v2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:v3> = <var:L> ^ <nat:3> \land <var:v0> = <nat:3> \} \\ <var:v3> := <var:v3> * <nat:4> ; \\ \{ <var:y> = <var:L> \land <var:v1> = <nat:3> \cdot <var:L> \land <var:v2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:v3> = <nat:4> \cdot <var:L> ^ <nat:3> \land <var:v0> = <nat:3> \} \\ <var:j> := <var:v3> \\ \{ <var:y> = <var:L> \land <var:v1> = <nat:3> \cdot <var:L> \land <var:v2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:v0> = <nat:3> \land <var:j> = <nat:4> \cdot <var:L> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:v2> \\ \{ <var:y> = <var:L> \land <var:v1> = <nat:3> \cdot <var:L> \land <var:v0> = <nat:3> \land <var:j> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:v1> \\ \{ <var:y> = <var:L> \land <var:v0> = <nat:3> \land <var:j> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> \} \\ <var:j> := <var:j> + <var:v0> \\ \{ <var:y> = <var:L> \land <var:j> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} \end{eqnarray} Thus , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:y> = <var:L> }} <var:v1> := <var:y> ; <var:v2> := <var:v1> * <var:y> ; <var:v3> := <var:v2> * <var:y> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:4> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> {{ <var:j> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <var:L> /\ <var:v2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <var:L> /\ <var:v2> = <var:L> ^ <nat:2> /\ <var:v3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <var:L> /\ <var:v2> = <var:L> ^ <nat:2> /\ <var:v3> = <var:L> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <nat:3> * <var:L> /\ <var:v2> = <var:L> ^ <nat:2> /\ <var:v3> = <var:L> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <nat:3> * <var:L> /\ <var:v2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:v3> = <var:L> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <nat:3> * <var:L> /\ <var:v2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:L> ^ <nat:3> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <nat:3> * <var:L> /\ <var:v2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:v0> = <nat:3> /\ <var:j> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v1> = <nat:3> * <var:L> /\ <var:v0> = <nat:3> /\ <var:j> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:v0> = <nat:3> /\ <var:j> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:j> = <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 