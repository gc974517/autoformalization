\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:6> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:u> ; <var:y> := <var:Y1> ; <var:y> := <var:y> + <var:Y0> \end{verbatim} Assuming that $ <var:u> = <var:F> $ ahead of running our set of commands , it follows that we see $ <var:y> = <nat:3> \cdot <var:F> + <nat:6> $ . \end{theorem} \begin{proof} The proof of this code segment is shown by the following decorated code segment . \begin{eqnarray} \{ <var:u> = <var:F> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:u> = <var:F> \land <var:Y0> = <nat:6> \} \\ <var:Y1> := <nat:3> ; \\ \{ <var:u> = <var:F> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> \} \\ <var:Y1> := <var:Y1> * <var:u> ; \\ \{ <var:u> = <var:F> \land <var:Y0> = <nat:6> \land <var:Y1> = <nat:3> * <var:F> \} \\ <var:y> := <var:Y1> ; \\ \{ <var:u> = <var:F> \land <var:Y0> = <nat:6> \land <var:y> = <nat:3> * <var:F> \} \\ <var:y> := <var:y> + <var:Y0> \\ \{ <var:u> = <var:F> \land <var:y> = <nat:3> * <var:F> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:u> = <var:F> }} <var:Y0> := <nat:6> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:u> ; <var:y> := <var:Y1> ; <var:y> := <var:y> + <var:Y0> {{ <var:y> = <nat:3> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:Y0> = <nat:6> /\ <var:Y1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:Y0> = <nat:6> /\ <var:y> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:y> = <nat:3> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 