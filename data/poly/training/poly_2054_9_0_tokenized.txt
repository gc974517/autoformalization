\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:m> ; <var:V2> := <nat:7> ; <var:V2> := <var:V2> * <var:m> ; <var:V2> := <var:V2> * <var:m> ; <var:g> := <var:V2> ; <var:g> := <var:g> + <var:V1> ; <var:g> := <var:g> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:m> = <var:y> $ ahead of running this code segment it must be that we see $ <var:g> = <nat:7> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:8> $ once code segment exits . \end{theorem} \begin{proof} The method of proof for our segment of code can be seen through usual Hoare logic . Taking another step toward the next line in our code segment , we see the environment update command yielding $ <nat:8> $ toward $ <var:V0>$ . This command moves the condition $ \{ <var:m> = <var:y> \} $ toward the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \} $ . This is given by the assignment scheme found in standard Hoare techniques . Advancing to the next step , we have the variable assignmet code defining $ <nat:4> $ toward $ <var:V1>$ . This line takes $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \} $ to $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \} $ . Paying attention to the upcoming bit of code in the set of instructions , we have the variable binding line assigning $ <var:V1> * <var:m> $ into $ <var:V1>$ . This statement transfers the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \} $ into the postcondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \} $ . Jumping to the following piece of code found in our segment of code , we have the variable binding command \verb | <var:V2> := <nat:7> ; | . This line moves the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \} $ toward the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \} $ . This is guaranteed by the assignment law in Hoare logic . Moving forward to the next step , we see the variable binding command \verb | <var:V2> := <var:V2> * <var:m> ; | . This code transfers the precondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \} $ as the postcondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \cdot <var:y> \} $ . Further , the binding statement yielding $ <var:V2> * <var:m> $ into $ <var:V2>$ . This transfers the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \cdot <var:y> \} $ to the postcondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . Taking another step toward the next statement found in our set of commands , the variable update command \verb | <var:g> := <var:V2> ; | . This takes the precondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:V2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ to $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:g> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . Stepping through , the environment update statement \verb | <var:g> := <var:g> + <var:V1> ; | . This transfers the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:V1> = <nat:4> \cdot <var:y> \land <var:g> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:g> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> \} $ . This is sound with the assignment scheme of typical Hoare logic . Considering the following command found in the segment of code , we see the environment update command \verb | <var:g> := <var:g> + <var:V0> | . This moves the condition $ \{ <var:m> = <var:y> \land <var:V0> = <nat:8> \land <var:g> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> \} $ into the condition $ \{ <var:m> = <var:y> \land <var:g> = <nat:7> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:m> ; <var:V2> := <nat:7> ; <var:V2> := <var:V2> * <var:m> ; <var:V2> := <var:V2> * <var:m> ; <var:g> := <var:V2> ; <var:g> := <var:g> + <var:V1> ; <var:g> := <var:g> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <def:poly> {{ <var:g> = <nat:7> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:y> /\ <var:V2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:y> /\ <var:V2> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:y> /\ <var:V2> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:4> * <var:y> /\ <var:g> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:V0> = <nat:8> /\ <var:g> = <nat:7> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:g> = <nat:7> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 