\begin{document} \begin{theorem} Define a program in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:p> ; <var:J2> := <nat:8> ; <var:J2> := <var:J2> * <var:p> ; <var:J2> := <var:J2> * <var:p> ; <var:E> := <var:J2> ; <var:E> := <var:E> + <var:J1> ; <var:E> := <var:E> + <var:J0> \end{verbatim} Assume that we have $ <var:p> = <var:C> $ before the evaluation of this program , then $ <var:E> = <nat:8> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:C> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \} \\ <var:J1> := <nat:5> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \} \\ <var:J1> := <var:J1> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \times <var:C> \} \end{eqnarray} Furthering the execution of our list of instructions yields : \begin{eqnarray} <var:J2> := <nat:8> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \times <var:C> \land <var:J2> = <nat:8> \} \\ <var:J2> := <var:J2> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \times <var:C> \land <var:J2> = <nat:8> \times <var:C> \} \\ <var:J2> := <var:J2> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \times <var:C> \land <var:J2> = <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:E> := <var:J2> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:J1> = <nat:5> \times <var:C> \land <var:E> = <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:J1> ; \\ \{ <var:p> = <var:C> \land <var:J0> = <nat:6> \land <var:E> = <nat:8> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> \} \\ <var:E> := <var:E> + <var:J0> \\ \{ <var:p> = <var:C> \land <var:E> = <nat:8> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:p> = <var:C> }} <var:J0> := <nat:6> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:p> ; <var:J2> := <nat:8> ; <var:J2> := <var:J2> * <var:p> ; <var:J2> := <var:J2> * <var:p> ; <var:E> := <var:J2> ; <var:E> := <var:E> + <var:J1> ; <var:E> := <var:E> + <var:J0> {{ <var:E> = <nat:8> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> * <var:C> /\ <var:J2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> * <var:C> /\ <var:J2> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> * <var:C> /\ <var:J2> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:J1> = <nat:5> * <var:C> /\ <var:E> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:J0> = <nat:6> /\ <var:E> = <nat:8> * <var:C> ^ <nat:2> + <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:E> = <nat:8> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 