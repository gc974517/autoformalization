\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:H> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:H> = <var:x> $ ( given some natural coefficients $ <var:x> $ ) ahead of the evaluation of the series of instructions it must be that $ <var:d> = <nat:4> \cdot <var:x> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands can be accomplished by typical Hoare reasoning . Moving on to the next bits of codefound in our code , we have \begin{eqnarray} \{ <var:H> = <var:x> \} \, <var:U1> := <var:H> \, \{ <var:H> = <var:x> \land <var:U1> = <var:x> \} \\ \{ <var:H> = <var:x> \land <var:U1> = <var:x> \} \, <var:U0> := <nat:5> \, \{ <var:H> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:5> \} \end{eqnarray} Advancing , \begin{eqnarray} \{ <var:H> = <var:x> \} \, <var:U1> := <var:H> \, \{ <var:H> = <var:x> \land <var:U1> = <var:x> \} \\ \{ <var:H> = <var:x> \land <var:U1> = <var:x> \} \, <var:U0> := <nat:5> \, \{ <var:H> = <var:x> \land <var:U1> = <var:x> \land <var:U0> = <nat:5> \} \end{eqnarray} Moving on to the upcoming bit of code found in the list of instructions , \begin{eqnarray} \{ <var:H> = <var:x> \} \, <var:U1> := <var:H> \, \{ <var:H> = <var:x> \land <var:U1> = <var:x> \} \end{eqnarray} This is deduced with the assignment law from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:H> ; <var:U0> := <nat:5> ; <var:U1> := <var:U1> * <nat:4> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <def:poly> {{ <var:d> = <nat:4> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:U1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:U1> = <var:x> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:U1> = <nat:4> * <var:x> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:U0> = <nat:5> /\ <var:d> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:d> = <nat:4> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 