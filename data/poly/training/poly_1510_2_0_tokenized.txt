\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:J0> := <nat:6> ; <var:I> := <var:J0> \end{verbatim} Assume it to hold that $ <var:S> = <var:h> $ , given every positive integers $ <var:h> $ , prior to evaluating our segment of code it holds that we see $ <var:I> = <nat:6> $ when code segment is done . \end{theorem} \begin{proof} The flow of logic for the code segment is demonstrated through standard Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:h> \} & <var:J0> := <nat:6> & \{ <var:S> = <var:h> \land <var:J0> = <nat:6> \} \end{tabular} This is rigorously given using the variable update rule defined by Hoare logic . Considering the subsequent line seen in our segment of code , \[ \begin{tabular} {rcl} \{ <var:S> = <var:h> \} & <var:J0> := <nat:6> & \{ <var:S> = <var:h> \land <var:J0> = <nat:6> \} \end{tabular} This is sound by the assignment rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:S> = <var:h> }} <var:J0> := <nat:6> ; <var:I> := <var:J0> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 