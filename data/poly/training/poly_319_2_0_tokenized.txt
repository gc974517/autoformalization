\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:3> ; <var:G> := <var:p0> \end{verbatim} Assume it to be that $ <var:T> = <var:S> $ ahead of running the series of commands , it follows that we see $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is accomplished using Hoare techniques . Moving onward , we see \verb | { <var:T> = <var:S> } <var:p0> := <nat:3> { <var:T> = <var:S> \land <var:p0> = <nat:3> } | and \verb | { <var:T> = <var:S> \land <var:p0> = <nat:3> } <var:G> := <var:p0{ <var:T> = <var:S> \land <var:G> = <nat:3> } | . This is shown to be logically sound using the binding scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:T> = <var:S> }} <var:p0> := <nat:3> ; <var:G> := <var:p0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 