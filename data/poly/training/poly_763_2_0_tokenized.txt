\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:X> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given ( given every natural coefficients $ <var:p> $ ) that $ <var:n> = <var:p> $ before the evaluation of the series of commands it holds that we have $ <var:X> = <nat:7> $ after series of commands exits . \end{theorem} \begin{proof} The method of proof for this series of instructions is given by the below decorated list of instructions . \begin{eqnarray} \{ <var:n> = <var:p> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:n> = <var:p> \land <var:e0> = <nat:7> \} \\ <var:X> := <var:e0> \\ \{ <var:n> = <var:p> \land <var:X> = <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:X> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:n> = <var:p> }} <def:poly> {{ <var:X> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:p> /\ <var:X> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 