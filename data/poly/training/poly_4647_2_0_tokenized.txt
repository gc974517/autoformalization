\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:6> ; <var:Y> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allowing --- taking natural coefficients $ <var:N> $ --- that $ <var:V> = <var:N> $ prior to executing the code segment it follows that $ <var:Y> = <nat:6> $ once series of instructions finishes . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:V> = <var:N> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:V> = <var:N> \land <var:M0> = <nat:6> \} \\ <var:Y> := <var:M0> \\ \{ <var:V> = <var:N> \land <var:Y> = <nat:6> \} \end{eqnarray} Therefore , our series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:Y> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:V> = <var:N> }} <def:poly> {{ <var:Y> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:Y> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 