\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:2> ; <var:A> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume , given all $ <var:Y> \in \mathbb{Z}^+ $ , it to be that $ <var:N> = <var:Y> $ prior to running our series of instructions , then we have $ <var:A> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be demonstrated using standard Hoare techniques . Advancing on , we see the binding statement yielding $ <nat:2> $ to $ <var:R0>$ . This takes the precondition $ \{ <var:N> = <var:Y> \} $ toward $ \{ <var:N> = <var:Y> \land <var:R0> = <nat:2> \} $ . This is sound by the assignment rule defined in Hoare reasoning . Looking at the subsequent step in the program , we see the code assigning $ <var:R0$ toward $ <var:A>$ . This command moves the condition $ \{ <var:N> = <var:Y> \land <var:R0> = <nat:2> \} $ into $ \{ <var:N> = <var:Y> \land <var:A> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:2> ; <var:A> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:N> = <var:Y> }} <def:poly> {{ <var:A> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:A> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 