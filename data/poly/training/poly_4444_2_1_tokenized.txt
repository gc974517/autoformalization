\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:3> ; <var:f> := <var:D0> \end{verbatim} Given , for $ <var:d> \in \mathbb{Z}^+ $ , that we have $ <var:Z> = <var:d> $ prior to evaluating our list of commands it holds that we see $ <var:f> = <nat:3> $ when set of instructions exits . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be demonstrated using standard Hoare logic . Moving forward to the proceeding pieces of code found in the segment of code , we have \begin{eqnarray} \{ <var:Z> = <var:d> \} \, <var:D0> := <nat:3> \, \{ <var:Z> = <var:d> \land <var:D0> = <nat:3> \} \\ \{ <var:Z> = <var:d> \land <var:D0> = <nat:3> \} \, <var:f> := <var:D0\, \{ <var:Z> = <var:d> \land <var:f> = <nat:3> \} \end{eqnarray} This is sound using the variable assignmet rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Z> = <var:d> }} <var:D0> := <nat:3> ; <var:f> := <var:D0> {{ <var:f> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:d> /\ <var:f> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 