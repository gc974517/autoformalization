\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:7> ; <var:n> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:T> = <var:t> $ --- assuming some $ <var:t> \in \mathbb{N} $ --- ahead of interpreting our list of commands , it must be that $ <var:n> = <nat:7> $ when list of commands is done executing . \end{theorem} \begin{proof} Observe that the below decorated code . \begin{eqnarray} \{ <var:T> = <var:t> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:T> = <var:t> \land <var:m0> = <nat:7> \} \\ <var:n> := <var:m0> \\ \{ <var:T> = <var:t> \land <var:n> = <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:7> ; <var:n> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:T> = <var:t> }} <def:poly> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:t> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 