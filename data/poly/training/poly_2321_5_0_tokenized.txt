\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:n> ; <var:v> := <var:D1> ; <var:v> := <var:v> + <var:D0> \end{verbatim} Allowing $ <var:n> = <var:m> $ ( taking positive numbers $ <var:m> $ ) ahead of executing this set of instructions then we see $ <var:v> = <nat:8> * <var:m> + <nat:2> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:n> = <var:m> \} \\ <var:D0> := <nat:2> ; \\ \{ <var:n> = <var:m> \land <var:D0> = <nat:2> \} \\ <var:D1> := <nat:8> ; \\ \{ <var:n> = <var:m> \land <var:D0> = <nat:2> \land <var:D1> = <nat:8> \} \\ <var:D1> := <var:D1> * <var:n> ; \\ \{ <var:n> = <var:m> \land <var:D0> = <nat:2> \land <var:D1> = <nat:8> \cdot <var:m> \} \\ <var:v> := <var:D1> ; \\ \{ <var:n> = <var:m> \land <var:D0> = <nat:2> \land <var:v> = <nat:8> \cdot <var:m> \} \\ <var:v> := <var:v> + <var:D0> \\ \{ <var:n> = <var:m> \land <var:v> = <nat:8> \cdot <var:m> + <nat:2> \} \end{eqnarray} Furthering running this series of commands gives us : \begin{eqnarray} \end{eqnarray} Thus , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:n> = <var:m> }} <var:D0> := <nat:2> ; <var:D1> := <nat:8> ; <var:D1> := <var:D1> * <var:n> ; <var:v> := <var:D1> ; <var:v> := <var:v> + <var:D0> {{ <var:v> = <nat:8> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:D0> = <nat:2> /\ <var:v> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:m> /\ <var:v> = <nat:8> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 