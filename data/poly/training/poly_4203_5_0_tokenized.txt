\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:b> ; <var:c> := <var:V1> ; <var:c> := <var:c> + <var:V0> \end{verbatim} Assume , assuming some whole numbers $ <var:x> $ , it to hold that $ <var:b> = <var:x> $ ahead of interpreting the code then $ <var:c> = <nat:4> \cdot <var:x> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the set of commands is done with standard Hoare reasoning . Moving on , we have \verb | { <var:b> = <var:x> } <var:V0> := <nat:3> { <var:b> = <var:x> \land <var:V0> = <nat:3> } | and \verb | { <var:b> = <var:x> \land <var:V0> = <nat:3> } <var:V1> := <nat:4> { <var:b> = <var:x> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> } | . This is known to be sound through the rule obtained from standard Hoare reasoning . Shifting focus toward the upcoming lines found in our list of instructions , we see \verb | { <var:b> = <var:x> } <var:V0> := <nat:3> { <var:b> = <var:x> \land <var:V0> = <nat:3> } | , \verb | { <var:b> = <var:x> \land <var:V0> = <nat:3> } <var:V1> := <nat:4> { <var:b> = <var:x> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> } | and \verb | { <var:b> = <var:x> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> } <var:V1> := <var:V1> * <var:b> { <var:b> = <var:x> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:x> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:b> = <var:x> }} <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:b> ; <var:c> := <var:V1> ; <var:c> := <var:c> + <var:V0> {{ <var:c> = <nat:4> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:V0> = <nat:3> /\ <var:c> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:c> = <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 