\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:4> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:p> ; <var:s> := <var:l1> ; <var:s> := <var:s> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Assuming that we have $ <var:p> = <var:o> $ prior to interpreting the set of instructions , it holds that $ <var:s> = <nat:2> * <var:o> + <nat:4> $ when series of instructions is done . \end{theorem} \begin{proof} The method of proof for the series of instructions is evident using typical Hoare logic . Honing in on the proceeding command seen in the list of instructions , we have the assignment line \verb | <var:l0> := <nat:4> ; | . This transfers the precondition $ \{ <var:p> = <var:o> \} $ toward the condition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \} $ . Further , we have the variable assignmet statement \verb | <var:l1> := <nat:2> ; | . This command redefines the precondition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \} $ as the postcondition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:l1> = <nat:2> \} $ . Observing the following command seen in the list of instructions , we see the variable update command giving $ <var:l1> * <var:p> $ as $ <var:l1>$ . This redefines the condition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:l1> = <nat:2> \} $ toward $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:l1> = <nat:2> * <var:o> \} $ . Now , we see the assignment command assigning $ <var:l1> $ to $ <var:s>$ . This moves the condition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:l1> = <nat:2> * <var:o> \} $ to $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:s> = <nat:2> * <var:o> \} $ . Moving forward to the subsequent line contained in our series of commands , the environment update statement \verb | <var:s> := <var:s> + <var:l0> | . This line moves the precondition $ \{ <var:p> = <var:o> \land <var:l0> = <nat:4> \land <var:s> = <nat:2> * <var:o> \} $ to the condition $ \{ <var:p> = <var:o> \land <var:s> = <nat:2> * <var:o> + <nat:4> \} $ . This is given through the assignment rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:p> ; <var:s> := <var:l1> ; <var:s> := <var:s> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:p> = <var:o> }} <def:poly> {{ <var:s> = <nat:2> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:l0> = <nat:4> /\ <var:s> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:s> = <nat:2> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 