\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:F> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Z> := <var:Q1> <var:Z> := <var:Z> + <var:Q0> \end{verbatim} Given --- letting $ <var:u> \in \mathbb{Z}^+ $ --- it to be that $ <var:F> = <var:u> $ prior to executing this set of instructions then we see $ <var:Z> = <nat:8> \cdot <var:u> + <nat:4> $ after code segment executes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is accomplished by standard Hoare reasoning . Looking at the proceeding lines found in our series of instructions , we have \begin{verbatim} { <var:F> = <var:u> } <var:Q1> := <var:F> { <var:F> = <var:u> \land <var:Q1> = <var:u> } { <var:F> = <var:u> \land <var:Q1> = <var:u> } <var:Q0> := <nat:4> { <var:F> = <var:u> \land <var:Q1> = <var:u> \land <var:Q0> = <nat:4> } { <var:F> = <var:u> \land <var:Q1> = <var:u> \land <var:Q0> = <nat:4> } <var:Q1> := <var:Q1> * <nat:8> { <var:F> = <var:u> \land <var:Q1> = <nat:8> * <var:u> \land <var:Q0> = <nat:4> } { <var:F> = <var:u> \land <var:Q1> = <nat:8> * <var:u> \land <var:Q0> = <nat:4> } <var:Z> := <var:Q1{ <var:F> = <var:u> \land <var:Q0> = <nat:4> \land <var:Z> = <nat:8> * <var:u> } { <var:F> = <var:u> \land <var:Q0> = <nat:4> \land <var:Z> = <nat:8> * <var:u> } <var:Z> := <var:Z> + <var:Q0{ <var:F> = <var:u> \land <var:Z> = <nat:8> * <var:u> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:F> = <var:u> }} <var:Q1> := <var:F> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:Z> := <var:Q1> <var:Z> := <var:Z> + <var:Q0> {{ <var:Z> = <nat:8> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:Q1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:Q1> = <nat:8> * <var:u> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:Q0> = <nat:4> /\ <var:Z> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:Z> = <nat:8> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 