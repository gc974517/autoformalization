\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:n0> := <nat:2> ; <var:F> := <var:n0> \end{verbatim} Assume --- for any integers $ <var:e> $ --- that $ <var:M> = <var:e> $ before the execution of our set of commands , it follows that we have $ <var:F> = <nat:2> $ when code segment exits . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be accomplished through standard Hoare reasoning . Taking another step toward the upcoming bit of code seen in the list of instructions , the environment update line yielding $ <nat:2> $ toward $ <var:n0>$ . This transfers the precondition $ \{ <var:M> = <var:e> \} $ into the condition $ \{ <var:M> = <var:e> \land <var:n0> = <nat:2> \} $ . This is known to be sound with the assignment law defined in typical Hoare techniques . Paying attention to the following line in the code segment , the variable update code \verb | <var:F> := <var:n0> | . This line redefines $ \{ <var:M> = <var:e> \land <var:n0> = <nat:2> \} $ toward the condition $ \{ <var:M> = <var:e> \land <var:F> = <nat:2> \} $ . This is shown using the assignment law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:M> = <var:e> }} <var:n0> := <nat:2> ; <var:F> := <var:n0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:e> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:e> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 