\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:1> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:J> ; <var:P> := <var:u1> ; <var:P> := <var:P> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:J> = <var:U> $ for whole numbers $ <var:U> $ ahead of executing the list of commands it follows that we see $ <var:P> = <nat:2> * <var:U> + <nat:1> $ after list of commands finishes . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:J> = <var:U> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:J> = <var:U> \land <var:u0> = <nat:1> \} \\ <var:u1> := <nat:2> ; \\ \{ <var:J> = <var:U> \land <var:u0> = <nat:1> \land <var:u1> = <nat:2> \} \\ <var:u1> := <var:u1> * <var:J> ; \\ \{ <var:J> = <var:U> \land <var:u0> = <nat:1> \land <var:u1> = <nat:2> \times <var:U> \} \\ <var:P> := <var:u1> ; \\ \{ <var:J> = <var:U> \land <var:u0> = <nat:1> \land <var:P> = <nat:2> \times <var:U> \} \\ <var:P> := <var:P> + <var:u0> \\ \{ <var:J> = <var:U> \land <var:P> = <nat:2> \times <var:U> + <nat:1> \} \end{eqnarray} As a consequence , this code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:u1> := <nat:2> ; <var:u1> := <var:u1> * <var:J> ; <var:P> := <var:u1> ; <var:P> := <var:P> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:J> = <var:U> }} <def:poly> {{ <var:P> = <nat:2> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:u0> = <nat:1> /\ <var:u1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:u0> = <nat:1> /\ <var:P> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:U> /\ <var:P> = <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 