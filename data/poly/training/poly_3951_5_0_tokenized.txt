\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:Q> ; <var:M> := <var:S1> ; <var:M> := <var:M> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:Q> = <var:l> $ prior to the evaluation of our program it must be that we see $ <var:M> = <nat:1> * <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Notice the below decorated series of instructions . \begin{eqnarray} \{ <var:Q> = <var:l> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:Q> = <var:l> \land <var:S0> = <nat:8> \} \\ <var:S1> := <nat:1> ; \\ \{ <var:Q> = <var:l> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \} \\ <var:S1> := <var:S1> * <var:Q> ; \\ \{ <var:Q> = <var:l> \land <var:S0> = <nat:8> \land <var:S1> = <nat:1> \cdot <var:l> \} \end{eqnarray} Continuing running the code produces : \begin{eqnarray} <var:M> := <var:S1> ; \\ \{ <var:Q> = <var:l> \land <var:S0> = <nat:8> \land <var:M> = <nat:1> \cdot <var:l> \} \end{eqnarray} Allowing interpreting our series of commands results in : \begin{eqnarray} <var:M> := <var:M> + <var:S0> \\ \{ <var:Q> = <var:l> \land <var:M> = <nat:1> \cdot <var:l> + <nat:8> \} \end{eqnarray} The application of typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:Q> ; <var:M> := <var:S1> ; <var:M> := <var:M> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Q> = <var:l> }} <def:poly> {{ <var:M> = <nat:1> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:S0> = <nat:8> /\ <var:M> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:M> = <nat:1> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 