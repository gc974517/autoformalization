\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r3> := <var:r2> * <var:F> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:6> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:6> ; <var:N> := <var:r3> <var:N> := <var:N> + <var:r2> <var:N> := <var:N> + <var:r1> <var:N> := <var:N> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume ( taking natural coefficients $ <var:a> $ ) it to be that $ <var:F> = <var:a> $ ahead of interpreting the list of instructions , then $ <var:N> = <nat:6> \times <var:a> ^ <nat:3> + <nat:9> \times <var:a> ^ <nat:2> + <nat:6> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:a> \} \\ <var:r1> := <var:F> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <var:a> \} \\ <var:r2> := <var:r1> * <var:F> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:F> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r1> := <var:r1> * <nat:6> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <nat:6> \cdot <var:a> \land <var:r2> = <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r2> := <var:r2> * <nat:9> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <nat:6> \cdot <var:a> \land <var:r2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:r3> = <var:a> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:r3> := <var:r3> * <nat:6> ; \\ \{ <var:F> = <var:a> \land <var:r1> = <nat:6> \cdot <var:a> \land <var:r2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:r3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:r0> = <nat:3> \} \\ <var:N> := <var:r3> \\ \{ <var:F> = <var:a> \land <var:r1> = <nat:6> \cdot <var:a> \land <var:r2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:r0> = <nat:3> \land <var:N> = <nat:6> \cdot <var:a> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:r2> \\ \{ <var:F> = <var:a> \land <var:r1> = <nat:6> \cdot <var:a> \land <var:r0> = <nat:3> \land <var:N> = <nat:6> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:r1> \\ \{ <var:F> = <var:a> \land <var:r0> = <nat:3> \land <var:N> = <nat:6> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> \} \\ <var:N> := <var:N> + <var:r0> \\ \{ <var:F> = <var:a> \land <var:N> = <nat:6> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:6> \cdot <var:a> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r3> := <var:r2> * <var:F> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:6> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:6> ; <var:N> := <var:r3> <var:N> := <var:N> + <var:r2> <var:N> := <var:N> + <var:r1> <var:N> := <var:N> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:F> = <var:a> }} <def:poly> {{ <var:N> = <nat:6> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <nat:6> * <var:a> /\ <var:r2> = <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <nat:6> * <var:a> /\ <var:r2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:r3> = <var:a> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <nat:6> * <var:a> /\ <var:r2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <nat:6> * <var:a> /\ <var:r2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:N> = <nat:6> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r1> = <nat:6> * <var:a> /\ <var:r0> = <nat:3> /\ <var:N> = <nat:6> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:r0> = <nat:3> /\ <var:N> = <nat:6> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:N> = <nat:6> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 