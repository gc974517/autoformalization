\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:k> ; <var:H2> := <var:H1> * <var:k> ; <var:H3> := <var:H2> * <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:4> ; <var:T> := <var:H3> <var:T> := <var:T> + <var:H2> <var:T> := <var:T> + <var:H1> <var:T> := <var:T> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:k> = <var:c> $ before the evaluation of the segment of code , it follows that we see $ <var:T> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:5> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:6> $ once set of instructions executes . \end{theorem} \begin{proof} Proving correctness for the code segment can be seen with usual Hoare techniques . Honing in on the subsequent statements contained in the set of commands , \[ \begin{tabular} {rcl} \{ <var:k> = <var:c> \} & <var:H1> := <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} & <var:H2> := <var:H1> * <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} & <var:H3> := <var:H2> * <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \} & <var:H0> := <nat:6> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \land <var:H0> = <nat:6> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \land <var:H0> = <nat:6> \} & <var:H1> := <var:H1> * <nat:3> & \{ <var:k> = <var:c> \land <var:H1> = <nat:3> \times <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \land <var:H0> = <nat:6> \} \end{tabular} This is shown with the assignment inference rule given by Hoare techniques . After , \[ \begin{tabular} {rcl} \{ <var:k> = <var:c> \} & <var:H1> := <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} & <var:H2> := <var:H1> * <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} \end{tabular} This is deduced with the variable binding inference rule given in usual Hoare reasoning . Taking a look at the subsequent statements found in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:k> = <var:c> \} & <var:H1> := <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} & <var:H2> := <var:H1> * <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} \\ \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} & <var:H3> := <var:H2> * <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H3> = <var:c> ^ <nat:3> \} \end{tabular} Moving on to the next line of code found in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:c> \} & <var:H1> := <var:k> & \{ <var:k> = <var:c> \land <var:H1> = <var:c> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:k> ; <var:H2> := <var:H1> * <var:k> ; <var:H3> := <var:H2> * <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:4> ; <var:T> := <var:H3> <var:T> := <var:T> + <var:H2> <var:T> := <var:T> + <var:H1> <var:T> := <var:T> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:k> = <var:c> }} <def:poly> {{ <var:T> = <nat:4> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <var:c> /\ <var:H2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <var:c> /\ <var:H2> = <var:c> ^ <nat:2> /\ <var:H3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <var:c> /\ <var:H2> = <var:c> ^ <nat:2> /\ <var:H3> = <var:c> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <nat:3> * <var:c> /\ <var:H2> = <var:c> ^ <nat:2> /\ <var:H3> = <var:c> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <nat:3> * <var:c> /\ <var:H2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:H3> = <var:c> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <nat:3> * <var:c> /\ <var:H2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:c> ^ <nat:3> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <nat:3> * <var:c> /\ <var:H2> = <nat:5> * <var:c> ^ <nat:2> /\ <var:H0> = <nat:6> /\ <var:T> = <nat:4> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H1> = <nat:3> * <var:c> /\ <var:H0> = <nat:6> /\ <var:T> = <nat:4> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:H0> = <nat:6> /\ <var:T> = <nat:4> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:c> /\ <var:T> = <nat:4> * <var:c> ^ <nat:3> + <nat:5> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 