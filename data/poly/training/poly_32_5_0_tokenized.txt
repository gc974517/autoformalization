\begin{document} \begin{theorem} Take a set of commands : \begin{verbatim} <var:j0> := <nat:1> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:W> ; <var:d> := <var:j1> ; <var:d> := <var:d> + <var:j0> \end{verbatim} Assuming that we have $ <var:W> = <var:t> $ , given any natural numbers $ <var:t> $ , prior to the evaluation of the segment of code it must be that we see $ <var:d> = <nat:6> \cdot <var:t> + <nat:1> $ once series of instructions exits . \end{theorem} \begin{proof} Observe that this decorated set of instructions . \begin{eqnarray} \{ <var:W> = <var:t> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:W> = <var:t> \land <var:j0> = <nat:1> \} \\ <var:j1> := <nat:6> ; \\ \{ <var:W> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:6> \} \\ <var:j1> := <var:j1> * <var:W> ; \\ \{ <var:W> = <var:t> \land <var:j0> = <nat:1> \land <var:j1> = <nat:6> \times <var:t> \} \\ <var:d> := <var:j1> ; \\ \{ <var:W> = <var:t> \land <var:j0> = <nat:1> \land <var:d> = <nat:6> \times <var:t> \} \\ <var:d> := <var:d> + <var:j0> \\ \{ <var:W> = <var:t> \land <var:d> = <nat:6> \times <var:t> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:W> = <var:t> }} <var:j0> := <nat:1> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:W> ; <var:d> := <var:j1> ; <var:d> := <var:d> + <var:j0> {{ <var:d> = <nat:6> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:j0> = <nat:1> /\ <var:j1> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:t> /\ <var:d> = <nat:6> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 