\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:Q> := <var:c0> \end{verbatim} Given for $ <var:P> $ it to be that $ <var:K> = <var:P> $ prior to interpreting the series of commands , it follows that $ <var:Q> = <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare logic yields : \begin{eqnarray} \{ <var:K> = <var:P> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:K> = <var:P> \land <var:c0> = <nat:4> \} \\ <var:Q> := <var:c0> \\ \{ <var:K> = <var:P> \land <var:Q> = <nat:4> \} \end{eqnarray} Allowing interpreting the code segment returns : \begin{eqnarray} \end{eqnarray} Thusly , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:K> = <var:P> }} <var:c0> := <nat:4> ; <var:Q> := <var:c0> {{ <var:Q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:Q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 