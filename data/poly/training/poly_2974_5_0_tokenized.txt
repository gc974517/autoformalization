\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:5> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:f> ; <var:y> := <var:W1> ; <var:y> := <var:y> + <var:W0> \end{verbatim} Given that we have $ <var:f> = <var:Y> $ --- taking natural numbers $ <var:Y> $ --- ahead of executing our code it must be that $ <var:y> = <nat:6> * <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives : \begin{eqnarray} \{ <var:f> = <var:Y> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:f> = <var:Y> \land <var:W0> = <nat:5> \} \\ <var:W1> := <nat:6> ; \\ \{ <var:f> = <var:Y> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \} \\ <var:W1> := <var:W1> * <var:f> ; \\ \{ <var:f> = <var:Y> \land <var:W0> = <nat:5> \land <var:W1> = <nat:6> \cdot <var:Y> \} \\ <var:y> := <var:W1> ; \\ \{ <var:f> = <var:Y> \land <var:W0> = <nat:5> \land <var:y> = <nat:6> \cdot <var:Y> \} \\ <var:y> := <var:y> + <var:W0> \\ \{ <var:f> = <var:Y> \land <var:y> = <nat:6> \cdot <var:Y> + <nat:5> \} \end{eqnarray} Considering the above , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:f> = <var:Y> }} <var:W0> := <nat:5> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:f> ; <var:y> := <var:W1> ; <var:y> := <var:y> + <var:W0> {{ <var:y> = <nat:6> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:W0> = <nat:5> /\ <var:W1> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:W0> = <nat:5> /\ <var:y> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:y> = <nat:6> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 