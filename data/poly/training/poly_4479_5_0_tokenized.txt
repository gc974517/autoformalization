\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:7> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:L> ; <var:N> := <var:q1> ; <var:N> := <var:N> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:L> = <var:O> $ prior to interpreting our code segment then $ <var:N> = <nat:9> \cdot <var:O> + <nat:7> $ once code has exited . \end{theorem} \begin{proof} The proof of our list of commands can be accomplished using standard Hoare techniques . Following , the variable update line \verb | <var:q0> := <nat:7> ; | . This moves the condition $ \{ <var:L> = <var:O> \} $ into the condition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \} $ . Next , the variable update statement yielding $ <nat:9> $ toward $ <var:q1>$ . This line moves the precondition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \} $ to the condition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \} $ . Paying attention to the following statement seen in the series of commands , the assignment command letting $ <var:q1> * <var:L> $ as $ <var:q1>$ . This statement redefines $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \} $ into the postcondition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:O> \} $ . Advancing to the next step , the variable update line letting $ <var:q1> $ toward $ <var:N>$ . This takes the condition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:q1> = <nat:9> \cdot <var:O> \} $ as the postcondition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:O> \} $ . This is guaranteed with the assignment rule given by standard Hoare reasoning . Moving on to the subsequent piece of code seen in the code , we see the variable update command \verb | <var:N> := <var:N> + <var:q0> | . This statement takes the precondition $ \{ <var:L> = <var:O> \land <var:q0> = <nat:7> \land <var:N> = <nat:9> \cdot <var:O> \} $ into the postcondition $ \{ <var:L> = <var:O> \land <var:N> = <nat:9> \cdot <var:O> + <nat:7> \} $ . This is guaranteed with the assignment law from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:7> ; <var:q1> := <nat:9> ; <var:q1> := <var:q1> * <var:L> ; <var:N> := <var:q1> ; <var:N> := <var:N> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:L> = <var:O> }} <def:poly> {{ <var:N> = <nat:9> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:q0> = <nat:7> /\ <var:q1> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:q0> = <nat:7> /\ <var:N> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:O> /\ <var:N> = <nat:9> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 