\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:8> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:f> ; <var:U> := <var:p1> ; <var:U> := <var:U> + <var:p0> \end{verbatim} Assuming $ <var:f> = <var:x> $ ahead of the execution of our series of instructions , then we see $ <var:U> = <nat:5> \times <var:x> + <nat:8> $ once series of commands finishes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:f> = <var:x> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:f> = <var:x> \land <var:p0> = <nat:8> \} \\ <var:p1> := <nat:5> ; \\ \{ <var:f> = <var:x> \land <var:p0> = <nat:8> \land <var:p1> = <nat:5> \} \\ <var:p1> := <var:p1> * <var:f> ; \\ \{ <var:f> = <var:x> \land <var:p0> = <nat:8> \land <var:p1> = <nat:5> \cdot <var:x> \} \\ <var:U> := <var:p1> ; \\ \{ <var:f> = <var:x> \land <var:p0> = <nat:8> \land <var:U> = <nat:5> \cdot <var:x> \} \\ <var:U> := <var:U> + <var:p0> \\ \{ <var:f> = <var:x> \land <var:U> = <nat:5> \cdot <var:x> + <nat:8> \} \end{eqnarray} Hence , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:f> = <var:x> }} <var:p0> := <nat:8> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:f> ; <var:U> := <var:p1> ; <var:U> := <var:U> + <var:p0> {{ <var:U> = <nat:5> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:p0> = <nat:8> /\ <var:U> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:U> = <nat:5> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 