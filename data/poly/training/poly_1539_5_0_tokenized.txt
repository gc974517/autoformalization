\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:1> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:B> ; <var:g> := <var:X1> ; <var:g> := <var:g> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:B> = <var:n> $ before the evaluation of the list of commands , it holds that $ <var:g> = <nat:2> * <var:n> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:B> = <var:n> \} \\ <var:X0> := <nat:1> ; \\ \{ <var:B> = <var:n> \land <var:X0> = <nat:1> \} \\ <var:X1> := <nat:2> ; \\ \{ <var:B> = <var:n> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \} \\ <var:X1> := <var:X1> * <var:B> ; \\ \{ <var:B> = <var:n> \land <var:X0> = <nat:1> \land <var:X1> = <nat:2> \times <var:n> \} \\ <var:g> := <var:X1> ; \\ \{ <var:B> = <var:n> \land <var:X0> = <nat:1> \land <var:g> = <nat:2> \times <var:n> \} \\ <var:g> := <var:g> + <var:X0> \\ \{ <var:B> = <var:n> \land <var:g> = <nat:2> \times <var:n> + <nat:1> \} \end{eqnarray} Considering the above , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:X1> := <nat:2> ; <var:X1> := <var:X1> * <var:B> ; <var:g> := <var:X1> ; <var:g> := <var:g> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:B> = <var:n> }} <def:poly> {{ <var:g> = <nat:2> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:X0> = <nat:1> /\ <var:X1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:X0> = <nat:1> /\ <var:g> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:n> /\ <var:g> = <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 