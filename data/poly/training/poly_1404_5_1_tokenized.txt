\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:H1> := <var:Y> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:i> := <var:H1> <var:i> := <var:i> + <var:H0> \end{verbatim} Given that $ <var:Y> = <var:a> $ given some natural coefficients $ <var:a> $ before the evaluation of this series of instructions then $ <var:i> = <nat:3> \times <var:a> + <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:Y> = <var:a> \} \\ <var:H1> := <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:H1> = <var:a> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:Y> = <var:a> \land <var:H1> = <var:a> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:3> ; \\ \{ <var:Y> = <var:a> \land <var:H1> = <nat:3> \times <var:a> \land <var:H0> = <nat:6> \} \\ <var:i> := <var:H1> \\ \{ <var:Y> = <var:a> \land <var:H0> = <nat:6> \land <var:i> = <nat:3> \times <var:a> \} \\ <var:i> := <var:i> + <var:H0> \\ \{ <var:Y> = <var:a> \land <var:i> = <nat:3> \times <var:a> + <nat:6> \} \end{eqnarray} Given the preceding argument , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Y> = <var:a> }} <var:H1> := <var:Y> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:i> := <var:H1> <var:i> := <var:i> + <var:H0> {{ <var:i> = <nat:3> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:H1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:H1> = <var:a> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:H1> = <nat:3> * <var:a> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:H0> = <nat:6> /\ <var:i> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:i> = <nat:3> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 