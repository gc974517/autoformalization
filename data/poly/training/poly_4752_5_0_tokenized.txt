\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:2> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:Z> ; <var:P> := <var:p1> ; <var:P> := <var:P> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Z> = <var:U> $ prior to the evaluation of the list of instructions then $ <var:P> = <nat:5> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:Z> = <var:U> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:Z> = <var:U> \land <var:p0> = <nat:2> \} \\ <var:p1> := <nat:5> ; \\ \{ <var:Z> = <var:U> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \} \\ <var:p1> := <var:p1> * <var:Z> ; \\ \{ <var:Z> = <var:U> \land <var:p0> = <nat:2> \land <var:p1> = <nat:5> \cdot <var:U> \} \\ <var:P> := <var:p1> ; \\ \{ <var:Z> = <var:U> \land <var:p0> = <nat:2> \land <var:P> = <nat:5> \cdot <var:U> \} \\ <var:P> := <var:P> + <var:p0> \\ \{ <var:Z> = <var:U> \land <var:P> = <nat:5> \cdot <var:U> + <nat:2> \} \end{eqnarray} As a consequence , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:Z> ; <var:P> := <var:p1> ; <var:P> := <var:P> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Z> = <var:U> }} <def:poly> {{ <var:P> = <nat:5> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:p0> = <nat:2> /\ <var:P> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:P> = <nat:5> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 