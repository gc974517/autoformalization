\begin{document} \begin{theorem} Consider the following code in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:5> ; <var:g1> := <var:g1> * <var:V> ; <var:l> := <var:g1> ; <var:l> := <var:l> + <var:g0> \end{verbatim} Allowing ( given positive coefficients $ <var:h> $ ) it to be that $ <var:V> = <var:h> $ prior to the evaluation of this code segment , it must be that we see $ <var:l> = <nat:5> * <var:h> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:V> = <var:h> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:5> ; \\ \{ <var:V> = <var:h> \land <var:g0> = <nat:8> \land <var:g1> = <nat:5> \} \\ <var:g1> := <var:g1> * <var:V> ; \\ \{ <var:V> = <var:h> \land <var:g0> = <nat:8> \land <var:g1> = <nat:5> * <var:h> \} \\ <var:l> := <var:g1> ; \\ \{ <var:V> = <var:h> \land <var:g0> = <nat:8> \land <var:l> = <nat:5> * <var:h> \} \\ <var:l> := <var:l> + <var:g0> \\ \{ <var:V> = <var:h> \land <var:l> = <nat:5> * <var:h> + <nat:8> \} \end{eqnarray} Using standard Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <var:g0> := <nat:8> ; <var:g1> := <nat:5> ; <var:g1> := <var:g1> * <var:V> ; <var:l> := <var:g1> ; <var:l> := <var:l> + <var:g0> {{ <var:l> = <nat:5> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:g0> = <nat:8> /\ <var:l> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:l> = <nat:5> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 