\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:5> ; <var:C> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing assuming some whole numbers $ <var:Z> $ it to be that $ <var:P> = <var:Z> $ ahead of the evaluation of our set of commands it follows that we see $ <var:C> = <nat:5> $ after series of instructions finishes . \end{theorem} \begin{proof} Proving correctness for our set of commands is given with Hoare logic . Advancing on , we see the environment update code giving $ <nat:5> $ to $ <var:f0>$ . This moves $ \{ <var:P> = <var:Z> \} $ to the postcondition $ \{ <var:P> = <var:Z> \land <var:f0> = <nat:5> \} $ . This is guaranteed using the assignment inference rule in Hoare reasoning . Next , we have the variable update statement \verb | <var:C> := <var:f0> | . This forwards the precondition $ \{ <var:P> = <var:Z> \land <var:f0> = <nat:5> \} $ into $ \{ <var:P> = <var:Z> \land <var:C> = <nat:5> \} $ . This is deduced through the assignment rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:5> ; <var:C> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:P> = <var:Z> }} <def:poly> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 