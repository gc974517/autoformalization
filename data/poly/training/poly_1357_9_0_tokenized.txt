\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:z> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:z> ; <var:H2> := <var:H2> * <var:z> ; <var:I> := <var:H2> ; <var:I> := <var:I> + <var:H1> ; <var:I> := <var:I> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:z> = <var:u> $ prior to the evaluation of the list of commands it holds that $ <var:I> = <nat:9> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:7> $ when list of commands has terminated . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:z> = <var:u> \} \\ <var:H0> := <nat:7> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \} \\ <var:H1> := <nat:1> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> \} \\ <var:H1> := <var:H1> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:u> \} \\ <var:H2> := <nat:9> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:u> \land <var:H2> = <nat:9> \} \\ <var:H2> := <var:H2> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:u> \land <var:H2> = <nat:9> * <var:u> \} \\ <var:H2> := <var:H2> * <var:z> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:u> \land <var:H2> = <nat:9> * <var:u> ^ <nat:2> \} \\ <var:I> := <var:H2> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:u> \land <var:I> = <nat:9> * <var:u> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:H1> ; \\ \{ <var:z> = <var:u> \land <var:H0> = <nat:7> \land <var:I> = <nat:9> * <var:u> ^ <nat:2> + <nat:1> * <var:u> \} \\ <var:I> := <var:I> + <var:H0> \\ \{ <var:z> = <var:u> \land <var:I> = <nat:9> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:7> \} \end{eqnarray} Considering the above , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:7> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:z> ; <var:H2> := <nat:9> ; <var:H2> := <var:H2> * <var:z> ; <var:H2> := <var:H2> * <var:z> ; <var:I> := <var:H2> ; <var:I> := <var:I> + <var:H1> ; <var:I> := <var:I> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <def:poly> {{ <var:I> = <nat:9> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:u> /\ <var:H2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:u> /\ <var:H2> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:u> /\ <var:I> = <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:H0> = <nat:7> /\ <var:I> = <nat:9> * <var:u> ^ <nat:2> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:I> = <nat:9> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 