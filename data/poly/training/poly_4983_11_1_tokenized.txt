\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n3> := <var:n2> * <var:l> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:7> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:2> ; <var:r> := <var:n3> <var:r> := <var:r> + <var:n2> <var:r> := <var:r> + <var:n1> <var:r> := <var:r> + <var:n0> \end{verbatim} Given with some whole numbers $ <var:k> $ it to hold that $ <var:l> = <var:k> $ ahead of interpreting this program , it must be that we have $ <var:r> = <nat:2> \times <var:k> ^ <nat:3> + <nat:6> \times <var:k> ^ <nat:2> + <nat:7> \times <var:k> + <nat:7> $ when segment of code is done executing . \end{theorem} \begin{proof} The argument for the set of instructions can be accomplished through the following decorated segment of code . \begin{eqnarray} \{ <var:l> = <var:k> \} \\ <var:n1> := <var:l> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <var:k> \} \\ <var:n2> := <var:n1> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:7> \} \\ <var:n1> := <var:n1> * <nat:7> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <nat:7> * <var:k> \land <var:n2> = <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:7> \} \\ <var:n2> := <var:n2> * <nat:6> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <nat:7> * <var:k> \land <var:n2> = <nat:6> * <var:k> ^ <nat:2> \land <var:n3> = <var:k> ^ <nat:3> \land <var:n0> = <nat:7> \} \\ <var:n3> := <var:n3> * <nat:2> ; \\ \{ <var:l> = <var:k> \land <var:n1> = <nat:7> * <var:k> \land <var:n2> = <nat:6> * <var:k> ^ <nat:2> \land <var:n3> = <nat:2> * <var:k> ^ <nat:3> \land <var:n0> = <nat:7> \} \\ <var:r> := <var:n3> \\ \{ <var:l> = <var:k> \land <var:n1> = <nat:7> * <var:k> \land <var:n2> = <nat:6> * <var:k> ^ <nat:2> \land <var:n0> = <nat:7> \land <var:r> = <nat:2> * <var:k> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:n2> \\ \{ <var:l> = <var:k> \land <var:n1> = <nat:7> * <var:k> \land <var:n0> = <nat:7> \land <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:n1> \\ \{ <var:l> = <var:k> \land <var:n0> = <nat:7> \land <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:7> * <var:k> \} \\ <var:r> := <var:r> + <var:n0> \\ \{ <var:l> = <var:k> \land <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:7> \} \end{eqnarray} The application of typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:l> = <var:k> }} <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n3> := <var:n2> * <var:l> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:7> ; <var:n2> := <var:n2> * <nat:6> ; <var:n3> := <var:n3> * <nat:2> ; <var:r> := <var:n3> <var:r> := <var:r> + <var:n2> <var:r> := <var:r> + <var:n1> <var:r> := <var:r> + <var:n0> {{ <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <nat:7> * <var:k> /\ <var:n2> = <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <nat:7> * <var:k> /\ <var:n2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:n3> = <var:k> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <nat:7> * <var:k> /\ <var:n2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:n3> = <nat:2> * <var:k> ^ <nat:3> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <nat:7> * <var:k> /\ <var:n2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:n0> = <nat:7> /\ <var:r> = <nat:2> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n1> = <nat:7> * <var:k> /\ <var:n0> = <nat:7> /\ <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:n0> = <nat:7> /\ <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:r> = <nat:2> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 