\begin{document} \begin{theorem} Consider a code in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:2> ; <var:d> := <var:c0> \end{verbatim} Allowing given all natural coefficients $ <var:j> $ it to be that $ <var:H> = <var:j> $ before executing the list of instructions it follows that we see $ <var:d> = <nat:2> $ once code has finished . \end{theorem} \begin{proof} Proving correctness for the program is clear through typical Hoare reasoning . Moving onward , the variable binding statement letting $ <nat:2> $ as $ <var:c0>$ . This advances the precondition $ \{ <var:H> = <var:j> \} $ to the postcondition $ \{ <var:H> = <var:j> \land <var:c0> = <nat:2> \} $ . Jumping to the upcoming line of code found in our series of commands , we see the statement \verb | <var:d> := <var:c0> | . This redefines the precondition $ \{ <var:H> = <var:j> \land <var:c0> = <nat:2> \} $ to the condition $ \{ <var:H> = <var:j> \land <var:d> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:H> = <var:j> }} <var:c0> := <nat:2> ; <var:d> := <var:c0> {{ <var:d> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:d> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 