\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:Z> ; <var:U2> := <var:U1> * <var:Z> ; <var:U3> := <var:U2> * <var:Z> ; <var:U0> := <nat:3> ; <var:U3> := <var:U3> * <nat:2> ; <var:I> := <var:U3> <var:I> := <var:I> + <var:U0> \end{verbatim} Assume --- for all whole numbers $ <var:o> $ --- that $ <var:Z> = <var:o> $ prior to the execution of the set of instructions , then we see $ <var:I> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> $ when set of instructions has exited . \end{theorem} \begin{proof} Using Hoare logic yields : \begin{eqnarray} \{ <var:Z> = <var:o> \} \\ <var:U1> := <var:Z> ; \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \} \\ <var:U2> := <var:U1> * <var:Z> ; \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \land <var:U2> = <var:o> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:Z> ; \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \land <var:U2> = <var:o> ^ <nat:2> \land <var:U3> = <var:o> ^ <nat:3> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \land <var:U2> = <var:o> ^ <nat:2> \land <var:U3> = <var:o> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:U3> := <var:U3> * <nat:2> ; \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \land <var:U2> = <var:o> ^ <nat:2> \land <var:U3> = <nat:2> * <var:o> ^ <nat:3> \land <var:U0> = <nat:3> \} \\ <var:I> := <var:U3> \\ \{ <var:Z> = <var:o> \land <var:U1> = <var:o> \land <var:U2> = <var:o> ^ <nat:2> \land <var:U0> = <nat:3> \land <var:I> = <nat:2> * <var:o> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:U0> \\ \{ <var:Z> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> \} \end{eqnarray} Thusly , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Z> = <var:o> }} <var:U1> := <var:Z> ; <var:U2> := <var:U1> * <var:Z> ; <var:U3> := <var:U2> * <var:Z> ; <var:U0> := <nat:3> ; <var:U3> := <var:U3> * <nat:2> ; <var:I> := <var:U3> <var:I> := <var:I> + <var:U0> {{ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> /\ <var:U2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> /\ <var:U2> = <var:o> ^ <nat:2> /\ <var:U3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> /\ <var:U2> = <var:o> ^ <nat:2> /\ <var:U3> = <var:o> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> /\ <var:U2> = <var:o> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:U1> = <var:o> /\ <var:U2> = <var:o> ^ <nat:2> /\ <var:U0> = <nat:3> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 