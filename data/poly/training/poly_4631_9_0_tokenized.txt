\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:M> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:M> ; <var:g2> := <var:g2> * <var:M> ; <var:X> := <var:g2> ; <var:X> := <var:X> + <var:g1> ; <var:X> := <var:X> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allowing it to be that $ <var:M> = <var:N> $ prior to running this code , then we see $ <var:X> = <nat:5> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:7> $ after code executes . \end{theorem} \begin{proof} The argument for our code is done with typical Hoare techniques . Moving onward , we have the variable binding code \verb | <var:g0> := <nat:7> ; | . This advances $ \{ <var:M> = <var:N> \} $ toward the condition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \} $ . This is rigorously given by the assignment rule obtained from typical Hoare logic . Moving on to the subsequent line found in the series of commands , we have the variable binding statement yielding $ <nat:3> $ into $ <var:g1>$ . This moves the precondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \} $ into the condition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \} $ . Further , we have the variable binding code defining $ <var:g1> * <var:M> $ to $ <var:g1>$ . This takes the condition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \} $ as $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \} $ . This is guaranteed with the assignment scheme in usual Hoare reasoning . Jumping to the following line seen in the set of commands , we see the command assigning $ <nat:5> $ into $ <var:g2>$ . This transfers the precondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \} $ into $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \} $ . Following , the assignment line letting $ <var:g2> * <var:M> $ as $ <var:g2>$ . This line advances the condition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \} $ as the postcondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \times <var:N> \} $ . Jumping to the next piece of code contained in the list of instructions , we have the binding code defining $ <var:g2> * <var:M> $ to $ <var:g2>$ . This moves the precondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \times <var:N> \} $ as the condition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \times <var:N> ^ <nat:2> \} $ . This is ensured through the assignment law defined in standard Hoare techniques . Moving on to the next step , the variable binding command \verb | <var:X> := <var:g2> ; | . This takes the precondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:g2> = <nat:5> \times <var:N> ^ <nat:2> \} $ toward $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:X> = <nat:5> \times <var:N> ^ <nat:2> \} $ . Moving onward , we have the binding code binding $ <var:X> + <var:g1> $ to $ <var:X>$ . This command transfers the precondition $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:g1> = <nat:3> \times <var:N> \land <var:X> = <nat:5> \times <var:N> ^ <nat:2> \} $ as $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:X> = <nat:5> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> \} $ . This is shown to be logically sound with the assignment scheme from usual Hoare reasoning . Paying attention to the next piece of code seen in the list of instructions , the binding line giving $ <var:X> + <var:g0$ into $ <var:X>$ . This code takes $ \{ <var:M> = <var:N> \land <var:g0> = <nat:7> \land <var:X> = <nat:5> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> \} $ to $ \{ <var:M> = <var:N> \land <var:X> = <nat:5> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:7> \} $ . This is rigorously given using the assignment rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:7> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:M> ; <var:g2> := <nat:5> ; <var:g2> := <var:g2> * <var:M> ; <var:g2> := <var:g2> * <var:M> ; <var:X> := <var:g2> ; <var:X> := <var:X> + <var:g1> ; <var:X> := <var:X> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:M> = <var:N> }} <def:poly> {{ <var:X> = <nat:5> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:3> * <var:N> /\ <var:X> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:g0> = <nat:7> /\ <var:X> = <nat:5> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:N> /\ <var:X> = <nat:5> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 