\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:R> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:6> ; <var:W> := <var:e1> <var:W> := <var:W> + <var:e0> \end{verbatim} Given $ <var:R> = <var:i> $ before interpreting the program then we have $ <var:W> = <nat:6> \times <var:i> + <nat:9> $ when list of commands finishes . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:R> = <var:i> \} \\ <var:e1> := <var:R> ; \\ \{ <var:R> = <var:i> \land <var:e1> = <var:i> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:R> = <var:i> \land <var:e1> = <var:i> \land <var:e0> = <nat:9> \} \\ <var:e1> := <var:e1> * <nat:6> ; \\ \{ <var:R> = <var:i> \land <var:e1> = <nat:6> \times <var:i> \land <var:e0> = <nat:9> \} \\ <var:W> := <var:e1> \\ \{ <var:R> = <var:i> \land <var:e0> = <nat:9> \land <var:W> = <nat:6> \times <var:i> \} \\ <var:W> := <var:W> + <var:e0> \\ \{ <var:R> = <var:i> \land <var:W> = <nat:6> \times <var:i> + <nat:9> \} \end{eqnarray} Thusly , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:R> = <var:i> }} <var:e1> := <var:R> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:6> ; <var:W> := <var:e1> <var:W> := <var:W> + <var:e0> {{ <var:W> = <nat:6> * <var:i> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:e1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:e1> = <var:i> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:e1> = <nat:6> * <var:i> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:e0> = <nat:9> /\ <var:W> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:i> /\ <var:W> = <nat:6> * <var:i> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 