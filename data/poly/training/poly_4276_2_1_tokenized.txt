\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:6> ; <var:G> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:R> = <var:N> $ prior to the evaluation of the set of instructions it must be that we have $ <var:G> = <nat:6> $ after program is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:N> \} \\ <var:h0> := <nat:6> ; \\ \{ <var:R> = <var:N> \land <var:h0> = <nat:6> \} \\ <var:G> := <var:h0> \\ \{ <var:R> = <var:N> \land <var:G> = <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:G> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:R> = <var:N> }} <def:poly> {{ <var:G> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:N> /\ <var:G> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 