\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:k> := <var:Q0> \end{verbatim} Given given some natural numbers $ <var:n> $ that $ <var:F> = <var:n> $ prior to the evaluation of our series of instructions , it must be that we have $ <var:k> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be demonstrated by the following decorated list of instructions . \begin{eqnarray} \{ <var:F> = <var:n> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:F> = <var:n> \land <var:Q0> = <nat:3> \} \\ <var:k> := <var:Q0> \\ \{ <var:F> = <var:n> \land <var:k> = <nat:3> \} \end{eqnarray} Utilizing typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:F> = <var:n> }} <var:Q0> := <nat:3> ; <var:k> := <var:Q0> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 