\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:5> ; <var:a> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:V> = <var:o> $ prior to running our list of instructions it follows that we see $ <var:a> = <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:V> = <var:o> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:V> = <var:o> \land <var:P0> = <nat:5> \} \\ <var:a> := <var:P0> \\ \{ <var:V> = <var:o> \land <var:a> = <nat:5> \} \end{eqnarray} As a consequence , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:5> ; <var:a> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:V> = <var:o> }} <def:poly> {{ <var:a> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:o> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:o> /\ <var:a> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 