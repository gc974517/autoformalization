\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:V> ; <var:b2> := <var:b1> * <var:V> ; <var:b3> := <var:b2> * <var:V> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:4> ; <var:B> := <var:b3> <var:B> := <var:B> + <var:b2> <var:B> := <var:B> + <var:b1> <var:B> := <var:B> + <var:b0> \end{verbatim} Assume taking $ <var:v> \in \mathbb{N} $ that we have $ <var:V> = <var:v> $ ahead of the evaluation of the segment of code , it follows that $ <var:B> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:1> \cdot <var:v> ^ <nat:2> + <nat:8> \cdot <var:v> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:V> = <var:v> \} \\ <var:b1> := <var:V> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <var:v> \} \\ <var:b2> := <var:b1> * <var:V> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <var:v> \land <var:b2> = <var:v> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:V> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <var:v> \land <var:b2> = <var:v> ^ <nat:2> \land <var:b3> = <var:v> ^ <nat:3> \} \\ <var:b0> := <nat:5> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <var:v> \land <var:b2> = <var:v> ^ <nat:2> \land <var:b3> = <var:v> ^ <nat:3> \land <var:b0> = <nat:5> \} \\ <var:b1> := <var:b1> * <nat:8> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <nat:8> * <var:v> \land <var:b2> = <var:v> ^ <nat:2> \land <var:b3> = <var:v> ^ <nat:3> \land <var:b0> = <nat:5> \} \\ <var:b2> := <var:b2> * <nat:1> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <nat:8> * <var:v> \land <var:b2> = <nat:1> * <var:v> ^ <nat:2> \land <var:b3> = <var:v> ^ <nat:3> \land <var:b0> = <nat:5> \} \\ <var:b3> := <var:b3> * <nat:4> ; \\ \{ <var:V> = <var:v> \land <var:b1> = <nat:8> * <var:v> \land <var:b2> = <nat:1> * <var:v> ^ <nat:2> \land <var:b3> = <nat:4> * <var:v> ^ <nat:3> \land <var:b0> = <nat:5> \} \\ <var:B> := <var:b3> \\ \{ <var:V> = <var:v> \land <var:b1> = <nat:8> * <var:v> \land <var:b2> = <nat:1> * <var:v> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:B> = <nat:4> * <var:v> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:b2> \\ \{ <var:V> = <var:v> \land <var:b1> = <nat:8> * <var:v> \land <var:b0> = <nat:5> \land <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:b1> \\ \{ <var:V> = <var:v> \land <var:b0> = <nat:5> \land <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} \\ <var:B> := <var:B> + <var:b0> \\ \{ <var:V> = <var:v> \land <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> \} \end{eqnarray} As a result , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:V> = <var:v> }} <var:b1> := <var:V> ; <var:b2> := <var:b1> * <var:V> ; <var:b3> := <var:b2> * <var:V> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:1> ; <var:b3> := <var:b3> * <nat:4> ; <var:B> := <var:b3> <var:B> := <var:B> + <var:b2> <var:B> := <var:B> + <var:b1> <var:B> := <var:B> + <var:b0> {{ <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <var:v> /\ <var:b2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <var:v> /\ <var:b2> = <var:v> ^ <nat:2> /\ <var:b3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <var:v> /\ <var:b2> = <var:v> ^ <nat:2> /\ <var:b3> = <var:v> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <nat:8> * <var:v> /\ <var:b2> = <var:v> ^ <nat:2> /\ <var:b3> = <var:v> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <nat:8> * <var:v> /\ <var:b2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:b3> = <var:v> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <nat:8> * <var:v> /\ <var:b2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:v> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <nat:8> * <var:v> /\ <var:b2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:b0> = <nat:5> /\ <var:B> = <nat:4> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b1> = <nat:8> * <var:v> /\ <var:b0> = <nat:5> /\ <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:b0> = <nat:5> /\ <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:B> = <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 