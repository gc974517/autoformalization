\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o2> := <nat:8> ; <var:o2> := <var:o2> * <var:U> ; <var:o2> := <var:o2> * <var:U> ; <var:o3> := <nat:1> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:Y> := <var:o3> ; <var:Y> := <var:Y> + <var:o2> ; <var:Y> := <var:Y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given any $ <var:O> \in \mathbb{Z}^+ $ --- that we have $ <var:U> = <var:O> $ prior to interpreting our series of instructions it follows that we see $ <var:Y> = <nat:1> \times <var:O> ^ <nat:3> + <nat:8> \times <var:O> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the set of commands can be seen by Hoare logic . Stepping through , we have \begin{eqnarray} \{ <var:U> = <var:O> \} \, <var:o0> := <nat:8> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \} \, <var:o2> := <nat:8> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \} \, <var:o2> := <var:o2> * <var:U> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> \} \end{eqnarray} Advancing on , we have \begin{eqnarray} \{ <var:U> = <var:O> \} \, <var:o0> := <nat:8> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \} \, <var:o2> := <nat:8> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \} \, <var:o2> := <var:o2> * <var:U> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> \} \, <var:o2> := <var:o2> * <var:U> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \} \, <var:o3> := <nat:1> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:1> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:1> \} \, <var:o3> := <var:o3> * <var:U> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:O> \} \\ \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:O> \} \, <var:o3> := <var:o3> * <var:U> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \land <var:o2> = <nat:8> \cdot <var:O> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:O> ^ <nat:2> \} \end{eqnarray} Advancing to the next step , \begin{eqnarray} \{ <var:U> = <var:O> \} \, <var:o0> := <nat:8> \, \{ <var:U> = <var:O> \land <var:o0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o0> := <nat:8> ; <var:o2> := <nat:8> ; <var:o2> := <var:o2> * <var:U> ; <var:o2> := <var:o2> * <var:U> ; <var:o3> := <nat:1> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:Y> := <var:o3> ; <var:Y> := <var:Y> + <var:o2> ; <var:Y> := <var:Y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:U> = <var:O> }} <def:poly> {{ <var:Y> = <nat:1> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:o2> = <nat:8> * <var:O> ^ <nat:2> /\ <var:Y> = <nat:1> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:o0> = <nat:8> /\ <var:Y> = <nat:1> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:Y> = <nat:1> * <var:O> ^ <nat:3> + <nat:8> * <var:O> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 