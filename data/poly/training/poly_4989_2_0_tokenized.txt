\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:4> ; <var:B> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:z> = <var:k> $ ahead of executing this series of instructions it follows that we have $ <var:B> = <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:k> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:z> = <var:k> \land <var:a0> = <nat:4> \} \\ <var:B> := <var:a0> \\ \{ <var:z> = <var:k> \land <var:B> = <nat:4> \} \end{eqnarray} The application of Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:B> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 