\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:2> ; <var:u> := <var:M0> \end{verbatim} Allowing it to be that $ <var:O> = <var:Z> $ , taking positive integer coefficients $ <var:Z> $ , before evaluating this list of instructions it must be that we see $ <var:u> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is accomplished by typical Hoare logic . Immediately following , we see the variable assignmet code defining $ <nat:2> $ to $ <var:M0>$ . This takes $ \{ <var:O> = <var:Z> \} $ as the condition $ \{ <var:O> = <var:Z> \land <var:M0> = <nat:2> \} $ . Moving onward , the variable assignmet code \verb | <var:u> := <var:M0> | . This advances the precondition $ \{ <var:O> = <var:Z> \land <var:M0> = <nat:2> \} $ to $ \{ <var:O> = <var:Z> \land <var:u> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:O> = <var:Z> }} <var:M0> := <nat:2> ; <var:u> := <var:M0> {{ <var:u> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:u> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 