\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:a> ; <var:d2> := <var:d1> * <var:a> ; <var:d3> := <var:d2> * <var:a> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:1> ; <var:R> := <var:d3> <var:R> := <var:R> + <var:d2> <var:R> := <var:R> + <var:d1> <var:R> := <var:R> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:a> = <var:n> $ ahead of the evaluation of our code it holds that we have $ <var:R> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions is shown with standard Hoare techniques . Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:n> \} & <var:d1> := <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <var:n> \} & <var:d2> := <var:d1> * <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \} & <var:d0> := <nat:1> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} & <var:d1> := <var:d1> * <nat:8> & \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} & <var:d2> := <var:d2> * <nat:4> & \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:d3> = <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} & <var:d3> := <var:d3> * <nat:1> & \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:d3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:d3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:d0> = <nat:1> \} & <var:R> := <var:d3& \{ <var:a> = <var:n> \land <var:d1> = <nat:8> \cdot <var:n> \land <var:d2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:R> = <nat:1> \cdot <var:n> ^ <nat:3> \} \end{tabular} This is given using the binding inference rule of Hoare reasoning . Next , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:n> \} & <var:d1> := <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:n> \} & <var:d1> := <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \} \\ \{ <var:a> = <var:n> \land <var:d1> = <var:n> \} & <var:d2> := <var:d1> * <var:a> & \{ <var:a> = <var:n> \land <var:d1> = <var:n> \land <var:d2> = <var:n> ^ <nat:2> \} \end{tabular} This is sound through the binding rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:a> ; <var:d2> := <var:d1> * <var:a> ; <var:d3> := <var:d2> * <var:a> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:1> ; <var:R> := <var:d3> <var:R> := <var:R> + <var:d2> <var:R> := <var:R> + <var:d1> <var:R> := <var:R> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:a> = <var:n> }} <def:poly> {{ <var:R> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <nat:8> * <var:n> /\ <var:d2> = <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <nat:8> * <var:n> /\ <var:d2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:d3> = <var:n> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <nat:8> * <var:n> /\ <var:d2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:d3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <nat:8> * <var:n> /\ <var:d2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:d0> = <nat:1> /\ <var:R> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d1> = <nat:8> * <var:n> /\ <var:d0> = <nat:1> /\ <var:R> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:d0> = <nat:1> /\ <var:R> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:8> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:n> /\ <var:R> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:8> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 