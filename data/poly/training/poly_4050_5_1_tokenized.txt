\begin{document} \begin{theorem} Take the following set of commands as \begin{verbatim} <var:h1> := <var:U> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:7> ; <var:e> := <var:h1> <var:e> := <var:e> + <var:h0> \end{verbatim} Given for some $ <var:Z> \in \mathbb{N} $ $ <var:U> = <var:Z> $ ahead of interpreting the series of commands , it must be that $ <var:e> = <nat:7> \cdot <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is evident through Hoare techniques . Moving forward to the proceeding lines found in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:Z> \} & <var:h1> := <var:U> & \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \} \\ \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \} & <var:h0> := <nat:2> & \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \land <var:h0> = <nat:2> \} \\ \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \land <var:h0> = <nat:2> \} & <var:h1> := <var:h1> * <nat:7> & \{ <var:U> = <var:Z> \land <var:h1> = <nat:7> \times <var:Z> \land <var:h0> = <nat:2> \} \end{tabular} Advancing , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:Z> \} & <var:h1> := <var:U> & \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \} \end{tabular} Taking a look at the upcoming line in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:U> = <var:Z> \} & <var:h1> := <var:U> & \{ <var:U> = <var:Z> \land <var:h1> = <var:Z> \} \end{tabular} This is rigorously given by the variable assignmet inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:U> = <var:Z> }} <var:h1> := <var:U> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:7> ; <var:e> := <var:h1> <var:e> := <var:e> + <var:h0> {{ <var:e> = <nat:7> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:h1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:h1> = <var:Z> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:h1> = <nat:7> * <var:Z> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:h0> = <nat:2> /\ <var:e> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Z> /\ <var:e> = <nat:7> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 