\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:9> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:s> ; <var:M> := <var:x1> ; <var:M> := <var:M> + <var:x0> \end{verbatim} Allowing that $ <var:s> = <var:H> $ --- with some natural coefficients $ <var:H> $ --- ahead of interpreting our series of commands , then we have $ <var:M> = <nat:3> \cdot <var:H> + <nat:9> $ once series of commands is done . \end{theorem} \begin{proof} The proof of our set of instructions can be shown by usual Hoare techniques . Taking another step toward the next piece of code in our series of commands , we have the variable assignmet line \verb | <var:x0> := <nat:9> ; | . This redefines $ \{ <var:s> = <var:H> \} $ as the postcondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \} $ . This is sound through the assignment inference rule found in standard Hoare techniques . Moving on to the proceeding step found in the set of commands , we see the environment update line \verb | <var:x1> := <nat:3> ; | . This forwards the precondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \} $ toward the postcondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:x1> = <nat:3> \} $ . This is guaranteed with the assignment scheme in typical Hoare techniques . Moving forward , the assignment statement \verb | <var:x1> := <var:x1> * <var:s> ; | . This statement advances the precondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:x1> = <nat:3> \} $ toward the postcondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:x1> = <nat:3> \cdot <var:H> \} $ . Moving on to the upcoming step contained in our list of commands , we have the variable assignmet statement \verb | <var:M> := <var:x1> ; | . This moves the precondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:x1> = <nat:3> \cdot <var:H> \} $ toward the postcondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:M> = <nat:3> \cdot <var:H> \} $ . Now , the binding statement giving $ <var:M> + <var:x0$ as $ <var:M>$ . This statement takes the precondition $ \{ <var:s> = <var:H> \land <var:x0> = <nat:9> \land <var:M> = <nat:3> \cdot <var:H> \} $ into the condition $ \{ <var:s> = <var:H> \land <var:M> = <nat:3> \cdot <var:H> + <nat:9> \} $ . This is guaranteed using the assignment rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:s> = <var:H> }} <var:x0> := <nat:9> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:s> ; <var:M> := <var:x1> ; <var:M> := <var:M> + <var:x0> {{ <var:M> = <nat:3> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:x0> = <nat:9> /\ <var:x1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:x0> = <nat:9> /\ <var:M> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:M> = <nat:3> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 