\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:t> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:9> ; <var:c> := <var:n1> <var:c> := <var:c> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:t> = <var:C> $ ahead of executing the series of instructions it holds that $ <var:c> = <nat:9> \cdot <var:C> + <nat:8> $ after list of instructions has terminated . \end{theorem} \begin{proof} Let this decorated list of instructions . \begin{eqnarray} \{ <var:t> = <var:C> \} \\ <var:n1> := <var:t> ; \\ \{ <var:t> = <var:C> \land <var:n1> = <var:C> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:t> = <var:C> \land <var:n1> = <var:C> \land <var:n0> = <nat:8> \} \\ <var:n1> := <var:n1> * <nat:9> ; \\ \{ <var:t> = <var:C> \land <var:n1> = <nat:9> * <var:C> \land <var:n0> = <nat:8> \} \\ <var:c> := <var:n1> \\ \{ <var:t> = <var:C> \land <var:n0> = <nat:8> \land <var:c> = <nat:9> * <var:C> \} \\ <var:c> := <var:c> + <var:n0> \\ \{ <var:t> = <var:C> \land <var:c> = <nat:9> * <var:C> + <nat:8> \} \end{eqnarray} The application of Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:t> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:9> ; <var:c> := <var:n1> <var:c> := <var:c> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:t> = <var:C> }} <def:poly> {{ <var:c> = <nat:9> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:n1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:n1> = <var:C> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:n1> = <nat:9> * <var:C> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:n0> = <nat:8> /\ <var:c> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:c> = <nat:9> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 