\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:D1> := <var:L> ; <var:D2> := <var:D1> * <var:L> ; <var:D3> := <var:D2> * <var:L> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:9> ; <var:o> := <var:D3> <var:o> := <var:o> + <var:D2> <var:o> := <var:o> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:L> = <var:V> $ ahead of the execution of the code then $ <var:o> = <nat:9> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} Note that this decorated code segment . \begin{eqnarray} \{ <var:L> = <var:V> \} \\ <var:D1> := <var:L> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \} \\ <var:D2> := <var:D1> * <var:L> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:L> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D0> = <nat:7> \} \\ <var:D2> := <var:D2> * <nat:4> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:4> * <var:V> ^ <nat:2> \land <var:D3> = <var:V> ^ <nat:3> \land <var:D0> = <nat:7> \} \\ <var:D3> := <var:D3> * <nat:9> ; \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:4> * <var:V> ^ <nat:2> \land <var:D3> = <nat:9> * <var:V> ^ <nat:3> \land <var:D0> = <nat:7> \} \\ <var:o> := <var:D3> \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D2> = <nat:4> * <var:V> ^ <nat:2> \land <var:D0> = <nat:7> \land <var:o> = <nat:9> * <var:V> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:D2> \\ \{ <var:L> = <var:V> \land <var:D1> = <var:V> \land <var:D0> = <nat:7> \land <var:o> = <nat:9> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:D0> \\ \{ <var:L> = <var:V> \land <var:o> = <nat:9> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> \} \end{eqnarray} Utilizing Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:L> ; <var:D2> := <var:D1> * <var:L> ; <var:D3> := <var:D2> * <var:L> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:9> ; <var:o> := <var:D3> <var:o> := <var:o> + <var:D2> <var:o> := <var:o> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:L> = <var:V> }} <def:poly> {{ <var:o> = <nat:9> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:D3> = <var:V> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:D3> = <nat:9> * <var:V> ^ <nat:3> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:D0> = <nat:7> /\ <var:o> = <nat:9> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:D1> = <var:V> /\ <var:D0> = <nat:7> /\ <var:o> = <nat:9> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:o> = <nat:9> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 