\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:1> ; <var:A> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Given $ <var:r> = <var:P> $ ( assuming some positive numbers $ <var:P> $ ) ahead of interpreting this code segment then $ <var:A> = <nat:1> $ . \end{theorem} \begin{proof} Observe the below decorated series of commands . \begin{eqnarray} \{ <var:r> = <var:P> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:r> = <var:P> \land <var:w0> = <nat:1> \} \\ <var:A> := <var:w0> \\ \{ <var:r> = <var:P> \land <var:A> = <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:A> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:r> = <var:P> }} <def:poly> {{ <var:A> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:P> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:P> /\ <var:A> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 