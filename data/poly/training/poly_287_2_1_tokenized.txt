\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:7> ; <var:h> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:A> = <var:W> $ before executing the series of commands , it must be that we see $ <var:h> = <nat:7> $ when segment of code terminates . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:W> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:A> = <var:W> \land <var:K0> = <nat:7> \} \\ <var:h> := <var:K0> \\ \{ <var:A> = <var:W> \land <var:h> = <nat:7> \} \end{eqnarray} Considering the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:h> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:A> = <var:W> }} <def:poly> {{ <var:h> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:h> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 