\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:n> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:i> := <var:Z1> <var:i> := <var:i> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:n> = <var:S> $ ( given some positive numbers $ <var:S> $ ) before the evaluation of this list of instructions , it holds that $ <var:i> = <nat:1> * <var:S> + <nat:4> $ after segment of code has executed . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is demonstrated by typical Hoare techniques . Focusing on the following bits of codeseen in the list of commands , we see \begin{eqnarray} \{ <var:n> = <var:S> \} \, <var:Z1> := <var:n> \, \{ <var:n> = <var:S> \land <var:Z1> = <var:S> \} \\ \{ <var:n> = <var:S> \land <var:Z1> = <var:S> \} \, <var:Z0> := <nat:4> \, \{ <var:n> = <var:S> \land <var:Z1> = <var:S> \land <var:Z0> = <nat:4> \} \\ \{ <var:n> = <var:S> \land <var:Z1> = <var:S> \land <var:Z0> = <nat:4> \} \, <var:Z1> := <var:Z1> * <nat:1> \, \{ <var:n> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z0> = <nat:4> \} \\ \{ <var:n> = <var:S> \land <var:Z1> = <nat:1> * <var:S> \land <var:Z0> = <nat:4> \} \, <var:i> := <var:Z1\, \{ <var:n> = <var:S> \land <var:Z0> = <nat:4> \land <var:i> = <nat:1> * <var:S> \} \end{eqnarray} This is deduced with the variable update law defined by standard Hoare techniques . Further , we see \begin{eqnarray} \{ <var:n> = <var:S> \} \, <var:Z1> := <var:n> \, \{ <var:n> = <var:S> \land <var:Z1> = <var:S> \} \end{eqnarray} This is guaranteed through the variable assignmet law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:n> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:i> := <var:Z1> <var:i> := <var:i> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <def:poly> {{ <var:i> = <nat:1> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:Z1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:Z1> = <var:S> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:Z1> = <nat:1> * <var:S> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:Z0> = <nat:4> /\ <var:i> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:i> = <nat:1> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 