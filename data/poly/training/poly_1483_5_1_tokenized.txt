\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:u> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:6> ; <var:s> := <var:f1> <var:s> := <var:s> + <var:f0> \end{verbatim} Allowing , for some natural numbers $ <var:z> $ , it to be that $ <var:u> = <var:z> $ prior to running our code segment , it holds that $ <var:s> = <nat:6> * <var:z> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:u> = <var:z> \} \\ <var:f1> := <var:u> ; \\ \{ <var:u> = <var:z> \land <var:f1> = <var:z> \} \\ <var:f0> := <nat:5> ; \\ \{ <var:u> = <var:z> \land <var:f1> = <var:z> \land <var:f0> = <nat:5> \} \\ <var:f1> := <var:f1> * <nat:6> ; \\ \{ <var:u> = <var:z> \land <var:f1> = <nat:6> \cdot <var:z> \land <var:f0> = <nat:5> \} \\ <var:s> := <var:f1> \\ \{ <var:u> = <var:z> \land <var:f0> = <nat:5> \land <var:s> = <nat:6> \cdot <var:z> \} \\ <var:s> := <var:s> + <var:f0> \\ \{ <var:u> = <var:z> \land <var:s> = <nat:6> \cdot <var:z> + <nat:5> \} \end{eqnarray} Therefore , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:u> = <var:z> }} <var:f1> := <var:u> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:6> ; <var:s> := <var:f1> <var:s> := <var:s> + <var:f0> {{ <var:s> = <nat:6> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:f1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:f1> = <var:z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:f1> = <nat:6> * <var:z> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:f0> = <nat:5> /\ <var:s> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:z> /\ <var:s> = <nat:6> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 