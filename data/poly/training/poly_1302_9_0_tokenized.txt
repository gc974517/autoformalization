\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:d> := <var:F2> ; <var:d> := <var:d> + <var:F1> ; <var:d> := <var:d> + <var:F0> \end{verbatim} Allowing that $ <var:j> = <var:J> $ letting positive integer coefficients $ <var:J> $ before evaluating the list of commands it follows that we have $ <var:d> = <nat:6> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be accomplished through standard Hoare reasoning . Next , \verb | { <var:j> = <var:J> } <var:F0> := <nat:2> { <var:j> = <var:J> \land <var:F0> = <nat:2> } | , \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> } <var:F1> := <nat:1> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> } | and \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:j> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> } | . This is rigorously given using the inference rule from standard Hoare techniques . Going to the next step , we have \verb | { <var:j> = <var:J> } <var:F0> := <nat:2> { <var:j> = <var:J> \land <var:F0> = <nat:2> } | , \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> } <var:F1> := <nat:1> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> } | , \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> } <var:F1> := <var:F1> * <var:j> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> } | , \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> } <var:F2> := <nat:6> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:6> } | , \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:6> } <var:F2> := <var:F2> * <var:j> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:6> \cdot <var:J> } | and \verb | { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:6> \cdot <var:J> } <var:F2> := <var:F2> * <var:j> { <var:j> = <var:J> \land <var:F0> = <nat:2> \land <var:F1> = <nat:1> \cdot <var:J> \land <var:F2> = <nat:6> \cdot <var:J> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:j> = <var:J> }} <var:F0> := <nat:2> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:j> ; <var:F2> := <nat:6> ; <var:F2> := <var:F2> * <var:j> ; <var:F2> := <var:F2> * <var:j> ; <var:d> := <var:F2> ; <var:d> := <var:d> + <var:F1> ; <var:d> := <var:d> + <var:F0> {{ <var:d> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:J> /\ <var:F2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:1> * <var:J> /\ <var:d> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:F0> = <nat:2> /\ <var:d> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:d> = <nat:6> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 