\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:E> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> \end{verbatim} Assume it to hold that $ <var:E> = <var:c> $ ahead of running the series of commands , then $ <var:D> = <nat:8> \times <var:c> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is accomplished with typical Hoare techniques . Moving on to the subsequent line of code contained in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:c> \} & <var:s0> := <nat:3> & \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \} \end{tabular} Advancing to the next steps in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:E> = <var:c> \} & <var:s0> := <nat:3> & \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \} \\ \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \} & <var:s1> := <nat:8> & \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \land <var:s1> = <nat:8> \} \\ \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \land <var:s1> = <nat:8> \} & <var:s1> := <var:s1> * <var:E> & \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \land <var:s1> = <nat:8> \times <var:c> \} \\ \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \land <var:s1> = <nat:8> \times <var:c> \} & <var:D> := <var:s1> & \{ <var:E> = <var:c> \land <var:s0> = <nat:3> \land <var:D> = <nat:8> \times <var:c> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:E> = <var:c> }} <var:s0> := <nat:3> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:E> ; <var:D> := <var:s1> ; <var:D> := <var:D> + <var:s0> {{ <var:D> = <nat:8> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:s0> = <nat:3> /\ <var:D> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:D> = <nat:8> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 