\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:a1> := <var:p> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:8> ; <var:P> := <var:a1> <var:P> := <var:P> + <var:a0> \end{verbatim} Allowing that we have $ <var:p> = <var:x> $ letting positive coefficients $ <var:x> $ ahead of evaluating our segment of code then $ <var:P> = <nat:8> \times <var:x> + <nat:4> $ once series of commands has terminated . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:p> = <var:x> \} \\ <var:a1> := <var:p> ; \\ \{ <var:p> = <var:x> \land <var:a1> = <var:x> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:p> = <var:x> \land <var:a1> = <var:x> \land <var:a0> = <nat:4> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:p> = <var:x> \land <var:a1> = <nat:8> \times <var:x> \land <var:a0> = <nat:4> \} \\ <var:P> := <var:a1> \\ \{ <var:p> = <var:x> \land <var:a0> = <nat:4> \land <var:P> = <nat:8> \times <var:x> \} \\ <var:P> := <var:P> + <var:a0> \\ \{ <var:p> = <var:x> \land <var:P> = <nat:8> \times <var:x> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <var:a1> := <var:p> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:8> ; <var:P> := <var:a1> <var:P> := <var:P> + <var:a0> {{ <var:P> = <nat:8> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:a1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:a1> = <var:x> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:a1> = <nat:8> * <var:x> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:a0> = <nat:4> /\ <var:P> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:P> = <nat:8> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 