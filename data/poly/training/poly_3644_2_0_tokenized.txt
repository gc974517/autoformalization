\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:1> ; <var:u> := <var:K0> \end{verbatim} Allowing that we have $ <var:V> = <var:s> $ before running our set of commands it follows that we see $ <var:u> = <nat:1> $ once set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:s> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:V> = <var:s> \land <var:K0> = <nat:1> \} \\ <var:u> := <var:K0> \\ \{ <var:V> = <var:s> \land <var:u> = <nat:1> \} \end{eqnarray} Using standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:V> = <var:s> }} <var:K0> := <nat:1> ; <var:u> := <var:K0> {{ <var:u> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:s> /\ <var:u> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 