\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:h> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:h> ; <var:a2> := <var:a2> * <var:h> ; <var:u> := <var:a2> ; <var:u> := <var:u> + <var:a1> ; <var:u> := <var:u> + <var:a0> \end{verbatim} Assuming it to be that $ <var:h> = <var:R> $ ( assuming some natural numbers $ <var:R> $ ) before the evaluation of the program then we have $ <var:u> = <nat:8> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> + <nat:8> $ once list of instructions is done executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:h> = <var:R> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:5> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \} \\ <var:a1> := <var:a1> * <var:h> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:R> \} \\ <var:a2> := <nat:8> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:R> \land <var:a2> = <nat:8> \} \\ <var:a2> := <var:a2> * <var:h> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:R> \land <var:a2> = <nat:8> \cdot <var:R> \} \\ <var:a2> := <var:a2> * <var:h> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:R> \land <var:a2> = <nat:8> \cdot <var:R> ^ <nat:2> \} \\ <var:u> := <var:a2> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:a1> = <nat:5> \cdot <var:R> \land <var:u> = <nat:8> \cdot <var:R> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:a1> ; \\ \{ <var:h> = <var:R> \land <var:a0> = <nat:8> \land <var:u> = <nat:8> \cdot <var:R> ^ <nat:2> + <nat:5> \cdot <var:R> \} \\ <var:u> := <var:u> + <var:a0> \\ \{ <var:h> = <var:R> \land <var:u> = <nat:8> \cdot <var:R> ^ <nat:2> + <nat:5> \cdot <var:R> + <nat:8> \} \end{eqnarray} Given the above , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:h> = <var:R> }} <var:a0> := <nat:8> ; <var:a1> := <nat:5> ; <var:a1> := <var:a1> * <var:h> ; <var:a2> := <nat:8> ; <var:a2> := <var:a2> * <var:h> ; <var:a2> := <var:a2> * <var:h> ; <var:u> := <var:a2> ; <var:u> := <var:u> + <var:a1> ; <var:u> := <var:u> + <var:a0> {{ <var:u> = <nat:8> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:R> /\ <var:a2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:R> /\ <var:a2> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:R> /\ <var:a2> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:5> * <var:R> /\ <var:u> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:a0> = <nat:8> /\ <var:u> = <nat:8> * <var:R> ^ <nat:2> + <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:R> /\ <var:u> = <nat:8> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 