\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:M1> := <var:V> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:8> ; <var:H> := <var:M1> <var:H> := <var:H> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:V> = <var:X> $ prior to evaluating the code , it holds that $ <var:H> = <nat:8> \times <var:X> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is done using usual Hoare logic . Following , \[ \begin{tabular} {rcl} \{ <var:V> = <var:X> \} & <var:M1> := <var:V> & \{ <var:V> = <var:X> \land <var:M1> = <var:X> \} \end{tabular} Taking another step toward the next statements contained in our program , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:X> \} & <var:M1> := <var:V> & \{ <var:V> = <var:X> \land <var:M1> = <var:X> \} \\ \{ <var:V> = <var:X> \land <var:M1> = <var:X> \} & <var:M0> := <nat:9> & \{ <var:V> = <var:X> \land <var:M1> = <var:X> \land <var:M0> = <nat:9> \} \end{tabular} This is guaranteed by the binding inference rule in standard Hoare reasoning . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:V> = <var:X> \} & <var:M1> := <var:V> & \{ <var:V> = <var:X> \land <var:M1> = <var:X> \} \end{tabular} This is deduced using the inference rule given by Hoare techniques . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:V> = <var:X> \} & <var:M1> := <var:V> & \{ <var:V> = <var:X> \land <var:M1> = <var:X> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:V> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:8> ; <var:H> := <var:M1> <var:H> := <var:H> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <def:poly> {{ <var:H> = <nat:8> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:M1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:M1> = <var:X> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:M1> = <nat:8> * <var:X> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:M0> = <nat:9> /\ <var:H> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:H> = <nat:8> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 