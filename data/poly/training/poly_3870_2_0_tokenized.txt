\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:4> ; <var:t> := <var:e0> \end{verbatim} Allow letting integers $ <var:O> $ $ <var:R> = <var:O> $ prior to interpreting our set of commands , then $ <var:t> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be given through standard Hoare logic . Shifting focus toward the upcoming command seen in the list of instructions , we see \begin{eqnarray} \{ <var:R> = <var:O> \} \, <var:e0> := <nat:4> \, \{ <var:R> = <var:O> \land <var:e0> = <nat:4> \} \end{eqnarray} This is known to be sound through the environment update rule obtained from typical Hoare techniques . Jumping to the next line of code found in our set of commands , \begin{eqnarray} \{ <var:R> = <var:O> \} \, <var:e0> := <nat:4> \, \{ <var:R> = <var:O> \land <var:e0> = <nat:4> \} \end{eqnarray} This is shown to be logically sound through the environment update law obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:R> = <var:O> }} <var:e0> := <nat:4> ; <var:t> := <var:e0> {{ <var:t> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:O> /\ <var:t> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 