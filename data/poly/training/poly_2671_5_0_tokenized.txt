\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s0> := <nat:2> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:V> ; <var:p> := <var:s1> ; <var:p> := <var:p> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Allow , given all positive integer coefficients $ <var:Z> $ , $ <var:V> = <var:Z> $ ahead of running this series of commands it must be that we see $ <var:p> = <nat:6> * <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:V> = <var:Z> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:V> = <var:Z> \land <var:s0> = <nat:2> \} \\ <var:s1> := <nat:6> ; \\ \{ <var:V> = <var:Z> \land <var:s0> = <nat:2> \land <var:s1> = <nat:6> \} \\ <var:s1> := <var:s1> * <var:V> ; \\ \{ <var:V> = <var:Z> \land <var:s0> = <nat:2> \land <var:s1> = <nat:6> \cdot <var:Z> \} \\ <var:p> := <var:s1> ; \\ \{ <var:V> = <var:Z> \land <var:s0> = <nat:2> \land <var:p> = <nat:6> \cdot <var:Z> \} \\ <var:p> := <var:p> + <var:s0> \\ \{ <var:V> = <var:Z> \land <var:p> = <nat:6> \cdot <var:Z> + <nat:2> \} \end{eqnarray} Given the above , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:V> ; <var:p> := <var:s1> ; <var:p> := <var:p> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:V> = <var:Z> }} <def:poly> {{ <var:p> = <nat:6> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:s0> = <nat:2> /\ <var:p> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:p> = <nat:6> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 