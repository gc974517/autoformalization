\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:p> := <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z1> <var:p> := <var:p> + <var:Z0> \end{verbatim} Allowing it to be that $ <var:h> = <var:f> $ ( for every positive numbers $ <var:f> $ ) prior to interpreting our list of instructions , it holds that we see $ <var:p> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is shown using Hoare reasoning . After , the variable assignmet command \verb | <var:Z1> := <var:h> ; | . This code forwards $ \{ <var:h> = <var:f> \} $ as $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \} $ . This is shown to be logically sound with the assignment law of Hoare techniques . Stepping through , the variable binding code \verb | <var:Z2> := <var:Z1> * <var:h> ; | . This moves $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \} $ into the postcondition $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \} $ . This is known to be sound through the assignment rule in typical Hoare reasoning . Moving on to the subsequent line of code in the segment of code , we have the environment update code defining $ <var:Z2> * <var:h> $ as $ <var:Z3>$ . This redefines $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \} $ . Keeping momentum , the variable assignmet command yielding $ <nat:7> $ into $ <var:Z0>$ . This statement forwards $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \} $ into $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ . Paying attention to the following statement found in the program , we see the environment update line \verb | <var:Z1> := <var:Z1> * <nat:9> ; | . This transfers $ \{ <var:h> = <var:f> \land <var:Z1> = <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ as the postcondition $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ . Observing the upcoming line of code in the set of commands , the assignment command binding $ <var:Z2> * <nat:3> $ into $ <var:Z2>$ . This transfers the condition $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ toward $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ . Further , we have the line \verb | <var:Z3> := <var:Z3> * <nat:4> ; | . This code advances the precondition $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z3> = <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ as the postcondition $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z3> = <nat:4> \cdot <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ . Focusing on the subsequent step contained in the code segment , we have the variable assignmet command \verb | <var:p> := <var:Z3> | . This moves $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z3> = <nat:4> \cdot <var:f> ^ <nat:3> \land <var:Z0> = <nat:7> \} $ into the condition $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> \} $ . This is known to be sound with the assignment scheme of standard Hoare reasoning . Further , we see the code letting $ <var:p> + <var:Z2$ toward $ <var:p>$ . This takes $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> \} $ into $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> \} $ . Immediately after , we have the binding statement \verb | <var:p> := <var:p> + <var:Z1> | . This command moves $ \{ <var:h> = <var:f> \land <var:Z1> = <nat:9> \cdot <var:f> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> \} $ as the condition $ \{ <var:h> = <var:f> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> \} $ . This is shown by the assignment inference rule defined in typical Hoare reasoning . Shifting focus toward the upcoming piece of code contained in our list of commands , we have the variable update command defining $ <var:p> + <var:Z0$ toward $ <var:p>$ . This command forwards the precondition $ \{ <var:h> = <var:f> \land <var:Z0> = <nat:7> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> \} $ to $ \{ <var:h> = <var:f> \land <var:p> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> + <nat:7> \} $ . This is shown through the assignment scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:h> = <var:f> }} <var:Z1> := <var:h> ; <var:Z2> := <var:Z1> * <var:h> ; <var:Z3> := <var:Z2> * <var:h> ; <var:Z0> := <nat:7> ; <var:Z1> := <var:Z1> * <nat:9> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:Z3> := <var:Z3> * <nat:4> ; <var:p> := <var:Z3> <var:p> := <var:p> + <var:Z2> <var:p> := <var:p> + <var:Z1> <var:p> := <var:p> + <var:Z0> {{ <var:p> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <var:f> /\ <var:Z2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <var:f> /\ <var:Z2> = <var:f> ^ <nat:2> /\ <var:Z3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <var:f> /\ <var:Z2> = <var:f> ^ <nat:2> /\ <var:Z3> = <var:f> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <nat:9> * <var:f> /\ <var:Z2> = <var:f> ^ <nat:2> /\ <var:Z3> = <var:f> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <nat:9> * <var:f> /\ <var:Z2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:Z3> = <var:f> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <nat:9> * <var:f> /\ <var:Z2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:Z3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:Z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <nat:9> * <var:f> /\ <var:Z2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:Z0> = <nat:7> /\ <var:p> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z1> = <nat:9> * <var:f> /\ <var:Z0> = <nat:7> /\ <var:p> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z0> = <nat:7> /\ <var:p> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:p> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 