\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:k> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:h> := <var:Q1> <var:h> := <var:h> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow --- with some whole numbers $ <var:T> $ --- it to be that $ <var:k> = <var:T> $ ahead of running this set of instructions it holds that $ <var:h> = <nat:3> * <var:T> + <nat:3> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The proof of the series of instructions is done using usual Hoare logic . Taking another step toward the following line of code contained in the series of commands , we see the environment update statement binding $ <var:k> $ to $ <var:Q1>$ . This redefines $ \{ <var:k> = <var:T> \} $ into $ \{ <var:k> = <var:T> \land <var:Q1> = <var:T> \} $ . Moving on to the next step , the assignment code \verb | <var:Q0> := <nat:3> ; | . This redefines $ \{ <var:k> = <var:T> \land <var:Q1> = <var:T> \} $ into the condition $ \{ <var:k> = <var:T> \land <var:Q1> = <var:T> \land <var:Q0> = <nat:3> \} $ . This is ensured through the assignment scheme given in standard Hoare logic . Advancing to the next step , the variable binding statement yielding $ <var:Q1> * <nat:3> $ into $ <var:Q1>$ . This command moves the condition $ \{ <var:k> = <var:T> \land <var:Q1> = <var:T> \land <var:Q0> = <nat:3> \} $ into the postcondition $ \{ <var:k> = <var:T> \land <var:Q1> = <nat:3> \times <var:T> \land <var:Q0> = <nat:3> \} $ . This is ensured by the assignment inference rule defined by typical Hoare logic . Shifting focus toward the upcoming command seen in our segment of code , we see the code binding $ <var:Q1$ as $ <var:h>$ . This statement moves $ \{ <var:k> = <var:T> \land <var:Q1> = <nat:3> \times <var:T> \land <var:Q0> = <nat:3> \} $ as $ \{ <var:k> = <var:T> \land <var:Q0> = <nat:3> \land <var:h> = <nat:3> \times <var:T> \} $ . This is deduced with the assignment law from typical Hoare reasoning . Stepping forward , the assignment line \verb | <var:h> := <var:h> + <var:Q0> | . This line takes $ \{ <var:k> = <var:T> \land <var:Q0> = <nat:3> \land <var:h> = <nat:3> \times <var:T> \} $ to the postcondition $ \{ <var:k> = <var:T> \land <var:h> = <nat:3> \times <var:T> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:k> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:h> := <var:Q1> <var:h> := <var:h> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:k> = <var:T> }} <def:poly> {{ <var:h> = <nat:3> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:Q1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:Q1> = <var:T> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:Q1> = <nat:3> * <var:T> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:Q0> = <nat:3> /\ <var:h> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:h> = <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 