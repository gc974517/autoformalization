\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:1> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:F> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:F> ; <var:C2> := <var:C2> * <var:F> ; <var:l> := <var:C2> ; <var:l> := <var:l> + <var:C1> ; <var:l> := <var:l> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:F> = <var:p> $ ahead of running this code segment it follows that we see $ <var:l> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this code segment can be seen by typical Hoare logic . Observing the subsequent lines of codecontained in our series of commands , we see \begin{eqnarray} \{ <var:F> = <var:p> \} \, <var:C0> := <nat:1> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \} \, <var:C1> := <nat:2> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \} \, <var:C1> := <var:C1> * <var:F> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \} \, <var:C2> := <nat:1> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \} \, <var:C2> := <var:C2> * <var:F> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \times <var:p> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \times <var:p> \} \, <var:C2> := <var:C2> * <var:F> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \times <var:p> ^ <nat:2> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:C2> = <nat:1> \times <var:p> ^ <nat:2> \} \, <var:l> := <var:C2> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:l> = <nat:1> \times <var:p> ^ <nat:2> \} \\ \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:C1> = <nat:2> \times <var:p> \land <var:l> = <nat:1> \times <var:p> ^ <nat:2> \} \, <var:l> := <var:l> + <var:C1> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \land <var:l> = <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> \} \end{eqnarray} Moving on to the upcoming step seen in the list of instructions , we have \begin{eqnarray} \{ <var:F> = <var:p> \} \, <var:C0> := <nat:1> \, \{ <var:F> = <var:p> \land <var:C0> = <nat:1> \} \end{eqnarray} This is shown by the variable update rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:F> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:F> ; <var:C2> := <var:C2> * <var:F> ; <var:l> := <var:C2> ; <var:l> := <var:l> + <var:C1> ; <var:l> := <var:l> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:F> = <var:p> }} <def:poly> {{ <var:l> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:p> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:p> /\ <var:C2> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:p> /\ <var:C2> = <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:2> * <var:p> /\ <var:l> = <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:C0> = <nat:1> /\ <var:l> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:l> = <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 