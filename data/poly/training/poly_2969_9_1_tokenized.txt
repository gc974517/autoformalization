\begin{document} \begin{theorem} Consider a code segment as follows \begin{verbatim} <var:a1> := <var:d> ; <var:a2> := <var:a1> * <var:d> ; <var:a3> := <var:a2> * <var:d> ; <var:a0> := <nat:4> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:6> ; <var:N> := <var:a3> <var:N> := <var:N> + <var:a2> <var:N> := <var:N> + <var:a0> \end{verbatim} Allow $ <var:d> = <var:m> $ ( for all positive coefficients $ <var:m> $ ) prior to running our code segment , it follows that $ <var:N> = <nat:6> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment is done with typical Hoare reasoning . Following , we have the variable binding line letting $ <var:d> $ toward $ <var:a1>$ . This redefines the condition $ \{ <var:d> = <var:m> \} $ toward the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \} $ . Further , the binding command giving $ <var:a1> * <var:d> $ into $ <var:a2>$ . This statement takes the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \} $ into the postcondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \} $ . This is guaranteed by the assignment rule in usual Hoare techniques . Jumping to the subsequent line seen in our code segment , we see the line giving $ <var:a2> * <var:d> $ as $ <var:a3>$ . This line redefines the precondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \} $ to $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \} $ . This is shown using the assignment law given in standard Hoare reasoning . Shifting focus toward the proceeding command in the set of commands , the variable update line \verb | <var:a0> := <nat:4> ; | . This moves the precondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \} $ toward the postcondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . Next , the variable binding line \verb | <var:a2> := <var:a2> * <nat:5> ; | . This code advances $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ to the postcondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . This is shown with the assignment inference rule found in standard Hoare reasoning . Considering the subsequent statement seen in our series of commands , the variable assignmet statement \verb | <var:a3> := <var:a3> * <nat:6> ; | . This statement moves the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ as the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a3> = <nat:6> \times <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ . Advancing to the subsequent line contained in our set of instructions , the assignment statement giving $ <var:a3$ to $ <var:N>$ . This takes the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a3> = <nat:6> \times <var:m> ^ <nat:3> \land <var:a0> = <nat:4> \} $ as the postcondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:N> = <nat:6> \times <var:m> ^ <nat:3> \} $ . Further , we have the assignment line \verb | <var:N> := <var:N> + <var:a2> | . This advances $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <nat:5> \times <var:m> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:N> = <nat:6> \times <var:m> ^ <nat:3> \} $ to the postcondition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a0> = <nat:4> \land <var:N> = <nat:6> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law in standard Hoare reasoning . Keeping momentum , we have the binding statement yielding $ <var:N> + <var:a0$ as $ <var:N>$ . This takes the condition $ \{ <var:d> = <var:m> \land <var:a1> = <var:m> \land <var:a0> = <nat:4> \land <var:N> = <nat:6> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> \} $ into the postcondition $ \{ <var:d> = <var:m> \land <var:N> = <nat:6> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:d> = <var:m> }} <var:a1> := <var:d> ; <var:a2> := <var:a1> * <var:d> ; <var:a3> := <var:a2> * <var:d> ; <var:a0> := <nat:4> ; <var:a2> := <var:a2> * <nat:5> ; <var:a3> := <var:a3> * <nat:6> ; <var:N> := <var:a3> <var:N> := <var:N> + <var:a2> <var:N> := <var:N> + <var:a0> {{ <var:N> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:a3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:N> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:a1> = <var:m> /\ <var:a0> = <nat:4> /\ <var:N> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:m> /\ <var:N> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 