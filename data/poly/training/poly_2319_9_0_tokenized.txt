\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:r0> := <nat:3> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:f> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:f> ; <var:r2> := <var:r2> * <var:f> ; <var:X> := <var:r2> ; <var:X> := <var:X> + <var:r1> ; <var:X> := <var:X> + <var:r0> \end{verbatim} Given that we have $ <var:f> = <var:x> $ ahead of running our series of instructions , then we have $ <var:X> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:3> $ once code finishes . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:f> = <var:x> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \} \\ <var:r1> := <nat:3> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \} \\ <var:r1> := <var:r1> * <var:f> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \times <var:x> \} \\ <var:r2> := <nat:1> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \times <var:x> \land <var:r2> = <nat:1> \} \\ <var:r2> := <var:r2> * <var:f> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \times <var:x> \land <var:r2> = <nat:1> \times <var:x> \} \\ <var:r2> := <var:r2> * <var:f> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \times <var:x> \land <var:r2> = <nat:1> \times <var:x> ^ <nat:2> \} \\ <var:X> := <var:r2> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:r1> = <nat:3> \times <var:x> \land <var:X> = <nat:1> \times <var:x> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:r1> ; \\ \{ <var:f> = <var:x> \land <var:r0> = <nat:3> \land <var:X> = <nat:1> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> \} \\ <var:X> := <var:X> + <var:r0> \\ \{ <var:f> = <var:x> \land <var:X> = <nat:1> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:3> \} \end{eqnarray} Hence , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:f> = <var:x> }} <var:r0> := <nat:3> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:f> ; <var:r2> := <nat:1> ; <var:r2> := <var:r2> * <var:f> ; <var:r2> := <var:r2> * <var:f> ; <var:X> := <var:r2> ; <var:X> := <var:X> + <var:r1> ; <var:X> := <var:X> + <var:r0> {{ <var:X> = <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> * <var:x> /\ <var:r2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> * <var:x> /\ <var:r2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> * <var:x> /\ <var:r2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:3> * <var:x> /\ <var:X> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:r0> = <nat:3> /\ <var:X> = <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:X> = <nat:1> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 