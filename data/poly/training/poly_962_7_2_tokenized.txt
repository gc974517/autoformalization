\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <var:F> * <var:w> ; <var:F> := <nat:4> + <var:F> * <var:w> ; <var:F> := <nat:2> + <var:F> * <var:w> ; <var:F> := <nat:3> + <var:F> * <var:w> ; <var:F> := <var:F> * <var:w> ; <var:F> := <nat:4> + <var:F> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Assume , for all natural numbers $ <var:o> $ , that $ <var:w> = <var:o> $ before evaluating the list of commands it follows that we have $ <var:F> = <nat:1> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The argument for the series of instructions can be given by Hoare logic . Moving onward , we see the binding statement binding $ <nat:1> $ to $ <var:F>$ . This moves the condition $ \{ <var:w> = <var:o> \} $ to $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> \} $ . This is rigorously given through the assignment inference rule found in Hoare reasoning . Taking another step toward the upcoming bit of code found in our list of commands , we see the statement giving $ <var:F> * <var:w> $ as $ <var:F>$ . This code takes $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> \} $ as $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> + \} $ . This is ensured using the assignment law given by usual Hoare techniques . Now , the line \verb | <var:F> := <nat:4> + <var:F> * <var:w> ; | . This forwards $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> + \} $ toward the condition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> \} $ . Focusing on the subsequent statement found in our list of commands , the assignment statement binding $ <nat:2> + <var:F> * <var:w> $ into $ <var:F>$ . This code advances $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> \} $ into the postcondition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:2> \} $ . Going forward , we see the statement \verb | <var:F> := <nat:3> + <var:F> * <var:w> ; | . This command forwards the precondition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:2> \} $ into the condition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> \} $ . Advancing to the next step , we see the environment update command assigning $ <var:F> * <var:w> $ as $ <var:F>$ . This line forwards the precondition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> \} $ toward the condition $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + \} $ . Immediately after , we have the environment update command \verb | <var:F> := <nat:4> + <var:F> * <var:w> | . This code forwards $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + \} $ toward $ \{ <var:w> = <var:o> \land <var:F> = <nat:1> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> \} $ . This is guaranteed by the assignment law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:1> ; <var:F> := <var:F> * <var:w> ; <var:F> := <nat:4> + <var:F> * <var:w> ; <var:F> := <nat:2> + <var:F> * <var:w> ; <var:F> := <nat:3> + <var:F> * <var:w> ; <var:F> := <var:F> * <var:w> ; <var:F> := <nat:4> + <var:F> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <def:poly> {{ <var:F> = <nat:1> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:F> = <nat:1> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 