\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:B1> := <var:n> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:7> ; <var:f> := <var:B1> <var:f> := <var:f> + <var:B0> \end{verbatim} Assuming it to hold that $ <var:n> = <var:F> $ , assuming some $ <var:F> \in \mathbb{Z}^+ $ , ahead of the execution of our segment of code it follows that we have $ <var:f> = <nat:7> \times <var:F> + <nat:4> $ when segment of code is done . \end{theorem} \begin{proof} Proving correctness for our code segment is clear using standard Hoare logic . Focusing on the upcoming lines in the code segment , \begin{verbatim} { <var:n> = <var:F> } <var:B1> := <var:n> { <var:n> = <var:F> \land <var:B1> = <var:F> } { <var:n> = <var:F> \land <var:B1> = <var:F> } <var:B0> := <nat:4> { <var:n> = <var:F> \land <var:B1> = <var:F> \land <var:B0> = <nat:4> } \end{verbatim} Immediately following , we see \begin{verbatim} { <var:n> = <var:F> } <var:B1> := <var:n> { <var:n> = <var:F> \land <var:B1> = <var:F> } { <var:n> = <var:F> \land <var:B1> = <var:F> } <var:B0> := <nat:4> { <var:n> = <var:F> \land <var:B1> = <var:F> \land <var:B0> = <nat:4> } { <var:n> = <var:F> \land <var:B1> = <var:F> \land <var:B0> = <nat:4> } <var:B1> := <var:B1> * <nat:7> { <var:n> = <var:F> \land <var:B1> = <nat:7> \cdot <var:F> \land <var:B0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <var:B1> := <var:n> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:7> ; <var:f> := <var:B1> <var:f> := <var:f> + <var:B0> {{ <var:f> = <nat:7> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:B1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:B1> = <var:F> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:B1> = <nat:7> * <var:F> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:B0> = <nat:4> /\ <var:f> = <nat:7> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:f> = <nat:7> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 