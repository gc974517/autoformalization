\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:1> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:U> := <var:v2> ; <var:U> := <var:U> + <var:v1> ; <var:U> := <var:U> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Assuming it to be that $ <var:u> = <var:x> $ for every natural numbers $ <var:x> $ ahead of evaluating our segment of code , it holds that $ <var:U> = <nat:1> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our set of commands is done through standard Hoare reasoning . Advancing , we see the environment update statement letting $ <nat:4> $ toward $ <var:v0>$ . This forwards the condition $ \{ <var:u> = <var:x> \} $ as the postcondition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \} $ . This is ensured through the assignment scheme given in standard Hoare logic . Honing in on the next line of code contained in the set of commands , we see the binding line \verb | <var:v1> := <nat:2> ; | . This transfers the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \} $ into the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \} $ . This is shown by the assignment scheme given by typical Hoare reasoning . Considering the next command seen in the program , the environment update code giving $ <var:v1> * <var:u> $ as $ <var:v1>$ . This advances the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \} $ into $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \} $ . Observing the upcoming line of code seen in the series of instructions , we see the environment update command assigning $ <nat:1> $ into $ <var:v2>$ . This redefines the precondition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \} $ as $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \} $ . Shifting focus toward the proceeding statement contained in the list of commands , the assignment statement letting $ <var:v2> * <var:u> $ into $ <var:v2>$ . This forwards $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \} $ into the postcondition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \times <var:x> \} $ . This is given using the assignment scheme from typical Hoare logic . Advancing on , we have the line \verb | <var:v2> := <var:v2> * <var:u> ; | . This line moves the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \times <var:x> \} $ into $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \times <var:x> ^ <nat:2> \} $ . This is guaranteed using the assignment law given by Hoare reasoning . Observing the proceeding line found in our list of instructions , the environment update statement assigning $ <var:v2> $ toward $ <var:U>$ . This forwards the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:v2> = <nat:1> \times <var:x> ^ <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:U> = <nat:1> \times <var:x> ^ <nat:2> \} $ . Moving forward to the next step , we see the variable update code defining $ <var:U> + <var:v1> $ into $ <var:U>$ . This statement transfers $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:x> \land <var:U> = <nat:1> \times <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:U> = <nat:1> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> \} $ . This is known to be sound using the assignment inference rule defined by standard Hoare reasoning . Now , we have the variable update code assigning $ <var:U> + <var:v0$ into $ <var:U>$ . This line advances the precondition $ \{ <var:u> = <var:x> \land <var:v0> = <nat:4> \land <var:U> = <nat:1> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> \} $ toward the postcondition $ \{ <var:u> = <var:x> \land <var:U> = <nat:1> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:u> ; <var:v2> := <nat:1> ; <var:v2> := <var:v2> * <var:u> ; <var:v2> := <var:v2> * <var:u> ; <var:U> := <var:v2> ; <var:U> := <var:U> + <var:v1> ; <var:U> := <var:U> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <def:poly> {{ <var:U> = <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:x> /\ <var:v2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:x> /\ <var:v2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:x> /\ <var:v2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:x> /\ <var:U> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:v0> = <nat:4> /\ <var:U> = <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:U> = <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 