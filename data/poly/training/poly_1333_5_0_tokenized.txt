\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:u0> := <nat:4> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:d> ; <var:i> := <var:u1> ; <var:i> := <var:i> + <var:u0> \end{verbatim} Allow with some integers $ <var:j> $ $ <var:d> = <var:j> $ ahead of running our list of commands it follows that $ <var:i> = <nat:1> \cdot <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is evident by usual Hoare reasoning . Advancing on , \verb | { <var:d> = <var:j> } <var:u0> := <nat:4> { <var:d> = <var:j> \land <var:u0> = <nat:4> } | and \verb | { <var:d> = <var:j> \land <var:u0> = <nat:4> } <var:u1> := <nat:1> { <var:d> = <var:j> \land <var:u0> = <nat:4> \land <var:u1> = <nat:1> } | . This is deduced by the rule defined by standard Hoare logic . Going to the next step , we see \verb | { <var:d> = <var:j> } <var:u0> := <nat:4> { <var:d> = <var:j> \land <var:u0> = <nat:4> } | and \verb | { <var:d> = <var:j> \land <var:u0> = <nat:4> } <var:u1> := <nat:1> { <var:d> = <var:j> \land <var:u0> = <nat:4> \land <var:u1> = <nat:1> } | . This is rigorously given by the assignment rule from usual Hoare logic . Jumping to the upcoming command seen in our list of instructions , \verb | { <var:d> = <var:j> } <var:u0> := <nat:4> { <var:d> = <var:j> \land <var:u0> = <nat:4> } | . This is shown through the scheme found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:d> = <var:j> }} <var:u0> := <nat:4> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:d> ; <var:i> := <var:u1> ; <var:i> := <var:i> + <var:u0> {{ <var:i> = <nat:1> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:u0> = <nat:4> /\ <var:i> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:i> = <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 