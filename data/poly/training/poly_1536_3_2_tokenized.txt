\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:3> + <var:d> * <var:V> ; <var:d> := <nat:1> + <var:d> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Allow $ <var:V> = <var:u> $ ahead of interpreting the code segment it holds that we have $ <var:d> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be seen using Hoare logic . Considering the upcoming line of code contained in the set of instructions , we see the assignment command assigning $ <nat:1> $ toward $ <var:d>$ . This line advances the precondition $ \{ <var:V> = <var:u> \} $ toward the condition $ \{ <var:V> = <var:u> \land <var:d> = <nat:1> \} $ . Considering the proceeding statement contained in our code segment , we have the environment update command assigning $ <nat:3> + <var:d> * <var:V> $ to $ <var:d>$ . This command takes $ \{ <var:V> = <var:u> \land <var:d> = <nat:1> \} $ as the postcondition $ \{ <var:V> = <var:u> \land <var:d> = <nat:1> \cdot <var:u> + <nat:3> \} $ . This is deduced with the assignment scheme found in Hoare logic . Stepping forward , we have the assignment command letting $ <nat:1> + <var:d> * <var:V$ toward $ <var:d>$ . This code takes $ \{ <var:V> = <var:u> \land <var:d> = <nat:1> \cdot <var:u> + <nat:3> \} $ into $ \{ <var:V> = <var:u> \land <var:d> = <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:1> \} $ . This is shown to be logically sound using the assignment rule from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <nat:3> + <var:d> * <var:V> ; <var:d> := <nat:1> + <var:d> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:V> = <var:u> }} <def:poly> {{ <var:d> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:d> = <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:d> = <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 