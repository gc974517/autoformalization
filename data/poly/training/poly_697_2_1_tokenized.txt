\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:2> ; <var:O> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:S> = <var:r> $ prior to interpreting our set of commands , it must be that $ <var:O> = <nat:2> $ once code exits . \end{theorem} \begin{proof} Proving correctness for this series of commands is shown using typical Hoare reasoning . After , we have \[ \begin{tabular} {rcl} \{ <var:S> = <var:r> \} & <var:p0> := <nat:2> & \{ <var:S> = <var:r> \land <var:p0> = <nat:2> \} \\ \{ <var:S> = <var:r> \land <var:p0> = <nat:2> \} & <var:O> := <var:p0& \{ <var:S> = <var:r> \land <var:O> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:O> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:S> = <var:r> }} <def:poly> {{ <var:O> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:r> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:r> /\ <var:O> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 