\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:j1> := <var:y> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:4> ; <var:Z> := <var:j1> <var:Z> := <var:Z> + <var:j0> \end{verbatim} Allowing it to hold that $ <var:y> = <var:V> $ before running our list of commands , then we have $ <var:Z> = <nat:4> \cdot <var:V> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare logic yields : \begin{eqnarray} \{ <var:y> = <var:V> \} \\ <var:j1> := <var:y> ; \\ \{ <var:y> = <var:V> \land <var:j1> = <var:V> \} \\ <var:j0> := <nat:5> ; \\ \{ <var:y> = <var:V> \land <var:j1> = <var:V> \land <var:j0> = <nat:5> \} \\ <var:j1> := <var:j1> * <nat:4> ; \\ \{ <var:y> = <var:V> \land <var:j1> = <nat:4> \times <var:V> \land <var:j0> = <nat:5> \} \\ <var:Z> := <var:j1> \\ \{ <var:y> = <var:V> \land <var:j0> = <nat:5> \land <var:Z> = <nat:4> \times <var:V> \} \\ <var:Z> := <var:Z> + <var:j0> \\ \{ <var:y> = <var:V> \land <var:Z> = <nat:4> \times <var:V> + <nat:5> \} \end{eqnarray} Thusly , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:y> = <var:V> }} <var:j1> := <var:y> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:4> ; <var:Z> := <var:j1> <var:Z> := <var:Z> + <var:j0> {{ <var:Z> = <nat:4> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:j1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:j1> = <var:V> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:j1> = <nat:4> * <var:V> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:j0> = <nat:5> /\ <var:Z> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:V> /\ <var:Z> = <nat:4> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 