\begin{document} \begin{theorem} Take the following program in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:D> ; <var:o> := <var:K1> ; <var:o> := <var:o> + <var:K0> \end{verbatim} Assuming $ <var:D> = <var:v> $ prior to running our series of commands it must be that we have $ <var:o> = <nat:4> \cdot <var:v> + <nat:4> $ when list of commands finishes . \end{theorem} \begin{proof} The proof of this set of commands is evident by the following decorated code . \begin{eqnarray} \{ <var:D> = <var:v> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:D> = <var:v> \land <var:K0> = <nat:4> \} \\ <var:K1> := <nat:4> ; \\ \{ <var:D> = <var:v> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> \} \\ <var:K1> := <var:K1> * <var:D> ; \\ \{ <var:D> = <var:v> \land <var:K0> = <nat:4> \land <var:K1> = <nat:4> * <var:v> \} \\ <var:o> := <var:K1> ; \\ \{ <var:D> = <var:v> \land <var:K0> = <nat:4> \land <var:o> = <nat:4> * <var:v> \} \\ <var:o> := <var:o> + <var:K0> \\ \{ <var:D> = <var:v> \land <var:o> = <nat:4> * <var:v> + <nat:4> \} \end{eqnarray} The application of Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:D> = <var:v> }} <var:K0> := <nat:4> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:D> ; <var:o> := <var:K1> ; <var:o> := <var:o> + <var:K0> {{ <var:o> = <nat:4> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:K0> = <nat:4> /\ <var:o> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:o> = <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 