\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:c> ; <var:Y> := <nat:3> + <var:Y> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assuming that we have $ <var:c> = <var:Z> $ prior to the execution of this set of commands it holds that we have $ <var:Y> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:c> = <var:Z> \} \\ <var:Y> := <nat:2> ; \\ \{ <var:c> = <var:Z> \land <var:Y> = <nat:2> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:c> ; \\ \{ <var:c> = <var:Z> \land <var:Y> = <nat:2> * <var:Z> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:c> \\ \{ <var:c> = <var:Z> \land <var:Y> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> \} \end{eqnarray} Thus , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:c> ; <var:Y> := <nat:3> + <var:Y> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:c> = <var:Z> }} <def:poly> {{ <var:Y> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:Y> = <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:Z> /\ <var:Y> = <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 