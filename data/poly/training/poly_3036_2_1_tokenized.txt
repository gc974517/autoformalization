\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:6> ; <var:X> := <var:G0> \end{verbatim} Given that $ <var:o> = <var:x> $ ahead of the execution of the set of commands , it follows that we have $ <var:X> = <nat:6> $ when segment of code is done executing . \end{theorem} \begin{proof} The method of proof for this code is clear through typical Hoare reasoning . Taking a look at the next command in the series of commands , we have \begin{verbatim} { <var:o> = <var:x> } <var:G0> := <nat:6> { <var:o> = <var:x> \land <var:G0> = <nat:6> } \end{verbatim} Focusing on the following command found in the code segment , we see \begin{verbatim} { <var:o> = <var:x> } <var:G0> := <nat:6> { <var:o> = <var:x> \land <var:G0> = <nat:6> } \end{verbatim} This is rigorously given by the environment update rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:o> = <var:x> }} <var:G0> := <nat:6> ; <var:X> := <var:G0> {{ <var:X> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:X> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 