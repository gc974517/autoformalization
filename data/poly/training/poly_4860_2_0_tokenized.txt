\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:j0> := <nat:1> ; <var:Z> := <var:j0> \end{verbatim} Assuming it to hold that $ <var:P> = <var:k> $ --- letting positive integer coefficients $ <var:k> $ --- ahead of executing our series of commands , it holds that $ <var:Z> = <nat:1> $ once program is done executing . \end{theorem} \begin{proof} Let the following decorated set of commands . \begin{eqnarray} \{ <var:P> = <var:k> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:P> = <var:k> \land <var:j0> = <nat:1> \} \\ <var:Z> := <var:j0> \\ \{ <var:P> = <var:k> \land <var:Z> = <nat:1> \} \end{eqnarray} Using standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:P> = <var:k> }} <var:j0> := <nat:1> ; <var:Z> := <var:j0> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:k> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:k> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 