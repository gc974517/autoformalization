\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:7> ; <var:Q> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assume ( given $ <var:t> \in \mathbb{Z}^+ $ ) that $ <var:i> = <var:t> $ prior to evaluating this program , it follows that we have $ <var:Q> = <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands is evident using this decorated code segment . \begin{eqnarray} \{ <var:i> = <var:t> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:i> = <var:t> \land <var:z0> = <nat:7> \} \\ <var:Q> := <var:z0> \\ \{ <var:i> = <var:t> \land <var:Q> = <nat:7> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:7> ; <var:Q> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:i> = <var:t> }} <def:poly> {{ <var:Q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:t> /\ <var:Q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 