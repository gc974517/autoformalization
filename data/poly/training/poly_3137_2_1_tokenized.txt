\begin{document} \begin{theorem} Consider a series of commands as \begin{verbatim} <var:g0> := <nat:6> ; <var:O> := <var:g0> \end{verbatim} Allow it to hold that $ <var:L> = <var:D> $ --- given every whole numbers $ <var:D> $ --- prior to executing this set of instructions then $ <var:O> = <nat:6> $ . \end{theorem} \begin{proof} Notice the following decorated list of instructions . \begin{eqnarray} \{ <var:L> = <var:D> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:L> = <var:D> \land <var:g0> = <nat:6> \} \\ <var:O> := <var:g0> \\ \{ <var:L> = <var:D> \land <var:O> = <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <var:g0> := <nat:6> ; <var:O> := <var:g0> {{ <var:O> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:O> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 