\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:I1> := <var:H> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:6> ; <var:c> := <var:I1> <var:c> := <var:c> + <var:I0> \end{verbatim} Allowing that $ <var:H> = <var:A> $ ahead of running this series of commands it follows that we see $ <var:c> = <nat:6> \cdot <var:A> + <nat:3> $ after list of instructions finishes . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is clear by typical Hoare logic . Focusing on the next line of code contained in the set of commands , we see the command defining $ <var:H> $ toward $ <var:I1>$ . This code transfers the precondition $ \{ <var:H> = <var:A> \} $ as $ \{ <var:H> = <var:A> \land <var:I1> = <var:A> \} $ . This is rigorously given with the assignment scheme found in typical Hoare reasoning . Moving forward to the next line of code seen in the program , the variable binding command binding $ <nat:3> $ to $ <var:I0>$ . This line forwards $ \{ <var:H> = <var:A> \land <var:I1> = <var:A> \} $ toward the postcondition $ \{ <var:H> = <var:A> \land <var:I1> = <var:A> \land <var:I0> = <nat:3> \} $ . This is given by the assignment inference rule in Hoare techniques . Looking at the subsequent command in the set of instructions , we have the assignment line binding $ <var:I1> * <nat:6> $ to $ <var:I1>$ . This line redefines the precondition $ \{ <var:H> = <var:A> \land <var:I1> = <var:A> \land <var:I0> = <nat:3> \} $ into $ \{ <var:H> = <var:A> \land <var:I1> = <nat:6> \times <var:A> \land <var:I0> = <nat:3> \} $ . Honing in on the upcoming step contained in our list of instructions , the binding command binding $ <var:I1$ toward $ <var:c>$ . This redefines $ \{ <var:H> = <var:A> \land <var:I1> = <nat:6> \times <var:A> \land <var:I0> = <nat:3> \} $ into $ \{ <var:H> = <var:A> \land <var:I0> = <nat:3> \land <var:c> = <nat:6> \times <var:A> \} $ . This is shown to be logically sound by the assignment law in usual Hoare logic . Stepping forward , we have the assignment statement \verb | <var:c> := <var:c> + <var:I0> | . This command takes the precondition $ \{ <var:H> = <var:A> \land <var:I0> = <nat:3> \land <var:c> = <nat:6> \times <var:A> \} $ as $ \{ <var:H> = <var:A> \land <var:c> = <nat:6> \times <var:A> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:H> = <var:A> }} <var:I1> := <var:H> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:6> ; <var:c> := <var:I1> <var:c> := <var:c> + <var:I0> {{ <var:c> = <nat:6> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:I1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:I1> = <var:A> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:I1> = <nat:6> * <var:A> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:I0> = <nat:3> /\ <var:c> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:A> /\ <var:c> = <nat:6> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 