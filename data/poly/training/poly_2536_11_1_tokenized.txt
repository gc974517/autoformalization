\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:q1> := <var:M> ; <var:q2> := <var:q1> * <var:M> ; <var:q3> := <var:q2> * <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:1> ; <var:P> := <var:q3> <var:P> := <var:P> + <var:q2> <var:P> := <var:P> + <var:q1> <var:P> := <var:P> + <var:q0> \end{verbatim} Given it to hold that $ <var:M> = <var:U> $ --- given some $ <var:U> $ --- before the execution of our series of commands it must be that we see $ <var:P> = <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is evident by usual Hoare techniques . Moving forward , we have \begin{eqnarray} \{ <var:M> = <var:U> \} \, <var:q1> := <var:M> \, \{ <var:M> = <var:U> \land <var:q1> = <var:U> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <var:U> \} \, <var:q2> := <var:q1> * <var:M> \, \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:M> \, \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \} \, <var:q0> := <nat:3> \, \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q1> := <var:q1> * <nat:4> \, \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q2> := <var:q2> * <nat:2> \, \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:q3> := <var:q3> * <nat:1> \, \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q3> = <nat:1> \times <var:U> ^ <nat:3> \land <var:q0> = <nat:3> \} \, <var:P> := <var:q3\, \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q0> = <nat:3> \land <var:P> = <nat:1> \times <var:U> ^ <nat:3> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:q0> = <nat:3> \land <var:P> = <nat:1> \times <var:U> ^ <nat:3> \} \, <var:P> := <var:P> + <var:q2\, \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q0> = <nat:3> \land <var:P> = <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> \} \\ \{ <var:M> = <var:U> \land <var:q1> = <nat:4> \times <var:U> \land <var:q0> = <nat:3> \land <var:P> = <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> \} \, <var:P> := <var:P> + <var:q1\, \{ <var:M> = <var:U> \land <var:q0> = <nat:3> \land <var:P> = <nat:1> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> \} \end{eqnarray} This is rigorously given using the variable binding rule given in standard Hoare techniques . Moving on to the next step , we have \begin{eqnarray} \{ <var:M> = <var:U> \} \, <var:q1> := <var:M> \, \{ <var:M> = <var:U> \land <var:q1> = <var:U> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:M> = <var:U> }} <var:q1> := <var:M> ; <var:q2> := <var:q1> * <var:M> ; <var:q3> := <var:q2> * <var:M> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:1> ; <var:P> := <var:q3> <var:P> := <var:P> + <var:q2> <var:P> := <var:P> + <var:q1> <var:P> := <var:P> + <var:q0> {{ <var:P> = <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <var:U> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:U> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:q0> = <nat:3> /\ <var:P> = <nat:1> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q1> = <nat:4> * <var:U> /\ <var:q0> = <nat:3> /\ <var:P> = <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:q0> = <nat:3> /\ <var:P> = <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:U> /\ <var:P> = <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 