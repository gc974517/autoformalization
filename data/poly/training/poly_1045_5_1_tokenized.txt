\begin{document} \begin{theorem} Define the following set of commands as \begin{verbatim} <var:g1> := <var:A> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:3> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> \end{verbatim} Assume it to be that $ <var:A> = <var:X> $ ahead of the execution of this series of commands it holds that we see $ <var:q> = <nat:3> \cdot <var:X> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:X> \} \\ <var:g1> := <var:A> ; \\ \{ <var:A> = <var:X> \land <var:g1> = <var:X> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:A> = <var:X> \land <var:g1> = <var:X> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:3> ; \\ \{ <var:A> = <var:X> \land <var:g1> = <nat:3> \cdot <var:X> \land <var:g0> = <nat:3> \} \\ <var:q> := <var:g1> \\ \{ <var:A> = <var:X> \land <var:g0> = <nat:3> \land <var:q> = <nat:3> \cdot <var:X> \} \\ <var:q> := <var:q> + <var:g0> \\ \{ <var:A> = <var:X> \land <var:q> = <nat:3> \cdot <var:X> + <nat:3> \} \end{eqnarray} Hence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:A> = <var:X> }} <var:g1> := <var:A> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:3> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> {{ <var:q> = <nat:3> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:g1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:g1> = <var:X> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:g1> = <nat:3> * <var:X> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:g0> = <nat:3> /\ <var:q> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:q> = <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 