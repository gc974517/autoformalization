\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:1> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:k> ; <var:J> := <var:P1> ; <var:J> := <var:J> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Given it to be that $ <var:k> = <var:f> $ prior to executing our list of instructions , then $ <var:J> = <nat:3> * <var:f> + <nat:1> $ once segment of code has finished executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:k> = <var:f> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:k> = <var:f> \land <var:P0> = <nat:1> \} \\ <var:P1> := <nat:3> ; \\ \{ <var:k> = <var:f> \land <var:P0> = <nat:1> \land <var:P1> = <nat:3> \} \\ <var:P1> := <var:P1> * <var:k> ; \\ \{ <var:k> = <var:f> \land <var:P0> = <nat:1> \land <var:P1> = <nat:3> \times <var:f> \} \\ <var:J> := <var:P1> ; \\ \{ <var:k> = <var:f> \land <var:P0> = <nat:1> \land <var:J> = <nat:3> \times <var:f> \} \\ <var:J> := <var:J> + <var:P0> \\ \{ <var:k> = <var:f> \land <var:J> = <nat:3> \times <var:f> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:P1> := <nat:3> ; <var:P1> := <var:P1> * <var:k> ; <var:J> := <var:P1> ; <var:J> := <var:J> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:k> = <var:f> }} <def:poly> {{ <var:J> = <nat:3> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:P0> = <nat:1> /\ <var:P1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:P0> = <nat:1> /\ <var:J> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:f> /\ <var:J> = <nat:3> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 