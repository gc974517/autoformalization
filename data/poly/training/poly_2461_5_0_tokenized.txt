\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:5> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:p> ; <var:j> := <var:Y1> ; <var:j> := <var:j> + <var:Y0> \end{verbatim} Given $ <var:p> = <var:m> $ ( for some whole numbers $ <var:m> $ ) ahead of running the list of commands it must be that $ <var:j> = <nat:7> * <var:m> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands is evident by typical Hoare techniques . Paying attention to the next pieces of code found in our code segment , \[ \begin{tabular} {rcl} \{ <var:p> = <var:m> \} & <var:Y0> := <nat:5> & \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \} \\ \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \} & <var:Y1> := <nat:7> & \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:7> \} \end{tabular} Considering the proceeding lines of codeseen in our program , \[ \begin{tabular} {rcl} \{ <var:p> = <var:m> \} & <var:Y0> := <nat:5> & \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \} \\ \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \} & <var:Y1> := <nat:7> & \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \land <var:Y1> = <nat:7> \} \end{tabular} Taking a look at the upcoming line of code found in the program , \[ \begin{tabular} {rcl} \{ <var:p> = <var:m> \} & <var:Y0> := <nat:5> & \{ <var:p> = <var:m> \land <var:Y0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:p> = <var:m> }} <var:Y0> := <nat:5> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:p> ; <var:j> := <var:Y1> ; <var:j> := <var:j> + <var:Y0> {{ <var:j> = <nat:7> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Y0> = <nat:5> /\ <var:Y1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:Y0> = <nat:5> /\ <var:j> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:m> /\ <var:j> = <nat:7> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 