\begin{document} \begin{theorem} Consider the following code such that \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:2> + <var:v> * <var:q> ; <var:v> := <var:v> * <var:q> ; <var:v> := <nat:2> + <var:v> * <var:q> ; <var:v> := <nat:1> + <var:v> * <var:q> \end{verbatim} Allowing that we have $ <var:q> = <var:f> $ ahead of interpreting the list of instructions , then we see $ <var:v> = <nat:1> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> + <nat:1> $ once set of commands is done . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be shown using Hoare logic . Now , we see the environment update line \verb | <var:v> := <nat:1> ; | . This command forwards the condition $ \{ <var:q> = <var:f> \} $ as the condition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \} $ . This is ensured with the assignment rule given in standard Hoare logic . Looking at the subsequent piece of code contained in the code segment , we see the variable update code \verb | <var:v> := <nat:2> + <var:v> * <var:q> ; | . This statement forwards the condition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \} $ as the postcondition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> + <nat:2> \} $ . Honing in on the next line of code in the list of instructions , we have the binding line \verb | <var:v> := <var:v> * <var:q> ; | . This statement redefines the condition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> + <nat:2> \} $ toward $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + \} $ . Immediately following , the assignment statement defining $ <nat:2> + <var:v> * <var:q> $ into $ <var:v>$ . This line transfers the condition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + \} $ to the postcondition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> \} $ . Focusing on the next line of code in our list of instructions , we see the variable update statement assigning $ <nat:1> + <var:v> * <var:q$ to $ <var:v>$ . This moves the condition $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:q> = <var:f> \land <var:v> = <nat:1> \times <var:f> ^ <nat:4> + <nat:2> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:q> = <var:f> }} <var:v> := <nat:1> ; <var:v> := <nat:2> + <var:v> * <var:q> ; <var:v> := <var:v> * <var:q> ; <var:v> := <nat:2> + <var:v> * <var:q> ; <var:v> := <nat:1> + <var:v> * <var:q> {{ <var:v> = <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:v> = <nat:1> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:v> = <nat:1> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:v> = <nat:1> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:v> = <nat:1> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 