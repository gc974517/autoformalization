\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:g1> := <var:F> ; <var:g2> := <var:g1> * <var:F> ; <var:g3> := <var:g2> * <var:F> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:9> ; <var:O> := <var:g3> <var:O> := <var:O> + <var:g2> <var:O> := <var:O> + <var:g1> <var:O> := <var:O> + <var:g0> \end{verbatim} Allowing it to be that $ <var:F> = <var:p> $ ahead of the evaluation of the program then $ <var:O> = <nat:9> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:5> $ after program finishes . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:F> = <var:p> \} \\ <var:g1> := <var:F> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <var:p> \} \\ <var:g2> := <var:g1> * <var:F> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:F> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \} \\ <var:g0> := <nat:5> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} \\ <var:g1> := <var:g1> * <nat:4> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <nat:4> \cdot <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} \\ <var:g2> := <var:g2> * <nat:7> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <nat:4> \cdot <var:p> \land <var:g2> = <nat:7> \cdot <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} \\ <var:g3> := <var:g3> * <nat:9> ; \\ \{ <var:F> = <var:p> \land <var:g1> = <nat:4> \cdot <var:p> \land <var:g2> = <nat:7> \cdot <var:p> ^ <nat:2> \land <var:g3> = <nat:9> \cdot <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} \\ <var:O> := <var:g3> \\ \{ <var:F> = <var:p> \land <var:g1> = <nat:4> \cdot <var:p> \land <var:g2> = <nat:7> \cdot <var:p> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:O> = <nat:9> \cdot <var:p> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:g2> \\ \{ <var:F> = <var:p> \land <var:g1> = <nat:4> \cdot <var:p> \land <var:g0> = <nat:5> \land <var:O> = <nat:9> \cdot <var:p> ^ <nat:3> + <nat:7> \cdot <var:p> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:g1> \\ \{ <var:F> = <var:p> \land <var:g0> = <nat:5> \land <var:O> = <nat:9> \cdot <var:p> ^ <nat:3> + <nat:7> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> \} \\ <var:O> := <var:O> + <var:g0> \\ \{ <var:F> = <var:p> \land <var:O> = <nat:9> \cdot <var:p> ^ <nat:3> + <nat:7> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:5> \} \end{eqnarray} Hence , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:F> = <var:p> }} <var:g1> := <var:F> ; <var:g2> := <var:g1> * <var:F> ; <var:g3> := <var:g2> * <var:F> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:9> ; <var:O> := <var:g3> <var:O> := <var:O> + <var:g2> <var:O> := <var:O> + <var:g1> <var:O> := <var:O> + <var:g0> {{ <var:O> = <nat:9> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <nat:4> * <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <nat:4> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <nat:4> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g3> = <nat:9> * <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <nat:4> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:9> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g1> = <nat:4> * <var:p> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:9> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:9> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:O> = <nat:9> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 