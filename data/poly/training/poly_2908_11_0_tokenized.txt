\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:m0> := <nat:1> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:S> ; <var:m2> := <var:m2> * <var:S> ; <var:m3> := <nat:7> ; <var:m3> := <var:m3> * <var:S> ; <var:m3> := <var:m3> * <var:S> ; <var:m3> := <var:m3> * <var:S> ; <var:b> := <var:m3> ; <var:b> := <var:b> + <var:m2> ; <var:b> := <var:b> + <var:m0> \end{verbatim} Allowing that we have $ <var:S> = <var:Q> $ prior to evaluating this segment of code it follows that we have $ <var:b> = <nat:7> \times <var:Q> ^ <nat:3> + <nat:9> \times <var:Q> ^ <nat:2> + <nat:1> $ once list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:Q> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \} \\ <var:m2> := <nat:9> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \} \\ <var:m2> := <var:m2> * <var:S> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> \} \\ <var:m2> := <var:m2> * <var:S> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \} \\ <var:m3> := <nat:7> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:m3> = <nat:7> \} \\ <var:m3> := <var:m3> * <var:S> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:m3> = <nat:7> \cdot <var:Q> \} \\ <var:m3> := <var:m3> * <var:S> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:m3> = <nat:7> \cdot <var:Q> ^ <nat:2> \} \\ <var:m3> := <var:m3> * <var:S> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:m3> = <nat:7> \cdot <var:Q> ^ <nat:3> \} \\ <var:b> := <var:m3> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:m2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:b> = <nat:7> \cdot <var:Q> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:m2> ; \\ \{ <var:S> = <var:Q> \land <var:m0> = <nat:1> \land <var:b> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:m0> \\ \{ <var:S> = <var:Q> \land <var:b> = <nat:7> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:S> = <var:Q> }} <var:m0> := <nat:1> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:S> ; <var:m2> := <var:m2> * <var:S> ; <var:m3> := <nat:7> ; <var:m3> := <var:m3> * <var:S> ; <var:m3> := <var:m3> * <var:S> ; <var:m3> := <var:m3> * <var:S> ; <var:b> := <var:m3> ; <var:b> := <var:b> + <var:m2> ; <var:b> := <var:b> + <var:m0> {{ <var:b> = <nat:7> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:m3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:m3> = <nat:7> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:b> = <nat:7> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:m0> = <nat:1> /\ <var:b> = <nat:7> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:b> = <nat:7> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 