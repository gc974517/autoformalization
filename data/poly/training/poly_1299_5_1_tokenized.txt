\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:d> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:a> := <var:p1> <var:a> := <var:a> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:d> = <var:j> $ prior to executing our set of instructions , it follows that we see $ <var:a> = <nat:4> \cdot <var:j> + <nat:2> $ when set of commands is done . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:d> = <var:j> \} \\ <var:p1> := <var:d> ; \\ \{ <var:d> = <var:j> \land <var:p1> = <var:j> \} \end{eqnarray} Furthering the evaluation of this set of instructions produces : \begin{eqnarray} <var:p0> := <nat:2> ; \\ \{ <var:d> = <var:j> \land <var:p1> = <var:j> \land <var:p0> = <nat:2> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:d> = <var:j> \land <var:p1> = <nat:4> * <var:j> \land <var:p0> = <nat:2> \} \\ <var:a> := <var:p1> \\ \{ <var:d> = <var:j> \land <var:p0> = <nat:2> \land <var:a> = <nat:4> * <var:j> \} \\ <var:a> := <var:a> + <var:p0> \\ \{ <var:d> = <var:j> \land <var:a> = <nat:4> * <var:j> + <nat:2> \} \end{eqnarray} Thus , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:d> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:a> := <var:p1> <var:a> := <var:a> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:d> = <var:j> }} <def:poly> {{ <var:a> = <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:p1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:p1> = <var:j> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:p1> = <nat:4> * <var:j> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:p0> = <nat:2> /\ <var:a> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:a> = <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 