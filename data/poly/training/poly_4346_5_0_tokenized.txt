\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:x> ; <var:a> := <var:c1> ; <var:a> := <var:a> + <var:c0> \end{verbatim} Given it to hold that $ <var:x> = <var:k> $ before the evaluation of this code segment then $ <var:a> = <nat:2> * <var:k> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our code segment is given using typical Hoare logic . Advancing to the next command contained in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:k> \} & <var:c0> := <nat:3> & \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \} \end{tabular} This is shown to be logically sound by the variable binding law in typical Hoare logic . Observing the subsequent commands seen in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:k> \} & <var:c0> := <nat:3> & \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \} \\ \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \} & <var:c1> := <nat:2> & \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} \end{tabular} Moving onward , \[ \begin{tabular} {rcl} \{ <var:x> = <var:k> \} & <var:c0> := <nat:3> & \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \} \end{tabular} This is ensured using the binding rule in usual Hoare logic . Looking at the next line found in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:x> = <var:k> \} & <var:c0> := <nat:3> & \{ <var:x> = <var:k> \land <var:c0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:x> = <var:k> }} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:x> ; <var:a> := <var:c1> ; <var:a> := <var:a> + <var:c0> {{ <var:a> = <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:c0> = <nat:3> /\ <var:a> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:k> /\ <var:a> = <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 