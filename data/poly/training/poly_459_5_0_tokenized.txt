\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:l> ; <var:I> := <var:v1> ; <var:I> := <var:I> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:l> = <var:P> $ ahead of the execution of this series of instructions , then we have $ <var:I> = <nat:2> \cdot <var:P> + <nat:1> $ once code segment has executed . \end{theorem} \begin{proof} The course of logic for our list of instructions can be seen through standard Hoare techniques . Now , we see \begin{eqnarray} \{ <var:l> = <var:P> \} \, <var:v0> := <nat:1> \, \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \} \\ \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \} \, <var:v1> := <nat:2> \, \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \} \\ \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \} \, <var:v1> := <var:v1> * <var:l> \, \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \times <var:P> \} \\ \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \land <var:v1> = <nat:2> \times <var:P> \} \, <var:I> := <var:v1> \, \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \land <var:I> = <nat:2> \times <var:P> \} \end{eqnarray} Following , we see \begin{eqnarray} \{ <var:l> = <var:P> \} \, <var:v0> := <nat:1> \, \{ <var:l> = <var:P> \land <var:v0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:l> ; <var:I> := <var:v1> ; <var:I> := <var:I> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:l> = <var:P> }} <def:poly> {{ <var:I> = <nat:2> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:v0> = <nat:1> /\ <var:I> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:P> /\ <var:I> = <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 