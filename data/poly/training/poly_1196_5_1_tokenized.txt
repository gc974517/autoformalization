\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R1> := <var:u> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:3> ; <var:O> := <var:R1> <var:O> := <var:O> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:u> = <var:E> $ for all integers $ <var:E> $ before evaluating the code , it must be that we have $ <var:O> = <nat:3> * <var:E> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:u> = <var:E> \} \\ <var:R1> := <var:u> ; \\ \{ <var:u> = <var:E> \land <var:R1> = <var:E> \} \end{eqnarray} Furthering executing this series of instructions results in : \begin{eqnarray} <var:R0> := <nat:1> ; \\ \{ <var:u> = <var:E> \land <var:R1> = <var:E> \land <var:R0> = <nat:1> \} \\ <var:R1> := <var:R1> * <nat:3> ; \\ \{ <var:u> = <var:E> \land <var:R1> = <nat:3> \cdot <var:E> \land <var:R0> = <nat:1> \} \\ <var:O> := <var:R1> \\ \{ <var:u> = <var:E> \land <var:R0> = <nat:1> \land <var:O> = <nat:3> \cdot <var:E> \} \\ <var:O> := <var:O> + <var:R0> \\ \{ <var:u> = <var:E> \land <var:O> = <nat:3> \cdot <var:E> + <nat:1> \} \end{eqnarray} Thusly , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:u> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:3> ; <var:O> := <var:R1> <var:O> := <var:O> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:u> = <var:E> }} <def:poly> {{ <var:O> = <nat:3> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:R1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:R1> = <var:E> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:R1> = <nat:3> * <var:E> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:R0> = <nat:1> /\ <var:O> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:E> /\ <var:O> = <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 