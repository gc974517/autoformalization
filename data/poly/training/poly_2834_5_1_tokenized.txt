\begin{document} \begin{theorem} Let the following code as \begin{verbatim} <var:Z1> := <var:Q> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:v> := <var:Z1> <var:v> := <var:v> + <var:Z0> \end{verbatim} Assume that we have $ <var:Q> = <var:E> $ before running our code segment , it follows that we have $ <var:v> = <nat:1> \times <var:E> + <nat:5> $ once program has executed . \end{theorem} \begin{proof} The argument for the program is demonstrated using Hoare techniques . Shifting focus toward the next line found in the set of instructions , the variable update code assigning $ <var:Q> $ as $ <var:Z1>$ . This transfers $ \{ <var:Q> = <var:E> \} $ to the condition $ \{ <var:Q> = <var:E> \land <var:Z1> = <var:E> \} $ . Moving forward to the next step , the variable binding line \verb | <var:Z0> := <nat:5> ; | . This moves the condition $ \{ <var:Q> = <var:E> \land <var:Z1> = <var:E> \} $ toward the postcondition $ \{ <var:Q> = <var:E> \land <var:Z1> = <var:E> \land <var:Z0> = <nat:5> \} $ . This is given using the assignment rule obtained from usual Hoare reasoning . Advancing to the subsequent statement contained in the code segment , we see the assignment statement \verb | <var:Z1> := <var:Z1> * <nat:1> ; | . This transfers the condition $ \{ <var:Q> = <var:E> \land <var:Z1> = <var:E> \land <var:Z0> = <nat:5> \} $ to the postcondition $ \{ <var:Q> = <var:E> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z0> = <nat:5> \} $ . This is shown using the assignment law from Hoare reasoning . Advancing , we see the environment update statement \verb | <var:v> := <var:Z1> | . This command transfers the condition $ \{ <var:Q> = <var:E> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z0> = <nat:5> \} $ as $ \{ <var:Q> = <var:E> \land <var:Z0> = <nat:5> \land <var:v> = <nat:1> * <var:E> \} $ . Looking at the following statement contained in the code , we see the assignment statement giving $ <var:v> + <var:Z0$ as $ <var:v>$ . This line transfers $ \{ <var:Q> = <var:E> \land <var:Z0> = <nat:5> \land <var:v> = <nat:1> * <var:E> \} $ to $ \{ <var:Q> = <var:E> \land <var:v> = <nat:1> * <var:E> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Q> = <var:E> }} <var:Z1> := <var:Q> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:1> ; <var:v> := <var:Z1> <var:v> := <var:v> + <var:Z0> {{ <var:v> = <nat:1> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:Z1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:Z1> = <var:E> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:v> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:E> /\ <var:v> = <nat:1> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 