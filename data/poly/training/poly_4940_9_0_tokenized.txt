\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:G> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:G> ; <var:p2> := <var:p2> * <var:G> ; <var:K> := <var:p2> ; <var:K> := <var:K> + <var:p1> ; <var:K> := <var:K> + <var:p0> \end{verbatim} Assume that $ <var:G> = <var:Y> $ --- for some natural numbers $ <var:Y> $ --- ahead of the execution of the set of commands it follows that we see $ <var:K> = <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is shown by Hoare techniques . Going to the next step , \verb | { <var:G> = <var:Y> } <var:p0> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> } | , \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> } <var:p1> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> } | , \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> } <var:p1> := <var:p1> * <var:G> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \times <var:Y> } | and \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \times <var:Y> } <var:p2> := <nat:8> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \times <var:Y> \land <var:p2> = <nat:8> } | . Immediately following , we have \verb | { <var:G> = <var:Y> } <var:p0> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> } | and \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> } <var:p1> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> } | . This is guaranteed by the environment update law found in Hoare techniques . Going forward , we have \verb | { <var:G> = <var:Y> } <var:p0> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> } | , \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> } <var:p1> := <nat:3> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> } | and \verb | { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> } <var:p1> := <var:p1> * <var:G> { <var:G> = <var:Y> \land <var:p0> = <nat:3> \land <var:p1> = <nat:3> \times <var:Y> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:G> = <var:Y> }} <var:p0> := <nat:3> ; <var:p1> := <nat:3> ; <var:p1> := <var:p1> * <var:G> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:G> ; <var:p2> := <var:p2> * <var:G> ; <var:K> := <var:p2> ; <var:K> := <var:K> + <var:p1> ; <var:K> := <var:K> + <var:p0> {{ <var:K> = <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:Y> /\ <var:p2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:Y> /\ <var:p2> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:Y> /\ <var:p2> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:3> * <var:Y> /\ <var:K> = <nat:8> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:p0> = <nat:3> /\ <var:K> = <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:K> = <nat:8> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 