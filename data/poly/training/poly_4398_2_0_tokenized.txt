\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:K> := <var:x0> \end{verbatim} Allowing , taking positive coefficients $ <var:R> $ , it to be that $ <var:X> = <var:R> $ prior to executing our set of commands it must be that $ <var:K> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is given through Hoare techniques . Immediately after , we have the environment update statement \verb | <var:x0> := <nat:1> ; | . This moves the precondition $ \{ <var:X> = <var:R> \} $ toward $ \{ <var:X> = <var:R> \land <var:x0> = <nat:1> \} $ . This is shown to be logically sound with the assignment inference rule of typical Hoare logic . Advancing , the line yielding $ <var:x0$ into $ <var:K>$ . This command moves $ \{ <var:X> = <var:R> \land <var:x0> = <nat:1> \} $ to the condition $ \{ <var:X> = <var:R> \land <var:K> = <nat:1> \} $ . This is guaranteed with the assignment law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:X> = <var:R> }} <var:x0> := <nat:1> ; <var:K> := <var:x0> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 