\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:7> ; <var:A> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:x> = <var:L> $ --- for every integers $ <var:L> $ --- prior to evaluating this code it must be that $ <var:A> = <nat:7> $ once series of commands executes . \end{theorem} \begin{proof} Using usual Hoare techniques gives us : \begin{eqnarray} \{ <var:x> = <var:L> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:x> = <var:L> \land <var:i0> = <nat:7> \} \\ <var:A> := <var:i0> \\ \{ <var:x> = <var:L> \land <var:A> = <nat:7> \} \end{eqnarray} Considering the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:A> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:x> = <var:L> }} <def:poly> {{ <var:A> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:L> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:L> /\ <var:A> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 