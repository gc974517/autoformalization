\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:2> ; <var:Y> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:m> = <var:e> $ , for some natural coefficients $ <var:e> $ , before evaluating our segment of code , it must be that $ <var:Y> = <nat:2> $ when code is done executing . \end{theorem} \begin{proof} The argument for this list of instructions can be seen with usual Hoare reasoning . Moving forward to the next step , we have the binding command \verb | <var:X0> := <nat:2> ; | . This advances $ \{ <var:m> = <var:e> \} $ into $ \{ <var:m> = <var:e> \land <var:X0> = <nat:2> \} $ . Next , we have the environment update code assigning $ <var:X0$ into $ <var:Y>$ . This statement takes $ \{ <var:m> = <var:e> \land <var:X0> = <nat:2> \} $ to the postcondition $ \{ <var:m> = <var:e> \land <var:Y> = <nat:2> \} $ . This is shown with the assignment rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:2> ; <var:Y> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:m> = <var:e> }} <def:poly> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 