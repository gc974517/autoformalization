\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:I> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:6> ; <var:Q> := <var:k1> <var:Q> := <var:Q> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Given it to hold that $ <var:I> = <var:X> $ given some $ <var:X> $ before running the list of commands it must be that we see $ <var:Q> = <nat:6> \cdot <var:X> + <nat:9> $ when program is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:X> \} \\ <var:k1> := <var:I> ; \\ \{ <var:I> = <var:X> \land <var:k1> = <var:X> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:I> = <var:X> \land <var:k1> = <var:X> \land <var:k0> = <nat:9> \} \\ <var:k1> := <var:k1> * <nat:6> ; \\ \{ <var:I> = <var:X> \land <var:k1> = <nat:6> \cdot <var:X> \land <var:k0> = <nat:9> \} \\ <var:Q> := <var:k1> \\ \{ <var:I> = <var:X> \land <var:k0> = <nat:9> \land <var:Q> = <nat:6> \cdot <var:X> \} \end{eqnarray} Continuing interpreting the set of commands gives us : \begin{eqnarray} <var:Q> := <var:Q> + <var:k0> \\ \{ <var:I> = <var:X> \land <var:Q> = <nat:6> \cdot <var:X> + <nat:9> \} \end{eqnarray} Allowing executing this list of commands produces : \begin{eqnarray} \end{eqnarray} The application of standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:I> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:6> ; <var:Q> := <var:k1> <var:Q> := <var:Q> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <def:poly> {{ <var:Q> = <nat:6> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:k1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:k1> = <var:X> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:k1> = <nat:6> * <var:X> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:k0> = <nat:9> /\ <var:Q> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:Q> = <nat:6> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 