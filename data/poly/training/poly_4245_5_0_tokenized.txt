\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:N> ; <var:g> := <var:Q1> ; <var:g> := <var:g> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Given , with some positive integer coefficients $ <var:j> $ , that we have $ <var:N> = <var:j> $ ahead of executing the set of commands then we see $ <var:g> = <nat:2> \cdot <var:j> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be given by Hoare reasoning . Looking at the subsequent bit of code seen in our set of instructions , we have the environment update line \verb | <var:Q0> := <nat:8> ; | . This transfers the condition $ \{ <var:N> = <var:j> \} $ as the condition $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \} $ . This is shown with the assignment rule defined by standard Hoare techniques . Moving on to the next line of code found in our list of commands , we have the variable assignmet statement binding $ <nat:2> $ to $ <var:Q1>$ . This command transfers $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \} $ to the condition $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:2> \} $ . This is shown to be logically sound with the assignment law found in Hoare reasoning . Jumping to the upcoming piece of code seen in our list of commands , we see the variable binding statement giving $ <var:Q1> * <var:N> $ toward $ <var:Q1>$ . This takes the condition $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:2> \} $ as the postcondition $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:2> \times <var:j> \} $ . Taking another step toward the upcoming piece of code contained in the list of commands , we see the assignment code assigning $ <var:Q1> $ into $ <var:g>$ . This line moves $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:2> \times <var:j> \} $ as $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:g> = <nat:2> \times <var:j> \} $ . This is known to be sound by the assignment scheme from standard Hoare techniques . Jumping to the following bit of code seen in our set of commands , we see the variable assignmet statement defining $ <var:g> + <var:Q0$ to $ <var:g>$ . This code moves $ \{ <var:N> = <var:j> \land <var:Q0> = <nat:8> \land <var:g> = <nat:2> \times <var:j> \} $ as the postcondition $ \{ <var:N> = <var:j> \land <var:g> = <nat:2> \times <var:j> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:N> ; <var:g> := <var:Q1> ; <var:g> := <var:g> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:N> = <var:j> }} <def:poly> {{ <var:g> = <nat:2> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:g> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:j> /\ <var:g> = <nat:2> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 