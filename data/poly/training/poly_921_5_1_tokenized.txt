\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:N1> := <var:S> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:C> := <var:N1> <var:C> := <var:C> + <var:N0> \end{verbatim} Allow $ <var:S> = <var:w> $ ahead of evaluating our program it must be that we see $ <var:C> = <nat:3> \cdot <var:w> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code is shown with typical Hoare logic . After , we have the code defining $ <var:S> $ into $ <var:N1>$ . This takes the precondition $ \{ <var:S> = <var:w> \} $ as $ \{ <var:S> = <var:w> \land <var:N1> = <var:w> \} $ . Honing in on the next line of code seen in the set of commands , we see the variable assignmet statement giving $ <nat:1> $ into $ <var:N0>$ . This statement moves the precondition $ \{ <var:S> = <var:w> \land <var:N1> = <var:w> \} $ to $ \{ <var:S> = <var:w> \land <var:N1> = <var:w> \land <var:N0> = <nat:1> \} $ . Moving onward , we have the binding code yielding $ <var:N1> * <nat:3> $ as $ <var:N1>$ . This takes the precondition $ \{ <var:S> = <var:w> \land <var:N1> = <var:w> \land <var:N0> = <nat:1> \} $ toward the condition $ \{ <var:S> = <var:w> \land <var:N1> = <nat:3> \times <var:w> \land <var:N0> = <nat:1> \} $ . This is shown with the assignment law given by standard Hoare techniques . Immediately after , we have the binding statement \verb | <var:C> := <var:N1> | . This line takes the condition $ \{ <var:S> = <var:w> \land <var:N1> = <nat:3> \times <var:w> \land <var:N0> = <nat:1> \} $ into $ \{ <var:S> = <var:w> \land <var:N0> = <nat:1> \land <var:C> = <nat:3> \times <var:w> \} $ . Moving on to the following line seen in our list of commands , the variable assignmet statement giving $ <var:C> + <var:N0$ as $ <var:C>$ . This takes the precondition $ \{ <var:S> = <var:w> \land <var:N0> = <nat:1> \land <var:C> = <nat:3> \times <var:w> \} $ to $ \{ <var:S> = <var:w> \land <var:C> = <nat:3> \times <var:w> + <nat:1> \} $ . This is shown by the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:S> = <var:w> }} <var:N1> := <var:S> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:C> := <var:N1> <var:C> := <var:C> + <var:N0> {{ <var:C> = <nat:3> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:N1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:N1> = <var:w> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:N1> = <nat:3> * <var:w> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:N0> = <nat:1> /\ <var:C> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:w> /\ <var:C> = <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 