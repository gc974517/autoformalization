\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:1> + <var:J> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:x> = <var:h> $ for positive numbers $ <var:h> $ prior to the execution of our code , it holds that we see $ <var:J> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this code segment can be shown through the below decorated list of instructions . \begin{eqnarray} \{ <var:x> = <var:h> \} \\ <var:J> := <nat:1> ; \\ \{ <var:x> = <var:h> \land <var:J> = <nat:1> \} \\ <var:J> := <nat:4> + <var:J> * <var:x> ; \\ \{ <var:x> = <var:h> \land <var:J> = <nat:1> \times <var:h> + <nat:4> \} \\ <var:J> := <nat:4> + <var:J> * <var:x> ; \\ \{ <var:x> = <var:h> \land <var:J> = <nat:1> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:4> \} \\ <var:J> := <nat:4> + <var:J> * <var:x> ; \\ \{ <var:x> = <var:h> \land <var:J> = <nat:1> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:4> \} \\ <var:J> := <nat:1> + <var:J> * <var:x> \\ \{ <var:x> = <var:h> \land <var:J> = <nat:1> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:1> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:1> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:4> + <var:J> * <var:x> ; <var:J> := <nat:1> + <var:J> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:x> = <var:h> }} <def:poly> {{ <var:J> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:J> = <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:J> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:J> = <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:h> /\ <var:J> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 