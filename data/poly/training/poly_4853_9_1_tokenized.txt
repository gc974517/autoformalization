\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:S> ; <var:l2> := <var:l1> * <var:S> ; <var:l3> := <var:l2> * <var:S> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:l3> := <var:l3> * <nat:6> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Assuming that $ <var:S> = <var:o> $ before interpreting our set of instructions it must be that we see $ <var:O> = <nat:6> \cdot <var:o> ^ <nat:3> + <nat:5> \cdot <var:o> + <nat:6> $ once code segment is done . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is done through usual Hoare techniques . Further , we have the binding statement \verb | <var:l1> := <var:S> ; | . This takes the condition $ \{ <var:S> = <var:o> \} $ as the condition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \} $ . Looking at the proceeding statement found in our list of commands , we see the line assigning $ <var:l1> * <var:S> $ toward $ <var:l2>$ . This command moves $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \} $ as the postcondition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} $ . This is ensured using the assignment rule defined in Hoare reasoning . Further , we see the variable assignmet line \verb | <var:l3> := <var:l2> * <var:S> ; | . This moves the condition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \} $ into the postcondition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} $ . Stepping through , we have the assignment code \verb | <var:l0> := <nat:6> ; | . This command forwards the precondition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \} $ toward the postcondition $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ . Following , the code \verb | <var:l1> := <var:l1> * <nat:5> ; | . This line moves $ \{ <var:S> = <var:o> \land <var:l1> = <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ to $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ . This is rigorously given with the assignment rule defined by standard Hoare reasoning . Moving forward to the next step , we see the variable update statement giving $ <var:l3> * <nat:6> $ into $ <var:l3>$ . This code takes the condition $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ into $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <nat:6> \times <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ . Moving onward , the assignment command yielding $ <var:l3$ as $ <var:O>$ . This forwards the condition $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l3> = <nat:6> \times <var:o> ^ <nat:3> \land <var:l0> = <nat:6> \} $ to the postcondition $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l0> = <nat:6> \land <var:O> = <nat:6> \times <var:o> ^ <nat:3> \} $ . This is guaranteed through the assignment law given in usual Hoare reasoning . Focusing on the upcoming bit of code contained in the list of commands , we have the assignment statement \verb | <var:O> := <var:O> + <var:l1> | . This statement forwards $ \{ <var:S> = <var:o> \land <var:l1> = <nat:5> \times <var:o> \land <var:l2> = <var:o> ^ <nat:2> \land <var:l0> = <nat:6> \land <var:O> = <nat:6> \times <var:o> ^ <nat:3> \} $ into the condition $ \{ <var:S> = <var:o> \land <var:l0> = <nat:6> \land <var:O> = <nat:6> \times <var:o> ^ <nat:3> + <nat:5> \times <var:o> \} $ . Moving on to the next piece of code found in the code , we see the variable assignmet statement \verb | <var:O> := <var:O> + <var:l0> | . This command takes the precondition $ \{ <var:S> = <var:o> \land <var:l0> = <nat:6> \land <var:O> = <nat:6> \times <var:o> ^ <nat:3> + <nat:5> \times <var:o> \} $ to $ \{ <var:S> = <var:o> \land <var:O> = <nat:6> \times <var:o> ^ <nat:3> + <nat:5> \times <var:o> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:S> ; <var:l2> := <var:l1> * <var:S> ; <var:l3> := <var:l2> * <var:S> ; <var:l0> := <nat:6> ; <var:l1> := <var:l1> * <nat:5> ; <var:l3> := <var:l3> * <nat:6> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l1> <var:O> := <var:O> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <def:poly> {{ <var:O> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l3> = <nat:6> * <var:o> ^ <nat:3> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l1> = <nat:5> * <var:o> /\ <var:l2> = <var:o> ^ <nat:2> /\ <var:l0> = <nat:6> /\ <var:O> = <nat:6> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:l0> = <nat:6> /\ <var:O> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:O> = <nat:6> * <var:o> ^ <nat:3> + <nat:5> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 