\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:2> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:x> ; <var:j> := <var:K1> ; <var:j> := <var:j> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Allowing given all positive numbers $ <var:n> $ $ <var:x> = <var:n> $ ahead of the execution of the series of instructions , then we see $ <var:j> = <nat:1> \cdot <var:n> + <nat:2> $ once program has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is shown using typical Hoare logic . Following , we see the variable assignmet statement \verb | <var:K0> := <nat:2> ; | . This moves the precondition $ \{ <var:x> = <var:n> \} $ into the postcondition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \} $ . Moving on to the next step , we see the environment update line defining $ <nat:1> $ to $ <var:K1>$ . This command advances the precondition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \} $ to the condition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:K1> = <nat:1> \} $ . This is sound with the assignment law from typical Hoare techniques . Further , we see the line \verb | <var:K1> := <var:K1> * <var:x> ; | . This transfers the condition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:K1> = <nat:1> \} $ toward the condition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:K1> = <nat:1> \cdot <var:n> \} $ . Looking at the following line in our series of instructions , we have the variable binding code assigning $ <var:K1> $ as $ <var:j>$ . This statement transfers $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:K1> = <nat:1> \cdot <var:n> \} $ toward the postcondition $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:j> = <nat:1> \cdot <var:n> \} $ . This is shown to be logically sound using the assignment rule given in typical Hoare techniques . Shifting focus toward the proceeding line found in the program , we have the variable update statement \verb | <var:j> := <var:j> + <var:K0> | . This forwards $ \{ <var:x> = <var:n> \land <var:K0> = <nat:2> \land <var:j> = <nat:1> \cdot <var:n> \} $ into the condition $ \{ <var:x> = <var:n> \land <var:j> = <nat:1> \cdot <var:n> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:2> ; <var:K1> := <nat:1> ; <var:K1> := <var:K1> * <var:x> ; <var:j> := <var:K1> ; <var:j> := <var:j> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:x> = <var:n> }} <def:poly> {{ <var:j> = <nat:1> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:K0> = <nat:2> /\ <var:j> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:n> /\ <var:j> = <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 