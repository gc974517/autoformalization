\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:T> ; <var:H2> := <var:H1> * <var:T> ; <var:H3> := <var:H2> * <var:T> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:6> ; <var:D> := <var:H3> <var:D> := <var:D> + <var:H2> <var:D> := <var:D> + <var:H1> <var:D> := <var:D> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:T> = <var:I> $ --- given any positive integer coefficients $ <var:I> $ --- before running our list of instructions it holds that we have $ <var:D> = <nat:6> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:T> = <var:I> \} \\ <var:H1> := <var:T> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <var:I> \} \end{eqnarray} Continuing evaluating our code results in : \begin{eqnarray} <var:H2> := <var:H1> * <var:T> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:T> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H3> = <var:I> ^ <nat:3> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H3> = <var:I> ^ <nat:3> \land <var:H0> = <nat:2> \} \\ <var:H1> := <var:H1> * <nat:5> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <nat:5> \cdot <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H3> = <var:I> ^ <nat:3> \land <var:H0> = <nat:2> \} \\ <var:H2> := <var:H2> * <nat:5> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <nat:5> \cdot <var:I> \land <var:H2> = <nat:5> \cdot <var:I> ^ <nat:2> \land <var:H3> = <var:I> ^ <nat:3> \land <var:H0> = <nat:2> \} \\ <var:H3> := <var:H3> * <nat:6> ; \\ \{ <var:T> = <var:I> \land <var:H1> = <nat:5> \cdot <var:I> \land <var:H2> = <nat:5> \cdot <var:I> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:I> ^ <nat:3> \land <var:H0> = <nat:2> \} \\ <var:D> := <var:H3> \\ \{ <var:T> = <var:I> \land <var:H1> = <nat:5> \cdot <var:I> \land <var:H2> = <nat:5> \cdot <var:I> ^ <nat:2> \land <var:H0> = <nat:2> \land <var:D> = <nat:6> \cdot <var:I> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:H2> \\ \{ <var:T> = <var:I> \land <var:H1> = <nat:5> \cdot <var:I> \land <var:H0> = <nat:2> \land <var:D> = <nat:6> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:H1> \\ \{ <var:T> = <var:I> \land <var:H0> = <nat:2> \land <var:D> = <nat:6> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> \} \\ <var:D> := <var:D> + <var:H0> \\ \{ <var:T> = <var:I> \land <var:D> = <nat:6> \cdot <var:I> ^ <nat:3> + <nat:5> \cdot <var:I> ^ <nat:2> + <nat:5> \cdot <var:I> + <nat:2> \} \end{eqnarray} As a consequence , our code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:T> ; <var:H2> := <var:H1> * <var:T> ; <var:H3> := <var:H2> * <var:T> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:5> ; <var:H2> := <var:H2> * <nat:5> ; <var:H3> := <var:H3> * <nat:6> ; <var:D> := <var:H3> <var:D> := <var:D> + <var:H2> <var:D> := <var:D> + <var:H1> <var:D> := <var:D> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:T> = <var:I> }} <def:poly> {{ <var:D> = <nat:6> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <var:I> /\ <var:H2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <var:I> /\ <var:H2> = <var:I> ^ <nat:2> /\ <var:H3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <var:I> /\ <var:H2> = <var:I> ^ <nat:2> /\ <var:H3> = <var:I> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <nat:5> * <var:I> /\ <var:H2> = <var:I> ^ <nat:2> /\ <var:H3> = <var:I> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <nat:5> * <var:I> /\ <var:H2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:H3> = <var:I> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <nat:5> * <var:I> /\ <var:H2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:I> ^ <nat:3> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <nat:5> * <var:I> /\ <var:H2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:H0> = <nat:2> /\ <var:D> = <nat:6> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H1> = <nat:5> * <var:I> /\ <var:H0> = <nat:2> /\ <var:D> = <nat:6> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:H0> = <nat:2> /\ <var:D> = <nat:6> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:D> = <nat:6> * <var:I> ^ <nat:3> + <nat:5> * <var:I> ^ <nat:2> + <nat:5> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 