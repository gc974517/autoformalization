\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:3> ; <var:e> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:O> = <var:N> $ before interpreting the list of commands , it holds that we see $ <var:e> = <nat:3> $ once code executes . \end{theorem} \begin{proof} See that the below decorated code segment . \begin{eqnarray} \{ <var:O> = <var:N> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:O> = <var:N> \land <var:p0> = <nat:3> \} \\ <var:e> := <var:p0> \\ \{ <var:O> = <var:N> \land <var:e> = <nat:3> \} \end{eqnarray} Using standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:e> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:O> = <var:N> }} <def:poly> {{ <var:e> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:e> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 