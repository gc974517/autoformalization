\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:4> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:Q> ; <var:u2> := <var:u2> * <var:Q> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:Q> ; <var:u3> := <var:u3> * <var:Q> ; <var:u3> := <var:u3> * <var:Q> ; <var:o> := <var:u3> ; <var:o> := <var:o> + <var:u2> ; <var:o> := <var:o> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:Q> = <var:q> $ ahead of evaluating the list of commands it must be that $ <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> $ after program has executed . \end{theorem} \begin{proof} The method of proof for the series of commands can be accomplished using standard Hoare techniques . Advancing to the upcoming line of code contained in our code , we have the variable update line \verb | <var:u0> := <nat:4> ; | . This statement advances $ \{ <var:Q> = <var:q> \} $ toward the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \} $ . This is given through the assignment inference rule of typical Hoare logic . Moving on to the next step , we have the assignment command \verb | <var:u2> := <nat:3> ; | . This transfers the precondition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \} $ as the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> \} $ . This is sound with the assignment rule from typical Hoare logic . Moving onward , the variable assignmet statement \verb | <var:u2> := <var:u2> * <var:Q> ; | . This moves $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> \} $ to $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> \} $ . Going to the next step , the code binding $ <var:u2> * <var:Q> $ into $ <var:u2>$ . This transfers the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> \} $ toward $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law of usual Hoare techniques . Focusing on the next bit of code contained in our set of commands , we have the variable assignmet statement \verb | <var:u3> := <nat:7> ; | . This line moves the precondition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> \} $ . Advancing , we see the command defining $ <var:u3> * <var:Q> $ into $ <var:u3>$ . This command redefines the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> \} $ into $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> \} $ . This is deduced by the assignment scheme defined by Hoare techniques . Moving forward , the variable binding code giving $ <var:u3> * <var:Q> $ to $ <var:u3>$ . This statement forwards $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> \} $ into the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> ^ <nat:2> \} $ . Keeping momentum , we see the assignment command \verb | <var:u3> := <var:u3> * <var:Q> ; | . This redefines the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> ^ <nat:2> \} $ to $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> ^ <nat:3> \} $ . Observing the subsequent statement seen in our code segment , we have the assignment code yielding $ <var:u3> $ to $ <var:o>$ . This command transfers $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:u3> = <nat:7> * <var:q> ^ <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:o> = <nat:7> * <var:q> ^ <nat:3> \} $ . Now , we see the variable assignmet command giving $ <var:o> + <var:u2> $ as $ <var:o>$ . This statement transfers the condition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:u2> = <nat:3> * <var:q> ^ <nat:2> \land <var:o> = <nat:7> * <var:q> ^ <nat:3> \} $ as $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> \} $ . Taking another step toward the following bit of code seen in our list of commands , we see the binding code assigning $ <var:o> + <var:u0$ toward $ <var:o>$ . This statement redefines the precondition $ \{ <var:Q> = <var:q> \land <var:u0> = <nat:4> \land <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:Q> = <var:q> \land <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u0> := <nat:4> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:Q> ; <var:u2> := <var:u2> * <var:Q> ; <var:u3> := <nat:7> ; <var:u3> := <var:u3> * <var:Q> ; <var:u3> := <var:u3> * <var:Q> ; <var:u3> := <var:u3> * <var:Q> ; <var:o> := <var:u3> ; <var:o> := <var:o> + <var:u2> ; <var:o> := <var:o> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <def:poly> {{ <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:u3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:u3> = <nat:7> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:u2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:o> = <nat:7> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:u0> = <nat:4> /\ <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o> = <nat:7> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 