\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:N0> := <nat:8> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:q> ; <var:N2> := <nat:3> ; <var:N2> := <var:N2> * <var:q> ; <var:N2> := <var:N2> * <var:q> ; <var:p> := <var:N2> ; <var:p> := <var:p> + <var:N1> ; <var:p> := <var:p> + <var:N0> \end{verbatim} Given it to be that $ <var:q> = <var:Y> $ ahead of evaluating this segment of code it must be that we see $ <var:p> = <nat:3> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:8> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:q> = <var:Y> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \} \\ <var:N1> := <nat:9> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \} \\ <var:N1> := <var:N1> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \cdot <var:Y> \} \\ <var:N2> := <nat:3> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \cdot <var:Y> \land <var:N2> = <nat:3> \} \\ <var:N2> := <var:N2> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \cdot <var:Y> \land <var:N2> = <nat:3> \cdot <var:Y> \} \\ <var:N2> := <var:N2> * <var:q> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \cdot <var:Y> \land <var:N2> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \end{eqnarray} Continuing evaluating our segment of code results in : \begin{eqnarray} <var:p> := <var:N2> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:N1> = <nat:9> \cdot <var:Y> \land <var:p> = <nat:3> \cdot <var:Y> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:N1> ; \\ \{ <var:q> = <var:Y> \land <var:N0> = <nat:8> \land <var:p> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:9> \cdot <var:Y> \} \end{eqnarray} Advancing executing the series of commands gives : \begin{eqnarray} <var:p> := <var:p> + <var:N0> \\ \{ <var:q> = <var:Y> \land <var:p> = <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:9> \cdot <var:Y> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:q> = <var:Y> }} <var:N0> := <nat:8> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:q> ; <var:N2> := <nat:3> ; <var:N2> := <var:N2> * <var:q> ; <var:N2> := <var:N2> * <var:q> ; <var:p> := <var:N2> ; <var:p> := <var:p> + <var:N1> ; <var:p> := <var:p> + <var:N0> {{ <var:p> = <nat:3> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> * <var:Y> /\ <var:N2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> * <var:Y> /\ <var:N2> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> * <var:Y> /\ <var:N2> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:N1> = <nat:9> * <var:Y> /\ <var:p> = <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:N0> = <nat:8> /\ <var:p> = <nat:3> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Y> /\ <var:p> = <nat:3> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 