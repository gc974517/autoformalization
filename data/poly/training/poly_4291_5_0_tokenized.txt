\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:U> ; <var:A> := <var:l1> ; <var:A> := <var:A> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allow that $ <var:U> = <var:O> $ prior to executing our set of instructions it must be that we have $ <var:A> = <nat:1> \times <var:O> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be shown through the below decorated series of instructions . \begin{eqnarray} \{ <var:U> = <var:O> \} \\ <var:l0> := <nat:7> ; \\ \{ <var:U> = <var:O> \land <var:l0> = <nat:7> \} \\ <var:l1> := <nat:1> ; \\ \{ <var:U> = <var:O> \land <var:l0> = <nat:7> \land <var:l1> = <nat:1> \} \\ <var:l1> := <var:l1> * <var:U> ; \\ \{ <var:U> = <var:O> \land <var:l0> = <nat:7> \land <var:l1> = <nat:1> \times <var:O> \} \\ <var:A> := <var:l1> ; \\ \{ <var:U> = <var:O> \land <var:l0> = <nat:7> \land <var:A> = <nat:1> \times <var:O> \} \\ <var:A> := <var:A> + <var:l0> \\ \{ <var:U> = <var:O> \land <var:A> = <nat:1> \times <var:O> + <nat:7> \} \end{eqnarray} Applying standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:7> ; <var:l1> := <nat:1> ; <var:l1> := <var:l1> * <var:U> ; <var:A> := <var:l1> ; <var:A> := <var:A> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:U> = <var:O> }} <def:poly> {{ <var:A> = <nat:1> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:l0> = <nat:7> /\ <var:A> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:O> /\ <var:A> = <nat:1> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 