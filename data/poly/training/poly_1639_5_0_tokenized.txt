\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:e> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:e> = <var:K> $ before the execution of our list of commands then we have $ <var:B> = <nat:8> \times <var:K> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be accomplished by standard Hoare logic . Moving forward to the subsequent piece of code found in the segment of code , we have the binding statement \verb | <var:L0> := <nat:9> ; | . This redefines the condition $ \{ <var:e> = <var:K> \} $ toward the postcondition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \} $ . This is deduced through the assignment inference rule given by usual Hoare reasoning . Moving on to the following piece of code in our set of instructions , we see the variable binding statement \verb | <var:L1> := <nat:8> ; | . This redefines the precondition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \} $ as the condition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:L1> = <nat:8> \} $ . Shifting focus toward the proceeding piece of code seen in our code , the command assigning $ <var:L1> * <var:e> $ into $ <var:L1>$ . This command advances the precondition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:L1> = <nat:8> \} $ into the postcondition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:L1> = <nat:8> \cdot <var:K> \} $ . Considering the following command contained in the segment of code , the variable binding command yielding $ <var:L1> $ to $ <var:B>$ . This forwards the precondition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:L1> = <nat:8> \cdot <var:K> \} $ as the condition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:B> = <nat:8> \cdot <var:K> \} $ . This is sound with the assignment law defined by typical Hoare techniques . Taking another step toward the next line seen in the list of instructions , the variable binding statement defining $ <var:B> + <var:L0$ as $ <var:B>$ . This statement redefines the condition $ \{ <var:e> = <var:K> \land <var:L0> = <nat:9> \land <var:B> = <nat:8> \cdot <var:K> \} $ into the postcondition $ \{ <var:e> = <var:K> \land <var:B> = <nat:8> \cdot <var:K> + <nat:9> \} $ . This is sound by the assignment scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:e> ; <var:B> := <var:L1> ; <var:B> := <var:B> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <def:poly> {{ <var:B> = <nat:8> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:L0> = <nat:9> /\ <var:B> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:B> = <nat:8> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 