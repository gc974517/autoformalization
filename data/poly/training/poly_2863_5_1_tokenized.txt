\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:i> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:2> ; <var:D> := <var:t1> <var:D> := <var:D> + <var:t0> \end{verbatim} Assuming $ <var:i> = <var:M> $ , given all integers $ <var:M> $ , prior to interpreting our set of instructions then $ <var:D> = <nat:2> * <var:M> + <nat:8> $ when list of commands finishes . \end{theorem} \begin{proof} The course of logic for this code is given using typical Hoare reasoning . Now , we see the environment update command yielding $ <var:i> $ toward $ <var:t1>$ . This code moves $ \{ <var:i> = <var:M> \} $ to the condition $ \{ <var:i> = <var:M> \land <var:t1> = <var:M> \} $ . Observing the subsequent step seen in our set of commands , the assignment line assigning $ <nat:8> $ into $ <var:t0>$ . This line advances the precondition $ \{ <var:i> = <var:M> \land <var:t1> = <var:M> \} $ to the condition $ \{ <var:i> = <var:M> \land <var:t1> = <var:M> \land <var:t0> = <nat:8> \} $ . This is shown by the assignment inference rule of Hoare logic . Paying attention to the following statement found in our code segment , we have the statement \verb | <var:t1> := <var:t1> * <nat:2> ; | . This moves the condition $ \{ <var:i> = <var:M> \land <var:t1> = <var:M> \land <var:t0> = <nat:8> \} $ toward the postcondition $ \{ <var:i> = <var:M> \land <var:t1> = <nat:2> \cdot <var:M> \land <var:t0> = <nat:8> \} $ . Honing in on the proceeding bit of code contained in the series of commands , we have the variable binding command assigning $ <var:t1$ into $ <var:D>$ . This statement moves the condition $ \{ <var:i> = <var:M> \land <var:t1> = <nat:2> \cdot <var:M> \land <var:t0> = <nat:8> \} $ as the condition $ \{ <var:i> = <var:M> \land <var:t0> = <nat:8> \land <var:D> = <nat:2> \cdot <var:M> \} $ . Next , we see the environment update line \verb | <var:D> := <var:D> + <var:t0> | . This statement takes $ \{ <var:i> = <var:M> \land <var:t0> = <nat:8> \land <var:D> = <nat:2> \cdot <var:M> \} $ toward $ \{ <var:i> = <var:M> \land <var:D> = <nat:2> \cdot <var:M> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:i> = <var:M> }} <var:t1> := <var:i> ; <var:t0> := <nat:8> ; <var:t1> := <var:t1> * <nat:2> ; <var:D> := <var:t1> <var:D> := <var:D> + <var:t0> {{ <var:D> = <nat:2> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:t1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:t1> = <var:M> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:t0> = <nat:8> /\ <var:D> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:D> = <nat:2> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 