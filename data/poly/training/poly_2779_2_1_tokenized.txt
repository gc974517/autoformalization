\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:2> ; <var:F> := <var:b0> \end{verbatim} Assume that $ <var:Q> = <var:P> $ prior to running our code it holds that we have $ <var:F> = <nat:2> $ after program is done . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:Q> = <var:P> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:Q> = <var:P> \land <var:b0> = <nat:2> \} \\ <var:F> := <var:b0> \\ \{ <var:Q> = <var:P> \land <var:F> = <nat:2> \} \end{eqnarray} Considering the preceding argument , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Q> = <var:P> }} <var:b0> := <nat:2> ; <var:F> := <var:b0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 