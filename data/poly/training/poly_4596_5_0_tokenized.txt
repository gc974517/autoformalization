\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:5> ; <var:z1> := <var:z1> * <var:X> ; <var:r> := <var:z1> ; <var:r> := <var:r> + <var:z0> \end{verbatim} Allowing --- for all natural numbers $ <var:D> $ --- that $ <var:X> = <var:D> $ prior to the evaluation of our code segment , it follows that we have $ <var:r> = <nat:5> \cdot <var:D> + <nat:8> $ once code segment has executed . \end{theorem} \begin{proof} Let the below decorated segment of code . \begin{eqnarray} \{ <var:X> = <var:D> \} \\ <var:z0> := <nat:8> ; \\ \{ <var:X> = <var:D> \land <var:z0> = <nat:8> \} \\ <var:z1> := <nat:5> ; \\ \{ <var:X> = <var:D> \land <var:z0> = <nat:8> \land <var:z1> = <nat:5> \} \\ <var:z1> := <var:z1> * <var:X> ; \\ \{ <var:X> = <var:D> \land <var:z0> = <nat:8> \land <var:z1> = <nat:5> * <var:D> \} \\ <var:r> := <var:z1> ; \\ \{ <var:X> = <var:D> \land <var:z0> = <nat:8> \land <var:r> = <nat:5> * <var:D> \} \\ <var:r> := <var:r> + <var:z0> \\ \{ <var:X> = <var:D> \land <var:r> = <nat:5> * <var:D> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:X> = <var:D> }} <var:z0> := <nat:8> ; <var:z1> := <nat:5> ; <var:z1> := <var:z1> * <var:X> ; <var:r> := <var:z1> ; <var:r> := <var:r> + <var:z0> {{ <var:r> = <nat:5> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:D> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:D> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:D> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:D> /\ <var:z0> = <nat:8> /\ <var:r> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:D> /\ <var:r> = <nat:5> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 