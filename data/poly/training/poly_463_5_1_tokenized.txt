\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:X> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:6> ; <var:k> := <var:A1> <var:k> := <var:k> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allow that we have $ <var:X> = <var:m> $ before the execution of the code , it must be that $ <var:k> = <nat:6> * <var:m> + <nat:2> $ when set of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:m> \} \\ <var:A1> := <var:X> ; \\ \{ <var:X> = <var:m> \land <var:A1> = <var:m> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:X> = <var:m> \land <var:A1> = <var:m> \land <var:A0> = <nat:2> \} \\ <var:A1> := <var:A1> * <nat:6> ; \\ \{ <var:X> = <var:m> \land <var:A1> = <nat:6> \times <var:m> \land <var:A0> = <nat:2> \} \\ <var:k> := <var:A1> \\ \{ <var:X> = <var:m> \land <var:A0> = <nat:2> \land <var:k> = <nat:6> \times <var:m> \} \\ <var:k> := <var:k> + <var:A0> \\ \{ <var:X> = <var:m> \land <var:k> = <nat:6> \times <var:m> + <nat:2> \} \end{eqnarray} Using typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:X> ; <var:A0> := <nat:2> ; <var:A1> := <var:A1> * <nat:6> ; <var:k> := <var:A1> <var:k> := <var:k> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:k> = <nat:6> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:A1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:A1> = <var:m> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:A1> = <nat:6> * <var:m> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:A0> = <nat:2> /\ <var:k> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:k> = <nat:6> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 