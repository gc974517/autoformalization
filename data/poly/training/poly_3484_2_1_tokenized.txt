\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:9> ; <var:w> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Take a set of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:q> = <var:V> $ before the evaluation of the series of commands it holds that $ <var:w> = <nat:9> $ after set of instructions finishes . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be shown with typical Hoare techniques . Next , we see \begin{verbatim} { <var:q> = <var:V> } <var:U0> := <nat:9> { <var:q> = <var:V> \land <var:U0> = <nat:9> } { <var:q> = <var:V> \land <var:U0> = <nat:9> } <var:w> := <var:U0{ <var:q> = <var:V> \land <var:w> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:w> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:q> = <var:V> }} <def:poly> {{ <var:w> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:w> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 