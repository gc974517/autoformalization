\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:1> ; <var:H2> := <nat:3> ; <var:H2> := <var:H2> * <var:Y> ; <var:H2> := <var:H2> * <var:Y> ; <var:H3> := <nat:3> ; <var:H3> := <var:H3> * <var:Y> ; <var:H3> := <var:H3> * <var:Y> ; <var:H3> := <var:H3> * <var:Y> ; <var:O> := <var:H3> ; <var:O> := <var:O> + <var:H2> ; <var:O> := <var:O> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume --- assuming some positive integer coefficients $ <var:S> $ --- it to hold that $ <var:Y> = <var:S> $ ahead of executing the segment of code then we see $ <var:O> = <nat:3> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:1> $ after code segment has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is shown using standard Hoare techniques . Honing in on the upcoming bits of codeseen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:S> \} & <var:H0> := <nat:1> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \} & <var:H2> := <nat:3> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \} & <var:H2> := <var:H2> * <var:Y> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> \} & <var:H2> := <var:H2> * <var:Y> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \} & <var:H3> := <nat:3> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \} & <var:H3> := <var:H3> * <var:Y> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \times <var:S> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \times <var:S> \} & <var:H3> := <var:H3> * <var:Y> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \times <var:S> ^ <nat:2> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \times <var:S> ^ <nat:2> \} & <var:H3> := <var:H3> * <var:Y> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:H3> = <nat:3> \times <var:S> ^ <nat:3> \} \end{tabular} This is ensured using the variable update law defined in usual Hoare logic . Taking a look at the proceeding pieces of code found in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:S> \} & <var:H0> := <nat:1> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \} \\ \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \} & <var:H2> := <nat:3> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \land <var:H2> = <nat:3> \} \end{tabular} This is ensured using the variable update inference rule defined by typical Hoare logic . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:S> \} & <var:H0> := <nat:1> & \{ <var:Y> = <var:S> \land <var:H0> = <nat:1> \} \end{tabular} This is guaranteed with the binding inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:H2> := <nat:3> ; <var:H2> := <var:H2> * <var:Y> ; <var:H2> := <var:H2> * <var:Y> ; <var:H3> := <nat:3> ; <var:H3> := <var:H3> * <var:Y> ; <var:H3> := <var:H3> * <var:Y> ; <var:H3> := <var:H3> * <var:Y> ; <var:O> := <var:H3> ; <var:O> := <var:O> + <var:H2> ; <var:O> := <var:O> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Y> = <var:S> }} <def:poly> {{ <var:O> = <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:H3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:H2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:O> = <nat:3> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:H0> = <nat:1> /\ <var:O> = <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:O> = <nat:3> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 