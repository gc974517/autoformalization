\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:v> \end{verbatim} Assume it to be that $ <var:v> = <var:e> $ prior to executing the list of commands , it follows that we have $ <var:T> = <nat:1> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this code segment can be demonstrated through standard Hoare reasoning . Looking at the next commands found in the program , we see \begin{verbatim} { <var:v> = <var:e> } <var:T> := <nat:1> { <var:v> = <var:e> \land <var:T> = <nat:1> } { <var:v> = <var:e> \land <var:T> = <nat:1> } <var:T> := <nat:1> + <var:T> * <var:v{ <var:v> = <var:e> \land <var:T> = <nat:1> \times <var:e> + <nat:1> } \end{verbatim} This is given by the binding law of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <var:T> := <nat:1> ; <var:T> := <nat:1> + <var:T> * <var:v> {{ <var:T> = <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:T> = <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 