\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:a> ; <var:H> := <var:U1> ; <var:H> := <var:H> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:a> = <var:Z> $ , given any positive numbers $ <var:Z> $ , ahead of executing the set of commands it must be that we see $ <var:H> = <nat:3> \cdot <var:Z> + <nat:9> $ after code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:Z> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:a> = <var:Z> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:3> ; \\ \{ <var:a> = <var:Z> \land <var:U0> = <nat:9> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:a> ; \\ \{ <var:a> = <var:Z> \land <var:U0> = <nat:9> \land <var:U1> = <nat:3> * <var:Z> \} \\ <var:H> := <var:U1> ; \\ \{ <var:a> = <var:Z> \land <var:U0> = <nat:9> \land <var:H> = <nat:3> * <var:Z> \} \\ <var:H> := <var:H> + <var:U0> \\ \{ <var:a> = <var:Z> \land <var:H> = <nat:3> * <var:Z> + <nat:9> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U0> := <nat:9> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:a> ; <var:H> := <var:U1> ; <var:H> := <var:H> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:a> = <var:Z> }} <def:poly> {{ <var:H> = <nat:3> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:U0> = <nat:9> /\ <var:H> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:H> = <nat:3> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 