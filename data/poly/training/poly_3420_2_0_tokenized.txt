\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:J0> := <nat:8> ; <var:q> := <var:J0> \end{verbatim} Allowing , letting positive numbers $ <var:O> $ , it to hold that $ <var:o> = <var:O> $ ahead of the execution of the segment of code , it holds that we have $ <var:q> = <nat:8> $ once code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:O> \} \\ <var:J0> := <nat:8> ; \\ \{ <var:o> = <var:O> \land <var:J0> = <nat:8> \} \\ <var:q> := <var:J0> \\ \{ <var:o> = <var:O> \land <var:q> = <nat:8> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:o> = <var:O> }} <var:J0> := <nat:8> ; <var:q> := <var:J0> {{ <var:q> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:J0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:q> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 