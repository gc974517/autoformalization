\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:3> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:S> ; <var:P2> := <var:P2> * <var:S> ; <var:P3> := <nat:1> ; <var:P3> := <var:P3> * <var:S> ; <var:P3> := <var:P3> * <var:S> ; <var:P3> := <var:P3> * <var:S> ; <var:z> := <var:P3> ; <var:z> := <var:z> + <var:P2> ; <var:z> := <var:z> + <var:P0> \end{verbatim} Allowing --- given integers $ <var:B> $ --- $ <var:S> = <var:B> $ before running the segment of code it holds that we see $ <var:z> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be demonstrated with typical Hoare reasoning . Stepping forward , the assignment line \verb | <var:P0> := <nat:3> ; | . This statement transfers the precondition $ \{ <var:S> = <var:B> \} $ into the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \} $ . Observing the upcoming line of code found in the program , we have the variable binding line \verb | <var:P2> := <nat:3> ; | . This code advances the precondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \} $ into the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \} $ . This is sound with the assignment inference rule given in usual Hoare logic . Considering the upcoming line contained in the set of commands , we see the variable assignmet command \verb | <var:P2> := <var:P2> * <var:S> ; | . This line transfers the precondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \} $ as the postcondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> \} $ . This is shown by the assignment scheme given in standard Hoare reasoning . Looking at the proceeding statement found in the series of commands , we see the environment update line defining $ <var:P2> * <var:S> $ toward $ <var:P2>$ . This code forwards $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> \} $ as the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme defined in standard Hoare reasoning . Moving forward to the upcoming step found in our series of commands , the variable assignmet line assigning $ <nat:1> $ to $ <var:P3>$ . This advances the precondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \} $ as the postcondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \} $ . This is ensured by the assignment law defined by usual Hoare reasoning . Jumping to the proceeding command seen in the set of instructions , the variable binding code \verb | <var:P3> := <var:P3> * <var:S> ; | . This takes the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \} $ to the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> \} $ . Moving forward , we have the environment update command \verb | <var:P3> := <var:P3> * <var:S> ; | . This redefines $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> \} $ to the postcondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> ^ <nat:2> \} $ . Shifting focus toward the next command in the set of instructions , we have the variable assignmet code defining $ <var:P3> * <var:S> $ toward $ <var:P3>$ . This code moves the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> ^ <nat:2> \} $ toward the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> ^ <nat:3> \} $ . Next , we have the variable assignmet statement \verb | <var:z> := <var:P3> ; | . This command redefines the precondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:P3> = <nat:1> \times <var:B> ^ <nat:3> \} $ to the postcondition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:z> = <nat:1> \times <var:B> ^ <nat:3> \} $ . Looking at the subsequent step seen in our list of commands , we see the binding line \verb | <var:z> := <var:z> + <var:P2> ; | . This line forwards the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:P2> = <nat:3> \times <var:B> ^ <nat:2> \land <var:z> = <nat:1> \times <var:B> ^ <nat:3> \} $ toward the condition $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:z> = <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> \} $ . Observing the proceeding line of code found in our series of commands , we have the binding statement binding $ <var:z> + <var:P0$ toward $ <var:z>$ . This command forwards $ \{ <var:S> = <var:B> \land <var:P0> = <nat:3> \land <var:z> = <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> \} $ toward the postcondition $ \{ <var:S> = <var:B> \land <var:z> = <nat:1> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:S> = <var:B> }} <var:P0> := <nat:3> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:S> ; <var:P2> := <var:P2> * <var:S> ; <var:P3> := <nat:1> ; <var:P3> := <var:P3> * <var:S> ; <var:P3> := <var:P3> * <var:S> ; <var:P3> := <var:P3> * <var:S> ; <var:z> := <var:P3> ; <var:z> := <var:z> + <var:P2> ; <var:z> := <var:z> + <var:P0> {{ <var:z> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P3> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:z> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:P0> = <nat:3> /\ <var:z> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:z> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 