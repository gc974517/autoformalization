\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:S1> := <var:X> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:9> ; <var:L> := <var:S1> <var:L> := <var:L> + <var:S0> \end{verbatim} Given that $ <var:X> = <var:o> $ before executing the code , it follows that we have $ <var:L> = <nat:9> * <var:o> + <nat:8> $ once segment of code is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques yields : \begin{eqnarray} \{ <var:X> = <var:o> \} \\ <var:S1> := <var:X> ; \\ \{ <var:X> = <var:o> \land <var:S1> = <var:o> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:X> = <var:o> \land <var:S1> = <var:o> \land <var:S0> = <nat:8> \} \\ <var:S1> := <var:S1> * <nat:9> ; \\ \{ <var:X> = <var:o> \land <var:S1> = <nat:9> * <var:o> \land <var:S0> = <nat:8> \} \\ <var:L> := <var:S1> \\ \{ <var:X> = <var:o> \land <var:S0> = <nat:8> \land <var:L> = <nat:9> * <var:o> \} \\ <var:L> := <var:L> + <var:S0> \\ \{ <var:X> = <var:o> \land <var:L> = <nat:9> * <var:o> + <nat:8> \} \end{eqnarray} Given the preceding argument , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <var:S1> := <var:X> ; <var:S0> := <nat:8> ; <var:S1> := <var:S1> * <nat:9> ; <var:L> := <var:S1> <var:L> := <var:L> + <var:S0> {{ <var:L> = <nat:9> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:S1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:S1> = <var:o> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:S1> = <nat:9> * <var:o> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:S0> = <nat:8> /\ <var:L> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:L> = <nat:9> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 