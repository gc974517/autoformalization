\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:6> ; <var:U> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:e> = <var:P> $ prior to the execution of this list of commands it holds that $ <var:U> = <nat:6> $ once series of instructions terminates . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:e> = <var:P> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:e> = <var:P> \land <var:d0> = <nat:6> \} \\ <var:U> := <var:d0> \\ \{ <var:e> = <var:P> \land <var:U> = <nat:6> \} \end{eqnarray} Given the above , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:6> ; <var:U> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:e> = <var:P> }} <def:poly> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 