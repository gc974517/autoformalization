\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:g> ; <var:L> := <var:d1> ; <var:L> := <var:L> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:g> = <var:e> $ prior to the evaluation of this list of commands it must be that we have $ <var:L> = <nat:5> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the set of commands is evident through typical Hoare reasoning . Advancing to the subsequent pieces of code in the series of instructions , we see \begin{verbatim} { <var:g> = <var:e> } <var:d0> := <nat:4> { <var:g> = <var:e> \land <var:d0> = <nat:4> } { <var:g> = <var:e> \land <var:d0> = <nat:4> } <var:d1> := <nat:5> { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:d1> = <nat:5> } { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:d1> = <nat:5> } <var:d1> := <var:d1> * <var:g> { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:d1> = <nat:5> * <var:e> } { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:d1> = <nat:5> * <var:e> } <var:L> := <var:d1> { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:L> = <nat:5> * <var:e> } { <var:g> = <var:e> \land <var:d0> = <nat:4> \land <var:L> = <nat:5> * <var:e> } <var:L> := <var:L> + <var:d0{ <var:g> = <var:e> \land <var:L> = <nat:5> * <var:e> + <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:g> ; <var:L> := <var:d1> ; <var:L> := <var:L> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:g> = <var:e> }} <def:poly> {{ <var:L> = <nat:5> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:d0> = <nat:4> /\ <var:L> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:L> = <nat:5> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 