\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:p> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:5> ; <var:q> := <var:t1> <var:q> := <var:q> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:p> = <var:E> $ before executing the set of instructions then $ <var:q> = <nat:5> \cdot <var:E> + <nat:9> $ after set of instructions terminates . \end{theorem} \begin{proof} The method of proof for our code segment is accomplished through standard Hoare logic . Advancing to the next step , the assignment command \verb | <var:t1> := <var:p> ; | . This takes the precondition $ \{ <var:p> = <var:E> \} $ toward the condition $ \{ <var:p> = <var:E> \land <var:t1> = <var:E> \} $ . Immediately following , we have the variable assignmet statement letting $ <nat:9> $ toward $ <var:t0>$ . This takes the condition $ \{ <var:p> = <var:E> \land <var:t1> = <var:E> \} $ as $ \{ <var:p> = <var:E> \land <var:t1> = <var:E> \land <var:t0> = <nat:9> \} $ . Taking another step toward the following command contained in the set of commands , we have the environment update command yielding $ <var:t1> * <nat:5> $ toward $ <var:t1>$ . This code takes the condition $ \{ <var:p> = <var:E> \land <var:t1> = <var:E> \land <var:t0> = <nat:9> \} $ toward $ \{ <var:p> = <var:E> \land <var:t1> = <nat:5> \times <var:E> \land <var:t0> = <nat:9> \} $ . This is given with the assignment inference rule in standard Hoare reasoning . Shifting focus toward the upcoming command in our code segment , we see the statement \verb | <var:q> := <var:t1> | . This transfers the precondition $ \{ <var:p> = <var:E> \land <var:t1> = <nat:5> \times <var:E> \land <var:t0> = <nat:9> \} $ toward the postcondition $ \{ <var:p> = <var:E> \land <var:t0> = <nat:9> \land <var:q> = <nat:5> \times <var:E> \} $ . This is deduced through the assignment scheme given in standard Hoare reasoning . Advancing to the subsequent piece of code in our series of commands , we see the binding statement defining $ <var:q> + <var:t0$ into $ <var:q>$ . This redefines the condition $ \{ <var:p> = <var:E> \land <var:t0> = <nat:9> \land <var:q> = <nat:5> \times <var:E> \} $ toward $ \{ <var:p> = <var:E> \land <var:q> = <nat:5> \times <var:E> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:p> ; <var:t0> := <nat:9> ; <var:t1> := <var:t1> * <nat:5> ; <var:q> := <var:t1> <var:q> := <var:q> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <def:poly> {{ <var:q> = <nat:5> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:t1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:t1> = <var:E> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:t1> = <nat:5> * <var:E> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:t0> = <nat:9> /\ <var:q> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:q> = <nat:5> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 