\begin{document} \begin{theorem} Consider a code as \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:3> + <var:y> * <var:b> ; <var:y> := <nat:2> + <var:y> * <var:b> ; <var:y> := <nat:3> + <var:y> * <var:b> ; <var:y> := <nat:2> + <var:y> * <var:b> ; <var:y> := <var:y> * <var:b> ; <var:y> := <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> \end{verbatim} Assume --- letting natural coefficients $ <var:e> $ --- it to be that $ <var:b> = <var:e> $ ahead of running the code it follows that we have $ <var:y> = <nat:4> \times <var:e> ^ <nat:10> + <nat:1> \times <var:e> ^ <nat:9> + <nat:1> \times <var:e> ^ <nat:8> + <nat:3> \times <var:e> ^ <nat:7> + <nat:2> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> + <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} Note that the below decorated series of instructions . \begin{eqnarray} \{ <var:b> = <var:e> \} \\ <var:y> := <nat:4> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:1> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> \} \\ <var:y> := <nat:3> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> \} \\ <var:y> := <nat:2> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> \} \\ <var:y> := <nat:3> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> \} \\ <var:y> := <nat:2> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> \} \\ <var:y> := <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + \} \\ <var:y> := <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + \} \\ <var:y> := <nat:1> + <var:y> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> \} \\ <var:y> := <nat:1> + <var:y> * <var:b> \\ \{ <var:b> = <var:e> \land <var:y> = <nat:4> * <var:e> ^ <nat:10> + <nat:1> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:b> = <var:e> }} <var:y> := <nat:4> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:3> + <var:y> * <var:b> ; <var:y> := <nat:2> + <var:y> * <var:b> ; <var:y> := <nat:3> + <var:y> * <var:b> ; <var:y> := <nat:2> + <var:y> * <var:b> ; <var:y> := <var:y> * <var:b> ; <var:y> := <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> ; <var:y> := <nat:1> + <var:y> * <var:b> {{ <var:y> = <nat:4> * <var:e> ^ <nat:10> + <nat:1> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:y> = <nat:4> * <var:e> ^ <nat:10> + <nat:1> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 