\begin{document} \begin{theorem} Consider the following segment of code as follows \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:1> + <var:X> * <var:c> ; <var:X> := <nat:4> + <var:X> * <var:c> \end{verbatim} Given that $ <var:c> = <var:g> $ before the execution of our program , it follows that we see $ <var:X> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is demonstrated with usual Hoare logic . Immediately after , the variable update statement yielding $ <nat:4> $ to $ <var:X>$ . This transfers the precondition $ \{ <var:c> = <var:g> \} $ toward the condition $ \{ <var:c> = <var:g> \land <var:X> = <nat:4> \} $ . This is rigorously given using the assignment scheme obtained from typical Hoare techniques . Moving on to the next step , we see the assignment command \verb | <var:X> := <nat:1> + <var:X> * <var:c> ; | . This statement advances the condition $ \{ <var:c> = <var:g> \land <var:X> = <nat:4> \} $ toward the postcondition $ \{ <var:c> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + <nat:1> \} $ . This is shown to be logically sound by the assignment scheme defined by standard Hoare reasoning . Advancing on , we have the binding command \verb | <var:X> := <nat:4> + <var:X> * <var:c> | . This command moves $ \{ <var:c> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> + <nat:1> \} $ as the condition $ \{ <var:c> = <var:g> \land <var:X> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:1> \cdot <var:g> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:c> = <var:g> }} <var:X> := <nat:4> ; <var:X> := <nat:1> + <var:X> * <var:c> ; <var:X> := <nat:4> + <var:X> * <var:c> {{ <var:X> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:X> = <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:g> /\ <var:X> = <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 