\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:6> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:O> ; <var:P> := <var:e1> ; <var:P> := <var:P> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Assuming $ <var:O> = <var:o> $ prior to executing the code it must be that we have $ <var:P> = <nat:1> \cdot <var:o> + <nat:6> $ when list of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be given by usual Hoare logic . Further , \begin{eqnarray} \{ <var:O> = <var:o> \} \, <var:e0> := <nat:6> \, \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \} \end{eqnarray} This is guaranteed with the variable update inference rule defined in standard Hoare reasoning . Now , \begin{eqnarray} \{ <var:O> = <var:o> \} \, <var:e0> := <nat:6> \, \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \} \end{eqnarray} This is sound through the assignment law given in typical Hoare logic . Moving on to the subsequent commands seen in our segment of code , we have \begin{eqnarray} \{ <var:O> = <var:o> \} \, <var:e0> := <nat:6> \, \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \} \\ \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \} \, <var:e1> := <nat:1> \, \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \} \\ \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \} \, <var:e1> := <var:e1> * <var:O> \, \{ <var:O> = <var:o> \land <var:e0> = <nat:6> \land <var:e1> = <nat:1> \cdot <var:o> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:6> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:O> ; <var:P> := <var:e1> ; <var:P> := <var:P> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <def:poly> {{ <var:P> = <nat:1> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:e0> = <nat:6> /\ <var:P> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:P> = <nat:1> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 