\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:d> ; <var:o2> := <var:o1> * <var:d> ; <var:o3> := <var:o2> * <var:d> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:5> ; <var:R> := <var:o3> <var:R> := <var:R> + <var:o2> <var:R> := <var:R> + <var:o1> <var:R> := <var:R> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:d> = <var:B> $ prior to interpreting this set of instructions it must be that we have $ <var:R> = <nat:5> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the list of instructions is given using the following decorated series of instructions . \begin{eqnarray} \{ <var:d> = <var:B> \} \\ <var:o1> := <var:d> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <var:B> \} \\ <var:o2> := <var:o1> * <var:d> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <var:B> \land <var:o2> = <var:B> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:d> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <var:B> \land <var:o2> = <var:B> ^ <nat:2> \land <var:o3> = <var:B> ^ <nat:3> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <var:B> \land <var:o2> = <var:B> ^ <nat:2> \land <var:o3> = <var:B> ^ <nat:3> \land <var:o0> = <nat:7> \} \end{eqnarray} Continuing the evaluation of our program results in : \begin{eqnarray} <var:o1> := <var:o1> * <nat:8> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <nat:8> * <var:B> \land <var:o2> = <var:B> ^ <nat:2> \land <var:o3> = <var:B> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:o2> := <var:o2> * <nat:8> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <nat:8> * <var:B> \land <var:o2> = <nat:8> * <var:B> ^ <nat:2> \land <var:o3> = <var:B> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:o3> := <var:o3> * <nat:5> ; \\ \{ <var:d> = <var:B> \land <var:o1> = <nat:8> * <var:B> \land <var:o2> = <nat:8> * <var:B> ^ <nat:2> \land <var:o3> = <nat:5> * <var:B> ^ <nat:3> \land <var:o0> = <nat:7> \} \\ <var:R> := <var:o3> \\ \{ <var:d> = <var:B> \land <var:o1> = <nat:8> * <var:B> \land <var:o2> = <nat:8> * <var:B> ^ <nat:2> \land <var:o0> = <nat:7> \land <var:R> = <nat:5> * <var:B> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:o2> \\ \{ <var:d> = <var:B> \land <var:o1> = <nat:8> * <var:B> \land <var:o0> = <nat:7> \land <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:o1> \\ \{ <var:d> = <var:B> \land <var:o0> = <nat:7> \land <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} \\ <var:R> := <var:R> + <var:o0> \\ \{ <var:d> = <var:B> \land <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> \} \end{eqnarray} Using Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:d> ; <var:o2> := <var:o1> * <var:d> ; <var:o3> := <var:o2> * <var:d> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:8> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:5> ; <var:R> := <var:o3> <var:R> := <var:R> + <var:o2> <var:R> := <var:R> + <var:o1> <var:R> := <var:R> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:d> = <var:B> }} <def:poly> {{ <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <var:B> /\ <var:o2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <var:B> /\ <var:o2> = <var:B> ^ <nat:2> /\ <var:o3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <var:B> /\ <var:o2> = <var:B> ^ <nat:2> /\ <var:o3> = <var:B> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <nat:8> * <var:B> /\ <var:o2> = <var:B> ^ <nat:2> /\ <var:o3> = <var:B> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <nat:8> * <var:B> /\ <var:o2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:o3> = <var:B> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <nat:8> * <var:B> /\ <var:o2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:B> ^ <nat:3> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <nat:8> * <var:B> /\ <var:o2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:o0> = <nat:7> /\ <var:R> = <nat:5> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o1> = <nat:8> * <var:B> /\ <var:o0> = <nat:7> /\ <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:o0> = <nat:7> /\ <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:R> = <nat:5> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 