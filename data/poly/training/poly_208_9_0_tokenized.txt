\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:1> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:w> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:w> ; <var:G2> := <var:G2> * <var:w> ; <var:v> := <var:G2> ; <var:v> := <var:v> + <var:G1> ; <var:v> := <var:v> + <var:G0> \end{verbatim} Given ( assuming some natural numbers $ <var:g> $ ) that $ <var:w> = <var:g> $ before evaluating the segment of code , it must be that we see $ <var:v> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:4> \cdot <var:g> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions is done through standard Hoare techniques . Moving on to the proceeding statements in the segment of code , \begin{eqnarray} \{ <var:w> = <var:g> \} \, <var:G0> := <nat:1> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \} \, <var:G1> := <nat:4> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \} \, <var:G1> := <var:G1> * <var:w> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \} \, <var:G2> := <nat:3> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \} \, <var:G2> := <var:G2> * <var:w> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \times <var:g> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \times <var:g> \} \, <var:G2> := <var:G2> * <var:w> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \times <var:g> ^ <nat:2> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:G2> = <nat:3> \times <var:g> ^ <nat:2> \} \, <var:v> := <var:G2> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \times <var:g> \land <var:v> = <nat:3> \times <var:g> ^ <nat:2> \} \end{eqnarray} This is ensured using the binding law in usual Hoare logic . Taking a look at the next commands found in the list of commands , \begin{eqnarray} \{ <var:w> = <var:g> \} \, <var:G0> := <nat:1> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \} \\ \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \} \, <var:G1> := <nat:4> \, \{ <var:w> = <var:g> \land <var:G0> = <nat:1> \land <var:G1> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:w> = <var:g> }} <var:G0> := <nat:1> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:w> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:w> ; <var:G2> := <var:G2> * <var:w> ; <var:v> := <var:G2> ; <var:v> := <var:v> + <var:G1> ; <var:v> := <var:v> + <var:G0> {{ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:g> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:g> /\ <var:G2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:g> /\ <var:G2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:4> * <var:g> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:G0> = <nat:1> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:g> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 