\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:x1> := <var:R> ; <var:x0> := <nat:6> ; <var:x1> := <var:x1> * <nat:9> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> \end{verbatim} Given that $ <var:R> = <var:f> $ --- given all $ <var:f> \in \mathbb{N} $ --- before interpreting our program it follows that we have $ <var:Z> = <nat:9> * <var:f> + <nat:6> $ after set of commands has terminated . \end{theorem} \begin{proof} The course of logic for this set of commands is shown using typical Hoare techniques . Advancing on , the binding line assigning $ <var:R> $ into $ <var:x1>$ . This statement forwards $ \{ <var:R> = <var:f> \} $ to the postcondition $ \{ <var:R> = <var:f> \land <var:x1> = <var:f> \} $ . This is rigorously given with the assignment scheme defined in standard Hoare logic . Looking at the next statement in our list of commands , we have the binding statement \verb | <var:x0> := <nat:6> ; | . This statement redefines the precondition $ \{ <var:R> = <var:f> \land <var:x1> = <var:f> \} $ to the postcondition $ \{ <var:R> = <var:f> \land <var:x1> = <var:f> \land <var:x0> = <nat:6> \} $ . This is shown using the assignment law of typical Hoare reasoning . Moving onward , we have the statement \verb | <var:x1> := <var:x1> * <nat:9> ; | . This statement redefines the condition $ \{ <var:R> = <var:f> \land <var:x1> = <var:f> \land <var:x0> = <nat:6> \} $ toward the condition $ \{ <var:R> = <var:f> \land <var:x1> = <nat:9> \times <var:f> \land <var:x0> = <nat:6> \} $ . Moving on to the next step contained in our list of commands , we see the command yielding $ <var:x1$ into $ <var:Z>$ . This command takes $ \{ <var:R> = <var:f> \land <var:x1> = <nat:9> \times <var:f> \land <var:x0> = <nat:6> \} $ toward the condition $ \{ <var:R> = <var:f> \land <var:x0> = <nat:6> \land <var:Z> = <nat:9> \times <var:f> \} $ . Advancing on , the variable update statement defining $ <var:Z> + <var:x0$ as $ <var:Z>$ . This transfers $ \{ <var:R> = <var:f> \land <var:x0> = <nat:6> \land <var:Z> = <nat:9> \times <var:f> \} $ toward the postcondition $ \{ <var:R> = <var:f> \land <var:Z> = <nat:9> \times <var:f> + <nat:6> \} $ . This is known to be sound through the assignment inference rule defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:R> = <var:f> }} <var:x1> := <var:R> ; <var:x0> := <nat:6> ; <var:x1> := <var:x1> * <nat:9> ; <var:Z> := <var:x1> <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:9> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:x1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:x1> = <var:f> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:x1> = <nat:9> * <var:f> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:x0> = <nat:6> /\ <var:Z> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:Z> = <nat:9> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 