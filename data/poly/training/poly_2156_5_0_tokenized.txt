\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:H> ; <var:O> := <var:Y1> ; <var:O> := <var:O> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:H> = <var:K> $ before the evaluation of this series of instructions , it follows that we see $ <var:O> = <nat:3> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our segment of code can be given by usual Hoare reasoning . Focusing on the subsequent step in our series of commands , \begin{eqnarray} \{ <var:H> = <var:K> \} \, <var:Y0> := <nat:3> \, \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \} \end{eqnarray} This is sound using the binding inference rule defined in typical Hoare logic . Observing the next bits of codecontained in our series of instructions , we see \begin{eqnarray} \{ <var:H> = <var:K> \} \, <var:Y0> := <nat:3> \, \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \} \\ \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \} \, <var:Y1> := <nat:3> \, \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:3> \} \\ \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:3> \} \, <var:Y1> := <var:Y1> * <var:H> \, \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:3> \times <var:K> \} \\ \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:3> \times <var:K> \} \, <var:O> := <var:Y1> \, \{ <var:H> = <var:K> \land <var:Y0> = <nat:3> \land <var:O> = <nat:3> \times <var:K> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:3> ; <var:Y1> := <var:Y1> * <var:H> ; <var:O> := <var:Y1> ; <var:O> := <var:O> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:H> = <var:K> }} <def:poly> {{ <var:O> = <nat:3> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:Y0> = <nat:3> /\ <var:O> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:K> /\ <var:O> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 