\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:P> ; <var:Q> := <var:H1> ; <var:Q> := <var:Q> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow given any natural coefficients $ <var:n> $ that $ <var:P> = <var:n> $ prior to running the set of commands then we have $ <var:Q> = <nat:5> \cdot <var:n> + <nat:1> $ once set of instructions executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:n> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:P> = <var:n> \land <var:H0> = <nat:1> \} \\ <var:H1> := <nat:5> ; \\ \{ <var:P> = <var:n> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \} \\ <var:H1> := <var:H1> * <var:P> ; \\ \{ <var:P> = <var:n> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> * <var:n> \} \\ <var:Q> := <var:H1> ; \\ \{ <var:P> = <var:n> \land <var:H0> = <nat:1> \land <var:Q> = <nat:5> * <var:n> \} \\ <var:Q> := <var:Q> + <var:H0> \\ \{ <var:P> = <var:n> \land <var:Q> = <nat:5> * <var:n> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:P> ; <var:Q> := <var:H1> ; <var:Q> := <var:Q> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:P> = <var:n> }} <def:poly> {{ <var:Q> = <nat:5> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:H0> = <nat:1> /\ <var:Q> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:n> /\ <var:Q> = <nat:5> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 