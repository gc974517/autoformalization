\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:8> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:F> ; <var:U> := <var:P1> ; <var:U> := <var:U> + <var:P0> \end{verbatim} Assuming --- given integers $ <var:w> $ --- $ <var:F> = <var:w> $ prior to evaluating our set of commands then we have $ <var:U> = <nat:2> * <var:w> + <nat:8> $ after series of commands has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:w> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:F> = <var:w> \land <var:P0> = <nat:8> \} \\ <var:P1> := <nat:2> ; \\ \{ <var:F> = <var:w> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \} \\ <var:P1> := <var:P1> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:P0> = <nat:8> \land <var:P1> = <nat:2> \cdot <var:w> \} \\ <var:U> := <var:P1> ; \\ \{ <var:F> = <var:w> \land <var:P0> = <nat:8> \land <var:U> = <nat:2> \cdot <var:w> \} \\ <var:U> := <var:U> + <var:P0> \\ \{ <var:F> = <var:w> \land <var:U> = <nat:2> \cdot <var:w> + <nat:8> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:P0> := <nat:8> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:F> ; <var:U> := <var:P1> ; <var:U> := <var:U> + <var:P0> {{ <var:U> = <nat:2> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:P0> = <nat:8> /\ <var:P1> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:P0> = <nat:8> /\ <var:U> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:U> = <nat:2> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 