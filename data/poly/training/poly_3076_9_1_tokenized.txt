\begin{document} \begin{theorem} Consider the following series of instructions such that \begin{verbatim} <var:w1> := <var:q> ; <var:w2> := <var:w1> * <var:q> ; <var:w3> := <var:w2> * <var:q> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w3> := <var:w3> * <nat:3> ; <var:Q> := <var:w3> <var:Q> := <var:Q> + <var:w1> <var:Q> := <var:Q> + <var:w0> \end{verbatim} Allow --- letting positive integers $ <var:E> $ --- that $ <var:q> = <var:E> $ ahead of evaluating the set of instructions , it holds that we see $ <var:Q> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the list of commands can be accomplished by typical Hoare techniques . Stepping through , we see \begin{verbatim} { <var:q> = <var:E> } <var:w1> := <var:q> { <var:q> = <var:E> \land <var:w1> = <var:E> } { <var:q> = <var:E> \land <var:w1> = <var:E> } <var:w2> := <var:w1> * <var:q> { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> } { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> } <var:w3> := <var:w2> * <var:q> { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> } { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> } <var:w0> := <nat:1> { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } { <var:q> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } <var:w1> := <var:w1> * <nat:2> { <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } { <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } <var:w3> := <var:w3> * <nat:3> { <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <nat:3> \cdot <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } { <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <nat:3> \cdot <var:E> ^ <nat:3> \land <var:w0> = <nat:1> } <var:Q> := <var:w3{ <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w0> = <nat:1> \land <var:Q> = <nat:3> \cdot <var:E> ^ <nat:3> } { <var:q> = <var:E> \land <var:w1> = <nat:2> \cdot <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w0> = <nat:1> \land <var:Q> = <nat:3> \cdot <var:E> ^ <nat:3> } <var:Q> := <var:Q> + <var:w1{ <var:q> = <var:E> \land <var:w0> = <nat:1> \land <var:Q> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> } { <var:q> = <var:E> \land <var:w0> = <nat:1> \land <var:Q> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> } <var:Q> := <var:Q> + <var:w0{ <var:q> = <var:E> \land <var:Q> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> + <nat:1> } \end{verbatim} This is guaranteed with the assignment rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:q> = <var:E> }} <var:w1> := <var:q> ; <var:w2> := <var:w1> * <var:q> ; <var:w3> := <var:w2> * <var:q> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w3> := <var:w3> * <nat:3> ; <var:Q> := <var:w3> <var:Q> := <var:Q> + <var:w1> <var:Q> := <var:Q> + <var:w0> {{ <var:Q> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w0> = <nat:1> /\ <var:Q> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:1> /\ <var:Q> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:Q> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 