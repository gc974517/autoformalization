\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:H> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:8> ; <var:r> := <var:U1> <var:r> := <var:r> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:H> = <var:P> $ --- for any $ <var:P> \in \mathbb{Z}^+ $ --- ahead of evaluating our list of commands , it holds that we have $ <var:r> = <nat:8> \cdot <var:P> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands can be done through standard Hoare techniques . Jumping to the next bits of codecontained in our program , we see \verb | { <var:H> = <var:P> } <var:U1> := <var:H> { <var:H> = <var:P> \land <var:U1> = <var:P> } | , \verb | { <var:H> = <var:P> \land <var:U1> = <var:P> } <var:U0> := <nat:3> { <var:H> = <var:P> \land <var:U1> = <var:P> \land <var:U0> = <nat:3> } | , \verb | { <var:H> = <var:P> \land <var:U1> = <var:P> \land <var:U0> = <nat:3> } <var:U1> := <var:U1> * <nat:8> { <var:H> = <var:P> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U0> = <nat:3> } | and \verb | { <var:H> = <var:P> \land <var:U1> = <nat:8> \cdot <var:P> \land <var:U0> = <nat:3> } <var:r> := <var:U1{ <var:H> = <var:P> \land <var:U0> = <nat:3> \land <var:r> = <nat:8> \cdot <var:P> } | . Advancing , we see \verb | { <var:H> = <var:P> } <var:U1> := <var:H> { <var:H> = <var:P> \land <var:U1> = <var:P> } | . This is ensured through the environment update scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:H> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:8> ; <var:r> := <var:U1> <var:r> := <var:r> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:H> = <var:P> }} <def:poly> {{ <var:r> = <nat:8> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:U1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:U1> = <var:P> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:U1> = <nat:8> * <var:P> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:U0> = <nat:3> /\ <var:r> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:r> = <nat:8> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 