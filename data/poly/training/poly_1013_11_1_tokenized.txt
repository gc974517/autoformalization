\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:Y1> := <var:e> ; <var:Y2> := <var:Y1> * <var:e> ; <var:Y3> := <var:Y2> * <var:e> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:b> := <var:Y3> <var:b> := <var:b> + <var:Y2> <var:b> := <var:b> + <var:Y1> <var:b> := <var:b> + <var:Y0> \end{verbatim} Assuming that $ <var:e> = <var:z> $ ahead of interpreting this set of commands , it follows that we have $ <var:b> = <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:2> $ once program has finished executing . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:Y1> := <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <var:z> \} \\ <var:Y2> := <var:Y1> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <var:Y1> * <nat:4> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <nat:4> \times <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y2> := <var:Y2> * <nat:1> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <nat:4> \times <var:z> \land <var:Y2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:Y3> = <var:z> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y3> := <var:Y3> * <nat:1> ; \\ \{ <var:e> = <var:z> \land <var:Y1> = <nat:4> \times <var:z> \land <var:Y2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:b> := <var:Y3> \\ \{ <var:e> = <var:z> \land <var:Y1> = <nat:4> \times <var:z> \land <var:Y2> = <nat:1> \times <var:z> ^ <nat:2> \land <var:Y0> = <nat:2> \land <var:b> = <nat:1> \times <var:z> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:Y2> \\ \{ <var:e> = <var:z> \land <var:Y1> = <nat:4> \times <var:z> \land <var:Y0> = <nat:2> \land <var:b> = <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:Y1> \\ \{ <var:e> = <var:z> \land <var:Y0> = <nat:2> \land <var:b> = <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> \} \\ <var:b> := <var:b> + <var:Y0> \\ \{ <var:e> = <var:z> \land <var:b> = <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:2> \} \end{eqnarray} Thusly , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <var:Y1> := <var:e> ; <var:Y2> := <var:Y1> * <var:e> ; <var:Y3> := <var:Y2> * <var:e> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:4> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:b> := <var:Y3> <var:b> := <var:b> + <var:Y2> <var:b> := <var:b> + <var:Y1> <var:b> := <var:b> + <var:Y0> {{ <var:b> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <nat:4> * <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <nat:4> * <var:z> /\ <var:Y2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:Y3> = <var:z> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <nat:4> * <var:z> /\ <var:Y2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <nat:4> * <var:z> /\ <var:Y2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:Y0> = <nat:2> /\ <var:b> = <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y1> = <nat:4> * <var:z> /\ <var:Y0> = <nat:2> /\ <var:b> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:Y0> = <nat:2> /\ <var:b> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:b> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 