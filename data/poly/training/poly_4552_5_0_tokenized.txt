\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:C> ; <var:S> := <var:h1> ; <var:S> := <var:S> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Allow --- given all $ <var:o> \in \mathbb{N} $ --- $ <var:C> = <var:o> $ before running our list of instructions it follows that we have $ <var:S> = <nat:1> * <var:o> + <nat:2> $ after series of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of our program can be shown by the following decorated segment of code . \begin{eqnarray} \{ <var:C> = <var:o> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:C> = <var:o> \land <var:h0> = <nat:2> \} \\ <var:h1> := <nat:1> ; \\ \{ <var:C> = <var:o> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \} \end{eqnarray} Furthering evaluating the code yields : \begin{eqnarray} <var:h1> := <var:h1> * <var:C> ; \\ \{ <var:C> = <var:o> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:o> \} \\ <var:S> := <var:h1> ; \\ \{ <var:C> = <var:o> \land <var:h0> = <nat:2> \land <var:S> = <nat:1> \times <var:o> \} \\ <var:S> := <var:S> + <var:h0> \\ \{ <var:C> = <var:o> \land <var:S> = <nat:1> \times <var:o> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:2> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:C> ; <var:S> := <var:h1> ; <var:S> := <var:S> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:C> = <var:o> }} <def:poly> {{ <var:S> = <nat:1> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:h0> = <nat:2> /\ <var:S> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:o> /\ <var:S> = <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 