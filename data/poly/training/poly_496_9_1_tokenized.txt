\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q0> := <nat:3> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:w> := <var:Q3> <var:w> := <var:w> + <var:Q2> <var:w> := <var:w> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:b> = <var:o> $ prior to running the list of instructions it holds that we have $ <var:w> = <nat:3> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code can be accomplished by standard Hoare techniques . Moving forward , we see \begin{verbatim} { <var:b> = <var:o> } <var:Q1> := <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> } { <var:b> = <var:o> \land <var:Q1> = <var:o> } <var:Q2> := <var:Q1> * <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> } { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> } <var:Q3> := <var:Q2> * <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> } { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> } <var:Q0> := <nat:3> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:3> } { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:3> } <var:Q2> := <var:Q2> * <nat:1> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:3> } { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:Q3> = <var:o> ^ <nat:3> \land <var:Q0> = <nat:3> } <var:Q3> := <var:Q3> * <nat:3> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <nat:1> \cdot <var:o> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:o> ^ <nat:3> \land <var:Q0> = <nat:3> } \end{verbatim} This is rigorously given by the assignment scheme defined in usual Hoare reasoning . Focusing on the upcoming step seen in the list of commands , we have \begin{verbatim} { <var:b> = <var:o> } <var:Q1> := <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> } \end{verbatim} After , \begin{verbatim} { <var:b> = <var:o> } <var:Q1> := <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> } { <var:b> = <var:o> \land <var:Q1> = <var:o> } <var:Q2> := <var:Q1> * <var:b> { <var:b> = <var:o> \land <var:Q1> = <var:o> \land <var:Q2> = <var:o> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q1> := <var:b> ; <var:Q2> := <var:Q1> * <var:b> ; <var:Q3> := <var:Q2> * <var:b> ; <var:Q0> := <nat:3> ; <var:Q2> := <var:Q2> * <nat:1> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:w> := <var:Q3> <var:w> := <var:w> + <var:Q2> <var:w> := <var:w> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:b> = <var:o> }} <def:poly> {{ <var:w> = <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:Q3> = <var:o> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:o> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:Q0> = <nat:3> /\ <var:w> = <nat:3> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:Q1> = <var:o> /\ <var:Q0> = <nat:3> /\ <var:w> = <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:w> = <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 