\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:u> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Given it to be that $ <var:u> = <var:M> $ ahead of interpreting this segment of code , it follows that we see $ <var:O> = <nat:4> \cdot <var:M> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:M> \} \\ <var:O> := <nat:4> ; \\ \{ <var:u> = <var:M> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:3> + <var:O> * <var:u> \\ \{ <var:u> = <var:M> \land <var:O> = <nat:4> * <var:M> + <nat:3> \} \end{eqnarray} The application of standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:u> = <var:M> }} <def:poly> {{ <var:O> = <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:O> = <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 