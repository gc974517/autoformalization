\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:E0> := <nat:3> ; <var:R> := <var:E0> \end{verbatim} Assume it to hold that $ <var:K> = <var:L> $ --- letting natural coefficients $ <var:L> $ --- ahead of executing the series of commands , it must be that we have $ <var:R> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be shown with typical Hoare reasoning . Immediately after , \[ \begin{tabular} {rcl} \{ <var:K> = <var:L> \} & <var:E0> := <nat:3> & \{ <var:K> = <var:L> \land <var:E0> = <nat:3> \} \\ \{ <var:K> = <var:L> \land <var:E0> = <nat:3> \} & <var:R> := <var:E0& \{ <var:K> = <var:L> \land <var:R> = <nat:3> \} \end{tabular} This is shown to be logically sound through the variable binding scheme in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:K> = <var:L> }} <var:E0> := <nat:3> ; <var:R> := <var:E0> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 