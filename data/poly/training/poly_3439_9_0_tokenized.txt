\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:5> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:J> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:J> ; <var:Q2> := <var:Q2> * <var:J> ; <var:R> := <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> \end{verbatim} Assuming $ <var:J> = <var:w> $ prior to the evaluation of the code , it holds that we see $ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:5> $ when set of instructions exits . \end{theorem} \begin{proof} The argument for the list of instructions is shown through Hoare logic . Moving on to the next step , we see the environment update code yielding $ <nat:5> $ toward $ <var:Q0>$ . This line transfers the condition $ \{ <var:J> = <var:w> \} $ toward the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \} $ . Shifting focus toward the following statement seen in our code segment , we see the variable assignmet code \verb | <var:Q1> := <nat:8> ; | . This statement transfers $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \} $ to $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \} $ . This is deduced by the assignment rule defined by Hoare logic . Looking at the upcoming line in our list of instructions , the line \verb | <var:Q1> := <var:Q1> * <var:J> ; | . This transfers the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \} $ into the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \} $ . Looking at the upcoming step seen in our code segment , we have the variable binding code \verb | <var:Q2> := <nat:9> ; | . This code moves the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \} $ to the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \} $ . This is deduced by the assignment rule from standard Hoare logic . Taking a look at the proceeding bit of code contained in our program , we see the variable update line \verb | <var:Q2> := <var:Q2> * <var:J> ; | . This forwards $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \} $ toward $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \times <var:w> \} $ . Looking at the upcoming piece of code in the series of commands , we have the statement \verb | <var:Q2> := <var:Q2> * <var:J> ; | . This code takes the condition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \times <var:w> \} $ into $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \times <var:w> ^ <nat:2> \} $ . This is guaranteed by the assignment rule from standard Hoare logic . Going to the next step , we see the variable assignmet statement binding $ <var:Q2> $ toward $ <var:R>$ . This takes $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:Q2> = <nat:9> \times <var:w> ^ <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law in typical Hoare techniques . Advancing , we see the variable binding line yielding $ <var:R> + <var:Q1> $ as $ <var:R>$ . This statement takes the precondition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:Q1> = <nat:8> \times <var:w> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> \} $ to the postcondition $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> \} $ . This is shown to be logically sound using the assignment scheme in Hoare techniques . Stepping through , we have the variable update statement giving $ <var:R> + <var:Q0$ toward $ <var:R>$ . This command takes $ \{ <var:J> = <var:w> \land <var:Q0> = <nat:5> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> \} $ toward the postcondition $ \{ <var:J> = <var:w> \land <var:R> = <nat:9> \times <var:w> ^ <nat:2> + <nat:8> \times <var:w> + <nat:5> \} $ . This is shown using the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <var:Q0> := <nat:5> ; <var:Q1> := <nat:8> ; <var:Q1> := <var:Q1> * <var:J> ; <var:Q2> := <nat:9> ; <var:Q2> := <var:Q2> * <var:J> ; <var:Q2> := <var:Q2> * <var:J> ; <var:R> := <var:Q2> ; <var:R> := <var:R> + <var:Q1> ; <var:R> := <var:R> + <var:Q0> {{ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> * <var:w> /\ <var:Q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> * <var:w> /\ <var:Q2> = <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> * <var:w> /\ <var:Q2> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:Q1> = <nat:8> * <var:w> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Q0> = <nat:5> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:R> = <nat:9> * <var:w> ^ <nat:2> + <nat:8> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 