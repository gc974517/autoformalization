\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:1> ; <var:n> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:e> = <var:h> $ ahead of the execution of this list of instructions , it must be that we see $ <var:n> = <nat:1> $ when series of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the program is evident with standard Hoare logic . Honing in on the next bit of code found in the program , \verb | { <var:e> = <var:h> } <var:N0> := <nat:1> { <var:e> = <var:h> \land <var:N0> = <nat:1> } | . This is guaranteed with the variable update rule obtained from Hoare reasoning . Moving forward to the next command seen in our set of instructions , \verb | { <var:e> = <var:h> } <var:N0> := <nat:1> { <var:e> = <var:h> \land <var:N0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:1> ; <var:n> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:e> = <var:h> }} <def:poly> {{ <var:n> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:n> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 