\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:i1> := <var:p> ; <var:i2> := <var:i1> * <var:p> ; <var:i3> := <var:i2> * <var:p> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:9> ; <var:i3> := <var:i3> * <nat:4> ; <var:r> := <var:i3> <var:r> := <var:r> + <var:i2> <var:r> := <var:r> + <var:i1> <var:r> := <var:r> + <var:i0> \end{verbatim} Allowing it to be that $ <var:p> = <var:f> $ ahead of the evaluation of our list of commands it follows that $ <var:r> = <nat:4> \cdot <var:f> ^ <nat:3> + <nat:9> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> + <nat:8> $ when code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is done by Hoare logic . Taking a look at the following statements found in our list of commands , we see \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:i1> := <var:p> \, \{ <var:p> = <var:f> \land <var:i1> = <var:f> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <var:f> \} \, <var:i2> := <var:i1> * <var:p> \, \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \} \, <var:i3> := <var:i2> * <var:p> \, \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \} \, <var:i0> := <nat:8> \, \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:i1> := <var:i1> * <nat:9> \, \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:i2> := <var:i2> * <nat:9> \, \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i3> = <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:i3> := <var:i3> * <nat:4> \, \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i3> = <nat:4> * <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i3> = <nat:4> * <var:f> ^ <nat:3> \land <var:i0> = <nat:8> \} \, <var:r> := <var:i3\, \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i0> = <nat:8> \land <var:r> = <nat:4> * <var:f> ^ <nat:3> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i2> = <nat:9> * <var:f> ^ <nat:2> \land <var:i0> = <nat:8> \land <var:r> = <nat:4> * <var:f> ^ <nat:3> \} \, <var:r> := <var:r> + <var:i2\, \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i0> = <nat:8> \land <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> \} \\ \{ <var:p> = <var:f> \land <var:i1> = <nat:9> * <var:f> \land <var:i0> = <nat:8> \land <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> \} \, <var:r> := <var:r> + <var:i1\, \{ <var:p> = <var:f> \land <var:i0> = <nat:8> \land <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> \} \end{eqnarray} Moving forward to the subsequent piece of code in our series of instructions , we have \begin{eqnarray} \{ <var:p> = <var:f> \} \, <var:i1> := <var:p> \, \{ <var:p> = <var:f> \land <var:i1> = <var:f> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:i1> := <var:p> ; <var:i2> := <var:i1> * <var:p> ; <var:i3> := <var:i2> * <var:p> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:9> ; <var:i3> := <var:i3> * <nat:4> ; <var:r> := <var:i3> <var:r> := <var:r> + <var:i2> <var:r> := <var:r> + <var:i1> <var:r> := <var:r> + <var:i0> {{ <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <var:f> /\ <var:i2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <var:f> /\ <var:i2> = <var:f> ^ <nat:2> /\ <var:i3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <var:f> /\ <var:i2> = <var:f> ^ <nat:2> /\ <var:i3> = <var:f> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <nat:9> * <var:f> /\ <var:i2> = <var:f> ^ <nat:2> /\ <var:i3> = <var:f> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <nat:9> * <var:f> /\ <var:i2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:i3> = <var:f> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <nat:9> * <var:f> /\ <var:i2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <nat:9> * <var:f> /\ <var:i2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:i0> = <nat:8> /\ <var:r> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i1> = <nat:9> * <var:f> /\ <var:i0> = <nat:8> /\ <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:i0> = <nat:8> /\ <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:r> = <nat:4> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 