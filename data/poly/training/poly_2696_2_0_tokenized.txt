\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:6> ; <var:c> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:W> = <var:h> $ --- given all positive numbers $ <var:h> $ --- prior to interpreting this set of instructions then we have $ <var:c> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:h> \} \\ <var:F0> := <nat:6> ; \\ \{ <var:W> = <var:h> \land <var:F0> = <nat:6> \} \\ <var:c> := <var:F0> \\ \{ <var:W> = <var:h> \land <var:c> = <nat:6> \} \end{eqnarray} Utilizing Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:6> ; <var:c> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:W> = <var:h> }} <def:poly> {{ <var:c> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:c> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 