\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:n> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:9> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:n> = <var:I> $ , given every $ <var:I> \in \mathbb{Z}^+ $ , ahead of executing our set of instructions then we have $ <var:V> = <nat:9> \cdot <var:I> + <nat:8> $ once code segment terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:I> \} \\ <var:b1> := <var:n> ; \\ \{ <var:n> = <var:I> \land <var:b1> = <var:I> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:n> = <var:I> \land <var:b1> = <var:I> \land <var:b0> = <nat:8> \} \\ <var:b1> := <var:b1> * <nat:9> ; \\ \{ <var:n> = <var:I> \land <var:b1> = <nat:9> * <var:I> \land <var:b0> = <nat:8> \} \end{eqnarray} Allowing running this code segment gives us : \begin{eqnarray} <var:V> := <var:b1> \\ \{ <var:n> = <var:I> \land <var:b0> = <nat:8> \land <var:V> = <nat:9> * <var:I> \} \\ <var:V> := <var:V> + <var:b0> \\ \{ <var:n> = <var:I> \land <var:V> = <nat:9> * <var:I> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b1> := <var:n> ; <var:b0> := <nat:8> ; <var:b1> := <var:b1> * <nat:9> ; <var:V> := <var:b1> <var:V> := <var:V> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:n> = <var:I> }} <def:poly> {{ <var:V> = <nat:9> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:b1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:b1> = <var:I> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:b1> = <nat:9> * <var:I> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:b0> = <nat:8> /\ <var:V> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:I> /\ <var:V> = <nat:9> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 