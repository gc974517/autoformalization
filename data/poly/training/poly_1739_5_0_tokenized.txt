\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:V> ; <var:J> := <var:o1> ; <var:J> := <var:J> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Assuming $ <var:V> = <var:C> $ ( taking $ <var:C> \in \mathbb{Z}^+ $ ) prior to running the list of commands it follows that we see $ <var:J> = <nat:2> \times <var:C> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the series of instructions is clear using usual Hoare logic . After , we have \begin{eqnarray} \{ <var:V> = <var:C> \} \, <var:o0> := <nat:3> \, \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \} \end{eqnarray} Honing in on the following lines of codecontained in the segment of code , we have \begin{eqnarray} \{ <var:V> = <var:C> \} \, <var:o0> := <nat:3> \, \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \} \\ \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \} \, <var:o1> := <nat:2> \, \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \land <var:o1> = <nat:2> \} \\ \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \land <var:o1> = <nat:2> \} \, <var:o1> := <var:o1> * <var:V> \, \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \land <var:o1> = <nat:2> \times <var:C> \} \\ \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \land <var:o1> = <nat:2> \times <var:C> \} \, <var:J> := <var:o1> \, \{ <var:V> = <var:C> \land <var:o0> = <nat:3> \land <var:J> = <nat:2> \times <var:C> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:2> ; <var:o1> := <var:o1> * <var:V> ; <var:J> := <var:o1> ; <var:J> := <var:J> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <def:poly> {{ <var:J> = <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:o0> = <nat:3> /\ <var:J> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:J> = <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 