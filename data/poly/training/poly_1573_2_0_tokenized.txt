\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:9> ; <var:e> := <var:P0> \end{verbatim} Allowing it to be that $ <var:r> = <var:M> $ prior to executing the code segment , it holds that we see $ <var:e> = <nat:9> $ . \end{theorem} \begin{proof} The argument for the series of commands can be seen through standard Hoare reasoning . Stepping through , we see the variable assignmet line defining $ <nat:9> $ as $ <var:P0>$ . This moves $ \{ <var:r> = <var:M> \} $ as the postcondition $ \{ <var:r> = <var:M> \land <var:P0> = <nat:9> \} $ . Following , we have the variable assignmet line defining $ <var:P0$ to $ <var:e>$ . This advances the precondition $ \{ <var:r> = <var:M> \land <var:P0> = <nat:9> \} $ as the condition $ \{ <var:r> = <var:M> \land <var:e> = <nat:9> \} $ . This is ensured by the assignment inference rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:r> = <var:M> }} <var:P0> := <nat:9> ; <var:e> := <var:P0> {{ <var:e> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:M> /\ <var:e> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 