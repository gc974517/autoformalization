\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:9> ; <var:J> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:y> = <var:W> $ ahead of the evaluation of our list of commands it must be that we have $ <var:J> = <nat:9> $ once code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be done by typical Hoare logic . Taking another step toward the subsequent line found in our set of commands , we see the binding command \verb | <var:w0> := <nat:9> ; | . This takes $ \{ <var:y> = <var:W> \} $ as the postcondition $ \{ <var:y> = <var:W> \land <var:w0> = <nat:9> \} $ . This is rigorously given using the assignment rule found in Hoare reasoning . Moving on to the proceeding step seen in the series of commands , we have the variable assignmet code letting $ <var:w0$ toward $ <var:J>$ . This statement transfers the condition $ \{ <var:y> = <var:W> \land <var:w0> = <nat:9> \} $ as $ \{ <var:y> = <var:W> \land <var:J> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:9> ; <var:J> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:y> = <var:W> }} <def:poly> {{ <var:J> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:W> /\ <var:J> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 