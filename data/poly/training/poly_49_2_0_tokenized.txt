\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:l> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:O> = <var:q> $ prior to evaluating the code it holds that $ <var:l> = <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:O> = <var:q> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:O> = <var:q> \land <var:F0> = <nat:4> \} \\ <var:l> := <var:F0> \\ \{ <var:O> = <var:q> \land <var:l> = <nat:4> \} \end{eqnarray} As a consequence , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:l> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:O> = <var:q> }} <def:poly> {{ <var:l> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:q> /\ <var:l> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 