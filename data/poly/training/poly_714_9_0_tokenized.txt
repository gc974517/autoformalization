\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:k> ; <var:u2> := <nat:5> ; <var:u2> := <var:u2> * <var:k> ; <var:u2> := <var:u2> * <var:k> ; <var:S> := <var:u2> ; <var:S> := <var:S> + <var:u1> ; <var:S> := <var:S> + <var:u0> \end{verbatim} Allowing that we have $ <var:k> = <var:a> $ before executing the series of commands then we have $ <var:S> = <nat:5> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> $ when code terminates . \end{theorem} \begin{proof} The flow of logic for our set of commands can be done with Hoare reasoning . Moving on to the next lines contained in our list of commands , we have \begin{verbatim} { <var:k> = <var:a> } <var:u0> := <nat:3> { <var:k> = <var:a> \land <var:u0> = <nat:3> } { <var:k> = <var:a> \land <var:u0> = <nat:3> } <var:u1> := <nat:4> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> } <var:u1> := <var:u1> * <var:k> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> } <var:u2> := <nat:5> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> } <var:u2> := <var:u2> * <var:k> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> * <var:a> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> * <var:a> } <var:u2> := <var:u2> * <var:k> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> * <var:a> ^ <nat:2> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:u2> = <nat:5> * <var:a> ^ <nat:2> } <var:S> := <var:u2> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:S> = <nat:5> * <var:a> ^ <nat:2> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:a> \land <var:S> = <nat:5> * <var:a> ^ <nat:2> } <var:S> := <var:S> + <var:u1> { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> } { <var:k> = <var:a> \land <var:u0> = <nat:3> \land <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> } <var:S> := <var:S> + <var:u0{ <var:k> = <var:a> \land <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> } \end{verbatim} This is known to be sound by the variable binding rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:k> = <var:a> }} <var:u0> := <nat:3> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:k> ; <var:u2> := <nat:5> ; <var:u2> := <var:u2> * <var:k> ; <var:u2> := <var:u2> * <var:k> ; <var:S> := <var:u2> ; <var:S> := <var:S> + <var:u1> ; <var:S> := <var:S> + <var:u0> {{ <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:a> /\ <var:u2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:a> /\ <var:u2> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:a> /\ <var:u2> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:a> /\ <var:S> = <nat:5> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:u0> = <nat:3> /\ <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:S> = <nat:5> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 