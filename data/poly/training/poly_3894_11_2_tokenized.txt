\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:3> + <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> ; <var:L> := <nat:4> + <var:L> * <var:F> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:4> + <var:L> * <var:F> ; <var:L> := <nat:2> + <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allow that $ <var:F> = <var:e> $ prior to running our list of instructions , then we have $ <var:L> = <nat:2> \cdot <var:e> ^ <nat:10> + <nat:3> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:F> = <var:e> \} \\ <var:L> := <nat:2> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \} \\ <var:L> := <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> + \} \\ <var:L> := <nat:3> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:3> \} \\ <var:L> := <nat:1> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> + <nat:1> \} \\ <var:L> := <nat:4> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:4> \} \\ <var:L> := <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + \} \\ <var:L> := <nat:4> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:6> + <nat:3> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:4> \} \\ <var:L> := <nat:2> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:7> + <nat:3> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> + <nat:2> \} \\ <var:L> := <nat:1> + <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:8> + <nat:3> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:1> \} \\ <var:L> := <var:L> * <var:F> ; \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:9> + <nat:3> \cdot <var:e> ^ <nat:7> + <nat:1> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:5> + <nat:4> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + \} \\ <var:L> := <nat:1> + <var:L> * <var:F> \\ \{ <var:F> = <var:e> \land <var:L> = <nat:2> \cdot <var:e> ^ <nat:10> + <nat:3> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:4> \cdot <var:e> ^ <nat:6> + <nat:4> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:1> \} \end{eqnarray} Thus , the set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:2> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:3> + <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> ; <var:L> := <nat:4> + <var:L> * <var:F> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:4> + <var:L> * <var:F> ; <var:L> := <nat:2> + <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> ; <var:L> := <var:L> * <var:F> ; <var:L> := <nat:1> + <var:L> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:F> = <var:e> }} <def:poly> {{ <var:L> = <nat:2> * <var:e> ^ <nat:10> + <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:7> + <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:8> + <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:9> + <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:L> = <nat:2> * <var:e> ^ <nat:10> + <nat:3> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:4> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 