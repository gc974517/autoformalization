\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:z> ; <var:L> := <nat:4> + <var:L> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Allow it to hold that $ <var:z> = <var:n> $ ahead of executing our series of instructions , it follows that we see $ <var:L> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:n> \} \\ <var:L> := <nat:4> ; \\ \{ <var:z> = <var:n> \land <var:L> = <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:z> ; \\ \{ <var:z> = <var:n> \land <var:L> = <nat:4> \cdot <var:n> + <nat:1> \} \\ <var:L> := <nat:4> + <var:L> * <var:z> \\ \{ <var:z> = <var:n> \land <var:L> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:4> \} \end{eqnarray} Utilizing Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:4> ; <var:L> := <nat:1> + <var:L> * <var:z> ; <var:L> := <nat:4> + <var:L> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:L> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:L> = <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:L> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 