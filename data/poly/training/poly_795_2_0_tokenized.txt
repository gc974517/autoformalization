\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:2> ; <var:B> := <var:Q0> \end{verbatim} Allowing that $ <var:U> = <var:A> $ ( for all positive integer coefficients $ <var:A> $ ) before executing our list of instructions it follows that $ <var:B> = <nat:2> $ after code segment finishes . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be given using typical Hoare logic . Moving on to the next step , we have the variable update code \verb | <var:Q0> := <nat:2> ; | . This moves the precondition $ \{ <var:U> = <var:A> \} $ to the condition $ \{ <var:U> = <var:A> \land <var:Q0> = <nat:2> \} $ . Going to the next step , the variable assignmet code \verb | <var:B> := <var:Q0> | . This forwards the precondition $ \{ <var:U> = <var:A> \land <var:Q0> = <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:A> \land <var:B> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:U> = <var:A> }} <var:Q0> := <nat:2> ; <var:B> := <var:Q0> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 