\begin{document} \begin{theorem} Take a code segment as follows \begin{verbatim} <var:Q0> := <nat:8> ; <var:X> := <var:Q0> \end{verbatim} Assume --- given some $ <var:T> $ --- $ <var:F> = <var:T> $ ahead of running this set of instructions it holds that $ <var:X> = <nat:8> $ once code is done executing . \end{theorem} \begin{proof} The way to prove correctness for the program can be seen with Hoare techniques . Observing the upcoming line seen in our segment of code , the variable binding line \verb | <var:Q0> := <nat:8> ; | . This code takes the precondition $ \{ <var:F> = <var:T> \} $ to the condition $ \{ <var:F> = <var:T> \land <var:Q0> = <nat:8> \} $ . This is known to be sound using the assignment inference rule of Hoare logic . Moving on to the next command in the set of instructions , the code \verb | <var:X> := <var:Q0> | . This redefines the precondition $ \{ <var:F> = <var:T> \land <var:Q0> = <nat:8> \} $ into the postcondition $ \{ <var:F> = <var:T> \land <var:X> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:F> = <var:T> }} <var:Q0> := <nat:8> ; <var:X> := <var:Q0> {{ <var:X> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:T> /\ <var:X> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 