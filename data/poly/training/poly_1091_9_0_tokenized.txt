\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:s> ; <var:y2> := <nat:1> ; <var:y2> := <var:y2> * <var:s> ; <var:y2> := <var:y2> * <var:s> ; <var:X> := <var:y2> ; <var:X> := <var:X> + <var:y1> ; <var:X> := <var:X> + <var:y0> \end{verbatim} Allow $ <var:s> = <var:i> $ before evaluating this set of instructions it follows that we see $ <var:X> = <nat:1> \cdot <var:i> ^ <nat:2> + <nat:6> \cdot <var:i> + <nat:3> $ . \end{theorem} \begin{proof} See that this decorated set of instructions . \begin{eqnarray} \{ <var:s> = <var:i> \} \\ <var:y0> := <nat:3> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \} \\ <var:y1> := <nat:6> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> \} \\ <var:y1> := <var:y1> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> * <var:i> \} \\ <var:y2> := <nat:1> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> * <var:i> \land <var:y2> = <nat:1> \} \\ <var:y2> := <var:y2> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> * <var:i> \land <var:y2> = <nat:1> * <var:i> \} \\ <var:y2> := <var:y2> * <var:s> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> * <var:i> \land <var:y2> = <nat:1> * <var:i> ^ <nat:2> \} \\ <var:X> := <var:y2> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:y1> = <nat:6> * <var:i> \land <var:X> = <nat:1> * <var:i> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:y1> ; \\ \{ <var:s> = <var:i> \land <var:y0> = <nat:3> \land <var:X> = <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} \\ <var:X> := <var:X> + <var:y0> \\ \{ <var:s> = <var:i> \land <var:X> = <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:s> = <var:i> }} <var:y0> := <nat:3> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:s> ; <var:y2> := <nat:1> ; <var:y2> := <var:y2> * <var:s> ; <var:y2> := <var:y2> * <var:s> ; <var:X> := <var:y2> ; <var:X> := <var:X> + <var:y1> ; <var:X> := <var:X> + <var:y0> {{ <var:X> = <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> * <var:i> /\ <var:y2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> * <var:i> /\ <var:y2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> * <var:i> /\ <var:y2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:6> * <var:i> /\ <var:X> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:y0> = <nat:3> /\ <var:X> = <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:i> /\ <var:X> = <nat:1> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 