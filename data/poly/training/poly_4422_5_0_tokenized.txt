\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:u> ; <var:e> := <var:s1> ; <var:e> := <var:e> + <var:s0> \end{verbatim} Allow ( given some natural coefficients $ <var:m> $ ) that $ <var:u> = <var:m> $ ahead of running this series of instructions , it follows that we have $ <var:e> = <nat:3> * <var:m> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:m> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:u> = <var:m> \land <var:s0> = <nat:5> \} \\ <var:s1> := <nat:3> ; \\ \{ <var:u> = <var:m> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \} \\ <var:s1> := <var:s1> * <var:u> ; \\ \{ <var:u> = <var:m> \land <var:s0> = <nat:5> \land <var:s1> = <nat:3> \cdot <var:m> \} \\ <var:e> := <var:s1> ; \\ \{ <var:u> = <var:m> \land <var:s0> = <nat:5> \land <var:e> = <nat:3> \cdot <var:m> \} \\ <var:e> := <var:e> + <var:s0> \\ \{ <var:u> = <var:m> \land <var:e> = <nat:3> \cdot <var:m> + <nat:5> \} \end{eqnarray} Applying typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:u> = <var:m> }} <var:s0> := <nat:5> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:u> ; <var:e> := <var:s1> ; <var:e> := <var:e> + <var:s0> {{ <var:e> = <nat:3> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:s0> = <nat:5> /\ <var:e> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:m> /\ <var:e> = <nat:3> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 