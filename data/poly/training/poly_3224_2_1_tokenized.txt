\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:2> ; <var:A> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Allow given all positive integers $ <var:O> $ it to hold that $ <var:m> = <var:O> $ prior to executing the set of instructions it holds that we have $ <var:A> = <nat:2> $ when program has terminated . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be done by typical Hoare techniques . Considering the proceeding bit of code found in the series of instructions , we see the command \verb | <var:D0> := <nat:2> ; | . This code redefines the condition $ \{ <var:m> = <var:O> \} $ to $ \{ <var:m> = <var:O> \land <var:D0> = <nat:2> \} $ . This is deduced with the assignment rule given in standard Hoare techniques . Advancing to the next step , we see the command yielding $ <var:D0$ as $ <var:A>$ . This line moves the precondition $ \{ <var:m> = <var:O> \land <var:D0> = <nat:2> \} $ to the condition $ \{ <var:m> = <var:O> \land <var:A> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:2> ; <var:A> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:m> = <var:O> }} <def:poly> {{ <var:A> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:A> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 