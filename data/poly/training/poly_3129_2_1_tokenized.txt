\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:N> := <var:t0> \end{verbatim} Given $ <var:x> = <var:U> $ ahead of evaluating our set of commands it must be that we have $ <var:N> = <nat:2> $ after segment of code is done . \end{theorem} \begin{proof} The course of logic for this set of instructions can be done by Hoare reasoning . Taking a look at the proceeding step seen in our code segment , the binding statement \verb | <var:t0> := <nat:2> ; | . This statement forwards the condition $ \{ <var:x> = <var:U> \} $ as the condition $ \{ <var:x> = <var:U> \land <var:t0> = <nat:2> \} $ . Honing in on the subsequent line of code seen in the list of commands , we have the command binding $ <var:t0$ to $ <var:N>$ . This command advances $ \{ <var:x> = <var:U> \land <var:t0> = <nat:2> \} $ as $ \{ <var:x> = <var:U> \land <var:N> = <nat:2> \} $ . This is shown to be logically sound through the assignment rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <var:t0> := <nat:2> ; <var:N> := <var:t0> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 