\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:L> ; <var:V> := <var:i1> ; <var:V> := <var:V> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:L> = <var:s> $ before running the segment of code , then we have $ <var:V> = <nat:3> \cdot <var:s> + <nat:2> $ when series of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:s> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:L> = <var:s> \land <var:i0> = <nat:2> \} \\ <var:i1> := <nat:3> ; \\ \{ <var:L> = <var:s> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \} \\ <var:i1> := <var:i1> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:i0> = <nat:2> \land <var:i1> = <nat:3> \cdot <var:s> \} \\ <var:V> := <var:i1> ; \\ \{ <var:L> = <var:s> \land <var:i0> = <nat:2> \land <var:V> = <nat:3> \cdot <var:s> \} \\ <var:V> := <var:V> + <var:i0> \\ \{ <var:L> = <var:s> \land <var:V> = <nat:3> \cdot <var:s> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:L> ; <var:V> := <var:i1> ; <var:V> := <var:V> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:V> = <nat:3> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:i0> = <nat:2> /\ <var:V> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:V> = <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 