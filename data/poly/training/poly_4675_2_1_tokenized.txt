\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:1> ; <var:Y> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Assuming --- for every positive numbers $ <var:R> $ --- it to hold that $ <var:V> = <var:R> $ ahead of interpreting the program it holds that we see $ <var:Y> = <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} The course of logic for our list of commands can be demonstrated by usual Hoare logic . Advancing , we have the line \verb | <var:L0> := <nat:1> ; | . This advances the precondition $ \{ <var:V> = <var:R> \} $ into $ \{ <var:V> = <var:R> \land <var:L0> = <nat:1> \} $ . Jumping to the subsequent command contained in the list of commands , we see the variable assignmet code giving $ <var:L0$ into $ <var:Y>$ . This statement moves the precondition $ \{ <var:V> = <var:R> \land <var:L0> = <nat:1> \} $ toward the condition $ \{ <var:V> = <var:R> \land <var:Y> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:Y> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:V> = <var:R> }} <def:poly> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 