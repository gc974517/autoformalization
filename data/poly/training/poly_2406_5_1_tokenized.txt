\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:U> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:6> ; <var:M> := <var:L1> <var:M> := <var:M> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Allow , assuming some natural coefficients $ <var:m> $ , that we have $ <var:U> = <var:m> $ ahead of interpreting the program it follows that $ <var:M> = <nat:6> \cdot <var:m> + <nat:6> $ once code has exited . \end{theorem} \begin{proof} The flow of logic for the list of commands is accomplished with usual Hoare logic . Keeping momentum , the variable update line binding $ <var:U> $ to $ <var:L1>$ . This advances $ \{ <var:U> = <var:m> \} $ into the postcondition $ \{ <var:U> = <var:m> \land <var:L1> = <var:m> \} $ . Moving on to the next command seen in our program , we see the assignment statement yielding $ <nat:6> $ to $ <var:L0>$ . This code advances the condition $ \{ <var:U> = <var:m> \land <var:L1> = <var:m> \} $ toward $ \{ <var:U> = <var:m> \land <var:L1> = <var:m> \land <var:L0> = <nat:6> \} $ . This is sound using the assignment law in standard Hoare techniques . Shifting focus toward the proceeding bit of code seen in our code , we see the environment update code letting $ <var:L1> * <nat:6> $ toward $ <var:L1>$ . This code transfers the condition $ \{ <var:U> = <var:m> \land <var:L1> = <var:m> \land <var:L0> = <nat:6> \} $ into the condition $ \{ <var:U> = <var:m> \land <var:L1> = <nat:6> \times <var:m> \land <var:L0> = <nat:6> \} $ . This is shown to be logically sound with the assignment law from typical Hoare logic . Jumping to the subsequent piece of code seen in our list of commands , we see the variable binding command letting $ <var:L1$ to $ <var:M>$ . This transfers $ \{ <var:U> = <var:m> \land <var:L1> = <nat:6> \times <var:m> \land <var:L0> = <nat:6> \} $ to the condition $ \{ <var:U> = <var:m> \land <var:L0> = <nat:6> \land <var:M> = <nat:6> \times <var:m> \} $ . Moving on to the next piece of code found in the list of commands , we see the assignment command \verb | <var:M> := <var:M> + <var:L0> | . This code takes the precondition $ \{ <var:U> = <var:m> \land <var:L0> = <nat:6> \land <var:M> = <nat:6> \times <var:m> \} $ toward $ \{ <var:U> = <var:m> \land <var:M> = <nat:6> \times <var:m> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:U> ; <var:L0> := <nat:6> ; <var:L1> := <var:L1> * <nat:6> ; <var:M> := <var:L1> <var:M> := <var:M> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:U> = <var:m> }} <def:poly> {{ <var:M> = <nat:6> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:L1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:L1> = <var:m> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:L1> = <nat:6> * <var:m> /\ <var:L0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:L0> = <nat:6> /\ <var:M> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:m> /\ <var:M> = <nat:6> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 