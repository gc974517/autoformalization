\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:1> ; <var:x> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Allowing ( with some positive coefficients $ <var:k> $ ) it to be that $ <var:H> = <var:k> $ ahead of executing this code segment , it follows that we see $ <var:x> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions can be seen by standard Hoare logic . Stepping forward , we have \begin{eqnarray} \{ <var:H> = <var:k> \} \, <var:l0> := <nat:1> \, \{ <var:H> = <var:k> \land <var:l0> = <nat:1> \} \\ \{ <var:H> = <var:k> \land <var:l0> = <nat:1> \} \, <var:x> := <var:l0\, \{ <var:H> = <var:k> \land <var:x> = <nat:1> \} \end{eqnarray} This is ensured using the assignment inference rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:1> ; <var:x> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <def:poly> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 