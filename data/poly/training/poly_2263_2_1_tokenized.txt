\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:3> ; <var:M> := <var:K0> \end{verbatim} Assume , for all integers $ <var:q> $ , that we have $ <var:d> = <var:q> $ ahead of interpreting this code then we have $ <var:M> = <nat:3> $ once list of instructions executes . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:d> = <var:q> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:d> = <var:q> \land <var:K0> = <nat:3> \} \\ <var:M> := <var:K0> \\ \{ <var:d> = <var:q> \land <var:M> = <nat:3> \} \end{eqnarray} As a result , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <var:K0> := <nat:3> ; <var:M> := <var:K0> {{ <var:M> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:M> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 