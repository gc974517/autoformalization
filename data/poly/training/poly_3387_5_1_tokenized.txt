\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:w1> := <var:T> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:3> ; <var:l> := <var:w1> <var:l> := <var:l> + <var:w0> \end{verbatim} Given it to hold that $ <var:T> = <var:R> $ ahead of executing this set of instructions , it must be that we have $ <var:l> = <nat:3> \cdot <var:R> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is given through typical Hoare logic . Moving forward to the next step , we see the variable assignmet command \verb | <var:w1> := <var:T> ; | . This transfers the precondition $ \{ <var:T> = <var:R> \} $ to the postcondition $ \{ <var:T> = <var:R> \land <var:w1> = <var:R> \} $ . Keeping momentum , the variable update code giving $ <nat:8> $ to $ <var:w0>$ . This code redefines the precondition $ \{ <var:T> = <var:R> \land <var:w1> = <var:R> \} $ to the condition $ \{ <var:T> = <var:R> \land <var:w1> = <var:R> \land <var:w0> = <nat:8> \} $ . This is ensured using the assignment law defined in Hoare techniques . Moving on to the next step , we see the binding line \verb | <var:w1> := <var:w1> * <nat:3> ; | . This command redefines $ \{ <var:T> = <var:R> \land <var:w1> = <var:R> \land <var:w0> = <nat:8> \} $ into the postcondition $ \{ <var:T> = <var:R> \land <var:w1> = <nat:3> * <var:R> \land <var:w0> = <nat:8> \} $ . This is deduced through the assignment scheme from typical Hoare logic . Moving on to the upcoming statement in the segment of code , we see the variable binding code \verb | <var:l> := <var:w1> | . This command transfers the precondition $ \{ <var:T> = <var:R> \land <var:w1> = <nat:3> * <var:R> \land <var:w0> = <nat:8> \} $ as $ \{ <var:T> = <var:R> \land <var:w0> = <nat:8> \land <var:l> = <nat:3> * <var:R> \} $ . Shifting focus toward the upcoming step found in our series of commands , we see the variable update line binding $ <var:l> + <var:w0$ into $ <var:l>$ . This line moves $ \{ <var:T> = <var:R> \land <var:w0> = <nat:8> \land <var:l> = <nat:3> * <var:R> \} $ into the postcondition $ \{ <var:T> = <var:R> \land <var:l> = <nat:3> * <var:R> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:T> = <var:R> }} <var:w1> := <var:T> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:3> ; <var:l> := <var:w1> <var:l> := <var:l> + <var:w0> {{ <var:l> = <nat:3> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:w1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:w1> = <var:R> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:w1> = <nat:3> * <var:R> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:w0> = <nat:8> /\ <var:l> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:l> = <nat:3> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 