\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:I> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:4> ; <var:H> := <var:a1> <var:H> := <var:H> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- for every positive coefficients $ <var:N> $ --- that $ <var:I> = <var:N> $ prior to running our series of commands , it holds that $ <var:H> = <nat:4> \times <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the series of commands is shown by Hoare techniques . Taking another step toward the proceeding pieces of code contained in the code segment , \begin{eqnarray} \{ <var:I> = <var:N> \} \, <var:a1> := <var:I> \, \{ <var:I> = <var:N> \land <var:a1> = <var:N> \} \\ \{ <var:I> = <var:N> \land <var:a1> = <var:N> \} \, <var:a0> := <nat:3> \, \{ <var:I> = <var:N> \land <var:a1> = <var:N> \land <var:a0> = <nat:3> \} \\ \{ <var:I> = <var:N> \land <var:a1> = <var:N> \land <var:a0> = <nat:3> \} \, <var:a1> := <var:a1> * <nat:4> \, \{ <var:I> = <var:N> \land <var:a1> = <nat:4> * <var:N> \land <var:a0> = <nat:3> \} \end{eqnarray} Going forward , we have \begin{eqnarray} \{ <var:I> = <var:N> \} \, <var:a1> := <var:I> \, \{ <var:I> = <var:N> \land <var:a1> = <var:N> \} \\ \{ <var:I> = <var:N> \land <var:a1> = <var:N> \} \, <var:a0> := <nat:3> \, \{ <var:I> = <var:N> \land <var:a1> = <var:N> \land <var:a0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:I> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:4> ; <var:H> := <var:a1> <var:H> := <var:H> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:H> = <nat:4> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:a1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:a1> = <var:N> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:a1> = <nat:4> * <var:N> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:a0> = <nat:3> /\ <var:H> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:H> = <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 