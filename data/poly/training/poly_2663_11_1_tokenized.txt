\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:B1> := <var:D> ; <var:B2> := <var:B1> * <var:D> ; <var:B3> := <var:B2> * <var:D> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:6> ; <var:L> := <var:B3> <var:L> := <var:L> + <var:B2> <var:L> := <var:L> + <var:B1> <var:L> := <var:L> + <var:B0> \end{verbatim} Given that $ <var:D> = <var:A> $ for some positive integers $ <var:A> $ ahead of interpreting this program , it must be that $ <var:L> = <nat:6> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:6> \times <var:A> + <nat:4> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions is clear with typical Hoare techniques . Taking a look at the upcoming piece of code contained in the set of instructions , the variable update command defining $ <var:D> $ as $ <var:B1>$ . This command redefines the precondition $ \{ <var:D> = <var:A> \} $ into the condition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \} $ . This is ensured by the assignment rule found in Hoare techniques . Keeping momentum , the code yielding $ <var:B1> * <var:D> $ to $ <var:B2>$ . This code moves $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \} $ as the postcondition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \} $ . This is ensured through the assignment rule of usual Hoare logic . Taking another step toward the upcoming bit of code in the set of commands , the variable assignmet command \verb | <var:B3> := <var:B2> * <var:D> ; | . This forwards the condition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \} $ into the condition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \} $ . Paying attention to the upcoming command found in the list of instructions , the environment update command letting $ <nat:4> $ to $ <var:B0>$ . This redefines $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \} $ to the condition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ . This is guaranteed through the assignment inference rule from usual Hoare reasoning . Keeping momentum , we see the variable binding line yielding $ <var:B1> * <nat:6> $ as $ <var:B1>$ . This transfers the condition $ \{ <var:D> = <var:A> \land <var:B1> = <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ to $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ . Shifting focus toward the proceeding statement contained in our code segment , we see the environment update statement letting $ <var:B2> * <nat:1> $ to $ <var:B2>$ . This code forwards the precondition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ to the postcondition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ . Moving on to the proceeding piece of code seen in our series of commands , we have the binding code letting $ <var:B3> * <nat:6> $ as $ <var:B3>$ . This command advances the precondition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B3> = <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ as the condition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B3> = <nat:6> * <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ . This is known to be sound with the assignment inference rule of typical Hoare reasoning . Moving onward , we have the code \verb | <var:L> := <var:B3> | . This forwards $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B3> = <nat:6> * <var:A> ^ <nat:3> \land <var:B0> = <nat:4> \} $ into the postcondition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> \} $ . After , the variable assignmet command \verb | <var:L> := <var:L> + <var:B2> | . This moves $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B2> = <nat:1> * <var:A> ^ <nat:2> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> \} $ into the condition $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> \} $ . Advancing to the next step , we have the variable assignmet line \verb | <var:L> := <var:L> + <var:B1> | . This code transfers $ \{ <var:D> = <var:A> \land <var:B1> = <nat:6> * <var:A> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> \} $ toward $ \{ <var:D> = <var:A> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> \} $ . This is guaranteed by the assignment law obtained from usual Hoare reasoning . Focusing on the following statement in the set of instructions , the variable update statement \verb | <var:L> := <var:L> + <var:B0> | . This code transfers the condition $ \{ <var:D> = <var:A> \land <var:B0> = <nat:4> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> \} $ as the postcondition $ \{ <var:D> = <var:A> \land <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:D> = <var:A> }} <var:B1> := <var:D> ; <var:B2> := <var:B1> * <var:D> ; <var:B3> := <var:B2> * <var:D> ; <var:B0> := <nat:4> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:6> ; <var:L> := <var:B3> <var:L> := <var:L> + <var:B2> <var:L> := <var:L> + <var:B1> <var:L> := <var:L> + <var:B0> {{ <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <nat:6> * <var:A> /\ <var:B2> = <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <nat:6> * <var:A> /\ <var:B2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:B3> = <var:A> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <nat:6> * <var:A> /\ <var:B2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:B3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <nat:6> * <var:A> /\ <var:B2> = <nat:1> * <var:A> ^ <nat:2> /\ <var:B0> = <nat:4> /\ <var:L> = <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B1> = <nat:6> * <var:A> /\ <var:B0> = <nat:4> /\ <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:B0> = <nat:4> /\ <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:A> /\ <var:L> = <nat:6> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 