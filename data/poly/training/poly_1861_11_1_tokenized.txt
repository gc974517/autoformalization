\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:R1> := <var:f> ; <var:R2> := <var:R1> * <var:f> ; <var:R3> := <var:R2> * <var:f> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:1> ; <var:a> := <var:R3> <var:a> := <var:a> + <var:R2> <var:a> := <var:a> + <var:R1> <var:a> := <var:a> + <var:R0> \end{verbatim} Allow that $ <var:f> = <var:D> $ ( for every $ <var:D> \in \mathbb{Z}^+ $ ) prior to evaluating the series of instructions it follows that we see $ <var:a> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:f> = <var:D> \} \\ <var:R1> := <var:f> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <var:D> \} \\ <var:R2> := <var:R1> * <var:f> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \} \end{eqnarray} Furthering running the segment of code gives : \begin{eqnarray} <var:R3> := <var:R2> * <var:f> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \} \\ <var:R0> := <nat:1> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:1> \} \\ <var:R1> := <var:R1> * <nat:2> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <nat:2> \times <var:D> \land <var:R2> = <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:1> \} \\ <var:R2> := <var:R2> * <nat:1> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <nat:2> \times <var:D> \land <var:R2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:R3> = <var:D> ^ <nat:3> \land <var:R0> = <nat:1> \} \end{eqnarray} Continuing interpreting this program produces : \begin{eqnarray} <var:R3> := <var:R3> * <nat:1> ; \\ \{ <var:f> = <var:D> \land <var:R1> = <nat:2> \times <var:D> \land <var:R2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:R3> = <nat:1> \times <var:D> ^ <nat:3> \land <var:R0> = <nat:1> \} \\ <var:a> := <var:R3> \\ \{ <var:f> = <var:D> \land <var:R1> = <nat:2> \times <var:D> \land <var:R2> = <nat:1> \times <var:D> ^ <nat:2> \land <var:R0> = <nat:1> \land <var:a> = <nat:1> \times <var:D> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:R2> \\ \{ <var:f> = <var:D> \land <var:R1> = <nat:2> \times <var:D> \land <var:R0> = <nat:1> \land <var:a> = <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:R1> \\ \{ <var:f> = <var:D> \land <var:R0> = <nat:1> \land <var:a> = <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> \} \\ <var:a> := <var:a> + <var:R0> \\ \{ <var:f> = <var:D> \land <var:a> = <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:f> = <var:D> }} <var:R1> := <var:f> ; <var:R2> := <var:R1> * <var:f> ; <var:R3> := <var:R2> * <var:f> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:1> ; <var:a> := <var:R3> <var:a> := <var:a> + <var:R2> <var:a> := <var:a> + <var:R1> <var:a> := <var:a> + <var:R0> {{ <var:a> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <nat:2> * <var:D> /\ <var:R2> = <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <nat:2> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R3> = <var:D> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <nat:2> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <nat:2> * <var:D> /\ <var:R2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:R0> = <nat:1> /\ <var:a> = <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R1> = <nat:2> * <var:D> /\ <var:R0> = <nat:1> /\ <var:a> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:R0> = <nat:1> /\ <var:a> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:a> = <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 