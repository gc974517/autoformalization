\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h1> := <var:H> ; <var:h2> := <var:h1> * <var:H> ; <var:h3> := <var:h2> * <var:H> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:9> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:4> ; <var:a> := <var:h3> <var:a> := <var:a> + <var:h2> <var:a> := <var:a> + <var:h1> <var:a> := <var:a> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:H> = <var:F> $ ( for any natural coefficients $ <var:F> $ ) ahead of executing the series of instructions it holds that we have $ <var:a> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:H> = <var:F> \} \\ <var:h1> := <var:H> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <var:F> \} \\ <var:h2> := <var:h1> * <var:H> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <var:F> \land <var:h2> = <var:F> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:H> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <var:F> \land <var:h2> = <var:F> ^ <nat:2> \land <var:h3> = <var:F> ^ <nat:3> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <var:F> \land <var:h2> = <var:F> ^ <nat:2> \land <var:h3> = <var:F> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:h1> := <var:h1> * <nat:9> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <nat:9> \times <var:F> \land <var:h2> = <var:F> ^ <nat:2> \land <var:h3> = <var:F> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:h2> := <var:h2> * <nat:1> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <nat:9> \times <var:F> \land <var:h2> = <nat:1> \times <var:F> ^ <nat:2> \land <var:h3> = <var:F> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:h3> := <var:h3> * <nat:4> ; \\ \{ <var:H> = <var:F> \land <var:h1> = <nat:9> \times <var:F> \land <var:h2> = <nat:1> \times <var:F> ^ <nat:2> \land <var:h3> = <nat:4> \times <var:F> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:a> := <var:h3> \\ \{ <var:H> = <var:F> \land <var:h1> = <nat:9> \times <var:F> \land <var:h2> = <nat:1> \times <var:F> ^ <nat:2> \land <var:h0> = <nat:4> \land <var:a> = <nat:4> \times <var:F> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:h2> \\ \{ <var:H> = <var:F> \land <var:h1> = <nat:9> \times <var:F> \land <var:h0> = <nat:4> \land <var:a> = <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:h1> \\ \{ <var:H> = <var:F> \land <var:h0> = <nat:4> \land <var:a> = <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} \\ <var:a> := <var:a> + <var:h0> \\ \{ <var:H> = <var:F> \land <var:a> = <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> + <nat:4> \} \end{eqnarray} Hence , this series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:H> ; <var:h2> := <var:h1> * <var:H> ; <var:h3> := <var:h2> * <var:H> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:9> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:4> ; <var:a> := <var:h3> <var:a> := <var:a> + <var:h2> <var:a> := <var:a> + <var:h1> <var:a> := <var:a> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:H> = <var:F> }} <def:poly> {{ <var:a> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <var:F> /\ <var:h2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <var:F> /\ <var:h2> = <var:F> ^ <nat:2> /\ <var:h3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <var:F> /\ <var:h2> = <var:F> ^ <nat:2> /\ <var:h3> = <var:F> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <nat:9> * <var:F> /\ <var:h2> = <var:F> ^ <nat:2> /\ <var:h3> = <var:F> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <nat:9> * <var:F> /\ <var:h2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:h3> = <var:F> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <nat:9> * <var:F> /\ <var:h2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:F> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <nat:9> * <var:F> /\ <var:h2> = <nat:1> * <var:F> ^ <nat:2> /\ <var:h0> = <nat:4> /\ <var:a> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h1> = <nat:9> * <var:F> /\ <var:h0> = <nat:4> /\ <var:a> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:h0> = <nat:4> /\ <var:a> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:F> /\ <var:a> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 