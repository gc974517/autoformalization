\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:H> := <var:M2> ; <var:H> := <var:H> + <var:M1> ; <var:H> := <var:H> + <var:M0> \end{verbatim} Assuming that $ <var:w> = <var:K> $ before evaluating the code segment it holds that we have $ <var:H> = <nat:4> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:3> $ when segment of code has finished . \end{theorem} \begin{proof} The course of logic for our list of instructions can be seen with usual Hoare techniques . After , we see \begin{eqnarray} \{ <var:w> = <var:K> \} \, <var:M0> := <nat:3> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \, <var:M1> := <nat:8> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \} \, <var:M1> := <var:M1> * <var:w> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \times <var:K> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \times <var:K> \} \, <var:M2> := <nat:4> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \times <var:K> \land <var:M2> = <nat:4> \} \end{eqnarray} Moving onward , we have \begin{eqnarray} \{ <var:w> = <var:K> \} \, <var:M0> := <nat:3> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \, <var:M1> := <nat:8> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \} \end{eqnarray} Jumping to the following commands in our set of commands , we see \begin{eqnarray} \{ <var:w> = <var:K> \} \, <var:M0> := <nat:3> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \} \, <var:M1> := <nat:8> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \} \\ \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \} \, <var:M1> := <var:M1> * <var:w> \, \{ <var:w> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:8> \times <var:K> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <var:M0> := <nat:3> ; <var:M1> := <nat:8> ; <var:M1> := <var:M1> * <var:w> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:w> ; <var:M2> := <var:M2> * <var:w> ; <var:H> := <var:M2> ; <var:H> := <var:H> + <var:M1> ; <var:H> := <var:H> + <var:M0> {{ <var:H> = <nat:4> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:8> * <var:K> /\ <var:H> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:M0> = <nat:3> /\ <var:H> = <nat:4> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:H> = <nat:4> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 