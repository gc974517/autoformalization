\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:3> ; <var:F> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:g> = <var:P> $ given any integers $ <var:P> $ prior to evaluating the series of commands then we see $ <var:F> = <nat:3> $ once set of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:P> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:g> = <var:P> \land <var:s0> = <nat:3> \} \\ <var:F> := <var:s0> \\ \{ <var:g> = <var:P> \land <var:F> = <nat:3> \} \end{eqnarray} Applying Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:F> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:g> = <var:P> }} <def:poly> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 