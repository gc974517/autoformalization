\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:8> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:y> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:y> ; <var:F2> := <var:F2> * <var:y> ; <var:T> := <var:F2> ; <var:T> := <var:T> + <var:F1> ; <var:T> := <var:T> + <var:F0> \end{verbatim} Given it to be that $ <var:y> = <var:P> $ before executing the segment of code , it follows that $ <var:T> = <nat:8> \times <var:P> ^ <nat:2> + <nat:8> \times <var:P> + <nat:8> $ once list of commands is done executing . \end{theorem} \begin{proof} The course of logic for the segment of code can be demonstrated through usual Hoare logic . Following , we see \begin{verbatim} { <var:y> = <var:P> } <var:F0> := <nat:8> { <var:y> = <var:P> \land <var:F0> = <nat:8> } { <var:y> = <var:P> \land <var:F0> = <nat:8> } <var:F1> := <nat:8> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> } { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> } <var:F1> := <var:F1> * <var:y> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> } { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> } <var:F2> := <nat:8> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> } { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> } <var:F2> := <var:F2> * <var:y> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> * <var:P> } { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> * <var:P> } <var:F2> := <var:F2> * <var:y> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> * <var:P> ^ <nat:2> } { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:F2> = <nat:8> * <var:P> ^ <nat:2> } <var:T> := <var:F2> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> * <var:P> \land <var:T> = <nat:8> * <var:P> ^ <nat:2> } \end{verbatim} Considering the proceeding steps contained in our segment of code , \begin{verbatim} { <var:y> = <var:P> } <var:F0> := <nat:8> { <var:y> = <var:P> \land <var:F0> = <nat:8> } { <var:y> = <var:P> \land <var:F0> = <nat:8> } <var:F1> := <nat:8> { <var:y> = <var:P> \land <var:F0> = <nat:8> \land <var:F1> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:y> = <var:P> }} <var:F0> := <nat:8> ; <var:F1> := <nat:8> ; <var:F1> := <var:F1> * <var:y> ; <var:F2> := <nat:8> ; <var:F2> := <var:F2> * <var:y> ; <var:F2> := <var:F2> * <var:y> ; <var:T> := <var:F2> ; <var:T> := <var:T> + <var:F1> ; <var:T> := <var:T> + <var:F0> {{ <var:T> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> * <var:P> /\ <var:F2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> * <var:P> /\ <var:F2> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> * <var:P> /\ <var:F2> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:8> * <var:P> /\ <var:T> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:F0> = <nat:8> /\ <var:T> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:P> /\ <var:T> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 