\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:2> ; <var:b> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:g> = <var:d> $ prior to the evaluation of our list of instructions , it follows that we have $ <var:b> = <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:d> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:g> = <var:d> \land <var:H0> = <nat:2> \} \\ <var:b> := <var:H0> \\ \{ <var:g> = <var:d> \land <var:b> = <nat:2> \} \end{eqnarray} Thusly , this segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:b> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:g> = <var:d> }} <def:poly> {{ <var:b> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:b> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 