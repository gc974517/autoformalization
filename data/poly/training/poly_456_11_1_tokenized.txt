\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:j1> := <var:U> ; <var:j2> := <var:j1> * <var:U> ; <var:j3> := <var:j2> * <var:U> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:8> ; <var:j3> := <var:j3> * <nat:9> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> \end{verbatim} Assume ( assuming some natural numbers $ <var:y> $ ) that we have $ <var:U> = <var:y> $ ahead of running the series of commands , it must be that we have $ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> $ after set of commands has finished . \end{theorem} \begin{proof} The course of logic for the series of instructions can be seen through Hoare logic . Considering the following bit of code in our set of instructions , we see the variable assignmet line assigning $ <var:U> $ to $ <var:j1>$ . This code moves the precondition $ \{ <var:U> = <var:y> \} $ toward $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \} $ . This is shown to be logically sound by the assignment rule given in usual Hoare reasoning . Considering the next line found in our segment of code , we have the binding command letting $ <var:j1> * <var:U> $ toward $ <var:j2>$ . This line moves the condition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \} $ to the postcondition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \} $ . This is rigorously given using the assignment law obtained from Hoare logic . Paying attention to the next command contained in our series of instructions , we see the binding line giving $ <var:j2> * <var:U> $ toward $ <var:j3>$ . This statement redefines the condition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \} $ . This is ensured using the assignment scheme from Hoare logic . Observing the upcoming command in the code , the environment update command defining $ <nat:5> $ into $ <var:j0>$ . This line forwards the condition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ . This is deduced by the assignment rule in standard Hoare reasoning . Observing the upcoming piece of code found in our set of commands , we have the assignment code \verb | <var:j1> := <var:j1> * <nat:3> ; | . This command redefines the condition $ \{ <var:U> = <var:y> \land <var:j1> = <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ into $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ . Stepping through , the command defining $ <var:j2> * <nat:8> $ into $ <var:j2>$ . This statement advances the precondition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ toward $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ . Taking another step toward the upcoming piece of code found in the series of instructions , we have the variable binding line defining $ <var:j3> * <nat:9> $ into $ <var:j3>$ . This statement advances the condition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j3> = <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ as the condition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j3> = <nat:9> * <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ . Observing the proceeding command found in the code , the statement binding $ <var:j3$ as $ <var:k>$ . This redefines the condition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j3> = <nat:9> * <var:y> ^ <nat:3> \land <var:j0> = <nat:5> \} $ as $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> \} $ . This is ensured using the assignment inference rule obtained from typical Hoare techniques . Taking another step toward the subsequent line in the code , the variable binding statement binding $ <var:k> + <var:j2$ to $ <var:k>$ . This command transfers the condition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j2> = <nat:8> * <var:y> ^ <nat:2> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> \} $ into $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> \} $ . This is sound through the assignment scheme found in standard Hoare logic . Immediately after , we see the variable binding line \verb | <var:k> := <var:k> + <var:j1> | . This statement advances the precondition $ \{ <var:U> = <var:y> \land <var:j1> = <nat:3> * <var:y> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:y> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> \} $ . Observing the upcoming step seen in the series of instructions , we have the environment update line \verb | <var:k> := <var:k> + <var:j0> | . This takes the precondition $ \{ <var:U> = <var:y> \land <var:j0> = <nat:5> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> \} $ toward the postcondition $ \{ <var:U> = <var:y> \land <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:U> = <var:y> }} <var:j1> := <var:U> ; <var:j2> := <var:j1> * <var:U> ; <var:j3> := <var:j2> * <var:U> ; <var:j0> := <nat:5> ; <var:j1> := <var:j1> * <nat:3> ; <var:j2> := <var:j2> * <nat:8> ; <var:j3> := <var:j3> * <nat:9> ; <var:k> := <var:j3> <var:k> := <var:k> + <var:j2> <var:k> := <var:k> + <var:j1> <var:k> := <var:k> + <var:j0> {{ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <var:y> /\ <var:j2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <var:y> /\ <var:j2> = <var:y> ^ <nat:2> /\ <var:j3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <var:y> /\ <var:j2> = <var:y> ^ <nat:2> /\ <var:j3> = <var:y> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <nat:3> * <var:y> /\ <var:j2> = <var:y> ^ <nat:2> /\ <var:j3> = <var:y> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <nat:3> * <var:y> /\ <var:j2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:j3> = <var:y> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <nat:3> * <var:y> /\ <var:j2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:j3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:j0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <nat:3> * <var:y> /\ <var:j2> = <nat:8> * <var:y> ^ <nat:2> /\ <var:j0> = <nat:5> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j1> = <nat:3> * <var:y> /\ <var:j0> = <nat:5> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:j0> = <nat:5> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:8> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 