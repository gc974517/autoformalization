\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:6> ; <var:x> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:C> = <var:y> $ ahead of interpreting our code it must be that $ <var:x> = <nat:6> $ after code segment executes . \end{theorem} \begin{proof} The argument for this series of commands can be done through standard Hoare reasoning . Shifting focus toward the subsequent lines of codefound in our list of instructions , \[ \begin{tabular} {rcl} \{ <var:C> = <var:y> \} & <var:t0> := <nat:6> & \{ <var:C> = <var:y> \land <var:t0> = <nat:6> \} \\ \{ <var:C> = <var:y> \land <var:t0> = <nat:6> \} & <var:x> := <var:t0& \{ <var:C> = <var:y> \land <var:x> = <nat:6> \} \end{tabular} This is shown by the environment update scheme defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:6> ; <var:x> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <def:poly> {{ <var:x> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:x> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 