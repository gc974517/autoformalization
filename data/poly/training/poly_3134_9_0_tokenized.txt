\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:G> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:G> ; <var:g2> := <var:g2> * <var:G> ; <var:L> := <var:g2> ; <var:L> := <var:L> + <var:g1> ; <var:L> := <var:L> + <var:g0> \end{verbatim} Assuming that $ <var:G> = <var:v> $ ahead of executing our code , it follows that we see $ <var:L> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:2> $ once list of commands has executed . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:G> = <var:v> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:3> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \} \\ <var:g1> := <var:g1> * <var:G> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \times <var:v> \} \\ <var:g2> := <nat:1> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \times <var:v> \land <var:g2> = <nat:1> \} \\ <var:g2> := <var:g2> * <var:G> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \times <var:v> \land <var:g2> = <nat:1> \times <var:v> \} \\ <var:g2> := <var:g2> * <var:G> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \times <var:v> \land <var:g2> = <nat:1> \times <var:v> ^ <nat:2> \} \\ <var:L> := <var:g2> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \times <var:v> \land <var:L> = <nat:1> \times <var:v> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:g1> ; \\ \{ <var:G> = <var:v> \land <var:g0> = <nat:2> \land <var:L> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> \} \\ <var:L> := <var:L> + <var:g0> \\ \{ <var:G> = <var:v> \land <var:L> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:2> \} \end{eqnarray} Considering the above , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:G> = <var:v> }} <var:g0> := <nat:2> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:G> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:G> ; <var:g2> := <var:g2> * <var:G> ; <var:L> := <var:g2> ; <var:L> := <var:L> + <var:g1> ; <var:L> := <var:L> + <var:g0> {{ <var:L> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:v> /\ <var:g2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:v> /\ <var:g2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:v> /\ <var:g2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:v> /\ <var:L> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:g0> = <nat:2> /\ <var:L> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:v> /\ <var:L> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 