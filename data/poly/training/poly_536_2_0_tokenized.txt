\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:H0> := <nat:3> ; <var:u> := <var:H0> \end{verbatim} Allow that $ <var:s> = <var:A> $ given any positive coefficients $ <var:A> $ prior to evaluating this program , it holds that $ <var:u> = <nat:3> $ after list of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is shown using standard Hoare reasoning . Taking another step toward the upcoming bit of code in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:s> = <var:A> \} & <var:H0> := <nat:3> & \{ <var:s> = <var:A> \land <var:H0> = <nat:3> \} \end{tabular} This is ensured with the variable binding scheme found in typical Hoare reasoning . Shifting focus toward the subsequent piece of code contained in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:A> \} & <var:H0> := <nat:3> & \{ <var:s> = <var:A> \land <var:H0> = <nat:3> \} \end{tabular} This is known to be sound by the environment update scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:s> = <var:A> }} <var:H0> := <nat:3> ; <var:u> := <var:H0> {{ <var:u> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:A> /\ <var:u> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 