\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:8> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:F> ; <var:W> := <var:l1> ; <var:W> := <var:W> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assuming that $ <var:F> = <var:U> $ prior to evaluating our set of instructions , it must be that $ <var:W> = <nat:6> \cdot <var:U> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:U> \} \\ <var:l0> := <nat:8> ; \\ \{ <var:F> = <var:U> \land <var:l0> = <nat:8> \} \\ <var:l1> := <nat:6> ; \\ \{ <var:F> = <var:U> \land <var:l0> = <nat:8> \land <var:l1> = <nat:6> \} \\ <var:l1> := <var:l1> * <var:F> ; \\ \{ <var:F> = <var:U> \land <var:l0> = <nat:8> \land <var:l1> = <nat:6> * <var:U> \} \\ <var:W> := <var:l1> ; \\ \{ <var:F> = <var:U> \land <var:l0> = <nat:8> \land <var:W> = <nat:6> * <var:U> \} \\ <var:W> := <var:W> + <var:l0> \\ \{ <var:F> = <var:U> \land <var:W> = <nat:6> * <var:U> + <nat:8> \} \end{eqnarray} Utilizing usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:8> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:F> ; <var:W> := <var:l1> ; <var:W> := <var:W> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:F> = <var:U> }} <def:poly> {{ <var:W> = <nat:6> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:l0> = <nat:8> /\ <var:W> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:U> /\ <var:W> = <nat:6> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 