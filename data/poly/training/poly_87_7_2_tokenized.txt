\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allowing that we have $ <var:N> = <var:K> $ prior to evaluating the code segment it holds that $ <var:u> = <nat:1> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:5> + <nat:4> \times <var:K> ^ <nat:4> + <nat:3> \times <var:K> ^ <nat:3> + <nat:4> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:K> \} \\ <var:u> := <nat:1> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> + <nat:3> \} \\ <var:u> := <nat:4> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> \} \\ <var:u> := <nat:4> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> \} \\ <var:u> := <nat:1> + <var:u> * <var:N> ; \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:N> \\ \{ <var:N> = <var:K> \land <var:u> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:1> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <nat:3> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> ; <var:u> := <nat:1> + <var:u> * <var:N> ; <var:u> := <nat:4> + <var:u> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:N> = <var:K> }} <def:poly> {{ <var:u> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:u> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 