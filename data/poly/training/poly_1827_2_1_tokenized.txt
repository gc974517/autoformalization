\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:3> ; <var:i> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Given for any positive integers $ <var:M> $ that we have $ <var:n> = <var:M> $ prior to the evaluation of this program , it follows that $ <var:i> = <nat:3> $ when segment of code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions is given through typical Hoare reasoning . Keeping momentum , we have the variable binding code giving $ <nat:3> $ to $ <var:Q0>$ . This command forwards the condition $ \{ <var:n> = <var:M> \} $ to the condition $ \{ <var:n> = <var:M> \land <var:Q0> = <nat:3> \} $ . This is guaranteed using the assignment scheme of standard Hoare logic . Considering the following bit of code contained in our list of commands , we see the variable assignmet statement \verb | <var:i> := <var:Q0> | . This forwards the condition $ \{ <var:n> = <var:M> \land <var:Q0> = <nat:3> \} $ into the postcondition $ \{ <var:n> = <var:M> \land <var:i> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:i> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:n> = <var:M> }} <def:poly> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:M> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 