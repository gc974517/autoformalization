\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:4> ; <var:n> := <var:D0> \end{verbatim} Allowing that $ <var:t> = <var:d> $ before interpreting the list of instructions it must be that we see $ <var:n> = <nat:4> $ once set of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for our code is given using usual Hoare techniques . Moving forward to the subsequent line in our series of instructions , we have the variable update statement letting $ <nat:4> $ to $ <var:D0>$ . This redefines the precondition $ \{ <var:t> = <var:d> \} $ into the postcondition $ \{ <var:t> = <var:d> \land <var:D0> = <nat:4> \} $ . Honing in on the upcoming piece of code seen in the list of commands , the variable binding statement \verb | <var:n> := <var:D0> | . This command redefines the condition $ \{ <var:t> = <var:d> \land <var:D0> = <nat:4> \} $ to the condition $ \{ <var:t> = <var:d> \land <var:n> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <var:D0> := <nat:4> ; <var:n> := <var:D0> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 