\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:A> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:2> ; <var:m> := <var:g1> <var:m> := <var:m> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allowing --- given $ <var:c> \in \mathbb{Z}^+ $ --- it to be that $ <var:A> = <var:c> $ prior to interpreting the segment of code it must be that we see $ <var:m> = <nat:2> \cdot <var:c> + <nat:8> $ after series of commands exits . \end{theorem} \begin{proof} The course of logic for our list of instructions can be given by Hoare reasoning . Moving on to the following lines of codecontained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:c> \} & <var:g1> := <var:A> & \{ <var:A> = <var:c> \land <var:g1> = <var:c> \} \\ \{ <var:A> = <var:c> \land <var:g1> = <var:c> \} & <var:g0> := <nat:8> & \{ <var:A> = <var:c> \land <var:g1> = <var:c> \land <var:g0> = <nat:8> \} \\ \{ <var:A> = <var:c> \land <var:g1> = <var:c> \land <var:g0> = <nat:8> \} & <var:g1> := <var:g1> * <nat:2> & \{ <var:A> = <var:c> \land <var:g1> = <nat:2> \cdot <var:c> \land <var:g0> = <nat:8> \} \\ \{ <var:A> = <var:c> \land <var:g1> = <nat:2> \cdot <var:c> \land <var:g0> = <nat:8> \} & <var:m> := <var:g1& \{ <var:A> = <var:c> \land <var:g0> = <nat:8> \land <var:m> = <nat:2> \cdot <var:c> \} \\ \{ <var:A> = <var:c> \land <var:g0> = <nat:8> \land <var:m> = <nat:2> \cdot <var:c> \} & <var:m> := <var:m> + <var:g0& \{ <var:A> = <var:c> \land <var:m> = <nat:2> \cdot <var:c> + <nat:8> \} \end{tabular} This is shown using the binding inference rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:A> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:2> ; <var:m> := <var:g1> <var:m> := <var:m> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:A> = <var:c> }} <def:poly> {{ <var:m> = <nat:2> * <var:c> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:g1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:g1> = <var:c> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:g1> = <nat:2> * <var:c> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:g0> = <nat:8> /\ <var:m> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:m> = <nat:2> * <var:c> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 