\begin{document} \begin{theorem} Consider a set of instructions such that \begin{verbatim} <var:M1> := <var:h> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:3> ; <var:l> := <var:M1> <var:l> := <var:l> + <var:M0> \end{verbatim} Assuming $ <var:h> = <var:f> $ prior to interpreting this code it must be that we see $ <var:l> = <nat:3> * <var:f> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of this program is done by typical Hoare techniques . Now , the binding statement yielding $ <var:h> $ toward $ <var:M1>$ . This moves $ \{ <var:h> = <var:f> \} $ into the postcondition $ \{ <var:h> = <var:f> \land <var:M1> = <var:f> \} $ . Honing in on the following line in our code segment , we have the assignment command giving $ <nat:7> $ toward $ <var:M0>$ . This line advances the precondition $ \{ <var:h> = <var:f> \land <var:M1> = <var:f> \} $ as the postcondition $ \{ <var:h> = <var:f> \land <var:M1> = <var:f> \land <var:M0> = <nat:7> \} $ . This is ensured with the assignment rule of standard Hoare logic . Advancing to the next step , we see the line giving $ <var:M1> * <nat:3> $ to $ <var:M1>$ . This line forwards the condition $ \{ <var:h> = <var:f> \land <var:M1> = <var:f> \land <var:M0> = <nat:7> \} $ toward the condition $ \{ <var:h> = <var:f> \land <var:M1> = <nat:3> * <var:f> \land <var:M0> = <nat:7> \} $ . Immediately after , we see the assignment line \verb | <var:l> := <var:M1> | . This statement forwards the precondition $ \{ <var:h> = <var:f> \land <var:M1> = <nat:3> * <var:f> \land <var:M0> = <nat:7> \} $ into $ \{ <var:h> = <var:f> \land <var:M0> = <nat:7> \land <var:l> = <nat:3> * <var:f> \} $ . Stepping through , the variable binding statement \verb | <var:l> := <var:l> + <var:M0> | . This line forwards the condition $ \{ <var:h> = <var:f> \land <var:M0> = <nat:7> \land <var:l> = <nat:3> * <var:f> \} $ toward $ \{ <var:h> = <var:f> \land <var:l> = <nat:3> * <var:f> + <nat:7> \} $ . This is known to be sound with the assignment inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:h> = <var:f> }} <var:M1> := <var:h> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:3> ; <var:l> := <var:M1> <var:l> := <var:l> + <var:M0> {{ <var:l> = <nat:3> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:M1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:M1> = <var:f> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:M1> = <nat:3> * <var:f> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:M0> = <nat:7> /\ <var:l> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:l> = <nat:3> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 