\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:N> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:m> := <var:s2> ; <var:m> := <var:m> + <var:s1> ; <var:m> := <var:m> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:N> = <var:r> $ , given $ <var:r> $ , ahead of interpreting our series of commands it must be that we have $ <var:m> = <nat:1> \times <var:r> ^ <nat:2> + <nat:6> \times <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this series of instructions can be shown by typical Hoare techniques . Advancing to the following lines of codein the code , we see \begin{eqnarray} \{ <var:N> = <var:r> \} \, <var:s0> := <nat:3> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \} \, <var:s1> := <nat:6> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \} \end{eqnarray} This is shown to be logically sound through the variable assignmet inference rule given in standard Hoare reasoning . Focusing on the next lines of codefound in the code , we see \begin{eqnarray} \{ <var:N> = <var:r> \} \, <var:s0> := <nat:3> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \} \, <var:s1> := <nat:6> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \} \, <var:s1> := <var:s1> * <var:N> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \} \, <var:s2> := <nat:1> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \} \, <var:s2> := <var:s2> * <var:N> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \cdot <var:r> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \cdot <var:r> \} \, <var:s2> := <var:s2> * <var:N> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \cdot <var:r> ^ <nat:2> \} \\ \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:s2> = <nat:1> \cdot <var:r> ^ <nat:2> \} \, <var:m> := <var:s2> \, \{ <var:N> = <var:r> \land <var:s0> = <nat:3> \land <var:s1> = <nat:6> \cdot <var:r> \land <var:m> = <nat:1> \cdot <var:r> ^ <nat:2> \} \end{eqnarray} This is ensured through the environment update law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:3> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:N> ; <var:s2> := <nat:1> ; <var:s2> := <var:s2> * <var:N> ; <var:s2> := <var:s2> * <var:N> ; <var:m> := <var:s2> ; <var:m> := <var:m> + <var:s1> ; <var:m> := <var:m> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:N> = <var:r> }} <def:poly> {{ <var:m> = <nat:1> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> * <var:r> /\ <var:s2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> * <var:r> /\ <var:s2> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> * <var:r> /\ <var:s2> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:6> * <var:r> /\ <var:m> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:s0> = <nat:3> /\ <var:m> = <nat:1> * <var:r> ^ <nat:2> + <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:r> /\ <var:m> = <nat:1> * <var:r> ^ <nat:2> + <nat:6> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 