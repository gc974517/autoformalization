\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:t> ; <var:G2> := <var:G1> * <var:t> ; <var:G3> := <var:G2> * <var:t> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:7> ; <var:G3> := <var:G3> * <nat:4> ; <var:g> := <var:G3> <var:g> := <var:g> + <var:G2> <var:g> := <var:g> + <var:G1> <var:g> := <var:g> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:t> = <var:p> $ , for positive integer coefficients $ <var:p> $ , ahead of executing the code it follows that we have $ <var:g> = <nat:4> \cdot <var:p> ^ <nat:3> + <nat:7> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:2> $ after code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:p> \} \\ <var:G1> := <var:t> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <var:p> \} \end{eqnarray} Allowing executing our series of commands returns : \begin{eqnarray} <var:G2> := <var:G1> * <var:t> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <var:p> \land <var:G2> = <var:p> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:t> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <var:p> \land <var:G2> = <var:p> ^ <nat:2> \land <var:G3> = <var:p> ^ <nat:3> \} \end{eqnarray} Allowing interpreting the code segment results in : \begin{eqnarray} <var:G0> := <nat:2> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <var:p> \land <var:G2> = <var:p> ^ <nat:2> \land <var:G3> = <var:p> ^ <nat:3> \land <var:G0> = <nat:2> \} \\ <var:G1> := <var:G1> * <nat:4> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <nat:4> * <var:p> \land <var:G2> = <var:p> ^ <nat:2> \land <var:G3> = <var:p> ^ <nat:3> \land <var:G0> = <nat:2> \} \\ <var:G2> := <var:G2> * <nat:7> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <nat:4> * <var:p> \land <var:G2> = <nat:7> * <var:p> ^ <nat:2> \land <var:G3> = <var:p> ^ <nat:3> \land <var:G0> = <nat:2> \} \\ <var:G3> := <var:G3> * <nat:4> ; \\ \{ <var:t> = <var:p> \land <var:G1> = <nat:4> * <var:p> \land <var:G2> = <nat:7> * <var:p> ^ <nat:2> \land <var:G3> = <nat:4> * <var:p> ^ <nat:3> \land <var:G0> = <nat:2> \} \\ <var:g> := <var:G3> \\ \{ <var:t> = <var:p> \land <var:G1> = <nat:4> * <var:p> \land <var:G2> = <nat:7> * <var:p> ^ <nat:2> \land <var:G0> = <nat:2> \land <var:g> = <nat:4> * <var:p> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:G2> \\ \{ <var:t> = <var:p> \land <var:G1> = <nat:4> * <var:p> \land <var:G0> = <nat:2> \land <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:G1> \\ \{ <var:t> = <var:p> \land <var:G0> = <nat:2> \land <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> \} \\ <var:g> := <var:g> + <var:G0> \\ \{ <var:t> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> \} \end{eqnarray} Applying typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:t> ; <var:G2> := <var:G1> * <var:t> ; <var:G3> := <var:G2> * <var:t> ; <var:G0> := <nat:2> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:7> ; <var:G3> := <var:G3> * <nat:4> ; <var:g> := <var:G3> <var:g> := <var:g> + <var:G2> <var:g> := <var:g> + <var:G1> <var:g> := <var:g> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:t> = <var:p> }} <def:poly> {{ <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <var:p> /\ <var:G2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <var:p> /\ <var:G2> = <var:p> ^ <nat:2> /\ <var:G3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <var:p> /\ <var:G2> = <var:p> ^ <nat:2> /\ <var:G3> = <var:p> ^ <nat:3> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <nat:4> * <var:p> /\ <var:G2> = <var:p> ^ <nat:2> /\ <var:G3> = <var:p> ^ <nat:3> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <nat:4> * <var:p> /\ <var:G2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:G3> = <var:p> ^ <nat:3> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <nat:4> * <var:p> /\ <var:G2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:p> ^ <nat:3> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <nat:4> * <var:p> /\ <var:G2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:G0> = <nat:2> /\ <var:g> = <nat:4> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G1> = <nat:4> * <var:p> /\ <var:G0> = <nat:2> /\ <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:G0> = <nat:2> /\ <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 