\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:N> ; <var:T> := <var:r1> ; <var:T> := <var:T> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Assuming ( for some positive numbers $ <var:O> $ ) it to be that $ <var:N> = <var:O> $ prior to the execution of our program , it follows that we see $ <var:T> = <nat:1> \cdot <var:O> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of commands can be shown using the following decorated list of commands . \begin{eqnarray} \{ <var:N> = <var:O> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:N> = <var:O> \land <var:r0> = <nat:2> \} \\ <var:r1> := <nat:1> ; \\ \{ <var:N> = <var:O> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \} \\ <var:r1> := <var:r1> * <var:N> ; \\ \{ <var:N> = <var:O> \land <var:r0> = <nat:2> \land <var:r1> = <nat:1> \times <var:O> \} \\ <var:T> := <var:r1> ; \\ \{ <var:N> = <var:O> \land <var:r0> = <nat:2> \land <var:T> = <nat:1> \times <var:O> \} \\ <var:T> := <var:T> + <var:r0> \\ \{ <var:N> = <var:O> \land <var:T> = <nat:1> \times <var:O> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:2> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:N> ; <var:T> := <var:r1> ; <var:T> := <var:T> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:N> = <var:O> }} <def:poly> {{ <var:T> = <nat:1> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:r0> = <nat:2> /\ <var:T> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:O> /\ <var:T> = <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 