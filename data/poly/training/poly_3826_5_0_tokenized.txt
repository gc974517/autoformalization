\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:q> ; <var:R> := <var:M1> ; <var:R> := <var:R> + <var:M0> \end{verbatim} Allowing $ <var:q> = <var:d> $ prior to the execution of this list of instructions it follows that $ <var:R> = <nat:9> * <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic gives us : \begin{eqnarray} \{ <var:q> = <var:d> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:q> = <var:d> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:9> ; \\ \{ <var:q> = <var:d> \land <var:M0> = <nat:4> \land <var:M1> = <nat:9> \} \\ <var:M1> := <var:M1> * <var:q> ; \\ \{ <var:q> = <var:d> \land <var:M0> = <nat:4> \land <var:M1> = <nat:9> \cdot <var:d> \} \\ <var:R> := <var:M1> ; \\ \{ <var:q> = <var:d> \land <var:M0> = <nat:4> \land <var:R> = <nat:9> \cdot <var:d> \} \\ <var:R> := <var:R> + <var:M0> \\ \{ <var:q> = <var:d> \land <var:R> = <nat:9> \cdot <var:d> + <nat:4> \} \end{eqnarray} As a consequence , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:q> = <var:d> }} <var:M0> := <nat:4> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:q> ; <var:R> := <var:M1> ; <var:R> := <var:R> + <var:M0> {{ <var:R> = <nat:9> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:M0> = <nat:4> /\ <var:R> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:R> = <nat:9> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 