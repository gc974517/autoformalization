\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:X> ; <var:K2> := <var:K1> * <var:X> ; <var:K3> := <var:K2> * <var:X> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:1> ; <var:K3> := <var:K3> * <nat:7> ; <var:m> := <var:K3> <var:m> := <var:m> + <var:K2> <var:m> := <var:m> + <var:K1> <var:m> := <var:m> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Assuming given all positive numbers $ <var:u> $ that $ <var:X> = <var:u> $ prior to interpreting our code segment , it follows that we have $ <var:m> = <nat:7> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:6> \cdot <var:u> + <nat:3> $ . \end{theorem} \begin{proof} Let this decorated series of commands . \begin{eqnarray} \{ <var:X> = <var:u> \} \\ <var:K1> := <var:X> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <var:u> \} \\ <var:K2> := <var:K1> * <var:X> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:X> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:3> \} \\ <var:K1> := <var:K1> * <nat:6> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <nat:6> * <var:u> \land <var:K2> = <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:3> \} \\ <var:K2> := <var:K2> * <nat:1> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <nat:6> * <var:u> \land <var:K2> = <nat:1> * <var:u> ^ <nat:2> \land <var:K3> = <var:u> ^ <nat:3> \land <var:K0> = <nat:3> \} \\ <var:K3> := <var:K3> * <nat:7> ; \\ \{ <var:X> = <var:u> \land <var:K1> = <nat:6> * <var:u> \land <var:K2> = <nat:1> * <var:u> ^ <nat:2> \land <var:K3> = <nat:7> * <var:u> ^ <nat:3> \land <var:K0> = <nat:3> \} \\ <var:m> := <var:K3> \\ \{ <var:X> = <var:u> \land <var:K1> = <nat:6> * <var:u> \land <var:K2> = <nat:1> * <var:u> ^ <nat:2> \land <var:K0> = <nat:3> \land <var:m> = <nat:7> * <var:u> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:K2> \\ \{ <var:X> = <var:u> \land <var:K1> = <nat:6> * <var:u> \land <var:K0> = <nat:3> \land <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:K1> \\ \{ <var:X> = <var:u> \land <var:K0> = <nat:3> \land <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:6> * <var:u> \} \\ <var:m> := <var:m> + <var:K0> \\ \{ <var:X> = <var:u> \land <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:X> ; <var:K2> := <var:K1> * <var:X> ; <var:K3> := <var:K2> * <var:X> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:1> ; <var:K3> := <var:K3> * <nat:7> ; <var:m> := <var:K3> <var:m> := <var:m> + <var:K2> <var:m> := <var:m> + <var:K1> <var:m> := <var:m> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:X> = <var:u> }} <def:poly> {{ <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <nat:6> * <var:u> /\ <var:K2> = <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <nat:6> * <var:u> /\ <var:K2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:K3> = <var:u> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <nat:6> * <var:u> /\ <var:K2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:u> ^ <nat:3> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <nat:6> * <var:u> /\ <var:K2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:K0> = <nat:3> /\ <var:m> = <nat:7> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K1> = <nat:6> * <var:u> /\ <var:K0> = <nat:3> /\ <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:K0> = <nat:3> /\ <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:u> /\ <var:m> = <nat:7> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 