\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:3> ; <var:E> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:W> = <var:b> $ ( for all positive numbers $ <var:b> $ ) ahead of running the set of instructions it holds that $ <var:E> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:b> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:W> = <var:b> \land <var:O0> = <nat:3> \} \\ <var:E> := <var:O0> \\ \{ <var:W> = <var:b> \land <var:E> = <nat:3> \} \end{eqnarray} Applying typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:3> ; <var:E> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:W> = <var:b> }} <def:poly> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:b> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 