\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:k> ; <var:q2> := <var:q1> * <var:k> ; <var:q3> := <var:q2> * <var:k> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:9> ; <var:q3> := <var:q3> * <nat:6> ; <var:x> := <var:q3> <var:x> := <var:x> + <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Given it to be that $ <var:k> = <var:o> $ prior to the evaluation of the list of commands it follows that we see $ <var:x> = <nat:6> \cdot <var:o> ^ <nat:3> + <nat:9> \cdot <var:o> ^ <nat:2> + <nat:7> \cdot <var:o> + <nat:4> $ when series of commands finishes . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:k> = <var:o> \} \\ <var:q1> := <var:k> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <var:o> \} \\ <var:q2> := <var:q1> * <var:k> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <var:o> \land <var:q2> = <var:o> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:k> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <var:o> \land <var:q2> = <var:o> ^ <nat:2> \land <var:q3> = <var:o> ^ <nat:3> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <var:o> \land <var:q2> = <var:o> ^ <nat:2> \land <var:q3> = <var:o> ^ <nat:3> \land <var:q0> = <nat:4> \} \\ <var:q1> := <var:q1> * <nat:7> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <nat:7> \times <var:o> \land <var:q2> = <var:o> ^ <nat:2> \land <var:q3> = <var:o> ^ <nat:3> \land <var:q0> = <nat:4> \} \\ <var:q2> := <var:q2> * <nat:9> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <nat:7> \times <var:o> \land <var:q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:q3> = <var:o> ^ <nat:3> \land <var:q0> = <nat:4> \} \\ <var:q3> := <var:q3> * <nat:6> ; \\ \{ <var:k> = <var:o> \land <var:q1> = <nat:7> \times <var:o> \land <var:q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:q3> = <nat:6> \times <var:o> ^ <nat:3> \land <var:q0> = <nat:4> \} \\ <var:x> := <var:q3> \\ \{ <var:k> = <var:o> \land <var:q1> = <nat:7> \times <var:o> \land <var:q2> = <nat:9> \times <var:o> ^ <nat:2> \land <var:q0> = <nat:4> \land <var:x> = <nat:6> \times <var:o> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:q2> \\ \{ <var:k> = <var:o> \land <var:q1> = <nat:7> \times <var:o> \land <var:q0> = <nat:4> \land <var:x> = <nat:6> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:q1> \\ \{ <var:k> = <var:o> \land <var:q0> = <nat:4> \land <var:x> = <nat:6> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> \} \\ <var:x> := <var:x> + <var:q0> \\ \{ <var:k> = <var:o> \land <var:x> = <nat:6> \times <var:o> ^ <nat:3> + <nat:9> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> + <nat:4> \} \end{eqnarray} As a result , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:k> ; <var:q2> := <var:q1> * <var:k> ; <var:q3> := <var:q2> * <var:k> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:9> ; <var:q3> := <var:q3> * <nat:6> ; <var:x> := <var:q3> <var:x> := <var:x> + <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:k> = <var:o> }} <def:poly> {{ <var:x> = <nat:6> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <var:o> /\ <var:q2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <var:o> /\ <var:q2> = <var:o> ^ <nat:2> /\ <var:q3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <var:o> /\ <var:q2> = <var:o> ^ <nat:2> /\ <var:q3> = <var:o> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q2> = <var:o> ^ <nat:2> /\ <var:q3> = <var:o> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:q3> = <var:o> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:q3> = <nat:6> * <var:o> ^ <nat:3> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q2> = <nat:9> * <var:o> ^ <nat:2> /\ <var:q0> = <nat:4> /\ <var:x> = <nat:6> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q1> = <nat:7> * <var:o> /\ <var:q0> = <nat:4> /\ <var:x> = <nat:6> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:q0> = <nat:4> /\ <var:x> = <nat:6> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:o> /\ <var:x> = <nat:6> * <var:o> ^ <nat:3> + <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 