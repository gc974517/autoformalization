\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:x> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:9> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume ( given some $ <var:i> $ ) that we have $ <var:x> = <var:i> $ before the evaluation of the series of instructions , it must be that we have $ <var:q> = <nat:9> \cdot <var:i> + <nat:8> $ after code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be shown through standard Hoare logic . Moving onward , the variable binding command letting $ <var:x> $ toward $ <var:g1>$ . This statement takes the condition $ \{ <var:x> = <var:i> \} $ toward the postcondition $ \{ <var:x> = <var:i> \land <var:g1> = <var:i> \} $ . Considering the subsequent bit of code found in our series of instructions , the variable update line binding $ <nat:8> $ into $ <var:g0>$ . This statement advances the condition $ \{ <var:x> = <var:i> \land <var:g1> = <var:i> \} $ into the condition $ \{ <var:x> = <var:i> \land <var:g1> = <var:i> \land <var:g0> = <nat:8> \} $ . This is guaranteed through the assignment law obtained from standard Hoare techniques . Honing in on the subsequent statement found in the code segment , the variable binding line yielding $ <var:g1> * <nat:9> $ into $ <var:g1>$ . This transfers the precondition $ \{ <var:x> = <var:i> \land <var:g1> = <var:i> \land <var:g0> = <nat:8> \} $ into the condition $ \{ <var:x> = <var:i> \land <var:g1> = <nat:9> \cdot <var:i> \land <var:g0> = <nat:8> \} $ . Honing in on the following step seen in our series of instructions , we have the environment update command defining $ <var:g1$ toward $ <var:q>$ . This code takes $ \{ <var:x> = <var:i> \land <var:g1> = <nat:9> \cdot <var:i> \land <var:g0> = <nat:8> \} $ toward the condition $ \{ <var:x> = <var:i> \land <var:g0> = <nat:8> \land <var:q> = <nat:9> \cdot <var:i> \} $ . Immediately following , we see the environment update statement letting $ <var:q> + <var:g0$ into $ <var:q>$ . This command transfers the precondition $ \{ <var:x> = <var:i> \land <var:g0> = <nat:8> \land <var:q> = <nat:9> \cdot <var:i> \} $ toward the condition $ \{ <var:x> = <var:i> \land <var:q> = <nat:9> \cdot <var:i> + <nat:8> \} $ . This is deduced through the assignment law in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:x> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:9> ; <var:q> := <var:g1> <var:q> := <var:q> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:x> = <var:i> }} <def:poly> {{ <var:q> = <nat:9> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:g1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:g1> = <var:i> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:g1> = <nat:9> * <var:i> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:g0> = <nat:8> /\ <var:q> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:i> /\ <var:q> = <nat:9> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 