\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:2> + <var:D> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Allow $ <var:V> = <var:v> $ prior to interpreting our list of commands it must be that we have $ <var:D> = <nat:4> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:4> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} The method of proof for this list of instructions can be given by Hoare logic . Honing in on the upcoming step seen in the code segment , we have the assignment line defining $ <nat:4> $ to $ <var:D>$ . This transfers the condition $ \{ <var:V> = <var:v> \} $ as the postcondition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \} $ . Looking at the proceeding command seen in our series of instructions , the code \verb | <var:D> := <nat:3> + <var:D> * <var:V> ; | . This line takes the precondition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \} $ as the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> + <nat:3> \} $ . This is deduced with the assignment rule given in standard Hoare logic . Following , the variable binding line \verb | <var:D> := <nat:3> + <var:D> * <var:V> ; | . This transfers $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> + <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:3> \} $ . This is given through the assignment law obtained from Hoare reasoning . Moving on to the next step , the code \verb | <var:D> := <nat:4> + <var:D> * <var:V> ; | . This statement redefines the precondition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ . Taking another step toward the next bit of code seen in the code , we see the variable update code \verb | <var:D> := <nat:3> + <var:D> * <var:V> ; | . This takes the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ into $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:3> \} $ . Moving forward to the next line contained in the set of instructions , the code yielding $ <nat:3> + <var:D> * <var:V> $ into $ <var:D>$ . This advances $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:3> \} $ as the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:3> \} $ . This is sound by the assignment inference rule defined in Hoare logic . Following , we have the binding command assigning $ <nat:4> + <var:D> * <var:V> $ as $ <var:D>$ . This advances $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:3> \} $ to the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ . This is shown by the assignment law in usual Hoare reasoning . Shifting focus toward the next step in the list of commands , we have the line \verb | <var:D> := <nat:4> + <var:D> * <var:V> ; | . This code advances $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:4> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:4> \} $ as the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:7> + <nat:3> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:4> \} $ . Taking another step toward the proceeding piece of code contained in our code , we have the environment update statement assigning $ <nat:2> + <var:D> * <var:V$ into $ <var:D>$ . This code advances the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:7> + <nat:3> \cdot <var:v> ^ <nat:6> + <nat:3> \cdot <var:v> ^ <nat:5> + <nat:4> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:4> \} $ as the condition $ \{ <var:V> = <var:v> \land <var:D> = <nat:4> \cdot <var:v> ^ <nat:8> + <nat:3> \cdot <var:v> ^ <nat:7> + <nat:3> \cdot <var:v> ^ <nat:6> + <nat:4> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:4> \cdot <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:3> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:4> + <var:D> * <var:V> ; <var:D> := <nat:2> + <var:D> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:V> = <var:v> }} <def:poly> {{ <var:D> = <nat:4> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:v> /\ <var:D> = <nat:4> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 