\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:E> ; <var:c> := <var:L1> ; <var:c> := <var:c> + <var:L0> \end{verbatim} Assuming , for all positive numbers $ <var:h> $ , that we have $ <var:E> = <var:h> $ ahead of executing this list of commands , then we see $ <var:c> = <nat:7> \times <var:h> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the series of commands is done with typical Hoare reasoning . Immediately following , the environment update statement \verb | <var:L0> := <nat:5> ; | . This forwards the precondition $ \{ <var:E> = <var:h> \} $ as the postcondition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \} $ . This is shown using the assignment law obtained from usual Hoare techniques . Going to the next step , we have the statement \verb | <var:L1> := <nat:7> ; | . This advances the condition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \} $ to the postcondition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:L1> = <nat:7> \} $ . This is given with the assignment scheme of Hoare reasoning . Moving on to the following command seen in our set of commands , we have the variable assignmet command assigning $ <var:L1> * <var:E> $ to $ <var:L1>$ . This line forwards the precondition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:L1> = <nat:7> \} $ to the condition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:L1> = <nat:7> \times <var:h> \} $ . This is known to be sound by the assignment rule given by typical Hoare techniques . Moving onward , the environment update line giving $ <var:L1> $ into $ <var:c>$ . This takes $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:L1> = <nat:7> \times <var:h> \} $ toward $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:c> = <nat:7> \times <var:h> \} $ . This is sound through the assignment law defined in Hoare reasoning . Advancing on , the variable binding statement \verb | <var:c> := <var:c> + <var:L0> | . This forwards the precondition $ \{ <var:E> = <var:h> \land <var:L0> = <nat:5> \land <var:c> = <nat:7> \times <var:h> \} $ into the postcondition $ \{ <var:E> = <var:h> \land <var:c> = <nat:7> \times <var:h> + <nat:5> \} $ . This is deduced by the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <var:L0> := <nat:5> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:E> ; <var:c> := <var:L1> ; <var:c> := <var:c> + <var:L0> {{ <var:c> = <nat:7> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:L0> = <nat:5> /\ <var:c> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:c> = <nat:7> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 