\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:s> ; <var:D2> := <var:D1> * <var:s> ; <var:D3> := <var:D2> * <var:s> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:1> ; <var:p> := <var:D3> <var:p> := <var:p> + <var:D2> <var:p> := <var:p> + <var:D1> <var:p> := <var:p> + <var:D0> \end{verbatim} Assuming $ <var:s> = <var:v> $ prior to the evaluation of the code , it follows that $ <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> $ after code finishes . \end{theorem} \begin{proof} Utilizing Hoare reasoning returns : \begin{eqnarray} \{ <var:s> = <var:v> \} \\ <var:D1> := <var:s> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \} \end{eqnarray} Advancing running this segment of code returns : \begin{eqnarray} <var:D2> := <var:D1> * <var:s> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:s> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} \\ <var:D1> := <var:D1> * <nat:8> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <nat:8> * <var:v> \land <var:D2> = <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} \\ <var:D2> := <var:D2> * <nat:3> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <nat:8> * <var:v> \land <var:D2> = <nat:3> * <var:v> ^ <nat:2> \land <var:D3> = <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} \\ <var:D3> := <var:D3> * <nat:1> ; \\ \{ <var:s> = <var:v> \land <var:D1> = <nat:8> * <var:v> \land <var:D2> = <nat:3> * <var:v> ^ <nat:2> \land <var:D3> = <nat:1> * <var:v> ^ <nat:3> \land <var:D0> = <nat:1> \} \\ <var:p> := <var:D3> \\ \{ <var:s> = <var:v> \land <var:D1> = <nat:8> * <var:v> \land <var:D2> = <nat:3> * <var:v> ^ <nat:2> \land <var:D0> = <nat:1> \land <var:p> = <nat:1> * <var:v> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:D2> \\ \{ <var:s> = <var:v> \land <var:D1> = <nat:8> * <var:v> \land <var:D0> = <nat:1> \land <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:D1> \\ \{ <var:s> = <var:v> \land <var:D0> = <nat:1> \land <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> \} \\ <var:p> := <var:p> + <var:D0> \\ \{ <var:s> = <var:v> \land <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> \} \end{eqnarray} Hence , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:s> = <var:v> }} <var:D1> := <var:s> ; <var:D2> := <var:D1> * <var:s> ; <var:D3> := <var:D2> * <var:s> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:3> ; <var:D3> := <var:D3> * <nat:1> ; <var:p> := <var:D3> <var:p> := <var:p> + <var:D2> <var:p> := <var:p> + <var:D1> <var:p> := <var:p> + <var:D0> {{ <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:8> * <var:v> /\ <var:D2> = <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:8> * <var:v> /\ <var:D2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:D3> = <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:8> * <var:v> /\ <var:D2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:v> ^ <nat:3> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:8> * <var:v> /\ <var:D2> = <nat:3> * <var:v> ^ <nat:2> /\ <var:D0> = <nat:1> /\ <var:p> = <nat:1> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D1> = <nat:8> * <var:v> /\ <var:D0> = <nat:1> /\ <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:D0> = <nat:1> /\ <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:v> /\ <var:p> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:8> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 