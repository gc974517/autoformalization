\begin{document} \begin{theorem} We define a code segment : \begin{verbatim} <var:p1> := <var:h> ; <var:p2> := <var:p1> * <var:h> ; <var:p3> := <var:p2> * <var:h> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:8> ; <var:x> := <var:p3> <var:x> := <var:x> + <var:p2> <var:x> := <var:x> + <var:p1> <var:x> := <var:x> + <var:p0> \end{verbatim} Allow that $ <var:h> = <var:W> $ ( given some whole numbers $ <var:W> $ ) prior to running the segment of code , it must be that we have $ <var:x> = <nat:8> \times <var:W> ^ <nat:3> + <nat:7> \times <var:W> ^ <nat:2> + <nat:8> \times <var:W> + <nat:2> $ after series of instructions exits . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives : \begin{eqnarray} \{ <var:h> = <var:W> \} \\ <var:p1> := <var:h> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <var:W> \} \\ <var:p2> := <var:p1> * <var:h> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <var:W> \land <var:p2> = <var:W> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:h> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <var:W> \land <var:p2> = <var:W> ^ <nat:2> \land <var:p3> = <var:W> ^ <nat:3> \} \\ <var:p0> := <nat:2> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <var:W> \land <var:p2> = <var:W> ^ <nat:2> \land <var:p3> = <var:W> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p1> := <var:p1> * <nat:8> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <nat:8> * <var:W> \land <var:p2> = <var:W> ^ <nat:2> \land <var:p3> = <var:W> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p2> := <var:p2> * <nat:7> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <nat:8> * <var:W> \land <var:p2> = <nat:7> * <var:W> ^ <nat:2> \land <var:p3> = <var:W> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:p3> := <var:p3> * <nat:8> ; \\ \{ <var:h> = <var:W> \land <var:p1> = <nat:8> * <var:W> \land <var:p2> = <nat:7> * <var:W> ^ <nat:2> \land <var:p3> = <nat:8> * <var:W> ^ <nat:3> \land <var:p0> = <nat:2> \} \\ <var:x> := <var:p3> \\ \{ <var:h> = <var:W> \land <var:p1> = <nat:8> * <var:W> \land <var:p2> = <nat:7> * <var:W> ^ <nat:2> \land <var:p0> = <nat:2> \land <var:x> = <nat:8> * <var:W> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:p2> \\ \{ <var:h> = <var:W> \land <var:p1> = <nat:8> * <var:W> \land <var:p0> = <nat:2> \land <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:p1> \\ \{ <var:h> = <var:W> \land <var:p0> = <nat:2> \land <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:8> * <var:W> \} \\ <var:x> := <var:x> + <var:p0> \\ \{ <var:h> = <var:W> \land <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:2> \} \end{eqnarray} Continuing evaluating this list of commands yields : \begin{eqnarray} \end{eqnarray} Considering the above , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:h> = <var:W> }} <var:p1> := <var:h> ; <var:p2> := <var:p1> * <var:h> ; <var:p3> := <var:p2> * <var:h> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:8> ; <var:p2> := <var:p2> * <nat:7> ; <var:p3> := <var:p3> * <nat:8> ; <var:x> := <var:p3> <var:x> := <var:x> + <var:p2> <var:x> := <var:x> + <var:p1> <var:x> := <var:x> + <var:p0> {{ <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <var:W> /\ <var:p2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <var:W> /\ <var:p2> = <var:W> ^ <nat:2> /\ <var:p3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <var:W> /\ <var:p2> = <var:W> ^ <nat:2> /\ <var:p3> = <var:W> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <nat:8> * <var:W> /\ <var:p2> = <var:W> ^ <nat:2> /\ <var:p3> = <var:W> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <nat:8> * <var:W> /\ <var:p2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:p3> = <var:W> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <nat:8> * <var:W> /\ <var:p2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:W> ^ <nat:3> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <nat:8> * <var:W> /\ <var:p2> = <nat:7> * <var:W> ^ <nat:2> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:8> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p1> = <nat:8> * <var:W> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:p0> = <nat:2> /\ <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:x> = <nat:8> * <var:W> ^ <nat:3> + <nat:7> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 