\begin{document} \begin{theorem} Let the following set of commands as \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:D> ; <var:A> := <var:P1> ; <var:A> := <var:A> + <var:P0> \end{verbatim} Allow that $ <var:D> = <var:v> $ --- assuming some $ <var:v> \in \mathbb{N} $ --- before the evaluation of the set of instructions , it must be that we have $ <var:A> = <nat:8> * <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:D> = <var:v> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:D> = <var:v> \land <var:P0> = <nat:4> \} \\ <var:P1> := <nat:8> ; \\ \{ <var:D> = <var:v> \land <var:P0> = <nat:4> \land <var:P1> = <nat:8> \} \\ <var:P1> := <var:P1> * <var:D> ; \\ \{ <var:D> = <var:v> \land <var:P0> = <nat:4> \land <var:P1> = <nat:8> * <var:v> \} \\ <var:A> := <var:P1> ; \\ \{ <var:D> = <var:v> \land <var:P0> = <nat:4> \land <var:A> = <nat:8> * <var:v> \} \\ <var:A> := <var:A> + <var:P0> \\ \{ <var:D> = <var:v> \land <var:A> = <nat:8> * <var:v> + <nat:4> \} \end{eqnarray} Therefore , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:D> = <var:v> }} <var:P0> := <nat:4> ; <var:P1> := <nat:8> ; <var:P1> := <var:P1> * <var:D> ; <var:A> := <var:P1> ; <var:A> := <var:A> + <var:P0> {{ <var:A> = <nat:8> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:P0> = <nat:4> /\ <var:A> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:v> /\ <var:A> = <nat:8> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 