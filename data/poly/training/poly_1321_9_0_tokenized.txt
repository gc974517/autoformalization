\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:2> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:X> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:X> ; <var:R2> := <var:R2> * <var:X> ; <var:P> := <var:R2> ; <var:P> := <var:P> + <var:R1> ; <var:P> := <var:P> + <var:R0> \end{verbatim} Assuming it to be that $ <var:X> = <var:a> $ prior to interpreting the program it holds that we have $ <var:P> = <nat:7> \times <var:a> ^ <nat:2> + <nat:4> \times <var:a> + <nat:2> $ once code segment executes . \end{theorem} \begin{proof} Arguing the correctness of this code can be given using usual Hoare techniques . Moving forward to the next step , we see \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:R0> := <nat:2> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \} \, <var:R1> := <nat:4> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} \, <var:R1> := <var:R1> * <var:X> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \} \, <var:R2> := <nat:7> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \land <var:R2> = <nat:7> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \land <var:R2> = <nat:7> \} \, <var:R2> := <var:R2> * <var:X> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \land <var:R2> = <nat:7> \cdot <var:a> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \land <var:R2> = <nat:7> \cdot <var:a> \} \, <var:R2> := <var:R2> * <var:X> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \land <var:R2> = <nat:7> \cdot <var:a> ^ <nat:2> \} \end{eqnarray} This is deduced using the variable update law given in Hoare logic . Moving forward , we have \begin{eqnarray} \{ <var:X> = <var:a> \} \, <var:R0> := <nat:2> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \} \, <var:R1> := <nat:4> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} \\ \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \} \, <var:R1> := <var:R1> * <var:X> \, \{ <var:X> = <var:a> \land <var:R0> = <nat:2> \land <var:R1> = <nat:4> \cdot <var:a> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:X> = <var:a> }} <var:R0> := <nat:2> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:X> ; <var:R2> := <nat:7> ; <var:R2> := <var:R2> * <var:X> ; <var:R2> := <var:R2> * <var:X> ; <var:P> := <var:R2> ; <var:P> := <var:P> + <var:R1> ; <var:P> := <var:P> + <var:R0> {{ <var:P> = <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:a> /\ <var:R2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:a> /\ <var:R2> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:a> /\ <var:R2> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:4> * <var:a> /\ <var:P> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:R0> = <nat:2> /\ <var:P> = <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:a> /\ <var:P> = <nat:7> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 