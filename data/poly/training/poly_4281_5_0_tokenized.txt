\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:l> ; <var:M> := <var:g1> ; <var:M> := <var:M> + <var:g0> \end{verbatim} Allow that $ <var:l> = <var:W> $ ahead of interpreting the segment of code it follows that we have $ <var:M> = <nat:6> \times <var:W> + <nat:3> $ when code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:W> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:l> = <var:W> \land <var:g0> = <nat:3> \} \\ <var:g1> := <nat:6> ; \\ \{ <var:l> = <var:W> \land <var:g0> = <nat:3> \land <var:g1> = <nat:6> \} \\ <var:g1> := <var:g1> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:g0> = <nat:3> \land <var:g1> = <nat:6> \times <var:W> \} \\ <var:M> := <var:g1> ; \\ \{ <var:l> = <var:W> \land <var:g0> = <nat:3> \land <var:M> = <nat:6> \times <var:W> \} \\ <var:M> := <var:M> + <var:g0> \\ \{ <var:l> = <var:W> \land <var:M> = <nat:6> \times <var:W> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <var:g0> := <nat:3> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:l> ; <var:M> := <var:g1> ; <var:M> := <var:M> + <var:g0> {{ <var:M> = <nat:6> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:g0> = <nat:3> /\ <var:M> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:M> = <nat:6> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 