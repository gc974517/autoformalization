\begin{document} \begin{theorem} Define a series of commands such that \begin{verbatim} <var:F0> := <nat:8> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:t> ; <var:H> := <var:F1> ; <var:H> := <var:H> + <var:F0> \end{verbatim} Assume that $ <var:t> = <var:n> $ ahead of the execution of the segment of code it must be that $ <var:H> = <nat:6> \times <var:n> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be seen with standard Hoare reasoning . Immediately following , we see \begin{verbatim} { <var:t> = <var:n> } <var:F0> := <nat:8> { <var:t> = <var:n> \land <var:F0> = <nat:8> } { <var:t> = <var:n> \land <var:F0> = <nat:8> } <var:F1> := <nat:6> { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:F1> = <nat:6> } { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:F1> = <nat:6> } <var:F1> := <var:F1> * <var:t> { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:F1> = <nat:6> \cdot <var:n> } { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:F1> = <nat:6> \cdot <var:n> } <var:H> := <var:F1> { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:H> = <nat:6> \cdot <var:n> } { <var:t> = <var:n> \land <var:F0> = <nat:8> \land <var:H> = <nat:6> \cdot <var:n> } <var:H> := <var:H> + <var:F0{ <var:t> = <var:n> \land <var:H> = <nat:6> \cdot <var:n> + <nat:8> } \end{verbatim} This is ensured using the assignment rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:t> = <var:n> }} <var:F0> := <nat:8> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:t> ; <var:H> := <var:F1> ; <var:H> := <var:H> + <var:F0> {{ <var:H> = <nat:6> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:F0> = <nat:8> /\ <var:F1> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:F0> = <nat:8> /\ <var:H> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:n> /\ <var:H> = <nat:6> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 