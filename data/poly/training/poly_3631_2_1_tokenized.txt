\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:c0> := <nat:8> ; <var:a> := <var:c0> \end{verbatim} Allowing for positive coefficients $ <var:p> $ it to be that $ <var:o> = <var:p> $ before running our program , then $ <var:a> = <nat:8> $ when set of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:p> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:o> = <var:p> \land <var:c0> = <nat:8> \} \\ <var:a> := <var:c0> \\ \{ <var:o> = <var:p> \land <var:a> = <nat:8> \} \end{eqnarray} Using Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <var:c0> := <nat:8> ; <var:a> := <var:c0> {{ <var:a> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:a> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 