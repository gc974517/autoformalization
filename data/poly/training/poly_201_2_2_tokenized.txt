\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} : \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:1> + <var:e> * <var:V> \end{verbatim} Allow , with some $ <var:A> \in \mathbb{N} $ , it to be that $ <var:V> = <var:A> $ before the evaluation of this code segment it must be that we have $ <var:e> = <nat:1> \cdot <var:A> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this code is evident using typical Hoare reasoning . Going forward , we see \verb | { <var:V> = <var:A> } <var:e> := <nat:1> { <var:V> = <var:A> \land <var:e> = <nat:1> } | . Observing the upcoming piece of code contained in our series of instructions , we have \verb | { <var:V> = <var:A> } <var:e> := <nat:1> { <var:V> = <var:A> \land <var:e> = <nat:1> } | . This is shown to be logically sound by the assignment scheme from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:V> = <var:A> }} <var:e> := <nat:1> ; <var:e> := <nat:1> + <var:e> * <var:V> {{ <var:e> = <nat:1> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:A> /\ <var:e> = <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 