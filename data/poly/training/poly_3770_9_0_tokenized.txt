\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:a> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:a> ; <var:g2> := <var:g2> * <var:a> ; <var:y> := <var:g2> ; <var:y> := <var:y> + <var:g1> ; <var:y> := <var:y> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:a> = <var:Q> $ ahead of the evaluation of the code segment then we see $ <var:y> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be accomplished by the following decorated code segment . \begin{eqnarray} \{ <var:a> = <var:Q> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \} \\ <var:g1> := <nat:8> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> \} \\ <var:g1> := <var:g1> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> * <var:Q> \} \\ <var:g2> := <nat:3> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> * <var:Q> \land <var:g2> = <nat:3> \} \\ <var:g2> := <var:g2> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> * <var:Q> \land <var:g2> = <nat:3> * <var:Q> \} \\ <var:g2> := <var:g2> * <var:a> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> * <var:Q> \land <var:g2> = <nat:3> * <var:Q> ^ <nat:2> \} \\ <var:y> := <var:g2> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:g1> = <nat:8> * <var:Q> \land <var:y> = <nat:3> * <var:Q> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:g1> ; \\ \{ <var:a> = <var:Q> \land <var:g0> = <nat:7> \land <var:y> = <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} \\ <var:y> := <var:y> + <var:g0> \\ \{ <var:a> = <var:Q> \land <var:y> = <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> \} \end{eqnarray} Applying usual Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <def:poly> := <var:g0> := <nat:7> ; <var:g1> := <nat:8> ; <var:g1> := <var:g1> * <var:a> ; <var:g2> := <nat:3> ; <var:g2> := <var:g2> * <var:a> ; <var:g2> := <var:g2> * <var:a> ; <var:y> := <var:g2> ; <var:y> := <var:y> + <var:g1> ; <var:y> := <var:y> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <def:poly> {{ <var:y> = <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:g2> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:8> * <var:Q> /\ <var:y> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:g0> = <nat:7> /\ <var:y> = <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:y> = <nat:3> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 