\begin{document} \begin{theorem} Take a code in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:2> + <var:t> * <var:I> \end{verbatim} Given that $ <var:I> = <var:q> $ prior to evaluating our code segment , it holds that $ <var:t> = <nat:2> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:q> \} \\ <var:t> := <nat:2> ; \\ \{ <var:I> = <var:q> \land <var:t> = <nat:2> \} \\ <var:t> := <nat:2> + <var:t> * <var:I> \\ \{ <var:I> = <var:q> \land <var:t> = <nat:2> \times <var:q> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:I> = <var:q> }} <var:t> := <nat:2> ; <var:t> := <nat:2> + <var:t> * <var:I> {{ <var:t> = <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:t> = <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 