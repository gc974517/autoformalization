\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:G> ; <var:m> := <nat:2> + <var:m> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:G> = <var:j> $ prior to the evaluation of our series of commands , it holds that we have $ <var:m> = <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of instructions can be given using typical Hoare reasoning . Moving forward , the environment update line \verb | <var:m> := <nat:3> ; | . This statement moves the precondition $ \{ <var:G> = <var:j> \} $ toward the condition $ \{ <var:G> = <var:j> \land <var:m> = <nat:3> \} $ . Jumping to the proceeding statement contained in the list of instructions , we see the variable assignmet line \verb | <var:m> := <nat:1> + <var:m> * <var:G> ; | . This moves the condition $ \{ <var:G> = <var:j> \land <var:m> = <nat:3> \} $ into $ \{ <var:G> = <var:j> \land <var:m> = <nat:3> \cdot <var:j> + <nat:1> \} $ . This is guaranteed by the assignment inference rule given by typical Hoare techniques . Advancing to the next step , we have the binding statement \verb | <var:m> := <nat:2> + <var:m> * <var:G> | . This line moves the precondition $ \{ <var:G> = <var:j> \land <var:m> = <nat:3> \cdot <var:j> + <nat:1> \} $ toward the condition $ \{ <var:G> = <var:j> \land <var:m> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:2> \} $ . This is sound by the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:G> ; <var:m> := <nat:2> + <var:m> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:G> = <var:j> }} <def:poly> {{ <var:m> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:m> = <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 