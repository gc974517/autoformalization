\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:J1> := <var:a> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:8> ; <var:R> := <var:J1> <var:R> := <var:R> + <var:J0> \end{verbatim} Allowing $ <var:a> = <var:d> $ given integers $ <var:d> $ ahead of executing the series of commands it follows that $ <var:R> = <nat:8> \times <var:d> + <nat:6> $ after series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:d> \} \\ <var:J1> := <var:a> ; \\ \{ <var:a> = <var:d> \land <var:J1> = <var:d> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:a> = <var:d> \land <var:J1> = <var:d> \land <var:J0> = <nat:6> \} \\ <var:J1> := <var:J1> * <nat:8> ; \\ \{ <var:a> = <var:d> \land <var:J1> = <nat:8> * <var:d> \land <var:J0> = <nat:6> \} \\ <var:R> := <var:J1> \\ \{ <var:a> = <var:d> \land <var:J0> = <nat:6> \land <var:R> = <nat:8> * <var:d> \} \\ <var:R> := <var:R> + <var:J0> \\ \{ <var:a> = <var:d> \land <var:R> = <nat:8> * <var:d> + <nat:6> \} \end{eqnarray} The application of standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <var:J1> := <var:a> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:8> ; <var:R> := <var:J1> <var:R> := <var:R> + <var:J0> {{ <var:R> = <nat:8> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:J1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:J1> = <var:d> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:J1> = <nat:8> * <var:d> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:J0> = <nat:6> /\ <var:R> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:R> = <nat:8> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 