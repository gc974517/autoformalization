\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:6> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:p> ; <var:k> := <var:m1> ; <var:k> := <var:k> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Given $ <var:p> = <var:g> $ ( given every $ <var:g> $ ) ahead of executing the segment of code it holds that we have $ <var:k> = <nat:4> \cdot <var:g> + <nat:6> $ once series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be seen with usual Hoare logic . Keeping momentum , \begin{eqnarray} \{ <var:p> = <var:g> \} \, <var:m0> := <nat:6> \, \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \} \\ \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \} \, <var:m1> := <nat:4> \, \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \land <var:m1> = <nat:4> \} \\ \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \land <var:m1> = <nat:4> \} \, <var:m1> := <var:m1> * <var:p> \, \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \land <var:m1> = <nat:4> \cdot <var:g> \} \\ \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \land <var:m1> = <nat:4> \cdot <var:g> \} \, <var:k> := <var:m1> \, \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \land <var:k> = <nat:4> \cdot <var:g> \} \end{eqnarray} This is deduced using the binding scheme found in usual Hoare reasoning . Now , we have \begin{eqnarray} \{ <var:p> = <var:g> \} \, <var:m0> := <nat:6> \, \{ <var:p> = <var:g> \land <var:m0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:6> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:p> ; <var:k> := <var:m1> ; <var:k> := <var:k> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:p> = <var:g> }} <def:poly> {{ <var:k> = <nat:4> * <var:g> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:m0> = <nat:6> /\ <var:k> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:k> = <nat:4> * <var:g> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 