\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:W0> := <nat:7> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:p> := <var:W2> ; <var:p> := <var:p> + <var:W1> ; <var:p> := <var:p> + <var:W0> \end{verbatim} Allow it to be that $ <var:D> = <var:y> $ before executing the segment of code it holds that $ <var:p> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the list of commands is demonstrated through Hoare techniques . Moving forward to the following commands found in the list of instructions , we see \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:W0> := <nat:7> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \\ \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \, <var:W1> := <nat:9> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \} \\ \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \} \, <var:W1> := <var:W1> * <var:D> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:y> \} \\ \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:y> \} \, <var:W2> := <nat:5> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:y> \land <var:W2> = <nat:5> \} \\ \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:y> \land <var:W2> = <nat:5> \} \, <var:W2> := <var:W2> * <var:D> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:y> \land <var:W2> = <nat:5> \times <var:y> \} \end{eqnarray} This is guaranteed by the binding scheme in standard Hoare logic . Now , we see \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:W0> := <nat:7> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \end{eqnarray} Shifting focus toward the next line of code in our series of instructions , we have \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:W0> := <nat:7> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \end{eqnarray} Jumping to the upcoming bit of code found in the list of instructions , we see \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:W0> := <nat:7> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \end{eqnarray} This is sound using the binding inference rule defined by Hoare reasoning . Stepping through , \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:W0> := <nat:7> \, \{ <var:D> = <var:y> \land <var:W0> = <nat:7> \} \end{eqnarray} This is ensured with the variable binding law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <var:W0> := <nat:7> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:5> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:p> := <var:W2> ; <var:p> := <var:p> + <var:W1> ; <var:p> := <var:p> + <var:W0> {{ <var:p> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:y> /\ <var:W2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:y> /\ <var:W2> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:y> /\ <var:W2> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:y> /\ <var:p> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:W0> = <nat:7> /\ <var:p> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:p> = <nat:5> * <var:y> ^ <nat:2> + <nat:9> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 