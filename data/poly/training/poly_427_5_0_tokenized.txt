\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:5> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:R> ; <var:q> := <var:w1> ; <var:q> := <var:q> + <var:w0> \end{verbatim} Allow it to be that $ <var:R> = <var:h> $ ( given some $ <var:h> \in \mathbb{N} $ ) prior to executing our series of instructions , it must be that we have $ <var:q> = <nat:9> * <var:h> + <nat:5> $ when set of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be given using standard Hoare techniques . Paying attention to the following step seen in our program , we see the assignment command defining $ <nat:5> $ into $ <var:w0>$ . This moves $ \{ <var:R> = <var:h> \} $ to $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \} $ . This is shown to be logically sound with the assignment scheme defined in standard Hoare logic . Stepping forward , the assignment statement \verb | <var:w1> := <nat:9> ; | . This line advances $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \} $ as $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:w1> = <nat:9> \} $ . Advancing , the binding line assigning $ <var:w1> * <var:R> $ as $ <var:w1>$ . This forwards the precondition $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:w1> = <nat:9> \} $ into the postcondition $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:w1> = <nat:9> \cdot <var:h> \} $ . Moving onward , the binding statement \verb | <var:q> := <var:w1> ; | . This line redefines $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:w1> = <nat:9> \cdot <var:h> \} $ to the postcondition $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:q> = <nat:9> \cdot <var:h> \} $ . Moving forward to the next step , we have the command \verb | <var:q> := <var:q> + <var:w0> | . This statement forwards $ \{ <var:R> = <var:h> \land <var:w0> = <nat:5> \land <var:q> = <nat:9> \cdot <var:h> \} $ as $ \{ <var:R> = <var:h> \land <var:q> = <nat:9> \cdot <var:h> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:R> = <var:h> }} <var:w0> := <nat:5> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:R> ; <var:q> := <var:w1> ; <var:q> := <var:q> + <var:w0> {{ <var:q> = <nat:9> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:w0> = <nat:5> /\ <var:w1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:w0> = <nat:5> /\ <var:q> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:h> /\ <var:q> = <nat:9> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 