\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <var:E> * <var:g> ; <var:E> := <nat:1> + <var:E> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:g> = <var:d> $ letting natural coefficients $ <var:d> $ prior to running the code , it must be that we see $ <var:E> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> $ after series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for our code segment can be done through usual Hoare techniques . Moving on to the upcoming line of code seen in our series of commands , we have the assignment line \verb | <var:E> := <nat:3> ; | . This line transfers $ \{ <var:g> = <var:d> \} $ into $ \{ <var:g> = <var:d> \land <var:E> = <nat:3> \} $ . Following , the command yielding $ <var:E> * <var:g> $ toward $ <var:E>$ . This line redefines the condition $ \{ <var:g> = <var:d> \land <var:E> = <nat:3> \} $ into the condition $ \{ <var:g> = <var:d> \land <var:E> = <nat:3> * <var:d> + \} $ . Going forward , we have the binding line giving $ <nat:1> + <var:E> * <var:g$ into $ <var:E>$ . This redefines $ \{ <var:g> = <var:d> \land <var:E> = <nat:3> * <var:d> + \} $ to the postcondition $ \{ <var:g> = <var:d> \land <var:E> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> \} $ . This is rigorously given through the assignment law obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <var:E> * <var:g> ; <var:E> := <nat:1> + <var:E> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:g> = <var:d> }} <def:poly> {{ <var:E> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:E> = <nat:3> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:E> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 