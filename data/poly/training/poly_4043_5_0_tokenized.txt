\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:7> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:O> ; <var:a> := <var:W1> ; <var:a> := <var:a> + <var:W0> \end{verbatim} Allowing that $ <var:O> = <var:b> $ prior to interpreting this code segment it holds that $ <var:a> = <nat:9> * <var:b> + <nat:7> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:b> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:O> = <var:b> \land <var:W0> = <nat:7> \} \\ <var:W1> := <nat:9> ; \\ \{ <var:O> = <var:b> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \} \\ <var:W1> := <var:W1> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:W0> = <nat:7> \land <var:W1> = <nat:9> \times <var:b> \} \end{eqnarray} Allowing the evaluation of the set of commands returns : \begin{eqnarray} <var:a> := <var:W1> ; \\ \{ <var:O> = <var:b> \land <var:W0> = <nat:7> \land <var:a> = <nat:9> \times <var:b> \} \\ <var:a> := <var:a> + <var:W0> \\ \{ <var:O> = <var:b> \land <var:a> = <nat:9> \times <var:b> + <nat:7> \} \end{eqnarray} Given the preceding argument , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <var:W0> := <nat:7> ; <var:W1> := <nat:9> ; <var:W1> := <var:W1> * <var:O> ; <var:a> := <var:W1> ; <var:a> := <var:a> + <var:W0> {{ <var:a> = <nat:9> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:W0> = <nat:7> /\ <var:a> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a> = <nat:9> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 