\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:n0> := <nat:7> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:T> ; <var:h> := <var:n1> ; <var:h> := <var:h> + <var:n0> \end{verbatim} Assuming $ <var:T> = <var:p> $ ahead of evaluating our code segment it holds that $ <var:h> = <nat:8> * <var:p> + <nat:7> $ after series of commands has exited . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:T> = <var:p> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:T> = <var:p> \land <var:n0> = <nat:7> \} \\ <var:n1> := <nat:8> ; \\ \{ <var:T> = <var:p> \land <var:n0> = <nat:7> \land <var:n1> = <nat:8> \} \\ <var:n1> := <var:n1> * <var:T> ; \\ \{ <var:T> = <var:p> \land <var:n0> = <nat:7> \land <var:n1> = <nat:8> \cdot <var:p> \} \\ <var:h> := <var:n1> ; \\ \{ <var:T> = <var:p> \land <var:n0> = <nat:7> \land <var:h> = <nat:8> \cdot <var:p> \} \\ <var:h> := <var:h> + <var:n0> \\ \{ <var:T> = <var:p> \land <var:h> = <nat:8> \cdot <var:p> + <nat:7> \} \end{eqnarray} Given the preceding argument , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:T> = <var:p> }} <var:n0> := <nat:7> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:T> ; <var:h> := <var:n1> ; <var:h> := <var:h> + <var:n0> {{ <var:h> = <nat:8> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:n0> = <nat:7> /\ <var:n1> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:n0> = <nat:7> /\ <var:h> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:p> /\ <var:h> = <nat:8> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 