\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:d0> := <nat:8> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:h> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:h> ; <var:d2> := <var:d2> * <var:h> ; <var:q> := <var:d2> ; <var:q> := <var:q> + <var:d1> ; <var:q> := <var:q> + <var:d0> \end{verbatim} Assuming ( taking positive integers $ <var:u> $ ) it to hold that $ <var:h> = <var:u> $ ahead of the execution of our code it follows that $ <var:q> = <nat:5> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is accomplished using Hoare techniques . Shifting focus toward the subsequent statement contained in the list of instructions , we have the binding statement \verb | <var:d0> := <nat:8> ; | . This advances $ \{ <var:h> = <var:u> \} $ toward $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \} $ . This is known to be sound by the assignment law of typical Hoare reasoning . Stepping forward , we have the assignment code yielding $ <nat:5> $ into $ <var:d1>$ . This statement forwards the precondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \} $ toward the postcondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \} $ . This is shown to be logically sound with the assignment scheme obtained from usual Hoare reasoning . After , we have the variable update code \verb | <var:d1> := <var:d1> * <var:h> ; | . This code moves $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \} $ into the postcondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \} $ . Shifting focus toward the upcoming line contained in our list of commands , we have the line yielding $ <nat:5> $ as $ <var:d2>$ . This advances $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \} $ to the condition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \} $ . Taking another step toward the next step in our program , the variable binding code giving $ <var:d2> * <var:h> $ to $ <var:d2>$ . This command moves the condition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \} $ to the postcondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \times <var:u> \} $ . This is guaranteed with the assignment scheme given by Hoare reasoning . Observing the subsequent line contained in the code segment , we see the assignment line yielding $ <var:d2> * <var:h> $ as $ <var:d2>$ . This line redefines $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \times <var:u> \} $ to the condition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \times <var:u> ^ <nat:2> \} $ . After , the command \verb | <var:q> := <var:d2> ; | . This code forwards the condition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:d2> = <nat:5> \times <var:u> ^ <nat:2> \} $ toward $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:q> = <nat:5> \times <var:u> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law found in standard Hoare reasoning . Going to the next step , the environment update line assigning $ <var:q> + <var:d1> $ toward $ <var:q>$ . This forwards $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:d1> = <nat:5> \times <var:u> \land <var:q> = <nat:5> \times <var:u> ^ <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:q> = <nat:5> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> \} $ . This is rigorously given using the assignment law in typical Hoare logic . Moving forward to the next step , we see the environment update statement assigning $ <var:q> + <var:d0$ as $ <var:q>$ . This transfers the precondition $ \{ <var:h> = <var:u> \land <var:d0> = <nat:8> \land <var:q> = <nat:5> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> \} $ as the condition $ \{ <var:h> = <var:u> \land <var:q> = <nat:5> \times <var:u> ^ <nat:2> + <nat:5> \times <var:u> + <nat:8> \} $ . This is guaranteed with the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:h> = <var:u> }} <var:d0> := <nat:8> ; <var:d1> := <nat:5> ; <var:d1> := <var:d1> * <var:h> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:h> ; <var:d2> := <var:d2> * <var:h> ; <var:q> := <var:d2> ; <var:q> := <var:q> + <var:d1> ; <var:q> := <var:q> + <var:d0> {{ <var:q> = <nat:5> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> * <var:u> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> * <var:u> /\ <var:d2> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> * <var:u> /\ <var:d2> = <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:5> * <var:u> /\ <var:q> = <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:d0> = <nat:8> /\ <var:q> = <nat:5> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:u> /\ <var:q> = <nat:5> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 