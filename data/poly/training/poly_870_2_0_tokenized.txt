\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:y0> := <nat:1> ; <var:W> := <var:y0> \end{verbatim} Assume it to be that $ <var:J> = <var:K> $ for all $ <var:K> \in \mathbb{Z}^+ $ prior to the execution of our list of instructions it must be that $ <var:W> = <nat:1> $ after series of instructions has terminated . \end{theorem} \begin{proof} The course of logic for the program can be shown using usual Hoare reasoning . Going forward , we have the variable assignmet command \verb | <var:y0> := <nat:1> ; | . This moves the precondition $ \{ <var:J> = <var:K> \} $ into the condition $ \{ <var:J> = <var:K> \land <var:y0> = <nat:1> \} $ . Jumping to the subsequent line contained in our set of commands , we see the line giving $ <var:y0$ toward $ <var:W>$ . This code takes the precondition $ \{ <var:J> = <var:K> \land <var:y0> = <nat:1> \} $ as the condition $ \{ <var:J> = <var:K> \land <var:W> = <nat:1> \} $ . This is known to be sound using the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:J> = <var:K> }} <var:y0> := <nat:1> ; <var:W> := <var:y0> {{ <var:W> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:K> /\ <var:W> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 