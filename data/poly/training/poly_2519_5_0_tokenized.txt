\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:C> ; <var:m> := <var:c1> ; <var:m> := <var:m> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:C> = <var:b> $ ahead of the evaluation of the set of instructions it follows that we have $ <var:m> = <nat:2> * <var:b> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is accomplished using typical Hoare reasoning . Further , the variable update statement \verb | <var:c0> := <nat:3> ; | . This advances $ \{ <var:C> = <var:b> \} $ to the postcondition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \} $ . This is deduced with the assignment inference rule defined in typical Hoare logic . Advancing , the variable assignmet line \verb | <var:c1> := <nat:2> ; | . This forwards the condition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \} $ as the condition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ . This is sound with the assignment scheme given by typical Hoare techniques . Following , we see the environment update code \verb | <var:c1> := <var:c1> * <var:C> ; | . This moves $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> * <var:b> \} $ . Next , we see the variable binding line yielding $ <var:c1> $ as $ <var:m>$ . This line moves the condition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:c1> = <nat:2> * <var:b> \} $ into $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:m> = <nat:2> * <var:b> \} $ . Moving forward to the subsequent line of code in the series of instructions , the variable assignmet statement \verb | <var:m> := <var:m> + <var:c0> | . This moves the condition $ \{ <var:C> = <var:b> \land <var:c0> = <nat:3> \land <var:m> = <nat:2> * <var:b> \} $ into the condition $ \{ <var:C> = <var:b> \land <var:m> = <nat:2> * <var:b> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:C> ; <var:m> := <var:c1> ; <var:m> := <var:m> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:C> = <var:b> }} <def:poly> {{ <var:m> = <nat:2> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:c0> = <nat:3> /\ <var:m> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:b> /\ <var:m> = <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 