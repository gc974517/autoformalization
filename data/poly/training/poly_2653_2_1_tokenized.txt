\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:9> ; <var:C> := <var:f0> \end{verbatim} Allow that $ <var:Y> = <var:j> $ ahead of running this series of commands , then we have $ <var:C> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:j> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:Y> = <var:j> \land <var:f0> = <nat:9> \} \\ <var:C> := <var:f0> \\ \{ <var:Y> = <var:j> \land <var:C> = <nat:9> \} \end{eqnarray} Using Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Y> = <var:j> }} <var:f0> := <nat:9> ; <var:C> := <var:f0> {{ <var:C> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:j> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:j> /\ <var:C> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 