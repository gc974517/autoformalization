\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:Q> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:6> ; <var:z> := <var:a1> <var:z> := <var:z> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Q> = <var:K> $ ( for some integers $ <var:K> $ ) ahead of the evaluation of this set of instructions it must be that we see $ <var:z> = <nat:6> \cdot <var:K> + <nat:7> $ after program is done . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:Q> = <var:K> \} \\ <var:a1> := <var:Q> ; \\ \{ <var:Q> = <var:K> \land <var:a1> = <var:K> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:Q> = <var:K> \land <var:a1> = <var:K> \land <var:a0> = <nat:7> \} \\ <var:a1> := <var:a1> * <nat:6> ; \\ \{ <var:Q> = <var:K> \land <var:a1> = <nat:6> * <var:K> \land <var:a0> = <nat:7> \} \\ <var:z> := <var:a1> \\ \{ <var:Q> = <var:K> \land <var:a0> = <nat:7> \land <var:z> = <nat:6> * <var:K> \} \\ <var:z> := <var:z> + <var:a0> \\ \{ <var:Q> = <var:K> \land <var:z> = <nat:6> * <var:K> + <nat:7> \} \end{eqnarray} Considering the above , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:Q> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:6> ; <var:z> := <var:a1> <var:z> := <var:z> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Q> = <var:K> }} <def:poly> {{ <var:z> = <nat:6> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:a1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:a1> = <var:K> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:a1> = <nat:6> * <var:K> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:a0> = <nat:7> /\ <var:z> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:K> /\ <var:z> = <nat:6> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 