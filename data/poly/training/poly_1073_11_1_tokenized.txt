\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:J1> := <var:R> ; <var:J2> := <var:J1> * <var:R> ; <var:J3> := <var:J2> * <var:R> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:J2> := <var:J2> * <nat:7> ; <var:J3> := <var:J3> * <nat:2> ; <var:q> := <var:J3> <var:q> := <var:q> + <var:J2> <var:q> := <var:q> + <var:J1> <var:q> := <var:q> + <var:J0> \end{verbatim} Given it to hold that $ <var:R> = <var:j> $ before executing our series of instructions , it follows that we see $ <var:q> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:4> $ after list of commands has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be given using the below decorated program . \begin{eqnarray} \{ <var:R> = <var:j> \} \\ <var:J1> := <var:R> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <var:j> \} \\ <var:J2> := <var:J1> * <var:R> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <var:j> \land <var:J2> = <var:j> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:R> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <var:j> \land <var:J2> = <var:j> ^ <nat:2> \land <var:J3> = <var:j> ^ <nat:3> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <var:j> \land <var:J2> = <var:j> ^ <nat:2> \land <var:J3> = <var:j> ^ <nat:3> \land <var:J0> = <nat:4> \} \\ <var:J1> := <var:J1> * <nat:5> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <nat:5> \cdot <var:j> \land <var:J2> = <var:j> ^ <nat:2> \land <var:J3> = <var:j> ^ <nat:3> \land <var:J0> = <nat:4> \} \\ <var:J2> := <var:J2> * <nat:7> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <nat:5> \cdot <var:j> \land <var:J2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:J3> = <var:j> ^ <nat:3> \land <var:J0> = <nat:4> \} \\ <var:J3> := <var:J3> * <nat:2> ; \\ \{ <var:R> = <var:j> \land <var:J1> = <nat:5> \cdot <var:j> \land <var:J2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:J3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:J0> = <nat:4> \} \\ <var:q> := <var:J3> \\ \{ <var:R> = <var:j> \land <var:J1> = <nat:5> \cdot <var:j> \land <var:J2> = <nat:7> \cdot <var:j> ^ <nat:2> \land <var:J0> = <nat:4> \land <var:q> = <nat:2> \cdot <var:j> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:J2> \\ \{ <var:R> = <var:j> \land <var:J1> = <nat:5> \cdot <var:j> \land <var:J0> = <nat:4> \land <var:q> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:J1> \\ \{ <var:R> = <var:j> \land <var:J0> = <nat:4> \land <var:q> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> \} \\ <var:q> := <var:q> + <var:J0> \\ \{ <var:R> = <var:j> \land <var:q> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:7> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:R> = <var:j> }} <var:J1> := <var:R> ; <var:J2> := <var:J1> * <var:R> ; <var:J3> := <var:J2> * <var:R> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:J2> := <var:J2> * <nat:7> ; <var:J3> := <var:J3> * <nat:2> ; <var:q> := <var:J3> <var:q> := <var:q> + <var:J2> <var:q> := <var:q> + <var:J1> <var:q> := <var:q> + <var:J0> {{ <var:q> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <var:j> /\ <var:J2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <var:j> /\ <var:J2> = <var:j> ^ <nat:2> /\ <var:J3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <var:j> /\ <var:J2> = <var:j> ^ <nat:2> /\ <var:J3> = <var:j> ^ <nat:3> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <nat:5> * <var:j> /\ <var:J2> = <var:j> ^ <nat:2> /\ <var:J3> = <var:j> ^ <nat:3> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <nat:5> * <var:j> /\ <var:J2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:J3> = <var:j> ^ <nat:3> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <nat:5> * <var:j> /\ <var:J2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <nat:5> * <var:j> /\ <var:J2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:J0> = <nat:4> /\ <var:q> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J1> = <nat:5> * <var:j> /\ <var:J0> = <nat:4> /\ <var:q> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:J0> = <nat:4> /\ <var:q> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:q> = <nat:2> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 