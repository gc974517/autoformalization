\begin{document} \begin{theorem} We define the following segment of code such that \begin{verbatim} <var:R0> := <nat:8> ; <var:c> := <var:R0> \end{verbatim} Assume $ <var:k> = <var:b> $ , for any $ <var:b> $ , prior to running this list of instructions then $ <var:c> = <nat:8> $ . \end{theorem} \begin{proof} Notice the following decorated set of commands . \begin{eqnarray} \{ <var:k> = <var:b> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:k> = <var:b> \land <var:R0> = <nat:8> \} \\ <var:c> := <var:R0> \\ \{ <var:k> = <var:b> \land <var:c> = <nat:8> \} \end{eqnarray} Using typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:k> = <var:b> }} <var:R0> := <nat:8> ; <var:c> := <var:R0> {{ <var:c> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:b> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:b> /\ <var:c> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 