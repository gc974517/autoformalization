\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:e1> := <var:W> ; <var:e2> := <var:e1> * <var:W> ; <var:e3> := <var:e2> * <var:W> ; <var:e0> := <nat:6> ; <var:e2> := <var:e2> * <nat:4> ; <var:e3> := <var:e3> * <nat:1> ; <var:p> := <var:e3> <var:p> := <var:p> + <var:e2> <var:p> := <var:p> + <var:e0> \end{verbatim} Allow that $ <var:W> = <var:T> $ , given some whole numbers $ <var:T> $ , ahead of interpreting the code it must be that we see $ <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:6> $ after list of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be demonstrated with typical Hoare logic . Keeping momentum , the assignment line \verb | <var:e1> := <var:W> ; | . This command moves $ \{ <var:W> = <var:T> \} $ into the condition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare logic . Moving forward to the upcoming line in our series of commands , the variable assignmet line \verb | <var:e2> := <var:e1> * <var:W> ; | . This code takes the precondition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \} $ as the condition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \} $ . Advancing on , the code \verb | <var:e3> := <var:e2> * <var:W> ; | . This forwards $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \} $ . Advancing to the next bit of code contained in the set of commands , we see the binding line defining $ <nat:6> $ as $ <var:e0>$ . This moves $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \} $ toward the condition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ . Advancing to the proceeding statement found in our list of instructions , we have the variable update command yielding $ <var:e2> * <nat:4> $ into $ <var:e2>$ . This takes $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ into the postcondition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ . This is rigorously given with the assignment rule in standard Hoare reasoning . Moving forward to the next step in the code , we see the binding code \verb | <var:e3> := <var:e3> * <nat:1> ; | . This transfers the precondition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e3> = <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ to the condition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e3> = <nat:1> \cdot <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ . This is known to be sound through the assignment scheme of usual Hoare logic . Stepping forward , we have the variable binding code \verb | <var:p> := <var:e3> | . This transfers $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e3> = <nat:1> \cdot <var:T> ^ <nat:3> \land <var:e0> = <nat:6> \} $ to $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e0> = <nat:6> \land <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ . This is sound using the assignment rule in typical Hoare logic . Stepping forward , the command \verb | <var:p> := <var:p> + <var:e2> | . This code moves $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <nat:4> \cdot <var:T> ^ <nat:2> \land <var:e0> = <nat:6> \land <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> \} $ to the condition $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e0> = <nat:6> \land <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> \} $ . This is deduced with the assignment inference rule obtained from Hoare reasoning . Advancing to the next step , we see the assignment line yielding $ <var:p> + <var:e0$ to $ <var:p>$ . This command advances $ \{ <var:W> = <var:T> \land <var:e1> = <var:T> \land <var:e0> = <nat:6> \land <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:W> = <var:T> \land <var:p> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:W> = <var:T> }} <var:e1> := <var:W> ; <var:e2> := <var:e1> * <var:W> ; <var:e3> := <var:e2> * <var:W> ; <var:e0> := <nat:6> ; <var:e2> := <var:e2> * <nat:4> ; <var:e3> := <var:e3> * <nat:1> ; <var:p> := <var:e3> <var:p> := <var:p> + <var:e2> <var:p> := <var:p> + <var:e0> {{ <var:p> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <var:T> ^ <nat:2> /\ <var:e3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <var:T> ^ <nat:2> /\ <var:e3> = <var:T> ^ <nat:3> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:e3> = <var:T> ^ <nat:3> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:T> ^ <nat:3> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:e0> = <nat:6> /\ <var:p> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:e1> = <var:T> /\ <var:e0> = <nat:6> /\ <var:p> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:T> /\ <var:p> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 