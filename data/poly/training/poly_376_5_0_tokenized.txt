\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:4> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:g> ; <var:Y> := <var:l1> ; <var:Y> := <var:Y> + <var:l0> \end{verbatim} Assuming $ <var:g> = <var:N> $ prior to the evaluation of this program it holds that we see $ <var:Y> = <nat:9> \times <var:N> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be given through standard Hoare logic . Stepping forward , we have the assignment command \verb | <var:l0> := <nat:4> ; | . This command takes the precondition $ \{ <var:g> = <var:N> \} $ to $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \} $ . Moving on to the upcoming line of code found in our series of commands , we have the variable update code \verb | <var:l1> := <nat:9> ; | . This command moves the precondition $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \} $ as the postcondition $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:l1> = <nat:9> \} $ . This is shown to be logically sound with the assignment scheme defined in Hoare techniques . Paying attention to the upcoming bit of code found in our list of instructions , we have the binding command \verb | <var:l1> := <var:l1> * <var:g> ; | . This command advances the precondition $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:l1> = <nat:9> \} $ as $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:l1> = <nat:9> * <var:N> \} $ . This is sound through the assignment rule from standard Hoare techniques . Immediately after , the variable assignmet code \verb | <var:Y> := <var:l1> ; | . This redefines the condition $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:l1> = <nat:9> * <var:N> \} $ as the postcondition $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:Y> = <nat:9> * <var:N> \} $ . This is rigorously given through the assignment rule in usual Hoare logic . Jumping to the proceeding line seen in our set of commands , we see the line assigning $ <var:Y> + <var:l0$ into $ <var:Y>$ . This command takes $ \{ <var:g> = <var:N> \land <var:l0> = <nat:4> \land <var:Y> = <nat:9> * <var:N> \} $ to $ \{ <var:g> = <var:N> \land <var:Y> = <nat:9> * <var:N> + <nat:4> \} $ . This is shown to be logically sound using the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <var:l0> := <nat:4> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:g> ; <var:Y> := <var:l1> ; <var:Y> := <var:Y> + <var:l0> {{ <var:Y> = <nat:9> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:l0> = <nat:4> /\ <var:Y> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:Y> = <nat:9> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 