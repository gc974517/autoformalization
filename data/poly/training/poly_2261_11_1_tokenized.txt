\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:K1> := <var:y> ; <var:K2> := <var:K1> * <var:y> ; <var:K3> := <var:K2> * <var:y> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:3> ; <var:w> := <var:K3> <var:w> := <var:w> + <var:K2> <var:w> := <var:w> + <var:K1> <var:w> := <var:w> + <var:K0> \end{verbatim} Assuming $ <var:y> = <var:r> $ ( with some positive integers $ <var:r> $ ) ahead of the evaluation of our set of commands it holds that we have $ <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:8> $ when list of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of the code can be demonstrated using standard Hoare logic . Taking a look at the subsequent statement seen in our code segment , the binding command \verb | <var:K1> := <var:y> ; | . This statement takes the precondition $ \{ <var:y> = <var:r> \} $ as the condition $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \} $ . This is sound by the assignment law given by Hoare reasoning . Advancing to the proceeding line of code in our segment of code , we have the variable assignmet statement \verb | <var:K2> := <var:K1> * <var:y> ; | . This statement moves $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \} $ toward $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \} $ . This is ensured using the assignment scheme from typical Hoare logic . Paying attention to the following piece of code in our code segment , we have the environment update code \verb | <var:K3> := <var:K2> * <var:y> ; | . This forwards the precondition $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \} $ . This is known to be sound with the assignment inference rule found in usual Hoare techniques . Advancing to the next step , the environment update code assigning $ <nat:8> $ as $ <var:K0>$ . This moves the precondition $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \} $ into the postcondition $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . This is rigorously given through the assignment rule found in typical Hoare logic . After , the binding code \verb | <var:K1> := <var:K1> * <nat:4> ; | . This advances $ \{ <var:y> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ as the postcondition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . Moving onward , we see the variable assignmet line binding $ <var:K2> * <nat:5> $ toward $ <var:K2>$ . This line moves the condition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ as $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . This is given through the assignment scheme defined in typical Hoare techniques . Going forward , the command \verb | <var:K3> := <var:K3> * <nat:3> ; | . This command moves the condition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K3> = <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ toward the postcondition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K3> = <nat:3> \times <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ . Advancing to the proceeding bit of code seen in the list of instructions , we have the variable update command defining $ <var:K3$ to $ <var:w>$ . This redefines the precondition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K3> = <nat:3> \times <var:r> ^ <nat:3> \land <var:K0> = <nat:8> \} $ toward the postcondition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> \} $ . This is sound using the assignment law obtained from usual Hoare logic . Keeping momentum , we see the variable update line \verb | <var:w> := <var:w> + <var:K2> | . This redefines the condition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K2> = <nat:5> \times <var:r> ^ <nat:2> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> \} $ toward the condition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> \} $ . This is given with the assignment rule given in typical Hoare techniques . Taking a look at the upcoming step in our set of instructions , we have the variable binding command \verb | <var:w> := <var:w> + <var:K1> | . This line takes the precondition $ \{ <var:y> = <var:r> \land <var:K1> = <nat:4> \times <var:r> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:r> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> \} $ . This is deduced using the assignment law in typical Hoare logic . Focusing on the upcoming step seen in the set of commands , we have the variable update line giving $ <var:w> + <var:K0$ to $ <var:w>$ . This transfers $ \{ <var:y> = <var:r> \land <var:K0> = <nat:8> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> \} $ as the postcondition $ \{ <var:y> = <var:r> \land <var:w> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:y> = <var:r> }} <var:K1> := <var:y> ; <var:K2> := <var:K1> * <var:y> ; <var:K3> := <var:K2> * <var:y> ; <var:K0> := <nat:8> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:3> ; <var:w> := <var:K3> <var:w> := <var:w> + <var:K2> <var:w> := <var:w> + <var:K1> <var:w> := <var:w> + <var:K0> {{ <var:w> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <var:r> ^ <nat:2> /\ <var:K3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <var:r> ^ <nat:2> /\ <var:K3> = <var:r> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <nat:4> * <var:r> /\ <var:K2> = <var:r> ^ <nat:2> /\ <var:K3> = <var:r> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <nat:4> * <var:r> /\ <var:K2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:K3> = <var:r> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <nat:4> * <var:r> /\ <var:K2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:r> ^ <nat:3> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <nat:4> * <var:r> /\ <var:K2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K1> = <nat:4> * <var:r> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:K0> = <nat:8> /\ <var:w> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:r> /\ <var:w> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 