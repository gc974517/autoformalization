\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:2> ; <var:J> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:o> = <var:z> $ ahead of interpreting our list of commands , it must be that we see $ <var:J> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be demonstrated with usual Hoare logic . Honing in on the upcoming line of code contained in our list of commands , the command yielding $ <nat:2> $ as $ <var:N0>$ . This line moves $ \{ <var:o> = <var:z> \} $ into $ \{ <var:o> = <var:z> \land <var:N0> = <nat:2> \} $ . This is ensured by the assignment inference rule defined by usual Hoare techniques . Honing in on the following line of code found in the code segment , we see the environment update code \verb | <var:J> := <var:N0> | . This line advances the precondition $ \{ <var:o> = <var:z> \land <var:N0> = <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:z> \land <var:J> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:2> ; <var:J> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:o> = <var:z> }} <def:poly> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:z> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 