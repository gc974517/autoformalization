\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:q> ; <var:g2> := <var:g1> * <var:q> ; <var:g3> := <var:g2> * <var:q> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:8> ; <var:g3> := <var:g3> * <nat:2> ; <var:H> := <var:g3> <var:H> := <var:H> + <var:g2> <var:H> := <var:H> + <var:g1> <var:H> := <var:H> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allowing it to be that $ <var:q> = <var:Z> $ ahead of evaluating this set of instructions then $ <var:H> = <nat:2> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions can be given by usual Hoare logic . Looking at the next commands contained in the list of commands , \[ \begin{tabular} {rcl} \{ <var:q> = <var:Z> \} & <var:g1> := <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \} & <var:g2> := <var:g1> * <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \} & <var:g3> := <var:g2> * <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \} & <var:g0> := <nat:7> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} & <var:g1> := <var:g1> * <nat:4> & \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} & <var:g2> := <var:g2> * <nat:8> & \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:g3> = <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} & <var:g3> := <var:g3> * <nat:2> & \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:g3> = <nat:2> * <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:g3> = <nat:2> * <var:Z> ^ <nat:3> \land <var:g0> = <nat:7> \} & <var:H> := <var:g3& \{ <var:q> = <var:Z> \land <var:g1> = <nat:4> * <var:Z> \land <var:g2> = <nat:8> * <var:Z> ^ <nat:2> \land <var:g0> = <nat:7> \land <var:H> = <nat:2> * <var:Z> ^ <nat:3> \} \end{tabular} Considering the proceeding piece of code in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:Z> \} & <var:g1> := <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \} \end{tabular} Honing in on the upcoming bits of codein our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:Z> \} & <var:g1> := <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \} \\ \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \} & <var:g2> := <var:g1> * <var:q> & \{ <var:q> = <var:Z> \land <var:g1> = <var:Z> \land <var:g2> = <var:Z> ^ <nat:2> \} \end{tabular} This is shown using the variable assignmet law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:q> ; <var:g2> := <var:g1> * <var:q> ; <var:g3> := <var:g2> * <var:q> ; <var:g0> := <nat:7> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:8> ; <var:g3> := <var:g3> * <nat:2> ; <var:H> := <var:g3> <var:H> := <var:H> + <var:g2> <var:H> := <var:H> + <var:g1> <var:H> := <var:H> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:q> = <var:Z> }} <def:poly> {{ <var:H> = <nat:2> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <nat:4> * <var:Z> /\ <var:g2> = <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <nat:4> * <var:Z> /\ <var:g2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:g3> = <var:Z> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <nat:4> * <var:Z> /\ <var:g2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:g3> = <nat:2> * <var:Z> ^ <nat:3> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <nat:4> * <var:Z> /\ <var:g2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:g0> = <nat:7> /\ <var:H> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g1> = <nat:4> * <var:Z> /\ <var:g0> = <nat:7> /\ <var:H> = <nat:2> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:g0> = <nat:7> /\ <var:H> = <nat:2> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Z> /\ <var:H> = <nat:2> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 