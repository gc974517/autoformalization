\begin{document} \begin{theorem} Define a program as \begin{verbatim} <var:c1> := <var:s> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:8> ; <var:U> := <var:c1> <var:U> := <var:U> + <var:c0> \end{verbatim} Assume that $ <var:s> = <var:M> $ before running the series of instructions , then $ <var:U> = <nat:8> * <var:M> + <nat:3> $ once segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for the list of commands can be done with Hoare logic . Next , we see the environment update command assigning $ <var:s> $ toward $ <var:c1>$ . This code takes $ \{ <var:s> = <var:M> \} $ into the postcondition $ \{ <var:s> = <var:M> \land <var:c1> = <var:M> \} $ . This is guaranteed using the assignment rule obtained from standard Hoare reasoning . Jumping to the proceeding line of code contained in the series of instructions , we have the variable binding line yielding $ <nat:3> $ as $ <var:c0>$ . This line transfers the condition $ \{ <var:s> = <var:M> \land <var:c1> = <var:M> \} $ toward $ \{ <var:s> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:3> \} $ . Moving on , we see the variable update code \verb | <var:c1> := <var:c1> * <nat:8> ; | . This command transfers the precondition $ \{ <var:s> = <var:M> \land <var:c1> = <var:M> \land <var:c0> = <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:c1> = <nat:8> \times <var:M> \land <var:c0> = <nat:3> \} $ . This is guaranteed using the assignment inference rule in standard Hoare techniques . After , we have the binding statement \verb | <var:U> := <var:c1> | . This line moves $ \{ <var:s> = <var:M> \land <var:c1> = <nat:8> \times <var:M> \land <var:c0> = <nat:3> \} $ to the condition $ \{ <var:s> = <var:M> \land <var:c0> = <nat:3> \land <var:U> = <nat:8> \times <var:M> \} $ . This is given with the assignment law from standard Hoare reasoning . Moving onward , the assignment code \verb | <var:U> := <var:U> + <var:c0> | . This statement advances the condition $ \{ <var:s> = <var:M> \land <var:c0> = <nat:3> \land <var:U> = <nat:8> \times <var:M> \} $ into the condition $ \{ <var:s> = <var:M> \land <var:U> = <nat:8> \times <var:M> + <nat:3> \} $ . This is sound by the assignment inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:s> = <var:M> }} <var:c1> := <var:s> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:8> ; <var:U> := <var:c1> <var:U> := <var:U> + <var:c0> {{ <var:U> = <nat:8> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:c1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:c1> = <var:M> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:c1> = <nat:8> * <var:M> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:c0> = <nat:3> /\ <var:U> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:U> = <nat:8> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 