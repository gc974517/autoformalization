\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:7> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:T> ; <var:B> := <var:X1> ; <var:B> := <var:B> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:T> = <var:w> $ before interpreting the code it holds that we have $ <var:B> = <nat:3> \cdot <var:w> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:w> \} \\ <var:X0> := <nat:7> ; \\ \{ <var:T> = <var:w> \land <var:X0> = <nat:7> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:T> = <var:w> \land <var:X0> = <nat:7> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:T> ; \\ \{ <var:T> = <var:w> \land <var:X0> = <nat:7> \land <var:X1> = <nat:3> \times <var:w> \} \\ <var:B> := <var:X1> ; \\ \{ <var:T> = <var:w> \land <var:X0> = <nat:7> \land <var:B> = <nat:3> \times <var:w> \} \\ <var:B> := <var:B> + <var:X0> \\ \{ <var:T> = <var:w> \land <var:B> = <nat:3> \times <var:w> + <nat:7> \} \end{eqnarray} Applying Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:7> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:T> ; <var:B> := <var:X1> ; <var:B> := <var:B> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:T> = <var:w> }} <def:poly> {{ <var:B> = <nat:3> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:X0> = <nat:7> /\ <var:X1> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:X0> = <nat:7> /\ <var:B> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:B> = <nat:3> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 