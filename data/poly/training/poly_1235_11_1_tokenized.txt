\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:D> ; <var:H2> := <var:H1> * <var:D> ; <var:H3> := <var:H2> * <var:D> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:9> ; <var:n> := <var:H3> <var:n> := <var:n> + <var:H2> <var:n> := <var:n> + <var:H1> <var:n> := <var:n> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assuming ( given all natural coefficients $ <var:r> $ ) that $ <var:D> = <var:r> $ ahead of executing the list of instructions , it holds that $ <var:n> = <nat:9> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:D> = <var:r> \} \\ <var:H1> := <var:D> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <var:r> \} \\ <var:H2> := <var:H1> * <var:D> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <var:r> \land <var:H2> = <var:r> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:D> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <var:r> \land <var:H2> = <var:r> ^ <nat:2> \land <var:H3> = <var:r> ^ <nat:3> \} \\ <var:H0> := <nat:8> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <var:r> \land <var:H2> = <var:r> ^ <nat:2> \land <var:H3> = <var:r> ^ <nat:3> \land <var:H0> = <nat:8> \} \\ <var:H1> := <var:H1> * <nat:2> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <nat:2> \cdot <var:r> \land <var:H2> = <var:r> ^ <nat:2> \land <var:H3> = <var:r> ^ <nat:3> \land <var:H0> = <nat:8> \} \\ <var:H2> := <var:H2> * <nat:9> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <nat:2> \cdot <var:r> \land <var:H2> = <nat:9> \cdot <var:r> ^ <nat:2> \land <var:H3> = <var:r> ^ <nat:3> \land <var:H0> = <nat:8> \} \\ <var:H3> := <var:H3> * <nat:9> ; \\ \{ <var:D> = <var:r> \land <var:H1> = <nat:2> \cdot <var:r> \land <var:H2> = <nat:9> \cdot <var:r> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:r> ^ <nat:3> \land <var:H0> = <nat:8> \} \\ <var:n> := <var:H3> \\ \{ <var:D> = <var:r> \land <var:H1> = <nat:2> \cdot <var:r> \land <var:H2> = <nat:9> \cdot <var:r> ^ <nat:2> \land <var:H0> = <nat:8> \land <var:n> = <nat:9> \cdot <var:r> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:H2> \\ \{ <var:D> = <var:r> \land <var:H1> = <nat:2> \cdot <var:r> \land <var:H0> = <nat:8> \land <var:n> = <nat:9> \cdot <var:r> ^ <nat:3> + <nat:9> \cdot <var:r> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:H1> \\ \{ <var:D> = <var:r> \land <var:H0> = <nat:8> \land <var:n> = <nat:9> \cdot <var:r> ^ <nat:3> + <nat:9> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} \\ <var:n> := <var:n> + <var:H0> \\ \{ <var:D> = <var:r> \land <var:n> = <nat:9> \cdot <var:r> ^ <nat:3> + <nat:9> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:8> \} \end{eqnarray} Thusly , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H1> := <var:D> ; <var:H2> := <var:H1> * <var:D> ; <var:H3> := <var:H2> * <var:D> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:9> ; <var:n> := <var:H3> <var:n> := <var:n> + <var:H2> <var:n> := <var:n> + <var:H1> <var:n> := <var:n> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:D> = <var:r> }} <def:poly> {{ <var:n> = <nat:9> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <var:r> /\ <var:H2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <var:r> /\ <var:H2> = <var:r> ^ <nat:2> /\ <var:H3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <var:r> /\ <var:H2> = <var:r> ^ <nat:2> /\ <var:H3> = <var:r> ^ <nat:3> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <nat:2> * <var:r> /\ <var:H2> = <var:r> ^ <nat:2> /\ <var:H3> = <var:r> ^ <nat:3> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <nat:2> * <var:r> /\ <var:H2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:H3> = <var:r> ^ <nat:3> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <nat:2> * <var:r> /\ <var:H2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:r> ^ <nat:3> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <nat:2> * <var:r> /\ <var:H2> = <nat:9> * <var:r> ^ <nat:2> /\ <var:H0> = <nat:8> /\ <var:n> = <nat:9> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H1> = <nat:2> * <var:r> /\ <var:H0> = <nat:8> /\ <var:n> = <nat:9> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:H0> = <nat:8> /\ <var:n> = <nat:9> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:n> = <nat:9> * <var:r> ^ <nat:3> + <nat:9> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 