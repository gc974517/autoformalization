\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:8> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:7> ; <var:G> := <var:a3> <var:G> := <var:G> + <var:a2> <var:G> := <var:G> + <var:a1> <var:G> := <var:G> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Assuming it to be that $ <var:R> = <var:A> $ prior to running our set of instructions , it holds that $ <var:G> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:8> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:R> = <var:A> \} \\ <var:a1> := <var:R> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <var:A> \} \\ <var:a2> := <var:a1> * <var:R> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:R> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:8> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <nat:8> \cdot <var:A> \land <var:a2> = <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:8> \} \\ <var:a2> := <var:a2> * <nat:7> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <nat:8> \cdot <var:A> \land <var:a2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:a3> = <var:A> ^ <nat:3> \land <var:a0> = <nat:8> \} \\ <var:a3> := <var:a3> * <nat:7> ; \\ \{ <var:R> = <var:A> \land <var:a1> = <nat:8> \cdot <var:A> \land <var:a2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:a3> = <nat:7> \cdot <var:A> ^ <nat:3> \land <var:a0> = <nat:8> \} \\ <var:G> := <var:a3> \\ \{ <var:R> = <var:A> \land <var:a1> = <nat:8> \cdot <var:A> \land <var:a2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:a0> = <nat:8> \land <var:G> = <nat:7> \cdot <var:A> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:a2> \\ \{ <var:R> = <var:A> \land <var:a1> = <nat:8> \cdot <var:A> \land <var:a0> = <nat:8> \land <var:G> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:a1> \\ \{ <var:R> = <var:A> \land <var:a0> = <nat:8> \land <var:G> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> \} \\ <var:G> := <var:G> + <var:a0> \\ \{ <var:R> = <var:A> \land <var:G> = <nat:7> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:8> \cdot <var:A> + <nat:8> \} \end{eqnarray} Hence , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:8> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:7> ; <var:G> := <var:a3> <var:G> := <var:G> + <var:a2> <var:G> := <var:G> + <var:a1> <var:G> := <var:G> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:R> = <var:A> }} <def:poly> {{ <var:G> = <nat:7> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <nat:8> * <var:A> /\ <var:a2> = <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <nat:8> * <var:A> /\ <var:a2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:a3> = <var:A> ^ <nat:3> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <nat:8> * <var:A> /\ <var:a2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:A> ^ <nat:3> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <nat:8> * <var:A> /\ <var:a2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:a0> = <nat:8> /\ <var:G> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a1> = <nat:8> * <var:A> /\ <var:a0> = <nat:8> /\ <var:G> = <nat:7> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:a0> = <nat:8> /\ <var:G> = <nat:7> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:A> /\ <var:G> = <nat:7> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 