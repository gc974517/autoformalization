\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:U0> := <nat:9> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:t> := <var:U2> ; <var:t> := <var:t> + <var:U1> ; <var:t> := <var:t> + <var:U0> \end{verbatim} Allowing , given some integers $ <var:q> $ , that $ <var:d> = <var:q> $ prior to the execution of the set of instructions it holds that we have $ <var:t> = <nat:8> \times <var:q> ^ <nat:2> + <nat:8> \times <var:q> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:q> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \} \\ <var:U1> := <nat:8> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \} \\ <var:U1> := <var:U1> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:q> \} \end{eqnarray} Allowing executing this segment of code results in : \begin{eqnarray} <var:U2> := <nat:8> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:q> \land <var:U2> = <nat:8> \} \\ <var:U2> := <var:U2> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:q> \land <var:U2> = <nat:8> \cdot <var:q> \} \\ <var:U2> := <var:U2> * <var:d> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:q> \land <var:U2> = <nat:8> \cdot <var:q> ^ <nat:2> \} \\ <var:t> := <var:U2> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:U1> = <nat:8> \cdot <var:q> \land <var:t> = <nat:8> \cdot <var:q> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:U1> ; \\ \{ <var:d> = <var:q> \land <var:U0> = <nat:9> \land <var:t> = <nat:8> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> \} \\ <var:t> := <var:t> + <var:U0> \\ \{ <var:d> = <var:q> \land <var:t> = <nat:8> \cdot <var:q> ^ <nat:2> + <nat:8> \cdot <var:q> + <nat:9> \} \end{eqnarray} Applying usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <var:U0> := <nat:9> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:d> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:d> ; <var:U2> := <var:U2> * <var:d> ; <var:t> := <var:U2> ; <var:t> := <var:t> + <var:U1> ; <var:t> := <var:t> + <var:U0> {{ <var:t> = <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:q> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:q> /\ <var:U2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:q> /\ <var:U2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:U1> = <nat:8> * <var:q> /\ <var:t> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:U0> = <nat:9> /\ <var:t> = <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:t> = <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 