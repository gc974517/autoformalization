\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:9> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:X> ; <var:L2> := <var:L2> * <var:X> ; <var:L3> := <nat:3> ; <var:L3> := <var:L3> * <var:X> ; <var:L3> := <var:L3> * <var:X> ; <var:L3> := <var:L3> * <var:X> ; <var:i> := <var:L3> ; <var:i> := <var:i> + <var:L2> ; <var:i> := <var:i> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> in \emph{Imp} . Assuming $ <var:X> = <var:N> $ , for some whole numbers $ <var:N> $ , ahead of executing our code segment then we see $ <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:9> $ once segment of code has finished executing . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:X> = <var:N> \} \\ <var:L0> := <nat:9> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \} \\ <var:L2> := <nat:7> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> \} \\ <var:L2> := <var:L2> * <var:X> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> \} \\ <var:L2> := <var:L2> * <var:X> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \} \\ <var:L3> := <nat:3> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \land <var:L3> = <nat:3> \} \\ <var:L3> := <var:L3> * <var:X> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \land <var:L3> = <nat:3> * <var:N> \} \\ <var:L3> := <var:L3> * <var:X> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \land <var:L3> = <nat:3> * <var:N> ^ <nat:2> \} \\ <var:L3> := <var:L3> * <var:X> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \land <var:L3> = <nat:3> * <var:N> ^ <nat:3> \} \\ <var:i> := <var:L3> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:L2> = <nat:7> * <var:N> ^ <nat:2> \land <var:i> = <nat:3> * <var:N> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:L2> ; \\ \{ <var:X> = <var:N> \land <var:L0> = <nat:9> \land <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:L0> \\ \{ <var:X> = <var:N> \land <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:9> \} \end{eqnarray} Considering the above , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L2> := <nat:7> ; <var:L2> := <var:L2> * <var:X> ; <var:L2> := <var:L2> * <var:X> ; <var:L3> := <nat:3> ; <var:L3> := <var:L3> * <var:X> ; <var:L3> := <var:L3> * <var:X> ; <var:L3> := <var:L3> * <var:X> ; <var:i> := <var:L3> ; <var:i> := <var:i> + <var:L2> ; <var:i> := <var:i> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:X> = <var:N> }} <def:poly> {{ <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:L2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:i> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:L0> = <nat:9> /\ <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:i> = <nat:3> * <var:N> ^ <nat:3> + <nat:7> * <var:N> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 