\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:k> ; <var:y> := <var:o1> ; <var:y> := <var:y> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Given , given some integers $ <var:I> $ , it to be that $ <var:k> = <var:I> $ before executing our program it follows that we have $ <var:y> = <nat:3> * <var:I> + <nat:8> $ . \end{theorem} \begin{proof} The argument for our segment of code can be done through standard Hoare logic . Observing the proceeding step found in the set of commands , we see the variable assignmet command defining $ <nat:8> $ to $ <var:o0>$ . This takes $ \{ <var:k> = <var:I> \} $ into $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \} $ . Advancing to the next step , we have the assignment statement \verb | <var:o1> := <nat:3> ; | . This line advances the condition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \} $ toward the condition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:o1> = <nat:3> \} $ . This is sound with the assignment inference rule defined by typical Hoare reasoning . Considering the next command in our code segment , we see the variable binding statement \verb | <var:o1> := <var:o1> * <var:k> ; | . This code moves the precondition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:o1> = <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:o1> = <nat:3> \times <var:I> \} $ . Advancing to the following command seen in our list of commands , the line assigning $ <var:o1> $ to $ <var:y>$ . This redefines $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:o1> = <nat:3> \times <var:I> \} $ to the condition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:y> = <nat:3> \times <var:I> \} $ . Stepping forward , we see the code binding $ <var:y> + <var:o0$ as $ <var:y>$ . This redefines the precondition $ \{ <var:k> = <var:I> \land <var:o0> = <nat:8> \land <var:y> = <nat:3> \times <var:I> \} $ as the condition $ \{ <var:k> = <var:I> \land <var:y> = <nat:3> \times <var:I> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:8> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:k> ; <var:y> := <var:o1> ; <var:y> := <var:y> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:k> = <var:I> }} <def:poly> {{ <var:y> = <nat:3> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:o0> = <nat:8> /\ <var:y> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:y> = <nat:3> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 