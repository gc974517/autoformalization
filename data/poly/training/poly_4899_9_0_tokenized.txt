\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:F> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:F> ; <var:O2> := <var:O2> * <var:F> ; <var:U> := <var:O2> ; <var:U> := <var:U> + <var:O1> ; <var:U> := <var:U> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Given , given every positive coefficients $ <var:m> $ , that $ <var:F> = <var:m> $ prior to the evaluation of the set of instructions then $ <var:U> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:4> $ after series of instructions has executed . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:F> = <var:m> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \} \\ <var:O1> := <nat:1> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \} \\ <var:O1> := <var:O1> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:m> \} \\ <var:O2> := <nat:1> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:m> \land <var:O2> = <nat:1> \} \\ <var:O2> := <var:O2> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:m> \land <var:O2> = <nat:1> \times <var:m> \} \\ <var:O2> := <var:O2> * <var:F> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:m> \land <var:O2> = <nat:1> \times <var:m> ^ <nat:2> \} \\ <var:U> := <var:O2> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \times <var:m> \land <var:U> = <nat:1> \times <var:m> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:O1> ; \\ \{ <var:F> = <var:m> \land <var:O0> = <nat:4> \land <var:U> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> \} \\ <var:U> := <var:U> + <var:O0> \\ \{ <var:F> = <var:m> \land <var:U> = <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:4> \} \end{eqnarray} As a result , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:F> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:F> ; <var:O2> := <var:O2> * <var:F> ; <var:U> := <var:O2> ; <var:U> := <var:U> + <var:O1> ; <var:U> := <var:U> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:F> = <var:m> }} <def:poly> {{ <var:U> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:m> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:m> /\ <var:O2> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:m> /\ <var:O2> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:m> /\ <var:U> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:O0> = <nat:4> /\ <var:U> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:m> /\ <var:U> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 