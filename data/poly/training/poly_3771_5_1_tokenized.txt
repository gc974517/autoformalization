\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:m> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:4> ; <var:C> := <var:w1> <var:C> := <var:C> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:m> = <var:n> $ ahead of the evaluation of our segment of code it holds that we have $ <var:C> = <nat:4> \cdot <var:n> + <nat:5> $ after code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:n> \} \\ <var:w1> := <var:m> ; \\ \{ <var:m> = <var:n> \land <var:w1> = <var:n> \} \\ <var:w0> := <nat:5> ; \\ \{ <var:m> = <var:n> \land <var:w1> = <var:n> \land <var:w0> = <nat:5> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:m> = <var:n> \land <var:w1> = <nat:4> \cdot <var:n> \land <var:w0> = <nat:5> \} \\ <var:C> := <var:w1> \\ \{ <var:m> = <var:n> \land <var:w0> = <nat:5> \land <var:C> = <nat:4> \cdot <var:n> \} \\ <var:C> := <var:C> + <var:w0> \\ \{ <var:m> = <var:n> \land <var:C> = <nat:4> \cdot <var:n> + <nat:5> \} \end{eqnarray} Using Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:m> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:4> ; <var:C> := <var:w1> <var:C> := <var:C> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <def:poly> {{ <var:C> = <nat:4> * <var:n> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:w1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:w1> = <var:n> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:w1> = <nat:4> * <var:n> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:w0> = <nat:5> /\ <var:C> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:C> = <nat:4> * <var:n> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 