\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:4> + <var:s> * <var:e> ; <var:s> := <var:s> * <var:e> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:1> + <var:s> * <var:e> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume that we have $ <var:e> = <var:x> $ prior to the execution of this set of instructions it holds that $ <var:s> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:1> $ when segment of code exits . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is done through standard Hoare reasoning . Now , we have \begin{verbatim} { <var:e> = <var:x> } <var:s> := <nat:4> { <var:e> = <var:x> \land <var:s> = <nat:4> } { <var:e> = <var:x> \land <var:s> = <nat:4> } <var:s> := <nat:4> + <var:s> * <var:e> { <var:e> = <var:x> \land <var:s> = <nat:4> \times <var:x> + <nat:4> } \end{verbatim} Shifting focus toward the subsequent statements in the program , we see \begin{verbatim} { <var:e> = <var:x> } <var:s> := <nat:4> { <var:e> = <var:x> \land <var:s> = <nat:4> } { <var:e> = <var:x> \land <var:s> = <nat:4> } <var:s> := <nat:4> + <var:s> * <var:e> { <var:e> = <var:x> \land <var:s> = <nat:4> \times <var:x> + <nat:4> } { <var:e> = <var:x> \land <var:s> = <nat:4> \times <var:x> + <nat:4> } <var:s> := <var:s> * <var:e> { <var:e> = <var:x> \land <var:s> = <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:4> ; <var:s> := <nat:4> + <var:s> * <var:e> ; <var:s> := <var:s> * <var:e> ; <var:s> := <nat:2> + <var:s> * <var:e> ; <var:s> := <nat:1> + <var:s> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:e> = <var:x> }} <def:poly> {{ <var:s> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:s> = <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:s> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:s> = <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:x> /\ <var:s> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 