\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:1> ; <var:M> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:P> = <var:U> $ prior to running this program , it must be that $ <var:M> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:U> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:P> = <var:U> \land <var:k0> = <nat:1> \} \\ <var:M> := <var:k0> \\ \{ <var:P> = <var:U> \land <var:M> = <nat:1> \} \end{eqnarray} Applying usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:M> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:P> = <var:U> }} <def:poly> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 