\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:Q0> := <nat:7> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:F> ; <var:y> := <var:Q1> ; <var:y> := <var:y> + <var:Q0> \end{verbatim} Given letting $ <var:c> $ it to hold that $ <var:F> = <var:c> $ before running our series of commands , it holds that $ <var:y> = <nat:2> * <var:c> + <nat:7> $ after segment of code executes . \end{theorem} \begin{proof} The proof of our code segment is evident by standard Hoare techniques . Moving forward , the binding statement \verb | <var:Q0> := <nat:7> ; | . This advances $ \{ <var:F> = <var:c> \} $ as the postcondition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \} $ . This is shown to be logically sound using the assignment inference rule of standard Hoare techniques . Honing in on the next line seen in the series of commands , we see the binding statement letting $ <nat:2> $ to $ <var:Q1>$ . This transfers $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \} $ into the condition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:2> \} $ . This is rigorously given using the assignment inference rule defined by typical Hoare techniques . Moving on , we see the binding line \verb | <var:Q1> := <var:Q1> * <var:F> ; | . This statement advances the precondition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:2> \} $ into the postcondition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:2> \times <var:c> \} $ . This is deduced by the assignment rule defined in standard Hoare techniques . Honing in on the following line found in the set of commands , the assignment code yielding $ <var:Q1> $ toward $ <var:y>$ . This advances the condition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:Q1> = <nat:2> \times <var:c> \} $ toward $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:y> = <nat:2> \times <var:c> \} $ . Jumping to the proceeding line found in our code segment , we have the variable assignmet statement yielding $ <var:y> + <var:Q0$ to $ <var:y>$ . This statement forwards the condition $ \{ <var:F> = <var:c> \land <var:Q0> = <nat:7> \land <var:y> = <nat:2> \times <var:c> \} $ toward $ \{ <var:F> = <var:c> \land <var:y> = <nat:2> \times <var:c> + <nat:7> \} $ . This is guaranteed through the assignment rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:F> = <var:c> }} <var:Q0> := <nat:7> ; <var:Q1> := <nat:2> ; <var:Q1> := <var:Q1> * <var:F> ; <var:y> := <var:Q1> ; <var:y> := <var:y> + <var:Q0> {{ <var:y> = <nat:2> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:Q0> = <nat:7> /\ <var:Q1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:Q0> = <nat:7> /\ <var:y> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:y> = <nat:2> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 