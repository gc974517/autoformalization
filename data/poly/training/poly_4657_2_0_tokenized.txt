\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:W0> := <nat:7> ; <var:J> := <var:W0> \end{verbatim} Given it to be that $ <var:I> = <var:k> $ ahead of the evaluation of the code , it follows that we have $ <var:J> = <nat:7> $ . \end{theorem} \begin{proof} Observe this decorated code segment . \begin{eqnarray} \{ <var:I> = <var:k> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:I> = <var:k> \land <var:W0> = <nat:7> \} \\ <var:J> := <var:W0> \\ \{ <var:I> = <var:k> \land <var:J> = <nat:7> \} \end{eqnarray} Using standard Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:I> = <var:k> }} <var:W0> := <nat:7> ; <var:J> := <var:W0> {{ <var:J> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:J> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 