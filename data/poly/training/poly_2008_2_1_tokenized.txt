\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:a0> := <nat:1> ; <var:Z> := <var:a0> \end{verbatim} Assuming it to hold that $ <var:U> = <var:T> $ before executing this list of commands , it holds that $ <var:Z> = <nat:1> $ when program has finished . \end{theorem} \begin{proof} Demonstrating correctness of this program is evident by Hoare techniques . Immediately after , we have the binding statement binding $ <nat:1> $ into $ <var:a0>$ . This line advances the precondition $ \{ <var:U> = <var:T> \} $ as the postcondition $ \{ <var:U> = <var:T> \land <var:a0> = <nat:1> \} $ . Advancing to the next step , the assignment code letting $ <var:a0$ toward $ <var:Z>$ . This takes $ \{ <var:U> = <var:T> \land <var:a0> = <nat:1> \} $ into the condition $ \{ <var:U> = <var:T> \land <var:Z> = <nat:1> \} $ . This is ensured with the assignment law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:U> = <var:T> }} <var:a0> := <nat:1> ; <var:Z> := <var:a0> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:T> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:T> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 