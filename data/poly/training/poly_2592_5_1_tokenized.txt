\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:M> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:i> := <var:g1> <var:i> := <var:i> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:M> = <var:C> $ before interpreting the list of instructions , then we see $ <var:i> = <nat:3> \cdot <var:C> + <nat:2> $ when set of instructions executes . \end{theorem} \begin{proof} Using typical Hoare logic gives us : \begin{eqnarray} \{ <var:M> = <var:C> \} \\ <var:g1> := <var:M> ; \\ \{ <var:M> = <var:C> \land <var:g1> = <var:C> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:M> = <var:C> \land <var:g1> = <var:C> \land <var:g0> = <nat:2> \} \\ <var:g1> := <var:g1> * <nat:3> ; \\ \{ <var:M> = <var:C> \land <var:g1> = <nat:3> * <var:C> \land <var:g0> = <nat:2> \} \\ <var:i> := <var:g1> \\ \{ <var:M> = <var:C> \land <var:g0> = <nat:2> \land <var:i> = <nat:3> * <var:C> \} \\ <var:i> := <var:i> + <var:g0> \\ \{ <var:M> = <var:C> \land <var:i> = <nat:3> * <var:C> + <nat:2> \} \end{eqnarray} Given the preceding argument , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:M> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:i> := <var:g1> <var:i> := <var:i> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:M> = <var:C> }} <def:poly> {{ <var:i> = <nat:3> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:C> /\ <var:g1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:C> /\ <var:g1> = <var:C> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:C> /\ <var:g1> = <nat:3> * <var:C> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:C> /\ <var:g0> = <nat:2> /\ <var:i> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:C> /\ <var:i> = <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 