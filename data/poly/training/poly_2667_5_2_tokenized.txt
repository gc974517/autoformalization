\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:4> + <var:Z> * <var:T> ; <var:Z> := <nat:2> + <var:Z> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume ( given every natural coefficients $ <var:f> $ ) it to be that $ <var:T> = <var:f> $ before evaluating this code segment it holds that $ <var:Z> = <nat:1> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:2> $ when series of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:f> \} \\ <var:Z> := <nat:1> ; \\ \{ <var:T> = <var:f> \land <var:Z> = <nat:1> \} \end{eqnarray} Furthering executing our code gives us : \begin{eqnarray} <var:Z> := <var:Z> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:Z> = <nat:1> \times <var:f> + \} \\ <var:Z> := <nat:1> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:Z> = <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:f> \land <var:Z> = <nat:1> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> + <nat:4> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:T> \\ \{ <var:T> = <var:f> \land <var:Z> = <nat:1> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> \} \end{eqnarray} Using usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:1> ; <var:Z> := <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:4> + <var:Z> * <var:T> ; <var:Z> := <nat:2> + <var:Z> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:T> = <var:f> }} <def:poly> {{ <var:Z> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Z> = <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Z> = <nat:1> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Z> = <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Z> = <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 