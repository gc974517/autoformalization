\begin{document} \begin{theorem} Consider a segment of code as follows \begin{verbatim} <var:o1> := <var:q> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:8> ; <var:N> := <var:o1> <var:N> := <var:N> + <var:o0> \end{verbatim} Allowing it to be that $ <var:q> = <var:H> $ , for some $ <var:H> $ , before the execution of this list of instructions then we have $ <var:N> = <nat:8> \times <var:H> + <nat:5> $ after set of commands exits . \end{theorem} \begin{proof} Note that the following decorated code segment . \begin{eqnarray} \{ <var:q> = <var:H> \} \\ <var:o1> := <var:q> ; \\ \{ <var:q> = <var:H> \land <var:o1> = <var:H> \} \end{eqnarray} Allowing executing this program returns : \begin{eqnarray} <var:o0> := <nat:5> ; \\ \{ <var:q> = <var:H> \land <var:o1> = <var:H> \land <var:o0> = <nat:5> \} \\ <var:o1> := <var:o1> * <nat:8> ; \\ \{ <var:q> = <var:H> \land <var:o1> = <nat:8> \times <var:H> \land <var:o0> = <nat:5> \} \\ <var:N> := <var:o1> \\ \{ <var:q> = <var:H> \land <var:o0> = <nat:5> \land <var:N> = <nat:8> \times <var:H> \} \\ <var:N> := <var:N> + <var:o0> \\ \{ <var:q> = <var:H> \land <var:N> = <nat:8> \times <var:H> + <nat:5> \} \end{eqnarray} Applying typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:q> = <var:H> }} <var:o1> := <var:q> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:8> ; <var:N> := <var:o1> <var:N> := <var:N> + <var:o0> {{ <var:N> = <nat:8> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:o1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:o1> = <var:H> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:o1> = <nat:8> * <var:H> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:o0> = <nat:5> /\ <var:N> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:N> = <nat:8> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 