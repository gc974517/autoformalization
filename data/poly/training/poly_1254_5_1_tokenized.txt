\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C1> := <var:E> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:7> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> in \emph{Imp} . Given that $ <var:E> = <var:l> $ ahead of running this segment of code , it holds that we have $ <var:z> = <nat:7> \cdot <var:l> + <nat:8> $ after code terminates . \end{theorem} \begin{proof} The course of logic for our code can be shown with standard Hoare logic . Shifting focus toward the upcoming steps seen in the code segment , we see \begin{eqnarray} \{ <var:E> = <var:l> \} \, <var:C1> := <var:E> \, \{ <var:E> = <var:l> \land <var:C1> = <var:l> \} \\ \{ <var:E> = <var:l> \land <var:C1> = <var:l> \} \, <var:C0> := <nat:8> \, \{ <var:E> = <var:l> \land <var:C1> = <var:l> \land <var:C0> = <nat:8> \} \\ \{ <var:E> = <var:l> \land <var:C1> = <var:l> \land <var:C0> = <nat:8> \} \, <var:C1> := <var:C1> * <nat:7> \, \{ <var:E> = <var:l> \land <var:C1> = <nat:7> \cdot <var:l> \land <var:C0> = <nat:8> \} \\ \{ <var:E> = <var:l> \land <var:C1> = <nat:7> \cdot <var:l> \land <var:C0> = <nat:8> \} \, <var:z> := <var:C1\, \{ <var:E> = <var:l> \land <var:C0> = <nat:8> \land <var:z> = <nat:7> \cdot <var:l> \} \\ \{ <var:E> = <var:l> \land <var:C0> = <nat:8> \land <var:z> = <nat:7> \cdot <var:l> \} \, <var:z> := <var:z> + <var:C0\, \{ <var:E> = <var:l> \land <var:z> = <nat:7> \cdot <var:l> + <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:E> ; <var:C0> := <nat:8> ; <var:C1> := <var:C1> * <nat:7> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:E> = <var:l> }} <def:poly> {{ <var:z> = <nat:7> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:C1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:C1> = <var:l> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:C1> = <nat:7> * <var:l> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:C0> = <nat:8> /\ <var:z> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:l> /\ <var:z> = <nat:7> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 