\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:x0> := <nat:9> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:W> ; <var:x2> := <var:x2> * <var:W> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:W> ; <var:x3> := <var:x3> * <var:W> ; <var:x3> := <var:x3> * <var:W> ; <var:k> := <var:x3> ; <var:k> := <var:k> + <var:x2> ; <var:k> := <var:k> + <var:x0> \end{verbatim} Assuming $ <var:W> = <var:E> $ before executing this set of commands , it must be that $ <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:E> \} \\ <var:x0> := <nat:9> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \} \end{eqnarray} Continuing running this series of commands yields : \begin{eqnarray} <var:x2> := <nat:1> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> \} \\ <var:x2> := <var:x2> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> \} \\ <var:x2> := <var:x2> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \} \\ <var:x3> := <nat:1> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \land <var:x3> = <nat:1> \} \\ <var:x3> := <var:x3> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \land <var:x3> = <nat:1> * <var:E> \} \\ <var:x3> := <var:x3> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \land <var:x3> = <nat:1> * <var:E> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:W> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \land <var:x3> = <nat:1> * <var:E> ^ <nat:3> \} \\ <var:k> := <var:x3> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:x2> = <nat:1> * <var:E> ^ <nat:2> \land <var:k> = <nat:1> * <var:E> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:x2> ; \\ \{ <var:W> = <var:E> \land <var:x0> = <nat:9> \land <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> \} \end{eqnarray} Continuing evaluating our list of instructions results in : \begin{eqnarray} <var:k> := <var:k> + <var:x0> \\ \{ <var:W> = <var:E> \land <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:9> \} \end{eqnarray} Applying usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:W> = <var:E> }} <var:x0> := <nat:9> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:W> ; <var:x2> := <var:x2> * <var:W> ; <var:x3> := <nat:1> ; <var:x3> := <var:x3> * <var:W> ; <var:x3> := <var:x3> * <var:W> ; <var:x3> := <var:x3> * <var:W> ; <var:k> := <var:x3> ; <var:k> := <var:k> + <var:x2> ; <var:k> := <var:k> + <var:x0> {{ <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:x3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:x2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:k> = <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:x0> = <nat:9> /\ <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:E> /\ <var:k> = <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 