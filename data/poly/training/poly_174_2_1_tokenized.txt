\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:1> ; <var:r> := <var:q0> \end{verbatim} Given that we have $ <var:s> = <var:B> $ before interpreting our series of instructions , it must be that $ <var:r> = <nat:1> $ after series of commands has exited . \end{theorem} \begin{proof} The method of proof for the program can be demonstrated using the below decorated set of instructions . \begin{eqnarray} \{ <var:s> = <var:B> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:s> = <var:B> \land <var:q0> = <nat:1> \} \\ <var:r> := <var:q0> \\ \{ <var:s> = <var:B> \land <var:r> = <nat:1> \} \end{eqnarray} Utilizing usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:s> = <var:B> }} <var:q0> := <nat:1> ; <var:r> := <var:q0> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 