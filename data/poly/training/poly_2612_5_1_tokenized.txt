\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:s> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:2> ; <var:A> := <var:g1> <var:A> := <var:A> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Assuming that we have $ <var:s> = <var:y> $ , taking positive coefficients $ <var:y> $ , before executing this series of instructions it holds that $ <var:A> = <nat:2> \times <var:y> + <nat:3> $ when set of instructions finishes . \end{theorem} \begin{proof} Let the following decorated series of instructions . \begin{eqnarray} \{ <var:s> = <var:y> \} \\ <var:g1> := <var:s> ; \\ \{ <var:s> = <var:y> \land <var:g1> = <var:y> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:s> = <var:y> \land <var:g1> = <var:y> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:2> ; \\ \{ <var:s> = <var:y> \land <var:g1> = <nat:2> \times <var:y> \land <var:g0> = <nat:3> \} \\ <var:A> := <var:g1> \\ \{ <var:s> = <var:y> \land <var:g0> = <nat:3> \land <var:A> = <nat:2> \times <var:y> \} \\ <var:A> := <var:A> + <var:g0> \\ \{ <var:s> = <var:y> \land <var:A> = <nat:2> \times <var:y> + <nat:3> \} \end{eqnarray} Using Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g1> := <var:s> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:2> ; <var:A> := <var:g1> <var:A> := <var:A> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:s> = <var:y> }} <def:poly> {{ <var:A> = <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:g1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:g1> = <var:y> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:g1> = <nat:2> * <var:y> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:g0> = <nat:3> /\ <var:A> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:y> /\ <var:A> = <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 