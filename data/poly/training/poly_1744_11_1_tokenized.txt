\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:O1> := <var:U> ; <var:O2> := <var:O1> * <var:U> ; <var:O3> := <var:O2> * <var:U> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:1> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:6> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O2> <var:u> := <var:u> + <var:O1> <var:u> := <var:u> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allowing it to be that $ <var:U> = <var:X> $ prior to the execution of our set of commands , it holds that $ <var:u> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:7> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is shown with Hoare reasoning . Going forward , we have the line \verb | <var:O1> := <var:U> ; | . This moves the condition $ \{ <var:U> = <var:X> \} $ into the condition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \} $ . Paying attention to the proceeding piece of code contained in our list of commands , we see the variable assignmet command \verb | <var:O2> := <var:O1> * <var:U> ; | . This code redefines $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \} $ into $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \} $ . Advancing , we have the assignment statement \verb | <var:O3> := <var:O2> * <var:U> ; | . This code moves the condition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \} $ to the condition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment rule from usual Hoare logic . Focusing on the subsequent piece of code in our segment of code , the binding code \verb | <var:O0> := <nat:2> ; | . This redefines the condition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \} $ into the postcondition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . Moving onward , we see the variable assignmet statement \verb | <var:O1> := <var:O1> * <nat:1> ; | . This transfers the precondition $ \{ <var:U> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ toward $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . Considering the proceeding line found in the series of instructions , we see the variable binding line assigning $ <var:O2> * <nat:7> $ to $ <var:O2>$ . This command moves the precondition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ as the condition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . This is known to be sound through the assignment scheme found in Hoare techniques . Stepping forward , the binding statement \verb | <var:O3> := <var:O3> * <nat:6> ; | . This code advances the condition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ into the postcondition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ . Taking a look at the subsequent statement in our list of instructions , we see the statement assigning $ <var:O3$ into $ <var:u>$ . This moves $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O3> = <nat:6> \times <var:X> ^ <nat:3> \land <var:O0> = <nat:2> \} $ to the condition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> \} $ . Moving forward , we see the variable binding command \verb | <var:u> := <var:u> + <var:O2> | . This line advances $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O2> = <nat:7> \times <var:X> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> \} $ to the postcondition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> \} $ . Going to the next step , we see the environment update code yielding $ <var:u> + <var:O1$ into $ <var:u>$ . This takes the precondition $ \{ <var:U> = <var:X> \land <var:O1> = <nat:1> \times <var:X> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> \} $ toward $ \{ <var:U> = <var:X> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} $ . Taking a look at the next command found in the code segment , the variable binding line \verb | <var:u> := <var:u> + <var:O0> | . This command transfers $ \{ <var:U> = <var:X> \land <var:O0> = <nat:2> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} $ into the postcondition $ \{ <var:U> = <var:X> \land <var:u> = <nat:6> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:U> ; <var:O2> := <var:O1> * <var:U> ; <var:O3> := <var:O2> * <var:U> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:1> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:6> ; <var:u> := <var:O3> <var:u> := <var:u> + <var:O2> <var:u> := <var:u> + <var:O1> <var:u> := <var:u> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:U> = <var:X> }} <def:poly> {{ <var:u> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <nat:1> * <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <nat:1> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <nat:1> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O3> = <nat:6> * <var:X> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <nat:1> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:u> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O1> = <nat:1> * <var:X> /\ <var:O0> = <nat:2> /\ <var:u> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:O0> = <nat:2> /\ <var:u> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:X> /\ <var:u> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 