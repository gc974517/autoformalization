\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:2> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:Z> ; <var:A> := <var:N1> ; <var:A> := <var:A> + <var:N0> \end{verbatim} Assume $ <var:Z> = <var:E> $ before the execution of the list of commands it must be that we see $ <var:A> = <nat:9> \cdot <var:E> + <nat:2> $ after list of instructions exits . \end{theorem} \begin{proof} Proving correctness for this code segment is shown by usual Hoare logic . Shifting focus toward the next bit of code found in our list of instructions , we see the variable assignmet statement \verb | <var:N0> := <nat:2> ; | . This line transfers the condition $ \{ <var:Z> = <var:E> \} $ to $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \} $ . This is shown using the assignment scheme given in standard Hoare logic . Shifting focus toward the next statement contained in our code , we see the variable binding command assigning $ <nat:9> $ toward $ <var:N1>$ . This transfers $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \} $ as the postcondition $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:N1> = <nat:9> \} $ . This is sound with the assignment law found in Hoare techniques . Shifting focus toward the subsequent step seen in our segment of code , we see the variable update line \verb | <var:N1> := <var:N1> * <var:Z> ; | . This statement advances the precondition $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:N1> = <nat:9> \} $ to the postcondition $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:N1> = <nat:9> \times <var:E> \} $ . This is shown to be logically sound by the assignment law given in standard Hoare logic . Immediately after , we have the variable assignmet code \verb | <var:A> := <var:N1> ; | . This takes the condition $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:N1> = <nat:9> \times <var:E> \} $ into $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:A> = <nat:9> \times <var:E> \} $ . Stepping through , we have the variable update command assigning $ <var:A> + <var:N0$ into $ <var:A>$ . This statement takes the precondition $ \{ <var:Z> = <var:E> \land <var:N0> = <nat:2> \land <var:A> = <nat:9> \times <var:E> \} $ as the postcondition $ \{ <var:Z> = <var:E> \land <var:A> = <nat:9> \times <var:E> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Z> = <var:E> }} <var:N0> := <nat:2> ; <var:N1> := <nat:9> ; <var:N1> := <var:N1> * <var:Z> ; <var:A> := <var:N1> ; <var:A> := <var:A> + <var:N0> {{ <var:A> = <nat:9> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:N0> = <nat:2> /\ <var:A> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:A> = <nat:9> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 