\begin{document} \begin{theorem} Define a segment of code as \begin{verbatim} <var:A0> := <nat:3> ; <var:K> := <var:A0> \end{verbatim} Assume , given $ <var:z> \in \mathbb{N} $ , it to hold that $ <var:O> = <var:z> $ prior to interpreting our program it follows that $ <var:K> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is shown using Hoare techniques . Looking at the proceeding command contained in our set of commands , we have the binding statement yielding $ <nat:3> $ as $ <var:A0>$ . This transfers $ \{ <var:O> = <var:z> \} $ to $ \{ <var:O> = <var:z> \land <var:A0> = <nat:3> \} $ . Immediately after , the command \verb | <var:K> := <var:A0> | . This redefines $ \{ <var:O> = <var:z> \land <var:A0> = <nat:3> \} $ as the postcondition $ \{ <var:O> = <var:z> \land <var:K> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:O> = <var:z> }} <var:A0> := <nat:3> ; <var:K> := <var:A0> {{ <var:K> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:K> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 