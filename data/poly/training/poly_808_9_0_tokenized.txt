\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:4> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:C> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:C> ; <var:u2> := <var:u2> * <var:C> ; <var:o> := <var:u2> ; <var:o> := <var:o> + <var:u1> ; <var:o> := <var:o> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allow , given some positive integers $ <var:x> $ , that we have $ <var:C> = <var:x> $ ahead of running our series of instructions then we see $ <var:o> = <nat:6> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> + <nat:4> $ once set of instructions has finished . \end{theorem} \begin{proof} Notice this decorated code segment . \begin{eqnarray} \{ <var:C> = <var:x> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \} \\ <var:u1> := <nat:6> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \} \\ <var:u1> := <var:u1> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \cdot <var:x> \} \\ <var:u2> := <nat:6> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \cdot <var:x> \land <var:u2> = <nat:6> \} \\ <var:u2> := <var:u2> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \cdot <var:x> \land <var:u2> = <nat:6> \cdot <var:x> \} \\ <var:u2> := <var:u2> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \cdot <var:x> \land <var:u2> = <nat:6> \cdot <var:x> ^ <nat:2> \} \\ <var:o> := <var:u2> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:u1> = <nat:6> \cdot <var:x> \land <var:o> = <nat:6> \cdot <var:x> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:u1> ; \\ \{ <var:C> = <var:x> \land <var:u0> = <nat:4> \land <var:o> = <nat:6> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> \} \\ <var:o> := <var:o> + <var:u0> \\ \{ <var:C> = <var:x> \land <var:o> = <nat:6> \cdot <var:x> ^ <nat:2> + <nat:6> \cdot <var:x> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:4> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:C> ; <var:u2> := <nat:6> ; <var:u2> := <var:u2> * <var:C> ; <var:u2> := <var:u2> * <var:C> ; <var:o> := <var:u2> ; <var:o> := <var:o> + <var:u1> ; <var:o> := <var:o> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:o> = <nat:6> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> * <var:x> /\ <var:u2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> * <var:x> /\ <var:u2> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> * <var:x> /\ <var:u2> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:6> * <var:x> /\ <var:o> = <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:u0> = <nat:4> /\ <var:o> = <nat:6> * <var:x> ^ <nat:2> + <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:o> = <nat:6> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 