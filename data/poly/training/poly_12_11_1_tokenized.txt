\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P3> := <var:P2> * <var:p> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:4> ; <var:B> := <var:P3> <var:B> := <var:B> + <var:P2> <var:B> := <var:B> + <var:P1> <var:B> := <var:B> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Allow that $ <var:p> = <var:n> $ ahead of evaluating this code it follows that we have $ <var:B> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:8> $ . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:p> = <var:n> \} \\ <var:P1> := <var:p> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <var:n> \} \end{eqnarray} Allowing evaluating our program gives : \begin{eqnarray} <var:P2> := <var:P1> * <var:p> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <var:n> \land <var:P2> = <var:n> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:p> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <var:n> \land <var:P2> = <var:n> ^ <nat:2> \land <var:P3> = <var:n> ^ <nat:3> \} \\ <var:P0> := <nat:8> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <var:n> \land <var:P2> = <var:n> ^ <nat:2> \land <var:P3> = <var:n> ^ <nat:3> \land <var:P0> = <nat:8> \} \\ <var:P1> := <var:P1> * <nat:2> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <nat:2> \cdot <var:n> \land <var:P2> = <var:n> ^ <nat:2> \land <var:P3> = <var:n> ^ <nat:3> \land <var:P0> = <nat:8> \} \\ <var:P2> := <var:P2> * <nat:3> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <nat:2> \cdot <var:n> \land <var:P2> = <nat:3> \cdot <var:n> ^ <nat:2> \land <var:P3> = <var:n> ^ <nat:3> \land <var:P0> = <nat:8> \} \\ <var:P3> := <var:P3> * <nat:4> ; \\ \{ <var:p> = <var:n> \land <var:P1> = <nat:2> \cdot <var:n> \land <var:P2> = <nat:3> \cdot <var:n> ^ <nat:2> \land <var:P3> = <nat:4> \cdot <var:n> ^ <nat:3> \land <var:P0> = <nat:8> \} \\ <var:B> := <var:P3> \\ \{ <var:p> = <var:n> \land <var:P1> = <nat:2> \cdot <var:n> \land <var:P2> = <nat:3> \cdot <var:n> ^ <nat:2> \land <var:P0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:n> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:P2> \\ \{ <var:p> = <var:n> \land <var:P1> = <nat:2> \cdot <var:n> \land <var:P0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:P1> \\ \{ <var:p> = <var:n> \land <var:P0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> \} \\ <var:B> := <var:B> + <var:P0> \\ \{ <var:p> = <var:n> \land <var:B> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P3> := <var:P2> * <var:p> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:3> ; <var:P3> := <var:P3> * <nat:4> ; <var:B> := <var:P3> <var:B> := <var:B> + <var:P2> <var:B> := <var:B> + <var:P1> <var:B> := <var:B> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:p> = <var:n> }} <def:poly> {{ <var:B> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <var:n> /\ <var:P2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <var:n> /\ <var:P2> = <var:n> ^ <nat:2> /\ <var:P3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <var:n> /\ <var:P2> = <var:n> ^ <nat:2> /\ <var:P3> = <var:n> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <nat:2> * <var:n> /\ <var:P2> = <var:n> ^ <nat:2> /\ <var:P3> = <var:n> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <nat:2> * <var:n> /\ <var:P2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:P3> = <var:n> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <nat:2> * <var:n> /\ <var:P2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:P3> = <nat:4> * <var:n> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <nat:2> * <var:n> /\ <var:P2> = <nat:3> * <var:n> ^ <nat:2> /\ <var:P0> = <nat:8> /\ <var:B> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P1> = <nat:2> * <var:n> /\ <var:P0> = <nat:8> /\ <var:B> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:P0> = <nat:8> /\ <var:B> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:n> /\ <var:B> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 