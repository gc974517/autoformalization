\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:k0> := <nat:8> ; <var:r> := <var:k0> \end{verbatim} Assuming that we have $ <var:p> = <var:s> $ prior to interpreting the code segment it must be that $ <var:r> = <nat:8> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be done using typical Hoare techniques . Following , we see \begin{eqnarray} \{ <var:p> = <var:s> \} \, <var:k0> := <nat:8> \, \{ <var:p> = <var:s> \land <var:k0> = <nat:8> \} \end{eqnarray} Immediately after , we have \begin{eqnarray} \{ <var:p> = <var:s> \} \, <var:k0> := <nat:8> \, \{ <var:p> = <var:s> \land <var:k0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:p> = <var:s> }} <var:k0> := <nat:8> ; <var:r> := <var:k0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 