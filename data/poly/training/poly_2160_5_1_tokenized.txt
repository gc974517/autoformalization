\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:z> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:a> := <var:t1> <var:a> := <var:a> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Given that $ <var:z> = <var:d> $ prior to running the series of commands , it must be that we have $ <var:a> = <nat:3> \cdot <var:d> + <nat:2> $ when list of instructions terminates . \end{theorem} \begin{proof} Proving correctness for our code can be accomplished with Hoare techniques . Following , \[ \begin{tabular} {rcl} \{ <var:z> = <var:d> \} & <var:t1> := <var:z> & \{ <var:z> = <var:d> \land <var:t1> = <var:d> \} \\ \{ <var:z> = <var:d> \land <var:t1> = <var:d> \} & <var:t0> := <nat:2> & \{ <var:z> = <var:d> \land <var:t1> = <var:d> \land <var:t0> = <nat:2> \} \\ \{ <var:z> = <var:d> \land <var:t1> = <var:d> \land <var:t0> = <nat:2> \} & <var:t1> := <var:t1> * <nat:3> & \{ <var:z> = <var:d> \land <var:t1> = <nat:3> \cdot <var:d> \land <var:t0> = <nat:2> \} \\ \{ <var:z> = <var:d> \land <var:t1> = <nat:3> \cdot <var:d> \land <var:t0> = <nat:2> \} & <var:a> := <var:t1& \{ <var:z> = <var:d> \land <var:t0> = <nat:2> \land <var:a> = <nat:3> \cdot <var:d> \} \\ \{ <var:z> = <var:d> \land <var:t0> = <nat:2> \land <var:a> = <nat:3> \cdot <var:d> \} & <var:a> := <var:a> + <var:t0& \{ <var:z> = <var:d> \land <var:a> = <nat:3> \cdot <var:d> + <nat:2> \} \end{tabular} This is shown to be logically sound using the variable binding rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:z> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:a> := <var:t1> <var:a> := <var:a> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:z> = <var:d> }} <def:poly> {{ <var:a> = <nat:3> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:t1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:t1> = <var:d> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:t1> = <nat:3> * <var:d> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:t0> = <nat:2> /\ <var:a> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:a> = <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 