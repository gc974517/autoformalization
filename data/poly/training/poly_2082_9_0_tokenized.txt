\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:4> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:e> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:e> ; <var:x2> := <var:x2> * <var:e> ; <var:i> := <var:x2> ; <var:i> := <var:i> + <var:x1> ; <var:i> := <var:i> + <var:x0> \end{verbatim} Allow ( given every positive integer coefficients $ <var:z> $ ) that $ <var:e> = <var:z> $ ahead of the evaluation of the code segment , then we have $ <var:i> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:z> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \} \\ <var:x1> := <nat:4> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> \} \\ <var:x1> := <var:x1> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> * <var:z> \} \\ <var:x2> := <nat:3> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> * <var:z> \land <var:x2> = <nat:3> \} \\ <var:x2> := <var:x2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> * <var:z> \land <var:x2> = <nat:3> * <var:z> \} \\ <var:x2> := <var:x2> * <var:e> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> * <var:z> \land <var:x2> = <nat:3> * <var:z> ^ <nat:2> \} \\ <var:i> := <var:x2> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:4> * <var:z> \land <var:i> = <nat:3> * <var:z> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:x1> ; \\ \{ <var:e> = <var:z> \land <var:x0> = <nat:4> \land <var:i> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> \} \\ <var:i> := <var:i> + <var:x0> \\ \{ <var:e> = <var:z> \land <var:i> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> \} \end{eqnarray} Given the above , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:e> = <var:z> }} <var:x0> := <nat:4> ; <var:x1> := <nat:4> ; <var:x1> := <var:x1> * <var:e> ; <var:x2> := <nat:3> ; <var:x2> := <var:x2> * <var:e> ; <var:x2> := <var:x2> * <var:e> ; <var:i> := <var:x2> ; <var:i> := <var:i> + <var:x1> ; <var:i> := <var:i> + <var:x0> {{ <var:i> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> * <var:z> /\ <var:x2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> * <var:z> /\ <var:x2> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> * <var:z> /\ <var:x2> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:4> * <var:z> /\ <var:i> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:x0> = <nat:4> /\ <var:i> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:z> /\ <var:i> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 