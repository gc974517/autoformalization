\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:7> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:w> ; <var:o> := <var:a1> ; <var:o> := <var:o> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Given ( for any positive integers $ <var:r> $ ) that we have $ <var:w> = <var:r> $ prior to the execution of this list of instructions it follows that we have $ <var:o> = <nat:8> \times <var:r> + <nat:7> $ once list of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is accomplished using Hoare logic . Going to the next step , we see the variable update code \verb | <var:a0> := <nat:7> ; | . This moves $ \{ <var:w> = <var:r> \} $ into the condition $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \} $ . Honing in on the following statement contained in the series of instructions , we have the code \verb | <var:a1> := <nat:8> ; | . This statement redefines $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \} $ into the postcondition $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> \} $ . This is given with the assignment law defined in standard Hoare reasoning . Honing in on the upcoming step found in our code , we have the variable binding code letting $ <var:a1> * <var:w> $ to $ <var:a1>$ . This code advances $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> \} $ to the condition $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:r> \} $ . This is sound using the assignment rule found in standard Hoare logic . Advancing on , we have the environment update command defining $ <var:a1> $ toward $ <var:o>$ . This forwards the precondition $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:a1> = <nat:8> * <var:r> \} $ to $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:o> = <nat:8> * <var:r> \} $ . This is shown to be logically sound through the assignment law defined in standard Hoare logic . Looking at the following command in the series of instructions , the line \verb | <var:o> := <var:o> + <var:a0> | . This statement moves the condition $ \{ <var:w> = <var:r> \land <var:a0> = <nat:7> \land <var:o> = <nat:8> * <var:r> \} $ into the condition $ \{ <var:w> = <var:r> \land <var:o> = <nat:8> * <var:r> + <nat:7> \} $ . This is shown with the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a0> := <nat:7> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:w> ; <var:o> := <var:a1> ; <var:o> := <var:o> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:w> = <var:r> }} <def:poly> {{ <var:o> = <nat:8> * <var:r> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:a0> = <nat:7> /\ <var:a1> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:a0> = <nat:7> /\ <var:o> = <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:o> = <nat:8> * <var:r> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 