\begin{document} \begin{theorem} We define the following set of instructions : \begin{verbatim} <var:g0> := <nat:1> ; <var:Q> := <var:g0> \end{verbatim} Allow that $ <var:m> = <var:L> $ prior to running this series of commands then $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Observe that the below decorated code segment . \begin{eqnarray} \{ <var:m> = <var:L> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:m> = <var:L> \land <var:g0> = <nat:1> \} \\ <var:Q> := <var:g0> \\ \{ <var:m> = <var:L> \land <var:Q> = <nat:1> \} \end{eqnarray} The application of usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:m> = <var:L> }} <var:g0> := <nat:1> ; <var:Q> := <var:g0> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:L> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 