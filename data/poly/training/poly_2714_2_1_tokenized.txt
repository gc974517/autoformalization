\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:2> ; <var:h> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:e> = <var:P> $ for any positive numbers $ <var:P> $ ahead of interpreting our segment of code it holds that we see $ <var:h> = <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the code is evident with typical Hoare reasoning . Moving on , the environment update code letting $ <nat:2> $ into $ <var:H0>$ . This transfers $ \{ <var:e> = <var:P> \} $ toward $ \{ <var:e> = <var:P> \land <var:H0> = <nat:2> \} $ . Moving on to the next step , we have the binding code letting $ <var:H0$ to $ <var:h>$ . This command forwards the precondition $ \{ <var:e> = <var:P> \land <var:H0> = <nat:2> \} $ into $ \{ <var:e> = <var:P> \land <var:h> = <nat:2> \} $ . This is deduced through the assignment inference rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:h> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:e> = <var:P> }} <def:poly> {{ <var:h> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:h> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 