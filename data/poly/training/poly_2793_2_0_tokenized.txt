\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:1> ; <var:D> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Given it to be that $ <var:R> = <var:k> $ ahead of the execution of our code then we see $ <var:D> = <nat:1> $ . \end{theorem} \begin{proof} Observe that this decorated series of instructions . \begin{eqnarray} \{ <var:R> = <var:k> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:R> = <var:k> \land <var:N0> = <nat:1> \} \\ <var:D> := <var:N0> \\ \{ <var:R> = <var:k> \land <var:D> = <nat:1> \} \end{eqnarray} The application of Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:1> ; <var:D> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <def:poly> {{ <var:D> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:D> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 