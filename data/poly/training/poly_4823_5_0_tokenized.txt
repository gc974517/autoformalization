\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:9> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:y> ; <var:G> := <var:P1> ; <var:G> := <var:G> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:y> = <var:g> $ prior to executing our code segment then we have $ <var:G> = <nat:4> \times <var:g> + <nat:9> $ once code finishes . \end{theorem} \begin{proof} The argument for our series of commands is demonstrated through Hoare reasoning . Advancing , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:g> \} & <var:P0> := <nat:9> & \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \} \end{tabular} Next , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:g> \} & <var:P0> := <nat:9> & \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \} \\ \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \} & <var:P1> := <nat:4> & \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \land <var:P1> = <nat:4> \} \\ \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \land <var:P1> = <nat:4> \} & <var:P1> := <var:P1> * <var:y> & \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \land <var:P1> = <nat:4> \times <var:g> \} \end{tabular} This is sound through the environment update scheme of typical Hoare logic . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:y> = <var:g> \} & <var:P0> := <nat:9> & \{ <var:y> = <var:g> \land <var:P0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:9> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:y> ; <var:G> := <var:P1> ; <var:G> := <var:G> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:y> = <var:g> }} <def:poly> {{ <var:G> = <nat:4> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:P0> = <nat:9> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:P0> = <nat:9> /\ <var:P1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:P0> = <nat:9> /\ <var:G> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:G> = <nat:4> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 