\begin{document} \begin{theorem} Define a set of instructions : \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:4> + <var:y> * <var:Q> ; <var:y> := <nat:2> + <var:y> * <var:Q> ; <var:y> := <var:y> * <var:Q> ; <var:y> := <nat:2> + <var:y> * <var:Q> ; <var:y> := <var:y> * <var:Q> ; <var:y> := <nat:1> + <var:y> * <var:Q> \end{verbatim} Given taking positive coefficients $ <var:T> $ it to be that $ <var:Q> = <var:T> $ ahead of evaluating the segment of code , it holds that we have $ <var:y> = <nat:3> \times <var:T> ^ <nat:6> + <nat:4> \times <var:T> ^ <nat:5> + <nat:2> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:2> + <nat:1> $ after code exits . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:Q> = <var:T> \} \\ <var:y> := <nat:3> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> \} \\ <var:y> := <nat:4> + <var:y> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> + <nat:4> \} \\ <var:y> := <nat:2> + <var:y> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> \} \\ <var:y> := <var:y> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + \} \\ <var:y> := <nat:2> + <var:y> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:2> \} \\ <var:y> := <var:y> * <var:Q> ; \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + \} \\ <var:y> := <nat:1> + <var:y> * <var:Q> \\ \{ <var:Q> = <var:T> \land <var:y> = <nat:3> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> \} \end{eqnarray} As a consequence , our series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Q> = <var:T> }} <var:y> := <nat:3> ; <var:y> := <nat:4> + <var:y> * <var:Q> ; <var:y> := <nat:2> + <var:y> * <var:Q> ; <var:y> := <var:y> * <var:Q> ; <var:y> := <nat:2> + <var:y> * <var:Q> ; <var:y> := <var:y> * <var:Q> ; <var:y> := <nat:1> + <var:y> * <var:Q> {{ <var:y> = <nat:3> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:T> /\ <var:y> = <nat:3> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 