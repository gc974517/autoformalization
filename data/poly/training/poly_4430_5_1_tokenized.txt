\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:n1> := <var:Y> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:7> ; <var:y> := <var:n1> <var:y> := <var:y> + <var:n0> \end{verbatim} Given it to hold that $ <var:Y> = <var:f> $ before evaluating this program then we see $ <var:y> = <nat:7> \cdot <var:f> + <nat:6> $ when series of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is given through usual Hoare reasoning . Honing in on the proceeding pieces of code contained in the series of instructions , \verb | { <var:Y> = <var:f> } <var:n1> := <var:Y> { <var:Y> = <var:f> \land <var:n1> = <var:f> } | , \verb | { <var:Y> = <var:f> \land <var:n1> = <var:f> } <var:n0> := <nat:6> { <var:Y> = <var:f> \land <var:n1> = <var:f> \land <var:n0> = <nat:6> } | and \verb | { <var:Y> = <var:f> \land <var:n1> = <var:f> \land <var:n0> = <nat:6> } <var:n1> := <var:n1> * <nat:7> { <var:Y> = <var:f> \land <var:n1> = <nat:7> \times <var:f> \land <var:n0> = <nat:6> } | . This is shown by the assignment law in Hoare reasoning . Moving forward to the next step , we see \verb | { <var:Y> = <var:f> } <var:n1> := <var:Y> { <var:Y> = <var:f> \land <var:n1> = <var:f> } | . This is rigorously given using the assignment rule found in usual Hoare reasoning . Advancing to the next step , we have \verb | { <var:Y> = <var:f> } <var:n1> := <var:Y> { <var:Y> = <var:f> \land <var:n1> = <var:f> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Y> = <var:f> }} <var:n1> := <var:Y> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:7> ; <var:y> := <var:n1> <var:y> := <var:y> + <var:n0> {{ <var:y> = <nat:7> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:n1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:n1> = <var:f> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:n1> = <nat:7> * <var:f> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:n0> = <nat:6> /\ <var:y> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:f> /\ <var:y> = <nat:7> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 