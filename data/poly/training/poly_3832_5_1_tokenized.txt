\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:b> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:8> ; <var:v> := <var:w1> <var:v> := <var:v> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:b> = <var:O> $ given every positive integer coefficients $ <var:O> $ ahead of running this program it holds that $ <var:v> = <nat:8> \cdot <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is accomplished with usual Hoare reasoning . Moving on , \begin{eqnarray} \{ <var:b> = <var:O> \} \, <var:w1> := <var:b> \, \{ <var:b> = <var:O> \land <var:w1> = <var:O> \} \\ \{ <var:b> = <var:O> \land <var:w1> = <var:O> \} \, <var:w0> := <nat:3> \, \{ <var:b> = <var:O> \land <var:w1> = <var:O> \land <var:w0> = <nat:3> \} \\ \{ <var:b> = <var:O> \land <var:w1> = <var:O> \land <var:w0> = <nat:3> \} \, <var:w1> := <var:w1> * <nat:8> \, \{ <var:b> = <var:O> \land <var:w1> = <nat:8> \times <var:O> \land <var:w0> = <nat:3> \} \\ \{ <var:b> = <var:O> \land <var:w1> = <nat:8> \times <var:O> \land <var:w0> = <nat:3> \} \, <var:v> := <var:w1\, \{ <var:b> = <var:O> \land <var:w0> = <nat:3> \land <var:v> = <nat:8> \times <var:O> \} \end{eqnarray} This is shown by the variable binding inference rule from usual Hoare reasoning . Moving forward to the subsequent command seen in the list of instructions , \begin{eqnarray} \{ <var:b> = <var:O> \} \, <var:w1> := <var:b> \, \{ <var:b> = <var:O> \land <var:w1> = <var:O> \} \end{eqnarray} This is guaranteed using the law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:b> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:8> ; <var:v> := <var:w1> <var:v> := <var:v> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <def:poly> {{ <var:v> = <nat:8> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:w1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:w1> = <var:O> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:w1> = <nat:8> * <var:O> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:w0> = <nat:3> /\ <var:v> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:v> = <nat:8> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 