\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:9> ; <var:x> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Allowing for positive integers $ <var:y> $ $ <var:D> = <var:y> $ before evaluating our code , it must be that we have $ <var:x> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is given with standard Hoare logic . Moving on to the next bit of code found in our code segment , we have the variable update line \verb | <var:J0> := <nat:9> ; | . This statement forwards $ \{ <var:D> = <var:y> \} $ as the condition $ \{ <var:D> = <var:y> \land <var:J0> = <nat:9> \} $ . This is deduced through the assignment rule found in usual Hoare techniques . After , we have the assignment code \verb | <var:x> := <var:J0> | . This transfers the condition $ \{ <var:D> = <var:y> \land <var:J0> = <nat:9> \} $ as $ \{ <var:D> = <var:y> \land <var:x> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:x> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <def:poly> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 