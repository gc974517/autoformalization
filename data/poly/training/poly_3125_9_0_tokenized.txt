\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:p> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:p> ; <var:a2> := <var:a2> * <var:p> ; <var:f> := <var:a2> ; <var:f> := <var:f> + <var:a1> ; <var:f> := <var:f> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:p> = <var:C> $ , for all natural coefficients $ <var:C> $ , prior to executing our list of commands , then we see $ <var:f> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> $ once list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:C> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \} \\ <var:a1> := <nat:4> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} \\ <var:a1> := <var:a1> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \} \\ <var:a2> := <nat:4> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:4> \} \\ <var:a2> := <var:a2> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:4> \cdot <var:C> \} \\ <var:a2> := <var:a2> * <var:p> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:a2> = <nat:4> \cdot <var:C> ^ <nat:2> \} \\ <var:f> := <var:a2> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:C> \land <var:f> = <nat:4> \cdot <var:C> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:a1> ; \\ \{ <var:p> = <var:C> \land <var:a0> = <nat:4> \land <var:f> = <nat:4> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> \} \\ <var:f> := <var:f> + <var:a0> \\ \{ <var:p> = <var:C> \land <var:f> = <nat:4> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:p> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:p> ; <var:a2> := <var:a2> * <var:p> ; <var:f> := <var:a2> ; <var:f> := <var:f> + <var:a1> ; <var:f> := <var:f> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:p> = <var:C> }} <def:poly> {{ <var:f> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:a2> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:C> /\ <var:f> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:a0> = <nat:4> /\ <var:f> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:C> /\ <var:f> = <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 