\begin{document} \begin{theorem} Take the following list of commands as \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> \end{verbatim} Assuming ( for every positive integers $ <var:k> $ ) that we have $ <var:u> = <var:k> $ before running our code segment , it holds that we see $ <var:i> = <nat:2> \cdot <var:k> ^ <nat:8> + <nat:4> \cdot <var:k> ^ <nat:7> + <nat:3> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:2> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:2> $ after code segment has terminated . \end{theorem} \begin{proof} The method of proof for our segment of code is clear using typical Hoare techniques . Moving onward , we see the variable binding command \verb | <var:i> := <nat:2> ; | . This code redefines the precondition $ \{ <var:u> = <var:k> \} $ toward $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \} $ . Taking another step toward the upcoming line of code found in our code segment , we have the variable binding line defining $ <nat:4> + <var:i> * <var:u> $ toward $ <var:i>$ . This command moves the precondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> + <nat:4> \} $ . Following , the environment update line \verb | <var:i> := <nat:3> + <var:i> * <var:u> ; | . This line moves the precondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> + <nat:4> \} $ as the condition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ . Focusing on the upcoming line found in the code , we see the assignment statement yielding $ <nat:4> + <var:i> * <var:u> $ toward $ <var:i>$ . This takes $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ as $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:4> \} $ . This is rigorously given using the assignment inference rule given in typical Hoare techniques . Now , the environment update code defining $ <nat:3> + <var:i> * <var:u> $ into $ <var:i>$ . This takes $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:4> \} $ toward the postcondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ . Moving on , we see the variable update command \verb | <var:i> := <nat:2> + <var:i> * <var:u> ; | . This code forwards the condition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ as the condition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:2> \} $ . Taking a look at the subsequent piece of code contained in the series of instructions , we have the environment update code \verb | <var:i> := <nat:4> + <var:i> * <var:u> ; | . This line forwards the precondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:2> \} $ toward $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} $ . This is given using the assignment rule given in typical Hoare techniques . Moving forward , the variable assignmet code \verb | <var:i> := <nat:2> + <var:i> * <var:u> ; | . This moves the precondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} $ to $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:7> + <nat:4> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:2> \} $ . This is rigorously given with the assignment law in usual Hoare logic . Going to the next step , the binding line \verb | <var:i> := <nat:2> + <var:i> * <var:u> | . This command redefines the precondition $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:7> + <nat:4> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:2> \} $ into $ \{ <var:u> = <var:k> \land <var:i> = <nat:2> \cdot <var:k> ^ <nat:8> + <nat:4> \cdot <var:k> ^ <nat:7> + <nat:3> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:2> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:2> \} $ . This is deduced by the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:u> = <var:k> }} <var:i> := <nat:2> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:3> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:4> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> ; <var:i> := <nat:2> + <var:i> * <var:u> {{ <var:i> = <nat:2> * <var:k> ^ <nat:8> + <nat:4> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:k> /\ <var:i> = <nat:2> * <var:k> ^ <nat:8> + <nat:4> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 