\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:J> ; <var:L0> := <nat:8> ; <var:L1> := <var:L1> * <nat:5> ; <var:r> := <var:L1> <var:r> := <var:r> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Allowing --- given every whole numbers $ <var:D> $ --- $ <var:J> = <var:D> $ ahead of interpreting our segment of code it follows that $ <var:r> = <nat:5> \cdot <var:D> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:J> = <var:D> \} \\ <var:L1> := <var:J> ; \\ \{ <var:J> = <var:D> \land <var:L1> = <var:D> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:J> = <var:D> \land <var:L1> = <var:D> \land <var:L0> = <nat:8> \} \\ <var:L1> := <var:L1> * <nat:5> ; \\ \{ <var:J> = <var:D> \land <var:L1> = <nat:5> \times <var:D> \land <var:L0> = <nat:8> \} \\ <var:r> := <var:L1> \\ \{ <var:J> = <var:D> \land <var:L0> = <nat:8> \land <var:r> = <nat:5> \times <var:D> \} \\ <var:r> := <var:r> + <var:L0> \\ \{ <var:J> = <var:D> \land <var:r> = <nat:5> \times <var:D> + <nat:8> \} \end{eqnarray} Therefore , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:J> ; <var:L0> := <nat:8> ; <var:L1> := <var:L1> * <nat:5> ; <var:r> := <var:L1> <var:r> := <var:r> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:J> = <var:D> }} <def:poly> {{ <var:r> = <nat:5> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:L1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:L1> = <var:D> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:L0> = <nat:8> /\ <var:r> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:r> = <nat:5> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 