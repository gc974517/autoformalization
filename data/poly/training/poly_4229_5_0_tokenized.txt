\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:6> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:C> ; <var:a> := <var:K1> ; <var:a> := <var:a> + <var:K0> \end{verbatim} Assuming $ <var:C> = <var:t> $ before executing the series of commands then $ <var:a> = <nat:3> * <var:t> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is demonstrated through usual Hoare logic . Advancing to the next step , we see the variable binding line binding $ <nat:6> $ into $ <var:K0>$ . This forwards the precondition $ \{ <var:C> = <var:t> \} $ into $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \} $ . Now , we see the binding statement \verb | <var:K1> := <nat:3> ; | . This forwards the precondition $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \} $ toward the postcondition $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:K1> = <nat:3> \} $ . Focusing on the next line of code found in the series of commands , we see the variable binding command defining $ <var:K1> * <var:C> $ toward $ <var:K1>$ . This line forwards the condition $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:K1> = <nat:3> \} $ to the condition $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:K1> = <nat:3> * <var:t> \} $ . After , the assignment statement defining $ <var:K1> $ toward $ <var:a>$ . This transfers $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:K1> = <nat:3> * <var:t> \} $ into $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:a> = <nat:3> * <var:t> \} $ . This is known to be sound by the assignment law found in Hoare reasoning . Immediately following , we see the code yielding $ <var:a> + <var:K0$ as $ <var:a>$ . This moves the precondition $ \{ <var:C> = <var:t> \land <var:K0> = <nat:6> \land <var:a> = <nat:3> * <var:t> \} $ into the postcondition $ \{ <var:C> = <var:t> \land <var:a> = <nat:3> * <var:t> + <nat:6> \} $ . This is rigorously given using the assignment law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:C> = <var:t> }} <var:K0> := <nat:6> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:C> ; <var:a> := <var:K1> ; <var:a> := <var:a> + <var:K0> {{ <var:a> = <nat:3> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:K0> = <nat:6> /\ <var:K1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:K0> = <nat:6> /\ <var:a> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:t> /\ <var:a> = <nat:3> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 