\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:p> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:8> ; <var:e> := <var:s1> <var:e> := <var:e> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:p> = <var:Y> $ prior to running this series of instructions , it must be that we have $ <var:e> = <nat:8> * <var:Y> + <nat:6> $ once list of instructions is done . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:Y> \} \\ <var:s1> := <var:p> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <var:Y> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <var:Y> \land <var:s0> = <nat:6> \} \\ <var:s1> := <var:s1> * <nat:8> ; \\ \{ <var:p> = <var:Y> \land <var:s1> = <nat:8> * <var:Y> \land <var:s0> = <nat:6> \} \\ <var:e> := <var:s1> \\ \{ <var:p> = <var:Y> \land <var:s0> = <nat:6> \land <var:e> = <nat:8> * <var:Y> \} \\ <var:e> := <var:e> + <var:s0> \\ \{ <var:p> = <var:Y> \land <var:e> = <nat:8> * <var:Y> + <nat:6> \} \end{eqnarray} Using standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s1> := <var:p> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:8> ; <var:e> := <var:s1> <var:e> := <var:e> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:p> = <var:Y> }} <def:poly> {{ <var:e> = <nat:8> * <var:Y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <var:Y> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s1> = <nat:8> * <var:Y> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:s0> = <nat:6> /\ <var:e> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Y> /\ <var:e> = <nat:8> * <var:Y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 