\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:Y1> := <var:m> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:E> := <var:Y1> <var:E> := <var:E> + <var:Y0> \end{verbatim} Allowing that $ <var:m> = <var:y> $ letting positive coefficients $ <var:y> $ prior to the evaluation of this segment of code , it must be that we have $ <var:E> = <nat:2> * <var:y> + <nat:2> $ when list of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:y> \} \\ <var:Y1> := <var:m> ; \\ \{ <var:m> = <var:y> \land <var:Y1> = <var:y> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:m> = <var:y> \land <var:Y1> = <var:y> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <var:Y1> * <nat:2> ; \\ \{ <var:m> = <var:y> \land <var:Y1> = <nat:2> \times <var:y> \land <var:Y0> = <nat:2> \} \\ <var:E> := <var:Y1> \\ \{ <var:m> = <var:y> \land <var:Y0> = <nat:2> \land <var:E> = <nat:2> \times <var:y> \} \\ <var:E> := <var:E> + <var:Y0> \\ \{ <var:m> = <var:y> \land <var:E> = <nat:2> \times <var:y> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <var:Y1> := <var:m> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:E> := <var:Y1> <var:E> := <var:E> + <var:Y0> {{ <var:E> = <nat:2> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:Y1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:Y1> = <nat:2> * <var:y> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:Y0> = <nat:2> /\ <var:E> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:E> = <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 