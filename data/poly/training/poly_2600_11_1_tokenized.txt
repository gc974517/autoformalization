\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:a1> := <var:C> ; <var:a2> := <var:a1> * <var:C> ; <var:a3> := <var:a2> * <var:C> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:1> ; <var:H> := <var:a3> <var:H> := <var:H> + <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> \end{verbatim} Allow , given any positive integers $ <var:P> $ , that we have $ <var:C> = <var:P> $ prior to running the set of commands it must be that we have $ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic yields : \begin{eqnarray} \{ <var:C> = <var:P> \} \\ <var:a1> := <var:C> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <var:P> \} \\ <var:a2> := <var:a1> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <var:P> \land <var:a2> = <var:P> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <var:P> \land <var:a2> = <var:P> ^ <nat:2> \land <var:a3> = <var:P> ^ <nat:3> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <var:P> \land <var:a2> = <var:P> ^ <nat:2> \land <var:a3> = <var:P> ^ <nat:3> \land <var:a0> = <nat:7> \} \\ <var:a1> := <var:a1> * <nat:8> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <nat:8> * <var:P> \land <var:a2> = <var:P> ^ <nat:2> \land <var:a3> = <var:P> ^ <nat:3> \land <var:a0> = <nat:7> \} \\ <var:a2> := <var:a2> * <nat:2> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <nat:8> * <var:P> \land <var:a2> = <nat:2> * <var:P> ^ <nat:2> \land <var:a3> = <var:P> ^ <nat:3> \land <var:a0> = <nat:7> \} \\ <var:a3> := <var:a3> * <nat:1> ; \\ \{ <var:C> = <var:P> \land <var:a1> = <nat:8> * <var:P> \land <var:a2> = <nat:2> * <var:P> ^ <nat:2> \land <var:a3> = <nat:1> * <var:P> ^ <nat:3> \land <var:a0> = <nat:7> \} \\ <var:H> := <var:a3> \\ \{ <var:C> = <var:P> \land <var:a1> = <nat:8> * <var:P> \land <var:a2> = <nat:2> * <var:P> ^ <nat:2> \land <var:a0> = <nat:7> \land <var:H> = <nat:1> * <var:P> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:a2> \\ \{ <var:C> = <var:P> \land <var:a1> = <nat:8> * <var:P> \land <var:a0> = <nat:7> \land <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:a1> \\ \{ <var:C> = <var:P> \land <var:a0> = <nat:7> \land <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> \} \\ <var:H> := <var:H> + <var:a0> \\ \{ <var:C> = <var:P> \land <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> \} \end{eqnarray} Considering the preceding argument , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <var:a1> := <var:C> ; <var:a2> := <var:a1> * <var:C> ; <var:a3> := <var:a2> * <var:C> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:1> ; <var:H> := <var:a3> <var:H> := <var:H> + <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> {{ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <var:P> /\ <var:a2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <var:P> /\ <var:a2> = <var:P> ^ <nat:2> /\ <var:a3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <var:P> /\ <var:a2> = <var:P> ^ <nat:2> /\ <var:a3> = <var:P> ^ <nat:3> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <nat:8> * <var:P> /\ <var:a2> = <var:P> ^ <nat:2> /\ <var:a3> = <var:P> ^ <nat:3> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <nat:8> * <var:P> /\ <var:a2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:a3> = <var:P> ^ <nat:3> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <nat:8> * <var:P> /\ <var:a2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:a3> = <nat:1> * <var:P> ^ <nat:3> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <nat:8> * <var:P> /\ <var:a2> = <nat:2> * <var:P> ^ <nat:2> /\ <var:a0> = <nat:7> /\ <var:H> = <nat:1> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a1> = <nat:8> * <var:P> /\ <var:a0> = <nat:7> /\ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:a0> = <nat:7> /\ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:H> = <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 