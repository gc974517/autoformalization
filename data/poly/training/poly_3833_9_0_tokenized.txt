\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:C> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:C> ; <var:S2> := <var:S2> * <var:C> ; <var:R> := <var:S2> ; <var:R> := <var:R> + <var:S1> ; <var:R> := <var:R> + <var:S0> \end{verbatim} Given $ <var:C> = <var:V> $ , for any positive integers $ <var:V> $ , prior to interpreting our list of instructions , it must be that $ <var:R> = <nat:8> \cdot <var:V> ^ <nat:2> + <nat:5> \cdot <var:V> + <nat:9> $ once program is done executing . \end{theorem} \begin{proof} The course of logic for the list of commands can be shown using usual Hoare reasoning . Immediately following , the binding line \verb | <var:S0> := <nat:9> ; | . This takes $ \{ <var:C> = <var:V> \} $ into the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \} $ . Jumping to the next line in our series of commands , the environment update code \verb | <var:S1> := <nat:5> ; | . This transfers the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \} $ toward $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> \} $ . Moving on , the variable update code binding $ <var:S1> * <var:C> $ as $ <var:S1>$ . This moves the precondition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> \} $ into $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \} $ . Next , we see the assignment command letting $ <nat:8> $ as $ <var:S2>$ . This command takes the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \} $ toward $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> \} $ . This is shown by the assignment inference rule from Hoare reasoning . Shifting focus toward the next line of code contained in our code segment , the variable assignmet statement defining $ <var:S2> * <var:C> $ into $ <var:S2>$ . This takes the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> \} $ into the postcondition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> * <var:V> \} $ . This is known to be sound with the assignment scheme given by usual Hoare reasoning . Advancing to the upcoming bit of code in the series of instructions , the assignment statement yielding $ <var:S2> * <var:C> $ to $ <var:S2>$ . This command transfers $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> * <var:V> \} $ to the postcondition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> * <var:V> ^ <nat:2> \} $ . This is rigorously given with the assignment law in Hoare logic . Following , we have the variable assignmet code binding $ <var:S2> $ into $ <var:R>$ . This transfers the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:S2> = <nat:8> * <var:V> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:R> = <nat:8> * <var:V> ^ <nat:2> \} $ . After , we see the assignment command defining $ <var:R> + <var:S1> $ into $ <var:R>$ . This takes the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:S1> = <nat:5> * <var:V> \land <var:R> = <nat:8> * <var:V> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> \} $ . This is rigorously given using the assignment scheme defined by Hoare logic . Following , the variable assignmet line \verb | <var:R> := <var:R> + <var:S0> | . This line forwards the condition $ \{ <var:C> = <var:V> \land <var:S0> = <nat:9> \land <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> \} $ to the postcondition $ \{ <var:C> = <var:V> \land <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:C> = <var:V> }} <var:S0> := <nat:9> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:C> ; <var:S2> := <nat:8> ; <var:S2> := <var:S2> * <var:C> ; <var:S2> := <var:S2> * <var:C> ; <var:R> := <var:S2> ; <var:R> := <var:R> + <var:S1> ; <var:R> := <var:R> + <var:S0> {{ <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:V> /\ <var:S2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:V> /\ <var:S2> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:V> /\ <var:S2> = <nat:8> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:5> * <var:V> /\ <var:R> = <nat:8> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:S0> = <nat:9> /\ <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:V> /\ <var:R> = <nat:8> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 