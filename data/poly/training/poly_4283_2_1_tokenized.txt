\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:4> ; <var:F> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:s> = <var:u> $ given natural numbers $ <var:u> $ before executing our list of instructions , it follows that $ <var:F> = <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:s> = <var:u> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:s> = <var:u> \land <var:i0> = <nat:4> \} \\ <var:F> := <var:i0> \\ \{ <var:s> = <var:u> \land <var:F> = <nat:4> \} \end{eqnarray} Thus , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:F> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:s> = <var:u> }} <def:poly> {{ <var:F> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:u> /\ <var:F> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 