\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:6> ; <var:u> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:J> = <var:n> $ --- for some $ <var:n> \in \mathbb{Z}^+ $ --- ahead of evaluating this code segment , it holds that we have $ <var:u> = <nat:6> $ when series of instructions finishes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is shown by standard Hoare logic . Stepping forward , we have the binding line \verb | <var:r0> := <nat:6> ; | . This forwards the condition $ \{ <var:J> = <var:n> \} $ as the condition $ \{ <var:J> = <var:n> \land <var:r0> = <nat:6> \} $ . Now , we see the code \verb | <var:u> := <var:r0> | . This advances the condition $ \{ <var:J> = <var:n> \land <var:r0> = <nat:6> \} $ to $ \{ <var:J> = <var:n> \land <var:u> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:6> ; <var:u> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:J> = <var:n> }} <def:poly> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 