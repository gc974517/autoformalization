\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:4> + <var:D> * <var:Y> ; <var:D> := <var:D> * <var:Y> ; <var:D> := <nat:3> + <var:D> * <var:Y> ; <var:D> := <var:D> * <var:Y> ; <var:D> := <nat:2> + <var:D> * <var:Y> ; <var:D> := <nat:2> + <var:D> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allow it to hold that $ <var:Y> = <var:k> $ ahead of the evaluation of this set of commands , it holds that we see $ <var:D> = <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the set of instructions is demonstrated through typical Hoare reasoning . Stepping forward , we see the variable assignmet code letting $ <nat:1> $ as $ <var:D>$ . This line moves the condition $ \{ <var:Y> = <var:k> \} $ into the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \} $ . Considering the subsequent bit of code contained in our code , we see the binding line binding $ <nat:4> + <var:D> * <var:Y> $ toward $ <var:D>$ . This transfers the precondition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \} $ to the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> + <nat:4> \} $ . This is deduced by the assignment scheme found in usual Hoare reasoning . Advancing to the next step , the environment update line \verb | <var:D> := <var:D> * <var:Y> ; | . This line transfers the precondition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> + <nat:4> \} $ as the postcondition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + \} $ . Moving on to the subsequent command in the list of commands , the environment update code defining $ <nat:3> + <var:D> * <var:Y> $ toward $ <var:D>$ . This command moves the precondition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + \} $ to the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \} $ . Paying attention to the subsequent step found in our list of instructions , we have the variable assignmet statement defining $ <var:D> * <var:Y> $ toward $ <var:D>$ . This redefines the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \} $ as the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> + \} $ . Honing in on the upcoming bit of code seen in the set of commands , we have the variable update statement yielding $ <nat:2> + <var:D> * <var:Y> $ as $ <var:D>$ . This command advances the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> + \} $ to the condition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:5> + <nat:4> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \} $ . Stepping through , the environment update command defining $ <nat:2> + <var:D> * <var:Y$ toward $ <var:D>$ . This advances the precondition $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:5> + <nat:4> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \} $ to $ \{ <var:Y> = <var:k> \land <var:D> = <nat:1> \times <var:k> ^ <nat:6> + <nat:4> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:4> + <var:D> * <var:Y> ; <var:D> := <var:D> * <var:Y> ; <var:D> := <nat:3> + <var:D> * <var:Y> ; <var:D> := <var:D> * <var:Y> ; <var:D> := <nat:2> + <var:D> * <var:Y> ; <var:D> := <nat:2> + <var:D> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Y> = <var:k> }} <def:poly> {{ <var:D> = <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:k> /\ <var:D> = <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 