\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:t> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:t> ; <var:H2> := <var:H2> * <var:t> ; <var:f> := <var:H2> ; <var:f> := <var:f> + <var:H1> ; <var:f> := <var:f> + <var:H0> \end{verbatim} Assume that we have $ <var:t> = <var:u> $ , for every $ <var:u> $ , ahead of running our code it follows that we have $ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> $ when series of commands terminates . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be given using typical Hoare techniques . Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:u> \} & <var:H0> := <nat:1> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \} & <var:H1> := <nat:2> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \} & <var:H1> := <var:H1> * <var:t> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \} & <var:H2> := <nat:1> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \land <var:H2> = <nat:1> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \land <var:H2> = <nat:1> \} & <var:H2> := <var:H2> * <var:t> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \land <var:H2> = <nat:1> \times <var:u> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \land <var:H2> = <nat:1> \times <var:u> \} & <var:H2> := <var:H2> * <var:t> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \times <var:u> \land <var:H2> = <nat:1> \times <var:u> ^ <nat:2> \} \end{tabular} This is deduced through the variable binding law defined by Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:u> \} & <var:H0> := <nat:1> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \} \end{tabular} Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:u> \} & <var:H0> := <nat:1> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \} \\ \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \} & <var:H1> := <nat:2> & \{ <var:t> = <var:u> \land <var:H0> = <nat:1> \land <var:H1> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:t> = <var:u> }} <var:H0> := <nat:1> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:t> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:t> ; <var:H2> := <var:H2> * <var:t> ; <var:f> := <var:H2> ; <var:f> := <var:f> + <var:H1> ; <var:f> := <var:f> + <var:H0> {{ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:u> /\ <var:H2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:u> /\ <var:H2> = <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:u> /\ <var:H2> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:2> * <var:u> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:H0> = <nat:1> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:u> /\ <var:f> = <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 