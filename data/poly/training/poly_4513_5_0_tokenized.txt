\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:2> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:J> ; <var:G> := <var:r1> ; <var:G> := <var:G> + <var:r0> \end{verbatim} Allowing given $ <var:V> \in \mathbb{N} $ it to hold that $ <var:J> = <var:V> $ before the evaluation of this list of commands , it holds that we see $ <var:G> = <nat:2> * <var:V> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the set of instructions is accomplished with Hoare techniques . Moving on to the upcoming commands seen in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:V> \} & <var:r0> := <nat:2> & \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \} \\ \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \} & <var:r1> := <nat:2> & \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \land <var:r1> = <nat:2> \} \\ \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \land <var:r1> = <nat:2> \} & <var:r1> := <var:r1> * <var:J> & \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \land <var:r1> = <nat:2> \cdot <var:V> \} \\ \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \land <var:r1> = <nat:2> \cdot <var:V> \} & <var:G> := <var:r1> & \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \land <var:G> = <nat:2> \cdot <var:V> \} \end{tabular} This is deduced through the variable assignmet inference rule obtained from standard Hoare reasoning . Paying attention to the upcoming statement in the code , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:V> \} & <var:r0> := <nat:2> & \{ <var:J> = <var:V> \land <var:r0> = <nat:2> \} \end{tabular} This is rigorously given through the assignment law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:J> = <var:V> }} <var:r0> := <nat:2> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:J> ; <var:G> := <var:r1> ; <var:G> := <var:G> + <var:r0> {{ <var:G> = <nat:2> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:r0> = <nat:2> /\ <var:G> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:G> = <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 