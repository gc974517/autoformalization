\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:2> + <var:W> * <var:l> ; <var:W> := <nat:1> + <var:W> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:l> = <var:S> $ , given some $ <var:S> \in \mathbb{N} $ , ahead of executing the set of instructions , it holds that we see $ <var:W> = <nat:1> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:1> $ . \end{theorem} \begin{proof} Observe that the following decorated segment of code . \begin{eqnarray} \{ <var:l> = <var:S> \} \\ <var:W> := <nat:1> ; \\ \{ <var:l> = <var:S> \land <var:W> = <nat:1> \} \\ <var:W> := <nat:2> + <var:W> * <var:l> ; \\ \{ <var:l> = <var:S> \land <var:W> = <nat:1> * <var:S> + <nat:2> \} \\ <var:W> := <nat:1> + <var:W> * <var:l> \\ \{ <var:l> = <var:S> \land <var:W> = <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> \} \end{eqnarray} The application of Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:1> ; <var:W> := <nat:2> + <var:W> * <var:l> ; <var:W> := <nat:1> + <var:W> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:l> = <var:S> }} <def:poly> {{ <var:W> = <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:W> = <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:W> = <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 