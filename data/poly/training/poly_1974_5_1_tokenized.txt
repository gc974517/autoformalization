\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:o> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:l> := <var:Q1> <var:l> := <var:l> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:o> = <var:B> $ , with some positive integers $ <var:B> $ , prior to executing this code segment then $ <var:l> = <nat:8> \times <var:B> + <nat:2> $ after list of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is given through typical Hoare logic . Following , we see the variable update command defining $ <var:o> $ into $ <var:Q1>$ . This advances the condition $ \{ <var:o> = <var:B> \} $ toward the postcondition $ \{ <var:o> = <var:B> \land <var:Q1> = <var:B> \} $ . This is rigorously given with the assignment scheme defined in usual Hoare reasoning . Considering the upcoming piece of code in the code , we have the code \verb | <var:Q0> := <nat:2> ; | . This command moves the condition $ \{ <var:o> = <var:B> \land <var:Q1> = <var:B> \} $ to the postcondition $ \{ <var:o> = <var:B> \land <var:Q1> = <var:B> \land <var:Q0> = <nat:2> \} $ . This is guaranteed using the assignment rule obtained from usual Hoare reasoning . Honing in on the upcoming line contained in our code , we see the environment update line \verb | <var:Q1> := <var:Q1> * <nat:8> ; | . This statement advances the precondition $ \{ <var:o> = <var:B> \land <var:Q1> = <var:B> \land <var:Q0> = <nat:2> \} $ toward $ \{ <var:o> = <var:B> \land <var:Q1> = <nat:8> \cdot <var:B> \land <var:Q0> = <nat:2> \} $ . This is rigorously given through the assignment inference rule given in typical Hoare reasoning . Moving forward to the following bit of code found in the code segment , the environment update statement \verb | <var:l> := <var:Q1> | . This line forwards $ \{ <var:o> = <var:B> \land <var:Q1> = <nat:8> \cdot <var:B> \land <var:Q0> = <nat:2> \} $ into $ \{ <var:o> = <var:B> \land <var:Q0> = <nat:2> \land <var:l> = <nat:8> \cdot <var:B> \} $ . This is given with the assignment scheme obtained from standard Hoare logic . Moving on , we see the variable binding statement \verb | <var:l> := <var:l> + <var:Q0> | . This takes the condition $ \{ <var:o> = <var:B> \land <var:Q0> = <nat:2> \land <var:l> = <nat:8> \cdot <var:B> \} $ into $ \{ <var:o> = <var:B> \land <var:l> = <nat:8> \cdot <var:B> + <nat:2> \} $ . This is shown with the assignment law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:o> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:l> := <var:Q1> <var:l> := <var:l> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:o> = <var:B> }} <def:poly> {{ <var:l> = <nat:8> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:Q1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:Q1> = <var:B> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:Q1> = <nat:8> * <var:B> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:Q0> = <nat:2> /\ <var:l> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:B> /\ <var:l> = <nat:8> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 