\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:1> ; <var:g> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:M> = <var:y> $ ( for some natural numbers $ <var:y> $ ) prior to interpreting our list of instructions , it holds that we have $ <var:g> = <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:M> = <var:y> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:M> = <var:y> \land <var:n0> = <nat:1> \} \\ <var:g> := <var:n0> \\ \{ <var:M> = <var:y> \land <var:g> = <nat:1> \} \end{eqnarray} Given the preceding argument , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:1> ; <var:g> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:M> = <var:y> }} <def:poly> {{ <var:g> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:g> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 