\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:2> ; <var:P> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assume ( given natural numbers $ <var:X> $ ) it to hold that $ <var:Z> = <var:X> $ before evaluating the series of instructions , then we have $ <var:P> = <nat:2> $ after code has finished executing . \end{theorem} \begin{proof} The method of proof for this code can be accomplished with typical Hoare logic . Stepping forward , we have the environment update command \verb | <var:M0> := <nat:2> ; | . This transfers the condition $ \{ <var:Z> = <var:X> \} $ as the condition $ \{ <var:Z> = <var:X> \land <var:M0> = <nat:2> \} $ . Advancing to the next bit of code seen in the code , we have the assignment command yielding $ <var:M0$ toward $ <var:P>$ . This transfers the condition $ \{ <var:Z> = <var:X> \land <var:M0> = <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:X> \land <var:P> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:2> ; <var:P> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Z> = <var:X> }} <def:poly> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:X> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 