\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:9> ; <var:m> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:P> = <var:y> $ before running our set of commands , it follows that we have $ <var:m> = <nat:9> $ when program finishes . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is given with Hoare logic . Moving on to the next step , we have the variable binding line \verb | <var:d0> := <nat:9> ; | . This code transfers $ \{ <var:P> = <var:y> \} $ to $ \{ <var:P> = <var:y> \land <var:d0> = <nat:9> \} $ . This is shown to be logically sound through the assignment scheme given in typical Hoare reasoning . After , we have the binding line defining $ <var:d0$ toward $ <var:m>$ . This moves $ \{ <var:P> = <var:y> \land <var:d0> = <nat:9> \} $ as the condition $ \{ <var:P> = <var:y> \land <var:m> = <nat:9> \} $ . This is rigorously given using the assignment rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:9> ; <var:m> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:P> = <var:y> }} <def:poly> {{ <var:m> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:m> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 