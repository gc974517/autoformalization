\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:p> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:p> ; <var:j2> := <var:j2> * <var:p> ; <var:b> := <var:j2> ; <var:b> := <var:b> + <var:j1> ; <var:b> := <var:b> + <var:j0> \end{verbatim} Assuming $ <var:p> = <var:X> $ --- assuming some whole numbers $ <var:X> $ --- before the evaluation of our code segment it must be that we have $ <var:b> = <nat:6> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:6> $ after program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:X> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \} \\ <var:j1> := <nat:1> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \} \\ <var:j1> := <var:j1> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \cdot <var:X> \} \\ <var:j2> := <nat:6> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:6> \} \\ <var:j2> := <var:j2> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:6> \cdot <var:X> \} \\ <var:j2> := <var:j2> * <var:p> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:6> \cdot <var:X> ^ <nat:2> \} \\ <var:b> := <var:j2> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:b> = <nat:6> \cdot <var:X> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:j1> ; \\ \{ <var:p> = <var:X> \land <var:j0> = <nat:6> \land <var:b> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> \} \\ <var:b> := <var:b> + <var:j0> \\ \{ <var:p> = <var:X> \land <var:b> = <nat:6> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:6> \} \end{eqnarray} The application of usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:p> = <var:X> }} <var:j0> := <nat:6> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:p> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:p> ; <var:j2> := <var:j2> * <var:p> ; <var:b> := <var:j2> ; <var:b> := <var:b> + <var:j1> ; <var:b> := <var:b> + <var:j0> {{ <var:b> = <nat:6> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:1> * <var:X> /\ <var:b> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:j0> = <nat:6> /\ <var:b> = <nat:6> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:X> /\ <var:b> = <nat:6> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 