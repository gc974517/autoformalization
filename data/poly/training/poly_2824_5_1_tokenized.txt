\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:K> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:5> ; <var:N> := <var:r1> <var:N> := <var:N> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:K> = <var:s> $ prior to interpreting our set of instructions , it follows that $ <var:N> = <nat:5> * <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this code segment is done through typical Hoare techniques . Considering the upcoming bits of codecontained in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:s> \} & <var:r1> := <var:K> & \{ <var:K> = <var:s> \land <var:r1> = <var:s> \} \\ \{ <var:K> = <var:s> \land <var:r1> = <var:s> \} & <var:r0> := <nat:3> & \{ <var:K> = <var:s> \land <var:r1> = <var:s> \land <var:r0> = <nat:3> \} \\ \{ <var:K> = <var:s> \land <var:r1> = <var:s> \land <var:r0> = <nat:3> \} & <var:r1> := <var:r1> * <nat:5> & \{ <var:K> = <var:s> \land <var:r1> = <nat:5> \times <var:s> \land <var:r0> = <nat:3> \} \\ \{ <var:K> = <var:s> \land <var:r1> = <nat:5> \times <var:s> \land <var:r0> = <nat:3> \} & <var:N> := <var:r1& \{ <var:K> = <var:s> \land <var:r0> = <nat:3> \land <var:N> = <nat:5> \times <var:s> \} \\ \{ <var:K> = <var:s> \land <var:r0> = <nat:3> \land <var:N> = <nat:5> \times <var:s> \} & <var:N> := <var:N> + <var:r0& \{ <var:K> = <var:s> \land <var:N> = <nat:5> \times <var:s> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:K> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:5> ; <var:N> := <var:r1> <var:N> := <var:N> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <def:poly> {{ <var:N> = <nat:5> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:r1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:r1> = <var:s> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:r1> = <nat:5> * <var:s> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:r0> = <nat:3> /\ <var:N> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:N> = <nat:5> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 