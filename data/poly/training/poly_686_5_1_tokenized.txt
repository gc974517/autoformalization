\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:x1> := <var:K> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:p> := <var:x1> <var:p> := <var:p> + <var:x0> \end{verbatim} Given it to be that $ <var:K> = <var:M> $ prior to evaluating our segment of code , then $ <var:p> = <nat:1> \times <var:M> + <nat:2> $ once program terminates . \end{theorem} \begin{proof} Using usual Hoare techniques results in : \begin{eqnarray} \{ <var:K> = <var:M> \} \\ <var:x1> := <var:K> ; \\ \{ <var:K> = <var:M> \land <var:x1> = <var:M> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:K> = <var:M> \land <var:x1> = <var:M> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:1> ; \\ \{ <var:K> = <var:M> \land <var:x1> = <nat:1> \times <var:M> \land <var:x0> = <nat:2> \} \\ <var:p> := <var:x1> \\ \{ <var:K> = <var:M> \land <var:x0> = <nat:2> \land <var:p> = <nat:1> \times <var:M> \} \\ <var:p> := <var:p> + <var:x0> \\ \{ <var:K> = <var:M> \land <var:p> = <nat:1> \times <var:M> + <nat:2> \} \end{eqnarray} As a result , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:K> = <var:M> }} <var:x1> := <var:K> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:p> := <var:x1> <var:p> := <var:p> + <var:x0> {{ <var:p> = <nat:1> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:x1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:x1> = <var:M> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:x1> = <nat:1> * <var:M> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:x0> = <nat:2> /\ <var:p> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:p> = <nat:1> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 