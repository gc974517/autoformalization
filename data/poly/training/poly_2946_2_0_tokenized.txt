\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:6> ; <var:a> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Allow --- assuming some integers $ <var:o> $ --- it to be that $ <var:R> = <var:o> $ ahead of interpreting this code segment it follows that $ <var:a> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:o> \} \\ <var:S0> := <nat:6> ; \\ \{ <var:R> = <var:o> \land <var:S0> = <nat:6> \} \\ <var:a> := <var:S0> \\ \{ <var:R> = <var:o> \land <var:a> = <nat:6> \} \end{eqnarray} Given the above , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:6> ; <var:a> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:R> = <var:o> }} <def:poly> {{ <var:a> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:a> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 