\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:4> ; <var:L> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:M> = <var:n> $ before executing this program , it must be that we have $ <var:L> = <nat:4> $ after series of instructions finishes . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is done by the below decorated set of commands . \begin{eqnarray} \{ <var:M> = <var:n> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:M> = <var:n> \land <var:V0> = <nat:4> \} \\ <var:L> := <var:V0> \\ \{ <var:M> = <var:n> \land <var:L> = <nat:4> \} \end{eqnarray} Applying usual Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:L> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:M> = <var:n> }} <def:poly> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:n> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:n> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 