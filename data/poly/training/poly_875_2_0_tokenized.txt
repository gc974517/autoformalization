\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:8> ; <var:t> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming for any natural coefficients $ <var:U> $ $ <var:k> = <var:U> $ before the execution of the code segment it follows that $ <var:t> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be accomplished with Hoare reasoning . Jumping to the next line contained in the set of commands , \[ \begin{tabular} {rcl} \{ <var:k> = <var:U> \} & <var:S0> := <nat:8> & \{ <var:k> = <var:U> \land <var:S0> = <nat:8> \} \end{tabular} This is known to be sound by the variable assignmet law obtained from standard Hoare techniques . Looking at the subsequent command found in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:k> = <var:U> \} & <var:S0> := <nat:8> & \{ <var:k> = <var:U> \land <var:S0> = <nat:8> \} \end{tabular} This is rigorously given using the binding inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:t> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <def:poly> {{ <var:t> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:t> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 