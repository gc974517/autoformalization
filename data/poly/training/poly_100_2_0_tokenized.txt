\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:5> ; <var:U> := <var:u0> \end{verbatim} Assuming that $ <var:c> = <var:X> $ before interpreting this series of commands it holds that $ <var:U> = <nat:5> $ . \end{theorem} \begin{proof} Applying Hoare techniques returns : \begin{eqnarray} \{ <var:c> = <var:X> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:c> = <var:X> \land <var:u0> = <nat:5> \} \\ <var:U> := <var:u0> \\ \{ <var:c> = <var:X> \land <var:U> = <nat:5> \} \end{eqnarray} Given the above , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:c> = <var:X> }} <var:u0> := <nat:5> ; <var:U> := <var:u0> {{ <var:U> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 