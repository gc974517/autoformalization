\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:7> ; <var:H> := <var:U0> \end{verbatim} Assuming $ <var:V> = <var:Y> $ before running the code segment it holds that $ <var:H> = <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be accomplished with Hoare logic . Advancing to the following line of code seen in the code segment , \begin{verbatim} { <var:V> = <var:Y> } <var:U0> := <nat:7> { <var:V> = <var:Y> \land <var:U0> = <nat:7> } \end{verbatim} Observing the upcoming piece of code contained in the list of instructions , \begin{verbatim} { <var:V> = <var:Y> } <var:U0> := <nat:7> { <var:V> = <var:Y> \land <var:U0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:V> = <var:Y> }} <var:U0> := <nat:7> ; <var:H> := <var:U0> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Y> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 