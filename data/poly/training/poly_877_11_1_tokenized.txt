\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:p> ; <var:L2> := <var:L1> * <var:p> ; <var:L3> := <var:L2> * <var:p> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:4> ; <var:P> := <var:L3> <var:P> := <var:P> + <var:L2> <var:P> := <var:P> + <var:L1> <var:P> := <var:P> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume , given some whole numbers $ <var:j> $ , it to hold that $ <var:p> = <var:j> $ prior to interpreting the program it holds that $ <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives us : \begin{eqnarray} \{ <var:p> = <var:j> \} \\ <var:L1> := <var:p> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <var:j> \} \\ <var:L2> := <var:L1> * <var:p> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <var:j> \land <var:L2> = <var:j> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:p> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <var:j> \land <var:L2> = <var:j> ^ <nat:2> \land <var:L3> = <var:j> ^ <nat:3> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <var:j> \land <var:L2> = <var:j> ^ <nat:2> \land <var:L3> = <var:j> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <nat:2> * <var:j> \land <var:L2> = <var:j> ^ <nat:2> \land <var:L3> = <var:j> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L2> := <var:L2> * <nat:4> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <nat:2> * <var:j> \land <var:L2> = <nat:4> * <var:j> ^ <nat:2> \land <var:L3> = <var:j> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:L3> := <var:L3> * <nat:4> ; \\ \{ <var:p> = <var:j> \land <var:L1> = <nat:2> * <var:j> \land <var:L2> = <nat:4> * <var:j> ^ <nat:2> \land <var:L3> = <nat:4> * <var:j> ^ <nat:3> \land <var:L0> = <nat:4> \} \\ <var:P> := <var:L3> \\ \{ <var:p> = <var:j> \land <var:L1> = <nat:2> * <var:j> \land <var:L2> = <nat:4> * <var:j> ^ <nat:2> \land <var:L0> = <nat:4> \land <var:P> = <nat:4> * <var:j> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:L2> \\ \{ <var:p> = <var:j> \land <var:L1> = <nat:2> * <var:j> \land <var:L0> = <nat:4> \land <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:L1> \\ \{ <var:p> = <var:j> \land <var:L0> = <nat:4> \land <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> \} \\ <var:P> := <var:P> + <var:L0> \\ \{ <var:p> = <var:j> \land <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> \} \end{eqnarray} Considering the above , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:p> ; <var:L2> := <var:L1> * <var:p> ; <var:L3> := <var:L2> * <var:p> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:4> ; <var:P> := <var:L3> <var:P> := <var:P> + <var:L2> <var:P> := <var:P> + <var:L1> <var:P> := <var:P> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:p> = <var:j> }} <def:poly> {{ <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <var:j> /\ <var:L2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <var:j> /\ <var:L2> = <var:j> ^ <nat:2> /\ <var:L3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <var:j> /\ <var:L2> = <var:j> ^ <nat:2> /\ <var:L3> = <var:j> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <nat:2> * <var:j> /\ <var:L2> = <var:j> ^ <nat:2> /\ <var:L3> = <var:j> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <nat:2> * <var:j> /\ <var:L2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:L3> = <var:j> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <nat:2> * <var:j> /\ <var:L2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <nat:2> * <var:j> /\ <var:L2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:L0> = <nat:4> /\ <var:P> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L1> = <nat:2> * <var:j> /\ <var:L0> = <nat:4> /\ <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:L0> = <nat:4> /\ <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:P> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 