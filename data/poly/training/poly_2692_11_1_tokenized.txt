\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:U> ; <var:g2> := <var:g1> * <var:U> ; <var:g3> := <var:g2> * <var:U> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:f> := <var:g3> <var:f> := <var:f> + <var:g2> <var:f> := <var:f> + <var:g1> <var:f> := <var:f> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:U> = <var:b> $ , for any natural numbers $ <var:b> $ , prior to executing the segment of code , it holds that we see $ <var:f> = <nat:1> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:U> = <var:b> \} \\ <var:g1> := <var:U> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <var:b> \} \\ <var:g2> := <var:g1> * <var:U> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <var:b> \land <var:g2> = <var:b> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:U> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <var:b> \land <var:g2> = <var:b> ^ <nat:2> \land <var:g3> = <var:b> ^ <nat:3> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <var:b> \land <var:g2> = <var:b> ^ <nat:2> \land <var:g3> = <var:b> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g1> := <var:g1> * <nat:2> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <nat:2> * <var:b> \land <var:g2> = <var:b> ^ <nat:2> \land <var:g3> = <var:b> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g2> := <var:g2> * <nat:2> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <nat:2> * <var:b> \land <var:g2> = <nat:2> * <var:b> ^ <nat:2> \land <var:g3> = <var:b> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g3> := <var:g3> * <nat:1> ; \\ \{ <var:U> = <var:b> \land <var:g1> = <nat:2> * <var:b> \land <var:g2> = <nat:2> * <var:b> ^ <nat:2> \land <var:g3> = <nat:1> * <var:b> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:f> := <var:g3> \\ \{ <var:U> = <var:b> \land <var:g1> = <nat:2> * <var:b> \land <var:g2> = <nat:2> * <var:b> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:g2> \\ \{ <var:U> = <var:b> \land <var:g1> = <nat:2> * <var:b> \land <var:g0> = <nat:2> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:g1> \\ \{ <var:U> = <var:b> \land <var:g0> = <nat:2> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> \} \\ <var:f> := <var:f> + <var:g0> \\ \{ <var:U> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> \} \end{eqnarray} Thus , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:U> ; <var:g2> := <var:g1> * <var:U> ; <var:g3> := <var:g2> * <var:U> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:f> := <var:g3> <var:f> := <var:f> + <var:g2> <var:f> := <var:f> + <var:g1> <var:f> := <var:f> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:U> = <var:b> }} <def:poly> {{ <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <var:b> /\ <var:g2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <var:b> /\ <var:g2> = <var:b> ^ <nat:2> /\ <var:g3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <var:b> /\ <var:g2> = <var:b> ^ <nat:2> /\ <var:g3> = <var:b> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <nat:2> * <var:b> /\ <var:g2> = <var:b> ^ <nat:2> /\ <var:g3> = <var:b> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <nat:2> * <var:b> /\ <var:g2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:g3> = <var:b> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <nat:2> * <var:b> /\ <var:g2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:b> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <nat:2> * <var:b> /\ <var:g2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:f> = <nat:1> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g1> = <nat:2> * <var:b> /\ <var:g0> = <nat:2> /\ <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:g0> = <nat:2> /\ <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 