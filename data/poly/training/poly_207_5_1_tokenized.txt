\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:f> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:W> := <var:B1> <var:W> := <var:W> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:f> = <var:u> $ before the evaluation of our set of commands it holds that we see $ <var:W> = <nat:3> \cdot <var:u> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our set of commands is evident through usual Hoare reasoning . Taking another step toward the following piece of code contained in the list of instructions , we have the variable assignmet command giving $ <var:f> $ to $ <var:B1>$ . This takes the precondition $ \{ <var:f> = <var:u> \} $ to $ \{ <var:f> = <var:u> \land <var:B1> = <var:u> \} $ . Advancing to the next step , we see the assignment code yielding $ <nat:2> $ to $ <var:B0>$ . This command redefines the precondition $ \{ <var:f> = <var:u> \land <var:B1> = <var:u> \} $ to the condition $ \{ <var:f> = <var:u> \land <var:B1> = <var:u> \land <var:B0> = <nat:2> \} $ . This is guaranteed with the assignment scheme obtained from typical Hoare logic . Shifting focus toward the subsequent bit of code in our code , we see the variable assignmet command \verb | <var:B1> := <var:B1> * <nat:3> ; | . This command advances the condition $ \{ <var:f> = <var:u> \land <var:B1> = <var:u> \land <var:B0> = <nat:2> \} $ toward $ \{ <var:f> = <var:u> \land <var:B1> = <nat:3> \cdot <var:u> \land <var:B0> = <nat:2> \} $ . Moving onward , we see the variable update code assigning $ <var:B1$ into $ <var:W>$ . This redefines the precondition $ \{ <var:f> = <var:u> \land <var:B1> = <nat:3> \cdot <var:u> \land <var:B0> = <nat:2> \} $ to $ \{ <var:f> = <var:u> \land <var:B0> = <nat:2> \land <var:W> = <nat:3> \cdot <var:u> \} $ . This is shown with the assignment scheme defined by typical Hoare reasoning . Honing in on the subsequent line of code seen in our segment of code , we see the variable binding command letting $ <var:W> + <var:B0$ into $ <var:W>$ . This command redefines the condition $ \{ <var:f> = <var:u> \land <var:B0> = <nat:2> \land <var:W> = <nat:3> \cdot <var:u> \} $ to $ \{ <var:f> = <var:u> \land <var:W> = <nat:3> \cdot <var:u> + <nat:2> \} $ . This is rigorously given with the assignment rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:f> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:W> := <var:B1> <var:W> := <var:W> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:f> = <var:u> }} <def:poly> {{ <var:W> = <nat:3> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:B1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:B1> = <var:u> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:B1> = <nat:3> * <var:u> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:B0> = <nat:2> /\ <var:W> = <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:W> = <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 