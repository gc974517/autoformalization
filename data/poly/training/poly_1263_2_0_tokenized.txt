\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:5> ; <var:Q> := <var:k0> \end{verbatim} Allowing it to hold that $ <var:Y> = <var:h> $ before the evaluation of this series of commands , then $ <var:Q> = <nat:5> $ . \end{theorem} \begin{proof} The argument for this list of instructions is shown through typical Hoare logic . Moving forward to the next step , the statement \verb | <var:k0> := <nat:5> ; | . This statement redefines the condition $ \{ <var:Y> = <var:h> \} $ toward the condition $ \{ <var:Y> = <var:h> \land <var:k0> = <nat:5> \} $ . Advancing to the upcoming command found in the series of instructions , the command binding $ <var:k0$ toward $ <var:Q>$ . This moves the precondition $ \{ <var:Y> = <var:h> \land <var:k0> = <nat:5> \} $ toward $ \{ <var:Y> = <var:h> \land <var:Q> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Y> = <var:h> }} <var:k0> := <nat:5> ; <var:Q> := <var:k0> {{ <var:Q> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:Q> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 