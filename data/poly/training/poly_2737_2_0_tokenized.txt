\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:9> ; <var:Z> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Assume given all natural numbers $ <var:H> $ it to be that $ <var:m> = <var:H> $ ahead of executing the set of instructions it must be that we see $ <var:Z> = <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program can be given with the following decorated list of commands . \begin{eqnarray} \{ <var:m> = <var:H> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:m> = <var:H> \land <var:Q0> = <nat:9> \} \\ <var:Z> := <var:Q0> \\ \{ <var:m> = <var:H> \land <var:Z> = <nat:9> \} \end{eqnarray} Applying Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:9> ; <var:Z> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:m> = <var:H> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:H> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 