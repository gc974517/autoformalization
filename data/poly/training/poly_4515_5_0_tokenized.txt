\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:T> ; <var:A> := <var:Z1> ; <var:A> := <var:A> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assuming ( given all natural numbers $ <var:G> $ ) that we have $ <var:T> = <var:G> $ ahead of evaluating our code segment , it holds that we have $ <var:A> = <nat:2> \times <var:G> + <nat:3> $ after segment of code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be given using usual Hoare techniques . Moving on to the next step , the binding code letting $ <nat:3> $ into $ <var:Z0>$ . This statement transfers $ \{ <var:T> = <var:G> \} $ toward $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \} $ . This is shown with the assignment inference rule found in typical Hoare reasoning . Moving on to the next step , we see the variable assignmet command \verb | <var:Z1> := <nat:2> ; | . This line redefines the precondition $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \} $ into $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:2> \} $ . Advancing on , we have the assignment statement assigning $ <var:Z1> * <var:T> $ as $ <var:Z1>$ . This forwards $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:2> \} $ as the condition $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:2> \cdot <var:G> \} $ . Honing in on the next line of code contained in the list of instructions , we have the environment update statement \verb | <var:A> := <var:Z1> ; | . This advances the precondition $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:2> \cdot <var:G> \} $ as the condition $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:G> \} $ . Moving forward , the assignment command \verb | <var:A> := <var:A> + <var:Z0> | . This statement takes $ \{ <var:T> = <var:G> \land <var:Z0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:G> \} $ as the postcondition $ \{ <var:T> = <var:G> \land <var:A> = <nat:2> \cdot <var:G> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:T> ; <var:A> := <var:Z1> ; <var:A> := <var:A> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <def:poly> {{ <var:A> = <nat:2> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:Z0> = <nat:3> /\ <var:A> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:A> = <nat:2> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 