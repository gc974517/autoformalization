\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:z> ; <var:V2> := <var:V1> * <var:z> ; <var:V3> := <var:V2> * <var:z> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:2> ; <var:w> := <var:V3> <var:w> := <var:w> + <var:V2> <var:w> := <var:w> + <var:V1> <var:w> := <var:w> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> in \emph{Imp} . Assume $ <var:z> = <var:q> $ prior to interpreting the list of commands , it holds that we have $ <var:w> = <nat:2> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> + <nat:8> \times <var:q> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives us : \begin{eqnarray} \{ <var:z> = <var:q> \} \\ <var:V1> := <var:z> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <var:q> \} \\ <var:V2> := <var:V1> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:z> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \} \\ <var:V0> := <nat:4> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:V1> := <var:V1> * <nat:8> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <nat:8> * <var:q> \land <var:V2> = <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:V2> := <var:V2> * <nat:8> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <nat:8> * <var:q> \land <var:V2> = <nat:8> * <var:q> ^ <nat:2> \land <var:V3> = <var:q> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:V3> := <var:V3> * <nat:2> ; \\ \{ <var:z> = <var:q> \land <var:V1> = <nat:8> * <var:q> \land <var:V2> = <nat:8> * <var:q> ^ <nat:2> \land <var:V3> = <nat:2> * <var:q> ^ <nat:3> \land <var:V0> = <nat:4> \} \\ <var:w> := <var:V3> \\ \{ <var:z> = <var:q> \land <var:V1> = <nat:8> * <var:q> \land <var:V2> = <nat:8> * <var:q> ^ <nat:2> \land <var:V0> = <nat:4> \land <var:w> = <nat:2> * <var:q> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:V2> \\ \{ <var:z> = <var:q> \land <var:V1> = <nat:8> * <var:q> \land <var:V0> = <nat:4> \land <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:V1> \\ \{ <var:z> = <var:q> \land <var:V0> = <nat:4> \land <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> \} \\ <var:w> := <var:w> + <var:V0> \\ \{ <var:z> = <var:q> \land <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:4> \} \end{eqnarray} Thusly , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:z> ; <var:V2> := <var:V1> * <var:z> ; <var:V3> := <var:V2> * <var:z> ; <var:V0> := <nat:4> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:2> ; <var:w> := <var:V3> <var:w> := <var:w> + <var:V2> <var:w> := <var:w> + <var:V1> <var:w> := <var:w> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <def:poly> {{ <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <nat:8> * <var:q> /\ <var:V2> = <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <nat:8> * <var:q> /\ <var:V2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:V3> = <var:q> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <nat:8> * <var:q> /\ <var:V2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:V3> = <nat:2> * <var:q> ^ <nat:3> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <nat:8> * <var:q> /\ <var:V2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:V0> = <nat:4> /\ <var:w> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V1> = <nat:8> * <var:q> /\ <var:V0> = <nat:4> /\ <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:V0> = <nat:4> /\ <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:w> = <nat:2> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 