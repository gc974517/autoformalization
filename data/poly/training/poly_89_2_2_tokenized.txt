\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:W> \end{verbatim} Given $ <var:W> = <var:x> $ --- for every whole numbers $ <var:x> $ --- ahead of executing our set of commands it must be that we see $ <var:c> = <nat:2> \times <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:W> = <var:x> \} \\ <var:c> := <nat:2> ; \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> \} \\ <var:c> := <nat:3> + <var:c> * <var:W> \\ \{ <var:W> = <var:x> \land <var:c> = <nat:2> * <var:x> + <nat:3> \} \end{eqnarray} Considering the above , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:W> = <var:x> }} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:W> {{ <var:c> = <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:x> /\ <var:c> = <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 