\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:D> = <var:f> $ , given positive integers $ <var:f> $ , prior to the evaluation of the series of commands it follows that we see $ <var:U> = <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:f> \} \\ <var:U> := <nat:4> ; \\ \{ <var:D> = <var:f> \land <var:U> = <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:D> ; \\ \{ <var:D> = <var:f> \land <var:U> = <nat:4> * <var:f> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:D> ; \\ \{ <var:D> = <var:f> \land <var:U> = <nat:4> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:D> ; \\ \{ <var:D> = <var:f> \land <var:U> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> \} \\ <var:U> := <nat:2> + <var:U> * <var:D> \\ \{ <var:D> = <var:f> \land <var:U> = <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> ; <var:U> := <nat:2> + <var:U> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:D> = <var:f> }} <def:poly> {{ <var:U> = <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:U> = <nat:4> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:U> = <nat:4> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:U> = <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:f> /\ <var:U> = <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 