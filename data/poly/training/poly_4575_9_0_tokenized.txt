\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:D0> := <nat:2> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:a> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:a> ; <var:D2> := <var:D2> * <var:a> ; <var:O> := <var:D2> ; <var:O> := <var:O> + <var:D1> ; <var:O> := <var:O> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:a> = <var:k> $ before executing this list of commands , it must be that we see $ <var:O> = <nat:5> \cdot <var:k> ^ <nat:2> + <nat:6> \cdot <var:k> + <nat:2> $ after set of instructions has executed . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be accomplished by standard Hoare logic . Observing the following commands seen in our series of instructions , \begin{eqnarray} \{ <var:a> = <var:k> \} \, <var:D0> := <nat:2> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \} \, <var:D1> := <nat:6> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \} \, <var:D1> := <var:D1> * <var:a> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \} \end{eqnarray} This is shown through the scheme in usual Hoare logic . Focusing on the following bit of code in the code , \begin{eqnarray} \{ <var:a> = <var:k> \} \, <var:D0> := <nat:2> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \} \end{eqnarray} This is deduced using the assignment inference rule defined in Hoare reasoning . Honing in on the proceeding statements found in the program , we have \begin{eqnarray} \{ <var:a> = <var:k> \} \, <var:D0> := <nat:2> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \} \, <var:D1> := <nat:6> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \} \, <var:D1> := <var:D1> * <var:a> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \} \, <var:D2> := <nat:5> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \land <var:D2> = <nat:5> \} \\ \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \land <var:D2> = <nat:5> \} \, <var:D2> := <var:D2> * <var:a> \, \{ <var:a> = <var:k> \land <var:D0> = <nat:2> \land <var:D1> = <nat:6> \cdot <var:k> \land <var:D2> = <nat:5> \cdot <var:k> \} \end{eqnarray} This is ensured with the environment update rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D0> := <nat:2> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:a> ; <var:D2> := <nat:5> ; <var:D2> := <var:D2> * <var:a> ; <var:D2> := <var:D2> * <var:a> ; <var:O> := <var:D2> ; <var:O> := <var:O> + <var:D1> ; <var:O> := <var:O> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:a> = <var:k> }} <def:poly> {{ <var:O> = <nat:5> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> * <var:k> /\ <var:D2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> * <var:k> /\ <var:D2> = <nat:5> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> * <var:k> /\ <var:D2> = <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:D1> = <nat:6> * <var:k> /\ <var:O> = <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:D0> = <nat:2> /\ <var:O> = <nat:5> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:k> /\ <var:O> = <nat:5> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 