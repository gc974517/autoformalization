\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:W1> := <var:j> ; <var:W2> := <var:W1> * <var:j> ; <var:W3> := <var:W2> * <var:j> ; <var:W0> := <nat:5> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:9> ; <var:M> := <var:W3> <var:M> := <var:M> + <var:W2> <var:M> := <var:M> + <var:W1> <var:M> := <var:M> + <var:W0> \end{verbatim} Given ( assuming some $ <var:a> \in \mathbb{Z}^+ $ ) that $ <var:j> = <var:a> $ prior to interpreting this code segment , it holds that we see $ <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:5> $ once series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:a> \} \\ <var:W1> := <var:j> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <var:a> \} \\ <var:W2> := <var:W1> * <var:j> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:j> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \land <var:W0> = <nat:5> \} \\ <var:W1> := <var:W1> * <nat:3> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <nat:3> * <var:a> \land <var:W2> = <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \land <var:W0> = <nat:5> \} \\ <var:W2> := <var:W2> * <nat:1> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <nat:3> * <var:a> \land <var:W2> = <nat:1> * <var:a> ^ <nat:2> \land <var:W3> = <var:a> ^ <nat:3> \land <var:W0> = <nat:5> \} \\ <var:W3> := <var:W3> * <nat:9> ; \\ \{ <var:j> = <var:a> \land <var:W1> = <nat:3> * <var:a> \land <var:W2> = <nat:1> * <var:a> ^ <nat:2> \land <var:W3> = <nat:9> * <var:a> ^ <nat:3> \land <var:W0> = <nat:5> \} \end{eqnarray} Continuing executing this series of instructions produces : \begin{eqnarray} <var:M> := <var:W3> \\ \{ <var:j> = <var:a> \land <var:W1> = <nat:3> * <var:a> \land <var:W2> = <nat:1> * <var:a> ^ <nat:2> \land <var:W0> = <nat:5> \land <var:M> = <nat:9> * <var:a> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:W2> \\ \{ <var:j> = <var:a> \land <var:W1> = <nat:3> * <var:a> \land <var:W0> = <nat:5> \land <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:W1> \\ \{ <var:j> = <var:a> \land <var:W0> = <nat:5> \land <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> \} \\ <var:M> := <var:M> + <var:W0> \\ \{ <var:j> = <var:a> \land <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:5> \} \end{eqnarray} The application of usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:j> = <var:a> }} <var:W1> := <var:j> ; <var:W2> := <var:W1> * <var:j> ; <var:W3> := <var:W2> * <var:j> ; <var:W0> := <nat:5> ; <var:W1> := <var:W1> * <nat:3> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:9> ; <var:M> := <var:W3> <var:M> := <var:M> + <var:W2> <var:M> := <var:M> + <var:W1> <var:M> := <var:M> + <var:W0> {{ <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W2> = <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:W3> = <var:a> ^ <nat:3> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:a> ^ <nat:3> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:W0> = <nat:5> /\ <var:M> = <nat:9> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W0> = <nat:5> /\ <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:W0> = <nat:5> /\ <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:a> /\ <var:M> = <nat:9> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 