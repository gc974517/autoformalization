\begin{document} \begin{theorem} Define the following list of commands : \begin{verbatim} <var:y0> := <nat:6> ; <var:U> := <var:y0> \end{verbatim} Assume $ <var:H> = <var:p> $ ahead of executing this set of instructions , then $ <var:U> = <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be given through standard Hoare techniques . After , we have the assignment code binding $ <nat:6> $ as $ <var:y0>$ . This statement forwards $ \{ <var:H> = <var:p> \} $ into the condition $ \{ <var:H> = <var:p> \land <var:y0> = <nat:6> \} $ . Considering the next statement in the program , we have the binding code \verb | <var:U> := <var:y0> | . This advances $ \{ <var:H> = <var:p> \land <var:y0> = <nat:6> \} $ into $ \{ <var:H> = <var:p> \land <var:U> = <nat:6> \} $ . This is sound with the assignment scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:H> = <var:p> }} <var:y0> := <nat:6> ; <var:U> := <var:y0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:p> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 