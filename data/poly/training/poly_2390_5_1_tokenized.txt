\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E1> := <var:s> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:6> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:s> = <var:a> $ prior to interpreting the segment of code , it must be that $ <var:g> = <nat:6> \cdot <var:a> + <nat:7> $ once code has exited . \end{theorem} \begin{proof} Arguing the correctness of this program is accomplished by typical Hoare reasoning . Stepping forward , we have the variable binding line giving $ <var:s> $ toward $ <var:E1>$ . This statement takes the precondition $ \{ <var:s> = <var:a> \} $ to $ \{ <var:s> = <var:a> \land <var:E1> = <var:a> \} $ . This is guaranteed by the assignment rule given in standard Hoare reasoning . Observing the next command contained in the set of commands , we see the environment update code \verb | <var:E0> := <nat:7> ; | . This code advances the precondition $ \{ <var:s> = <var:a> \land <var:E1> = <var:a> \} $ into the condition $ \{ <var:s> = <var:a> \land <var:E1> = <var:a> \land <var:E0> = <nat:7> \} $ . Paying attention to the following bit of code in our list of instructions , we see the variable binding line \verb | <var:E1> := <var:E1> * <nat:6> ; | . This forwards the precondition $ \{ <var:s> = <var:a> \land <var:E1> = <var:a> \land <var:E0> = <nat:7> \} $ toward the postcondition $ \{ <var:s> = <var:a> \land <var:E1> = <nat:6> * <var:a> \land <var:E0> = <nat:7> \} $ . This is ensured through the assignment scheme found in usual Hoare logic . Paying attention to the next piece of code contained in our list of instructions , we have the code yielding $ <var:E1$ into $ <var:g>$ . This code advances $ \{ <var:s> = <var:a> \land <var:E1> = <nat:6> * <var:a> \land <var:E0> = <nat:7> \} $ as the condition $ \{ <var:s> = <var:a> \land <var:E0> = <nat:7> \land <var:g> = <nat:6> * <var:a> \} $ . This is ensured using the assignment scheme defined in Hoare reasoning . Paying attention to the following bit of code seen in our program , we have the line defining $ <var:g> + <var:E0$ into $ <var:g>$ . This statement moves $ \{ <var:s> = <var:a> \land <var:E0> = <nat:7> \land <var:g> = <nat:6> * <var:a> \} $ toward the postcondition $ \{ <var:s> = <var:a> \land <var:g> = <nat:6> * <var:a> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:s> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:6> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:s> = <var:a> }} <def:poly> {{ <var:g> = <nat:6> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:E1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:E1> = <var:a> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:E1> = <nat:6> * <var:a> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:E0> = <nat:7> /\ <var:g> = <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:a> /\ <var:g> = <nat:6> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 