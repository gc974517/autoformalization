\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:2> + <var:R> * <var:N> ; <var:R> := <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:2> + <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:4> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allow that we have $ <var:N> = <var:E> $ prior to the execution of the list of instructions it must be that $ <var:R> = <nat:2> \cdot <var:E> ^ <nat:8> + <nat:3> \cdot <var:E> ^ <nat:7> + <nat:2> \cdot <var:E> ^ <nat:6> + <nat:1> \cdot <var:E> ^ <nat:4> + <nat:2> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is done through standard Hoare reasoning . Looking at the next step seen in our set of commands , we have the assignment code \verb | <var:R> := <nat:2> ; | . This takes the condition $ \{ <var:N> = <var:E> \} $ as the condition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> \} $ . This is sound using the assignment rule in standard Hoare techniques . Next , we see the variable assignmet line \verb | <var:R> := <nat:3> + <var:R> * <var:N> ; | . This command forwards $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> \} $ to $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> + <nat:3> \} $ . This is shown using the assignment inference rule obtained from standard Hoare reasoning . Moving on to the next step , we see the binding code \verb | <var:R> := <nat:2> + <var:R> * <var:N> ; | . This moves the precondition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> + <nat:3> \} $ as $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} $ . Next , we see the environment update line \verb | <var:R> := <var:R> * <var:N> ; | . This forwards the condition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} $ toward $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + \} $ . Stepping forward , we have the environment update code \verb | <var:R> := <nat:1> + <var:R> * <var:N> ; | . This transfers the condition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + \} $ to the postcondition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> \} $ . Moving on to the upcoming line of code seen in the list of commands , we have the variable binding line binding $ <nat:2> + <var:R> * <var:N> $ to $ <var:R>$ . This moves $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:2> \} $ . Moving onward , we have the variable binding line assigning $ <nat:1> + <var:R> * <var:N> $ to $ <var:R>$ . This line transfers $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:2> \} $ to $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> \} $ . This is given using the assignment law from usual Hoare techniques . Moving forward to the following piece of code in the series of instructions , we have the environment update statement binding $ <nat:4> + <var:R> * <var:N> $ into $ <var:R>$ . This redefines $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> \} $ into the postcondition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> \} $ . Paying attention to the proceeding line seen in the series of instructions , we see the variable update line \verb | <var:R> := <nat:3> + <var:R> * <var:N> | . This takes the condition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> \} $ toward the postcondition $ \{ <var:N> = <var:E> \land <var:R> = <nat:2> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> \} $ . This is ensured by the assignment rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:2> + <var:R> * <var:N> ; <var:R> := <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:2> + <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:4> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <def:poly> {{ <var:R> = <nat:2> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:R> = <nat:2> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 