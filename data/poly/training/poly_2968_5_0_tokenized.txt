\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:t0> := <nat:1> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:W> ; <var:G> := <var:t1> ; <var:G> := <var:G> + <var:t0> \end{verbatim} Allow , with some natural numbers $ <var:e> $ , it to be that $ <var:W> = <var:e> $ prior to evaluating this set of instructions , it holds that $ <var:G> = <nat:8> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is evident through usual Hoare techniques . Going to the next step , we see the variable update line \verb | <var:t0> := <nat:1> ; | . This redefines the condition $ \{ <var:W> = <var:e> \} $ to the condition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \} $ . Observing the following command contained in our segment of code , we have the assignment statement \verb | <var:t1> := <nat:8> ; | . This line moves $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \} $ into the postcondition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} $ . This is guaranteed using the assignment law given by usual Hoare reasoning . Next , we have the command \verb | <var:t1> := <var:t1> * <var:W> ; | . This transfers the condition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \} $ toward the condition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \times <var:e> \} $ . This is guaranteed with the assignment scheme found in Hoare techniques . Moving on to the next step , we see the assignment statement \verb | <var:G> := <var:t1> ; | . This redefines $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:t1> = <nat:8> \times <var:e> \} $ as the condition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:G> = <nat:8> \times <var:e> \} $ . This is deduced using the assignment inference rule defined in Hoare logic . Moving forward , we see the assignment command binding $ <var:G> + <var:t0$ to $ <var:G>$ . This redefines the precondition $ \{ <var:W> = <var:e> \land <var:t0> = <nat:1> \land <var:G> = <nat:8> \times <var:e> \} $ to $ \{ <var:W> = <var:e> \land <var:G> = <nat:8> \times <var:e> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:W> = <var:e> }} <var:t0> := <nat:1> ; <var:t1> := <nat:8> ; <var:t1> := <var:t1> * <var:W> ; <var:G> := <var:t1> ; <var:G> := <var:G> + <var:t0> {{ <var:G> = <nat:8> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:t0> = <nat:1> /\ <var:G> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:G> = <nat:8> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 