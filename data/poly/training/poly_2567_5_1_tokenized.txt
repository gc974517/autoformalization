\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:w1> := <var:t> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:3> ; <var:k> := <var:w1> <var:k> := <var:k> + <var:w0> \end{verbatim} Allow letting positive integers $ <var:h> $ that $ <var:t> = <var:h> $ prior to interpreting our set of instructions it must be that we have $ <var:k> = <nat:3> \cdot <var:h> + <nat:7> $ when list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:h> \} \\ <var:w1> := <var:t> ; \\ \{ <var:t> = <var:h> \land <var:w1> = <var:h> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:t> = <var:h> \land <var:w1> = <var:h> \land <var:w0> = <nat:7> \} \\ <var:w1> := <var:w1> * <nat:3> ; \\ \{ <var:t> = <var:h> \land <var:w1> = <nat:3> \cdot <var:h> \land <var:w0> = <nat:7> \} \\ <var:k> := <var:w1> \\ \{ <var:t> = <var:h> \land <var:w0> = <nat:7> \land <var:k> = <nat:3> \cdot <var:h> \} \\ <var:k> := <var:k> + <var:w0> \\ \{ <var:t> = <var:h> \land <var:k> = <nat:3> \cdot <var:h> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:t> = <var:h> }} <var:w1> := <var:t> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:3> ; <var:k> := <var:w1> <var:k> := <var:k> + <var:w0> {{ <var:k> = <nat:3> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:w1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:w1> = <var:h> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:w1> = <nat:3> * <var:h> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:w0> = <nat:7> /\ <var:k> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:k> = <nat:3> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 