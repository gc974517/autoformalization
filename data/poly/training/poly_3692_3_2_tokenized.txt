\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <var:o> * <var:h> ; <var:o> := <nat:1> + <var:o> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:h> = <var:n> $ before evaluating this code segment it must be that we see $ <var:o> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:n> \} \\ <var:o> := <nat:4> ; \\ \{ <var:h> = <var:n> \land <var:o> = <nat:4> \} \end{eqnarray} Advancing evaluating the segment of code returns : \begin{eqnarray} <var:o> := <var:o> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:o> = <nat:4> \times <var:n> + \} \\ <var:o> := <nat:1> + <var:o> * <var:h> \\ \{ <var:h> = <var:n> \land <var:o> = <nat:4> \times <var:n> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <var:o> * <var:h> ; <var:o> := <nat:1> + <var:o> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:h> = <var:n> }} <def:poly> {{ <var:o> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:o> = <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:o> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 