\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:p0> := <nat:8> ; <var:S> := <var:p0> \end{verbatim} Given that $ <var:P> = <var:w> $ ahead of the evaluation of our segment of code , it must be that we see $ <var:S> = <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:P> = <var:w> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:P> = <var:w> \land <var:p0> = <nat:8> \} \\ <var:S> := <var:p0> \\ \{ <var:P> = <var:w> \land <var:S> = <nat:8> \} \end{eqnarray} As a result , this segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:P> = <var:w> }} <var:p0> := <nat:8> ; <var:S> := <var:p0> {{ <var:S> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:S> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 