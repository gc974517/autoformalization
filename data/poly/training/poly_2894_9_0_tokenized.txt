\begin{document} \begin{theorem} Let the following program in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:8> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:z> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:z> ; <var:j2> := <var:j2> * <var:z> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> \end{verbatim} Allowing it to hold that $ <var:z> = <var:D> $ prior to executing our list of commands , it holds that $ <var:N> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:8> $ . \end{theorem} \begin{proof} The application of Hoare reasoning gives us : \begin{eqnarray} \{ <var:z> = <var:D> \} \\ <var:j0> := <nat:8> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \} \\ <var:j1> := <nat:2> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \} \\ <var:j1> := <var:j1> * <var:z> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \times <var:D> \} \\ <var:j2> := <nat:3> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \times <var:D> \land <var:j2> = <nat:3> \} \\ <var:j2> := <var:j2> * <var:z> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \times <var:D> \land <var:j2> = <nat:3> \times <var:D> \} \\ <var:j2> := <var:j2> * <var:z> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \times <var:D> \land <var:j2> = <nat:3> \times <var:D> ^ <nat:2> \} \\ <var:N> := <var:j2> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:j1> = <nat:2> \times <var:D> \land <var:N> = <nat:3> \times <var:D> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:j1> ; \\ \{ <var:z> = <var:D> \land <var:j0> = <nat:8> \land <var:N> = <nat:3> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> \} \\ <var:N> := <var:N> + <var:j0> \\ \{ <var:z> = <var:D> \land <var:N> = <nat:3> \times <var:D> ^ <nat:2> + <nat:2> \times <var:D> + <nat:8> \} \end{eqnarray} Considering the preceding argument , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:z> = <var:D> }} <var:j0> := <nat:8> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:z> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:z> ; <var:j2> := <var:j2> * <var:z> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> {{ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> * <var:D> /\ <var:j2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> * <var:D> /\ <var:j2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> * <var:D> /\ <var:j2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:j1> = <nat:2> * <var:D> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:j0> = <nat:8> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:N> = <nat:3> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 