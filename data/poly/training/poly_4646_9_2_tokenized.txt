\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <nat:3> + <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <nat:4> + <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume that we have $ <var:j> = <var:z> $ ahead of evaluating this code , it holds that $ <var:Z> = <nat:1> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> $ when set of commands terminates . \end{theorem} \begin{proof} Proving correctness for the list of instructions is accomplished through standard Hoare logic . Moving forward , \[ \begin{tabular} {rcl} \{ <var:j> = <var:z> \} & <var:Z> := <nat:1> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \} & <var:Z> := <nat:3> + <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> + <nat:3> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> + <nat:3> \} & <var:Z> := <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:z> \} & <var:Z> := <nat:1> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \} & <var:Z> := <nat:3> + <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> + <nat:3> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> + <nat:3> \} & <var:Z> := <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + \} & <var:Z> := <nat:4> + <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:4> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:4> \} & <var:Z> := <nat:1> + <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> + <nat:1> \} \\ \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> + <nat:1> \} & <var:Z> := <nat:1> + <var:Z> * <var:j> & \{ <var:j> = <var:z> \land <var:Z> = <nat:1> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> \} \end{tabular} This is sound using the binding scheme defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:1> ; <var:Z> := <nat:3> + <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <nat:4> + <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <var:Z> * <var:j> ; <var:Z> := <nat:1> + <var:Z> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:j> = <var:z> }} <def:poly> {{ <var:Z> = <nat:1> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Z> = <nat:1> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 