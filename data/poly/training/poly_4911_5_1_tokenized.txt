\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:z> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:3> ; <var:y> := <var:a1> <var:y> := <var:y> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:n> $ prior to running our segment of code , it must be that we see $ <var:y> = <nat:3> \times <var:n> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} Showing our claim about correctness for the program is clear by usual Hoare techniques . Jumping to the subsequent line of code found in our list of instructions , we see the variable binding code yielding $ <var:z> $ into $ <var:a1>$ . This advances the condition $ \{ <var:z> = <var:n> \} $ to the postcondition $ \{ <var:z> = <var:n> \land <var:a1> = <var:n> \} $ . This is deduced with the assignment inference rule found in usual Hoare reasoning . Taking another step toward the next bit of code in our code segment , we have the variable binding command \verb | <var:a0> := <nat:2> ; | . This statement transfers the precondition $ \{ <var:z> = <var:n> \land <var:a1> = <var:n> \} $ to the postcondition $ \{ <var:z> = <var:n> \land <var:a1> = <var:n> \land <var:a0> = <nat:2> \} $ . Moving on , we see the command \verb | <var:a1> := <var:a1> * <nat:3> ; | . This forwards the condition $ \{ <var:z> = <var:n> \land <var:a1> = <var:n> \land <var:a0> = <nat:2> \} $ to $ \{ <var:z> = <var:n> \land <var:a1> = <nat:3> * <var:n> \land <var:a0> = <nat:2> \} $ . This is known to be sound with the assignment law given by Hoare logic . Now , the assignment code \verb | <var:y> := <var:a1> | . This code moves the precondition $ \{ <var:z> = <var:n> \land <var:a1> = <nat:3> * <var:n> \land <var:a0> = <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:n> \land <var:a0> = <nat:2> \land <var:y> = <nat:3> * <var:n> \} $ . Moving on , we see the variable assignmet code \verb | <var:y> := <var:y> + <var:a0> | . This transfers the condition $ \{ <var:z> = <var:n> \land <var:a0> = <nat:2> \land <var:y> = <nat:3> * <var:n> \} $ as $ \{ <var:z> = <var:n> \land <var:y> = <nat:3> * <var:n> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:z> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:3> ; <var:y> := <var:a1> <var:y> := <var:y> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <def:poly> {{ <var:y> = <nat:3> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:a1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:a1> = <var:n> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:a1> = <nat:3> * <var:n> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:a0> = <nat:2> /\ <var:y> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:y> = <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 