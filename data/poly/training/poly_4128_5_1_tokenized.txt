\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:t> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:3> ; <var:m> := <var:x1> <var:m> := <var:m> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:t> = <var:Q> $ before the execution of our list of instructions it must be that we see $ <var:m> = <nat:3> * <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be given with usual Hoare reasoning . Jumping to the proceeding lines seen in the segment of code , \begin{eqnarray} \{ <var:t> = <var:Q> \} \, <var:x1> := <var:t> \, \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \} \\ \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \} \, <var:x0> := <nat:2> \, \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \land <var:x0> = <nat:2> \} \\ \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \land <var:x0> = <nat:2> \} \, <var:x1> := <var:x1> * <nat:3> \, \{ <var:t> = <var:Q> \land <var:x1> = <nat:3> \times <var:Q> \land <var:x0> = <nat:2> \} \end{eqnarray} Immediately following , we have \begin{eqnarray} \{ <var:t> = <var:Q> \} \, <var:x1> := <var:t> \, \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \} \\ \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \} \, <var:x0> := <nat:2> \, \{ <var:t> = <var:Q> \land <var:x1> = <var:Q> \land <var:x0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:t> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:3> ; <var:m> := <var:x1> <var:m> := <var:m> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:t> = <var:Q> }} <def:poly> {{ <var:m> = <nat:3> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:x1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:x1> = <var:Q> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:x1> = <nat:3> * <var:Q> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:x0> = <nat:2> /\ <var:m> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Q> /\ <var:m> = <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 