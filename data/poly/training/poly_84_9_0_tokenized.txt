\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:Y> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:Y> ; <var:y2> := <var:y2> * <var:Y> ; <var:v> := <var:y2> ; <var:v> := <var:v> + <var:y1> ; <var:v> := <var:v> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume assuming some positive integers $ <var:r> $ $ <var:Y> = <var:r> $ prior to running this program , then $ <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions can be shown through typical Hoare reasoning . Shifting focus toward the subsequent statement in the series of instructions , the binding line \verb | <var:y0> := <nat:6> ; | . This line redefines $ \{ <var:Y> = <var:r> \} $ as $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \} $ . Next , the environment update statement \verb | <var:y1> := <nat:3> ; | . This takes $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \} $ to the condition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> \} $ . Paying attention to the following line of code contained in the code segment , we have the line \verb | <var:y1> := <var:y1> * <var:Y> ; | . This takes $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> \} $ into the condition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \} $ . This is shown with the assignment inference rule defined by typical Hoare logic . Observing the proceeding step in the code , we have the code letting $ <nat:3> $ as $ <var:y2>$ . This code redefines the precondition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \} $ toward $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> \} $ . This is shown to be logically sound with the assignment rule given by typical Hoare techniques . Advancing , the binding statement \verb | <var:y2> := <var:y2> * <var:Y> ; | . This forwards the condition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> \} $ into the postcondition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> * <var:r> \} $ . Looking at the following bit of code contained in our list of instructions , the variable update code yielding $ <var:y2> * <var:Y> $ as $ <var:y2>$ . This command redefines $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> * <var:r> \} $ to $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> * <var:r> ^ <nat:2> \} $ . Honing in on the subsequent line in the series of commands , the assignment code giving $ <var:y2> $ as $ <var:v>$ . This takes $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:y2> = <nat:3> * <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:v> = <nat:3> * <var:r> ^ <nat:2> \} $ . This is ensured using the assignment inference rule from typical Hoare techniques . Advancing to the next bit of code found in our series of instructions , we have the command binding $ <var:v> + <var:y1> $ as $ <var:v>$ . This transfers the precondition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:y1> = <nat:3> * <var:r> \land <var:v> = <nat:3> * <var:r> ^ <nat:2> \} $ toward $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> \} $ . This is shown to be logically sound with the assignment scheme obtained from Hoare logic . Moving on to the next step , we see the variable binding code \verb | <var:v> := <var:v> + <var:y0> | . This forwards the condition $ \{ <var:Y> = <var:r> \land <var:y0> = <nat:6> \land <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> \} $ to $ \{ <var:Y> = <var:r> \land <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:Y> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:Y> ; <var:y2> := <var:y2> * <var:Y> ; <var:v> := <var:y2> ; <var:v> := <var:v> + <var:y1> ; <var:v> := <var:v> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Y> = <var:r> }} <def:poly> {{ <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> * <var:r> /\ <var:y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> * <var:r> /\ <var:y2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> * <var:r> /\ <var:y2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:3> * <var:r> /\ <var:v> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:y0> = <nat:6> /\ <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:v> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 