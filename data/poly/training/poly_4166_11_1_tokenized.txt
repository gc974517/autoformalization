\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:a1> := <var:l> ; <var:a2> := <var:a1> * <var:l> ; <var:a3> := <var:a2> * <var:l> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:3> ; <var:a3> := <var:a3> * <nat:9> ; <var:w> := <var:a3> <var:w> := <var:w> + <var:a2> <var:w> := <var:w> + <var:a1> <var:w> := <var:w> + <var:a0> \end{verbatim} Assuming that we have $ <var:l> = <var:G> $ prior to the evaluation of the series of instructions , then we see $ <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:4> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Note that this decorated series of instructions . \begin{eqnarray} \{ <var:l> = <var:G> \} \\ <var:a1> := <var:l> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <var:G> \} \end{eqnarray} Allowing the evaluation of the list of instructions results in : \begin{eqnarray} <var:a2> := <var:a1> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <var:G> \land <var:a2> = <var:G> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:l> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <var:G> \land <var:a2> = <var:G> ^ <nat:2> \land <var:a3> = <var:G> ^ <nat:3> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <var:G> \land <var:a2> = <var:G> ^ <nat:2> \land <var:a3> = <var:G> ^ <nat:3> \land <var:a0> = <nat:4> \} \end{eqnarray} Advancing executing the series of commands gives us : \begin{eqnarray} <var:a1> := <var:a1> * <nat:9> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <nat:9> * <var:G> \land <var:a2> = <var:G> ^ <nat:2> \land <var:a3> = <var:G> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ <var:a2> := <var:a2> * <nat:3> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <nat:9> * <var:G> \land <var:a2> = <nat:3> * <var:G> ^ <nat:2> \land <var:a3> = <var:G> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ <var:a3> := <var:a3> * <nat:9> ; \\ \{ <var:l> = <var:G> \land <var:a1> = <nat:9> * <var:G> \land <var:a2> = <nat:3> * <var:G> ^ <nat:2> \land <var:a3> = <nat:9> * <var:G> ^ <nat:3> \land <var:a0> = <nat:4> \} \\ <var:w> := <var:a3> \\ \{ <var:l> = <var:G> \land <var:a1> = <nat:9> * <var:G> \land <var:a2> = <nat:3> * <var:G> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:w> = <nat:9> * <var:G> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:a2> \\ \{ <var:l> = <var:G> \land <var:a1> = <nat:9> * <var:G> \land <var:a0> = <nat:4> \land <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:a1> \\ \{ <var:l> = <var:G> \land <var:a0> = <nat:4> \land <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> \} \\ <var:w> := <var:w> + <var:a0> \\ \{ <var:l> = <var:G> \land <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:l> = <var:G> }} <var:a1> := <var:l> ; <var:a2> := <var:a1> * <var:l> ; <var:a3> := <var:a2> * <var:l> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:3> ; <var:a3> := <var:a3> * <nat:9> ; <var:w> := <var:a3> <var:w> := <var:w> + <var:a2> <var:w> := <var:w> + <var:a1> <var:w> := <var:w> + <var:a0> {{ <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <var:G> /\ <var:a2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <var:G> /\ <var:a2> = <var:G> ^ <nat:2> /\ <var:a3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <var:G> /\ <var:a2> = <var:G> ^ <nat:2> /\ <var:a3> = <var:G> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <nat:9> * <var:G> /\ <var:a2> = <var:G> ^ <nat:2> /\ <var:a3> = <var:G> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <nat:9> * <var:G> /\ <var:a2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:a3> = <var:G> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <nat:9> * <var:G> /\ <var:a2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:a3> = <nat:9> * <var:G> ^ <nat:3> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <nat:9> * <var:G> /\ <var:a2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:w> = <nat:9> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a1> = <nat:9> * <var:G> /\ <var:a0> = <nat:4> /\ <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:a0> = <nat:4> /\ <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:w> = <nat:9> * <var:G> ^ <nat:3> + <nat:3> * <var:G> ^ <nat:2> + <nat:9> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 