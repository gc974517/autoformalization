\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:7> ; <var:x> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Given given any natural numbers $ <var:M> $ that we have $ <var:F> = <var:M> $ before interpreting this set of commands then we see $ <var:x> = <nat:7> $ when series of commands has exited . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:F> = <var:M> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:F> = <var:M> \land <var:o0> = <nat:7> \} \\ <var:x> := <var:o0> \\ \{ <var:F> = <var:M> \land <var:x> = <nat:7> \} \end{eqnarray} Thusly , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:7> ; <var:x> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:F> = <var:M> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 