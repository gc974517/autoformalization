\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:3> ; <var:A> := <var:l0> \end{verbatim} Allow given all $ <var:s> $ it to hold that $ <var:N> = <var:s> $ prior to executing our list of commands it holds that $ <var:A> = <nat:3> $ once series of instructions is done executing . \end{theorem} \begin{proof} The method of proof for the code segment is clear by standard Hoare techniques . Stepping through , we have \begin{eqnarray} \{ <var:N> = <var:s> \} \, <var:l0> := <nat:3> \, \{ <var:N> = <var:s> \land <var:l0> = <nat:3> \} \\ \{ <var:N> = <var:s> \land <var:l0> = <nat:3> \} \, <var:A> := <var:l0\, \{ <var:N> = <var:s> \land <var:A> = <nat:3> \} \end{eqnarray} This is sound through the variable binding inference rule defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:N> = <var:s> }} <var:l0> := <nat:3> ; <var:A> := <var:l0> {{ <var:A> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:A> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 