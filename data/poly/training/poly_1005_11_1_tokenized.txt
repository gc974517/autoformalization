\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:B> ; <var:T2> := <var:T1> * <var:B> ; <var:T3> := <var:T2> * <var:B> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:4> ; <var:l> := <var:T3> <var:l> := <var:l> + <var:T2> <var:l> := <var:l> + <var:T1> <var:l> := <var:l> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:B> = <var:Z> $ prior to the evaluation of the program , it must be that we see $ <var:l> = <nat:4> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> $ after series of instructions has finished . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:B> = <var:Z> \} \\ <var:T1> := <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <var:Z> \} \\ <var:T2> := <var:T1> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <var:Z> \land <var:T2> = <var:Z> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:B> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <var:Z> \land <var:T2> = <var:Z> ^ <nat:2> \land <var:T3> = <var:Z> ^ <nat:3> \} \\ <var:T0> := <nat:6> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <var:Z> \land <var:T2> = <var:Z> ^ <nat:2> \land <var:T3> = <var:Z> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ <var:T1> := <var:T1> * <nat:3> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <nat:3> \times <var:Z> \land <var:T2> = <var:Z> ^ <nat:2> \land <var:T3> = <var:Z> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ <var:T2> := <var:T2> * <nat:8> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <nat:3> \times <var:Z> \land <var:T2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:T3> = <var:Z> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ <var:T3> := <var:T3> * <nat:4> ; \\ \{ <var:B> = <var:Z> \land <var:T1> = <nat:3> \times <var:Z> \land <var:T2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:T3> = <nat:4> \times <var:Z> ^ <nat:3> \land <var:T0> = <nat:6> \} \\ <var:l> := <var:T3> \\ \{ <var:B> = <var:Z> \land <var:T1> = <nat:3> \times <var:Z> \land <var:T2> = <nat:8> \times <var:Z> ^ <nat:2> \land <var:T0> = <nat:6> \land <var:l> = <nat:4> \times <var:Z> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:T2> \\ \{ <var:B> = <var:Z> \land <var:T1> = <nat:3> \times <var:Z> \land <var:T0> = <nat:6> \land <var:l> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:8> \times <var:Z> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:T1> \\ \{ <var:B> = <var:Z> \land <var:T0> = <nat:6> \land <var:l> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:8> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} \\ <var:l> := <var:l> + <var:T0> \\ \{ <var:B> = <var:Z> \land <var:l> = <nat:4> \times <var:Z> ^ <nat:3> + <nat:8> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:6> \} \end{eqnarray} Given the above , our set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:B> ; <var:T2> := <var:T1> * <var:B> ; <var:T3> := <var:T2> * <var:B> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:4> ; <var:l> := <var:T3> <var:l> := <var:l> + <var:T2> <var:l> := <var:l> + <var:T1> <var:l> := <var:l> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:B> = <var:Z> }} <def:poly> {{ <var:l> = <nat:4> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <var:Z> /\ <var:T2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <var:Z> /\ <var:T2> = <var:Z> ^ <nat:2> /\ <var:T3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <var:Z> /\ <var:T2> = <var:Z> ^ <nat:2> /\ <var:T3> = <var:Z> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <nat:3> * <var:Z> /\ <var:T2> = <var:Z> ^ <nat:2> /\ <var:T3> = <var:Z> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <nat:3> * <var:Z> /\ <var:T2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:T3> = <var:Z> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <nat:3> * <var:Z> /\ <var:T2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:Z> ^ <nat:3> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <nat:3> * <var:Z> /\ <var:T2> = <nat:8> * <var:Z> ^ <nat:2> /\ <var:T0> = <nat:6> /\ <var:l> = <nat:4> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T1> = <nat:3> * <var:Z> /\ <var:T0> = <nat:6> /\ <var:l> = <nat:4> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:T0> = <nat:6> /\ <var:l> = <nat:4> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Z> /\ <var:l> = <nat:4> * <var:Z> ^ <nat:3> + <nat:8> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 