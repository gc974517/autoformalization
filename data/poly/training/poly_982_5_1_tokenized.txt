\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:m> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:3> ; <var:O> := <var:t1> <var:O> := <var:O> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:m> = <var:I> $ , given all $ <var:I> \in \mathbb{Z}^+ $ , ahead of the evaluation of this set of commands it holds that we see $ <var:O> = <nat:3> \cdot <var:I> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is demonstrated using typical Hoare logic . Moving on to the next step , we see \verb | { <var:m> = <var:I> } <var:t1> := <var:m> { <var:m> = <var:I> \land <var:t1> = <var:I> } | , \verb | { <var:m> = <var:I> \land <var:t1> = <var:I> } <var:t0> := <nat:3> { <var:m> = <var:I> \land <var:t1> = <var:I> \land <var:t0> = <nat:3> } | , \verb | { <var:m> = <var:I> \land <var:t1> = <var:I> \land <var:t0> = <nat:3> } <var:t1> := <var:t1> * <nat:3> { <var:m> = <var:I> \land <var:t1> = <nat:3> * <var:I> \land <var:t0> = <nat:3> } | , \verb | { <var:m> = <var:I> \land <var:t1> = <nat:3> * <var:I> \land <var:t0> = <nat:3> } <var:O> := <var:t1{ <var:m> = <var:I> \land <var:t0> = <nat:3> \land <var:O> = <nat:3> * <var:I> } | and \verb | { <var:m> = <var:I> \land <var:t0> = <nat:3> \land <var:O> = <nat:3> * <var:I> } <var:O> := <var:O> + <var:t0{ <var:m> = <var:I> \land <var:O> = <nat:3> * <var:I> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t1> := <var:m> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:3> ; <var:O> := <var:t1> <var:O> := <var:O> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:m> = <var:I> }} <def:poly> {{ <var:O> = <nat:3> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:t1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:t1> = <var:I> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:t1> = <nat:3> * <var:I> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:t0> = <nat:3> /\ <var:O> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:O> = <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 