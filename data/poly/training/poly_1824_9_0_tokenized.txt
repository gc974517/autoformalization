\begin{document} \begin{theorem} Consider the following code segment as follows \begin{verbatim} <var:t0> := <nat:6> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:o> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:o> ; <var:t2> := <var:t2> * <var:o> ; <var:G> := <var:t2> ; <var:G> := <var:G> + <var:t1> ; <var:G> := <var:G> + <var:t0> \end{verbatim} Assume it to be that $ <var:o> = <var:J> $ prior to the evaluation of our set of commands , it holds that we have $ <var:G> = <nat:8> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:6> $ . \end{theorem} \begin{proof} Note that the below decorated code . \begin{eqnarray} \{ <var:o> = <var:J> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \} \\ <var:t1> := <nat:3> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> \} \\ <var:t1> := <var:t1> * <var:o> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> * <var:J> \} \\ <var:t2> := <nat:8> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> * <var:J> \land <var:t2> = <nat:8> \} \\ <var:t2> := <var:t2> * <var:o> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> * <var:J> \land <var:t2> = <nat:8> * <var:J> \} \\ <var:t2> := <var:t2> * <var:o> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> * <var:J> \land <var:t2> = <nat:8> * <var:J> ^ <nat:2> \} \\ <var:G> := <var:t2> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:t1> = <nat:3> * <var:J> \land <var:G> = <nat:8> * <var:J> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:t1> ; \\ \{ <var:o> = <var:J> \land <var:t0> = <nat:6> \land <var:G> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> \} \\ <var:G> := <var:G> + <var:t0> \\ \{ <var:o> = <var:J> \land <var:G> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> \} \end{eqnarray} The application of usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:o> = <var:J> }} <var:t0> := <nat:6> ; <var:t1> := <nat:3> ; <var:t1> := <var:t1> * <var:o> ; <var:t2> := <nat:8> ; <var:t2> := <var:t2> * <var:o> ; <var:t2> := <var:t2> * <var:o> ; <var:G> := <var:t2> ; <var:G> := <var:G> + <var:t1> ; <var:G> := <var:G> + <var:t0> {{ <var:G> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> * <var:J> /\ <var:t2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> * <var:J> /\ <var:t2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> * <var:J> /\ <var:t2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:t1> = <nat:3> * <var:J> /\ <var:G> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:t0> = <nat:6> /\ <var:G> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:J> /\ <var:G> = <nat:8> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 