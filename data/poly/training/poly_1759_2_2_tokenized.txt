\begin{document} \begin{theorem} Take a code segment as \begin{verbatim} <var:Z> := <nat:2> ; <var:Z> := <nat:1> + <var:Z> * <var:j> \end{verbatim} Assuming $ <var:j> = <var:N> $ --- for some natural numbers $ <var:N> $ --- ahead of running the code segment , it holds that we have $ <var:Z> = <nat:2> * <var:N> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is given through standard Hoare logic . Moving on to the proceeding command seen in our program , the variable binding command \verb | <var:Z> := <nat:2> ; | . This line redefines the condition $ \{ <var:j> = <var:N> \} $ toward the condition $ \{ <var:j> = <var:N> \land <var:Z> = <nat:2> \} $ . Keeping momentum , we see the variable update line assigning $ <nat:1> + <var:Z> * <var:j$ toward $ <var:Z>$ . This moves the precondition $ \{ <var:j> = <var:N> \land <var:Z> = <nat:2> \} $ to the postcondition $ \{ <var:j> = <var:N> \land <var:Z> = <nat:2> \times <var:N> + <nat:1> \} $ . This is sound by the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:j> = <var:N> }} <var:Z> := <nat:2> ; <var:Z> := <nat:1> + <var:Z> * <var:j> {{ <var:Z> = <nat:2> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:Z> = <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 