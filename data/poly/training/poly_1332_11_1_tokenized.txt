\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:g> ; <var:E2> := <var:E1> * <var:g> ; <var:E3> := <var:E2> * <var:g> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:3> ; <var:z> := <var:E3> <var:z> := <var:z> + <var:E2> <var:z> := <var:z> + <var:E1> <var:z> := <var:z> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:g> = <var:s> $ ahead of the execution of this series of commands , it follows that we see $ <var:z> = <nat:3> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:8> \cdot <var:s> + <nat:1> $ after code has exited . \end{theorem} \begin{proof} The flow of logic for this series of commands is done through Hoare reasoning . Moving onward , we see \begin{eqnarray} \{ <var:g> = <var:s> \} \, <var:E1> := <var:g> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \} \end{eqnarray} This is deduced through the assignment law of typical Hoare reasoning . Going forward , we see \begin{eqnarray} \{ <var:g> = <var:s> \} \, <var:E1> := <var:g> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \} \end{eqnarray} This is known to be sound with the variable binding rule defined in Hoare reasoning . Moving on to the next step , we see \begin{eqnarray} \{ <var:g> = <var:s> \} \, <var:E1> := <var:g> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <var:s> \} \, <var:E2> := <var:E1> * <var:g> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:g> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \} \, <var:E0> := <nat:1> \, \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \, <var:E1> := <var:E1> * <nat:8> \, \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \, <var:E2> := <var:E2> * <nat:2> \, \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E3> = <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \, <var:E3> := <var:E3> * <nat:3> \, \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E3> = <nat:3> \cdot <var:s> ^ <nat:3> \land <var:E0> = <nat:1> \} \, <var:z> := <var:E3\, \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:z> = <nat:3> \cdot <var:s> ^ <nat:3> \} \\ \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E2> = <nat:2> \cdot <var:s> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:z> = <nat:3> \cdot <var:s> ^ <nat:3> \} \, <var:z> := <var:z> + <var:E2\, \{ <var:g> = <var:s> \land <var:E1> = <nat:8> \cdot <var:s> \land <var:E0> = <nat:1> \land <var:z> = <nat:3> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:g> ; <var:E2> := <var:E1> * <var:g> ; <var:E3> := <var:E2> * <var:g> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:3> ; <var:z> := <var:E3> <var:z> := <var:z> + <var:E2> <var:z> := <var:z> + <var:E1> <var:z> := <var:z> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:g> = <var:s> }} <def:poly> {{ <var:z> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <nat:8> * <var:s> /\ <var:E2> = <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <nat:8> * <var:s> /\ <var:E2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:E3> = <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <nat:8> * <var:s> /\ <var:E2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:E3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <nat:8> * <var:s> /\ <var:E2> = <nat:2> * <var:s> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:z> = <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E1> = <nat:8> * <var:s> /\ <var:E0> = <nat:1> /\ <var:z> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:E0> = <nat:1> /\ <var:z> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:s> /\ <var:z> = <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 