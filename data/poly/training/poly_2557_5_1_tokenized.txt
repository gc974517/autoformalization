\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:S> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:q> := <var:d1> <var:q> := <var:q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( assuming some positive integer coefficients $ <var:g> $ ) that we have $ <var:S> = <var:g> $ ahead of the evaluation of the code , it holds that we have $ <var:q> = <nat:7> \cdot <var:g> + <nat:8> $ once list of instructions is done . \end{theorem} \begin{proof} The argument for the segment of code can be shown by this decorated code segment . \begin{eqnarray} \{ <var:S> = <var:g> \} \\ <var:d1> := <var:S> ; \\ \{ <var:S> = <var:g> \land <var:d1> = <var:g> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:S> = <var:g> \land <var:d1> = <var:g> \land <var:d0> = <nat:8> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:S> = <var:g> \land <var:d1> = <nat:7> \cdot <var:g> \land <var:d0> = <nat:8> \} \\ <var:q> := <var:d1> \\ \{ <var:S> = <var:g> \land <var:d0> = <nat:8> \land <var:q> = <nat:7> \cdot <var:g> \} \\ <var:q> := <var:q> + <var:d0> \\ \{ <var:S> = <var:g> \land <var:q> = <nat:7> \cdot <var:g> + <nat:8> \} \end{eqnarray} Using Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:S> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:q> := <var:d1> <var:q> := <var:q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:S> = <var:g> }} <def:poly> {{ <var:q> = <nat:7> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:d1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:d1> = <var:g> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:d1> = <nat:7> * <var:g> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:d0> = <nat:8> /\ <var:q> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:g> /\ <var:q> = <nat:7> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 