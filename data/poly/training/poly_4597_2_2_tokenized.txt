\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:2> + <var:j> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Given ( for any natural numbers $ <var:L> $ ) it to be that $ <var:K> = <var:L> $ prior to executing the series of commands it follows that we see $ <var:j> = <nat:3> * <var:L> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is done through typical Hoare logic . Taking another step toward the subsequent line contained in our series of commands , \begin{verbatim} { <var:K> = <var:L> } <var:j> := <nat:3> { <var:K> = <var:L> \land <var:j> = <nat:3> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:K> = <var:L> } <var:j> := <nat:3> { <var:K> = <var:L> \land <var:j> = <nat:3> } \end{verbatim} This is deduced through the assignment scheme from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:3> ; <var:j> := <nat:2> + <var:j> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:K> = <var:L> }} <def:poly> {{ <var:j> = <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:j> = <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 