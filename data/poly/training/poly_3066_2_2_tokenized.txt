\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:M> := <nat:3> ; <var:M> := <nat:1> + <var:M> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:z> = <var:W> $ prior to the execution of this segment of code , it holds that we have $ <var:M> = <nat:3> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands can be done using this decorated set of instructions . \begin{eqnarray} \{ <var:z> = <var:W> \} \\ <var:M> := <nat:3> ; \\ \{ <var:z> = <var:W> \land <var:M> = <nat:3> \} \\ <var:M> := <nat:1> + <var:M> * <var:z> \\ \{ <var:z> = <var:W> \land <var:M> = <nat:3> \cdot <var:W> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:3> ; <var:M> := <nat:1> + <var:M> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:z> = <var:W> }} <def:poly> {{ <var:M> = <nat:3> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:M> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:W> /\ <var:M> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 