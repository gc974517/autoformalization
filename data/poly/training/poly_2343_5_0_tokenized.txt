\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:V> ; <var:j> := <var:Z1> ; <var:j> := <var:j> + <var:Z0> \end{verbatim} Given that we have $ <var:V> = <var:i> $ --- for some natural coefficients $ <var:i> $ --- prior to evaluating the program , it must be that $ <var:j> = <nat:1> \times <var:i> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is clear using Hoare logic . Stepping forward , we have \begin{verbatim} { <var:V> = <var:i> } <var:Z0> := <nat:1> { <var:V> = <var:i> \land <var:Z0> = <nat:1> } \end{verbatim} This is sound by the rule defined by standard Hoare techniques . Moving on , we see \begin{verbatim} { <var:V> = <var:i> } <var:Z0> := <nat:1> { <var:V> = <var:i> \land <var:Z0> = <nat:1> } \end{verbatim} Advancing to the next lines of codein our set of commands , we see \begin{verbatim} { <var:V> = <var:i> } <var:Z0> := <nat:1> { <var:V> = <var:i> \land <var:Z0> = <nat:1> } { <var:V> = <var:i> \land <var:Z0> = <nat:1> } <var:Z1> := <nat:1> { <var:V> = <var:i> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:1> } \end{verbatim} This is sound through the variable update inference rule in typical Hoare techniques . Jumping to the proceeding command seen in the set of commands , we have \begin{verbatim} { <var:V> = <var:i> } <var:Z0> := <nat:1> { <var:V> = <var:i> \land <var:Z0> = <nat:1> } \end{verbatim} This is shown using the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <var:Z0> := <nat:1> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:V> ; <var:j> := <var:Z1> ; <var:j> := <var:j> + <var:Z0> {{ <var:j> = <nat:1> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Z0> = <nat:1> /\ <var:j> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:j> = <nat:1> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 