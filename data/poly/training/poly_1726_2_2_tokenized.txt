\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:2> + <var:H> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume it to hold that $ <var:W> = <var:e> $ ( with some natural numbers $ <var:e> $ ) ahead of evaluating our code , it follows that we see $ <var:H> = <nat:2> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:W> = <var:e> \} \\ <var:H> := <nat:2> ; \\ \{ <var:W> = <var:e> \land <var:H> = <nat:2> \} \\ <var:H> := <nat:2> + <var:H> * <var:W> \\ \{ <var:W> = <var:e> \land <var:H> = <nat:2> \times <var:e> + <nat:2> \} \end{eqnarray} Given the above , this set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:2> ; <var:H> := <nat:2> + <var:H> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:W> = <var:e> }} <def:poly> {{ <var:H> = <nat:2> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:H> = <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 