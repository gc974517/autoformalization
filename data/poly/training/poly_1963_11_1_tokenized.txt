\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:6> ; <var:D2> := <var:D2> * <nat:5> ; <var:D3> := <var:D3> * <nat:7> ; <var:M> := <var:D3> <var:M> := <var:M> + <var:D2> <var:M> := <var:M> + <var:D1> <var:M> := <var:M> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:V> = <var:X> $ --- taking whole numbers $ <var:X> $ --- before evaluating the list of instructions it holds that $ <var:M> = <nat:7> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:4> $ once series of commands finishes . \end{theorem} \begin{proof} The method of proof for the code is evident by typical Hoare logic . Going forward , we have \begin{verbatim} { <var:V> = <var:X> } <var:D1> := <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> } { <var:V> = <var:X> \land <var:D1> = <var:X> } <var:D2> := <var:D1> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } <var:D3> := <var:D2> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> } \end{verbatim} Moving on to the following lines of codecontained in our series of commands , we have \begin{verbatim} { <var:V> = <var:X> } <var:D1> := <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> } { <var:V> = <var:X> \land <var:D1> = <var:X> } <var:D2> := <var:D1> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } <var:D3> := <var:D2> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> } { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> } <var:D0> := <nat:4> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> \land <var:D3> = <var:X> ^ <nat:3> \land <var:D0> = <nat:4> } \end{verbatim} Moving forward to the subsequent lines seen in our list of commands , we have \begin{verbatim} { <var:V> = <var:X> } <var:D1> := <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> } { <var:V> = <var:X> \land <var:D1> = <var:X> } <var:D2> := <var:D1> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } \end{verbatim} Moving forward , we have \begin{verbatim} { <var:V> = <var:X> } <var:D1> := <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> } { <var:V> = <var:X> \land <var:D1> = <var:X> } <var:D2> := <var:D1> * <var:V> { <var:V> = <var:X> \land <var:D1> = <var:X> \land <var:D2> = <var:X> ^ <nat:2> } \end{verbatim} This is sound with the variable binding law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:V> ; <var:D2> := <var:D1> * <var:V> ; <var:D3> := <var:D2> * <var:V> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:6> ; <var:D2> := <var:D2> * <nat:5> ; <var:D3> := <var:D3> * <nat:7> ; <var:M> := <var:D3> <var:M> := <var:M> + <var:D2> <var:M> := <var:M> + <var:D1> <var:M> := <var:M> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:V> = <var:X> }} <def:poly> {{ <var:M> = <nat:7> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <nat:6> * <var:X> /\ <var:D2> = <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <nat:6> * <var:X> /\ <var:D2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:D3> = <var:X> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <nat:6> * <var:X> /\ <var:D2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:D3> = <nat:7> * <var:X> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <nat:6> * <var:X> /\ <var:D2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:D0> = <nat:4> /\ <var:M> = <nat:7> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D1> = <nat:6> * <var:X> /\ <var:D0> = <nat:4> /\ <var:M> = <nat:7> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:D0> = <nat:4> /\ <var:M> = <nat:7> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:X> /\ <var:M> = <nat:7> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 