\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:4> ; <var:A> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Given ( given positive integer coefficients $ <var:N> $ ) $ <var:W> = <var:N> $ before executing the series of instructions , then we have $ <var:A> = <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our set of commands is clear by usual Hoare techniques . Looking at the upcoming line of code contained in the segment of code , we see the variable assignmet line \verb | <var:b0> := <nat:4> ; | . This redefines $ \{ <var:W> = <var:N> \} $ to $ \{ <var:W> = <var:N> \land <var:b0> = <nat:4> \} $ . This is ensured with the assignment law obtained from standard Hoare techniques . Moving forward to the following statement found in our series of instructions , the line letting $ <var:b0$ as $ <var:A>$ . This statement moves the precondition $ \{ <var:W> = <var:N> \land <var:b0> = <nat:4> \} $ into $ \{ <var:W> = <var:N> \land <var:A> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:A> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:W> = <var:N> }} <def:poly> {{ <var:A> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:A> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 