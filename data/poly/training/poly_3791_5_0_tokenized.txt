\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:8> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:M> ; <var:c> := <var:E1> ; <var:c> := <var:c> + <var:E0> \end{verbatim} Allow , given any whole numbers $ <var:g> $ , that $ <var:M> = <var:g> $ prior to running this set of commands , it follows that $ <var:c> = <nat:3> \times <var:g> + <nat:8> $ once set of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:M> = <var:g> \} \\ <var:E0> := <nat:8> ; \\ \{ <var:M> = <var:g> \land <var:E0> = <nat:8> \} \\ <var:E1> := <nat:3> ; \\ \{ <var:M> = <var:g> \land <var:E0> = <nat:8> \land <var:E1> = <nat:3> \} \\ <var:E1> := <var:E1> * <var:M> ; \\ \{ <var:M> = <var:g> \land <var:E0> = <nat:8> \land <var:E1> = <nat:3> \cdot <var:g> \} \\ <var:c> := <var:E1> ; \\ \{ <var:M> = <var:g> \land <var:E0> = <nat:8> \land <var:c> = <nat:3> \cdot <var:g> \} \\ <var:c> := <var:c> + <var:E0> \\ \{ <var:M> = <var:g> \land <var:c> = <nat:3> \cdot <var:g> + <nat:8> \} \end{eqnarray} Thus , the code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:M> = <var:g> }} <var:E0> := <nat:8> ; <var:E1> := <nat:3> ; <var:E1> := <var:E1> * <var:M> ; <var:c> := <var:E1> ; <var:c> := <var:c> + <var:E0> {{ <var:c> = <nat:3> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:E0> = <nat:8> /\ <var:E1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:E0> = <nat:8> /\ <var:c> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:c> = <nat:3> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 