\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:f1> := <var:b> ; <var:f2> := <var:f1> * <var:b> ; <var:f3> := <var:f2> * <var:b> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:1> ; <var:v> := <var:f3> <var:v> := <var:v> + <var:f2> <var:v> := <var:v> + <var:f1> <var:v> := <var:v> + <var:f0> \end{verbatim} Allowing ( for whole numbers $ <var:s> $ ) $ <var:b> = <var:s> $ prior to evaluating the program then we have $ <var:v> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:1> \cdot <var:s> ^ <nat:2> + <nat:5> \cdot <var:s> + <nat:4> $ . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:b> = <var:s> \} \\ <var:f1> := <var:b> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <var:s> \} \\ <var:f2> := <var:f1> * <var:b> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <var:s> \land <var:f2> = <var:s> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:b> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <var:s> \land <var:f2> = <var:s> ^ <nat:2> \land <var:f3> = <var:s> ^ <nat:3> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <var:s> \land <var:f2> = <var:s> ^ <nat:2> \land <var:f3> = <var:s> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <nat:5> \times <var:s> \land <var:f2> = <var:s> ^ <nat:2> \land <var:f3> = <var:s> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f2> := <var:f2> * <nat:1> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <nat:5> \times <var:s> \land <var:f2> = <nat:1> \times <var:s> ^ <nat:2> \land <var:f3> = <var:s> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:f3> := <var:f3> * <nat:1> ; \\ \{ <var:b> = <var:s> \land <var:f1> = <nat:5> \times <var:s> \land <var:f2> = <nat:1> \times <var:s> ^ <nat:2> \land <var:f3> = <nat:1> \times <var:s> ^ <nat:3> \land <var:f0> = <nat:4> \} \\ <var:v> := <var:f3> \\ \{ <var:b> = <var:s> \land <var:f1> = <nat:5> \times <var:s> \land <var:f2> = <nat:1> \times <var:s> ^ <nat:2> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:s> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:f2> \\ \{ <var:b> = <var:s> \land <var:f1> = <nat:5> \times <var:s> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:f1> \\ \{ <var:b> = <var:s> \land <var:f0> = <nat:4> \land <var:v> = <nat:1> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> \} \\ <var:v> := <var:v> + <var:f0> \\ \{ <var:b> = <var:s> \land <var:v> = <nat:1> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> + <nat:4> \} \end{eqnarray} Thusly , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:b> = <var:s> }} <var:f1> := <var:b> ; <var:f2> := <var:f1> * <var:b> ; <var:f3> := <var:f2> * <var:b> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:1> ; <var:v> := <var:f3> <var:v> := <var:v> + <var:f2> <var:v> := <var:v> + <var:f1> <var:v> := <var:v> + <var:f0> {{ <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <var:s> /\ <var:f2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <var:s> /\ <var:f2> = <var:s> ^ <nat:2> /\ <var:f3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <var:s> /\ <var:f2> = <var:s> ^ <nat:2> /\ <var:f3> = <var:s> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <nat:5> * <var:s> /\ <var:f2> = <var:s> ^ <nat:2> /\ <var:f3> = <var:s> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <nat:5> * <var:s> /\ <var:f2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:f3> = <var:s> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <nat:5> * <var:s> /\ <var:f2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:f3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <nat:5> * <var:s> /\ <var:f2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f1> = <nat:5> * <var:s> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:f0> = <nat:4> /\ <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:v> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 