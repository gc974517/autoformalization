\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> \end{verbatim} Given that $ <var:D> = <var:E> $ before evaluating our series of commands , then we see $ <var:Z> = <nat:9> * <var:E> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands can be shown by usual Hoare reasoning . After , we see the variable assignmet statement \verb | <var:x0> := <nat:3> ; | . This code moves $ \{ <var:D> = <var:E> \} $ to $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \} $ . This is sound with the assignment inference rule found in typical Hoare techniques . Shifting focus toward the upcoming line contained in the set of commands , we see the command \verb | <var:x1> := <nat:9> ; | . This transfers the precondition $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \} $ into $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> \} $ . This is rigorously given through the assignment rule defined by standard Hoare logic . Taking another step toward the next piece of code in the code segment , we see the variable assignmet command letting $ <var:x1> * <var:D> $ into $ <var:x1>$ . This transfers the condition $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> \} $ into the condition $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:E> \} $ . Taking a look at the upcoming step seen in our series of commands , we see the binding command yielding $ <var:x1> $ into $ <var:Z>$ . This moves the precondition $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:x1> = <nat:9> * <var:E> \} $ to $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:Z> = <nat:9> * <var:E> \} $ . This is rigorously given using the assignment rule from typical Hoare reasoning . Moving forward , we see the variable assignmet code binding $ <var:Z> + <var:x0$ into $ <var:Z>$ . This code moves $ \{ <var:D> = <var:E> \land <var:x0> = <nat:3> \land <var:Z> = <nat:9> * <var:E> \} $ to $ \{ <var:D> = <var:E> \land <var:Z> = <nat:9> * <var:E> + <nat:3> \} $ . This is shown through the assignment inference rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <var:x0> := <nat:3> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:D> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:9> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:x0> = <nat:3> /\ <var:Z> = <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:Z> = <nat:9> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 