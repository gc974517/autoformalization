\begin{document} \begin{theorem} Take a series of commands such that \begin{verbatim} <var:B0> := <nat:7> ; <var:Y> := <var:B0> \end{verbatim} Given that $ <var:g> = <var:d> $ ( for positive integers $ <var:d> $ ) ahead of evaluating our set of commands it follows that we have $ <var:Y> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:g> = <var:d> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:g> = <var:d> \land <var:B0> = <nat:7> \} \\ <var:Y> := <var:B0> \\ \{ <var:g> = <var:d> \land <var:Y> = <nat:7> \} \end{eqnarray} Considering the preceding argument , our program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:g> = <var:d> }} <var:B0> := <nat:7> ; <var:Y> := <var:B0> {{ <var:Y> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:Y> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 