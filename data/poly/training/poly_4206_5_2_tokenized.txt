\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <nat:3> + <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> \end{verbatim} Given ( for some positive coefficients $ <var:u> $ ) it to be that $ <var:E> = <var:u> $ prior to the evaluation of the list of instructions , it follows that $ <var:g> = <nat:3> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:3> \times <var:u> ^ <nat:2> + <nat:1> $ when code has finished executing . \end{theorem} \begin{proof} The flow of logic for this list of commands is shown through Hoare reasoning . Looking at the proceeding statements found in our set of commands , we have \verb | { <var:E> = <var:u> } <var:g> := <nat:3> { <var:E> = <var:u> \land <var:g> = <nat:3> } | , \verb | { <var:E> = <var:u> \land <var:g> = <nat:3> } <var:g> := <nat:1> + <var:g> * <var:E> { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> + <nat:1> } | , \verb | { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> + <nat:1> } <var:g> := <nat:3> + <var:g> * <var:E> { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:3> } | , \verb | { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:3> } <var:g> := <var:g> * <var:E> { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + } | and \verb | { <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + } <var:g> := <nat:1> + <var:g> * <var:E{ <var:E> = <var:u> \land <var:g> = <nat:3> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:1> } | . This is deduced using the variable binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:E> = <var:u> }} <var:g> := <nat:3> ; <var:g> := <nat:1> + <var:g> * <var:E> ; <var:g> := <nat:3> + <var:g> * <var:E> ; <var:g> := <var:g> * <var:E> ; <var:g> := <nat:1> + <var:g> * <var:E> {{ <var:g> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:g> = <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:g> = <nat:3> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:g> = <nat:3> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:u> /\ <var:g> = <nat:3> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 