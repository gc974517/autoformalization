\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:9> ; <var:L> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume --- for all integers $ <var:U> $ --- that we have $ <var:O> = <var:U> $ before the evaluation of the series of instructions then we have $ <var:L> = <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be done by usual Hoare reasoning . Advancing to the next step , the assignment statement binding $ <nat:9> $ toward $ <var:d0>$ . This line transfers the condition $ \{ <var:O> = <var:U> \} $ into the postcondition $ \{ <var:O> = <var:U> \land <var:d0> = <nat:9> \} $ . This is sound with the assignment rule found in Hoare reasoning . Going forward , the variable update line \verb | <var:L> := <var:d0> | . This statement transfers the condition $ \{ <var:O> = <var:U> \land <var:d0> = <nat:9> \} $ as $ \{ <var:O> = <var:U> \land <var:L> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:9> ; <var:L> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:O> = <var:U> }} <def:poly> {{ <var:L> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:U> /\ <var:L> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 