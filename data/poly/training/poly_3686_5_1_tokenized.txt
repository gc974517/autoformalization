\begin{document} \begin{theorem} Define a code as \begin{verbatim} <var:n1> := <var:e> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:3> ; <var:R> := <var:n1> <var:R> := <var:R> + <var:n0> \end{verbatim} Assume it to hold that $ <var:e> = <var:c> $ ( for any natural numbers $ <var:c> $ ) ahead of the execution of our set of instructions it holds that we see $ <var:R> = <nat:3> \cdot <var:c> + <nat:2> $ when set of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:e> = <var:c> \} \\ <var:n1> := <var:e> ; \\ \{ <var:e> = <var:c> \land <var:n1> = <var:c> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:e> = <var:c> \land <var:n1> = <var:c> \land <var:n0> = <nat:2> \} \\ <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:e> = <var:c> \land <var:n1> = <nat:3> \cdot <var:c> \land <var:n0> = <nat:2> \} \\ <var:R> := <var:n1> \\ \{ <var:e> = <var:c> \land <var:n0> = <nat:2> \land <var:R> = <nat:3> \cdot <var:c> \} \end{eqnarray} Furthering the evaluation of our list of commands gives us : \begin{eqnarray} <var:R> := <var:R> + <var:n0> \\ \{ <var:e> = <var:c> \land <var:R> = <nat:3> \cdot <var:c> + <nat:2> \} \end{eqnarray} Given the above , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:e> = <var:c> }} <var:n1> := <var:e> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:3> ; <var:R> := <var:n1> <var:R> := <var:R> + <var:n0> {{ <var:R> = <nat:3> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:n1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:n1> = <var:c> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:n1> = <nat:3> * <var:c> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:n0> = <nat:2> /\ <var:R> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:c> /\ <var:R> = <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 