\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S1> := <var:D> ; <var:S2> := <var:S1> * <var:D> ; <var:S3> := <var:S2> * <var:D> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:5> ; <var:S2> := <var:S2> * <nat:6> ; <var:S3> := <var:S3> * <nat:9> ; <var:p> := <var:S3> <var:p> := <var:p> + <var:S2> <var:p> := <var:p> + <var:S1> <var:p> := <var:p> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given --- with some natural numbers $ <var:b> $ --- it to hold that $ <var:D> = <var:b> $ prior to executing this list of commands , it follows that we have $ <var:p> = <nat:9> \cdot <var:b> ^ <nat:3> + <nat:6> \cdot <var:b> ^ <nat:2> + <nat:5> \cdot <var:b> + <nat:9> $ . \end{theorem} \begin{proof} Observe that the below decorated code segment . \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:S1> := <var:D> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <var:b> \} \\ <var:S2> := <var:S1> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <var:b> \land <var:S2> = <var:b> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:D> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <var:b> \land <var:S2> = <var:b> ^ <nat:2> \land <var:S3> = <var:b> ^ <nat:3> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <var:b> \land <var:S2> = <var:b> ^ <nat:2> \land <var:S3> = <var:b> ^ <nat:3> \land <var:S0> = <nat:9> \} \\ <var:S1> := <var:S1> * <nat:5> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <nat:5> \times <var:b> \land <var:S2> = <var:b> ^ <nat:2> \land <var:S3> = <var:b> ^ <nat:3> \land <var:S0> = <nat:9> \} \\ <var:S2> := <var:S2> * <nat:6> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <nat:5> \times <var:b> \land <var:S2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:S3> = <var:b> ^ <nat:3> \land <var:S0> = <nat:9> \} \\ <var:S3> := <var:S3> * <nat:9> ; \\ \{ <var:D> = <var:b> \land <var:S1> = <nat:5> \times <var:b> \land <var:S2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:b> ^ <nat:3> \land <var:S0> = <nat:9> \} \\ <var:p> := <var:S3> \\ \{ <var:D> = <var:b> \land <var:S1> = <nat:5> \times <var:b> \land <var:S2> = <nat:6> \times <var:b> ^ <nat:2> \land <var:S0> = <nat:9> \land <var:p> = <nat:9> \times <var:b> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:S2> \\ \{ <var:D> = <var:b> \land <var:S1> = <nat:5> \times <var:b> \land <var:S0> = <nat:9> \land <var:p> = <nat:9> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:S1> \\ \{ <var:D> = <var:b> \land <var:S0> = <nat:9> \land <var:p> = <nat:9> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> \} \\ <var:p> := <var:p> + <var:S0> \\ \{ <var:D> = <var:b> \land <var:p> = <nat:9> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> + <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S1> := <var:D> ; <var:S2> := <var:S1> * <var:D> ; <var:S3> := <var:S2> * <var:D> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:5> ; <var:S2> := <var:S2> * <nat:6> ; <var:S3> := <var:S3> * <nat:9> ; <var:p> := <var:S3> <var:p> := <var:p> + <var:S2> <var:p> := <var:p> + <var:S1> <var:p> := <var:p> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <def:poly> {{ <var:p> = <nat:9> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <var:b> /\ <var:S2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <var:b> /\ <var:S2> = <var:b> ^ <nat:2> /\ <var:S3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <var:b> /\ <var:S2> = <var:b> ^ <nat:2> /\ <var:S3> = <var:b> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <nat:5> * <var:b> /\ <var:S2> = <var:b> ^ <nat:2> /\ <var:S3> = <var:b> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <nat:5> * <var:b> /\ <var:S2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:S3> = <var:b> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <nat:5> * <var:b> /\ <var:S2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:b> ^ <nat:3> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <nat:5> * <var:b> /\ <var:S2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:S0> = <nat:9> /\ <var:p> = <nat:9> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S1> = <nat:5> * <var:b> /\ <var:S0> = <nat:9> /\ <var:p> = <nat:9> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:S0> = <nat:9> /\ <var:p> = <nat:9> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:p> = <nat:9> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 