\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:p1> := <var:s> ; <var:p2> := <var:p1> * <var:s> ; <var:p3> := <var:p2> * <var:s> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:5> ; <var:p3> := <var:p3> * <nat:8> ; <var:I> := <var:p3> <var:I> := <var:I> + <var:p2> <var:I> := <var:I> + <var:p1> <var:I> := <var:I> + <var:p0> \end{verbatim} Allowing given $ <var:J> $ it to be that $ <var:s> = <var:J> $ prior to the execution of our program it follows that we see $ <var:I> = <nat:8> \cdot <var:J> ^ <nat:3> + <nat:5> \cdot <var:J> ^ <nat:2> + <nat:9> \cdot <var:J> + <nat:1> $ once code segment has exited . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:s> = <var:J> \} \\ <var:p1> := <var:s> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <var:J> \} \\ <var:p2> := <var:p1> * <var:s> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:s> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:1> \} \\ <var:p1> := <var:p1> * <nat:9> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <nat:9> * <var:J> \land <var:p2> = <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:1> \} \end{eqnarray} Allowing executing our series of instructions results in : \begin{eqnarray} <var:p2> := <var:p2> * <nat:5> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <nat:9> * <var:J> \land <var:p2> = <nat:5> * <var:J> ^ <nat:2> \land <var:p3> = <var:J> ^ <nat:3> \land <var:p0> = <nat:1> \} \\ <var:p3> := <var:p3> * <nat:8> ; \\ \{ <var:s> = <var:J> \land <var:p1> = <nat:9> * <var:J> \land <var:p2> = <nat:5> * <var:J> ^ <nat:2> \land <var:p3> = <nat:8> * <var:J> ^ <nat:3> \land <var:p0> = <nat:1> \} \\ <var:I> := <var:p3> \\ \{ <var:s> = <var:J> \land <var:p1> = <nat:9> * <var:J> \land <var:p2> = <nat:5> * <var:J> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:I> = <nat:8> * <var:J> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:p2> \\ \{ <var:s> = <var:J> \land <var:p1> = <nat:9> * <var:J> \land <var:p0> = <nat:1> \land <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:p1> \\ \{ <var:s> = <var:J> \land <var:p0> = <nat:1> \land <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:9> * <var:J> \} \\ <var:I> := <var:I> + <var:p0> \\ \{ <var:s> = <var:J> \land <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:1> \} \end{eqnarray} Thus , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:s> = <var:J> }} <var:p1> := <var:s> ; <var:p2> := <var:p1> * <var:s> ; <var:p3> := <var:p2> * <var:s> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:9> ; <var:p2> := <var:p2> * <nat:5> ; <var:p3> := <var:p3> * <nat:8> ; <var:I> := <var:p3> <var:I> := <var:I> + <var:p2> <var:I> := <var:I> + <var:p1> <var:I> := <var:I> + <var:p0> {{ <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <nat:9> * <var:J> /\ <var:p2> = <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <nat:9> * <var:J> /\ <var:p2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:p3> = <var:J> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <nat:9> * <var:J> /\ <var:p2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <nat:9> * <var:J> /\ <var:p2> = <nat:5> * <var:J> ^ <nat:2> /\ <var:p0> = <nat:1> /\ <var:I> = <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p1> = <nat:9> * <var:J> /\ <var:p0> = <nat:1> /\ <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:p0> = <nat:1> /\ <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:J> /\ <var:I> = <nat:8> * <var:J> ^ <nat:3> + <nat:5> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 