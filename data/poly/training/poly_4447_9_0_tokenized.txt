\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:R> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:R> = <var:B> $ ahead of the execution of our segment of code then we see $ <var:J> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:3> $ once set of commands is done . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:B> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:3> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:B> \} \\ <var:o2> := <nat:3> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:B> \land <var:o2> = <nat:3> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:B> \land <var:o2> = <nat:3> \times <var:B> \} \\ <var:o2> := <var:o2> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:B> \land <var:o2> = <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:J> := <var:o2> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \times <var:B> \land <var:J> = <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:o1> ; \\ \{ <var:R> = <var:B> \land <var:o0> = <nat:3> \land <var:J> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:J> := <var:J> + <var:o0> \\ \{ <var:R> = <var:B> \land <var:J> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:3> \} \end{eqnarray} Given the preceding argument , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:R> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:R> ; <var:o2> := <var:o2> * <var:R> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:R> = <var:B> }} <def:poly> {{ <var:J> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:B> /\ <var:o2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:B> /\ <var:o2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:B> /\ <var:o2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:B> /\ <var:J> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:o0> = <nat:3> /\ <var:J> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:J> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 