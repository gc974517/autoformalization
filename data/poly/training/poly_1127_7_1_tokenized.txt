\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:E> ; <var:W2> := <var:W1> * <var:E> ; <var:W3> := <var:W2> * <var:E> ; <var:W0> := <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:H> := <var:W3> <var:H> := <var:H> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:E> = <var:j> $ before the evaluation of the segment of code , it follows that we see $ <var:H> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:E> = <var:j> \} \\ <var:W1> := <var:E> ; \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \} \\ <var:W2> := <var:W1> * <var:E> ; \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:E> ; \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <var:j> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:W3> := <var:W3> * <nat:2> ; \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W3> = <nat:2> \cdot <var:j> ^ <nat:3> \land <var:W0> = <nat:1> \} \\ <var:H> := <var:W3> \\ \{ <var:E> = <var:j> \land <var:W1> = <var:j> \land <var:W2> = <var:j> ^ <nat:2> \land <var:W0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:j> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:W0> \\ \{ <var:E> = <var:j> \land <var:H> = <nat:2> \cdot <var:j> ^ <nat:3> + <nat:1> \} \end{eqnarray} Therefore , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:E> ; <var:W2> := <var:W1> * <var:E> ; <var:W3> := <var:W2> * <var:E> ; <var:W0> := <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:H> := <var:W3> <var:H> := <var:H> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:E> = <var:j> }} <def:poly> {{ <var:H> = <nat:2> * <var:j> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <var:j> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W1> = <var:j> /\ <var:W2> = <var:j> ^ <nat:2> /\ <var:W0> = <nat:1> /\ <var:H> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:H> = <nat:2> * <var:j> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 