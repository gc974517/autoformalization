\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:v> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:v> ; <var:r2> := <var:r2> * <var:v> ; <var:h> := <var:r2> ; <var:h> := <var:h> + <var:r1> ; <var:h> := <var:h> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:v> = <var:M> $ ahead of interpreting the series of instructions , it must be that we see $ <var:h> = <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:6> $ when series of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:M> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \} \\ <var:r1> := <nat:2> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \} \\ <var:r1> := <var:r1> * <var:v> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \cdot <var:M> \} \\ <var:r2> := <nat:3> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \cdot <var:M> \land <var:r2> = <nat:3> \} \\ <var:r2> := <var:r2> * <var:v> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \cdot <var:M> \land <var:r2> = <nat:3> \cdot <var:M> \} \\ <var:r2> := <var:r2> * <var:v> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \cdot <var:M> \land <var:r2> = <nat:3> \cdot <var:M> ^ <nat:2> \} \\ <var:h> := <var:r2> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:r1> = <nat:2> \cdot <var:M> \land <var:h> = <nat:3> \cdot <var:M> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:r1> ; \\ \{ <var:v> = <var:M> \land <var:r0> = <nat:6> \land <var:h> = <nat:3> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> \} \\ <var:h> := <var:h> + <var:r0> \\ \{ <var:v> = <var:M> \land <var:h> = <nat:3> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:6> \} \end{eqnarray} Utilizing Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r0> := <nat:6> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:v> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:v> ; <var:r2> := <var:r2> * <var:v> ; <var:h> := <var:r2> ; <var:h> := <var:h> + <var:r1> ; <var:h> := <var:h> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:v> = <var:M> }} <def:poly> {{ <var:h> = <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> * <var:M> /\ <var:r2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> * <var:M> /\ <var:r2> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> * <var:M> /\ <var:r2> = <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:2> * <var:M> /\ <var:h> = <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:r0> = <nat:6> /\ <var:h> = <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:h> = <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 