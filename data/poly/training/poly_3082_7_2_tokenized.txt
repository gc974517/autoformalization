\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:3> ; <var:F> := <nat:2> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:4> + <var:F> * <var:l> ; <var:F> := <var:F> * <var:l> ; <var:F> := <nat:2> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> \end{verbatim} Allowing that we have $ <var:l> = <var:U> $ before the evaluation of this set of commands , then we have $ <var:F> = <nat:3> \times <var:U> ^ <nat:6> + <nat:2> \times <var:U> ^ <nat:5> + <nat:1> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> + <nat:3> $ after set of commands has exited . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:l> = <var:U> \} \\ <var:F> := <nat:3> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \} \\ <var:F> := <nat:2> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> + <nat:2> \} \\ <var:F> := <nat:1> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> \} \\ <var:F> := <nat:4> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:4> \} \\ <var:F> := <var:F> * <var:l> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:4> + <nat:2> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + \} \\ <var:F> := <nat:2> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:5> + <nat:2> \times <var:U> ^ <nat:4> + <nat:1> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:2> \} \\ <var:F> := <nat:3> + <var:F> * <var:l> \\ \{ <var:l> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:6> + <nat:2> \times <var:U> ^ <nat:5> + <nat:1> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> + <nat:3> \} \end{eqnarray} Considering the above , the series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:l> = <var:U> }} <var:F> := <nat:3> ; <var:F> := <nat:2> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:4> + <var:F> * <var:l> ; <var:F> := <var:F> * <var:l> ; <var:F> := <nat:2> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> {{ <var:F> = <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 