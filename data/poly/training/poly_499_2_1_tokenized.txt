\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:l0> := <nat:2> ; <var:s> := <var:l0> \end{verbatim} Allow it to be that $ <var:B> = <var:N> $ ahead of evaluating the series of commands , it holds that we see $ <var:s> = <nat:2> $ . \end{theorem} \begin{proof} The argument for this code can be demonstrated by standard Hoare reasoning . Advancing , we see the variable assignmet statement \verb | <var:l0> := <nat:2> ; | . This takes $ \{ <var:B> = <var:N> \} $ as the postcondition $ \{ <var:B> = <var:N> \land <var:l0> = <nat:2> \} $ . This is given using the assignment inference rule from Hoare reasoning . Moving onward , the binding command giving $ <var:l0$ to $ <var:s>$ . This redefines $ \{ <var:B> = <var:N> \land <var:l0> = <nat:2> \} $ to $ \{ <var:B> = <var:N> \land <var:s> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <var:l0> := <nat:2> ; <var:s> := <var:l0> {{ <var:s> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:s> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 