\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:D1> := <var:t> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:4> ; <var:X> := <var:D1> <var:X> := <var:X> + <var:D0> \end{verbatim} Assume it to hold that $ <var:t> = <var:Y> $ ahead of running this segment of code then $ <var:X> = <nat:4> \times <var:Y> + <nat:4> $ when code segment is done executing . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is accomplished with usual Hoare logic . Considering the subsequent command in the program , we have the environment update code giving $ <var:t> $ into $ <var:D1>$ . This code redefines the condition $ \{ <var:t> = <var:Y> \} $ toward $ \{ <var:t> = <var:Y> \land <var:D1> = <var:Y> \} $ . Stepping through , the variable update command \verb | <var:D0> := <nat:4> ; | . This line forwards the precondition $ \{ <var:t> = <var:Y> \land <var:D1> = <var:Y> \} $ to the condition $ \{ <var:t> = <var:Y> \land <var:D1> = <var:Y> \land <var:D0> = <nat:4> \} $ . This is shown through the assignment scheme obtained from typical Hoare logic . Taking another step toward the proceeding step found in the list of instructions , we have the binding code \verb | <var:D1> := <var:D1> * <nat:4> ; | . This moves the precondition $ \{ <var:t> = <var:Y> \land <var:D1> = <var:Y> \land <var:D0> = <nat:4> \} $ to the postcondition $ \{ <var:t> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D0> = <nat:4> \} $ . This is sound using the assignment inference rule given by usual Hoare techniques . Moving forward to the next step , we have the binding code \verb | <var:X> := <var:D1> | . This advances $ \{ <var:t> = <var:Y> \land <var:D1> = <nat:4> \times <var:Y> \land <var:D0> = <nat:4> \} $ to the postcondition $ \{ <var:t> = <var:Y> \land <var:D0> = <nat:4> \land <var:X> = <nat:4> \times <var:Y> \} $ . Following , we have the variable binding statement giving $ <var:X> + <var:D0$ toward $ <var:X>$ . This statement transfers $ \{ <var:t> = <var:Y> \land <var:D0> = <nat:4> \land <var:X> = <nat:4> \times <var:Y> \} $ into the postcondition $ \{ <var:t> = <var:Y> \land <var:X> = <nat:4> \times <var:Y> + <nat:4> \} $ . This is known to be sound using the assignment scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:t> = <var:Y> }} <var:D1> := <var:t> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:4> ; <var:X> := <var:D1> <var:X> := <var:X> + <var:D0> {{ <var:X> = <nat:4> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:D1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:D0> = <nat:4> /\ <var:X> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:X> = <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 