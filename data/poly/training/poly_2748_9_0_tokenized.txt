\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:6> ; <var:f1> := <var:f1> * <var:b> ; <var:f2> := <nat:5> ; <var:f2> := <var:f2> * <var:b> ; <var:f2> := <var:f2> * <var:b> ; <var:E> := <var:f2> ; <var:E> := <var:E> + <var:f1> ; <var:E> := <var:E> + <var:f0> \end{verbatim} Allow that $ <var:b> = <var:e> $ assuming some $ <var:e> $ before running the code segment it must be that we have $ <var:E> = <nat:5> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:6> $ after list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:e> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \} \\ <var:f1> := <nat:6> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \} \\ <var:f1> := <var:f1> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \times <var:e> \} \\ <var:f2> := <nat:5> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \times <var:e> \land <var:f2> = <nat:5> \} \\ <var:f2> := <var:f2> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \times <var:e> \land <var:f2> = <nat:5> \times <var:e> \} \\ <var:f2> := <var:f2> * <var:b> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \times <var:e> \land <var:f2> = <nat:5> \times <var:e> ^ <nat:2> \} \\ <var:E> := <var:f2> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:f1> = <nat:6> \times <var:e> \land <var:E> = <nat:5> \times <var:e> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:f1> ; \\ \{ <var:b> = <var:e> \land <var:f0> = <nat:6> \land <var:E> = <nat:5> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> \} \\ <var:E> := <var:E> + <var:f0> \\ \{ <var:b> = <var:e> \land <var:E> = <nat:5> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:b> = <var:e> }} <var:f0> := <nat:6> ; <var:f1> := <nat:6> ; <var:f1> := <var:f1> * <var:b> ; <var:f2> := <nat:5> ; <var:f2> := <var:f2> * <var:b> ; <var:f2> := <var:f2> * <var:b> ; <var:E> := <var:f2> ; <var:E> := <var:E> + <var:f1> ; <var:E> := <var:E> + <var:f0> {{ <var:E> = <nat:5> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> * <var:e> /\ <var:f2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> * <var:e> /\ <var:f2> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> * <var:e> /\ <var:f2> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:6> * <var:e> /\ <var:E> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f0> = <nat:6> /\ <var:E> = <nat:5> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:E> = <nat:5> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 