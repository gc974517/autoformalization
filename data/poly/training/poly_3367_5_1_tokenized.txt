\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:x1> := <var:t> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:1> ; <var:o> := <var:x1> <var:o> := <var:o> + <var:x0> \end{verbatim} Allowing it to be that $ <var:t> = <var:l> $ prior to running the set of commands , it holds that we see $ <var:o> = <nat:1> * <var:l> + <nat:8> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The argument for this series of commands can be done by usual Hoare reasoning . Further , we have \verb | { <var:t> = <var:l> } <var:x1> := <var:t> { <var:t> = <var:l> \land <var:x1> = <var:l> } | and \verb | { <var:t> = <var:l> \land <var:x1> = <var:l> } <var:x0> := <nat:8> { <var:t> = <var:l> \land <var:x1> = <var:l> \land <var:x0> = <nat:8> } | . Looking at the following statements found in the code segment , we see \verb | { <var:t> = <var:l> } <var:x1> := <var:t> { <var:t> = <var:l> \land <var:x1> = <var:l> } | , \verb | { <var:t> = <var:l> \land <var:x1> = <var:l> } <var:x0> := <nat:8> { <var:t> = <var:l> \land <var:x1> = <var:l> \land <var:x0> = <nat:8> } | and \verb | { <var:t> = <var:l> \land <var:x1> = <var:l> \land <var:x0> = <nat:8> } <var:x1> := <var:x1> * <nat:1> { <var:t> = <var:l> \land <var:x1> = <nat:1> \cdot <var:l> \land <var:x0> = <nat:8> } | . This is given through the variable update law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:t> = <var:l> }} <var:x1> := <var:t> ; <var:x0> := <nat:8> ; <var:x1> := <var:x1> * <nat:1> ; <var:o> := <var:x1> <var:o> := <var:o> + <var:x0> {{ <var:o> = <nat:1> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:x1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:x1> = <var:l> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:x1> = <nat:1> * <var:l> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:x0> = <nat:8> /\ <var:o> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:o> = <nat:1> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 