\begin{document} \begin{theorem} Define the following list of instructions as \begin{verbatim} <var:y1> := <var:l> ; <var:y2> := <var:y1> * <var:l> ; <var:y3> := <var:y2> * <var:l> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:9> ; <var:m> := <var:y3> <var:m> := <var:m> + <var:y2> <var:m> := <var:m> + <var:y1> <var:m> := <var:m> + <var:y0> \end{verbatim} Given that $ <var:l> = <var:q> $ prior to the evaluation of this code segment , it must be that we have $ <var:m> = <nat:9> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:3> $ after code has finished . \end{theorem} \begin{proof} The proof of the series of instructions can be shown using usual Hoare techniques . Going forward , the line assigning $ <var:l> $ as $ <var:y1>$ . This advances the condition $ \{ <var:l> = <var:q> \} $ into $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \} $ . Advancing on , the line \verb | <var:y2> := <var:y1> * <var:l> ; | . This code moves $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \} $ toward the postcondition $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \} $ . This is sound using the assignment scheme defined in Hoare techniques . Moving onward , we have the binding line \verb | <var:y3> := <var:y2> * <var:l> ; | . This moves the condition $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \} $ as the condition $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \} $ . Further , we have the binding line defining $ <nat:3> $ as $ <var:y0>$ . This takes the precondition $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is sound through the assignment law defined in usual Hoare logic . Shifting focus toward the upcoming piece of code contained in the set of commands , the variable assignmet line \verb | <var:y1> := <var:y1> * <nat:3> ; | . This statement transfers $ \{ <var:l> = <var:q> \land <var:y1> = <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ to the condition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is given using the assignment scheme obtained from typical Hoare logic . Considering the following piece of code found in our list of instructions , the variable binding command binding $ <var:y2> * <nat:3> $ to $ <var:y2>$ . This code takes $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ into the condition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is known to be sound through the assignment law defined in usual Hoare logic . Honing in on the upcoming step found in the set of instructions , we have the environment update line \verb | <var:y3> := <var:y3> * <nat:9> ; | . This forwards $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y3> = <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y3> = <nat:9> \cdot <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . Jumping to the proceeding command found in the program , the variable update command defining $ <var:y3$ to $ <var:m>$ . This redefines $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y3> = <nat:9> \cdot <var:q> ^ <nat:3> \land <var:y0> = <nat:3> \} $ to $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> \} $ . This is shown by the assignment law defined in standard Hoare techniques . Taking a look at the following line of code found in our series of instructions , the binding command \verb | <var:m> := <var:m> + <var:y2> | . This redefines the condition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> \} $ as the postcondition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> \} $ . This is known to be sound through the assignment rule in standard Hoare reasoning . After , the variable update statement binding $ <var:m> + <var:y1$ into $ <var:m>$ . This advances the precondition $ \{ <var:l> = <var:q> \land <var:y1> = <nat:3> \cdot <var:q> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> \} $ to the condition $ \{ <var:l> = <var:q> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> \} $ . This is given through the assignment scheme of standard Hoare techniques . Stepping forward , the assignment line \verb | <var:m> := <var:m> + <var:y0> | . This redefines the precondition $ \{ <var:l> = <var:q> \land <var:y0> = <nat:3> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> \} $ toward $ \{ <var:l> = <var:q> \land <var:m> = <nat:9> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:3> \} $ . This is shown to be logically sound by the assignment law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:l> = <var:q> }} <var:y1> := <var:l> ; <var:y2> := <var:y1> * <var:l> ; <var:y3> := <var:y2> * <var:l> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:3> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:9> ; <var:m> := <var:y3> <var:m> := <var:m> + <var:y2> <var:m> := <var:m> + <var:y1> <var:m> := <var:m> + <var:y0> {{ <var:m> = <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <var:q> /\ <var:y2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <var:q> /\ <var:y2> = <var:q> ^ <nat:2> /\ <var:y3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <var:q> /\ <var:y2> = <var:q> ^ <nat:2> /\ <var:y3> = <var:q> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <nat:3> * <var:q> /\ <var:y2> = <var:q> ^ <nat:2> /\ <var:y3> = <var:q> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <nat:3> * <var:q> /\ <var:y2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:y3> = <var:q> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <nat:3> * <var:q> /\ <var:y2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:y3> = <nat:9> * <var:q> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <nat:3> * <var:q> /\ <var:y2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:y0> = <nat:3> /\ <var:m> = <nat:9> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y1> = <nat:3> * <var:q> /\ <var:y0> = <nat:3> /\ <var:m> = <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:y0> = <nat:3> /\ <var:m> = <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:q> /\ <var:m> = <nat:9> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 