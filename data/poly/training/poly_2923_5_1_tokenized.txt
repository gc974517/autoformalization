\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:i> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:N> := <var:E1> <var:N> := <var:N> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:i> = <var:K> $ ahead of interpreting our set of commands it holds that we see $ <var:N> = <nat:9> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the set of commands can be shown through typical Hoare techniques . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:K> \} & <var:E1> := <var:i> & \{ <var:i> = <var:K> \land <var:E1> = <var:K> \} \\ \{ <var:i> = <var:K> \land <var:E1> = <var:K> \} & <var:E0> := <nat:3> & \{ <var:i> = <var:K> \land <var:E1> = <var:K> \land <var:E0> = <nat:3> \} \\ \{ <var:i> = <var:K> \land <var:E1> = <var:K> \land <var:E0> = <nat:3> \} & <var:E1> := <var:E1> * <nat:9> & \{ <var:i> = <var:K> \land <var:E1> = <nat:9> * <var:K> \land <var:E0> = <nat:3> \} \end{tabular} This is rigorously given with the binding inference rule given by standard Hoare reasoning . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:i> = <var:K> \} & <var:E1> := <var:i> & \{ <var:i> = <var:K> \land <var:E1> = <var:K> \} \\ \{ <var:i> = <var:K> \land <var:E1> = <var:K> \} & <var:E0> := <nat:3> & \{ <var:i> = <var:K> \land <var:E1> = <var:K> \land <var:E0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:i> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:9> ; <var:N> := <var:E1> <var:N> := <var:N> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:i> = <var:K> }} <def:poly> {{ <var:N> = <nat:9> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:E1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:E1> = <var:K> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:E1> = <nat:9> * <var:K> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:E0> = <nat:3> /\ <var:N> = <nat:9> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:K> /\ <var:N> = <nat:9> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 