\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:2> ; <var:x> := <var:L0> \end{verbatim} Allowing , assuming some whole numbers $ <var:h> $ , that we have $ <var:a> = <var:h> $ prior to the evaluation of our list of commands , it must be that $ <var:x> = <nat:2> $ when list of instructions exits . \end{theorem} \begin{proof} The method of proof for this code is shown using typical Hoare reasoning . Advancing , \verb | { <var:a> = <var:h> } <var:L0> := <nat:2> { <var:a> = <var:h> \land <var:L0> = <nat:2> } | and \verb | { <var:a> = <var:h> \land <var:L0> = <nat:2> } <var:x> := <var:L0{ <var:a> = <var:h> \land <var:x> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <var:L0> := <nat:2> ; <var:x> := <var:L0> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 