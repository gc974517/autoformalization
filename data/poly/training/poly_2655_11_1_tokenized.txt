\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:c> ; <var:V2> := <var:V1> * <var:c> ; <var:V3> := <var:V2> * <var:c> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:3> ; <var:L> := <var:V3> <var:L> := <var:L> + <var:V2> <var:L> := <var:L> + <var:V1> <var:L> := <var:L> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Given that we have $ <var:c> = <var:l> $ --- for every whole numbers $ <var:l> $ --- prior to running our set of instructions it must be that we see $ <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The course of logic for this series of commands can be demonstrated by standard Hoare logic . Advancing , we see the variable binding line \verb | <var:V1> := <var:c> ; | . This takes the condition $ \{ <var:c> = <var:l> \} $ into the condition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \} $ . This is shown to be logically sound with the assignment rule from standard Hoare techniques . Moving forward to the proceeding command in our set of commands , we have the code yielding $ <var:V1> * <var:c> $ as $ <var:V2>$ . This command transfers the precondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \} $ to the postcondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \} $ . Advancing to the next line of code in the set of instructions , the command defining $ <var:V2> * <var:c> $ as $ <var:V3>$ . This command forwards the precondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \} $ into $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \} $ . This is shown with the assignment law found in Hoare techniques . Moving forward , we have the assignment statement \verb | <var:V0> := <nat:2> ; | . This command advances the precondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \} $ toward the postcondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . This is sound using the assignment law obtained from usual Hoare reasoning . Paying attention to the next statement contained in the code segment , we see the assignment line giving $ <var:V1> * <nat:8> $ toward $ <var:V1>$ . This redefines the precondition $ \{ <var:c> = <var:l> \land <var:V1> = <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ as the condition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . This is rigorously given by the assignment law in standard Hoare techniques . Further , the code binding $ <var:V2> * <nat:9> $ as $ <var:V2>$ . This statement moves $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . Moving on to the next step , the assignment statement binding $ <var:V3> * <nat:3> $ to $ <var:V3>$ . This redefines the precondition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V3> = <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ . Taking another step toward the proceeding bit of code found in the code segment , the line assigning $ <var:V3$ as $ <var:L>$ . This forwards $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:V0> = <nat:2> \} $ to $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> \} $ . This is sound by the assignment law defined by usual Hoare reasoning . Further , we have the variable update code yielding $ <var:L> + <var:V2$ to $ <var:L>$ . This moves the condition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> \} $ . Next , we see the variable update command defining $ <var:L> + <var:V1$ to $ <var:L>$ . This forwards the condition $ \{ <var:c> = <var:l> \land <var:V1> = <nat:8> \times <var:l> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:l> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> \} $ . This is deduced through the assignment scheme in Hoare reasoning . Moving forward to the next step , the environment update statement \verb | <var:L> := <var:L> + <var:V0> | . This command transfers the condition $ \{ <var:c> = <var:l> \land <var:V0> = <nat:2> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> \} $ to $ \{ <var:c> = <var:l> \land <var:L> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:c> ; <var:V2> := <var:V1> * <var:c> ; <var:V3> := <var:V2> * <var:c> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:8> ; <var:V2> := <var:V2> * <nat:9> ; <var:V3> := <var:V3> * <nat:3> ; <var:L> := <var:V3> <var:L> := <var:L> + <var:V2> <var:L> := <var:L> + <var:V1> <var:L> := <var:L> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:c> = <var:l> }} <def:poly> {{ <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <var:l> /\ <var:V2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <var:l> /\ <var:V2> = <var:l> ^ <nat:2> /\ <var:V3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <var:l> /\ <var:V2> = <var:l> ^ <nat:2> /\ <var:V3> = <var:l> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <nat:8> * <var:l> /\ <var:V2> = <var:l> ^ <nat:2> /\ <var:V3> = <var:l> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <nat:8> * <var:l> /\ <var:V2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:V3> = <var:l> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <nat:8> * <var:l> /\ <var:V2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:V3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <nat:8> * <var:l> /\ <var:V2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V1> = <nat:8> * <var:l> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:V0> = <nat:2> /\ <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:l> /\ <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 