\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:2> + <var:W> * <var:z> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:3> + <var:W> * <var:z> ; <var:W> := <nat:1> + <var:W> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assume it to be that $ <var:z> = <var:t> $ letting positive integer coefficients $ <var:t> $ ahead of executing the set of commands , it must be that $ <var:W> = <nat:1> \times <var:t> ^ <nat:6> + <nat:4> \times <var:t> ^ <nat:5> + <nat:4> \times <var:t> ^ <nat:4> + <nat:2> \times <var:t> ^ <nat:3> + <nat:4> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:t> \} \\ <var:W> := <nat:1> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:z> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:z> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:4> \} \\ <var:W> := <nat:2> + <var:W> * <var:z> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> \} \\ <var:W> := <nat:4> + <var:W> * <var:z> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:4> \} \\ <var:W> := <nat:3> + <var:W> * <var:z> ; \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> \} \\ <var:W> := <nat:1> + <var:W> * <var:z> \\ \{ <var:z> = <var:t> \land <var:W> = <nat:1> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:2> + <var:W> * <var:z> ; <var:W> := <nat:4> + <var:W> * <var:z> ; <var:W> := <nat:3> + <var:W> * <var:z> ; <var:W> := <nat:1> + <var:W> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:z> = <var:t> }} <def:poly> {{ <var:W> = <nat:1> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:t> /\ <var:W> = <nat:1> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 