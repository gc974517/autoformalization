\begin{document} \begin{theorem} Consider a series of commands such that \begin{verbatim} <var:E0> := <nat:5> ; <var:X> := <var:E0> \end{verbatim} Allowing --- assuming some positive numbers $ <var:l> $ --- that we have $ <var:F> = <var:l> $ ahead of executing this set of instructions it holds that we see $ <var:X> = <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be demonstrated by usual Hoare techniques . Advancing on , we see the binding command giving $ <nat:5> $ toward $ <var:E0>$ . This line redefines the condition $ \{ <var:F> = <var:l> \} $ into $ \{ <var:F> = <var:l> \land <var:E0> = <nat:5> \} $ . Now , the binding line \verb | <var:X> := <var:E0> | . This line moves the precondition $ \{ <var:F> = <var:l> \land <var:E0> = <nat:5> \} $ as $ \{ <var:F> = <var:l> \land <var:X> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:F> = <var:l> }} <var:E0> := <nat:5> ; <var:X> := <var:E0> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:l> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 