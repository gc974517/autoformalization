\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:x> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for some positive integers $ <var:Q> $ ) $ <var:s> = <var:Q> $ ahead of evaluating our set of commands , then we see $ <var:x> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is given using usual Hoare techniques . Taking another step toward the upcoming line of code found in our list of instructions , we see the variable update line \verb | <var:i0> := <nat:4> ; | . This advances $ \{ <var:s> = <var:Q> \} $ to the postcondition $ \{ <var:s> = <var:Q> \land <var:i0> = <nat:4> \} $ . Moving forward to the proceeding bit of code seen in our set of instructions , we see the code giving $ <var:i0$ to $ <var:x>$ . This advances the precondition $ \{ <var:s> = <var:Q> \land <var:i0> = <nat:4> \} $ as the postcondition $ \{ <var:s> = <var:Q> \land <var:x> = <nat:4> \} $ . This is given with the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:x> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:s> = <var:Q> }} <def:poly> {{ <var:x> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:x> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 