\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:k> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:k> ; <var:G2> := <var:G2> * <var:k> ; <var:u> := <var:G2> ; <var:u> := <var:u> + <var:G1> ; <var:u> := <var:u> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for all positive coefficients $ <var:I> $ ) it to be that $ <var:k> = <var:I> $ prior to executing the series of commands it holds that $ <var:u> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this program is evident through usual Hoare logic . Advancing , we have the binding line letting $ <nat:3> $ to $ <var:G0>$ . This line advances the condition $ \{ <var:k> = <var:I> \} $ toward the postcondition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \} $ . This is ensured using the assignment inference rule obtained from standard Hoare logic . Focusing on the following line of code in our set of instructions , the variable update line \verb | <var:G1> := <nat:9> ; | . This redefines the precondition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \} $ to $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \} $ . This is shown to be logically sound using the assignment law in typical Hoare techniques . Advancing on , we see the binding command \verb | <var:G1> := <var:G1> * <var:k> ; | . This advances $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \} $ as the postcondition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \} $ . Considering the proceeding line in the code segment , we have the variable binding code defining $ <nat:3> $ into $ <var:G2>$ . This code takes $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \} $ toward $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \} $ . Honing in on the following piece of code contained in our program , the binding command \verb | <var:G2> := <var:G2> * <var:k> ; | . This command advances $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \} $ as $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \times <var:I> \} $ . Going forward , we have the variable binding command \verb | <var:G2> := <var:G2> * <var:k> ; | . This line transfers $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \times <var:I> \} $ as $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \times <var:I> ^ <nat:2> \} $ . Observing the subsequent step contained in the list of commands , we see the variable binding code \verb | <var:u> := <var:G2> ; | . This takes the precondition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:G2> = <nat:3> \times <var:I> ^ <nat:2> \} $ to the condition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:u> = <nat:3> \times <var:I> ^ <nat:2> \} $ . Considering the proceeding piece of code found in our series of instructions , we see the environment update line \verb | <var:u> := <var:u> + <var:G1> ; | . This statement transfers the precondition $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:G1> = <nat:9> \times <var:I> \land <var:u> = <nat:3> \times <var:I> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:u> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} $ . Moving forward , we see the binding command letting $ <var:u> + <var:G0$ into $ <var:u>$ . This transfers $ \{ <var:k> = <var:I> \land <var:G0> = <nat:3> \land <var:u> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> \} $ into the postcondition $ \{ <var:k> = <var:I> \land <var:u> = <nat:3> \times <var:I> ^ <nat:2> + <nat:9> \times <var:I> + <nat:3> \} $ . This is guaranteed by the assignment scheme found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:k> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:k> ; <var:G2> := <var:G2> * <var:k> ; <var:u> := <var:G2> ; <var:u> := <var:u> + <var:G1> ; <var:u> := <var:u> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:k> = <var:I> }} <def:poly> {{ <var:u> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G2> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> * <var:I> /\ <var:G2> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:9> * <var:I> /\ <var:u> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:G0> = <nat:3> /\ <var:u> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:I> /\ <var:u> = <nat:3> * <var:I> ^ <nat:2> + <nat:9> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 