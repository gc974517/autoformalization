\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:H1> := <var:U> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:6> ; <var:o> := <var:H1> <var:o> := <var:o> + <var:H0> \end{verbatim} Assuming it to be that $ <var:U> = <var:c> $ ( given whole numbers $ <var:c> $ ) before evaluating this code segment it must be that we see $ <var:o> = <nat:6> \cdot <var:c> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:c> \} \\ <var:H1> := <var:U> ; \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H0> = <nat:3> \} \\ <var:H1> := <var:H1> * <nat:6> ; \\ \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H0> = <nat:3> \} \\ <var:o> := <var:H1> \\ \{ <var:U> = <var:c> \land <var:H0> = <nat:3> \land <var:o> = <nat:6> \times <var:c> \} \\ <var:o> := <var:o> + <var:H0> \\ \{ <var:U> = <var:c> \land <var:o> = <nat:6> \times <var:c> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <var:H1> := <var:U> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:6> ; <var:o> := <var:H1> <var:o> := <var:o> + <var:H0> {{ <var:o> = <nat:6> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <var:c> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <nat:6> * <var:c> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H0> = <nat:3> /\ <var:o> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:o> = <nat:6> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 