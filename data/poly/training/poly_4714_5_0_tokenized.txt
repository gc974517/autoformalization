\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:m> ; <var:q> := <var:I1> ; <var:q> := <var:q> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assuming $ <var:m> = <var:B> $ --- given any $ <var:B> \in \mathbb{N} $ --- prior to the execution of our code segment , it must be that $ <var:q> = <nat:2> \times <var:B> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:B> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:m> = <var:B> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:2> ; \\ \{ <var:m> = <var:B> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \} \\ <var:I1> := <var:I1> * <var:m> ; \\ \{ <var:m> = <var:B> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> * <var:B> \} \\ <var:q> := <var:I1> ; \\ \{ <var:m> = <var:B> \land <var:I0> = <nat:9> \land <var:q> = <nat:2> * <var:B> \} \\ <var:q> := <var:q> + <var:I0> \\ \{ <var:m> = <var:B> \land <var:q> = <nat:2> * <var:B> + <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:m> ; <var:q> := <var:I1> ; <var:q> := <var:q> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:m> = <var:B> }} <def:poly> {{ <var:q> = <nat:2> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:I0> = <nat:9> /\ <var:q> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:B> /\ <var:q> = <nat:2> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 