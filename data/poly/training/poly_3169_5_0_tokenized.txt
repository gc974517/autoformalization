\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:A> ; <var:N> := <var:y1> ; <var:N> := <var:N> + <var:y0> \end{verbatim} Given that $ <var:A> = <var:u> $ for every positive numbers $ <var:u> $ ahead of interpreting our set of instructions it must be that $ <var:N> = <nat:9> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands can be given through usual Hoare reasoning . Stepping forward , we have \begin{verbatim} { <var:A> = <var:u> } <var:y0> := <nat:4> { <var:A> = <var:u> \land <var:y0> = <nat:4> } { <var:A> = <var:u> \land <var:y0> = <nat:4> } <var:y1> := <nat:9> { <var:A> = <var:u> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> } \end{verbatim} Advancing on , we see \begin{verbatim} { <var:A> = <var:u> } <var:y0> := <nat:4> { <var:A> = <var:u> \land <var:y0> = <nat:4> } { <var:A> = <var:u> \land <var:y0> = <nat:4> } <var:y1> := <nat:9> { <var:A> = <var:u> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> } \end{verbatim} This is given using the variable assignmet rule in usual Hoare techniques . Paying attention to the next command contained in our set of commands , we have \begin{verbatim} { <var:A> = <var:u> } <var:y0> := <nat:4> { <var:A> = <var:u> \land <var:y0> = <nat:4> } \end{verbatim} This is ensured with the variable binding rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:A> = <var:u> }} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:A> ; <var:N> := <var:y1> ; <var:N> := <var:N> + <var:y0> {{ <var:N> = <nat:9> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:y0> = <nat:4> /\ <var:N> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:u> /\ <var:N> = <nat:9> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 