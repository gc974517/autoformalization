\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:Y> \end{verbatim} Allow assuming some integers $ <var:A> $ it to hold that $ <var:Y> = <var:A> $ ahead of evaluating our series of instructions it follows that $ <var:B> = <nat:1> \cdot <var:A> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be demonstrated through standard Hoare techniques . Moving on to the upcoming statement in our set of commands , we see the variable binding command \verb | <var:B> := <nat:1> ; | . This statement transfers the condition $ \{ <var:Y> = <var:A> \} $ into the condition $ \{ <var:Y> = <var:A> \land <var:B> = <nat:1> \} $ . This is ensured with the assignment law obtained from Hoare logic . After , we have the assignment line \verb | <var:B> := <nat:4> + <var:B> * <var:Y> | . This code takes $ \{ <var:Y> = <var:A> \land <var:B> = <nat:1> \} $ into the condition $ \{ <var:Y> = <var:A> \land <var:B> = <nat:1> * <var:A> + <nat:4> \} $ . This is shown using the assignment scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Y> = <var:A> }} <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:Y> {{ <var:B> = <nat:1> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:B> = <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 