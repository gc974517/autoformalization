\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:Y> ; <var:v> := <var:I1> ; <var:v> := <var:v> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Given --- with some natural numbers $ <var:Q> $ --- it to hold that $ <var:Y> = <var:Q> $ before interpreting our code segment , it follows that we have $ <var:v> = <nat:2> \cdot <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:Q> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:Y> = <var:Q> \land <var:I0> = <nat:3> \} \\ <var:I1> := <nat:2> ; \\ \{ <var:Y> = <var:Q> \land <var:I0> = <nat:3> \land <var:I1> = <nat:2> \} \\ <var:I1> := <var:I1> * <var:Y> ; \\ \{ <var:Y> = <var:Q> \land <var:I0> = <nat:3> \land <var:I1> = <nat:2> \times <var:Q> \} \\ <var:v> := <var:I1> ; \\ \{ <var:Y> = <var:Q> \land <var:I0> = <nat:3> \land <var:v> = <nat:2> \times <var:Q> \} \\ <var:v> := <var:v> + <var:I0> \\ \{ <var:Y> = <var:Q> \land <var:v> = <nat:2> \times <var:Q> + <nat:3> \} \end{eqnarray} The application of usual Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:3> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:Y> ; <var:v> := <var:I1> ; <var:v> := <var:v> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Y> = <var:Q> }} <def:poly> {{ <var:v> = <nat:2> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:I0> = <nat:3> /\ <var:v> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:v> = <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 