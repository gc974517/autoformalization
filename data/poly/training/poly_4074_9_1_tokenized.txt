\begin{document} \begin{theorem} Consider the following series of commands as \begin{verbatim} <var:o1> := <var:B> ; <var:o2> := <var:o1> * <var:B> ; <var:o3> := <var:o2> * <var:B> ; <var:o0> := <nat:3> ; <var:o2> := <var:o2> * <nat:7> ; <var:o3> := <var:o3> * <nat:5> ; <var:D> := <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o0> \end{verbatim} Allow $ <var:B> = <var:w> $ , letting integers $ <var:w> $ , prior to executing the set of commands , it follows that we have $ <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this code segment is clear using usual Hoare logic . Considering the following bit of code contained in the segment of code , we see the assignment code yielding $ <var:B> $ to $ <var:o1>$ . This redefines the precondition $ \{ <var:B> = <var:w> \} $ toward the postcondition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \} $ . This is shown to be logically sound through the assignment scheme obtained from Hoare logic . Focusing on the proceeding step found in the program , the environment update command \verb | <var:o2> := <var:o1> * <var:B> ; | . This advances $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \} $ toward $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \} $ . Moving on to the subsequent bit of code found in our program , the variable assignmet command defining $ <var:o2> * <var:B> $ toward $ <var:o3>$ . This advances the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \} $ to $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \} $ . Keeping momentum , we have the binding command binding $ <nat:3> $ toward $ <var:o0>$ . This command forwards the precondition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \} $ toward the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . This is shown with the assignment scheme given by typical Hoare reasoning . Moving on , we have the environment update statement \verb | <var:o2> := <var:o2> * <nat:7> ; | . This forwards the precondition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ to the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . This is known to be sound with the assignment law of typical Hoare logic . Focusing on the upcoming step in the list of commands , the variable binding command \verb | <var:o3> := <var:o3> * <nat:5> ; | . This command transfers the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ to $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:5> \cdot <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ . Considering the following piece of code in our series of instructions , the code assigning $ <var:o3$ to $ <var:D>$ . This takes the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:5> \cdot <var:w> ^ <nat:3> \land <var:o0> = <nat:3> \} $ as the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> \} $ . Advancing , we have the statement \verb | <var:D> := <var:D> + <var:o2> | . This line redefines the precondition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> \} $ into $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> \} $ . This is deduced using the assignment inference rule defined in standard Hoare logic . Paying attention to the proceeding line contained in our list of instructions , we see the variable assignmet command \verb | <var:D> := <var:D> + <var:o0> | . This takes the condition $ \{ <var:B> = <var:w> \land <var:o1> = <var:w> \land <var:o0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:w> \land <var:D> = <nat:5> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> + <nat:3> \} $ . This is rigorously given using the assignment rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:B> = <var:w> }} <var:o1> := <var:B> ; <var:o2> := <var:o1> * <var:B> ; <var:o3> := <var:o2> * <var:B> ; <var:o0> := <nat:3> ; <var:o2> := <var:o2> * <nat:7> ; <var:o3> := <var:o3> * <nat:5> ; <var:D> := <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o0> {{ <var:D> = <nat:5> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:w> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:o0> = <nat:3> /\ <var:D> = <nat:5> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:o1> = <var:w> /\ <var:o0> = <nat:3> /\ <var:D> = <nat:5> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:D> = <nat:5> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 