\begin{document} \begin{theorem} We define a code in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:9> ; <var:i> := <var:t0> \end{verbatim} Assuming it to be that $ <var:q> = <var:T> $ prior to executing this list of commands it holds that we have $ <var:i> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be demonstrated through usual Hoare logic . Going forward , the binding command \verb | <var:t0> := <nat:9> ; | . This forwards the precondition $ \{ <var:q> = <var:T> \} $ toward the postcondition $ \{ <var:q> = <var:T> \land <var:t0> = <nat:9> \} $ . This is known to be sound using the assignment rule found in typical Hoare techniques . Shifting focus toward the proceeding command contained in the list of instructions , we see the variable binding line yielding $ <var:t0$ to $ <var:i>$ . This command forwards the condition $ \{ <var:q> = <var:T> \land <var:t0> = <nat:9> \} $ as the postcondition $ \{ <var:q> = <var:T> \land <var:i> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:q> = <var:T> }} <var:t0> := <nat:9> ; <var:i> := <var:t0> {{ <var:i> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:i> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 