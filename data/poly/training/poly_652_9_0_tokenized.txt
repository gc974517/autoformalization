\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:r> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:r> ; <var:T2> := <var:T2> * <var:r> ; <var:V> := <var:T2> ; <var:V> := <var:V> + <var:T1> ; <var:V> := <var:V> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:r> = <var:v> $ before executing our segment of code , it must be that we see $ <var:V> = <nat:2> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> + <nat:9> $ after program has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this code is given using typical Hoare techniques . Stepping through , the binding statement binding $ <nat:9> $ toward $ <var:T0>$ . This advances the condition $ \{ <var:r> = <var:v> \} $ toward $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \} $ . Taking a look at the upcoming command found in the code , we have the environment update line yielding $ <nat:9> $ into $ <var:T1>$ . This transfers $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \} $ to $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \} $ . This is ensured by the assignment scheme defined by usual Hoare techniques . Shifting focus toward the proceeding line of code contained in the series of instructions , we have the variable binding statement \verb | <var:T1> := <var:T1> * <var:r> ; | . This redefines $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \} $ toward the postcondition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \} $ . Stepping through , the environment update statement giving $ <nat:2> $ into $ <var:T2>$ . This moves $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \} $ . Considering the upcoming statement in our set of commands , we see the binding command \verb | <var:T2> := <var:T2> * <var:r> ; | . This command advances $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \times <var:v> \} $ . Moving on to the next step , the variable assignmet command \verb | <var:T2> := <var:T2> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \times <var:v> \} $ to the condition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \times <var:v> ^ <nat:2> \} $ . Stepping forward , we see the command \verb | <var:V> := <var:T2> ; | . This advances $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:T2> = <nat:2> \times <var:v> ^ <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:V> = <nat:2> \times <var:v> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment law given in usual Hoare techniques . Stepping through , the environment update code yielding $ <var:V> + <var:T1> $ into $ <var:V>$ . This advances $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:T1> = <nat:9> \times <var:v> \land <var:V> = <nat:2> \times <var:v> ^ <nat:2> \} $ to $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:V> = <nat:2> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> \} $ . This is known to be sound by the assignment inference rule found in typical Hoare techniques . Focusing on the subsequent line contained in the series of instructions , the binding command \verb | <var:V> := <var:V> + <var:T0> | . This redefines $ \{ <var:r> = <var:v> \land <var:T0> = <nat:9> \land <var:V> = <nat:2> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> \} $ into the postcondition $ \{ <var:r> = <var:v> \land <var:V> = <nat:2> \times <var:v> ^ <nat:2> + <nat:9> \times <var:v> + <nat:9> \} $ . This is known to be sound using the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:9> ; <var:T1> := <nat:9> ; <var:T1> := <var:T1> * <var:r> ; <var:T2> := <nat:2> ; <var:T2> := <var:T2> * <var:r> ; <var:T2> := <var:T2> * <var:r> ; <var:V> := <var:T2> ; <var:V> := <var:V> + <var:T1> ; <var:V> := <var:V> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:r> = <var:v> }} <def:poly> {{ <var:V> = <nat:2> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:v> /\ <var:T2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:v> /\ <var:T2> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:v> /\ <var:T2> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:9> * <var:v> /\ <var:V> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:T0> = <nat:9> /\ <var:V> = <nat:2> * <var:v> ^ <nat:2> + <nat:9> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:V> = <nat:2> * <var:v> ^ <nat:2> + <nat:9> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 