\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:3> ; <var:n> := <var:P0> \end{verbatim} Allow it to be that $ <var:H> = <var:c> $ ahead of the execution of the program , it holds that we see $ <var:n> = <nat:3> $ . \end{theorem} \begin{proof} The proof of this list of commands is evident with Hoare logic . Honing in on the following bits of codefound in the list of commands , we see \begin{verbatim} { <var:H> = <var:c> } <var:P0> := <nat:3> { <var:H> = <var:c> \land <var:P0> = <nat:3> } { <var:H> = <var:c> \land <var:P0> = <nat:3> } <var:n> := <var:P0{ <var:H> = <var:c> \land <var:n> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:H> = <var:c> }} <var:P0> := <nat:3> ; <var:n> := <var:P0> {{ <var:n> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:n> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 