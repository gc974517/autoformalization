\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:o0> := <nat:5> ; <var:N> := <var:o0> \end{verbatim} Assuming that we have $ <var:n> = <var:v> $ ahead of the evaluation of this code segment , it holds that we see $ <var:N> = <nat:5> $ once set of commands is done executing . \end{theorem} \begin{proof} The course of logic for our series of instructions can be demonstrated using standard Hoare techniques . Taking a look at the upcoming line of code found in the series of instructions , we see \begin{eqnarray} \{ <var:n> = <var:v> \} \, <var:o0> := <nat:5> \, \{ <var:n> = <var:v> \land <var:o0> = <nat:5> \} \end{eqnarray} Jumping to the subsequent step found in our series of commands , we have \begin{eqnarray} \{ <var:n> = <var:v> \} \, <var:o0> := <nat:5> \, \{ <var:n> = <var:v> \land <var:o0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:n> = <var:v> }} <var:o0> := <nat:5> ; <var:N> := <var:o0> {{ <var:N> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:N> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 