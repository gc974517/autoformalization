\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:D> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:D> ; <var:y2> := <var:y2> * <var:D> ; <var:G> := <var:y2> ; <var:G> := <var:G> + <var:y1> ; <var:G> := <var:G> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:D> = <var:F> $ ( given $ <var:F> \in \mathbb{N} $ ) prior to running our list of instructions , it must be that we see $ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:D> = <var:F> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \} \\ <var:y1> := <nat:8> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \} \\ <var:y1> := <var:y1> * <var:D> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \cdot <var:F> \} \\ <var:y2> := <nat:4> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \cdot <var:F> \land <var:y2> = <nat:4> \} \\ <var:y2> := <var:y2> * <var:D> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \cdot <var:F> \land <var:y2> = <nat:4> \cdot <var:F> \} \\ <var:y2> := <var:y2> * <var:D> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \cdot <var:F> \land <var:y2> = <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:G> := <var:y2> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:y1> = <nat:8> \cdot <var:F> \land <var:G> = <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:y1> ; \\ \{ <var:D> = <var:F> \land <var:y0> = <nat:6> \land <var:G> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:8> \cdot <var:F> \} \\ <var:G> := <var:G> + <var:y0> \\ \{ <var:D> = <var:F> \land <var:G> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:8> \cdot <var:F> + <nat:6> \} \end{eqnarray} Considering the above , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:D> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:D> ; <var:y2> := <var:y2> * <var:D> ; <var:G> := <var:y2> ; <var:G> := <var:G> + <var:y1> ; <var:G> := <var:G> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:D> = <var:F> }} <def:poly> {{ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> * <var:F> /\ <var:y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> * <var:F> /\ <var:y2> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> * <var:F> /\ <var:y2> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:8> * <var:F> /\ <var:G> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:y0> = <nat:6> /\ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:F> /\ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 