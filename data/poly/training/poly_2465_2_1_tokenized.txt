\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:1> ; <var:D> := <var:t0> \end{verbatim} Given it to be that $ <var:V> = <var:H> $ for every $ <var:H> \in \mathbb{N} $ ahead of evaluating this program it follows that we have $ <var:D> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is evident by Hoare logic . Further , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:t0> := <nat:1> & \{ <var:V> = <var:H> \land <var:t0> = <nat:1> \} \\ \{ <var:V> = <var:H> \land <var:t0> = <nat:1> \} & <var:D> := <var:t0& \{ <var:V> = <var:H> \land <var:D> = <nat:1> \} \end{tabular} This is sound by the variable assignmet law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:V> = <var:H> }} <var:t0> := <nat:1> ; <var:D> := <var:t0> {{ <var:D> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:D> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 