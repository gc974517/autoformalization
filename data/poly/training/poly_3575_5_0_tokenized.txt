\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:T0> := <nat:4> ; <var:T1> := <nat:3> ; <var:T1> := <var:T1> * <var:s> ; <var:c> := <var:T1> ; <var:c> := <var:c> + <var:T0> \end{verbatim} Assuming $ <var:s> = <var:r> $ before interpreting this code segment then we see $ <var:c> = <nat:3> \times <var:r> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:s> = <var:r> \} \\ <var:T0> := <nat:4> ; \\ \{ <var:s> = <var:r> \land <var:T0> = <nat:4> \} \\ <var:T1> := <nat:3> ; \\ \{ <var:s> = <var:r> \land <var:T0> = <nat:4> \land <var:T1> = <nat:3> \} \\ <var:T1> := <var:T1> * <var:s> ; \\ \{ <var:s> = <var:r> \land <var:T0> = <nat:4> \land <var:T1> = <nat:3> \times <var:r> \} \\ <var:c> := <var:T1> ; \\ \{ <var:s> = <var:r> \land <var:T0> = <nat:4> \land <var:c> = <nat:3> \times <var:r> \} \\ <var:c> := <var:c> + <var:T0> \\ \{ <var:s> = <var:r> \land <var:c> = <nat:3> \times <var:r> + <nat:4> \} \end{eqnarray} Thus , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:s> = <var:r> }} <var:T0> := <nat:4> ; <var:T1> := <nat:3> ; <var:T1> := <var:T1> * <var:s> ; <var:c> := <var:T1> ; <var:c> := <var:c> + <var:T0> {{ <var:c> = <nat:3> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:T0> = <nat:4> /\ <var:T1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:T0> = <nat:4> /\ <var:c> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:c> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 