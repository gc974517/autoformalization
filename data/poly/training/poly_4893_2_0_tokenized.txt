\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:j0> := <nat:7> ; <var:e> := <var:j0> \end{verbatim} Allowing $ <var:z> = <var:V> $ before the execution of our set of instructions , it follows that we see $ <var:e> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:V> \} \\ <var:j0> := <nat:7> ; \\ \{ <var:z> = <var:V> \land <var:j0> = <nat:7> \} \\ <var:e> := <var:j0> \\ \{ <var:z> = <var:V> \land <var:e> = <nat:7> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:z> = <var:V> }} <var:j0> := <nat:7> ; <var:e> := <var:j0> {{ <var:e> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:e> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 