\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:1> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:B> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:f> := <var:t2> ; <var:f> := <var:f> + <var:t1> ; <var:f> := <var:f> + <var:t0> \end{verbatim} Allowing it to hold that $ <var:B> = <var:U> $ ( assuming some $ <var:U> $ ) before interpreting the list of commands it follows that $ <var:f> = <nat:7> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands can be demonstrated using usual Hoare reasoning . Moving forward to the next step contained in our set of commands , we see the variable update statement defining $ <nat:1> $ as $ <var:t0>$ . This command transfers $ \{ <var:B> = <var:U> \} $ into the postcondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \} $ . Considering the proceeding bit of code in the code , we see the assignment line assigning $ <nat:1> $ as $ <var:t1>$ . This forwards the precondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \} $ toward the condition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \} $ . This is known to be sound with the assignment inference rule found in usual Hoare reasoning . Moving forward to the next step , we have the variable binding statement \verb | <var:t1> := <var:t1> * <var:B> ; | . This moves $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \} $ toward $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \} $ . This is rigorously given through the assignment inference rule obtained from Hoare techniques . Stepping forward , we have the command \verb | <var:t2> := <nat:7> ; | . This takes the condition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \} $ to the condition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \} $ . This is given through the assignment inference rule defined by standard Hoare reasoning . Considering the following statement in the list of commands , the variable binding statement binding $ <var:t2> * <var:B> $ toward $ <var:t2>$ . This takes the precondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \} $ to $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \times <var:U> \} $ . This is sound with the assignment scheme from standard Hoare techniques . Going forward , the variable binding statement defining $ <var:t2> * <var:B> $ into $ <var:t2>$ . This code advances the precondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \times <var:U> \} $ into the condition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \times <var:U> ^ <nat:2> \} $ . Jumping to the proceeding command found in our list of instructions , we have the variable assignmet command yielding $ <var:t2> $ as $ <var:f>$ . This code redefines the condition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:t2> = <nat:7> \times <var:U> ^ <nat:2> \} $ toward $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:f> = <nat:7> \times <var:U> ^ <nat:2> \} $ . Observing the upcoming statement found in the set of commands , we see the variable update code giving $ <var:f> + <var:t1> $ into $ <var:f>$ . This line redefines $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:t1> = <nat:1> \times <var:U> \land <var:f> = <nat:7> \times <var:U> ^ <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:f> = <nat:7> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> \} $ . This is deduced through the assignment scheme found in Hoare logic . Taking another step toward the upcoming command contained in our program , we see the assignment code letting $ <var:f> + <var:t0$ toward $ <var:f>$ . This advances the precondition $ \{ <var:B> = <var:U> \land <var:t0> = <nat:1> \land <var:f> = <nat:7> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> \} $ as $ \{ <var:B> = <var:U> \land <var:f> = <nat:7> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> \} $ . This is deduced using the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:B> = <var:U> }} <var:t0> := <nat:1> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:B> ; <var:t2> := <nat:7> ; <var:t2> := <var:t2> * <var:B> ; <var:t2> := <var:t2> * <var:B> ; <var:f> := <var:t2> ; <var:f> := <var:f> + <var:t1> ; <var:f> := <var:f> + <var:t0> {{ <var:f> = <nat:7> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> * <var:U> /\ <var:t2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> * <var:U> /\ <var:t2> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> * <var:U> /\ <var:t2> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:t1> = <nat:1> * <var:U> /\ <var:f> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:t0> = <nat:1> /\ <var:f> = <nat:7> * <var:U> ^ <nat:2> + <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:U> /\ <var:f> = <nat:7> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 