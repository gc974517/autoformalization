\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:l> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:1> ; <var:e> := <var:o1> <var:e> := <var:e> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Given it to hold that $ <var:l> = <var:v> $ --- given integers $ <var:v> $ --- before the execution of this code , then we see $ <var:e> = <nat:1> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be shown through usual Hoare techniques . Moving forward to the upcoming commands found in the list of commands , we have \begin{verbatim} { <var:l> = <var:v> } <var:o1> := <var:l> { <var:l> = <var:v> \land <var:o1> = <var:v> } { <var:l> = <var:v> \land <var:o1> = <var:v> } <var:o0> := <nat:4> { <var:l> = <var:v> \land <var:o1> = <var:v> \land <var:o0> = <nat:4> } { <var:l> = <var:v> \land <var:o1> = <var:v> \land <var:o0> = <nat:4> } <var:o1> := <var:o1> * <nat:1> { <var:l> = <var:v> \land <var:o1> = <nat:1> \times <var:v> \land <var:o0> = <nat:4> } \end{verbatim} Advancing to the next step , we see \begin{verbatim} { <var:l> = <var:v> } <var:o1> := <var:l> { <var:l> = <var:v> \land <var:o1> = <var:v> } { <var:l> = <var:v> \land <var:o1> = <var:v> } <var:o0> := <nat:4> { <var:l> = <var:v> \land <var:o1> = <var:v> \land <var:o0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:l> ; <var:o0> := <nat:4> ; <var:o1> := <var:o1> * <nat:1> ; <var:e> := <var:o1> <var:e> := <var:e> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:l> = <var:v> }} <def:poly> {{ <var:e> = <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:v> /\ <var:o1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:v> /\ <var:o1> = <var:v> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:v> /\ <var:o1> = <nat:1> * <var:v> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:v> /\ <var:o0> = <nat:4> /\ <var:e> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:v> /\ <var:e> = <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 