\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:t> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:t> ; <var:L2> := <var:L2> * <var:t> ; <var:M> := <var:L2> ; <var:M> := <var:M> + <var:L1> ; <var:M> := <var:M> + <var:L0> \end{verbatim} Given it to hold that $ <var:t> = <var:T> $ ahead of running the list of instructions it holds that $ <var:M> = <nat:2> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:4> $ when series of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:T> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:8> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \} \\ <var:L1> := <var:L1> * <var:t> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \cdot <var:T> \} \\ <var:L2> := <nat:2> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \cdot <var:T> \land <var:L2> = <nat:2> \} \\ <var:L2> := <var:L2> * <var:t> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \cdot <var:T> \land <var:L2> = <nat:2> \cdot <var:T> \} \\ <var:L2> := <var:L2> * <var:t> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \cdot <var:T> \land <var:L2> = <nat:2> \cdot <var:T> ^ <nat:2> \} \\ <var:M> := <var:L2> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:L1> = <nat:8> \cdot <var:T> \land <var:M> = <nat:2> \cdot <var:T> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:L1> ; \\ \{ <var:t> = <var:T> \land <var:L0> = <nat:4> \land <var:M> = <nat:2> \cdot <var:T> ^ <nat:2> + <nat:8> \cdot <var:T> \} \\ <var:M> := <var:M> + <var:L0> \\ \{ <var:t> = <var:T> \land <var:M> = <nat:2> \cdot <var:T> ^ <nat:2> + <nat:8> \cdot <var:T> + <nat:4> \} \end{eqnarray} Applying Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:t> = <var:T> }} <var:L0> := <nat:4> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:t> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:t> ; <var:L2> := <var:L2> * <var:t> ; <var:M> := <var:L2> ; <var:M> := <var:M> + <var:L1> ; <var:M> := <var:M> + <var:L0> {{ <var:M> = <nat:2> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:T> /\ <var:L2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:T> /\ <var:L2> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:T> /\ <var:L2> = <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:8> * <var:T> /\ <var:M> = <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:L0> = <nat:4> /\ <var:M> = <nat:2> * <var:T> ^ <nat:2> + <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:T> /\ <var:M> = <nat:2> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 