\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:c0> := <nat:1> ; <var:e> := <var:c0> \end{verbatim} Allowing it to be that $ <var:o> = <var:r> $ , for $ <var:r> \in \mathbb{Z}^+ $ , prior to evaluating this series of instructions , then we see $ <var:e> = <nat:1> $ after program has executed . \end{theorem} \begin{proof} The argument for this program is demonstrated through Hoare logic . Now , we see \begin{verbatim} { <var:o> = <var:r> } <var:c0> := <nat:1> { <var:o> = <var:r> \land <var:c0> = <nat:1> } \end{verbatim} This is guaranteed by the variable binding rule defined by usual Hoare logic . Taking another step toward the upcoming line seen in the set of commands , we have \begin{verbatim} { <var:o> = <var:r> } <var:c0> := <nat:1> { <var:o> = <var:r> \land <var:c0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:o> = <var:r> }} <var:c0> := <nat:1> ; <var:e> := <var:c0> {{ <var:e> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:e> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 