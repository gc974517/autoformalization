\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:w1> := <var:T> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:3> ; <var:p> := <var:w1> <var:p> := <var:p> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Assume it to hold that $ <var:T> = <var:l> $ before running our series of instructions , it must be that $ <var:p> = <nat:3> \times <var:l> + <nat:6> $ once code exits . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is shown by Hoare reasoning . Going to the next step , we see \verb | { <var:T> = <var:l> } <var:w1> := <var:T> { <var:T> = <var:l> \land <var:w1> = <var:l> } | , \verb | { <var:T> = <var:l> \land <var:w1> = <var:l> } <var:w0> := <nat:6> { <var:T> = <var:l> \land <var:w1> = <var:l> \land <var:w0> = <nat:6> } | , \verb | { <var:T> = <var:l> \land <var:w1> = <var:l> \land <var:w0> = <nat:6> } <var:w1> := <var:w1> * <nat:3> { <var:T> = <var:l> \land <var:w1> = <nat:3> \times <var:l> \land <var:w0> = <nat:6> } | , \verb | { <var:T> = <var:l> \land <var:w1> = <nat:3> \times <var:l> \land <var:w0> = <nat:6> } <var:p> := <var:w1{ <var:T> = <var:l> \land <var:w0> = <nat:6> \land <var:p> = <nat:3> \times <var:l> } | and \verb | { <var:T> = <var:l> \land <var:w0> = <nat:6> \land <var:p> = <nat:3> \times <var:l> } <var:p> := <var:p> + <var:w0{ <var:T> = <var:l> \land <var:p> = <nat:3> \times <var:l> + <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:T> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:3> ; <var:p> := <var:w1> <var:p> := <var:p> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:T> = <var:l> }} <def:poly> {{ <var:p> = <nat:3> * <var:l> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:w1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:w1> = <var:l> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:w1> = <nat:3> * <var:l> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:w0> = <nat:6> /\ <var:p> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:p> = <nat:3> * <var:l> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 