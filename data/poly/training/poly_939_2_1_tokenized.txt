\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:U0> := <nat:1> ; <var:t> := <var:U0> \end{verbatim} Assume it to hold that $ <var:N> = <var:E> $ ahead of interpreting this set of commands it follows that we see $ <var:t> = <nat:1> $ after series of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for the code segment is clear through the below decorated code segment . \begin{eqnarray} \{ <var:N> = <var:E> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:N> = <var:E> \land <var:U0> = <nat:1> \} \\ <var:t> := <var:U0> \\ \{ <var:N> = <var:E> \land <var:t> = <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <var:U0> := <nat:1> ; <var:t> := <var:U0> {{ <var:t> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:t> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 