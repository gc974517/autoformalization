\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:e> ; <var:z> := <var:y1> ; <var:z> := <var:z> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Allowing $ <var:e> = <var:R> $ ( for every positive coefficients $ <var:R> $ ) prior to the execution of our list of instructions , then we have $ <var:z> = <nat:9> \cdot <var:R> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the code segment is evident by typical Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:e> = <var:R> \} & <var:y0> := <nat:4> & \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \} \end{tabular} Shifting focus toward the following pieces of code seen in our code , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:R> \} & <var:y0> := <nat:4> & \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \} \\ \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \} & <var:y1> := <nat:9> & \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \} \\ \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \} & <var:y1> := <var:y1> * <var:e> & \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \cdot <var:R> \} \\ \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \cdot <var:R> \} & <var:z> := <var:y1> & \{ <var:e> = <var:R> \land <var:y0> = <nat:4> \land <var:z> = <nat:9> \cdot <var:R> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:e> ; <var:z> := <var:y1> ; <var:z> := <var:z> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:e> = <var:R> }} <def:poly> {{ <var:z> = <nat:9> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:y0> = <nat:4> /\ <var:z> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:R> /\ <var:z> = <nat:9> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 