\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:W> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:3> ; <var:Q> := <var:T1> <var:Q> := <var:Q> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given for every integers $ <var:c> $ it to be that $ <var:W> = <var:c> $ before the evaluation of this series of commands it holds that we see $ <var:Q> = <nat:3> * <var:c> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:W> = <var:c> \} \\ <var:T1> := <var:W> ; \\ \{ <var:W> = <var:c> \land <var:T1> = <var:c> \} \\ <var:T0> := <nat:7> ; \\ \{ <var:W> = <var:c> \land <var:T1> = <var:c> \land <var:T0> = <nat:7> \} \\ <var:T1> := <var:T1> * <nat:3> ; \\ \{ <var:W> = <var:c> \land <var:T1> = <nat:3> \times <var:c> \land <var:T0> = <nat:7> \} \\ <var:Q> := <var:T1> \\ \{ <var:W> = <var:c> \land <var:T0> = <nat:7> \land <var:Q> = <nat:3> \times <var:c> \} \\ <var:Q> := <var:Q> + <var:T0> \\ \{ <var:W> = <var:c> \land <var:Q> = <nat:3> \times <var:c> + <nat:7> \} \end{eqnarray} As a consequence , this list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:W> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:3> ; <var:Q> := <var:T1> <var:Q> := <var:Q> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <def:poly> {{ <var:Q> = <nat:3> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:T1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:T1> = <var:c> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:T1> = <nat:3> * <var:c> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:T0> = <nat:7> /\ <var:Q> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:Q> = <nat:3> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 