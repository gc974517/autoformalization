\begin{document} \begin{theorem} Let the following list of commands as follows \begin{verbatim} <var:E0> := <nat:2> ; <var:T> := <var:E0> \end{verbatim} Assume it to be that $ <var:o> = <var:P> $ before interpreting this series of instructions it holds that we see $ <var:T> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:P> \} \\ <var:E0> := <nat:2> ; \\ \{ <var:o> = <var:P> \land <var:E0> = <nat:2> \} \\ <var:T> := <var:E0> \\ \{ <var:o> = <var:P> \land <var:T> = <nat:2> \} \end{eqnarray} Using usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:o> = <var:P> }} <var:E0> := <nat:2> ; <var:T> := <var:E0> {{ <var:T> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:E0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:T> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 