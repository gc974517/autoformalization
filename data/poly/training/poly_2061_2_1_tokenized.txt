\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:2> ; <var:M> := <var:C0> \end{verbatim} Assume that we have $ <var:Y> = <var:W> $ for every integers $ <var:W> $ ahead of interpreting our list of commands it holds that we see $ <var:M> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is shown by Hoare logic . Advancing , we see the variable assignmet statement giving $ <nat:2> $ into $ <var:C0>$ . This advances $ \{ <var:Y> = <var:W> \} $ toward $ \{ <var:Y> = <var:W> \land <var:C0> = <nat:2> \} $ . This is sound with the assignment law obtained from Hoare logic . Focusing on the upcoming step found in our set of instructions , we see the variable assignmet line defining $ <var:C0$ as $ <var:M>$ . This forwards the precondition $ \{ <var:Y> = <var:W> \land <var:C0> = <nat:2> \} $ into $ \{ <var:Y> = <var:W> \land <var:M> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Y> = <var:W> }} <var:C0> := <nat:2> ; <var:M> := <var:C0> {{ <var:M> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:W> /\ <var:M> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 