\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:5> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:V> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:V> ; <var:e2> := <var:e2> * <var:V> ; <var:a> := <var:e2> ; <var:a> := <var:a> + <var:e1> ; <var:a> := <var:a> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Allow it to hold that $ <var:V> = <var:R> $ prior to executing the set of commands , then we have $ <var:a> = <nat:7> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is clear through Hoare techniques . Considering the next line contained in the code , the variable binding command \verb | <var:e0> := <nat:5> ; | . This redefines the condition $ \{ <var:V> = <var:R> \} $ toward the postcondition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \} $ . This is ensured by the assignment scheme from typical Hoare reasoning . Shifting focus toward the upcoming bit of code in our set of instructions , we see the binding statement letting $ <nat:5> $ into $ <var:e1>$ . This statement redefines the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \} $ to the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \} $ . This is deduced through the assignment law from standard Hoare logic . Advancing , we see the binding line \verb | <var:e1> := <var:e1> * <var:V> ; | . This statement moves the precondition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \} $ into the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \} $ . Advancing on , we see the assignment statement \verb | <var:e2> := <nat:7> ; | . This redefines the precondition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \} $ into the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \} $ . Going to the next step , we see the variable assignmet command yielding $ <var:e2> * <var:V> $ to $ <var:e2>$ . This line forwards $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \} $ to the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \times <var:R> \} $ . Shifting focus toward the subsequent line seen in our list of commands , we see the variable assignmet line letting $ <var:e2> * <var:V> $ to $ <var:e2>$ . This advances the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \times <var:R> \} $ as the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \times <var:R> ^ <nat:2> \} $ . This is shown through the assignment rule from usual Hoare reasoning . Moving forward to the next piece of code contained in our set of commands , we see the binding line \verb | <var:a> := <var:e2> ; | . This transfers $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:e2> = <nat:7> \times <var:R> ^ <nat:2> \} $ into the condition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:a> = <nat:7> \times <var:R> ^ <nat:2> \} $ . Following , we see the binding code \verb | <var:a> := <var:a> + <var:e1> ; | . This statement transfers $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:e1> = <nat:5> \times <var:R> \land <var:a> = <nat:7> \times <var:R> ^ <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:a> = <nat:7> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> \} $ . Further , we see the binding command \verb | <var:a> := <var:a> + <var:e0> | . This code moves the precondition $ \{ <var:V> = <var:R> \land <var:e0> = <nat:5> \land <var:a> = <nat:7> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> \} $ into the postcondition $ \{ <var:V> = <var:R> \land <var:a> = <nat:7> \times <var:R> ^ <nat:2> + <nat:5> \times <var:R> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:5> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:V> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:V> ; <var:e2> := <var:e2> * <var:V> ; <var:a> := <var:e2> ; <var:a> := <var:a> + <var:e1> ; <var:a> := <var:a> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:V> = <var:R> }} <def:poly> {{ <var:a> = <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> * <var:R> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> * <var:R> /\ <var:e2> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> * <var:R> /\ <var:e2> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:e1> = <nat:5> * <var:R> /\ <var:a> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:e0> = <nat:5> /\ <var:a> = <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:a> = <nat:7> * <var:R> ^ <nat:2> + <nat:5> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 