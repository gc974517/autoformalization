\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:s0> := <nat:7> ; <var:s3> := <nat:4> ; <var:s3> := <var:s3> * <var:a> ; <var:s3> := <var:s3> * <var:a> ; <var:s3> := <var:s3> * <var:a> ; <var:f> := <var:s3> ; <var:f> := <var:f> + <var:s0> \end{verbatim} Allowing ( for all natural numbers $ <var:Y> $ ) it to hold that $ <var:a> = <var:Y> $ before executing the program it holds that $ <var:f> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:7> $ once list of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for the series of commands can be given with Hoare logic . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:Y> \} & <var:s0> := <nat:7> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} \\ \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} & <var:s3> := <nat:4> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \land <var:s3> = <nat:4> \} \\ \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \land <var:s3> = <nat:4> \} & <var:s3> := <var:s3> * <var:a> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \land <var:s3> = <nat:4> \times <var:Y> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:a> = <var:Y> \} & <var:s0> := <nat:7> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} \\ \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} & <var:s3> := <nat:4> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \land <var:s3> = <nat:4> \} \end{tabular} This is deduced by the rule of typical Hoare logic . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:Y> \} & <var:s0> := <nat:7> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} \end{tabular} This is given through the environment update rule from Hoare techniques . Now , \[ \begin{tabular} {rcl} \{ <var:a> = <var:Y> \} & <var:s0> := <nat:7> & \{ <var:a> = <var:Y> \land <var:s0> = <nat:7> \} \end{tabular} This is shown by the variable update inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <var:s0> := <nat:7> ; <var:s3> := <nat:4> ; <var:s3> := <var:s3> * <var:a> ; <var:s3> := <var:s3> * <var:a> ; <var:s3> := <var:s3> * <var:a> ; <var:f> := <var:s3> ; <var:f> := <var:f> + <var:s0> {{ <var:f> = <nat:4> * <var:Y> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> /\ <var:s3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> /\ <var:s3> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> /\ <var:s3> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> /\ <var:s3> = <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:s0> = <nat:7> /\ <var:f> = <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:f> = <nat:4> * <var:Y> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 