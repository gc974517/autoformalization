\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} : \begin{verbatim} <var:v1> := <var:U> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:5> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> \end{verbatim} Assume it to be that $ <var:U> = <var:F> $ for all $ <var:F> \in \mathbb{Z}^+ $ prior to running our set of instructions it follows that $ <var:g> = <nat:5> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:F> \} \\ <var:v1> := <var:U> ; \\ \{ <var:U> = <var:F> \land <var:v1> = <var:F> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:U> = <var:F> \land <var:v1> = <var:F> \land <var:v0> = <nat:1> \} \\ <var:v1> := <var:v1> * <nat:5> ; \\ \{ <var:U> = <var:F> \land <var:v1> = <nat:5> \times <var:F> \land <var:v0> = <nat:1> \} \\ <var:g> := <var:v1> \\ \{ <var:U> = <var:F> \land <var:v0> = <nat:1> \land <var:g> = <nat:5> \times <var:F> \} \\ <var:g> := <var:g> + <var:v0> \\ \{ <var:U> = <var:F> \land <var:g> = <nat:5> \times <var:F> + <nat:1> \} \end{eqnarray} The application of usual Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:U> = <var:F> }} <var:v1> := <var:U> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:5> ; <var:g> := <var:v1> <var:g> := <var:g> + <var:v0> {{ <var:g> = <nat:5> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:v1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:v1> = <var:F> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:v1> = <nat:5> * <var:F> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:v0> = <nat:1> /\ <var:g> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:g> = <nat:5> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 