\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:L> ; <var:x> := <var:j1> ; <var:x> := <var:x> + <var:j0> \end{verbatim} Given $ <var:L> = <var:f> $ prior to evaluating this code segment , then $ <var:x> = <nat:1> * <var:f> + <nat:9> $ . \end{theorem} \begin{proof} The proof of the set of commands can be accomplished with usual Hoare logic . Keeping momentum , we see \verb | { <var:L> = <var:f> } <var:j0> := <nat:9> { <var:L> = <var:f> \land <var:j0> = <nat:9> } | and \verb | { <var:L> = <var:f> \land <var:j0> = <nat:9> } <var:j1> := <nat:1> { <var:L> = <var:f> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> } | . Focusing on the following commands found in our code , we see \verb | { <var:L> = <var:f> } <var:j0> := <nat:9> { <var:L> = <var:f> \land <var:j0> = <nat:9> } | , \verb | { <var:L> = <var:f> \land <var:j0> = <nat:9> } <var:j1> := <nat:1> { <var:L> = <var:f> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> } | and \verb | { <var:L> = <var:f> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> } <var:j1> := <var:j1> * <var:L> { <var:L> = <var:f> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> \cdot <var:f> } | . This is given with the environment update scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:L> = <var:f> }} <var:j0> := <nat:9> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:L> ; <var:x> := <var:j1> ; <var:x> := <var:x> + <var:j0> {{ <var:x> = <nat:1> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:j0> = <nat:9> /\ <var:x> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:x> = <nat:1> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 