\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J1> := <var:y> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:f> := <var:J1> <var:f> := <var:f> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:y> = <var:C> $ ahead of running our segment of code it holds that we have $ <var:f> = <nat:2> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} We can see that the below decorated list of instructions . \begin{eqnarray} \{ <var:y> = <var:C> \} \\ <var:J1> := <var:y> ; \\ \{ <var:y> = <var:C> \land <var:J1> = <var:C> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:y> = <var:C> \land <var:J1> = <var:C> \land <var:J0> = <nat:1> \} \\ <var:J1> := <var:J1> * <nat:2> ; \\ \{ <var:y> = <var:C> \land <var:J1> = <nat:2> * <var:C> \land <var:J0> = <nat:1> \} \\ <var:f> := <var:J1> \\ \{ <var:y> = <var:C> \land <var:J0> = <nat:1> \land <var:f> = <nat:2> * <var:C> \} \\ <var:f> := <var:f> + <var:J0> \\ \{ <var:y> = <var:C> \land <var:f> = <nat:2> * <var:C> + <nat:1> \} \end{eqnarray} Using standard Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J1> := <var:y> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:f> := <var:J1> <var:f> := <var:f> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:y> = <var:C> }} <def:poly> {{ <var:f> = <nat:2> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:J1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:J1> = <var:C> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:J1> = <nat:2> * <var:C> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:J0> = <nat:1> /\ <var:f> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:C> /\ <var:f> = <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 