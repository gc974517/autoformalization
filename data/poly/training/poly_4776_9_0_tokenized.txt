\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:5> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:b> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:b> ; <var:m2> := <var:m2> * <var:b> ; <var:u> := <var:m2> ; <var:u> := <var:u> + <var:m1> ; <var:u> := <var:u> + <var:m0> \end{verbatim} Allow $ <var:b> = <var:x> $ for any whole numbers $ <var:x> $ before executing this series of instructions then we see $ <var:u> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:b> = <var:x> \} \\ <var:m0> := <nat:5> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \} \\ <var:m1> := <nat:7> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \} \\ <var:m1> := <var:m1> * <var:b> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \cdot <var:x> \} \\ <var:m2> := <nat:1> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \cdot <var:x> \land <var:m2> = <nat:1> \} \\ <var:m2> := <var:m2> * <var:b> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \cdot <var:x> \land <var:m2> = <nat:1> \cdot <var:x> \} \\ <var:m2> := <var:m2> * <var:b> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \cdot <var:x> \land <var:m2> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:u> := <var:m2> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:m1> = <nat:7> \cdot <var:x> \land <var:u> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:m1> ; \\ \{ <var:b> = <var:x> \land <var:m0> = <nat:5> \land <var:u> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> \} \\ <var:u> := <var:u> + <var:m0> \\ \{ <var:b> = <var:x> \land <var:u> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:7> \cdot <var:x> + <nat:5> \} \end{eqnarray} Therefore , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:b> = <var:x> }} <var:m0> := <nat:5> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:b> ; <var:m2> := <nat:1> ; <var:m2> := <var:m2> * <var:b> ; <var:m2> := <var:m2> * <var:b> ; <var:u> := <var:m2> ; <var:u> := <var:u> + <var:m1> ; <var:u> := <var:u> + <var:m0> {{ <var:u> = <nat:1> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> * <var:x> /\ <var:m2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> * <var:x> /\ <var:m2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> * <var:x> /\ <var:m2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:m1> = <nat:7> * <var:x> /\ <var:u> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:m0> = <nat:5> /\ <var:u> = <nat:1> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:x> /\ <var:u> = <nat:1> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 