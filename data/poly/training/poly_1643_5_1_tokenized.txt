\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:W1> := <var:h> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:3> ; <var:c> := <var:W1> <var:c> := <var:c> + <var:W0> \end{verbatim} Assume it to be that $ <var:h> = <var:a> $ before the evaluation of this list of instructions then we see $ <var:c> = <nat:3> \cdot <var:a> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions is evident using typical Hoare logic . Moving forward to the upcoming bit of code found in the segment of code , we see the variable update statement \verb | <var:W1> := <var:h> ; | . This redefines $ \{ <var:h> = <var:a> \} $ to the postcondition $ \{ <var:h> = <var:a> \land <var:W1> = <var:a> \} $ . Advancing to the subsequent command contained in the series of instructions , we see the assignment line defining $ <nat:4> $ toward $ <var:W0>$ . This code transfers the condition $ \{ <var:h> = <var:a> \land <var:W1> = <var:a> \} $ as $ \{ <var:h> = <var:a> \land <var:W1> = <var:a> \land <var:W0> = <nat:4> \} $ . This is known to be sound through the assignment scheme defined by typical Hoare reasoning . Now , the variable update statement assigning $ <var:W1> * <nat:3> $ toward $ <var:W1>$ . This advances the condition $ \{ <var:h> = <var:a> \land <var:W1> = <var:a> \land <var:W0> = <nat:4> \} $ to $ \{ <var:h> = <var:a> \land <var:W1> = <nat:3> \times <var:a> \land <var:W0> = <nat:4> \} $ . This is rigorously given using the assignment scheme defined in typical Hoare reasoning . Moving forward to the following line seen in our series of instructions , the variable update statement letting $ <var:W1$ into $ <var:c>$ . This redefines $ \{ <var:h> = <var:a> \land <var:W1> = <nat:3> \times <var:a> \land <var:W0> = <nat:4> \} $ to $ \{ <var:h> = <var:a> \land <var:W0> = <nat:4> \land <var:c> = <nat:3> \times <var:a> \} $ . Advancing to the next step , we have the variable update line \verb | <var:c> := <var:c> + <var:W0> | . This moves the precondition $ \{ <var:h> = <var:a> \land <var:W0> = <nat:4> \land <var:c> = <nat:3> \times <var:a> \} $ toward $ \{ <var:h> = <var:a> \land <var:c> = <nat:3> \times <var:a> + <nat:4> \} $ . This is sound through the assignment inference rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:h> = <var:a> }} <var:W1> := <var:h> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:3> ; <var:c> := <var:W1> <var:c> := <var:c> + <var:W0> {{ <var:c> = <nat:3> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:a> /\ <var:W1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:a> /\ <var:W1> = <var:a> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:a> /\ <var:W1> = <nat:3> * <var:a> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:a> /\ <var:W0> = <nat:4> /\ <var:c> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:a> /\ <var:c> = <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 