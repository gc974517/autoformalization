\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:Z> ; <var:w2> := <var:w1> * <var:Z> ; <var:w3> := <var:w2> * <var:Z> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:8> ; <var:I> := <var:w3> <var:I> := <var:I> + <var:w2> <var:I> := <var:I> + <var:w1> <var:I> := <var:I> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Allow it to hold that $ <var:Z> = <var:N> $ ahead of running this code , it follows that we have $ <var:I> = <nat:8> \times <var:N> ^ <nat:3> + <nat:6> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:5> $ . \end{theorem} \begin{proof} The argument for the list of commands can be demonstrated through Hoare logic . Following , we have \begin{verbatim} { <var:Z> = <var:N> } <var:w1> := <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> } { <var:Z> = <var:N> \land <var:w1> = <var:N> } <var:w2> := <var:w1> * <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> } { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> } <var:w3> := <var:w2> * <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> } \end{verbatim} This is sound through the assignment law given in usual Hoare logic . Going to the next step , we have \begin{verbatim} { <var:Z> = <var:N> } <var:w1> := <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> } { <var:Z> = <var:N> \land <var:w1> = <var:N> } <var:w2> := <var:w1> * <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> } { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> } <var:w3> := <var:w2> * <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> } { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> } <var:w0> := <nat:5> { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w0> = <nat:5> } { <var:Z> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w0> = <nat:5> } <var:w1> := <var:w1> * <nat:4> { <var:Z> = <var:N> \land <var:w1> = <nat:4> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w0> = <nat:5> } \end{verbatim} Taking another step toward the subsequent command seen in the segment of code , we have \begin{verbatim} { <var:Z> = <var:N> } <var:w1> := <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> } \end{verbatim} Focusing on the following step in our segment of code , we have \begin{verbatim} { <var:Z> = <var:N> } <var:w1> := <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> } \end{verbatim} This is sound by the variable update inference rule in usual Hoare techniques . Moving on to the proceeding line of code found in the code segment , we have \begin{verbatim} { <var:Z> = <var:N> } <var:w1> := <var:Z> { <var:Z> = <var:N> \land <var:w1> = <var:N> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <def:poly> := <var:w1> := <var:Z> ; <var:w2> := <var:w1> * <var:Z> ; <var:w3> := <var:w2> * <var:Z> ; <var:w0> := <nat:5> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:8> ; <var:I> := <var:w3> <var:I> := <var:I> + <var:w2> <var:I> := <var:I> + <var:w1> <var:I> := <var:I> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <def:poly> {{ <var:I> = <nat:8> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <nat:4> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <nat:4> * <var:N> /\ <var:w2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <nat:4> * <var:N> /\ <var:w2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:w3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <nat:4> * <var:N> /\ <var:w2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:w0> = <nat:5> /\ <var:I> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w1> = <nat:4> * <var:N> /\ <var:w0> = <nat:5> /\ <var:I> = <nat:8> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:w0> = <nat:5> /\ <var:I> = <nat:8> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:I> = <nat:8> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 