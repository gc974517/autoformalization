\begin{document} \begin{theorem} We define the following code as follows \begin{verbatim} <var:a0> := <nat:2> ; <var:j> := <var:a0> \end{verbatim} Assume that we have $ <var:L> = <var:i> $ before executing the series of commands , it must be that we have $ <var:j> = <nat:2> $ after code terminates . \end{theorem} \begin{proof} The flow of logic for the set of instructions is accomplished by standard Hoare logic . Observing the proceeding lines of codecontained in the set of commands , we have \verb | { <var:L> = <var:i> } <var:a0> := <nat:2> { <var:L> = <var:i> \land <var:a0> = <nat:2> } | and \verb | { <var:L> = <var:i> \land <var:a0> = <nat:2> } <var:j> := <var:a0{ <var:L> = <var:i> \land <var:j> = <nat:2> } | . This is given using the variable binding scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <var:a0> := <nat:2> ; <var:j> := <var:a0> {{ <var:j> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:j> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 