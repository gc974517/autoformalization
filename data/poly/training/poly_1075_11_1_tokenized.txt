\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:U1> := <var:h> ; <var:U2> := <var:U1> * <var:h> ; <var:U3> := <var:U2> * <var:h> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:3> ; <var:U3> := <var:U3> * <nat:7> ; <var:S> := <var:U3> <var:S> := <var:S> + <var:U2> <var:S> := <var:S> + <var:U1> <var:S> := <var:S> + <var:U0> \end{verbatim} Assuming that we have $ <var:h> = <var:C> $ prior to executing the list of instructions it must be that $ <var:S> = <nat:7> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:1> $ after list of instructions terminates . \end{theorem} \begin{proof} Proving correctness for this code is shown by usual Hoare logic . Jumping to the subsequent commands found in our program , we have \begin{eqnarray} \{ <var:h> = <var:C> \} \, <var:U1> := <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \, <var:U2> := <var:U1> * <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \} \, <var:U3> := <var:U2> * <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \} \, <var:U0> := <nat:1> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \land <var:U0> = <nat:1> \} \, <var:U1> := <var:U1> * <nat:1> \, \{ <var:h> = <var:C> \land <var:U1> = <nat:1> \cdot <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <nat:1> \cdot <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \land <var:U0> = <nat:1> \} \, <var:U2> := <var:U2> * <nat:3> \, \{ <var:h> = <var:C> \land <var:U1> = <nat:1> \cdot <var:C> \land <var:U2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \land <var:U0> = <nat:1> \} \end{eqnarray} This is known to be sound by the environment update rule from usual Hoare logic . Going forward , \begin{eqnarray} \{ <var:h> = <var:C> \} \, <var:U1> := <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \, <var:U2> := <var:U1> * <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \} \end{eqnarray} This is deduced using the variable binding scheme defined in standard Hoare logic . Observing the proceeding lines seen in the list of commands , we have \begin{eqnarray} \{ <var:h> = <var:C> \} \, <var:U1> := <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \} \, <var:U2> := <var:U1> * <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \} \\ \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \} \, <var:U3> := <var:U2> * <var:h> \, \{ <var:h> = <var:C> \land <var:U1> = <var:C> \land <var:U2> = <var:C> ^ <nat:2> \land <var:U3> = <var:C> ^ <nat:3> \} \end{eqnarray} This is deduced by the binding rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <var:U1> := <var:h> ; <var:U2> := <var:U1> * <var:h> ; <var:U3> := <var:U2> * <var:h> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:3> ; <var:U3> := <var:U3> * <nat:7> ; <var:S> := <var:U3> <var:S> := <var:S> + <var:U2> <var:S> := <var:S> + <var:U1> <var:S> := <var:S> + <var:U0> {{ <var:S> = <nat:7> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <var:C> /\ <var:U2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <var:C> /\ <var:U2> = <var:C> ^ <nat:2> /\ <var:U3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <var:C> /\ <var:U2> = <var:C> ^ <nat:2> /\ <var:U3> = <var:C> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <nat:1> * <var:C> /\ <var:U2> = <var:C> ^ <nat:2> /\ <var:U3> = <var:C> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <nat:1> * <var:C> /\ <var:U2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:U3> = <var:C> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <nat:1> * <var:C> /\ <var:U2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:C> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <nat:1> * <var:C> /\ <var:U2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:U0> = <nat:1> /\ <var:S> = <nat:7> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U1> = <nat:1> * <var:C> /\ <var:U0> = <nat:1> /\ <var:S> = <nat:7> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:U0> = <nat:1> /\ <var:S> = <nat:7> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:S> = <nat:7> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 