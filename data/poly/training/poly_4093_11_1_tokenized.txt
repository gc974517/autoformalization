\begin{document} \begin{theorem} Consider a code segment as \begin{verbatim} <var:Y1> := <var:q> ; <var:Y2> := <var:Y1> * <var:q> ; <var:Y3> := <var:Y2> * <var:q> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:x> := <var:Y3> <var:x> := <var:x> + <var:Y2> <var:x> := <var:x> + <var:Y1> <var:x> := <var:x> + <var:Y0> \end{verbatim} Allow it to hold that $ <var:q> = <var:C> $ prior to executing our set of commands it must be that we see $ <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> + <nat:6> $ after list of commands has terminated . \end{theorem} \begin{proof} The proof of this series of instructions can be accomplished with Hoare reasoning . Now , we see the assignment statement assigning $ <var:q> $ toward $ <var:Y1>$ . This line transfers the precondition $ \{ <var:q> = <var:C> \} $ to the condition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \} $ . Going to the next step , the code \verb | <var:Y2> := <var:Y1> * <var:q> ; | . This moves $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \} $ toward the condition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \} $ . Advancing , we have the variable assignmet line \verb | <var:Y3> := <var:Y2> * <var:q> ; | . This moves the precondition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \} $ . This is deduced through the assignment law obtained from standard Hoare reasoning . Next , the variable update code giving $ <nat:6> $ as $ <var:Y0>$ . This code advances the condition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \} $ into the condition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ . Now , we see the assignment command \verb | <var:Y1> := <var:Y1> * <nat:5> ; | . This advances the precondition $ \{ <var:q> = <var:C> \land <var:Y1> = <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ toward $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ . Now , we see the code yielding $ <var:Y2> * <nat:1> $ to $ <var:Y2>$ . This code forwards $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ into $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ . This is known to be sound with the assignment rule in Hoare techniques . Paying attention to the subsequent statement seen in the series of instructions , we have the command \verb | <var:Y3> := <var:Y3> * <nat:2> ; | . This advances the precondition $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ as the postcondition $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:2> \times <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ . Focusing on the next line seen in the program , we see the variable binding code yielding $ <var:Y3$ toward $ <var:x>$ . This moves $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:2> \times <var:C> ^ <nat:3> \land <var:Y0> = <nat:6> \} $ as $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> \} $ . Advancing to the next step , we see the variable binding command \verb | <var:x> := <var:x> + <var:Y2> | . This line moves the precondition $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> \} $ as $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule of usual Hoare reasoning . After , we see the command \verb | <var:x> := <var:x> + <var:Y1> | . This redefines the precondition $ \{ <var:q> = <var:C> \land <var:Y1> = <nat:5> \times <var:C> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:C> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> \} $ . Keeping momentum , we see the binding line letting $ <var:x> + <var:Y0$ to $ <var:x>$ . This moves the condition $ \{ <var:q> = <var:C> \land <var:Y0> = <nat:6> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> \} $ toward the condition $ \{ <var:q> = <var:C> \land <var:x> = <nat:2> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:5> \times <var:C> + <nat:6> \} $ . This is guaranteed with the assignment rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:q> = <var:C> }} <var:Y1> := <var:q> ; <var:Y2> := <var:Y1> * <var:q> ; <var:Y3> := <var:Y2> * <var:q> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:2> ; <var:x> := <var:Y3> <var:x> := <var:x> + <var:Y2> <var:x> := <var:x> + <var:Y1> <var:x> := <var:x> + <var:Y0> {{ <var:x> = <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <var:C> /\ <var:Y2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <var:C> /\ <var:Y2> = <var:C> ^ <nat:2> /\ <var:Y3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <var:C> /\ <var:Y2> = <var:C> ^ <nat:2> /\ <var:Y3> = <var:C> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <nat:5> * <var:C> /\ <var:Y2> = <var:C> ^ <nat:2> /\ <var:Y3> = <var:C> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <nat:5> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <var:C> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <nat:5> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <nat:2> * <var:C> ^ <nat:3> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <nat:5> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y0> = <nat:6> /\ <var:x> = <nat:2> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y1> = <nat:5> * <var:C> /\ <var:Y0> = <nat:6> /\ <var:x> = <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:Y0> = <nat:6> /\ <var:x> = <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:C> /\ <var:x> = <nat:2> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 