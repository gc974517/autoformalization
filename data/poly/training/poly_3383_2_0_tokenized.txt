\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:1> ; <var:f> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Z> = <var:M> $ prior to executing the set of instructions , it follows that $ <var:f> = <nat:1> $ once set of instructions is done . \end{theorem} \begin{proof} Proving correctness for this series of instructions is accomplished with typical Hoare logic . Jumping to the upcoming piece of code seen in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:M> \} & <var:F0> := <nat:1> & \{ <var:Z> = <var:M> \land <var:F0> = <nat:1> \} \end{tabular} This is deduced using the scheme from typical Hoare logic . Paying attention to the subsequent piece of code seen in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:M> \} & <var:F0> := <nat:1> & \{ <var:Z> = <var:M> \land <var:F0> = <nat:1> \} \end{tabular} This is rigorously given with the variable update scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:f> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Z> = <var:M> }} <def:poly> {{ <var:f> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:M> /\ <var:f> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 