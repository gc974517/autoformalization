\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:4> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:W> := <var:r3> <var:W> := <var:W> + <var:r2> <var:W> := <var:W> + <var:r1> <var:W> := <var:W> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:o> = <var:G> $ prior to running our list of instructions it follows that we see $ <var:W> = <nat:5> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our list of commands can be accomplished by Hoare reasoning . Taking a look at the next bit of code in the series of instructions , we have \verb | { <var:o> = <var:G> } <var:r1> := <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> } | . This is rigorously given by the binding inference rule found in standard Hoare logic . Jumping to the upcoming lines seen in the set of commands , we have \verb | { <var:o> = <var:G> } <var:r1> := <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> } <var:r2> := <var:r1> * <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> } | and \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> } <var:r3> := <var:r2> * <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> } | . Moving forward to the following lines of codefound in our code segment , we see \verb | { <var:o> = <var:G> } <var:r1> := <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> } <var:r2> := <var:r1> * <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> } <var:r3> := <var:r2> * <var:o> { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> } <var:r0> := <nat:3> { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } <var:r1> := <var:r1> * <nat:4> { <var:o> = <var:G> \land <var:r1> = <nat:4> \cdot <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } | , \verb | { <var:o> = <var:G> \land <var:r1> = <nat:4> \cdot <var:G> \land <var:r2> = <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } <var:r2> := <var:r2> * <nat:4> { <var:o> = <var:G> \land <var:r1> = <nat:4> \cdot <var:G> \land <var:r2> = <nat:4> \cdot <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } | and \verb | { <var:o> = <var:G> \land <var:r1> = <nat:4> \cdot <var:G> \land <var:r2> = <nat:4> \cdot <var:G> ^ <nat:2> \land <var:r3> = <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } <var:r3> := <var:r3> * <nat:5> { <var:o> = <var:G> \land <var:r1> = <nat:4> \cdot <var:G> \land <var:r2> = <nat:4> \cdot <var:G> ^ <nat:2> \land <var:r3> = <nat:5> \cdot <var:G> ^ <nat:3> \land <var:r0> = <nat:3> } | . This is sound using the variable update rule defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:3> ; <var:r1> := <var:r1> * <nat:4> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:W> := <var:r3> <var:W> := <var:W> + <var:r2> <var:W> := <var:W> + <var:r1> <var:W> := <var:W> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:o> = <var:G> }} <def:poly> {{ <var:W> = <nat:5> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <var:G> /\ <var:r2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <var:G> /\ <var:r2> = <var:G> ^ <nat:2> /\ <var:r3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <var:G> /\ <var:r2> = <var:G> ^ <nat:2> /\ <var:r3> = <var:G> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <nat:4> * <var:G> /\ <var:r2> = <var:G> ^ <nat:2> /\ <var:r3> = <var:G> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <nat:4> * <var:G> /\ <var:r2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:r3> = <var:G> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <nat:4> * <var:G> /\ <var:r2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:G> ^ <nat:3> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <nat:4> * <var:G> /\ <var:r2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:r0> = <nat:3> /\ <var:W> = <nat:5> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r1> = <nat:4> * <var:G> /\ <var:r0> = <nat:3> /\ <var:W> = <nat:5> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:r0> = <nat:3> /\ <var:W> = <nat:5> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:W> = <nat:5> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 