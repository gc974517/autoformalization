\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:R0> := <nat:1> ; <var:z> := <var:R0> \end{verbatim} Allow it to hold that $ <var:w> = <var:o> $ prior to the execution of the set of instructions then $ <var:z> = <nat:1> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of this code can be demonstrated using usual Hoare reasoning . Following , we have the environment update line defining $ <nat:1> $ to $ <var:R0>$ . This moves $ \{ <var:w> = <var:o> \} $ as the condition $ \{ <var:w> = <var:o> \land <var:R0> = <nat:1> \} $ . Moving forward to the upcoming bit of code in our code , the environment update code giving $ <var:R0$ toward $ <var:z>$ . This code transfers the precondition $ \{ <var:w> = <var:o> \land <var:R0> = <nat:1> \} $ as $ \{ <var:w> = <var:o> \land <var:z> = <nat:1> \} $ . This is known to be sound by the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <var:R0> := <nat:1> ; <var:z> := <var:R0> {{ <var:z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 