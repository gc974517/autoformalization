\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:8> ; <var:A> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Assume $ <var:e> = <var:Z> $ ahead of interpreting this list of commands , it holds that we see $ <var:A> = <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is demonstrated with typical Hoare logic . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:e> = <var:Z> \} & <var:B0> := <nat:8> & \{ <var:e> = <var:Z> \land <var:B0> = <nat:8> \} \\ \{ <var:e> = <var:Z> \land <var:B0> = <nat:8> \} & <var:A> := <var:B0& \{ <var:e> = <var:Z> \land <var:A> = <nat:8> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:8> ; <var:A> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:e> = <var:Z> }} <def:poly> {{ <var:A> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:B0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:A> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 