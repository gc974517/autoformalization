\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:a0> := <nat:1> ; <var:k> := <var:a0> \end{verbatim} Allowing $ <var:V> = <var:p> $ ahead of evaluating the series of commands it holds that we have $ <var:k> = <nat:1> $ when series of commands is done executing . \end{theorem} \begin{proof} Utilizing standard Hoare logic results in : \begin{eqnarray} \{ <var:V> = <var:p> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:V> = <var:p> \land <var:a0> = <nat:1> \} \\ <var:k> := <var:a0> \\ \{ <var:V> = <var:p> \land <var:k> = <nat:1> \} \end{eqnarray} Therefore , the code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:V> = <var:p> }} <var:a0> := <nat:1> ; <var:k> := <var:a0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:p> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 