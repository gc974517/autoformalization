\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:Y> := <var:F2> ; <var:Y> := <var:Y> + <var:F1> ; <var:Y> := <var:Y> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:h> = <var:I> $ --- given every $ <var:I> \in \mathbb{N} $ --- prior to the evaluation of the code it must be that we see $ <var:Y> = <nat:1> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:I> \} \\ <var:F0> := <nat:5> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \} \\ <var:F1> := <nat:3> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \} \\ <var:F1> := <var:F1> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:I> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:I> \land <var:F2> = <nat:1> \} \\ <var:F2> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> \} \\ <var:F2> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:I> \land <var:F2> = <nat:1> \cdot <var:I> ^ <nat:2> \} \\ <var:Y> := <var:F2> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:I> \land <var:Y> = <nat:1> \cdot <var:I> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:F1> ; \\ \{ <var:h> = <var:I> \land <var:F0> = <nat:5> \land <var:Y> = <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> \} \end{eqnarray} Continuing the execution of our segment of code gives us : \begin{eqnarray} <var:Y> := <var:Y> + <var:F0> \\ \{ <var:h> = <var:I> \land <var:Y> = <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:5> \} \end{eqnarray} Given the above , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:5> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:Y> := <var:F2> ; <var:Y> := <var:Y> + <var:F1> ; <var:Y> := <var:Y> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:h> = <var:I> }} <def:poly> {{ <var:Y> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:I> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:I> /\ <var:F2> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:I> /\ <var:Y> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:F0> = <nat:5> /\ <var:Y> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:I> /\ <var:Y> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 