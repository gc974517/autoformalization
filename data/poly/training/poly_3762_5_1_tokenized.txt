\begin{document} \begin{theorem} Take a program in \emph{Imp} as \begin{verbatim} <var:T1> := <var:P> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:6> ; <var:Z> := <var:T1> <var:Z> := <var:Z> + <var:T0> \end{verbatim} Given that we have $ <var:P> = <var:o> $ , for every $ <var:o> \in \mathbb{Z}^+ $ , ahead of executing this segment of code , it follows that we see $ <var:Z> = <nat:6> \cdot <var:o> + <nat:5> $ when code is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is clear by typical Hoare reasoning . Honing in on the proceeding lines of codein the segment of code , we have \begin{eqnarray} \{ <var:P> = <var:o> \} \, <var:T1> := <var:P> \, \{ <var:P> = <var:o> \land <var:T1> = <var:o> \} \\ \{ <var:P> = <var:o> \land <var:T1> = <var:o> \} \, <var:T0> := <nat:5> \, \{ <var:P> = <var:o> \land <var:T1> = <var:o> \land <var:T0> = <nat:5> \} \\ \{ <var:P> = <var:o> \land <var:T1> = <var:o> \land <var:T0> = <nat:5> \} \, <var:T1> := <var:T1> * <nat:6> \, \{ <var:P> = <var:o> \land <var:T1> = <nat:6> \cdot <var:o> \land <var:T0> = <nat:5> \} \end{eqnarray} Now , we see \begin{eqnarray} \{ <var:P> = <var:o> \} \, <var:T1> := <var:P> \, \{ <var:P> = <var:o> \land <var:T1> = <var:o> \} \\ \{ <var:P> = <var:o> \land <var:T1> = <var:o> \} \, <var:T0> := <nat:5> \, \{ <var:P> = <var:o> \land <var:T1> = <var:o> \land <var:T0> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <var:T1> := <var:P> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:6> ; <var:Z> := <var:T1> <var:Z> := <var:Z> + <var:T0> {{ <var:Z> = <nat:6> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:T1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:T1> = <var:o> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:T1> = <nat:6> * <var:o> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:T0> = <nat:5> /\ <var:Z> = <nat:6> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:Z> = <nat:6> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 