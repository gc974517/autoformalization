\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:4> ; <var:E> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:W> = <var:w> $ --- given any whole numbers $ <var:w> $ --- before the evaluation of this set of instructions it must be that we have $ <var:E> = <nat:4> $ after series of commands terminates . \end{theorem} \begin{proof} The course of logic for our code segment can be demonstrated through usual Hoare reasoning . After , the assignment statement defining $ <nat:4> $ toward $ <var:V0>$ . This code moves the condition $ \{ <var:W> = <var:w> \} $ into the condition $ \{ <var:W> = <var:w> \land <var:V0> = <nat:4> \} $ . This is deduced using the assignment scheme obtained from typical Hoare techniques . Further , we see the statement \verb | <var:E> := <var:V0> | . This line forwards the precondition $ \{ <var:W> = <var:w> \land <var:V0> = <nat:4> \} $ toward the condition $ \{ <var:W> = <var:w> \land <var:E> = <nat:4> \} $ . This is guaranteed through the assignment rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:E> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:W> = <var:w> }} <def:poly> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 