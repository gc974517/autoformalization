\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:o> ; <var:q> := <var:V1> ; <var:q> := <var:q> + <var:V0> \end{verbatim} Allowing it to be that $ <var:o> = <var:p> $ before running the segment of code it follows that we have $ <var:q> = <nat:1> * <var:p> + <nat:1> $ when code has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions can be given through usual Hoare logic . Taking another step toward the upcoming piece of code contained in our series of commands , we see the variable update code \verb | <var:V0> := <nat:1> ; | . This statement transfers the precondition $ \{ <var:o> = <var:p> \} $ toward $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \} $ . This is shown to be logically sound by the assignment scheme found in usual Hoare logic . Considering the subsequent statement contained in our code , we see the environment update statement defining $ <nat:1> $ as $ <var:V1>$ . This moves $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \} $ as $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:V1> = <nat:1> \} $ . This is sound by the assignment inference rule obtained from Hoare techniques . Now , the binding command giving $ <var:V1> * <var:o> $ as $ <var:V1>$ . This takes the condition $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:V1> = <nat:1> \} $ as the postcondition $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:V1> = <nat:1> * <var:p> \} $ . Moving onward , the variable binding command \verb | <var:q> := <var:V1> ; | . This line redefines the precondition $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:V1> = <nat:1> * <var:p> \} $ as the postcondition $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:q> = <nat:1> * <var:p> \} $ . This is guaranteed with the assignment scheme from typical Hoare reasoning . Shifting focus toward the proceeding bit of code in the set of instructions , the environment update code letting $ <var:q> + <var:V0$ as $ <var:q>$ . This line advances the precondition $ \{ <var:o> = <var:p> \land <var:V0> = <nat:1> \land <var:q> = <nat:1> * <var:p> \} $ into the condition $ \{ <var:o> = <var:p> \land <var:q> = <nat:1> * <var:p> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:o> = <var:p> }} <var:V0> := <nat:1> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:o> ; <var:q> := <var:V1> ; <var:q> := <var:q> + <var:V0> {{ <var:q> = <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:V0> = <nat:1> /\ <var:q> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:p> /\ <var:q> = <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 