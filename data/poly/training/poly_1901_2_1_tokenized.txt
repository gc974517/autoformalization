\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:3> ; <var:W> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:F> = <var:C> $ --- with some positive numbers $ <var:C> $ --- ahead of executing the list of instructions then $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is demonstrated by typical Hoare reasoning . Immediately after , the binding code \verb | <var:p0> := <nat:3> ; | . This transfers $ \{ <var:F> = <var:C> \} $ to $ \{ <var:F> = <var:C> \land <var:p0> = <nat:3> \} $ . This is given through the assignment inference rule defined in typical Hoare reasoning . Focusing on the subsequent line of code seen in our program , we see the variable assignmet line \verb | <var:W> := <var:p0> | . This redefines the precondition $ \{ <var:F> = <var:C> \land <var:p0> = <nat:3> \} $ toward the condition $ \{ <var:F> = <var:C> \land <var:W> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:W> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:F> = <var:C> }} <def:poly> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 