\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:s0> := <nat:6> ; <var:S> := <var:s0> \end{verbatim} Assume it to hold that $ <var:c> = <var:N> $ --- for some positive integers $ <var:N> $ --- ahead of the evaluation of our code then $ <var:S> = <nat:6> $ . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:c> = <var:N> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:c> = <var:N> \land <var:s0> = <nat:6> \} \\ <var:S> := <var:s0> \\ \{ <var:c> = <var:N> \land <var:S> = <nat:6> \} \end{eqnarray} Considering the preceding argument , the list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:c> = <var:N> }} <var:s0> := <nat:6> ; <var:S> := <var:s0> {{ <var:S> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:N> /\ <var:S> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 