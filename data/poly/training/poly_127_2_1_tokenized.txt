\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:6> ; <var:R> := <var:s0> \end{verbatim} Allow it to hold that $ <var:D> = <var:K> $ ( given positive numbers $ <var:K> $ ) before running our list of instructions , it must be that $ <var:R> = <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the set of instructions is clear by usual Hoare reasoning . Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:K> \} & <var:s0> := <nat:6> & \{ <var:D> = <var:K> \land <var:s0> = <nat:6> \} \end{tabular} This is ensured using the variable update law obtained from typical Hoare techniques . Next , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:K> \} & <var:s0> := <nat:6> & \{ <var:D> = <var:K> \land <var:s0> = <nat:6> \} \end{tabular} This is shown through the environment update inference rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:D> = <var:K> }} <var:s0> := <nat:6> ; <var:R> := <var:s0> {{ <var:R> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:R> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 