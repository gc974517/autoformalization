\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:2> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:t> ; <var:l2> := <var:l2> * <var:t> ; <var:l3> := <nat:2> ; <var:l3> := <var:l3> * <var:t> ; <var:l3> := <var:l3> * <var:t> ; <var:l3> := <var:l3> * <var:t> ; <var:E> := <var:l3> ; <var:E> := <var:E> + <var:l2> ; <var:E> := <var:E> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Allow --- assuming some natural coefficients $ <var:b> $ --- that we have $ <var:t> = <var:b> $ before the execution of this series of commands , it holds that we have $ <var:E> = <nat:2> \times <var:b> ^ <nat:3> + <nat:6> \times <var:b> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:t> = <var:b> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \} \\ <var:l2> := <nat:6> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> \} \\ <var:l2> := <var:l2> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> \} \\ <var:l2> := <var:l2> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \} \\ <var:l3> := <nat:2> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \land <var:l3> = <nat:2> \} \\ <var:l3> := <var:l3> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \land <var:l3> = <nat:2> * <var:b> \} \\ <var:l3> := <var:l3> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \land <var:l3> = <nat:2> * <var:b> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:t> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \land <var:l3> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:E> := <var:l3> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:l2> = <nat:6> * <var:b> ^ <nat:2> \land <var:E> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:l2> ; \\ \{ <var:t> = <var:b> \land <var:l0> = <nat:2> \land <var:E> = <nat:2> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:l0> \\ \{ <var:t> = <var:b> \land <var:E> = <nat:2> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the above , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:t> ; <var:l2> := <var:l2> * <var:t> ; <var:l3> := <nat:2> ; <var:l3> := <var:l3> * <var:t> ; <var:l3> := <var:l3> * <var:t> ; <var:l3> := <var:l3> * <var:t> ; <var:E> := <var:l3> ; <var:E> := <var:E> + <var:l2> ; <var:E> := <var:E> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:t> = <var:b> }} <def:poly> {{ <var:E> = <nat:2> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:l3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:l3> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:l2> = <nat:6> * <var:b> ^ <nat:2> /\ <var:E> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:l0> = <nat:2> /\ <var:E> = <nat:2> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:E> = <nat:2> * <var:b> ^ <nat:3> + <nat:6> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 