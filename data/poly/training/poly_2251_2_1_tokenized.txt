\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:N0> := <nat:3> ; <var:i> := <var:N0> \end{verbatim} Assuming $ <var:h> = <var:L> $ prior to the execution of the code it must be that we have $ <var:i> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:h> = <var:L> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:h> = <var:L> \land <var:N0> = <nat:3> \} \\ <var:i> := <var:N0> \\ \{ <var:h> = <var:L> \land <var:i> = <nat:3> \} \end{eqnarray} Hence , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:h> = <var:L> }} <var:N0> := <nat:3> ; <var:i> := <var:N0> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 