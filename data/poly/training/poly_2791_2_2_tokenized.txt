\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Given --- for $ <var:q> \in \mathbb{Z}^+ $ --- it to be that $ <var:H> = <var:q> $ before interpreting our program it holds that we see $ <var:G> = <nat:4> \cdot <var:q> + <nat:1> $ when set of commands executes . \end{theorem} \begin{proof} The application of typical Hoare logic gives : \begin{eqnarray} \{ <var:H> = <var:q> \} \\ <var:G> := <nat:4> ; \\ \{ <var:H> = <var:q> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:1> + <var:G> * <var:H> \\ \{ <var:H> = <var:q> \land <var:G> = <nat:4> * <var:q> + <nat:1> \} \end{eqnarray} As a result , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:H> = <var:q> }} <def:poly> {{ <var:G> = <nat:4> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:G> = <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 