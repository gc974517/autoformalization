\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:g0> := <nat:6> ; <var:F> := <var:g0> \end{verbatim} Assuming that we have $ <var:b> = <var:C> $ , assuming some natural coefficients $ <var:C> $ , ahead of interpreting our set of commands it follows that we see $ <var:F> = <nat:6> $ once set of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:b> = <var:C> \} \\ <var:g0> := <nat:6> ; \\ \{ <var:b> = <var:C> \land <var:g0> = <nat:6> \} \\ <var:F> := <var:g0> \\ \{ <var:b> = <var:C> \land <var:F> = <nat:6> \} \end{eqnarray} Thus , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:b> = <var:C> }} <var:g0> := <nat:6> ; <var:F> := <var:g0> {{ <var:F> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:F> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 