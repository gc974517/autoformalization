\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:Q> ; <var:o2> := <var:o1> * <var:Q> ; <var:o3> := <var:o2> * <var:Q> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:8> ; <var:o3> := <var:o3> * <nat:1> ; <var:h> := <var:o3> <var:h> := <var:h> + <var:o1> <var:h> := <var:h> + <var:o0> \end{verbatim} Allowing that we have $ <var:Q> = <var:s> $ ahead of the execution of this list of instructions it holds that we have $ <var:h> = <nat:1> * <var:s> ^ <nat:3> + <nat:8> * <var:s> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:Q> = <var:s> \} \\ <var:o1> := <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <var:s> \} \\ <var:o2> := <var:o1> * <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \} \end{eqnarray} Continuing running this code segment produces : \begin{eqnarray} <var:o3> := <var:o2> * <var:Q> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o3> = <var:s> ^ <nat:3> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o3> = <var:s> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:o1> := <var:o1> * <nat:8> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o3> = <var:s> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:o3> := <var:o3> * <nat:1> ; \\ \{ <var:Q> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o3> = <nat:1> \cdot <var:s> ^ <nat:3> \land <var:o0> = <nat:6> \} \\ <var:h> := <var:o3> \\ \{ <var:Q> = <var:s> \land <var:o1> = <nat:8> \cdot <var:s> \land <var:o2> = <var:s> ^ <nat:2> \land <var:o0> = <nat:6> \land <var:h> = <nat:1> \cdot <var:s> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:o1> \\ \{ <var:Q> = <var:s> \land <var:o0> = <nat:6> \land <var:h> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:8> \cdot <var:s> \} \\ <var:h> := <var:h> + <var:o0> \\ \{ <var:Q> = <var:s> \land <var:h> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:8> \cdot <var:s> + <nat:6> \} \end{eqnarray} As a result , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Q> = <var:s> }} <var:o1> := <var:Q> ; <var:o2> := <var:o1> * <var:Q> ; <var:o3> := <var:o2> * <var:Q> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:8> ; <var:o3> := <var:o3> * <nat:1> ; <var:h> := <var:o3> <var:h> := <var:h> + <var:o1> <var:h> := <var:h> + <var:o0> {{ <var:h> = <nat:1> * <var:s> ^ <nat:3> + <nat:8> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <var:s> /\ <var:o2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o3> = <var:s> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o3> = <var:s> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o1> = <nat:8> * <var:s> /\ <var:o2> = <var:s> ^ <nat:2> /\ <var:o0> = <nat:6> /\ <var:h> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:o0> = <nat:6> /\ <var:h> = <nat:1> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:h> = <nat:1> * <var:s> ^ <nat:3> + <nat:8> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 