\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:V1> := <var:Q> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:5> ; <var:l> := <var:V1> <var:l> := <var:l> + <var:V0> \end{verbatim} Allow $ <var:Q> = <var:s> $ ahead of executing the list of commands , it must be that $ <var:l> = <nat:5> \times <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our code can be done using standard Hoare techniques . Paying attention to the proceeding line in the series of commands , we see the code \verb | <var:V1> := <var:Q> ; | . This line transfers the precondition $ \{ <var:Q> = <var:s> \} $ as the condition $ \{ <var:Q> = <var:s> \land <var:V1> = <var:s> \} $ . This is shown using the assignment scheme given in usual Hoare reasoning . Jumping to the proceeding line seen in our set of instructions , we see the variable assignmet statement \verb | <var:V0> := <nat:3> ; | . This command forwards the precondition $ \{ <var:Q> = <var:s> \land <var:V1> = <var:s> \} $ as the postcondition $ \{ <var:Q> = <var:s> \land <var:V1> = <var:s> \land <var:V0> = <nat:3> \} $ . Going forward , we see the code letting $ <var:V1> * <nat:5> $ toward $ <var:V1>$ . This moves the condition $ \{ <var:Q> = <var:s> \land <var:V1> = <var:s> \land <var:V0> = <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:s> \land <var:V1> = <nat:5> * <var:s> \land <var:V0> = <nat:3> \} $ . This is rigorously given by the assignment rule from typical Hoare techniques . Next , we have the variable binding code giving $ <var:V1$ to $ <var:l>$ . This command transfers the condition $ \{ <var:Q> = <var:s> \land <var:V1> = <nat:5> * <var:s> \land <var:V0> = <nat:3> \} $ toward the postcondition $ \{ <var:Q> = <var:s> \land <var:V0> = <nat:3> \land <var:l> = <nat:5> * <var:s> \} $ . This is rigorously given using the assignment inference rule from typical Hoare techniques . Shifting focus toward the next statement seen in our series of commands , we have the code yielding $ <var:l> + <var:V0$ to $ <var:l>$ . This command redefines the condition $ \{ <var:Q> = <var:s> \land <var:V0> = <nat:3> \land <var:l> = <nat:5> * <var:s> \} $ to the postcondition $ \{ <var:Q> = <var:s> \land <var:l> = <nat:5> * <var:s> + <nat:3> \} $ . This is deduced using the assignment scheme found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:Q> = <var:s> }} <var:V1> := <var:Q> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:5> ; <var:l> := <var:V1> <var:l> := <var:l> + <var:V0> {{ <var:l> = <nat:5> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:V1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:V1> = <var:s> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:V1> = <nat:5> * <var:s> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:V0> = <nat:3> /\ <var:l> = <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:s> /\ <var:l> = <nat:5> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 