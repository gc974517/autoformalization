\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:4> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:s> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:s> ; <var:h2> := <var:h2> * <var:s> ; <var:Q> := <var:h2> ; <var:Q> := <var:Q> + <var:h1> ; <var:Q> := <var:Q> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:s> = <var:B> $ before the execution of the code , then we see $ <var:Q> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:B> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \} \\ <var:h1> := <nat:3> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \} \\ <var:h1> := <var:h1> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:B> \} \\ <var:h2> := <nat:3> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:B> \land <var:h2> = <nat:3> \} \\ <var:h2> := <var:h2> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:B> \land <var:h2> = <nat:3> \times <var:B> \} \\ <var:h2> := <var:h2> * <var:s> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:B> \land <var:h2> = <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:Q> := <var:h2> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:h1> = <nat:3> \times <var:B> \land <var:Q> = <nat:3> \times <var:B> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:h1> ; \\ \{ <var:s> = <var:B> \land <var:h0> = <nat:4> \land <var:Q> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> \} \\ <var:Q> := <var:Q> + <var:h0> \\ \{ <var:s> = <var:B> \land <var:Q> = <nat:3> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:s> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:s> ; <var:h2> := <var:h2> * <var:s> ; <var:Q> := <var:h2> ; <var:Q> := <var:Q> + <var:h1> ; <var:Q> := <var:Q> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:s> = <var:B> }} <def:poly> {{ <var:Q> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:B> /\ <var:h2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:B> /\ <var:h2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:B> /\ <var:h2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:3> * <var:B> /\ <var:Q> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:h0> = <nat:4> /\ <var:Q> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:Q> = <nat:3> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 