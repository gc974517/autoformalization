\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:9> ; <var:x> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:U> = <var:p> $ before interpreting our segment of code , it must be that we see $ <var:x> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for the code can be given by the following decorated list of instructions . \begin{eqnarray} \{ <var:U> = <var:p> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:U> = <var:p> \land <var:M0> = <nat:9> \} \\ <var:x> := <var:M0> \\ \{ <var:U> = <var:p> \land <var:x> = <nat:9> \} \end{eqnarray} Applying usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:9> ; <var:x> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:U> = <var:p> }} <def:poly> {{ <var:x> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:p> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:p> /\ <var:x> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 