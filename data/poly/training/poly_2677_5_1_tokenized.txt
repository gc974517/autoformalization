\begin{document} \begin{theorem} Consider a code in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:c> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:1> ; <var:h> := <var:e1> <var:h> := <var:h> + <var:e0> \end{verbatim} Allow , given all natural coefficients $ <var:H> $ , it to be that $ <var:c> = <var:H> $ prior to the execution of our set of commands , then we have $ <var:h> = <nat:1> \cdot <var:H> + <nat:6> $ after set of commands has executed . \end{theorem} \begin{proof} The course of logic for the set of commands can be accomplished through usual Hoare logic . Following , we have \begin{verbatim} { <var:c> = <var:H> } <var:e1> := <var:c> { <var:c> = <var:H> \land <var:e1> = <var:H> } { <var:c> = <var:H> \land <var:e1> = <var:H> } <var:e0> := <nat:6> { <var:c> = <var:H> \land <var:e1> = <var:H> \land <var:e0> = <nat:6> } { <var:c> = <var:H> \land <var:e1> = <var:H> \land <var:e0> = <nat:6> } <var:e1> := <var:e1> * <nat:1> { <var:c> = <var:H> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:e0> = <nat:6> } { <var:c> = <var:H> \land <var:e1> = <nat:1> \cdot <var:H> \land <var:e0> = <nat:6> } <var:h> := <var:e1{ <var:c> = <var:H> \land <var:e0> = <nat:6> \land <var:h> = <nat:1> \cdot <var:H> } { <var:c> = <var:H> \land <var:e0> = <nat:6> \land <var:h> = <nat:1> \cdot <var:H> } <var:h> := <var:h> + <var:e0{ <var:c> = <var:H> \land <var:h> = <nat:1> \cdot <var:H> + <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:e1> := <var:c> ; <var:e0> := <nat:6> ; <var:e1> := <var:e1> * <nat:1> ; <var:h> := <var:e1> <var:h> := <var:h> + <var:e0> {{ <var:h> = <nat:1> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:e1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:e1> = <var:H> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:e1> = <nat:1> * <var:H> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:e0> = <nat:6> /\ <var:h> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:h> = <nat:1> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 