\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:p> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:2> ; <var:I> := <var:K1> <var:I> := <var:I> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Allowing ( given every positive coefficients $ <var:D> $ ) it to be that $ <var:p> = <var:D> $ ahead of executing this code , then $ <var:I> = <nat:2> * <var:D> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this program can be given through standard Hoare techniques . Moving on to the proceeding line of code contained in our list of instructions , we have \verb | { <var:p> = <var:D> } <var:K1> := <var:p> { <var:p> = <var:D> \land <var:K1> = <var:D> } | . Focusing on the subsequent bits of codefound in our segment of code , we see \verb | { <var:p> = <var:D> } <var:K1> := <var:p> { <var:p> = <var:D> \land <var:K1> = <var:D> } | and \verb | { <var:p> = <var:D> \land <var:K1> = <var:D> } <var:K0> := <nat:3> { <var:p> = <var:D> \land <var:K1> = <var:D> \land <var:K0> = <nat:3> } | . This is guaranteed using the variable assignmet law given by standard Hoare reasoning . Taking a look at the subsequent bits of codein the code , \verb | { <var:p> = <var:D> } <var:K1> := <var:p> { <var:p> = <var:D> \land <var:K1> = <var:D> } | and \verb | { <var:p> = <var:D> \land <var:K1> = <var:D> } <var:K0> := <nat:3> { <var:p> = <var:D> \land <var:K1> = <var:D> \land <var:K0> = <nat:3> } | . This is ensured using the environment update scheme obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:p> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:2> ; <var:I> := <var:K1> <var:I> := <var:I> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:p> = <var:D> }} <def:poly> {{ <var:I> = <nat:2> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <var:D> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K1> = <nat:2> * <var:D> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:K0> = <nat:3> /\ <var:I> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:D> /\ <var:I> = <nat:2> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 