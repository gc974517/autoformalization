\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:1> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:j> ; <var:F> := <var:g1> ; <var:F> := <var:F> + <var:g0> \end{verbatim} Assuming it to be that $ <var:j> = <var:r> $ ahead of interpreting this segment of code it follows that $ <var:F> = <nat:4> \times <var:r> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:j> = <var:r> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:j> = <var:r> \land <var:g0> = <nat:1> \} \\ <var:g1> := <nat:4> ; \\ \{ <var:j> = <var:r> \land <var:g0> = <nat:1> \land <var:g1> = <nat:4> \} \\ <var:g1> := <var:g1> * <var:j> ; \\ \{ <var:j> = <var:r> \land <var:g0> = <nat:1> \land <var:g1> = <nat:4> \cdot <var:r> \} \\ <var:F> := <var:g1> ; \\ \{ <var:j> = <var:r> \land <var:g0> = <nat:1> \land <var:F> = <nat:4> \cdot <var:r> \} \\ <var:F> := <var:F> + <var:g0> \\ \{ <var:j> = <var:r> \land <var:F> = <nat:4> \cdot <var:r> + <nat:1> \} \end{eqnarray} Hence , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <var:g0> := <nat:1> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:j> ; <var:F> := <var:g1> ; <var:F> := <var:F> + <var:g0> {{ <var:F> = <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:g0> = <nat:1> /\ <var:g1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:g0> = <nat:1> /\ <var:F> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:F> = <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 