\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:5> ; <var:j> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Assuming that $ <var:I> = <var:a> $ ahead of interpreting this code it must be that we see $ <var:j> = <nat:5> $ . \end{theorem} \begin{proof} The method of proof for this set of commands is shown by usual Hoare techniques . Paying attention to the proceeding line contained in our code segment , we have \verb | { <var:I> = <var:a> } <var:q0> := <nat:5> { <var:I> = <var:a> \land <var:q0> = <nat:5> } | . This is shown through the assignment rule of standard Hoare techniques . Advancing , we see \verb | { <var:I> = <var:a> } <var:q0> := <nat:5> { <var:I> = <var:a> \land <var:q0> = <nat:5> } | . This is guaranteed through the law defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:5> ; <var:j> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:j> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:j> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 