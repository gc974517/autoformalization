\begin{document} \begin{theorem} Consider the following set of commands as follows \begin{verbatim} <var:r0> := <nat:4> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:T> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:T> ; <var:r2> := <var:r2> * <var:T> ; <var:n> := <var:r2> ; <var:n> := <var:n> + <var:r1> ; <var:n> := <var:n> + <var:r0> \end{verbatim} Assuming it to be that $ <var:T> = <var:B> $ prior to the execution of the list of instructions , it must be that we have $ <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this set of commands can be seen using the following decorated list of commands . \begin{eqnarray} \{ <var:T> = <var:B> \} \\ <var:r0> := <nat:4> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \} \\ <var:r1> := <nat:2> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> \} \\ <var:r1> := <var:r1> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> * <var:B> \} \\ <var:r2> := <nat:4> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> * <var:B> \land <var:r2> = <nat:4> \} \\ <var:r2> := <var:r2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> * <var:B> \land <var:r2> = <nat:4> * <var:B> \} \\ <var:r2> := <var:r2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> * <var:B> \land <var:r2> = <nat:4> * <var:B> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of the set of commands gives : \begin{eqnarray} <var:n> := <var:r2> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:r1> = <nat:2> * <var:B> \land <var:n> = <nat:4> * <var:B> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:r1> ; \\ \{ <var:T> = <var:B> \land <var:r0> = <nat:4> \land <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} \\ <var:n> := <var:n> + <var:r0> \\ \{ <var:T> = <var:B> \land <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:r0> := <nat:4> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:T> ; <var:r2> := <nat:4> ; <var:r2> := <var:r2> * <var:T> ; <var:r2> := <var:r2> * <var:T> ; <var:n> := <var:r2> ; <var:n> := <var:n> + <var:r1> ; <var:n> := <var:n> + <var:r0> {{ <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:B> /\ <var:r2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:B> /\ <var:r2> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:B> /\ <var:r2> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:r1> = <nat:2> * <var:B> /\ <var:n> = <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:r0> = <nat:4> /\ <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:n> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 