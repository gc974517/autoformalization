\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:1> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:s> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:s> ; <var:J2> := <var:J2> * <var:s> ; <var:K> := <var:J2> ; <var:K> := <var:K> + <var:J1> ; <var:K> := <var:K> + <var:J0> \end{verbatim} Allowing it to be that $ <var:s> = <var:x> $ ahead of running the set of commands it follows that we have $ <var:K> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> $ when code has terminated . \end{theorem} \begin{proof} The method of proof for this set of instructions is given using this decorated set of instructions . \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \} \\ <var:J1> := <nat:1> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \} \\ <var:J1> := <var:J1> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \times <var:x> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \times <var:x> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \times <var:x> \land <var:J2> = <nat:2> \times <var:x> \} \\ <var:J2> := <var:J2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \times <var:x> \land <var:J2> = <nat:2> \times <var:x> ^ <nat:2> \} \\ <var:K> := <var:J2> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:J1> = <nat:1> \times <var:x> \land <var:K> = <nat:2> \times <var:x> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:J1> ; \\ \{ <var:s> = <var:x> \land <var:J0> = <nat:1> \land <var:K> = <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> \} \\ <var:K> := <var:K> + <var:J0> \\ \{ <var:s> = <var:x> \land <var:K> = <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <var:J0> := <nat:1> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:s> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:s> ; <var:J2> := <var:J2> * <var:s> ; <var:K> := <var:J2> ; <var:K> := <var:K> + <var:J1> ; <var:K> := <var:K> + <var:J0> {{ <var:K> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> * <var:x> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> * <var:x> /\ <var:J2> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> * <var:x> /\ <var:J2> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:J1> = <nat:1> * <var:x> /\ <var:K> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:J0> = <nat:1> /\ <var:K> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:K> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 