\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:v> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:v> ; <var:Z2> := <var:Z2> * <var:v> ; <var:w> := <var:Z2> ; <var:w> := <var:w> + <var:Z1> ; <var:w> := <var:w> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:v> = <var:h> $ before the execution of this set of commands , it must be that $ <var:w> = <nat:5> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> + <nat:3> $ when list of commands executes . \end{theorem} \begin{proof} Proving correctness for this series of commands is accomplished using standard Hoare logic . Advancing to the next line of code found in the series of instructions , the code \verb | <var:Z0> := <nat:3> ; | . This code moves the precondition $ \{ <var:v> = <var:h> \} $ toward the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \} $ . Taking another step toward the subsequent line in the set of commands , the variable binding line defining $ <nat:9> $ to $ <var:Z1>$ . This statement forwards $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \} $ as the postcondition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> \} $ . This is guaranteed using the assignment scheme found in Hoare logic . Honing in on the upcoming piece of code found in our series of instructions , we see the assignment line \verb | <var:Z1> := <var:Z1> * <var:v> ; | . This advances $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> \} $ into the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \} $ . Looking at the subsequent statement seen in the code segment , the variable update command \verb | <var:Z2> := <nat:5> ; | . This takes the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \} $ to the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> \} $ . Taking another step toward the proceeding line contained in the list of commands , we have the binding code \verb | <var:Z2> := <var:Z2> * <var:v> ; | . This code advances the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> \} $ to the postcondition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> * <var:h> \} $ . This is known to be sound through the assignment rule defined in usual Hoare reasoning . Observing the next line of code seen in our series of instructions , we see the binding command \verb | <var:Z2> := <var:Z2> * <var:v> ; | . This forwards $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> * <var:h> \} $ to the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> * <var:h> ^ <nat:2> \} $ . This is guaranteed using the assignment inference rule defined in standard Hoare techniques . Shifting focus toward the next statement in our code , the line giving $ <var:Z2> $ as $ <var:w>$ . This moves the precondition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:Z2> = <nat:5> * <var:h> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:w> = <nat:5> * <var:h> ^ <nat:2> \} $ . This is shown with the assignment law given in typical Hoare logic . Keeping momentum , we have the assignment statement \verb | <var:w> := <var:w> + <var:Z1> ; | . This advances the precondition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:9> * <var:h> \land <var:w> = <nat:5> * <var:h> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> \} $ . Focusing on the upcoming step found in the set of commands , the variable binding statement \verb | <var:w> := <var:w> + <var:Z0> | . This forwards the condition $ \{ <var:v> = <var:h> \land <var:Z0> = <nat:3> \land <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> \} $ as the postcondition $ \{ <var:v> = <var:h> \land <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:3> ; <var:Z1> := <nat:9> ; <var:Z1> := <var:Z1> * <var:v> ; <var:Z2> := <nat:5> ; <var:Z2> := <var:Z2> * <var:v> ; <var:Z2> := <var:Z2> * <var:v> ; <var:w> := <var:Z2> ; <var:w> := <var:w> + <var:Z1> ; <var:w> := <var:w> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:v> = <var:h> }} <def:poly> {{ <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:h> /\ <var:Z2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:h> /\ <var:Z2> = <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:h> /\ <var:Z2> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:9> * <var:h> /\ <var:w> = <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:Z0> = <nat:3> /\ <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:w> = <nat:5> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 