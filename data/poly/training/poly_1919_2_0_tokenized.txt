\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:6> ; <var:W> := <var:A0> \end{verbatim} Assume it to hold that $ <var:q> = <var:K> $ ( for any $ <var:K> $ ) before evaluating the code segment it holds that $ <var:W> = <nat:6> $ . \end{theorem} \begin{proof} The argument for our program is demonstrated with Hoare reasoning . Taking another step toward the next bit of code in the list of instructions , we have the variable update command \verb | <var:A0> := <nat:6> ; | . This code takes $ \{ <var:q> = <var:K> \} $ toward the condition $ \{ <var:q> = <var:K> \land <var:A0> = <nat:6> \} $ . Jumping to the next statement found in our program , we see the variable assignmet code \verb | <var:W> := <var:A0> | . This advances the precondition $ \{ <var:q> = <var:K> \land <var:A0> = <nat:6> \} $ as $ \{ <var:q> = <var:K> \land <var:W> = <nat:6> \} $ . This is given through the assignment law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <var:A0> := <nat:6> ; <var:W> := <var:A0> {{ <var:W> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:W> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 