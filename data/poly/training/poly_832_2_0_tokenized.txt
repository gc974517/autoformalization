\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:3> ; <var:E> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:x> = <var:Z> $ ( given every positive coefficients $ <var:Z> $ ) before running this list of commands , then $ <var:E> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this program is shown through Hoare logic . Considering the subsequent lines found in our list of instructions , \verb | { <var:x> = <var:Z> } <var:K0> := <nat:3> { <var:x> = <var:Z> \land <var:K0> = <nat:3> } | and \verb | { <var:x> = <var:Z> \land <var:K0> = <nat:3> } <var:E> := <var:K0{ <var:x> = <var:Z> \land <var:E> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:3> ; <var:E> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <def:poly> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 