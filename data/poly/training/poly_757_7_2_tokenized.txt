\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:2> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:3> + <var:m> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allowing that $ <var:B> = <var:G> $ before running this set of commands it holds that we have $ <var:m> = <nat:2> \times <var:G> ^ <nat:6> + <nat:1> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is done by typical Hoare reasoning . Shifting focus toward the next line found in the series of commands , we have the variable update command \verb | <var:m> := <nat:2> ; | . This takes the precondition $ \{ <var:B> = <var:G> \} $ toward the postcondition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> \} $ . This is shown through the assignment scheme in standard Hoare techniques . Moving on to the subsequent line in the code , we see the binding command defining $ <var:m> * <var:B> $ into $ <var:m>$ . This code takes the condition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> \} $ toward the condition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> + \} $ . Moving on to the next step , we have the assignment line binding $ <nat:1> + <var:m> * <var:B> $ toward $ <var:m>$ . This redefines $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> + \} $ toward the condition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> \} $ . This is guaranteed with the assignment rule found in Hoare reasoning . Next , we see the environment update statement \verb | <var:m> := <nat:2> + <var:m> * <var:B> ; | . This statement moves the precondition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> \} $ to the condition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:2> \} $ . This is sound by the assignment rule of Hoare techniques . Looking at the following step seen in our set of instructions , we see the variable assignmet statement assigning $ <nat:1> + <var:m> * <var:B> $ into $ <var:m>$ . This advances the precondition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:2> \} $ as $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> \} $ . Advancing , the variable binding statement \verb | <var:m> := <nat:1> + <var:m> * <var:B> ; | . This statement transfers $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> \} $ to the postcondition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} $ . Advancing to the next step , the environment update statement \verb | <var:m> := <nat:3> + <var:m> * <var:B> | . This line advances $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> \} $ as the postcondition $ \{ <var:B> = <var:G> \land <var:m> = <nat:2> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> \} $ . This is sound with the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:2> ; <var:m> := <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:2> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:1> + <var:m> * <var:B> ; <var:m> := <nat:3> + <var:m> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:B> = <var:G> }} <def:poly> {{ <var:m> = <nat:2> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:G> /\ <var:m> = <nat:2> * <var:G> ^ <nat:6> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 