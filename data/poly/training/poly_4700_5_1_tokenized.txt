\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:p1> := <var:C> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:2> ; <var:a> := <var:p1> <var:a> := <var:a> + <var:p0> \end{verbatim} Assume that $ <var:C> = <var:k> $ ( for integers $ <var:k> $ ) before the execution of our code it follows that we see $ <var:a> = <nat:2> * <var:k> + <nat:7> $ once code executes . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be seen with typical Hoare techniques . Immediately after , we see the binding line yielding $ <var:C> $ to $ <var:p1>$ . This command advances the condition $ \{ <var:C> = <var:k> \} $ as the postcondition $ \{ <var:C> = <var:k> \land <var:p1> = <var:k> \} $ . This is sound by the assignment inference rule given by typical Hoare logic . Paying attention to the upcoming statement contained in our segment of code , the binding code yielding $ <nat:7> $ into $ <var:p0>$ . This line transfers the precondition $ \{ <var:C> = <var:k> \land <var:p1> = <var:k> \} $ as the postcondition $ \{ <var:C> = <var:k> \land <var:p1> = <var:k> \land <var:p0> = <nat:7> \} $ . This is shown using the assignment rule obtained from usual Hoare techniques . Considering the subsequent step found in our program , we have the variable update line \verb | <var:p1> := <var:p1> * <nat:2> ; | . This line transfers the precondition $ \{ <var:C> = <var:k> \land <var:p1> = <var:k> \land <var:p0> = <nat:7> \} $ into $ \{ <var:C> = <var:k> \land <var:p1> = <nat:2> \times <var:k> \land <var:p0> = <nat:7> \} $ . Going forward , the variable binding command giving $ <var:p1$ into $ <var:a>$ . This code redefines the precondition $ \{ <var:C> = <var:k> \land <var:p1> = <nat:2> \times <var:k> \land <var:p0> = <nat:7> \} $ into the postcondition $ \{ <var:C> = <var:k> \land <var:p0> = <nat:7> \land <var:a> = <nat:2> \times <var:k> \} $ . Moving forward to the next step , we have the variable assignmet code assigning $ <var:a> + <var:p0$ into $ <var:a>$ . This line transfers $ \{ <var:C> = <var:k> \land <var:p0> = <nat:7> \land <var:a> = <nat:2> \times <var:k> \} $ to $ \{ <var:C> = <var:k> \land <var:a> = <nat:2> \times <var:k> + <nat:7> \} $ . This is shown to be logically sound with the assignment rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:C> = <var:k> }} <var:p1> := <var:C> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:2> ; <var:a> := <var:p1> <var:a> := <var:a> + <var:p0> {{ <var:a> = <nat:2> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:p1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:p1> = <var:k> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:p0> = <nat:7> /\ <var:a> = <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:a> = <nat:2> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 