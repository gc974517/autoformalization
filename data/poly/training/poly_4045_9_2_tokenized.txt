\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:4> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:B> = <var:d> $ prior to running this series of commands it must be that we see $ <var:l> = <nat:4> \times <var:d> ^ <nat:8> + <nat:2> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:6> + <nat:3> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code can be seen using usual Hoare reasoning . Advancing on , we see \verb | { <var:B> = <var:d> } <var:l> := <nat:4> { <var:B> = <var:d> \land <var:l> = <nat:4> } | and \verb | { <var:B> = <var:d> \land <var:l> = <nat:4> } <var:l> := <nat:2> + <var:l> * <var:B> { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> + <nat:2> } | . This is rigorously given through the variable update rule found in typical Hoare techniques . Advancing to the next step , we have \verb | { <var:B> = <var:d> } <var:l> := <nat:4> { <var:B> = <var:d> \land <var:l> = <nat:4> } | , \verb | { <var:B> = <var:d> \land <var:l> = <nat:4> } <var:l> := <nat:2> + <var:l> * <var:B> { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> + <nat:2> } | , \verb | { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> + <nat:2> } <var:l> := <nat:2> + <var:l> * <var:B> { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> } | and \verb | { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> } <var:l> := <nat:3> + <var:l> * <var:B> { <var:B> = <var:d> \land <var:l> = <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> } | . Next , we see \verb | { <var:B> = <var:d> } <var:l> := <nat:4> { <var:B> = <var:d> \land <var:l> = <nat:4> } | . This is known to be sound using the variable update scheme from typical Hoare logic . Moving on to the following statement seen in our series of commands , we see \verb | { <var:B> = <var:d> } <var:l> := <nat:4> { <var:B> = <var:d> \land <var:l> = <nat:4> } | . Stepping through , \verb | { <var:B> = <var:d> } <var:l> := <nat:4> { <var:B> = <var:d> \land <var:l> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:4> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:3> + <var:l> * <var:B> ; <var:l> := <nat:4> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> ; <var:l> := <nat:2> + <var:l> * <var:B> ; <var:l> := <nat:1> + <var:l> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:B> = <var:d> }} <def:poly> {{ <var:l> = <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:d> /\ <var:l> = <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 