\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:4> + <var:n> * <var:m> ; <var:n> := <var:n> * <var:m> ; <var:n> := <nat:1> + <var:n> * <var:m> ; <var:n> := <nat:4> + <var:n> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:m> = <var:O> $ ( for every $ <var:O> \in \mathbb{Z}^+ $ ) prior to running this segment of code it must be that we see $ <var:n> = <nat:1> \cdot <var:O> ^ <nat:4> + <nat:4> \cdot <var:O> ^ <nat:3> + <nat:1> \cdot <var:O> + <nat:4> $ after code terminates . \end{theorem} \begin{proof} Proving correctness for the set of commands is clear with typical Hoare logic . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:m> = <var:O> \} & <var:n> := <nat:1> & \{ <var:m> = <var:O> \land <var:n> = <nat:1> \} \end{tabular} This is rigorously given with the variable assignmet scheme of typical Hoare reasoning . Moving on to the next lines of codeseen in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:m> = <var:O> \} & <var:n> := <nat:1> & \{ <var:m> = <var:O> \land <var:n> = <nat:1> \} \\ \{ <var:m> = <var:O> \land <var:n> = <nat:1> \} & <var:n> := <nat:4> + <var:n> * <var:m> & \{ <var:m> = <var:O> \land <var:n> = <nat:1> * <var:O> + <nat:4> \} \\ \{ <var:m> = <var:O> \land <var:n> = <nat:1> * <var:O> + <nat:4> \} & <var:n> := <var:n> * <var:m> & \{ <var:m> = <var:O> \land <var:n> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + \} \end{tabular} Moving on to the subsequent line of code contained in the code segment , \[ \begin{tabular} {rcl} \{ <var:m> = <var:O> \} & <var:n> := <nat:1> & \{ <var:m> = <var:O> \land <var:n> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:1> ; <var:n> := <nat:4> + <var:n> * <var:m> ; <var:n> := <var:n> * <var:m> ; <var:n> := <nat:1> + <var:n> * <var:m> ; <var:n> := <nat:4> + <var:n> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:m> = <var:O> }} <def:poly> {{ <var:n> = <nat:1> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:1> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:n> = <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:n> = <nat:1> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:n> = <nat:1> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:O> /\ <var:n> = <nat:1> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 