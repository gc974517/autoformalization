\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} : \begin{verbatim} <var:J1> := <var:T> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:U> := <var:J1> <var:U> := <var:U> + <var:J0> \end{verbatim} Allowing that $ <var:T> = <var:Z> $ prior to evaluating this list of instructions then we see $ <var:U> = <nat:5> \cdot <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment is evident by usual Hoare reasoning . Jumping to the proceeding statements contained in the series of instructions , we see \begin{verbatim} { <var:T> = <var:Z> } <var:J1> := <var:T> { <var:T> = <var:Z> \land <var:J1> = <var:Z> } { <var:T> = <var:Z> \land <var:J1> = <var:Z> } <var:J0> := <nat:4> { <var:T> = <var:Z> \land <var:J1> = <var:Z> \land <var:J0> = <nat:4> } { <var:T> = <var:Z> \land <var:J1> = <var:Z> \land <var:J0> = <nat:4> } <var:J1> := <var:J1> * <nat:5> { <var:T> = <var:Z> \land <var:J1> = <nat:5> \cdot <var:Z> \land <var:J0> = <nat:4> } \end{verbatim} This is known to be sound using the environment update rule defined in usual Hoare techniques . Shifting focus toward the upcoming line in our code , \begin{verbatim} { <var:T> = <var:Z> } <var:J1> := <var:T> { <var:T> = <var:Z> \land <var:J1> = <var:Z> } \end{verbatim} Observing the proceeding step in the segment of code , we see \begin{verbatim} { <var:T> = <var:Z> } <var:J1> := <var:T> { <var:T> = <var:Z> \land <var:J1> = <var:Z> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:J1> := <var:T> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:5> ; <var:U> := <var:J1> <var:U> := <var:U> + <var:J0> {{ <var:U> = <nat:5> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:J1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:J1> = <var:Z> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:J1> = <nat:5> * <var:Z> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:J0> = <nat:4> /\ <var:U> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:U> = <nat:5> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 