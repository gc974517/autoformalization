\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:3> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Assume given every natural coefficients $ <var:B> $ that $ <var:H> = <var:B> $ ahead of running the list of commands , then $ <var:K> = <nat:3> \times <var:B> ^ <nat:8> + <nat:1> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> $ once list of commands is done . \end{theorem} \begin{proof} The application of typical Hoare logic returns : \begin{eqnarray} \{ <var:H> = <var:B> \} \\ <var:K> := <nat:3> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \} \end{eqnarray} Continuing running this list of commands results in : \begin{eqnarray} <var:K> := <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> + \} \\ <var:K> := <nat:1> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \} \\ <var:K> := <nat:1> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> + <nat:1> \} \end{eqnarray} Advancing the execution of our code segment gives : \begin{eqnarray} <var:K> := <nat:1> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:1> \} \\ <var:K> := <nat:2> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:2> \} \end{eqnarray} Continuing the execution of this list of commands produces : \begin{eqnarray} <var:K> := <nat:1> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:1> \} \\ <var:K> := <nat:3> + <var:K> * <var:H> ; \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:7> + <nat:1> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:3> \} \\ <var:K> := <nat:4> + <var:K> * <var:H> \\ \{ <var:H> = <var:B> \land <var:K> = <nat:3> \times <var:B> ^ <nat:8> + <nat:1> \times <var:B> ^ <nat:6> + <nat:1> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:3> \times <var:B> + <nat:4> \} \end{eqnarray} Considering the above , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:3> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:3> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:H> = <var:B> }} <def:poly> {{ <var:K> = <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:B> /\ <var:K> = <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 