\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <var:W> * <var:z> ; <var:W> := <nat:3> + <var:W> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:z> = <var:C> $ prior to running our code segment , it holds that we have $ <var:W> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> $ once code segment is done executing . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:z> = <var:C> \} \\ <var:W> := <nat:2> ; \\ \{ <var:z> = <var:C> \land <var:W> = <nat:2> \} \\ <var:W> := <var:W> * <var:z> ; \\ \{ <var:z> = <var:C> \land <var:W> = <nat:2> \times <var:C> + \} \\ <var:W> := <nat:3> + <var:W> * <var:z> \\ \{ <var:z> = <var:C> \land <var:W> = <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \} \end{eqnarray} Thus , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <var:W> * <var:z> ; <var:W> := <nat:3> + <var:W> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:z> = <var:C> }} <def:poly> {{ <var:W> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:W> = <nat:2> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:W> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 