\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:c> ; <var:l> := <var:h1> ; <var:l> := <var:l> + <var:h0> \end{verbatim} Assuming ( given some integers $ <var:V> $ ) that $ <var:c> = <var:V> $ before the execution of this list of commands , it follows that $ <var:l> = <nat:2> \times <var:V> + <nat:2> $ once series of instructions has finished . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:V> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:c> = <var:V> \land <var:h0> = <nat:2> \} \\ <var:h1> := <nat:2> ; \\ \{ <var:c> = <var:V> \land <var:h0> = <nat:2> \land <var:h1> = <nat:2> \} \\ <var:h1> := <var:h1> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:h0> = <nat:2> \land <var:h1> = <nat:2> * <var:V> \} \\ <var:l> := <var:h1> ; \\ \{ <var:c> = <var:V> \land <var:h0> = <nat:2> \land <var:l> = <nat:2> * <var:V> \} \\ <var:l> := <var:l> + <var:h0> \\ \{ <var:c> = <var:V> \land <var:l> = <nat:2> * <var:V> + <nat:2> \} \end{eqnarray} Given the above , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:c> = <var:V> }} <var:h0> := <nat:2> ; <var:h1> := <nat:2> ; <var:h1> := <var:h1> * <var:c> ; <var:l> := <var:h1> ; <var:l> := <var:l> + <var:h0> {{ <var:l> = <nat:2> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:h0> = <nat:2> /\ <var:l> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:l> = <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 