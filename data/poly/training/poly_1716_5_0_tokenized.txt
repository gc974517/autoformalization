\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:9> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:t> ; <var:C> := <var:u1> ; <var:C> := <var:C> + <var:u0> \end{verbatim} Assume it to be that $ <var:t> = <var:g> $ ( given every whole numbers $ <var:g> $ ) ahead of the execution of the segment of code , it follows that we see $ <var:C> = <nat:6> \times <var:g> + <nat:9> $ . \end{theorem} \begin{proof} Using typical Hoare techniques results in : \begin{eqnarray} \{ <var:t> = <var:g> \} \\ <var:u0> := <nat:9> ; \\ \{ <var:t> = <var:g> \land <var:u0> = <nat:9> \} \\ <var:u1> := <nat:6> ; \\ \{ <var:t> = <var:g> \land <var:u0> = <nat:9> \land <var:u1> = <nat:6> \} \\ <var:u1> := <var:u1> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:u0> = <nat:9> \land <var:u1> = <nat:6> * <var:g> \} \\ <var:C> := <var:u1> ; \\ \{ <var:t> = <var:g> \land <var:u0> = <nat:9> \land <var:C> = <nat:6> * <var:g> \} \\ <var:C> := <var:C> + <var:u0> \\ \{ <var:t> = <var:g> \land <var:C> = <nat:6> * <var:g> + <nat:9> \} \end{eqnarray} Considering the preceding argument , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:t> = <var:g> }} <var:u0> := <nat:9> ; <var:u1> := <nat:6> ; <var:u1> := <var:u1> * <var:t> ; <var:C> := <var:u1> ; <var:C> := <var:C> + <var:u0> {{ <var:C> = <nat:6> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:u0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:u0> = <nat:9> /\ <var:u1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:u0> = <nat:9> /\ <var:C> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:C> = <nat:6> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 