\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M> := <nat:4> ; <var:M> := <nat:3> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:4> + <var:M> * <var:J> ; <var:M> := <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:4> + <var:M> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:J> = <var:T> $ prior to the evaluation of the program , it holds that we see $ <var:M> = <nat:4> \times <var:T> ^ <nat:8> + <nat:3> \times <var:T> ^ <nat:7> + <nat:1> \times <var:T> ^ <nat:6> + <nat:1> \times <var:T> ^ <nat:4> + <nat:4> \times <var:T> ^ <nat:3> + <nat:1> \times <var:T> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be done with typical Hoare techniques . Considering the following lines of codein our set of commands , \[ \begin{tabular} {rcl} \{ <var:J> = <var:T> \} & <var:M> := <nat:4> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} & <var:M> := <nat:3> + <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> + <nat:3> \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> + <nat:3> \} & <var:M> := <nat:1> + <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> \} & <var:M> := <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + \} & <var:M> := <nat:1> + <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:T> \} & <var:M> := <nat:4> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} & <var:M> := <nat:3> + <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> + <nat:3> \} \end{tabular} This is sound with the assignment rule given by standard Hoare reasoning . Following , \[ \begin{tabular} {rcl} \{ <var:J> = <var:T> \} & <var:M> := <nat:4> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} \\ \{ <var:J> = <var:T> \land <var:M> = <nat:4> \} & <var:M> := <nat:3> + <var:M> * <var:J> & \{ <var:J> = <var:T> \land <var:M> = <nat:4> * <var:T> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:4> ; <var:M> := <nat:3> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:4> + <var:M> * <var:J> ; <var:M> := <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:4> + <var:M> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:J> = <var:T> }} <def:poly> {{ <var:M> = <nat:4> * <var:T> ^ <nat:8> + <nat:3> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:4> + <nat:1> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:5> + <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:M> = <nat:4> * <var:T> ^ <nat:8> + <nat:3> * <var:T> ^ <nat:7> + <nat:1> * <var:T> ^ <nat:6> + <nat:1> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 