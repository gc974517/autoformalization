\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:E> = <var:q> $ --- given any positive coefficients $ <var:q> $ --- prior to the execution of the series of instructions , it must be that we have $ <var:O> = <nat:4> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:q> \} \\ <var:O> := <nat:4> ; \\ \{ <var:E> = <var:q> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:E> ; \\ \{ <var:E> = <var:q> \land <var:O> = <nat:4> \times <var:q> + <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:E> \\ \{ <var:E> = <var:q> \land <var:O> = <nat:4> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:E> = <var:q> }} <def:poly> {{ <var:O> = <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:O> = <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:O> = <nat:4> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 