\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:6> ; <var:H> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Given that $ <var:U> = <var:v> $ prior to running this list of instructions , then we have $ <var:H> = <nat:6> $ . \end{theorem} \begin{proof} Observe the below decorated series of instructions . \begin{eqnarray} \{ <var:U> = <var:v> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:U> = <var:v> \land <var:k0> = <nat:6> \} \\ <var:H> := <var:k0> \\ \{ <var:U> = <var:v> \land <var:H> = <nat:6> \} \end{eqnarray} Using Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:H> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:U> = <var:v> }} <def:poly> {{ <var:H> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:v> /\ <var:H> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 