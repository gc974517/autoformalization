\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:4> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:G> ; <var:T> := <var:f1> ; <var:T> := <var:T> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Assuming $ <var:G> = <var:i> $ --- assuming some positive integers $ <var:i> $ --- before the execution of the code it must be that $ <var:T> = <nat:2> * <var:i> + <nat:4> $ after series of instructions has executed . \end{theorem} \begin{proof} Utilizing usual Hoare logic produces : \begin{eqnarray} \{ <var:G> = <var:i> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:G> = <var:i> \land <var:f0> = <nat:4> \} \\ <var:f1> := <nat:2> ; \\ \{ <var:G> = <var:i> \land <var:f0> = <nat:4> \land <var:f1> = <nat:2> \} \\ <var:f1> := <var:f1> * <var:G> ; \\ \{ <var:G> = <var:i> \land <var:f0> = <nat:4> \land <var:f1> = <nat:2> \times <var:i> \} \\ <var:T> := <var:f1> ; \\ \{ <var:G> = <var:i> \land <var:f0> = <nat:4> \land <var:T> = <nat:2> \times <var:i> \} \\ <var:T> := <var:T> + <var:f0> \\ \{ <var:G> = <var:i> \land <var:T> = <nat:2> \times <var:i> + <nat:4> \} \end{eqnarray} Considering the above , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:4> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:G> ; <var:T> := <var:f1> ; <var:T> := <var:T> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <def:poly> {{ <var:T> = <nat:2> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:f0> = <nat:4> /\ <var:T> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:T> = <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 