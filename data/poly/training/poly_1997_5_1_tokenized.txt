\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:F> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:3> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:F> = <var:A> $ , given any positive coefficients $ <var:A> $ , before running this code segment it holds that $ <var:R> = <nat:3> \times <var:A> + <nat:3> $ when set of commands has executed . \end{theorem} \begin{proof} The proof of this series of commands is shown by standard Hoare logic . Shifting focus toward the next step found in our program , the assignment statement yielding $ <var:F> $ into $ <var:W1>$ . This statement forwards the precondition $ \{ <var:F> = <var:A> \} $ to the condition $ \{ <var:F> = <var:A> \land <var:W1> = <var:A> \} $ . This is ensured using the assignment inference rule defined by typical Hoare logic . Honing in on the next step in our series of commands , we see the line letting $ <nat:3> $ to $ <var:W0>$ . This transfers $ \{ <var:F> = <var:A> \land <var:W1> = <var:A> \} $ to the postcondition $ \{ <var:F> = <var:A> \land <var:W1> = <var:A> \land <var:W0> = <nat:3> \} $ . This is deduced by the assignment law defined in typical Hoare logic . Moving on to the next step , we have the variable update code \verb | <var:W1> := <var:W1> * <nat:3> ; | . This transfers $ \{ <var:F> = <var:A> \land <var:W1> = <var:A> \land <var:W0> = <nat:3> \} $ to the postcondition $ \{ <var:F> = <var:A> \land <var:W1> = <nat:3> * <var:A> \land <var:W0> = <nat:3> \} $ . Honing in on the following step in our code , the variable binding statement \verb | <var:R> := <var:W1> | . This transfers $ \{ <var:F> = <var:A> \land <var:W1> = <nat:3> * <var:A> \land <var:W0> = <nat:3> \} $ as the postcondition $ \{ <var:F> = <var:A> \land <var:W0> = <nat:3> \land <var:R> = <nat:3> * <var:A> \} $ . This is sound using the assignment inference rule defined in Hoare logic . Immediately after , we have the variable binding statement \verb | <var:R> := <var:R> + <var:W0> | . This command advances $ \{ <var:F> = <var:A> \land <var:W0> = <nat:3> \land <var:R> = <nat:3> * <var:A> \} $ toward the postcondition $ \{ <var:F> = <var:A> \land <var:R> = <nat:3> * <var:A> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:F> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:3> ; <var:R> := <var:W1> <var:R> := <var:R> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:F> = <var:A> }} <def:poly> {{ <var:R> = <nat:3> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:W1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:W1> = <var:A> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:W1> = <nat:3> * <var:A> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:W0> = <nat:3> /\ <var:R> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:A> /\ <var:R> = <nat:3> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 