\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:R0> := <nat:3> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:B> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:B> ; <var:R2> := <var:R2> * <var:B> ; <var:w> := <var:R2> ; <var:w> := <var:w> + <var:R1> ; <var:w> := <var:w> + <var:R0> \end{verbatim} Given $ <var:B> = <var:E> $ ( for natural numbers $ <var:E> $ ) before the execution of the segment of code it holds that we have $ <var:w> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> $ when code has executed . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is accomplished using standard Hoare techniques . Stepping through , \[ \begin{tabular} {rcl} \{ <var:B> = <var:E> \} & <var:R0> := <nat:3> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} \\ \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} & <var:R1> := <nat:1> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> \} \end{tabular} This is ensured with the variable update rule defined by standard Hoare techniques . Next , \[ \begin{tabular} {rcl} \{ <var:B> = <var:E> \} & <var:R0> := <nat:3> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} \end{tabular} Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:E> \} & <var:R0> := <nat:3> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} \\ \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} & <var:R1> := <nat:1> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> \} \\ \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> \} & <var:R1> := <var:R1> * <var:B> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> * <var:E> \} \\ \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> * <var:E> \} & <var:R2> := <nat:1> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> * <var:E> \land <var:R2> = <nat:1> \} \\ \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> * <var:E> \land <var:R2> = <nat:1> \} & <var:R2> := <var:R2> * <var:B> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \land <var:R1> = <nat:1> * <var:E> \land <var:R2> = <nat:1> * <var:E> \} \end{tabular} This is sound by the binding scheme obtained from typical Hoare techniques . Considering the next command in our set of commands , \[ \begin{tabular} {rcl} \{ <var:B> = <var:E> \} & <var:R0> := <nat:3> & \{ <var:B> = <var:E> \land <var:R0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:B> = <var:E> }} <var:R0> := <nat:3> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:B> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:B> ; <var:R2> := <var:R2> * <var:B> ; <var:w> := <var:R2> ; <var:w> := <var:w> + <var:R1> ; <var:w> := <var:w> + <var:R0> {{ <var:w> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> * <var:E> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> * <var:E> /\ <var:R2> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> * <var:E> /\ <var:R2> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:R1> = <nat:1> * <var:E> /\ <var:w> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:R0> = <nat:3> /\ <var:w> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:w> = <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 