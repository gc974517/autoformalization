\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:4> ; <var:o> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assuming that $ <var:U> = <var:d> $ given positive integer coefficients $ <var:d> $ ahead of the evaluation of the series of instructions , it holds that $ <var:o> = <nat:4> $ once series of commands exits . \end{theorem} \begin{proof} Proving correctness for our series of instructions is evident by typical Hoare techniques . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:d> \} & <var:G0> := <nat:4> & \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \} \end{tabular} Advancing to the upcoming line of code seen in the code , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:d> \} & <var:G0> := <nat:4> & \{ <var:U> = <var:d> \land <var:G0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:4> ; <var:o> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:U> = <var:d> }} <def:poly> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:d> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 