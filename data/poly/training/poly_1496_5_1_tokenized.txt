\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:t> ; <var:i0> := <nat:5> ; <var:i1> := <var:i1> * <nat:8> ; <var:B> := <var:i1> <var:B> := <var:B> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:t> = <var:X> $ ( letting positive numbers $ <var:X> $ ) before the execution of the series of commands , then we have $ <var:B> = <nat:8> \cdot <var:X> + <nat:5> $ . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:t> = <var:X> \} \\ <var:i1> := <var:t> ; \\ \{ <var:t> = <var:X> \land <var:i1> = <var:X> \} \\ <var:i0> := <nat:5> ; \\ \{ <var:t> = <var:X> \land <var:i1> = <var:X> \land <var:i0> = <nat:5> \} \\ <var:i1> := <var:i1> * <nat:8> ; \\ \{ <var:t> = <var:X> \land <var:i1> = <nat:8> \times <var:X> \land <var:i0> = <nat:5> \} \\ <var:B> := <var:i1> \\ \{ <var:t> = <var:X> \land <var:i0> = <nat:5> \land <var:B> = <nat:8> \times <var:X> \} \\ <var:B> := <var:B> + <var:i0> \\ \{ <var:t> = <var:X> \land <var:B> = <nat:8> \times <var:X> + <nat:5> \} \end{eqnarray} Thus , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:t> ; <var:i0> := <nat:5> ; <var:i1> := <var:i1> * <nat:8> ; <var:B> := <var:i1> <var:B> := <var:B> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:t> = <var:X> }} <def:poly> {{ <var:B> = <nat:8> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:i1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:i1> = <var:X> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:i1> = <nat:8> * <var:X> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:i0> = <nat:5> /\ <var:B> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:B> = <nat:8> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 