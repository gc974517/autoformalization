\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:v> ; <var:c2> := <var:c1> * <var:v> ; <var:c3> := <var:c2> * <var:v> ; <var:c0> := <nat:6> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:2> ; <var:Q> := <var:c3> <var:Q> := <var:Q> + <var:c2> <var:Q> := <var:Q> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:v> = <var:r> $ before executing the program , it holds that $ <var:Q> = <nat:2> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be demonstrated by standard Hoare techniques . Advancing , we see \begin{eqnarray} \{ <var:v> = <var:r> \} \, <var:c1> := <var:v> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \} \, <var:c2> := <var:c1> * <var:v> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \} \, <var:c3> := <var:c2> * <var:v> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \} \, <var:c0> := <nat:6> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \, <var:c2> := <var:c2> * <nat:4> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \, <var:c3> := <var:c3> * <nat:2> \, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c3> = <nat:2> * <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c3> = <nat:2> * <var:r> ^ <nat:3> \land <var:c0> = <nat:6> \} \, <var:Q> := <var:c3\, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c0> = <nat:6> \land <var:Q> = <nat:2> * <var:r> ^ <nat:3> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <nat:4> * <var:r> ^ <nat:2> \land <var:c0> = <nat:6> \land <var:Q> = <nat:2> * <var:r> ^ <nat:3> \} \, <var:Q> := <var:Q> + <var:c2\, \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c0> = <nat:6> \land <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> \} \\ \{ <var:v> = <var:r> \land <var:c1> = <var:r> \land <var:c0> = <nat:6> \land <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> \} \, <var:Q> := <var:Q> + <var:c0\, \{ <var:v> = <var:r> \land <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:v> ; <var:c2> := <var:c1> * <var:v> ; <var:c3> := <var:c2> * <var:v> ; <var:c0> := <nat:6> ; <var:c2> := <var:c2> * <nat:4> ; <var:c3> := <var:c3> * <nat:2> ; <var:Q> := <var:c3> <var:Q> := <var:Q> + <var:c2> <var:Q> := <var:Q> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:v> = <var:r> }} <def:poly> {{ <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:r> ^ <nat:3> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:c0> = <nat:6> /\ <var:Q> = <nat:2> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:c1> = <var:r> /\ <var:c0> = <nat:6> /\ <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:r> /\ <var:Q> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 