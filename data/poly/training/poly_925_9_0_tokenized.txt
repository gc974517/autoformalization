\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:g> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:g> ; <var:M2> := <var:M2> * <var:g> ; <var:A> := <var:M2> ; <var:A> := <var:A> + <var:M1> ; <var:A> := <var:A> + <var:M0> \end{verbatim} Assume ( with some $ <var:Z> \in \mathbb{Z}^+ $ ) it to hold that $ <var:g> = <var:Z> $ prior to the evaluation of the code it follows that we have $ <var:A> = <nat:5> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is clear using typical Hoare reasoning . Moving forward to the next piece of code found in our set of commands , the assignment code defining $ <nat:9> $ into $ <var:M0>$ . This code moves the condition $ \{ <var:g> = <var:Z> \} $ toward $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \} $ . Next , we see the assignment statement defining $ <nat:4> $ into $ <var:M1>$ . This statement advances the condition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \} $ as the condition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> \} $ . This is deduced through the assignment inference rule given by Hoare logic . Moving on to the next line in our segment of code , we have the binding command assigning $ <var:M1> * <var:g> $ toward $ <var:M1>$ . This transfers the precondition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> \} $ to $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \} $ . This is known to be sound by the assignment law given in standard Hoare reasoning . Moving on to the subsequent bit of code contained in our set of commands , we see the assignment statement \verb | <var:M2> := <nat:5> ; | . This moves $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \} $ toward $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> \} $ . This is given using the assignment law of typical Hoare techniques . Taking a look at the upcoming command contained in our set of commands , the variable assignmet statement letting $ <var:M2> * <var:g> $ as $ <var:M2>$ . This transfers $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> \} $ into the postcondition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> * <var:Z> \} $ . This is shown to be logically sound by the assignment inference rule given by standard Hoare techniques . Advancing to the next step , we have the line giving $ <var:M2> * <var:g> $ into $ <var:M2>$ . This takes $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> * <var:Z> \} $ into the postcondition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> * <var:Z> ^ <nat:2> \} $ . Advancing to the next step , we see the environment update line defining $ <var:M2> $ to $ <var:A>$ . This moves $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:5> * <var:Z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:A> = <nat:5> * <var:Z> ^ <nat:2> \} $ . Jumping to the following line of code seen in the code segment , we see the binding code binding $ <var:A> + <var:M1> $ to $ <var:A>$ . This takes $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:4> * <var:Z> \land <var:A> = <nat:5> * <var:Z> ^ <nat:2> \} $ as the condition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> \} $ . Moving onward , we have the assignment statement \verb | <var:A> := <var:A> + <var:M0> | . This command transfers the precondition $ \{ <var:g> = <var:Z> \land <var:M0> = <nat:9> \land <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> \} $ as $ \{ <var:g> = <var:Z> \land <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> \} $ . This is deduced through the assignment inference rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:g> = <var:Z> }} <var:M0> := <nat:9> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:g> ; <var:M2> := <nat:5> ; <var:M2> := <var:M2> * <var:g> ; <var:M2> := <var:M2> * <var:g> ; <var:A> := <var:M2> ; <var:A> := <var:A> + <var:M1> ; <var:A> := <var:A> + <var:M0> {{ <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:A> = <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:A> = <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 