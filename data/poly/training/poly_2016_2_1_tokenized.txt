\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:1> ; <var:Z> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:b> = <var:C> $ --- for every whole numbers $ <var:C> $ --- ahead of executing this list of instructions , then we see $ <var:Z> = <nat:1> $ when set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:C> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:b> = <var:C> \land <var:u0> = <nat:1> \} \\ <var:Z> := <var:u0> \\ \{ <var:b> = <var:C> \land <var:Z> = <nat:1> \} \end{eqnarray} The application of usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:Z> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:b> = <var:C> }} <def:poly> {{ <var:Z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 