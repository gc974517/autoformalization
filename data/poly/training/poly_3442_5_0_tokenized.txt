\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:V> ; <var:w> := <var:g1> ; <var:w> := <var:w> + <var:g0> \end{verbatim} Allowing it to be that $ <var:V> = <var:F> $ ahead of running this series of commands , it holds that we have $ <var:w> = <nat:6> \times <var:F> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands can be accomplished using Hoare logic . Taking a look at the next bit of code found in our list of commands , we see \verb | { <var:V> = <var:F> } <var:g0> := <nat:6> { <var:V> = <var:F> \land <var:g0> = <nat:6> } | . Moving on , we have \verb | { <var:V> = <var:F> } <var:g0> := <nat:6> { <var:V> = <var:F> \land <var:g0> = <nat:6> } | , \verb | { <var:V> = <var:F> \land <var:g0> = <nat:6> } <var:g1> := <nat:6> { <var:V> = <var:F> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> } | and \verb | { <var:V> = <var:F> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> } <var:g1> := <var:g1> * <var:V> { <var:V> = <var:F> \land <var:g0> = <nat:6> \land <var:g1> = <nat:6> \times <var:F> } | . Advancing to the next step , we have \verb | { <var:V> = <var:F> } <var:g0> := <nat:6> { <var:V> = <var:F> \land <var:g0> = <nat:6> } | . This is shown by the variable binding scheme obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <var:g0> := <nat:6> ; <var:g1> := <nat:6> ; <var:g1> := <var:g1> * <var:V> ; <var:w> := <var:g1> ; <var:w> := <var:w> + <var:g0> {{ <var:w> = <nat:6> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:g0> = <nat:6> /\ <var:w> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:w> = <nat:6> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 