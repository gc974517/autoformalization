\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:e> ; <var:s> := <var:o1> ; <var:s> := <var:s> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given ( for all $ <var:j> \in \mathbb{N} $ ) $ <var:e> = <var:j> $ ahead of the evaluation of our code , it must be that we have $ <var:s> = <nat:3> * <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:e> = <var:j> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:e> = <var:j> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:3> ; \\ \{ <var:e> = <var:j> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:e> ; \\ \{ <var:e> = <var:j> \land <var:o0> = <nat:3> \land <var:o1> = <nat:3> * <var:j> \} \\ <var:s> := <var:o1> ; \\ \{ <var:e> = <var:j> \land <var:o0> = <nat:3> \land <var:s> = <nat:3> * <var:j> \} \\ <var:s> := <var:s> + <var:o0> \\ \{ <var:e> = <var:j> \land <var:s> = <nat:3> * <var:j> + <nat:3> \} \end{eqnarray} Hence , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:e> ; <var:s> := <var:o1> ; <var:s> := <var:s> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:e> = <var:j> }} <def:poly> {{ <var:s> = <nat:3> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:o0> = <nat:3> /\ <var:s> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:j> /\ <var:s> = <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 