\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y0> := <nat:5> ; <var:A> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- given some integers $ <var:X> $ --- it to hold that $ <var:G> = <var:X> $ ahead of the execution of the code , then we have $ <var:A> = <nat:5> $ after list of instructions terminates . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives us : \begin{eqnarray} \{ <var:G> = <var:X> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:G> = <var:X> \land <var:Y0> = <nat:5> \} \\ <var:A> := <var:Y0> \\ \{ <var:G> = <var:X> \land <var:A> = <nat:5> \} \end{eqnarray} Hence , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:5> ; <var:A> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:G> = <var:X> }} <def:poly> {{ <var:A> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:A> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 