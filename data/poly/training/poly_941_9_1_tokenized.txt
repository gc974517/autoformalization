\begin{document} \begin{theorem} Define a series of commands as follows \begin{verbatim} <var:l1> := <var:a> ; <var:l2> := <var:l1> * <var:a> ; <var:l3> := <var:l2> * <var:a> ; <var:l0> := <nat:4> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:7> ; <var:L> := <var:l3> <var:L> := <var:L> + <var:l2> <var:L> := <var:L> + <var:l0> \end{verbatim} Allowing $ <var:a> = <var:t> $ before evaluating the program , it follows that we see $ <var:L> = <nat:7> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:t> \} \\ <var:l1> := <var:a> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \} \\ <var:l2> := <var:l1> * <var:a> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:a> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:l2> := <var:l2> * <nat:4> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <nat:4> * <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:l3> := <var:l3> * <nat:7> ; \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <nat:4> * <var:t> ^ <nat:2> \land <var:l3> = <nat:7> * <var:t> ^ <nat:3> \land <var:l0> = <nat:4> \} \\ <var:L> := <var:l3> \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <nat:4> * <var:t> ^ <nat:2> \land <var:l0> = <nat:4> \land <var:L> = <nat:7> * <var:t> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:l2> \\ \{ <var:a> = <var:t> \land <var:l1> = <var:t> \land <var:l0> = <nat:4> \land <var:L> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:l0> \\ \{ <var:a> = <var:t> \land <var:L> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:a> = <var:t> }} <var:l1> := <var:a> ; <var:l2> := <var:l1> * <var:a> ; <var:l3> := <var:l2> * <var:a> ; <var:l0> := <nat:4> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:7> ; <var:L> := <var:l3> <var:L> := <var:L> + <var:l2> <var:L> := <var:L> + <var:l0> {{ <var:L> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:l0> = <nat:4> /\ <var:L> = <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:l1> = <var:t> /\ <var:l0> = <nat:4> /\ <var:L> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:t> /\ <var:L> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 