\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:h1> := <var:x> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:4> ; <var:I> := <var:h1> <var:I> := <var:I> + <var:h0> \end{verbatim} Allowing , for any positive coefficients $ <var:p> $ , that we have $ <var:x> = <var:p> $ before executing this set of instructions it follows that we have $ <var:I> = <nat:4> * <var:p> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:p> \} \\ <var:h1> := <var:x> ; \\ \{ <var:x> = <var:p> \land <var:h1> = <var:p> \} \\ <var:h0> := <nat:8> ; \\ \{ <var:x> = <var:p> \land <var:h1> = <var:p> \land <var:h0> = <nat:8> \} \\ <var:h1> := <var:h1> * <nat:4> ; \\ \{ <var:x> = <var:p> \land <var:h1> = <nat:4> \cdot <var:p> \land <var:h0> = <nat:8> \} \\ <var:I> := <var:h1> \\ \{ <var:x> = <var:p> \land <var:h0> = <nat:8> \land <var:I> = <nat:4> \cdot <var:p> \} \\ <var:I> := <var:I> + <var:h0> \\ \{ <var:x> = <var:p> \land <var:I> = <nat:4> \cdot <var:p> + <nat:8> \} \end{eqnarray} Applying standard Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:x> = <var:p> }} <var:h1> := <var:x> ; <var:h0> := <nat:8> ; <var:h1> := <var:h1> * <nat:4> ; <var:I> := <var:h1> <var:I> := <var:I> + <var:h0> {{ <var:I> = <nat:4> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:h1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:h1> = <var:p> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:h1> = <nat:4> * <var:p> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:h0> = <nat:8> /\ <var:I> = <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:I> = <nat:4> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 