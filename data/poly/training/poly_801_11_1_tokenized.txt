\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o3> := <var:o2> * <var:n> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:8> ; <var:W> := <var:o3> <var:W> := <var:W> + <var:o2> <var:W> := <var:W> + <var:o1> <var:W> := <var:W> + <var:o0> \end{verbatim} Assume it to hold that $ <var:n> = <var:Y> $ prior to executing the list of commands , it follows that we have $ <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:n> = <var:Y> \} \\ <var:o1> := <var:n> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <var:Y> \} \\ <var:o2> := <var:o1> * <var:n> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <var:Y> \land <var:o2> = <var:Y> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:n> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <var:Y> \land <var:o2> = <var:Y> ^ <nat:2> \land <var:o3> = <var:Y> ^ <nat:3> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <var:Y> \land <var:o2> = <var:Y> ^ <nat:2> \land <var:o3> = <var:Y> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o1> := <var:o1> * <nat:7> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <nat:7> * <var:Y> \land <var:o2> = <var:Y> ^ <nat:2> \land <var:o3> = <var:Y> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o2> := <var:o2> * <nat:1> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <nat:7> * <var:Y> \land <var:o2> = <nat:1> * <var:Y> ^ <nat:2> \land <var:o3> = <var:Y> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o3> := <var:o3> * <nat:8> ; \\ \{ <var:n> = <var:Y> \land <var:o1> = <nat:7> * <var:Y> \land <var:o2> = <nat:1> * <var:Y> ^ <nat:2> \land <var:o3> = <nat:8> * <var:Y> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:W> := <var:o3> \\ \{ <var:n> = <var:Y> \land <var:o1> = <nat:7> * <var:Y> \land <var:o2> = <nat:1> * <var:Y> ^ <nat:2> \land <var:o0> = <nat:1> \land <var:W> = <nat:8> * <var:Y> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:o2> \\ \{ <var:n> = <var:Y> \land <var:o1> = <nat:7> * <var:Y> \land <var:o0> = <nat:1> \land <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:o1> \\ \{ <var:n> = <var:Y> \land <var:o0> = <nat:1> \land <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> \} \\ <var:W> := <var:W> + <var:o0> \\ \{ <var:n> = <var:Y> \land <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:1> \} \end{eqnarray} As a consequence , our segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:n> = <var:Y> }} <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o3> := <var:o2> * <var:n> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:1> ; <var:o3> := <var:o3> * <nat:8> ; <var:W> := <var:o3> <var:W> := <var:W> + <var:o2> <var:W> := <var:W> + <var:o1> <var:W> := <var:W> + <var:o0> {{ <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <var:Y> /\ <var:o2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <var:Y> /\ <var:o2> = <var:Y> ^ <nat:2> /\ <var:o3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <var:Y> /\ <var:o2> = <var:Y> ^ <nat:2> /\ <var:o3> = <var:Y> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <nat:7> * <var:Y> /\ <var:o2> = <var:Y> ^ <nat:2> /\ <var:o3> = <var:Y> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <nat:7> * <var:Y> /\ <var:o2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:o3> = <var:Y> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <nat:7> * <var:Y> /\ <var:o2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:Y> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <nat:7> * <var:Y> /\ <var:o2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:o0> = <nat:1> /\ <var:W> = <nat:8> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o1> = <nat:7> * <var:Y> /\ <var:o0> = <nat:1> /\ <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:o0> = <nat:1> /\ <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Y> /\ <var:W> = <nat:8> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:7> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 