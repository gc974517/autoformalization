\begin{document} \begin{theorem} Define the following program as \begin{verbatim} <var:b0> := <nat:5> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:c> ; <var:g> := <var:b1> ; <var:g> := <var:g> + <var:b0> \end{verbatim} Allow ( assuming some positive numbers $ <var:H> $ ) $ <var:c> = <var:H> $ prior to the execution of our list of instructions it holds that we have $ <var:g> = <nat:3> \cdot <var:H> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our program can be shown through typical Hoare reasoning . Observing the upcoming bit of code in our series of instructions , we have the environment update command assigning $ <nat:5> $ to $ <var:b0>$ . This advances the condition $ \{ <var:c> = <var:H> \} $ toward the condition $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \} $ . This is sound through the assignment inference rule of standard Hoare techniques . Stepping through , we see the variable update code \verb | <var:b1> := <nat:3> ; | . This command redefines $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \} $ toward the condition $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:b1> = <nat:3> \} $ . Moving forward to the proceeding bit of code found in the series of instructions , we see the command \verb | <var:b1> := <var:b1> * <var:c> ; | . This takes the precondition $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:b1> = <nat:3> \} $ to the postcondition $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:b1> = <nat:3> \times <var:H> \} $ . This is sound with the assignment scheme defined by usual Hoare techniques . Jumping to the upcoming line in the segment of code , we have the code \verb | <var:g> := <var:b1> ; | . This code redefines $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:b1> = <nat:3> \times <var:H> \} $ to $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:g> = <nat:3> \times <var:H> \} $ . This is given using the assignment scheme found in typical Hoare techniques . Stepping forward , the assignment statement \verb | <var:g> := <var:g> + <var:b0> | . This line transfers the precondition $ \{ <var:c> = <var:H> \land <var:b0> = <nat:5> \land <var:g> = <nat:3> \times <var:H> \} $ as the condition $ \{ <var:c> = <var:H> \land <var:g> = <nat:3> \times <var:H> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:c> = <var:H> }} <var:b0> := <nat:5> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:c> ; <var:g> := <var:b1> ; <var:g> := <var:g> + <var:b0> {{ <var:g> = <nat:3> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:b0> = <nat:5> /\ <var:b1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:b0> = <nat:5> /\ <var:g> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:H> /\ <var:g> = <nat:3> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 