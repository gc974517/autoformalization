\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:9> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:c> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:c> ; <var:R2> := <var:R2> * <var:c> ; <var:p> := <var:R2> ; <var:p> := <var:p> + <var:R1> ; <var:p> := <var:p> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given for all positive numbers $ <var:q> $ $ <var:c> = <var:q> $ prior to evaluating the set of commands it must be that $ <var:p> = <nat:1> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:q> \} \\ <var:R0> := <nat:9> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \} \\ <var:R1> := <nat:6> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> \} \\ <var:R1> := <var:R1> * <var:c> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> * <var:q> \} \\ <var:R2> := <nat:1> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> * <var:q> \land <var:R2> = <nat:1> \} \\ <var:R2> := <var:R2> * <var:c> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> * <var:q> \land <var:R2> = <nat:1> * <var:q> \} \\ <var:R2> := <var:R2> * <var:c> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> * <var:q> \land <var:R2> = <nat:1> * <var:q> ^ <nat:2> \} \\ <var:p> := <var:R2> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:6> * <var:q> \land <var:p> = <nat:1> * <var:q> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:R1> ; \\ \{ <var:c> = <var:q> \land <var:R0> = <nat:9> \land <var:p> = <nat:1> * <var:q> ^ <nat:2> + <nat:6> * <var:q> \} \\ <var:p> := <var:p> + <var:R0> \\ \{ <var:c> = <var:q> \land <var:p> = <nat:1> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:9> \} \end{eqnarray} Using standard Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:9> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:c> ; <var:R2> := <nat:1> ; <var:R2> := <var:R2> * <var:c> ; <var:R2> := <var:R2> * <var:c> ; <var:p> := <var:R2> ; <var:p> := <var:p> + <var:R1> ; <var:p> := <var:p> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:c> = <var:q> }} <def:poly> {{ <var:p> = <nat:1> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> * <var:q> /\ <var:R2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> * <var:q> /\ <var:R2> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> * <var:q> /\ <var:R2> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:6> * <var:q> /\ <var:p> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:R0> = <nat:9> /\ <var:p> = <nat:1> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:q> /\ <var:p> = <nat:1> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 