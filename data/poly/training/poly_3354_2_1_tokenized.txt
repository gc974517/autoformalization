\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:7> ; <var:P> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:m> = <var:j> $ before running this set of instructions then we see $ <var:P> = <nat:7> $ when code segment exits . \end{theorem} \begin{proof} The course of logic for this code segment is evident with typical Hoare logic . Moving on to the upcoming piece of code found in the code segment , we see \begin{eqnarray} \{ <var:m> = <var:j> \} \, <var:r0> := <nat:7> \, \{ <var:m> = <var:j> \land <var:r0> = <nat:7> \} \end{eqnarray} Taking another step toward the following command contained in the series of instructions , \begin{eqnarray} \{ <var:m> = <var:j> \} \, <var:r0> := <nat:7> \, \{ <var:m> = <var:j> \land <var:r0> = <nat:7> \} \end{eqnarray} This is rigorously given by the variable update scheme obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:7> ; <var:P> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <def:poly> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 