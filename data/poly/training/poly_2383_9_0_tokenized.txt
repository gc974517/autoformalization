\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:E> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:E> ; <var:k2> := <var:k2> * <var:E> ; <var:y> := <var:k2> ; <var:y> := <var:y> + <var:k1> ; <var:y> := <var:y> + <var:k0> \end{verbatim} Assume that $ <var:E> = <var:x> $ prior to evaluating this series of instructions , it must be that $ <var:y> = <nat:9> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is done by typical Hoare logic . Observing the following bits of codefound in the series of commands , we have \begin{verbatim} { <var:E> = <var:x> } <var:k0> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> } { <var:E> = <var:x> \land <var:k0> = <nat:4> } <var:k1> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> } { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> } <var:k1> := <var:k1> * <var:E> { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> * <var:x> } \end{verbatim} This is guaranteed by the variable assignmet rule defined in usual Hoare reasoning . Observing the subsequent bits of codefound in the segment of code , \begin{verbatim} { <var:E> = <var:x> } <var:k0> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> } { <var:E> = <var:x> \land <var:k0> = <nat:4> } <var:k1> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> } \end{verbatim} Focusing on the subsequent command found in the set of instructions , we have \begin{verbatim} { <var:E> = <var:x> } <var:k0> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> } \end{verbatim} This is rigorously given by the scheme obtained from usual Hoare techniques . Moving forward , \begin{verbatim} { <var:E> = <var:x> } <var:k0> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> } { <var:E> = <var:x> \land <var:k0> = <nat:4> } <var:k1> := <nat:4> { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> } { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> } <var:k1> := <var:k1> * <var:E> { <var:E> = <var:x> \land <var:k0> = <nat:4> \land <var:k1> = <nat:4> * <var:x> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:E> = <var:x> }} <var:k0> := <nat:4> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:E> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:E> ; <var:k2> := <var:k2> * <var:E> ; <var:y> := <var:k2> ; <var:y> := <var:y> + <var:k1> ; <var:y> := <var:y> + <var:k0> {{ <var:y> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> * <var:x> /\ <var:k2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> * <var:x> /\ <var:k2> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> * <var:x> /\ <var:k2> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:4> * <var:x> /\ <var:y> = <nat:9> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:k0> = <nat:4> /\ <var:y> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:y> = <nat:9> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 