\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:3> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:k> ; <var:F> := <var:i1> ; <var:F> := <var:F> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- letting $ <var:S> \in \mathbb{N} $ --- it to hold that $ <var:k> = <var:S> $ prior to running our list of instructions it holds that we have $ <var:F> = <nat:6> * <var:S> + <nat:3> $ once set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be given by usual Hoare logic . Further , we see the variable update statement \verb | <var:i0> := <nat:3> ; | . This statement advances the condition $ \{ <var:k> = <var:S> \} $ as the postcondition $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \} $ . This is rigorously given through the assignment scheme from typical Hoare techniques . Shifting focus toward the subsequent step contained in our list of commands , the variable binding code giving $ <nat:6> $ toward $ <var:i1>$ . This line moves the condition $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \} $ to $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:i1> = <nat:6> \} $ . This is known to be sound through the assignment inference rule found in usual Hoare logic . Following , we have the variable assignmet statement letting $ <var:i1> * <var:k> $ toward $ <var:i1>$ . This moves $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:i1> = <nat:6> \} $ toward $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:i1> = <nat:6> * <var:S> \} $ . Advancing on , the assignment line defining $ <var:i1> $ as $ <var:F>$ . This advances $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:i1> = <nat:6> * <var:S> \} $ to the postcondition $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:F> = <nat:6> * <var:S> \} $ . Taking another step toward the upcoming piece of code found in our set of instructions , the variable update line assigning $ <var:F> + <var:i0$ toward $ <var:F>$ . This advances $ \{ <var:k> = <var:S> \land <var:i0> = <nat:3> \land <var:F> = <nat:6> * <var:S> \} $ to $ \{ <var:k> = <var:S> \land <var:F> = <nat:6> * <var:S> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:i1> := <nat:6> ; <var:i1> := <var:i1> * <var:k> ; <var:F> := <var:i1> ; <var:F> := <var:F> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:k> = <var:S> }} <def:poly> {{ <var:F> = <nat:6> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:i0> = <nat:3> /\ <var:i1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:F> = <nat:6> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 