\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:5> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:X> ; <var:U> := <var:a1> ; <var:U> := <var:U> + <var:a0> \end{verbatim} Assuming with some $ <var:y> \in \mathbb{N} $ that $ <var:X> = <var:y> $ ahead of evaluating this set of instructions , it follows that $ <var:U> = <nat:3> \times <var:y> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:y> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:X> = <var:y> \land <var:a0> = <nat:5> \} \\ <var:a1> := <nat:3> ; \\ \{ <var:X> = <var:y> \land <var:a0> = <nat:5> \land <var:a1> = <nat:3> \} \\ <var:a1> := <var:a1> * <var:X> ; \\ \{ <var:X> = <var:y> \land <var:a0> = <nat:5> \land <var:a1> = <nat:3> \times <var:y> \} \\ <var:U> := <var:a1> ; \\ \{ <var:X> = <var:y> \land <var:a0> = <nat:5> \land <var:U> = <nat:3> \times <var:y> \} \\ <var:U> := <var:U> + <var:a0> \\ \{ <var:X> = <var:y> \land <var:U> = <nat:3> \times <var:y> + <nat:5> \} \end{eqnarray} Using typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:X> = <var:y> }} <var:a0> := <nat:5> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:X> ; <var:U> := <var:a1> ; <var:U> := <var:U> + <var:a0> {{ <var:U> = <nat:3> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:a0> = <nat:5> /\ <var:a1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:a0> = <nat:5> /\ <var:U> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:y> /\ <var:U> = <nat:3> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 