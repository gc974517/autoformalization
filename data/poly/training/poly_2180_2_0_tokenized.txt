\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:2> ; <var:N> := <var:k0> \end{verbatim} Given with some positive integers $ <var:L> $ it to be that $ <var:O> = <var:L> $ before executing the list of instructions , then we have $ <var:N> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code can be given with the following decorated program . \begin{eqnarray} \{ <var:O> = <var:L> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:O> = <var:L> \land <var:k0> = <nat:2> \} \\ <var:N> := <var:k0> \\ \{ <var:O> = <var:L> \land <var:N> = <nat:2> \} \end{eqnarray} Applying standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:O> = <var:L> }} <var:k0> := <nat:2> ; <var:N> := <var:k0> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:L> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 