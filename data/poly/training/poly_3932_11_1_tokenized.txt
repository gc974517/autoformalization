\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:t> ; <var:l2> := <var:l1> * <var:t> ; <var:l3> := <var:l2> * <var:t> ; <var:l0> := <nat:8> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:5> ; <var:Z> := <var:l3> <var:Z> := <var:Z> + <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:t> = <var:N> $ --- for positive integers $ <var:N> $ --- before interpreting the segment of code it must be that we see $ <var:Z> = <nat:5> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> + <nat:8> $ after code has finished . \end{theorem} \begin{proof} The course of logic for our set of instructions can be given using typical Hoare techniques . Going forward , we have \begin{verbatim} { <var:t> = <var:N> } <var:l1> := <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> } { <var:t> = <var:N> \land <var:l1> = <var:N> } <var:l2> := <var:l1> * <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> } { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> } <var:l3> := <var:l2> * <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> } { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> } <var:l0> := <nat:8> { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } <var:l1> := <var:l1> * <nat:7> { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } <var:l2> := <var:l2> * <nat:5> { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <nat:5> * <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <nat:5> * <var:N> ^ <nat:2> \land <var:l3> = <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } <var:l3> := <var:l3> * <nat:5> { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <nat:5> * <var:N> ^ <nat:2> \land <var:l3> = <nat:5> * <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } { <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <nat:5> * <var:N> ^ <nat:2> \land <var:l3> = <nat:5> * <var:N> ^ <nat:3> \land <var:l0> = <nat:8> } <var:Z> := <var:l3{ <var:t> = <var:N> \land <var:l1> = <nat:7> * <var:N> \land <var:l2> = <nat:5> * <var:N> ^ <nat:2> \land <var:l0> = <nat:8> \land <var:Z> = <nat:5> * <var:N> ^ <nat:3> } \end{verbatim} This is given using the variable assignmet inference rule in usual Hoare logic . Advancing on , we see \begin{verbatim} { <var:t> = <var:N> } <var:l1> := <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> } { <var:t> = <var:N> \land <var:l1> = <var:N> } <var:l2> := <var:l1> * <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> \land <var:l2> = <var:N> ^ <nat:2> } \end{verbatim} This is given using the scheme from standard Hoare reasoning . Moving on , we have \begin{verbatim} { <var:t> = <var:N> } <var:l1> := <var:t> { <var:t> = <var:N> \land <var:l1> = <var:N> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:t> ; <var:l2> := <var:l1> * <var:t> ; <var:l3> := <var:l2> * <var:t> ; <var:l0> := <nat:8> ; <var:l1> := <var:l1> * <nat:7> ; <var:l2> := <var:l2> * <nat:5> ; <var:l3> := <var:l3> * <nat:5> ; <var:Z> := <var:l3> <var:Z> := <var:Z> + <var:l2> <var:Z> := <var:Z> + <var:l1> <var:Z> := <var:Z> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <def:poly> {{ <var:Z> = <nat:5> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <var:N> /\ <var:l2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <var:N> /\ <var:l2> = <var:N> ^ <nat:2> /\ <var:l3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <var:N> /\ <var:l2> = <var:N> ^ <nat:2> /\ <var:l3> = <var:N> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <nat:7> * <var:N> /\ <var:l2> = <var:N> ^ <nat:2> /\ <var:l3> = <var:N> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <nat:7> * <var:N> /\ <var:l2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:l3> = <var:N> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <nat:7> * <var:N> /\ <var:l2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:l3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <nat:7> * <var:N> /\ <var:l2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:l0> = <nat:8> /\ <var:Z> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l1> = <nat:7> * <var:N> /\ <var:l0> = <nat:8> /\ <var:Z> = <nat:5> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:l0> = <nat:8> /\ <var:Z> = <nat:5> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:Z> = <nat:5> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 