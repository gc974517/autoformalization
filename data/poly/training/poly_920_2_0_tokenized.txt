\begin{document} \begin{theorem} Define a program as \begin{verbatim} <var:J0> := <nat:7> ; <var:v> := <var:J0> \end{verbatim} Given that $ <var:u> = <var:K> $ before interpreting our code segment then we see $ <var:v> = <nat:7> $ after set of instructions is done executing . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:u> = <var:K> \} \\ <var:J0> := <nat:7> ; \\ \{ <var:u> = <var:K> \land <var:J0> = <nat:7> \} \\ <var:v> := <var:J0> \\ \{ <var:u> = <var:K> \land <var:v> = <nat:7> \} \end{eqnarray} Considering the preceding argument , our code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:u> = <var:K> }} <var:J0> := <nat:7> ; <var:v> := <var:J0> {{ <var:v> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:K> /\ <var:v> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 