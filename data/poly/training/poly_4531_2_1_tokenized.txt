\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:8> ; <var:H> := <var:P0> \end{verbatim} Allowing it to hold that $ <var:m> = <var:A> $ prior to the evaluation of the segment of code , it holds that we have $ <var:H> = <nat:8> $ . \end{theorem} \begin{proof} The proof of this set of commands is clear with Hoare logic . Moving forward to the next step , we see the assignment code \verb | <var:P0> := <nat:8> ; | . This moves $ \{ <var:m> = <var:A> \} $ toward the postcondition $ \{ <var:m> = <var:A> \land <var:P0> = <nat:8> \} $ . This is deduced using the assignment law of typical Hoare reasoning . Taking another step toward the proceeding statement seen in our series of instructions , the variable assignmet line defining $ <var:P0$ to $ <var:H>$ . This moves the precondition $ \{ <var:m> = <var:A> \land <var:P0> = <nat:8> \} $ into the condition $ \{ <var:m> = <var:A> \land <var:H> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:m> = <var:A> }} <var:P0> := <nat:8> ; <var:H> := <var:P0> {{ <var:H> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:H> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 