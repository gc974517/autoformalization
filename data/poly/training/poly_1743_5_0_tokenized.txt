\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:t> ; <var:g> := <var:o1> ; <var:g> := <var:g> + <var:o0> \end{verbatim} Allow --- taking positive integer coefficients $ <var:N> $ --- that we have $ <var:t> = <var:N> $ prior to the execution of the program it follows that $ <var:g> = <nat:8> \times <var:N> + <nat:3> $ when program has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:N> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:t> = <var:N> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:8> ; \\ \{ <var:t> = <var:N> \land <var:o0> = <nat:3> \land <var:o1> = <nat:8> \} \\ <var:o1> := <var:o1> * <var:t> ; \\ \{ <var:t> = <var:N> \land <var:o0> = <nat:3> \land <var:o1> = <nat:8> \times <var:N> \} \\ <var:g> := <var:o1> ; \\ \{ <var:t> = <var:N> \land <var:o0> = <nat:3> \land <var:g> = <nat:8> \times <var:N> \} \\ <var:g> := <var:g> + <var:o0> \\ \{ <var:t> = <var:N> \land <var:g> = <nat:8> \times <var:N> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:t> = <var:N> }} <var:o0> := <nat:3> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:t> ; <var:g> := <var:o1> ; <var:g> := <var:g> + <var:o0> {{ <var:g> = <nat:8> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:o0> = <nat:3> /\ <var:g> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:N> /\ <var:g> = <nat:8> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 