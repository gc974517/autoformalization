\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:Y> ; <var:f> := <var:c1> ; <var:f> := <var:f> + <var:c0> \end{verbatim} Given that we have $ <var:Y> = <var:P> $ ahead of the evaluation of the list of commands then we see $ <var:f> = <nat:2> \cdot <var:P> + <nat:5> $ once list of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for our program is shown through Hoare techniques . Moving forward , we see \begin{verbatim} { <var:Y> = <var:P> } <var:c0> := <nat:5> { <var:Y> = <var:P> \land <var:c0> = <nat:5> } { <var:Y> = <var:P> \land <var:c0> = <nat:5> } <var:c1> := <nat:2> { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:c1> = <nat:2> } { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:c1> = <nat:2> } <var:c1> := <var:c1> * <var:Y> { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:c1> = <nat:2> \cdot <var:P> } { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:c1> = <nat:2> \cdot <var:P> } <var:f> := <var:c1> { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:f> = <nat:2> \cdot <var:P> } { <var:Y> = <var:P> \land <var:c0> = <nat:5> \land <var:f> = <nat:2> \cdot <var:P> } <var:f> := <var:f> + <var:c0{ <var:Y> = <var:P> \land <var:f> = <nat:2> \cdot <var:P> + <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Y> = <var:P> }} <var:c0> := <nat:5> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:Y> ; <var:f> := <var:c1> ; <var:f> := <var:f> + <var:c0> {{ <var:f> = <nat:2> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:c0> = <nat:5> /\ <var:f> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:f> = <nat:2> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 