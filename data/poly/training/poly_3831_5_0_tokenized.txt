\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:2> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:p> ; <var:W> := <var:r1> ; <var:W> := <var:W> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allow that we have $ <var:p> = <var:x> $ before executing our code segment it follows that $ <var:W> = <nat:9> \cdot <var:x> + <nat:2> $ once code is done executing . \end{theorem} \begin{proof} Using standard Hoare logic gives : \begin{eqnarray} \{ <var:p> = <var:x> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:p> = <var:x> \land <var:r0> = <nat:2> \} \\ <var:r1> := <nat:9> ; \\ \{ <var:p> = <var:x> \land <var:r0> = <nat:2> \land <var:r1> = <nat:9> \} \\ <var:r1> := <var:r1> * <var:p> ; \\ \{ <var:p> = <var:x> \land <var:r0> = <nat:2> \land <var:r1> = <nat:9> * <var:x> \} \\ <var:W> := <var:r1> ; \\ \{ <var:p> = <var:x> \land <var:r0> = <nat:2> \land <var:W> = <nat:9> * <var:x> \} \\ <var:W> := <var:W> + <var:r0> \\ \{ <var:p> = <var:x> \land <var:W> = <nat:9> * <var:x> + <nat:2> \} \end{eqnarray} Thus , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:2> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:p> ; <var:W> := <var:r1> ; <var:W> := <var:W> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <def:poly> {{ <var:W> = <nat:9> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:r0> = <nat:2> /\ <var:r1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:r0> = <nat:2> /\ <var:W> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:W> = <nat:9> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 