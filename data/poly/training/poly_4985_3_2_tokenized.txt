\begin{document} \begin{theorem} Take a program in \emph{Imp} such that \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <var:J> * <var:L> ; <var:J> := <nat:2> + <var:J> * <var:L> \end{verbatim} Assume that $ <var:L> = <var:Z> $ before the evaluation of our set of instructions , then we see $ <var:J> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:2> $ once code executes . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:L> = <var:Z> \} \\ <var:J> := <nat:3> ; \\ \{ <var:L> = <var:Z> \land <var:J> = <nat:3> \} \\ <var:J> := <var:J> * <var:L> ; \\ \{ <var:L> = <var:Z> \land <var:J> = <nat:3> \cdot <var:Z> + \} \\ <var:J> := <nat:2> + <var:J> * <var:L> \\ \{ <var:L> = <var:Z> \land <var:J> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:2> \} \end{eqnarray} Given the above , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:L> = <var:Z> }} <var:J> := <nat:3> ; <var:J> := <var:J> * <var:L> ; <var:J> := <nat:2> + <var:J> * <var:L> {{ <var:J> = <nat:3> * <var:Z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:J> = <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:J> = <nat:3> * <var:Z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 