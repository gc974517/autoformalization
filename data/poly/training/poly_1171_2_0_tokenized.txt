\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:8> ; <var:E> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:H> = <var:Q> $ ahead of evaluating the segment of code , it holds that we have $ <var:E> = <nat:8> $ when set of commands has terminated . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:H> = <var:Q> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:H> = <var:Q> \land <var:b0> = <nat:8> \} \\ <var:E> := <var:b0> \\ \{ <var:H> = <var:Q> \land <var:E> = <nat:8> \} \end{eqnarray} Given the preceding argument , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:8> ; <var:E> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:H> = <var:Q> }} <def:poly> {{ <var:E> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:E> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 