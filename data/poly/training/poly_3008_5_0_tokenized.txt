\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:W> ; <var:Q> := <var:L1> ; <var:Q> := <var:Q> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Given ( taking positive coefficients $ <var:X> $ ) it to be that $ <var:W> = <var:X> $ prior to the evaluation of this series of commands it follows that $ <var:Q> = <nat:9> \cdot <var:X> + <nat:5> $ when program is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is accomplished using typical Hoare reasoning . Taking a look at the next command seen in the list of instructions , we have the variable binding statement giving $ <nat:5> $ toward $ <var:L0>$ . This moves $ \{ <var:W> = <var:X> \} $ into the postcondition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \} $ . Keeping momentum , we see the binding code \verb | <var:L1> := <nat:9> ; | . This redefines the precondition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \} $ into the condition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:L1> = <nat:9> \} $ . This is sound by the assignment inference rule obtained from Hoare reasoning . Advancing to the next step , the variable binding line yielding $ <var:L1> * <var:W> $ into $ <var:L1>$ . This redefines the precondition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:L1> = <nat:9> \} $ to the condition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:L1> = <nat:9> \cdot <var:X> \} $ . This is ensured by the assignment scheme obtained from standard Hoare reasoning . Shifting focus toward the proceeding bit of code in our code segment , we have the variable assignmet command \verb | <var:Q> := <var:L1> ; | . This statement forwards $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:L1> = <nat:9> \cdot <var:X> \} $ into $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:Q> = <nat:9> \cdot <var:X> \} $ . This is given using the assignment scheme defined in standard Hoare reasoning . Focusing on the next piece of code found in our program , we have the variable update command \verb | <var:Q> := <var:Q> + <var:L0> | . This command moves the condition $ \{ <var:W> = <var:X> \land <var:L0> = <nat:5> \land <var:Q> = <nat:9> \cdot <var:X> \} $ as $ \{ <var:W> = <var:X> \land <var:Q> = <nat:9> \cdot <var:X> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:W> ; <var:Q> := <var:L1> ; <var:Q> := <var:Q> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:W> = <var:X> }} <def:poly> {{ <var:Q> = <nat:9> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:L0> = <nat:5> /\ <var:Q> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:Q> = <nat:9> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 