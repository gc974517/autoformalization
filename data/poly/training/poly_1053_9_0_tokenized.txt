\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:o> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:o> ; <var:H2> := <var:H2> * <var:o> ; <var:C> := <var:H2> ; <var:C> := <var:C> + <var:H1> ; <var:C> := <var:C> + <var:H0> \end{verbatim} Assuming $ <var:o> = <var:b> $ for natural coefficients $ <var:b> $ before running the code segment then we see $ <var:C> = <nat:6> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be done by typical Hoare reasoning . Focusing on the following piece of code found in our segment of code , we see the variable binding line giving $ <nat:7> $ toward $ <var:H0>$ . This command moves the precondition $ \{ <var:o> = <var:b> \} $ to the condition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \} $ . Paying attention to the subsequent piece of code in the code , we see the binding command \verb | <var:H1> := <nat:4> ; | . This command redefines the precondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \} $ to the postcondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> \} $ . Moving forward to the next step , we see the variable update line letting $ <var:H1> * <var:o> $ as $ <var:H1>$ . This advances the condition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> \} $ to the postcondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \} $ . Moving onward , the variable assignmet command \verb | <var:H2> := <nat:6> ; | . This transfers the condition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \} $ as the condition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> \} $ . Next , we see the binding line binding $ <var:H2> * <var:o> $ to $ <var:H2>$ . This advances the precondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> \} $ as $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> * <var:b> \} $ . Immediately after , we have the variable update line \verb | <var:H2> := <var:H2> * <var:o> ; | . This statement takes the precondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> * <var:b> \} $ into the postcondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> * <var:b> ^ <nat:2> \} $ . This is deduced using the assignment law given in usual Hoare techniques . Following , the variable assignmet command giving $ <var:H2> $ to $ <var:C>$ . This takes $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:H2> = <nat:6> * <var:b> ^ <nat:2> \} $ as the postcondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:C> = <nat:6> * <var:b> ^ <nat:2> \} $ . This is shown using the assignment scheme defined in typical Hoare logic . Honing in on the subsequent piece of code in the segment of code , we see the code yielding $ <var:C> + <var:H1> $ into $ <var:C>$ . This advances $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:H1> = <nat:4> * <var:b> \land <var:C> = <nat:6> * <var:b> ^ <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} $ . Moving forward to the following piece of code in the series of commands , the variable assignmet code \verb | <var:C> := <var:C> + <var:H0> | . This line redefines the condition $ \{ <var:o> = <var:b> \land <var:H0> = <nat:7> \land <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} $ as $ \{ <var:o> = <var:b> \land <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> \} $ . This is given through the assignment inference rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:o> = <var:b> }} <var:H0> := <nat:7> ; <var:H1> := <nat:4> ; <var:H1> := <var:H1> * <var:o> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:o> ; <var:H2> := <var:H2> * <var:o> ; <var:C> := <var:H2> ; <var:C> := <var:C> + <var:H1> ; <var:C> := <var:C> + <var:H0> {{ <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> * <var:b> /\ <var:H2> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:4> * <var:b> /\ <var:C> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:H0> = <nat:7> /\ <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:C> = <nat:6> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 