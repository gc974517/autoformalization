\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:9> ; <var:X> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:I> = <var:o> $ ahead of running this set of commands , then $ <var:X> = <nat:9> $ . \end{theorem} \begin{proof} Notice the following decorated code . \begin{eqnarray} \{ <var:I> = <var:o> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:I> = <var:o> \land <var:n0> = <nat:9> \} \\ <var:X> := <var:n0> \\ \{ <var:I> = <var:o> \land <var:X> = <nat:9> \} \end{eqnarray} The application of Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:9> ; <var:X> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <def:poly> {{ <var:X> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:X> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 