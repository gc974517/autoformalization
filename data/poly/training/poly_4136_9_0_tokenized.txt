\begin{document} \begin{theorem} Let the following program such that \begin{verbatim} <var:p0> := <nat:2> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:i> := <var:p2> ; <var:i> := <var:i> + <var:p1> ; <var:i> := <var:i> + <var:p0> \end{verbatim} Assume $ <var:Z> = <var:N> $ before interpreting this list of commands it must be that we see $ <var:i> = <nat:2> \cdot <var:N> ^ <nat:2> + <nat:8> \cdot <var:N> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program is clear by Hoare reasoning . Looking at the upcoming step contained in our set of instructions , we have the assignment line \verb | <var:p0> := <nat:2> ; | . This statement advances $ \{ <var:Z> = <var:N> \} $ to the postcondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \} $ . Advancing , the assignment statement giving $ <nat:8> $ into $ <var:p1>$ . This advances $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \} $ into $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \} $ . Going forward , we have the statement \verb | <var:p1> := <var:p1> * <var:Z> ; | . This redefines the precondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \} $ into the postcondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \} $ . This is deduced using the assignment inference rule in usual Hoare reasoning . Moving onward , the variable update line \verb | <var:p2> := <nat:2> ; | . This code transfers $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \} $ into $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \} $ . After , the assignment code giving $ <var:p2> * <var:Z> $ to $ <var:p2>$ . This code moves the precondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \times <var:N> \} $ . Advancing , the assignment code \verb | <var:p2> := <var:p2> * <var:Z> ; | . This code takes the precondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \times <var:N> \} $ to the postcondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \times <var:N> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law given by typical Hoare logic . Moving forward to the proceeding bit of code found in the program , the variable update statement assigning $ <var:p2> $ to $ <var:i>$ . This command advances the precondition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:p2> = <nat:2> \times <var:N> ^ <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:i> = <nat:2> \times <var:N> ^ <nat:2> \} $ . This is deduced with the assignment inference rule of typical Hoare reasoning . Going forward , we have the environment update command assigning $ <var:i> + <var:p1> $ as $ <var:i>$ . This moves the condition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:p1> = <nat:8> \times <var:N> \land <var:i> = <nat:2> \times <var:N> ^ <nat:2> \} $ as the condition $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:i> = <nat:2> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> \} $ . Focusing on the following statement in the list of commands , the environment update code assigning $ <var:i> + <var:p0$ as $ <var:i>$ . This line moves $ \{ <var:Z> = <var:N> \land <var:p0> = <nat:2> \land <var:i> = <nat:2> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> \} $ to the condition $ \{ <var:Z> = <var:N> \land <var:i> = <nat:2> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <var:p0> := <nat:2> ; <var:p1> := <nat:8> ; <var:p1> := <var:p1> * <var:Z> ; <var:p2> := <nat:2> ; <var:p2> := <var:p2> * <var:Z> ; <var:p2> := <var:p2> * <var:Z> ; <var:i> := <var:p2> ; <var:i> := <var:i> + <var:p1> ; <var:i> := <var:i> + <var:p0> {{ <var:i> = <nat:2> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> * <var:N> /\ <var:p2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> * <var:N> /\ <var:p2> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> * <var:N> /\ <var:p2> = <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:p1> = <nat:8> * <var:N> /\ <var:i> = <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:p0> = <nat:2> /\ <var:i> = <nat:2> * <var:N> ^ <nat:2> + <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:i> = <nat:2> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 