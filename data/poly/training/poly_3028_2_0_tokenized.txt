\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:2> ; <var:v> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow it to hold that $ <var:e> = <var:S> $ before interpreting this set of instructions , then $ <var:v> = <nat:2> $ once list of commands terminates . \end{theorem} \begin{proof} The flow of logic for our set of commands can be done using standard Hoare techniques . Going forward , \[ \begin{tabular} {rcl} \{ <var:e> = <var:S> \} & <var:P0> := <nat:2> & \{ <var:e> = <var:S> \land <var:P0> = <nat:2> \} \end{tabular} This is shown to be logically sound by the variable binding law defined in standard Hoare techniques . Advancing to the proceeding command in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:e> = <var:S> \} & <var:P0> := <nat:2> & \{ <var:e> = <var:S> \land <var:P0> = <nat:2> \} \end{tabular} This is rigorously given using the inference rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:v> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:e> = <var:S> }} <def:poly> {{ <var:v> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:v> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 