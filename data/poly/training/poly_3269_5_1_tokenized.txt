\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:R> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:2> ; <var:D> := <var:J1> <var:D> := <var:D> + <var:J0> \end{verbatim} Assume it to be that $ <var:R> = <var:W> $ ahead of the evaluation of our program , it follows that we see $ <var:D> = <nat:2> * <var:W> + <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:W> \} \\ <var:J1> := <var:R> ; \\ \{ <var:R> = <var:W> \land <var:J1> = <var:W> \} \\ <var:J0> := <nat:9> ; \\ \{ <var:R> = <var:W> \land <var:J1> = <var:W> \land <var:J0> = <nat:9> \} \\ <var:J1> := <var:J1> * <nat:2> ; \\ \{ <var:R> = <var:W> \land <var:J1> = <nat:2> \cdot <var:W> \land <var:J0> = <nat:9> \} \\ <var:D> := <var:J1> \\ \{ <var:R> = <var:W> \land <var:J0> = <nat:9> \land <var:D> = <nat:2> \cdot <var:W> \} \\ <var:D> := <var:D> + <var:J0> \\ \{ <var:R> = <var:W> \land <var:D> = <nat:2> \cdot <var:W> + <nat:9> \} \end{eqnarray} Given the above , this series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <var:J1> := <var:R> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:2> ; <var:D> := <var:J1> <var:D> := <var:D> + <var:J0> {{ <var:D> = <nat:2> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:J1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:J1> = <var:W> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:J1> = <nat:2> * <var:W> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:J0> = <nat:9> /\ <var:D> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:D> = <nat:2> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 