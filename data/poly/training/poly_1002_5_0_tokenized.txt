\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:R> ; <var:m> := <var:e1> ; <var:m> := <var:m> + <var:e0> \end{verbatim} Allow ( for every positive coefficients $ <var:G> $ ) $ <var:R> = <var:G> $ before running our set of instructions , it must be that we see $ <var:m> = <nat:3> * <var:G> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for the code segment is done through usual Hoare logic . Honing in on the upcoming statement found in the set of instructions , we see the variable binding line letting $ <nat:9> $ to $ <var:e0>$ . This command moves the precondition $ \{ <var:R> = <var:G> \} $ to the postcondition $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \} $ . This is known to be sound using the assignment inference rule given in standard Hoare techniques . Honing in on the following line found in the list of commands , we see the binding code \verb | <var:e1> := <nat:3> ; | . This redefines the condition $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \} $ into the condition $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:e1> = <nat:3> \} $ . This is known to be sound with the assignment scheme given in Hoare techniques . Stepping through , we see the assignment statement assigning $ <var:e1> * <var:R> $ toward $ <var:e1>$ . This command forwards the precondition $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:e1> = <nat:3> \} $ into $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:e1> = <nat:3> * <var:G> \} $ . This is ensured with the assignment scheme defined by Hoare techniques . Jumping to the upcoming piece of code in our set of commands , the statement \verb | <var:m> := <var:e1> ; | . This transfers $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:e1> = <nat:3> * <var:G> \} $ to the condition $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:m> = <nat:3> * <var:G> \} $ . This is known to be sound through the assignment scheme defined by typical Hoare reasoning . Taking a look at the upcoming piece of code found in our list of instructions , the binding line giving $ <var:m> + <var:e0$ as $ <var:m>$ . This command forwards $ \{ <var:R> = <var:G> \land <var:e0> = <nat:9> \land <var:m> = <nat:3> * <var:G> \} $ into the condition $ \{ <var:R> = <var:G> \land <var:m> = <nat:3> * <var:G> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:R> = <var:G> }} <var:e0> := <nat:9> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:R> ; <var:m> := <var:e1> ; <var:m> := <var:m> + <var:e0> {{ <var:m> = <nat:3> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:e0> = <nat:9> /\ <var:m> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:G> /\ <var:m> = <nat:3> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 