\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:2> ; <var:W> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:G> = <var:d> $ for positive coefficients $ <var:d> $ before the execution of this set of commands it holds that we have $ <var:W> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this code is given by typical Hoare techniques . Stepping forward , \begin{verbatim} { <var:G> = <var:d> } <var:M0> := <nat:2> { <var:G> = <var:d> \land <var:M0> = <nat:2> } \end{verbatim} Further , we have \begin{verbatim} { <var:G> = <var:d> } <var:M0> := <nat:2> { <var:G> = <var:d> \land <var:M0> = <nat:2> } \end{verbatim} This is given by the variable assignmet law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:2> ; <var:W> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <def:poly> {{ <var:W> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:W> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 