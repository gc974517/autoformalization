\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:v2> := <nat:9> ; <var:v2> := <var:v2> * <var:L> ; <var:v2> := <var:v2> * <var:L> ; <var:v3> := <nat:7> ; <var:v3> := <var:v3> * <var:L> ; <var:v3> := <var:v3> * <var:L> ; <var:v3> := <var:v3> * <var:L> ; <var:O> := <var:v3> ; <var:O> := <var:O> + <var:v2> ; <var:O> := <var:O> + <var:v0> \end{verbatim} Allow $ <var:L> = <var:j> $ prior to evaluating our list of commands , it must be that we have $ <var:O> = <nat:7> \times <var:j> ^ <nat:3> + <nat:9> \times <var:j> ^ <nat:2> + <nat:4> $ when program has executed . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:L> = <var:j> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \} \\ <var:v2> := <nat:9> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \} \\ <var:v2> := <var:v2> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> \} \\ <var:v2> := <var:v2> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \} \\ <var:v3> := <nat:7> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:v3> = <nat:7> \} \\ <var:v3> := <var:v3> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:v3> = <nat:7> \cdot <var:j> \} \\ <var:v3> := <var:v3> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:v3> = <nat:7> \cdot <var:j> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:L> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:v3> = <nat:7> \cdot <var:j> ^ <nat:3> \} \\ <var:O> := <var:v3> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:v2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:O> = <nat:7> \cdot <var:j> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:v2> ; \\ \{ <var:L> = <var:j> \land <var:v0> = <nat:4> \land <var:O> = <nat:7> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:v0> \\ \{ <var:L> = <var:j> \land <var:O> = <nat:7> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:L> = <var:j> }} <var:v0> := <nat:4> ; <var:v2> := <nat:9> ; <var:v2> := <var:v2> * <var:L> ; <var:v2> := <var:v2> * <var:L> ; <var:v3> := <nat:7> ; <var:v3> := <var:v3> * <var:L> ; <var:v3> := <var:v3> * <var:L> ; <var:v3> := <var:v3> * <var:L> ; <var:O> := <var:v3> ; <var:O> := <var:O> + <var:v2> ; <var:O> := <var:O> + <var:v0> {{ <var:O> = <nat:7> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:v3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:v3> = <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:v3> = <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:v3> = <nat:7> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:v2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:O> = <nat:7> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:v0> = <nat:4> /\ <var:O> = <nat:7> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:O> = <nat:7> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 