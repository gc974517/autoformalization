\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:4> ; <var:h> := <var:K0> \end{verbatim} Allow , given some positive coefficients $ <var:d> $ , that we have $ <var:R> = <var:d> $ before the evaluation of the series of instructions , it follows that $ <var:h> = <nat:4> $ once program finishes . \end{theorem} \begin{proof} Using Hoare reasoning gives : \begin{eqnarray} \{ <var:R> = <var:d> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:R> = <var:d> \land <var:K0> = <nat:4> \} \\ <var:h> := <var:K0> \\ \{ <var:R> = <var:d> \land <var:h> = <nat:4> \} \end{eqnarray} Thus , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:R> = <var:d> }} <var:K0> := <nat:4> ; <var:h> := <var:K0> {{ <var:h> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:d> /\ <var:h> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 