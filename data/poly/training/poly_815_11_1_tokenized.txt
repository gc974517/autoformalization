\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:S> ; <var:P2> := <var:P1> * <var:S> ; <var:P3> := <var:P2> * <var:S> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:6> ; <var:L> := <var:P3> <var:L> := <var:L> + <var:P2> <var:L> := <var:L> + <var:P1> <var:L> := <var:L> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:S> = <var:l> $ before executing our set of instructions it follows that we see $ <var:L> = <nat:6> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> ^ <nat:2> + <nat:7> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the program is shown using typical Hoare techniques . Advancing to the subsequent statements seen in our set of commands , \verb | { <var:S> = <var:l> } <var:P1> := <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> } | and \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> } <var:P2> := <var:P1> * <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> } | . This is known to be sound with the variable update law given in typical Hoare techniques . Moving forward to the upcoming bits of codein our list of commands , we see \verb | { <var:S> = <var:l> } <var:P1> := <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> } | , \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> } <var:P2> := <var:P1> * <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> } | , \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> } <var:P3> := <var:P2> * <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> } | , \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> } <var:P0> := <nat:4> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> \land <var:P0> = <nat:4> } | and \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> \land <var:P0> = <nat:4> } <var:P1> := <var:P1> * <nat:7> { <var:S> = <var:l> \land <var:P1> = <nat:7> * <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> \land <var:P0> = <nat:4> } | . This is deduced by the assignment law given in standard Hoare logic . Advancing to the next step , we have \verb | { <var:S> = <var:l> } <var:P1> := <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> } | , \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> } <var:P2> := <var:P1> * <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> } | and \verb | { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> } <var:P3> := <var:P2> * <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> \land <var:P2> = <var:l> ^ <nat:2> \land <var:P3> = <var:l> ^ <nat:3> } | . Following , we have \verb | { <var:S> = <var:l> } <var:P1> := <var:S> { <var:S> = <var:l> \land <var:P1> = <var:l> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:S> ; <var:P2> := <var:P1> * <var:S> ; <var:P3> := <var:P2> * <var:S> ; <var:P0> := <nat:4> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:6> ; <var:L> := <var:P3> <var:L> := <var:L> + <var:P2> <var:L> := <var:L> + <var:P1> <var:L> := <var:L> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:L> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <var:l> /\ <var:P2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <var:l> /\ <var:P2> = <var:l> ^ <nat:2> /\ <var:P3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <var:l> /\ <var:P2> = <var:l> ^ <nat:2> /\ <var:P3> = <var:l> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <nat:7> * <var:l> /\ <var:P2> = <var:l> ^ <nat:2> /\ <var:P3> = <var:l> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <nat:7> * <var:l> /\ <var:P2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:P3> = <var:l> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <nat:7> * <var:l> /\ <var:P2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:l> ^ <nat:3> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <nat:7> * <var:l> /\ <var:P2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:P0> = <nat:4> /\ <var:L> = <nat:6> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P1> = <nat:7> * <var:l> /\ <var:P0> = <nat:4> /\ <var:L> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:P0> = <nat:4> /\ <var:L> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:L> = <nat:6> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 