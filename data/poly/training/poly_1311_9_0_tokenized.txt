\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:1> ; <var:e1> := <nat:9> ; <var:e1> := <var:e1> * <var:M> ; <var:e2> := <nat:9> ; <var:e2> := <var:e2> * <var:M> ; <var:e2> := <var:e2> * <var:M> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given $ <var:u> $ --- it to be that $ <var:M> = <var:u> $ prior to the execution of the series of commands it holds that $ <var:j> = <nat:9> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is given through standard Hoare reasoning . Looking at the proceeding step found in the list of commands , we see the variable update statement \verb | <var:e0> := <nat:1> ; | . This moves the precondition $ \{ <var:M> = <var:u> \} $ to $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \} $ . Considering the following piece of code found in our series of instructions , we have the variable binding line defining $ <nat:9> $ toward $ <var:e1>$ . This command takes the precondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \} $ to the postcondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \} $ . Taking another step toward the proceeding piece of code seen in the set of instructions , we see the statement binding $ <var:e1> * <var:M> $ as $ <var:e1>$ . This advances the condition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \} $ toward the condition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \} $ . Moving on to the next step , we see the environment update command \verb | <var:e2> := <nat:9> ; | . This takes the precondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \} $ into $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \} $ . This is given through the assignment law given in Hoare reasoning . Taking another step toward the upcoming bit of code contained in our set of instructions , we have the variable binding statement yielding $ <var:e2> * <var:M> $ to $ <var:e2>$ . This command takes the condition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \} $ into $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \times <var:u> \} $ . This is sound with the assignment scheme defined by standard Hoare reasoning . Taking a look at the upcoming bit of code contained in our series of commands , the assignment statement \verb | <var:e2> := <var:e2> * <var:M> ; | . This moves the precondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \times <var:u> \} $ to the postcondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \times <var:u> ^ <nat:2> \} $ . After , we have the assignment line letting $ <var:e2> $ to $ <var:j>$ . This command moves $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:e2> = <nat:9> \times <var:u> ^ <nat:2> \} $ into the postcondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:j> = <nat:9> \times <var:u> ^ <nat:2> \} $ . This is ensured using the assignment law defined by standard Hoare techniques . Taking a look at the following command seen in the code , we see the variable binding line binding $ <var:j> + <var:e1> $ toward $ <var:j>$ . This redefines the precondition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:e1> = <nat:9> \times <var:u> \land <var:j> = <nat:9> \times <var:u> ^ <nat:2> \} $ as $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:j> = <nat:9> \times <var:u> ^ <nat:2> + <nat:9> \times <var:u> \} $ . This is shown with the assignment law defined in usual Hoare techniques . Going forward , we have the variable update code defining $ <var:j> + <var:e0$ as $ <var:j>$ . This forwards the condition $ \{ <var:M> = <var:u> \land <var:e0> = <nat:1> \land <var:j> = <nat:9> \times <var:u> ^ <nat:2> + <nat:9> \times <var:u> \} $ as $ \{ <var:M> = <var:u> \land <var:j> = <nat:9> \times <var:u> ^ <nat:2> + <nat:9> \times <var:u> + <nat:1> \} $ . This is given using the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:e1> := <nat:9> ; <var:e1> := <var:e1> * <var:M> ; <var:e2> := <nat:9> ; <var:e2> := <var:e2> * <var:M> ; <var:e2> := <var:e2> * <var:M> ; <var:j> := <var:e2> ; <var:j> := <var:j> + <var:e1> ; <var:j> := <var:j> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <def:poly> {{ <var:j> = <nat:9> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> * <var:u> /\ <var:e2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> * <var:u> /\ <var:e2> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> * <var:u> /\ <var:e2> = <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:e1> = <nat:9> * <var:u> /\ <var:j> = <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:e0> = <nat:1> /\ <var:j> = <nat:9> * <var:u> ^ <nat:2> + <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:j> = <nat:9> * <var:u> ^ <nat:2> + <nat:9> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 