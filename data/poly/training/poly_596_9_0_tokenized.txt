\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:6> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:g> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:g> ; <var:v2> := <var:v2> * <var:g> ; <var:C> := <var:v2> ; <var:C> := <var:C> + <var:v1> ; <var:C> := <var:C> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Allow $ <var:g> = <var:H> $ given some positive numbers $ <var:H> $ ahead of the execution of our set of commands , it follows that $ <var:C> = <nat:7> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:6> $ after set of commands has executed . \end{theorem} \begin{proof} The method of proof for the series of commands is done by standard Hoare techniques . Considering the subsequent piece of code contained in the code , we have the assignment line yielding $ <nat:6> $ toward $ <var:v0>$ . This redefines the precondition $ \{ <var:g> = <var:H> \} $ into $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \} $ . This is shown to be logically sound through the assignment scheme given in standard Hoare reasoning . Advancing to the next step , the binding statement binding $ <nat:3> $ as $ <var:v1>$ . This line redefines the condition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \} $ to the postcondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \} $ . Moving forward to the next line in our code , the environment update statement \verb | <var:v1> := <var:v1> * <var:g> ; | . This line redefines the condition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \} $ toward $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \} $ . Considering the subsequent line of code contained in our series of instructions , we see the binding command binding $ <nat:7> $ into $ <var:v2>$ . This moves $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \} $ to the postcondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \} $ . Moving on to the proceeding bit of code seen in the set of instructions , we have the variable binding code yielding $ <var:v2> * <var:g> $ into $ <var:v2>$ . This line advances $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \} $ toward the postcondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \cdot <var:H> \} $ . This is known to be sound through the assignment rule from typical Hoare techniques . Paying attention to the next line of code found in the list of instructions , we have the assignment command letting $ <var:v2> * <var:g> $ as $ <var:v2>$ . This command takes the condition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \cdot <var:H> \} $ into the condition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ . Moving on , the variable assignmet code defining $ <var:v2> $ into $ <var:C>$ . This code transfers the condition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:v2> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:C> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ . Moving forward , we have the variable assignmet line \verb | <var:C> := <var:C> + <var:v1> ; | . This forwards the precondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:v1> = <nat:3> \cdot <var:H> \land <var:C> = <nat:7> \cdot <var:H> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:C> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> \} $ . Now , we have the command giving $ <var:C> + <var:v0$ toward $ <var:C>$ . This redefines $ \{ <var:g> = <var:H> \land <var:v0> = <nat:6> \land <var:C> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> \} $ as $ \{ <var:g> = <var:H> \land <var:C> = <nat:7> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:6> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:g> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:g> ; <var:v2> := <var:v2> * <var:g> ; <var:C> := <var:v2> ; <var:C> := <var:C> + <var:v1> ; <var:C> := <var:C> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:g> = <var:H> }} <def:poly> {{ <var:C> = <nat:7> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:H> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:H> /\ <var:v2> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:H> /\ <var:v2> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:3> * <var:H> /\ <var:C> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:v0> = <nat:6> /\ <var:C> = <nat:7> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:C> = <nat:7> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 