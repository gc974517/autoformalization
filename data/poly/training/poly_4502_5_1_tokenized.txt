\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:N1> := <var:a> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:L> := <var:N1> <var:L> := <var:L> + <var:N0> \end{verbatim} Assume $ <var:a> = <var:K> $ before evaluating this list of commands , it follows that $ <var:L> = <nat:3> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:K> \} \\ <var:N1> := <var:a> ; \\ \{ <var:a> = <var:K> \land <var:N1> = <var:K> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:a> = <var:K> \land <var:N1> = <var:K> \land <var:N0> = <nat:3> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:a> = <var:K> \land <var:N1> = <nat:3> \times <var:K> \land <var:N0> = <nat:3> \} \\ <var:L> := <var:N1> \\ \{ <var:a> = <var:K> \land <var:N0> = <nat:3> \land <var:L> = <nat:3> \times <var:K> \} \\ <var:L> := <var:L> + <var:N0> \\ \{ <var:a> = <var:K> \land <var:L> = <nat:3> \times <var:K> + <nat:3> \} \end{eqnarray} The application of standard Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:a> = <var:K> }} <var:N1> := <var:a> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:3> ; <var:L> := <var:N1> <var:L> := <var:L> + <var:N0> {{ <var:L> = <nat:3> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:N1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:N1> = <var:K> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:N1> = <nat:3> * <var:K> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:N0> = <nat:3> /\ <var:L> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:L> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 