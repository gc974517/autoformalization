\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b1> := <var:N> ; <var:b2> := <var:b1> * <var:N> ; <var:b3> := <var:b2> * <var:N> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b3> := <var:b3> * <nat:4> ; <var:C> := <var:b3> <var:C> := <var:C> + <var:b1> <var:C> := <var:C> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:N> = <var:p> $ before running this segment of code it holds that we see $ <var:C> = <nat:4> \times <var:p> ^ <nat:3> + <nat:5> \times <var:p> + <nat:4> $ once list of instructions executes . \end{theorem} \begin{proof} Proving correctness for our program is shown with typical Hoare reasoning . Taking another step toward the upcoming lines of codefound in the series of commands , we see \begin{eqnarray} \{ <var:N> = <var:p> \} \, <var:b1> := <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \\ \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \, <var:b2> := <var:b1> * <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \} \end{eqnarray} Advancing to the following lines of codein the code segment , we have \begin{eqnarray} \{ <var:N> = <var:p> \} \, <var:b1> := <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \\ \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \, <var:b2> := <var:b1> * <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \} \\ \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \} \, <var:b3> := <var:b2> * <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \land <var:b3> = <var:p> ^ <nat:3> \} \\ \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \land <var:b3> = <var:p> ^ <nat:3> \} \, <var:b0> := <nat:4> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \land <var:b3> = <var:p> ^ <nat:3> \land <var:b0> = <nat:4> \} \\ \{ <var:N> = <var:p> \land <var:b1> = <var:p> \land <var:b2> = <var:p> ^ <nat:2> \land <var:b3> = <var:p> ^ <nat:3> \land <var:b0> = <nat:4> \} \, <var:b1> := <var:b1> * <nat:5> \, \{ <var:N> = <var:p> \land <var:b1> = <nat:5> \cdot <var:p> \land <var:b2> = <var:p> ^ <nat:2> \land <var:b3> = <var:p> ^ <nat:3> \land <var:b0> = <nat:4> \} \end{eqnarray} Immediately after , \begin{eqnarray} \{ <var:N> = <var:p> \} \, <var:b1> := <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \end{eqnarray} This is known to be sound through the environment update law found in usual Hoare logic . Jumping to the following step contained in the series of instructions , we have \begin{eqnarray} \{ <var:N> = <var:p> \} \, <var:b1> := <var:N> \, \{ <var:N> = <var:p> \land <var:b1> = <var:p> \} \end{eqnarray} This is sound through the environment update law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:N> ; <var:b2> := <var:b1> * <var:N> ; <var:b3> := <var:b2> * <var:N> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b3> := <var:b3> * <nat:4> ; <var:C> := <var:b3> <var:C> := <var:C> + <var:b1> <var:C> := <var:C> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:N> = <var:p> }} <def:poly> {{ <var:C> = <nat:4> * <var:p> ^ <nat:3> + <nat:5> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <var:p> /\ <var:b2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <var:p> /\ <var:b2> = <var:p> ^ <nat:2> /\ <var:b3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <var:p> /\ <var:b2> = <var:p> ^ <nat:2> /\ <var:b3> = <var:p> ^ <nat:3> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <nat:5> * <var:p> /\ <var:b2> = <var:p> ^ <nat:2> /\ <var:b3> = <var:p> ^ <nat:3> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <nat:5> * <var:p> /\ <var:b2> = <var:p> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:p> ^ <nat:3> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b1> = <nat:5> * <var:p> /\ <var:b2> = <var:p> ^ <nat:2> /\ <var:b0> = <nat:4> /\ <var:C> = <nat:4> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:b0> = <nat:4> /\ <var:C> = <nat:4> * <var:p> ^ <nat:3> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:C> = <nat:4> * <var:p> ^ <nat:3> + <nat:5> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 