\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:6> ; <var:f> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:B> = <var:o> $ ( given every $ <var:o> \in \mathbb{Z}^+ $ ) ahead of executing the set of instructions , it follows that we see $ <var:f> = <nat:6> $ when series of commands has exited . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:B> = <var:o> \} \\ <var:Y0> := <nat:6> ; \\ \{ <var:B> = <var:o> \land <var:Y0> = <nat:6> \} \\ <var:f> := <var:Y0> \\ \{ <var:B> = <var:o> \land <var:f> = <nat:6> \} \end{eqnarray} Hence , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:6> ; <var:f> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:B> = <var:o> }} <def:poly> {{ <var:f> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:o> /\ <var:f> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 