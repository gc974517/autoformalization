\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:m0> := <nat:4> ; <var:W> := <var:m0> \end{verbatim} Allowing ( given all $ <var:g> \in \mathbb{N} $ ) it to be that $ <var:y> = <var:g> $ before executing this list of instructions , it must be that we have $ <var:W> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:g> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:y> = <var:g> \land <var:m0> = <nat:4> \} \\ <var:W> := <var:m0> \\ \{ <var:y> = <var:g> \land <var:W> = <nat:4> \} \end{eqnarray} Using usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:y> = <var:g> }} <var:m0> := <nat:4> ; <var:W> := <var:m0> {{ <var:W> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:g> /\ <var:W> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 