\begin{document} \begin{theorem} We define the following program in \emph{Imp} : \begin{verbatim} <var:e1> := <var:T> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:7> ; <var:b> := <var:e1> <var:b> := <var:b> + <var:e0> \end{verbatim} Given that we have $ <var:T> = <var:L> $ prior to evaluating the set of commands it holds that $ <var:b> = <nat:7> * <var:L> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be demonstrated through Hoare techniques . Looking at the subsequent line seen in our program , the assignment code binding $ <var:T> $ toward $ <var:e1>$ . This line redefines the precondition $ \{ <var:T> = <var:L> \} $ toward $ \{ <var:T> = <var:L> \land <var:e1> = <var:L> \} $ . This is rigorously given with the assignment law given by standard Hoare techniques . Moving forward to the proceeding step seen in our list of instructions , we see the binding statement \verb | <var:e0> := <nat:3> ; | . This statement redefines the precondition $ \{ <var:T> = <var:L> \land <var:e1> = <var:L> \} $ as $ \{ <var:T> = <var:L> \land <var:e1> = <var:L> \land <var:e0> = <nat:3> \} $ . This is sound through the assignment scheme obtained from standard Hoare reasoning . Taking another step toward the proceeding command seen in our series of commands , the variable update command letting $ <var:e1> * <nat:7> $ toward $ <var:e1>$ . This line transfers the condition $ \{ <var:T> = <var:L> \land <var:e1> = <var:L> \land <var:e0> = <nat:3> \} $ to the postcondition $ \{ <var:T> = <var:L> \land <var:e1> = <nat:7> \times <var:L> \land <var:e0> = <nat:3> \} $ . Immediately following , we have the variable update code \verb | <var:b> := <var:e1> | . This statement takes the condition $ \{ <var:T> = <var:L> \land <var:e1> = <nat:7> \times <var:L> \land <var:e0> = <nat:3> \} $ as the condition $ \{ <var:T> = <var:L> \land <var:e0> = <nat:3> \land <var:b> = <nat:7> \times <var:L> \} $ . Next , we see the assignment code letting $ <var:b> + <var:e0$ toward $ <var:b>$ . This line transfers $ \{ <var:T> = <var:L> \land <var:e0> = <nat:3> \land <var:b> = <nat:7> \times <var:L> \} $ as the postcondition $ \{ <var:T> = <var:L> \land <var:b> = <nat:7> \times <var:L> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:T> = <var:L> }} <var:e1> := <var:T> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:7> ; <var:b> := <var:e1> <var:b> := <var:b> + <var:e0> {{ <var:b> = <nat:7> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:e1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:e1> = <var:L> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:e1> = <nat:7> * <var:L> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:e0> = <nat:3> /\ <var:b> = <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:L> /\ <var:b> = <nat:7> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 