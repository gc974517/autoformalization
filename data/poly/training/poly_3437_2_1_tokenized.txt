\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:8> ; <var:i> := <var:k0> \end{verbatim} Assuming it to hold that $ <var:q> = <var:S> $ before the evaluation of the code segment then we see $ <var:i> = <nat:8> $ once program is done executing . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is evident by typical Hoare techniques . Considering the following line contained in our segment of code , we have the variable update code \verb | <var:k0> := <nat:8> ; | . This forwards the condition $ \{ <var:q> = <var:S> \} $ as $ \{ <var:q> = <var:S> \land <var:k0> = <nat:8> \} $ . Stepping forward , we have the variable update command \verb | <var:i> := <var:k0> | . This advances the condition $ \{ <var:q> = <var:S> \land <var:k0> = <nat:8> \} $ toward $ \{ <var:q> = <var:S> \land <var:i> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:q> = <var:S> }} <var:k0> := <nat:8> ; <var:i> := <var:k0> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:S> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 