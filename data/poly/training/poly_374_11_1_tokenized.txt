\begin{document} \begin{theorem} Consider a code segment such that \begin{verbatim} <var:w1> := <var:L> ; <var:w2> := <var:w1> * <var:L> ; <var:w3> := <var:w2> * <var:L> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:5> ; <var:w3> := <var:w3> * <nat:9> ; <var:m> := <var:w3> <var:m> := <var:m> + <var:w2> <var:m> := <var:m> + <var:w1> <var:m> := <var:m> + <var:w0> \end{verbatim} Allow $ <var:L> = <var:X> $ ahead of the evaluation of the list of instructions , it must be that we have $ <var:m> = <nat:9> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be done using Hoare logic . Shifting focus toward the next step seen in the series of commands , we have the statement \verb | <var:w1> := <var:L> ; | . This takes the precondition $ \{ <var:L> = <var:X> \} $ as the postcondition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \} $ . This is given through the assignment inference rule defined by standard Hoare techniques . Stepping forward , we have the variable assignmet command \verb | <var:w2> := <var:w1> * <var:L> ; | . This takes the precondition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \} $ to $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \} $ . Taking another step toward the proceeding statement contained in the set of commands , the line assigning $ <var:w2> * <var:L> $ as $ <var:w3>$ . This code moves the precondition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \} $ toward the condition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \} $ . This is deduced through the assignment rule given in usual Hoare logic . Advancing to the subsequent statement contained in our series of instructions , the variable assignmet statement defining $ <nat:6> $ to $ <var:w0>$ . This code forwards the condition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \} $ toward $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ . This is ensured with the assignment law given by usual Hoare reasoning . Following , the statement \verb | <var:w1> := <var:w1> * <nat:2> ; | . This moves the condition $ \{ <var:L> = <var:X> \land <var:w1> = <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ into the postcondition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ . This is ensured through the assignment inference rule given in usual Hoare logic . After , the assignment statement binding $ <var:w2> * <nat:5> $ as $ <var:w2>$ . This line redefines $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ into $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ . After , the command \verb | <var:w3> := <var:w3> * <nat:9> ; | . This command advances the condition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w3> = <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ as the postcondition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w3> = <nat:9> \cdot <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ . Honing in on the next piece of code seen in our code segment , the variable assignmet code defining $ <var:w3$ into $ <var:m>$ . This line takes $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w3> = <nat:9> \cdot <var:X> ^ <nat:3> \land <var:w0> = <nat:6> \} $ into the postcondition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> \} $ . Advancing , we have the environment update line yielding $ <var:m> + <var:w2$ as $ <var:m>$ . This transfers $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> \} $ to the postcondition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> \} $ . This is sound through the assignment inference rule found in typical Hoare logic . Honing in on the subsequent step in our code segment , we have the variable binding code binding $ <var:m> + <var:w1$ to $ <var:m>$ . This transfers the condition $ \{ <var:L> = <var:X> \land <var:w1> = <nat:2> \cdot <var:X> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:X> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> \} $ . This is rigorously given through the assignment rule given by standard Hoare reasoning . Advancing , we have the variable binding code \verb | <var:m> := <var:m> + <var:w0> | . This code transfers the precondition $ \{ <var:L> = <var:X> \land <var:w0> = <nat:6> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> \} $ into the condition $ \{ <var:L> = <var:X> \land <var:m> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:L> = <var:X> }} <var:w1> := <var:L> ; <var:w2> := <var:w1> * <var:L> ; <var:w3> := <var:w2> * <var:L> ; <var:w0> := <nat:6> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:5> ; <var:w3> := <var:w3> * <nat:9> ; <var:m> := <var:w3> <var:m> := <var:m> + <var:w2> <var:m> := <var:m> + <var:w1> <var:m> := <var:m> + <var:w0> {{ <var:m> = <nat:9> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <nat:2> * <var:X> /\ <var:w2> = <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <nat:2> * <var:X> /\ <var:w2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:w3> = <var:X> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <nat:2> * <var:X> /\ <var:w2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:w3> = <nat:9> * <var:X> ^ <nat:3> /\ <var:w0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <nat:2> * <var:X> /\ <var:w2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:w0> = <nat:6> /\ <var:m> = <nat:9> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w1> = <nat:2> * <var:X> /\ <var:w0> = <nat:6> /\ <var:m> = <nat:9> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:w0> = <nat:6> /\ <var:m> = <nat:9> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:m> = <nat:9> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 