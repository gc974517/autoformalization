\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:s> ; <var:d2> := <var:d1> * <var:s> ; <var:d3> := <var:d2> * <var:s> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:1> ; <var:W> := <var:d3> <var:W> := <var:W> + <var:d2> <var:W> := <var:W> + <var:d1> <var:W> := <var:W> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Given that $ <var:s> = <var:B> $ taking positive integer coefficients $ <var:B> $ prior to executing the segment of code , it must be that $ <var:W> = <nat:1> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is evident through typical Hoare reasoning . Now , we have the variable binding statement \verb | <var:d1> := <var:s> ; | . This statement transfers $ \{ <var:s> = <var:B> \} $ into the postcondition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \} $ . Moving forward to the next step , we have the environment update command \verb | <var:d2> := <var:d1> * <var:s> ; | . This command forwards the precondition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \} $ as the condition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \} $ . Jumping to the next step seen in our set of commands , we have the environment update line \verb | <var:d3> := <var:d2> * <var:s> ; | . This moves $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \} $ to the condition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \} $ . This is rigorously given with the assignment scheme found in typical Hoare reasoning . Advancing on , the variable binding statement \verb | <var:d0> := <nat:1> ; | . This redefines the condition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \} $ into the postcondition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . Paying attention to the proceeding line of code found in the series of commands , we see the variable assignmet code \verb | <var:d1> := <var:d1> * <nat:2> ; | . This forwards the condition $ \{ <var:s> = <var:B> \land <var:d1> = <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ as $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is ensured by the assignment inference rule from typical Hoare techniques . Moving forward to the next step , we have the variable assignmet statement \verb | <var:d2> := <var:d2> * <nat:3> ; | . This command advances the condition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ to the postcondition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is shown with the assignment rule given by typical Hoare reasoning . Looking at the upcoming piece of code found in our code segment , we have the binding line \verb | <var:d3> := <var:d3> * <nat:1> ; | . This takes the condition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d3> = <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ into the postcondition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d3> = <nat:1> * <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ . This is shown by the assignment rule in typical Hoare reasoning . Now , we have the binding code giving $ <var:d3$ into $ <var:W>$ . This command advances $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d3> = <nat:1> * <var:B> ^ <nat:3> \land <var:d0> = <nat:1> \} $ toward the condition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> \} $ . Going to the next step , we see the statement \verb | <var:W> := <var:W> + <var:d2> | . This advances the condition $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d2> = <nat:3> * <var:B> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> \} $ as $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> \} $ . Advancing , we have the assignment code letting $ <var:W> + <var:d1$ toward $ <var:W>$ . This redefines $ \{ <var:s> = <var:B> \land <var:d1> = <nat:2> * <var:B> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> \} $ toward $ \{ <var:s> = <var:B> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} $ . Paying attention to the following bit of code contained in our series of instructions , the binding line \verb | <var:W> := <var:W> + <var:d0> | . This statement moves the condition $ \{ <var:s> = <var:B> \land <var:d0> = <nat:1> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} $ into the postcondition $ \{ <var:s> = <var:B> \land <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:s> ; <var:d2> := <var:d1> * <var:s> ; <var:d3> := <var:d2> * <var:s> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:3> ; <var:d3> := <var:d3> * <nat:1> ; <var:W> := <var:d3> <var:W> := <var:W> + <var:d2> <var:W> := <var:W> + <var:d1> <var:W> := <var:W> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:s> = <var:B> }} <def:poly> {{ <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <var:B> /\ <var:d2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <var:B> /\ <var:d2> = <var:B> ^ <nat:2> /\ <var:d3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <var:B> /\ <var:d2> = <var:B> ^ <nat:2> /\ <var:d3> = <var:B> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <var:B> ^ <nat:2> /\ <var:d3> = <var:B> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:d3> = <var:B> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:d3> = <nat:1> * <var:B> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:d0> = <nat:1> /\ <var:W> = <nat:1> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d1> = <nat:2> * <var:B> /\ <var:d0> = <nat:1> /\ <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:d0> = <nat:1> /\ <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:W> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 