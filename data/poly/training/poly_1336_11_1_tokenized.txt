\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:f> ; <var:Y2> := <var:Y1> * <var:f> ; <var:Y3> := <var:Y2> * <var:f> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:6> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:v> := <var:Y3> <var:v> := <var:v> + <var:Y2> <var:v> := <var:v> + <var:Y1> <var:v> := <var:v> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Assume $ <var:f> = <var:n> $ ahead of executing this set of commands , then we see $ <var:v> = <nat:8> \times <var:n> ^ <nat:3> + <nat:6> \times <var:n> ^ <nat:2> + <nat:7> \times <var:n> + <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:n> \} \\ <var:Y1> := <var:f> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <var:n> \} \\ <var:Y2> := <var:Y1> * <var:f> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <var:n> \land <var:Y2> = <var:n> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:f> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <var:n> \land <var:Y2> = <var:n> ^ <nat:2> \land <var:Y3> = <var:n> ^ <nat:3> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <var:n> \land <var:Y2> = <var:n> ^ <nat:2> \land <var:Y3> = <var:n> ^ <nat:3> \land <var:Y0> = <nat:7> \} \\ <var:Y1> := <var:Y1> * <nat:7> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <nat:7> \times <var:n> \land <var:Y2> = <var:n> ^ <nat:2> \land <var:Y3> = <var:n> ^ <nat:3> \land <var:Y0> = <nat:7> \} \\ <var:Y2> := <var:Y2> * <nat:6> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <nat:7> \times <var:n> \land <var:Y2> = <nat:6> \times <var:n> ^ <nat:2> \land <var:Y3> = <var:n> ^ <nat:3> \land <var:Y0> = <nat:7> \} \\ <var:Y3> := <var:Y3> * <nat:8> ; \\ \{ <var:f> = <var:n> \land <var:Y1> = <nat:7> \times <var:n> \land <var:Y2> = <nat:6> \times <var:n> ^ <nat:2> \land <var:Y3> = <nat:8> \times <var:n> ^ <nat:3> \land <var:Y0> = <nat:7> \} \\ <var:v> := <var:Y3> \\ \{ <var:f> = <var:n> \land <var:Y1> = <nat:7> \times <var:n> \land <var:Y2> = <nat:6> \times <var:n> ^ <nat:2> \land <var:Y0> = <nat:7> \land <var:v> = <nat:8> \times <var:n> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:Y2> \\ \{ <var:f> = <var:n> \land <var:Y1> = <nat:7> \times <var:n> \land <var:Y0> = <nat:7> \land <var:v> = <nat:8> \times <var:n> ^ <nat:3> + <nat:6> \times <var:n> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:Y1> \\ \{ <var:f> = <var:n> \land <var:Y0> = <nat:7> \land <var:v> = <nat:8> \times <var:n> ^ <nat:3> + <nat:6> \times <var:n> ^ <nat:2> + <nat:7> \times <var:n> \} \\ <var:v> := <var:v> + <var:Y0> \\ \{ <var:f> = <var:n> \land <var:v> = <nat:8> \times <var:n> ^ <nat:3> + <nat:6> \times <var:n> ^ <nat:2> + <nat:7> \times <var:n> + <nat:7> \} \end{eqnarray} As a consequence , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y1> := <var:f> ; <var:Y2> := <var:Y1> * <var:f> ; <var:Y3> := <var:Y2> * <var:f> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:7> ; <var:Y2> := <var:Y2> * <nat:6> ; <var:Y3> := <var:Y3> * <nat:8> ; <var:v> := <var:Y3> <var:v> := <var:v> + <var:Y2> <var:v> := <var:v> + <var:Y1> <var:v> := <var:v> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:f> = <var:n> }} <def:poly> {{ <var:v> = <nat:8> * <var:n> ^ <nat:3> + <nat:6> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <var:n> /\ <var:Y2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <var:n> /\ <var:Y2> = <var:n> ^ <nat:2> /\ <var:Y3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <var:n> /\ <var:Y2> = <var:n> ^ <nat:2> /\ <var:Y3> = <var:n> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <nat:7> * <var:n> /\ <var:Y2> = <var:n> ^ <nat:2> /\ <var:Y3> = <var:n> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <nat:7> * <var:n> /\ <var:Y2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:Y3> = <var:n> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <nat:7> * <var:n> /\ <var:Y2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:Y3> = <nat:8> * <var:n> ^ <nat:3> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <nat:7> * <var:n> /\ <var:Y2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:Y0> = <nat:7> /\ <var:v> = <nat:8> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y1> = <nat:7> * <var:n> /\ <var:Y0> = <nat:7> /\ <var:v> = <nat:8> * <var:n> ^ <nat:3> + <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:Y0> = <nat:7> /\ <var:v> = <nat:8> * <var:n> ^ <nat:3> + <nat:6> * <var:n> ^ <nat:2> + <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:n> /\ <var:v> = <nat:8> * <var:n> ^ <nat:3> + <nat:6> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 