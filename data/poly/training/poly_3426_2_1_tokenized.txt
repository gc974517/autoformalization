\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:4> ; <var:D> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Allow that we have $ <var:a> = <var:o> $ before running this code segment then we have $ <var:D> = <nat:4> $ once set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:o> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:a> = <var:o> \land <var:y0> = <nat:4> \} \\ <var:D> := <var:y0> \\ \{ <var:a> = <var:o> \land <var:D> = <nat:4> \} \end{eqnarray} The application of typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:D> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:a> = <var:o> }} <def:poly> {{ <var:D> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:D> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 