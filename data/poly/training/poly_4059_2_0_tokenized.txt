\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:3> ; <var:s> := <var:H0> \end{verbatim} Given that we have $ <var:W> = <var:V> $ prior to the execution of the program , it follows that we see $ <var:s> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be shown with standard Hoare reasoning . Moving on to the proceeding bit of code in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:V> \} & <var:H0> := <nat:3> & \{ <var:W> = <var:V> \land <var:H0> = <nat:3> \} \end{tabular} Moving on , \[ \begin{tabular} {rcl} \{ <var:W> = <var:V> \} & <var:H0> := <nat:3> & \{ <var:W> = <var:V> \land <var:H0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <var:H0> := <nat:3> ; <var:s> := <var:H0> {{ <var:s> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:s> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 