\begin{document} \begin{theorem} Take a set of instructions as \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:x> ; <var:K> := <var:S1> ; <var:K> := <var:K> + <var:S0> \end{verbatim} Assume that we have $ <var:x> = <var:Z> $ ahead of the evaluation of the list of instructions , it holds that we have $ <var:K> = <nat:7> * <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:Z> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:x> = <var:Z> \land <var:S0> = <nat:9> \} \\ <var:S1> := <nat:7> ; \\ \{ <var:x> = <var:Z> \land <var:S0> = <nat:9> \land <var:S1> = <nat:7> \} \end{eqnarray} Advancing evaluating this list of instructions gives us : \begin{eqnarray} <var:S1> := <var:S1> * <var:x> ; \\ \{ <var:x> = <var:Z> \land <var:S0> = <nat:9> \land <var:S1> = <nat:7> \cdot <var:Z> \} \\ <var:K> := <var:S1> ; \\ \{ <var:x> = <var:Z> \land <var:S0> = <nat:9> \land <var:K> = <nat:7> \cdot <var:Z> \} \\ <var:K> := <var:K> + <var:S0> \\ \{ <var:x> = <var:Z> \land <var:K> = <nat:7> \cdot <var:Z> + <nat:9> \} \end{eqnarray} Applying Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:x> = <var:Z> }} <var:S0> := <nat:9> ; <var:S1> := <nat:7> ; <var:S1> := <var:S1> * <var:x> ; <var:K> := <var:S1> ; <var:K> := <var:K> + <var:S0> {{ <var:K> = <nat:7> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:S0> = <nat:9> /\ <var:K> = <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Z> /\ <var:K> = <nat:7> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 