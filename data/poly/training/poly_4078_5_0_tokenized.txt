\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:k> ; <var:n> := <var:Y1> ; <var:n> := <var:n> + <var:Y0> \end{verbatim} Assume it to be that $ <var:k> = <var:S> $ prior to executing the set of commands it must be that $ <var:n> = <nat:1> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program can be given with standard Hoare reasoning . Stepping forward , we see the line \verb | <var:Y0> := <nat:3> ; | . This moves the condition $ \{ <var:k> = <var:S> \} $ into the condition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \} $ . Moving on to the proceeding statement seen in our code segment , we see the variable assignmet code \verb | <var:Y1> := <nat:1> ; | . This advances the condition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \} $ into the condition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:1> \} $ . Moving on , the variable assignmet command \verb | <var:Y1> := <var:Y1> * <var:k> ; | . This forwards the precondition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:1> \} $ as the condition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:1> * <var:S> \} $ . This is given using the assignment law of standard Hoare techniques . Taking a look at the following line found in the series of commands , the environment update statement defining $ <var:Y1> $ into $ <var:n>$ . This moves $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:1> * <var:S> \} $ to the condition $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:n> = <nat:1> * <var:S> \} $ . Keeping momentum , we have the variable binding command \verb | <var:n> := <var:n> + <var:Y0> | . This command advances $ \{ <var:k> = <var:S> \land <var:Y0> = <nat:3> \land <var:n> = <nat:1> * <var:S> \} $ toward $ \{ <var:k> = <var:S> \land <var:n> = <nat:1> * <var:S> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:k> = <var:S> }} <var:Y0> := <nat:3> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:k> ; <var:n> := <var:Y1> ; <var:n> := <var:n> + <var:Y0> {{ <var:n> = <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Y0> = <nat:3> /\ <var:n> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:n> = <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 