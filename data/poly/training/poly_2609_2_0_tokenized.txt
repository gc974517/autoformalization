\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:2> ; <var:v> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:r> = <var:S> $ ahead of the evaluation of the segment of code then we have $ <var:v> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:r> = <var:S> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:r> = <var:S> \land <var:g0> = <nat:2> \} \\ <var:v> := <var:g0> \\ \{ <var:r> = <var:S> \land <var:v> = <nat:2> \} \end{eqnarray} Hence , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:v> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:r> = <var:S> }} <def:poly> {{ <var:v> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:v> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 