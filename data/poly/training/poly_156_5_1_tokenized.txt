\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:p> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:8> ; <var:r> := <var:m1> <var:r> := <var:r> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:p> = <var:F> $ before executing this code , it must be that we see $ <var:r> = <nat:8> \times <var:F> + <nat:7> $ once segment of code finishes . \end{theorem} \begin{proof} The argument for this program is given using Hoare reasoning . Advancing to the upcoming bits of codeseen in our code segment , \verb | { <var:p> = <var:F> } <var:m1> := <var:p> { <var:p> = <var:F> \land <var:m1> = <var:F> } | , \verb | { <var:p> = <var:F> \land <var:m1> = <var:F> } <var:m0> := <nat:7> { <var:p> = <var:F> \land <var:m1> = <var:F> \land <var:m0> = <nat:7> } | , \verb | { <var:p> = <var:F> \land <var:m1> = <var:F> \land <var:m0> = <nat:7> } <var:m1> := <var:m1> * <nat:8> { <var:p> = <var:F> \land <var:m1> = <nat:8> \cdot <var:F> \land <var:m0> = <nat:7> } | , \verb | { <var:p> = <var:F> \land <var:m1> = <nat:8> \cdot <var:F> \land <var:m0> = <nat:7> } <var:r> := <var:m1{ <var:p> = <var:F> \land <var:m0> = <nat:7> \land <var:r> = <nat:8> \cdot <var:F> } | and \verb | { <var:p> = <var:F> \land <var:m0> = <nat:7> \land <var:r> = <nat:8> \cdot <var:F> } <var:r> := <var:r> + <var:m0{ <var:p> = <var:F> \land <var:r> = <nat:8> \cdot <var:F> + <nat:7> } | . This is sound by the law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:p> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:8> ; <var:r> := <var:m1> <var:r> := <var:r> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:p> = <var:F> }} <def:poly> {{ <var:r> = <nat:8> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:m1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:m1> = <var:F> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:m1> = <nat:8> * <var:F> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:m0> = <nat:7> /\ <var:r> = <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:F> /\ <var:r> = <nat:8> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 