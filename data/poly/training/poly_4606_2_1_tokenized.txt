\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:4> ; <var:o> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given ( given all $ <var:l> \in \mathbb{N} $ ) it to be that $ <var:v> = <var:l> $ prior to the execution of our program it follows that we have $ <var:o> = <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program can be seen with usual Hoare techniques . Taking a look at the proceeding piece of code contained in the set of commands , \[ \begin{tabular} {rcl} \{ <var:v> = <var:l> \} & <var:e0> := <nat:4> & \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \} \end{tabular} Considering the upcoming line in the code , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:l> \} & <var:e0> := <nat:4> & \{ <var:v> = <var:l> \land <var:e0> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:4> ; <var:o> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 