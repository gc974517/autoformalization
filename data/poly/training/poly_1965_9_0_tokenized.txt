\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:w> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:w> ; <var:J2> := <var:J2> * <var:w> ; <var:l> := <var:J2> ; <var:l> := <var:l> + <var:J1> ; <var:l> := <var:l> + <var:J0> \end{verbatim} Allow that we have $ <var:w> = <var:O> $ --- given positive integers $ <var:O> $ --- before evaluating our set of instructions , it holds that we have $ <var:l> = <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> $ . \end{theorem} \begin{proof} See that the following decorated segment of code . \begin{eqnarray} \{ <var:w> = <var:O> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \} \\ <var:J1> := <nat:1> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \} \\ <var:J1> := <var:J1> * <var:w> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \times <var:O> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \times <var:O> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:w> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \times <var:O> \land <var:J2> = <nat:2> \times <var:O> \} \\ <var:J2> := <var:J2> * <var:w> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \times <var:O> \land <var:J2> = <nat:2> \times <var:O> ^ <nat:2> \} \end{eqnarray} Furthering running the segment of code returns : \begin{eqnarray} <var:l> := <var:J2> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:J1> = <nat:1> \times <var:O> \land <var:l> = <nat:2> \times <var:O> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:J1> ; \\ \{ <var:w> = <var:O> \land <var:J0> = <nat:4> \land <var:l> = <nat:2> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> \} \\ <var:l> := <var:l> + <var:J0> \\ \{ <var:w> = <var:O> \land <var:l> = <nat:2> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:w> = <var:O> }} <var:J0> := <nat:4> ; <var:J1> := <nat:1> ; <var:J1> := <var:J1> * <var:w> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:w> ; <var:J2> := <var:J2> * <var:w> ; <var:l> := <var:J2> ; <var:l> := <var:l> + <var:J1> ; <var:l> := <var:l> + <var:J0> {{ <var:l> = <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> * <var:O> /\ <var:J2> = <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:1> * <var:O> /\ <var:l> = <nat:2> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:J0> = <nat:4> /\ <var:l> = <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:O> /\ <var:l> = <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 