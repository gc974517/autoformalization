\begin{document} \begin{theorem} Define a program as follows \begin{verbatim} <var:v0> := <nat:6> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:x> ; <var:D> := <var:v1> ; <var:D> := <var:D> + <var:v0> \end{verbatim} Assuming that we have $ <var:x> = <var:O> $ before executing our list of instructions , it must be that we have $ <var:D> = <nat:2> \times <var:O> + <nat:6> $ once series of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for this list of commands is shown with the following decorated series of commands . \begin{eqnarray} \{ <var:x> = <var:O> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:x> = <var:O> \land <var:v0> = <nat:6> \} \\ <var:v1> := <nat:2> ; \\ \{ <var:x> = <var:O> \land <var:v0> = <nat:6> \land <var:v1> = <nat:2> \} \\ <var:v1> := <var:v1> * <var:x> ; \\ \{ <var:x> = <var:O> \land <var:v0> = <nat:6> \land <var:v1> = <nat:2> * <var:O> \} \\ <var:D> := <var:v1> ; \\ \{ <var:x> = <var:O> \land <var:v0> = <nat:6> \land <var:D> = <nat:2> * <var:O> \} \\ <var:D> := <var:D> + <var:v0> \\ \{ <var:x> = <var:O> \land <var:D> = <nat:2> * <var:O> + <nat:6> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:x> = <var:O> }} <var:v0> := <nat:6> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:x> ; <var:D> := <var:v1> ; <var:D> := <var:D> + <var:v0> {{ <var:D> = <nat:2> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:v0> = <nat:6> /\ <var:v1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:v0> = <nat:6> /\ <var:D> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:O> /\ <var:D> = <nat:2> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 