\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:V1> := <var:o> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:8> ; <var:s> := <var:V1> <var:s> := <var:s> + <var:V0> \end{verbatim} Given that $ <var:o> = <var:j> $ given any $ <var:j> \in \mathbb{Z}^+ $ ahead of running the segment of code , it follows that $ <var:s> = <nat:8> \cdot <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:o> = <var:j> \} \\ <var:V1> := <var:o> ; \\ \{ <var:o> = <var:j> \land <var:V1> = <var:j> \} \\ <var:V0> := <nat:5> ; \\ \{ <var:o> = <var:j> \land <var:V1> = <var:j> \land <var:V0> = <nat:5> \} \\ <var:V1> := <var:V1> * <nat:8> ; \\ \{ <var:o> = <var:j> \land <var:V1> = <nat:8> \cdot <var:j> \land <var:V0> = <nat:5> \} \end{eqnarray} Continuing executing this code gives : \begin{eqnarray} <var:s> := <var:V1> \\ \{ <var:o> = <var:j> \land <var:V0> = <nat:5> \land <var:s> = <nat:8> \cdot <var:j> \} \\ <var:s> := <var:s> + <var:V0> \\ \{ <var:o> = <var:j> \land <var:s> = <nat:8> \cdot <var:j> + <nat:5> \} \end{eqnarray} Therefore , this series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:o> = <var:j> }} <var:V1> := <var:o> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:8> ; <var:s> := <var:V1> <var:s> := <var:s> + <var:V0> {{ <var:s> = <nat:8> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:V1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:V1> = <var:j> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:V1> = <nat:8> * <var:j> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:V0> = <nat:5> /\ <var:s> = <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:j> /\ <var:s> = <nat:8> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 