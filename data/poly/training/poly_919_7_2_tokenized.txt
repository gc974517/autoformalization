\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <nat:1> + <var:n> * <var:i> ; <var:n> := <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:4> + <var:n> * <var:i> \end{verbatim} Given it to hold that $ <var:i> = <var:h> $ before interpreting the code segment , it holds that $ <var:n> = <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this list of commands can be accomplished by the below decorated series of commands . \begin{eqnarray} \{ <var:i> = <var:h> \} \\ <var:n> := <nat:4> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \} \\ <var:n> := <nat:1> + <var:n> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> + <nat:1> \} \\ <var:n> := <var:n> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> ^ <nat:2> + <nat:1> \times <var:h> + \} \\ <var:n> := <nat:2> + <var:n> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:2> \} \\ <var:n> := <nat:2> + <var:n> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> ^ <nat:4> + <nat:1> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> + <nat:2> \} \\ <var:n> := <nat:2> + <var:n> * <var:i> ; \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> ^ <nat:5> + <nat:1> \times <var:h> ^ <nat:4> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:2> \} \\ <var:n> := <nat:4> + <var:n> * <var:i> \\ \{ <var:i> = <var:h> \land <var:n> = <nat:4> \times <var:h> ^ <nat:6> + <nat:1> \times <var:h> ^ <nat:5> + <nat:2> \times <var:h> ^ <nat:3> + <nat:2> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:i> = <var:h> }} <var:n> := <nat:4> ; <var:n> := <nat:1> + <var:n> * <var:i> ; <var:n> := <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:2> + <var:n> * <var:i> ; <var:n> := <nat:4> + <var:n> * <var:i> {{ <var:n> = <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:h> /\ <var:n> = <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 