\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:K0> := <nat:3> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:r> := <var:K2> ; <var:r> := <var:r> + <var:K1> ; <var:r> := <var:r> + <var:K0> \end{verbatim} Given that we have $ <var:U> = <var:A> $ before executing this list of instructions then we have $ <var:r> = <nat:8> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> $ once program has finished . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be shown by typical Hoare logic . Going to the next step , we see the variable binding command \verb | <var:K0> := <nat:3> ; | . This transfers the precondition $ \{ <var:U> = <var:A> \} $ to the postcondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \} $ . This is deduced with the assignment scheme given by standard Hoare logic . Jumping to the following statement seen in the code , the line \verb | <var:K1> := <nat:6> ; | . This takes the precondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \} $ to $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \} $ . This is rigorously given by the assignment scheme defined by Hoare techniques . Advancing on , we see the assignment code yielding $ <var:K1> * <var:U> $ as $ <var:K1>$ . This moves the condition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \} $ to $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \} $ . Moving forward , we see the environment update statement \verb | <var:K2> := <nat:8> ; | . This takes the condition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \} $ as $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \} $ . This is known to be sound by the assignment rule of standard Hoare techniques . Moving on to the subsequent step found in our set of instructions , the assignment statement defining $ <var:K2> * <var:U> $ to $ <var:K2>$ . This line redefines the precondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \} $ toward the postcondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \cdot <var:A> \} $ . This is shown to be logically sound using the assignment rule from typical Hoare reasoning . Advancing to the next step , we have the variable assignmet statement \verb | <var:K2> := <var:K2> * <var:U> ; | . This command takes the condition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \cdot <var:A> \} $ toward the postcondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ . Considering the proceeding line of code found in our list of instructions , we have the assignment statement \verb | <var:r> := <var:K2> ; | . This transfers $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:K2> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:r> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ . This is ensured with the assignment inference rule defined by usual Hoare techniques . Shifting focus toward the upcoming piece of code in the program , we have the binding statement binding $ <var:r> + <var:K1> $ as $ <var:r>$ . This advances the condition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:K1> = <nat:6> \cdot <var:A> \land <var:r> = <nat:8> \cdot <var:A> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:r> = <nat:8> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> \} $ . This is sound through the assignment scheme defined in Hoare techniques . Stepping through , we have the code \verb | <var:r> := <var:r> + <var:K0> | . This moves the condition $ \{ <var:U> = <var:A> \land <var:K0> = <nat:3> \land <var:r> = <nat:8> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> \} $ toward the postcondition $ \{ <var:U> = <var:A> \land <var:r> = <nat:8> \cdot <var:A> ^ <nat:2> + <nat:6> \cdot <var:A> + <nat:3> \} $ . This is sound through the assignment inference rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:U> = <var:A> }} <var:K0> := <nat:3> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:U> ; <var:K2> := <nat:8> ; <var:K2> := <var:K2> * <var:U> ; <var:K2> := <var:K2> * <var:U> ; <var:r> := <var:K2> ; <var:r> := <var:r> + <var:K1> ; <var:r> := <var:r> + <var:K0> {{ <var:r> = <nat:8> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> * <var:A> /\ <var:K2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> * <var:A> /\ <var:K2> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> * <var:A> /\ <var:K2> = <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:K1> = <nat:6> * <var:A> /\ <var:r> = <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:K0> = <nat:3> /\ <var:r> = <nat:8> * <var:A> ^ <nat:2> + <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:A> /\ <var:r> = <nat:8> * <var:A> ^ <nat:2> + <nat:6> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 