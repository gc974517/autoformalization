\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as \begin{verbatim} <var:p0> := <nat:5> ; <var:S> := <var:p0> \end{verbatim} Allow it to be that $ <var:L> = <var:Y> $ before running the program it follows that $ <var:S> = <nat:5> $ after code segment is done . \end{theorem} \begin{proof} The method of proof for our list of instructions is given with typical Hoare logic . After , the variable update line \verb | <var:p0> := <nat:5> ; | . This redefines the precondition $ \{ <var:L> = <var:Y> \} $ as the condition $ \{ <var:L> = <var:Y> \land <var:p0> = <nat:5> \} $ . This is known to be sound with the assignment scheme in typical Hoare techniques . Moving on to the next step , we see the code \verb | <var:S> := <var:p0> | . This redefines the condition $ \{ <var:L> = <var:Y> \land <var:p0> = <nat:5> \} $ into the condition $ \{ <var:L> = <var:Y> \land <var:S> = <nat:5> \} $ . This is shown to be logically sound by the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:L> = <var:Y> }} <var:p0> := <nat:5> ; <var:S> := <var:p0> {{ <var:S> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:S> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 