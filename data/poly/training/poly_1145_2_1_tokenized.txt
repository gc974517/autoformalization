\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:9> ; <var:N> := <var:F0> \end{verbatim} Assume it to hold that $ <var:z> = <var:i> $ prior to evaluating this series of instructions it must be that we see $ <var:N> = <nat:9> $ when series of instructions terminates . \end{theorem} \begin{proof} The course of logic for the code segment can be seen by usual Hoare techniques . Advancing , we have \begin{verbatim} { <var:z> = <var:i> } <var:F0> := <nat:9> { <var:z> = <var:i> \land <var:F0> = <nat:9> } { <var:z> = <var:i> \land <var:F0> = <nat:9> } <var:N> := <var:F0{ <var:z> = <var:i> \land <var:N> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:z> = <var:i> }} <var:F0> := <nat:9> ; <var:N> := <var:F0> {{ <var:N> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:N> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 