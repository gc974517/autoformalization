\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:w> ; <var:v2> := <nat:3> ; <var:v2> := <var:v2> * <var:w> ; <var:v2> := <var:v2> * <var:w> ; <var:m> := <var:v2> ; <var:m> := <var:m> + <var:v1> ; <var:m> := <var:m> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:w> = <var:s> $ prior to evaluating our set of instructions , it must be that we have $ <var:m> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> $ once list of commands exits . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:w> = <var:s> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \} \\ <var:v1> := <nat:4> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \} \\ <var:v1> := <var:v1> * <var:w> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \times <var:s> \} \\ <var:v2> := <nat:3> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \times <var:s> \land <var:v2> = <nat:3> \} \\ <var:v2> := <var:v2> * <var:w> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \times <var:s> \land <var:v2> = <nat:3> \times <var:s> \} \\ <var:v2> := <var:v2> * <var:w> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \times <var:s> \land <var:v2> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:m> := <var:v2> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:4> \times <var:s> \land <var:m> = <nat:3> \times <var:s> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:v1> ; \\ \{ <var:w> = <var:s> \land <var:v0> = <nat:1> \land <var:m> = <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> \} \\ <var:m> := <var:m> + <var:v0> \\ \{ <var:w> = <var:s> \land <var:m> = <nat:3> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:1> \} \end{eqnarray} Hence , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:w> ; <var:v2> := <nat:3> ; <var:v2> := <var:v2> * <var:w> ; <var:v2> := <var:v2> * <var:w> ; <var:m> := <var:v2> ; <var:m> := <var:m> + <var:v1> ; <var:m> := <var:m> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:w> = <var:s> }} <def:poly> {{ <var:m> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> * <var:s> /\ <var:v2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> * <var:s> /\ <var:v2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> * <var:s> /\ <var:v2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:4> * <var:s> /\ <var:m> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:v0> = <nat:1> /\ <var:m> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:m> = <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 