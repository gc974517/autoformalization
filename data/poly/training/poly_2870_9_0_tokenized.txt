\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:4> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:L> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:L> ; <var:i2> := <var:i2> * <var:L> ; <var:x> := <var:i2> ; <var:x> := <var:x> + <var:i1> ; <var:x> := <var:x> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:L> = <var:M> $ ahead of the execution of our code it follows that we have $ <var:x> = <nat:9> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this code segment can be shown by Hoare techniques . Immediately following , \verb | { <var:L> = <var:M> } <var:i0> := <nat:4> { <var:L> = <var:M> \land <var:i0> = <nat:4> } | , \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> } <var:i1> := <nat:4> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> } | , \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> } <var:i1> := <var:i1> * <var:L> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> } | , \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> } <var:i2> := <nat:9> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> } | , \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> } <var:i2> := <var:i2> * <var:L> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> \times <var:M> } | , \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> \times <var:M> } <var:i2> := <var:i2> * <var:L> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> \times <var:M> ^ <nat:2> } | and \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <nat:9> \times <var:M> ^ <nat:2> } <var:x> := <var:i2> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> \times <var:M> \land <var:x> = <nat:9> \times <var:M> ^ <nat:2> } | . Moving on to the upcoming lines contained in our code , we see \verb | { <var:L> = <var:M> } <var:i0> := <nat:4> { <var:L> = <var:M> \land <var:i0> = <nat:4> } | and \verb | { <var:L> = <var:M> \land <var:i0> = <nat:4> } <var:i1> := <nat:4> { <var:L> = <var:M> \land <var:i0> = <nat:4> \land <var:i1> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:4> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:L> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:L> ; <var:i2> := <var:i2> * <var:L> ; <var:x> := <var:i2> ; <var:x> := <var:x> + <var:i1> ; <var:x> := <var:x> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <def:poly> {{ <var:x> = <nat:9> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:i1> = <nat:4> * <var:M> /\ <var:x> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i0> = <nat:4> /\ <var:x> = <nat:9> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:x> = <nat:9> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 