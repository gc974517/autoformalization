\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:9> ; <var:Z1> := <nat:5> ; <var:Z1> := <var:Z1> * <var:X> ; <var:P> := <var:Z1> ; <var:P> := <var:P> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Assume that $ <var:X> = <var:r> $ prior to evaluating our segment of code , then we have $ <var:P> = <nat:5> \times <var:r> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions is clear by standard Hoare techniques . Going forward , \[ \begin{tabular} {rcl} \{ <var:X> = <var:r> \} & <var:Z0> := <nat:9> & \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \} \\ \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \} & <var:Z1> := <nat:5> & \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:5> \} \\ \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:5> \} & <var:Z1> := <var:Z1> * <var:X> & \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:5> * <var:r> \} \\ \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \land <var:Z1> = <nat:5> * <var:r> \} & <var:P> := <var:Z1> & \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \land <var:P> = <nat:5> * <var:r> \} \end{tabular} Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:r> \} & <var:Z0> := <nat:9> & \{ <var:X> = <var:r> \land <var:Z0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:9> ; <var:Z1> := <nat:5> ; <var:Z1> := <var:Z1> * <var:X> ; <var:P> := <var:Z1> ; <var:P> := <var:P> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:X> = <var:r> }} <def:poly> {{ <var:P> = <nat:5> * <var:r> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:Z0> = <nat:9> /\ <var:Z1> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:Z0> = <nat:9> /\ <var:P> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:P> = <nat:5> * <var:r> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 