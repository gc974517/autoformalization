\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:2> + <var:V> * <var:p> ; <var:V> := <nat:2> + <var:V> * <var:p> ; <var:V> := <nat:3> + <var:V> * <var:p> ; <var:V> := <nat:2> + <var:V> * <var:p> \end{verbatim} Assuming ( for some positive integers $ <var:E> $ ) that $ <var:p> = <var:E> $ before the evaluation of the set of commands then we have $ <var:V> = <nat:4> \cdot <var:E> ^ <nat:4> + <nat:2> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:E> \} \\ <var:V> := <nat:4> ; \\ \{ <var:p> = <var:E> \land <var:V> = <nat:4> \} \\ <var:V> := <nat:2> + <var:V> * <var:p> ; \\ \{ <var:p> = <var:E> \land <var:V> = <nat:4> \times <var:E> + <nat:2> \} \\ <var:V> := <nat:2> + <var:V> * <var:p> ; \\ \{ <var:p> = <var:E> \land <var:V> = <nat:4> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> \} \\ <var:V> := <nat:3> + <var:V> * <var:p> ; \\ \{ <var:p> = <var:E> \land <var:V> = <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:3> \} \\ <var:V> := <nat:2> + <var:V> * <var:p> \\ \{ <var:p> = <var:E> \land <var:V> = <nat:4> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> \} \end{eqnarray} The application of Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:V> := <nat:4> ; <var:V> := <nat:2> + <var:V> * <var:p> ; <var:V> := <nat:2> + <var:V> * <var:p> ; <var:V> := <nat:3> + <var:V> * <var:p> ; <var:V> := <nat:2> + <var:V> * <var:p> {{ <var:V> = <nat:4> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V> = <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V> = <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:V> = <nat:4> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 