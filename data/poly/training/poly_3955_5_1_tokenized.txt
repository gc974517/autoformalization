\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:C> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:3> ; <var:c> := <var:F1> <var:c> := <var:c> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow ( taking $ <var:X> \in \mathbb{N} $ ) that we have $ <var:C> = <var:X> $ before the evaluation of the series of commands , it holds that we see $ <var:c> = <nat:3> * <var:X> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for the series of instructions is clear using this decorated code segment . \begin{eqnarray} \{ <var:C> = <var:X> \} \\ <var:F1> := <var:C> ; \\ \{ <var:C> = <var:X> \land <var:F1> = <var:X> \} \\ <var:F0> := <nat:6> ; \\ \{ <var:C> = <var:X> \land <var:F1> = <var:X> \land <var:F0> = <nat:6> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:C> = <var:X> \land <var:F1> = <nat:3> * <var:X> \land <var:F0> = <nat:6> \} \\ <var:c> := <var:F1> \\ \{ <var:C> = <var:X> \land <var:F0> = <nat:6> \land <var:c> = <nat:3> * <var:X> \} \\ <var:c> := <var:c> + <var:F0> \\ \{ <var:C> = <var:X> \land <var:c> = <nat:3> * <var:X> + <nat:6> \} \end{eqnarray} Applying typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:C> ; <var:F0> := <nat:6> ; <var:F1> := <var:F1> * <nat:3> ; <var:c> := <var:F1> <var:c> := <var:c> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:C> = <var:X> }} <def:poly> {{ <var:c> = <nat:3> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:F1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:F1> = <var:X> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:F1> = <nat:3> * <var:X> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:F0> = <nat:6> /\ <var:c> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:X> /\ <var:c> = <nat:3> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 