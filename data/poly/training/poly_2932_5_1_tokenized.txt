\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:o> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:1> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> \end{verbatim} Assume it to be that $ <var:o> = <var:F> $ given all whole numbers $ <var:F> $ before evaluating the series of instructions it must be that $ <var:D> = <nat:1> * <var:F> + <nat:4> $ once program has terminated . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be demonstrated using Hoare logic . Moving forward to the following bit of code found in the series of commands , we have the statement yielding $ <var:o> $ as $ <var:x1>$ . This statement moves the precondition $ \{ <var:o> = <var:F> \} $ to $ \{ <var:o> = <var:F> \land <var:x1> = <var:F> \} $ . This is guaranteed by the assignment law defined by usual Hoare reasoning . Advancing to the upcoming piece of code found in the program , we have the variable assignmet line \verb | <var:x0> := <nat:4> ; | . This statement moves the condition $ \{ <var:o> = <var:F> \land <var:x1> = <var:F> \} $ into the postcondition $ \{ <var:o> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:4> \} $ . Moving on to the subsequent bit of code contained in the program , we see the command giving $ <var:x1> * <nat:1> $ toward $ <var:x1>$ . This statement redefines the precondition $ \{ <var:o> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:4> \} $ toward $ \{ <var:o> = <var:F> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x0> = <nat:4> \} $ . Stepping through , the variable binding statement \verb | <var:D> := <var:x1> | . This code takes the condition $ \{ <var:o> = <var:F> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x0> = <nat:4> \} $ to the postcondition $ \{ <var:o> = <var:F> \land <var:x0> = <nat:4> \land <var:D> = <nat:1> \cdot <var:F> \} $ . Shifting focus toward the upcoming piece of code found in our segment of code , we have the assignment statement \verb | <var:D> := <var:D> + <var:x0> | . This advances the condition $ \{ <var:o> = <var:F> \land <var:x0> = <nat:4> \land <var:D> = <nat:1> \cdot <var:F> \} $ to the postcondition $ \{ <var:o> = <var:F> \land <var:D> = <nat:1> \cdot <var:F> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:o> = <var:F> }} <var:x1> := <var:o> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:1> ; <var:D> := <var:x1> <var:D> := <var:D> + <var:x0> {{ <var:D> = <nat:1> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:x1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:x1> = <var:F> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:x0> = <nat:4> /\ <var:D> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:D> = <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 