\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:y> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:1> ; <var:t> := <var:H1> <var:t> := <var:t> + <var:H0> \end{verbatim} Allow it to hold that $ <var:y> = <var:N> $ before interpreting our segment of code it follows that we see $ <var:t> = <nat:1> \cdot <var:N> + <nat:7> $ once program has executed . \end{theorem} \begin{proof} Using typical Hoare reasoning returns : \begin{eqnarray} \{ <var:y> = <var:N> \} \\ <var:H1> := <var:y> ; \\ \{ <var:y> = <var:N> \land <var:H1> = <var:N> \} \\ <var:H0> := <nat:7> ; \\ \{ <var:y> = <var:N> \land <var:H1> = <var:N> \land <var:H0> = <nat:7> \} \\ <var:H1> := <var:H1> * <nat:1> ; \\ \{ <var:y> = <var:N> \land <var:H1> = <nat:1> \times <var:N> \land <var:H0> = <nat:7> \} \\ <var:t> := <var:H1> \\ \{ <var:y> = <var:N> \land <var:H0> = <nat:7> \land <var:t> = <nat:1> \times <var:N> \} \\ <var:t> := <var:t> + <var:H0> \\ \{ <var:y> = <var:N> \land <var:t> = <nat:1> \times <var:N> + <nat:7> \} \end{eqnarray} Given the above , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:y> = <var:N> }} <var:H1> := <var:y> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:1> ; <var:t> := <var:H1> <var:t> := <var:t> + <var:H0> {{ <var:t> = <nat:1> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:H1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:H1> = <var:N> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:H1> = <nat:1> * <var:N> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:H0> = <nat:7> /\ <var:t> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:N> /\ <var:t> = <nat:1> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 