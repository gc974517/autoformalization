\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:7> ; <var:i> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume it to hold that $ <var:S> = <var:L> $ ahead of interpreting the set of commands , it must be that we see $ <var:i> = <nat:7> $ after set of commands has exited . \end{theorem} \begin{proof} The application of Hoare logic returns : \begin{eqnarray} \{ <var:S> = <var:L> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:S> = <var:L> \land <var:I0> = <nat:7> \} \\ <var:i> := <var:I0> \\ \{ <var:S> = <var:L> \land <var:i> = <nat:7> \} \end{eqnarray} Considering the above , this code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:7> ; <var:i> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <def:poly> {{ <var:i> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:i> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 