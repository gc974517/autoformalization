\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:r0> := <nat:6> ; <var:l> := <var:r0> \end{verbatim} Allow it to be that $ <var:J> = <var:R> $ before the evaluation of this program it follows that we have $ <var:l> = <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions can be accomplished using typical Hoare logic . Honing in on the proceeding command found in our list of instructions , we see the environment update statement \verb | <var:r0> := <nat:6> ; | . This redefines $ \{ <var:J> = <var:R> \} $ as the postcondition $ \{ <var:J> = <var:R> \land <var:r0> = <nat:6> \} $ . This is shown to be logically sound with the assignment rule given by Hoare techniques . Stepping forward , we see the assignment code giving $ <var:r0$ as $ <var:l>$ . This code takes $ \{ <var:J> = <var:R> \land <var:r0> = <nat:6> \} $ toward $ \{ <var:J> = <var:R> \land <var:l> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:J> = <var:R> }} <var:r0> := <nat:6> ; <var:l> := <var:r0> {{ <var:l> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:R> /\ <var:l> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 