\begin{document} \begin{theorem} Consider a code in \emph{Imp} : \begin{verbatim} <var:k1> := <var:F> ; <var:k2> := <var:k1> * <var:F> ; <var:k3> := <var:k2> * <var:F> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:9> ; <var:Q> := <var:k3> <var:Q> := <var:Q> + <var:k2> <var:Q> := <var:Q> + <var:k1> <var:Q> := <var:Q> + <var:k0> \end{verbatim} Allow it to be that $ <var:F> = <var:v> $ prior to the execution of our list of instructions , it follows that $ <var:Q> = <nat:9> \cdot <var:v> ^ <nat:3> + <nat:9> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning gives : \begin{eqnarray} \{ <var:F> = <var:v> \} \\ <var:k1> := <var:F> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <var:v> \} \end{eqnarray} Furthering the execution of our list of instructions gives us : \begin{eqnarray} <var:k2> := <var:k1> * <var:F> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <var:v> \land <var:k2> = <var:v> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:F> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <var:v> \land <var:k2> = <var:v> ^ <nat:2> \land <var:k3> = <var:v> ^ <nat:3> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <var:v> \land <var:k2> = <var:v> ^ <nat:2> \land <var:k3> = <var:v> ^ <nat:3> \land <var:k0> = <nat:4> \} \\ <var:k1> := <var:k1> * <nat:1> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <nat:1> \times <var:v> \land <var:k2> = <var:v> ^ <nat:2> \land <var:k3> = <var:v> ^ <nat:3> \land <var:k0> = <nat:4> \} \\ <var:k2> := <var:k2> * <nat:9> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <nat:1> \times <var:v> \land <var:k2> = <nat:9> \times <var:v> ^ <nat:2> \land <var:k3> = <var:v> ^ <nat:3> \land <var:k0> = <nat:4> \} \\ <var:k3> := <var:k3> * <nat:9> ; \\ \{ <var:F> = <var:v> \land <var:k1> = <nat:1> \times <var:v> \land <var:k2> = <nat:9> \times <var:v> ^ <nat:2> \land <var:k3> = <nat:9> \times <var:v> ^ <nat:3> \land <var:k0> = <nat:4> \} \\ <var:Q> := <var:k3> \\ \{ <var:F> = <var:v> \land <var:k1> = <nat:1> \times <var:v> \land <var:k2> = <nat:9> \times <var:v> ^ <nat:2> \land <var:k0> = <nat:4> \land <var:Q> = <nat:9> \times <var:v> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:k2> \\ \{ <var:F> = <var:v> \land <var:k1> = <nat:1> \times <var:v> \land <var:k0> = <nat:4> \land <var:Q> = <nat:9> \times <var:v> ^ <nat:3> + <nat:9> \times <var:v> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:k1> \\ \{ <var:F> = <var:v> \land <var:k0> = <nat:4> \land <var:Q> = <nat:9> \times <var:v> ^ <nat:3> + <nat:9> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> \} \\ <var:Q> := <var:Q> + <var:k0> \\ \{ <var:F> = <var:v> \land <var:Q> = <nat:9> \times <var:v> ^ <nat:3> + <nat:9> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:4> \} \end{eqnarray} Thusly , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <var:k1> := <var:F> ; <var:k2> := <var:k1> * <var:F> ; <var:k3> := <var:k2> * <var:F> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:9> ; <var:Q> := <var:k3> <var:Q> := <var:Q> + <var:k2> <var:Q> := <var:Q> + <var:k1> <var:Q> := <var:Q> + <var:k0> {{ <var:Q> = <nat:9> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <var:v> /\ <var:k2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <var:v> /\ <var:k2> = <var:v> ^ <nat:2> /\ <var:k3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <var:v> /\ <var:k2> = <var:v> ^ <nat:2> /\ <var:k3> = <var:v> ^ <nat:3> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <nat:1> * <var:v> /\ <var:k2> = <var:v> ^ <nat:2> /\ <var:k3> = <var:v> ^ <nat:3> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <nat:1> * <var:v> /\ <var:k2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:k3> = <var:v> ^ <nat:3> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <nat:1> * <var:v> /\ <var:k2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:k3> = <nat:9> * <var:v> ^ <nat:3> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <nat:1> * <var:v> /\ <var:k2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:k0> = <nat:4> /\ <var:Q> = <nat:9> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k1> = <nat:1> * <var:v> /\ <var:k0> = <nat:4> /\ <var:Q> = <nat:9> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:k0> = <nat:4> /\ <var:Q> = <nat:9> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:Q> = <nat:9> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 