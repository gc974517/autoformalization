\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:o> ; <var:h2> := <var:h1> * <var:o> ; <var:h3> := <var:h2> * <var:o> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:4> ; <var:h2> := <var:h2> * <nat:3> ; <var:h3> := <var:h3> * <nat:2> ; <var:p> := <var:h3> <var:p> := <var:p> + <var:h2> <var:p> := <var:p> + <var:h1> <var:p> := <var:p> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Allow that $ <var:o> = <var:b> $ before evaluating the code segment , it follows that we have $ <var:p> = <nat:2> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be accomplished with the following decorated series of commands . \begin{eqnarray} \{ <var:o> = <var:b> \} \\ <var:h1> := <var:o> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <var:b> \} \\ <var:h2> := <var:h1> * <var:o> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <var:b> \land <var:h2> = <var:b> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:o> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <var:b> \land <var:h2> = <var:b> ^ <nat:2> \land <var:h3> = <var:b> ^ <nat:3> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <var:b> \land <var:h2> = <var:b> ^ <nat:2> \land <var:h3> = <var:b> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h1> := <var:h1> * <nat:4> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <nat:4> * <var:b> \land <var:h2> = <var:b> ^ <nat:2> \land <var:h3> = <var:b> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h2> := <var:h2> * <nat:3> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <nat:4> * <var:b> \land <var:h2> = <nat:3> * <var:b> ^ <nat:2> \land <var:h3> = <var:b> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:h3> := <var:h3> * <nat:2> ; \\ \{ <var:o> = <var:b> \land <var:h1> = <nat:4> * <var:b> \land <var:h2> = <nat:3> * <var:b> ^ <nat:2> \land <var:h3> = <nat:2> * <var:b> ^ <nat:3> \land <var:h0> = <nat:1> \} \\ <var:p> := <var:h3> \\ \{ <var:o> = <var:b> \land <var:h1> = <nat:4> * <var:b> \land <var:h2> = <nat:3> * <var:b> ^ <nat:2> \land <var:h0> = <nat:1> \land <var:p> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:h2> \\ \{ <var:o> = <var:b> \land <var:h1> = <nat:4> * <var:b> \land <var:h0> = <nat:1> \land <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:h1> \\ \{ <var:o> = <var:b> \land <var:h0> = <nat:1> \land <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> \} \\ <var:p> := <var:p> + <var:h0> \\ \{ <var:o> = <var:b> \land <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:o> ; <var:h2> := <var:h1> * <var:o> ; <var:h3> := <var:h2> * <var:o> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:4> ; <var:h2> := <var:h2> * <nat:3> ; <var:h3> := <var:h3> * <nat:2> ; <var:p> := <var:h3> <var:p> := <var:p> + <var:h2> <var:p> := <var:p> + <var:h1> <var:p> := <var:p> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:o> = <var:b> }} <def:poly> {{ <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <var:b> /\ <var:h2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <var:b> /\ <var:h2> = <var:b> ^ <nat:2> /\ <var:h3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <var:b> /\ <var:h2> = <var:b> ^ <nat:2> /\ <var:h3> = <var:b> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <nat:4> * <var:b> /\ <var:h2> = <var:b> ^ <nat:2> /\ <var:h3> = <var:b> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <nat:4> * <var:b> /\ <var:h2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:h3> = <var:b> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <nat:4> * <var:b> /\ <var:h2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:b> ^ <nat:3> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <nat:4> * <var:b> /\ <var:h2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:h0> = <nat:1> /\ <var:p> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h1> = <nat:4> * <var:b> /\ <var:h0> = <nat:1> /\ <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:h0> = <nat:1> /\ <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:p> = <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 