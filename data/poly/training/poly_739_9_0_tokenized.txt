\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:y> := <var:Z2> ; <var:y> := <var:y> + <var:Z1> ; <var:y> := <var:y> + <var:Z0> \end{verbatim} Given $ <var:U> = <var:x> $ ( for positive numbers $ <var:x> $ ) prior to evaluating the code segment it holds that $ <var:y> = <nat:8> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \} \\ <var:Z1> := <nat:3> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \} \end{eqnarray} Allowing interpreting this segment of code produces : \begin{eqnarray} <var:Z1> := <var:Z1> * <var:U> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \times <var:x> \} \\ <var:Z2> := <nat:8> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \times <var:x> \land <var:Z2> = <nat:8> \} \\ <var:Z2> := <var:Z2> * <var:U> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \times <var:x> \land <var:Z2> = <nat:8> \times <var:x> \} \\ <var:Z2> := <var:Z2> * <var:U> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \times <var:x> \land <var:Z2> = <nat:8> \times <var:x> ^ <nat:2> \} \\ <var:y> := <var:Z2> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:3> \times <var:x> \land <var:y> = <nat:8> \times <var:x> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:Z1> ; \\ \{ <var:U> = <var:x> \land <var:Z0> = <nat:3> \land <var:y> = <nat:8> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> \} \\ <var:y> := <var:y> + <var:Z0> \\ \{ <var:U> = <var:x> \land <var:y> = <nat:8> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:3> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <var:Z0> := <nat:3> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:y> := <var:Z2> ; <var:y> := <var:y> + <var:Z1> ; <var:y> := <var:y> + <var:Z0> {{ <var:y> = <nat:8> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:x> /\ <var:Z2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:x> /\ <var:Z2> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:x> /\ <var:Z2> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:3> * <var:x> /\ <var:y> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:Z0> = <nat:3> /\ <var:y> = <nat:8> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:y> = <nat:8> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 