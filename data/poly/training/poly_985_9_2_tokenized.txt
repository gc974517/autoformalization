\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:1> + <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:X> = <var:s> $ before interpreting our set of instructions it follows that we see $ <var:U> = <nat:4> \cdot <var:s> ^ <nat:8> + <nat:2> \cdot <var:s> ^ <nat:6> + <nat:1> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the list of commands is demonstrated by Hoare logic . Taking a look at the upcoming lines of codeseen in our set of instructions , we have \begin{verbatim} { <var:X> = <var:s> } <var:U> := <nat:4> { <var:X> = <var:s> \land <var:U> = <nat:4> } { <var:X> = <var:s> \land <var:U> = <nat:4> } <var:U> := <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> + } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> + } <var:U> := <nat:2> + <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:2> + <nat:2> } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:2> + <nat:2> } <var:U> := <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> + } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> + } <var:U> := <nat:1> + <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> } <var:U> := <nat:3> + <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> + <nat:3> } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> + <nat:3> } <var:U> := <nat:2> + <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:6> + <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> } { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:6> + <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> } <var:U> := <nat:2> + <var:U> * <var:X> { <var:X> = <var:s> \land <var:U> = <nat:4> \times <var:s> ^ <nat:7> + <nat:2> \times <var:s> ^ <nat:5> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:2> } \end{verbatim} This is given using the environment update scheme from standard Hoare reasoning . Going forward , we have \begin{verbatim} { <var:X> = <var:s> } <var:U> := <nat:4> { <var:X> = <var:s> \land <var:U> = <nat:4> } \end{verbatim} This is guaranteed by the variable binding inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:4> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:1> + <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:X> = <var:s> }} <def:poly> {{ <var:U> = <nat:4> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:s> /\ <var:U> = <nat:4> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 