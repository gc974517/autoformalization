\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:6> ; <var:w> := <var:X0> \end{verbatim} Given that $ <var:Y> = <var:B> $ --- for some $ <var:B> \in \mathbb{N} $ --- before the evaluation of the series of instructions , it holds that we have $ <var:w> = <nat:6> $ after list of instructions has terminated . \end{theorem} \begin{proof} The proof of this program can be done with Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:B> \} & <var:X0> := <nat:6> & \{ <var:Y> = <var:B> \land <var:X0> = <nat:6> \} \\ \{ <var:Y> = <var:B> \land <var:X0> = <nat:6> \} & <var:w> := <var:X0& \{ <var:Y> = <var:B> \land <var:w> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Y> = <var:B> }} <var:X0> := <nat:6> ; <var:w> := <var:X0> {{ <var:w> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:w> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 