\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:5> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:V> ; <var:l> := <var:o1> ; <var:l> := <var:l> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:V> = <var:b> $ given any $ <var:b> \in \mathbb{Z}^+ $ ahead of interpreting the series of commands it holds that we see $ <var:l> = <nat:3> * <var:b> + <nat:5> $ once program exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives : \begin{eqnarray} \{ <var:V> = <var:b> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:V> = <var:b> \land <var:o0> = <nat:5> \} \end{eqnarray} Continuing evaluating the code segment gives : \begin{eqnarray} <var:o1> := <nat:3> ; \\ \{ <var:V> = <var:b> \land <var:o0> = <nat:5> \land <var:o1> = <nat:3> \} \\ <var:o1> := <var:o1> * <var:V> ; \\ \{ <var:V> = <var:b> \land <var:o0> = <nat:5> \land <var:o1> = <nat:3> \times <var:b> \} \\ <var:l> := <var:o1> ; \\ \{ <var:V> = <var:b> \land <var:o0> = <nat:5> \land <var:l> = <nat:3> \times <var:b> \} \\ <var:l> := <var:l> + <var:o0> \\ \{ <var:V> = <var:b> \land <var:l> = <nat:3> \times <var:b> + <nat:5> \} \end{eqnarray} Considering the above , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:V> ; <var:l> := <var:o1> ; <var:l> := <var:l> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:V> = <var:b> }} <def:poly> {{ <var:l> = <nat:3> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:o0> = <nat:5> /\ <var:l> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:b> /\ <var:l> = <nat:3> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 