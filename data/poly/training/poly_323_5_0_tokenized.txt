\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:6> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:p> ; <var:r> := <var:y1> ; <var:r> := <var:r> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assuming ( letting natural coefficients $ <var:q> $ ) that $ <var:p> = <var:q> $ prior to the execution of this series of commands it holds that we have $ <var:r> = <nat:2> * <var:q> + <nat:6> $ once code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:q> \} \\ <var:y0> := <nat:6> ; \\ \{ <var:p> = <var:q> \land <var:y0> = <nat:6> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:p> = <var:q> \land <var:y0> = <nat:6> \land <var:y1> = <nat:2> \} \\ <var:y1> := <var:y1> * <var:p> ; \\ \{ <var:p> = <var:q> \land <var:y0> = <nat:6> \land <var:y1> = <nat:2> * <var:q> \} \\ <var:r> := <var:y1> ; \\ \{ <var:p> = <var:q> \land <var:y0> = <nat:6> \land <var:r> = <nat:2> * <var:q> \} \\ <var:r> := <var:r> + <var:y0> \\ \{ <var:p> = <var:q> \land <var:r> = <nat:2> * <var:q> + <nat:6> \} \end{eqnarray} The application of usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:6> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:p> ; <var:r> := <var:y1> ; <var:r> := <var:r> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:p> = <var:q> }} <def:poly> {{ <var:r> = <nat:2> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:y0> = <nat:6> /\ <var:y1> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:y0> = <nat:6> /\ <var:r> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:r> = <nat:2> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 