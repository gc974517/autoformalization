\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:A> = <var:W> $ --- for natural numbers $ <var:W> $ --- before the evaluation of our series of commands , it holds that we have $ <var:h> = <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:3> $ when list of instructions terminates . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:W> \} \\ <var:h> := <nat:3> ; \\ \{ <var:A> = <var:W> \land <var:h> = <nat:3> \} \\ <var:h> := <nat:1> + <var:h> * <var:A> ; \\ \{ <var:A> = <var:W> \land <var:h> = <nat:3> * <var:W> + <nat:1> \} \\ <var:h> := <nat:3> + <var:h> * <var:A> \\ \{ <var:A> = <var:W> \land <var:h> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> \} \end{eqnarray} Continuing evaluating our list of instructions gives us : \begin{eqnarray} \end{eqnarray} Given the above , our segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:A> = <var:W> }} <def:poly> {{ <var:h> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:h> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:W> /\ <var:h> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 