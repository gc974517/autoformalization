\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:3> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> ; <var:X> := <var:X> * <var:B> ; <var:X> := <nat:1> + <var:X> * <var:B> ; <var:X> := <var:X> * <var:B> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assuming that $ <var:B> = <var:M> $ --- given any integers $ <var:M> $ --- prior to executing our code segment it follows that we see $ <var:X> = <nat:4> \times <var:M> ^ <nat:10> + <nat:2> \times <var:M> ^ <nat:9> + <nat:2> \times <var:M> ^ <nat:8> + <nat:3> \times <var:M> ^ <nat:7> + <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands is clear with the following decorated series of instructions . \begin{eqnarray} \{ <var:B> = <var:M> \} \\ <var:X> := <nat:4> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \} \\ <var:X> := <nat:2> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> + <nat:2> \} \\ <var:X> := <nat:2> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:2> \} \\ <var:X> := <nat:3> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:3> \} \\ <var:X> := <nat:4> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} \\ <var:X> := <nat:4> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:4> + <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:4> \} \\ <var:X> := <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:5> + <nat:2> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + \} \\ <var:X> := <nat:1> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:2> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \} \\ <var:X> := <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:8> + <nat:2> \times <var:M> ^ <nat:7> + <nat:2> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> + \} \\ <var:X> := <nat:2> + <var:X> * <var:B> ; \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:9> + <nat:2> \times <var:M> ^ <nat:8> + <nat:2> \times <var:M> ^ <nat:7> + <nat:3> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \} \\ <var:X> := <nat:4> + <var:X> * <var:B> \\ \{ <var:B> = <var:M> \land <var:X> = <nat:4> \times <var:M> ^ <nat:10> + <nat:2> \times <var:M> ^ <nat:9> + <nat:2> \times <var:M> ^ <nat:8> + <nat:3> \times <var:M> ^ <nat:7> + <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:4> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:3> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> ; <var:X> := <var:X> * <var:B> ; <var:X> := <nat:1> + <var:X> * <var:B> ; <var:X> := <var:X> * <var:B> ; <var:X> := <nat:2> + <var:X> * <var:B> ; <var:X> := <nat:4> + <var:X> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:B> = <var:M> }} <def:poly> {{ <var:X> = <nat:4> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:2> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:2> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:2> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:1> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:2> * <var:M> ^ <nat:7> + <nat:3> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:M> /\ <var:X> = <nat:4> * <var:M> ^ <nat:10> + <nat:2> * <var:M> ^ <nat:9> + <nat:2> * <var:M> ^ <nat:8> + <nat:3> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 