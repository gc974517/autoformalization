\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:4> ; <var:w> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Given it to hold that $ <var:j> = <var:C> $ ahead of interpreting our list of commands it follows that we have $ <var:w> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands is evident with standard Hoare reasoning . Taking another step toward the next bits of codeseen in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:j> = <var:C> \} & <var:l0> := <nat:4> & \{ <var:j> = <var:C> \land <var:l0> = <nat:4> \} \\ \{ <var:j> = <var:C> \land <var:l0> = <nat:4> \} & <var:w> := <var:l0& \{ <var:j> = <var:C> \land <var:w> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:w> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <def:poly> {{ <var:w> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:w> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 