\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:7> ; <var:c> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assume it to be that $ <var:m> = <var:j> $ before evaluating our segment of code , then we see $ <var:c> = <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions is done by Hoare reasoning . Shifting focus toward the subsequent command in our series of instructions , we see \begin{eqnarray} \{ <var:m> = <var:j> \} \, <var:f0> := <nat:7> \, \{ <var:m> = <var:j> \land <var:f0> = <nat:7> \} \end{eqnarray} This is guaranteed by the variable assignmet inference rule in standard Hoare logic . Observing the proceeding bit of code found in our set of commands , \begin{eqnarray} \{ <var:m> = <var:j> \} \, <var:f0> := <nat:7> \, \{ <var:m> = <var:j> \land <var:f0> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:7> ; <var:c> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <def:poly> {{ <var:c> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:c> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 