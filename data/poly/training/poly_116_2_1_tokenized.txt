\begin{document} \begin{theorem} Take the following segment of code as \begin{verbatim} <var:a0> := <nat:8> ; <var:Y> := <var:a0> \end{verbatim} Given it to be that $ <var:N> = <var:F> $ ahead of running our list of commands , then $ <var:Y> = <nat:8> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be shown using Hoare techniques . Moving forward , we have \begin{verbatim} { <var:N> = <var:F> } <var:a0> := <nat:8> { <var:N> = <var:F> \land <var:a0> = <nat:8> } \end{verbatim} This is known to be sound through the rule defined by typical Hoare techniques . Stepping forward , \begin{verbatim} { <var:N> = <var:F> } <var:a0> := <nat:8> { <var:N> = <var:F> \land <var:a0> = <nat:8> } \end{verbatim} This is shown using the variable binding law found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:N> = <var:F> }} <var:a0> := <nat:8> ; <var:Y> := <var:a0> {{ <var:Y> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:F> /\ <var:Y> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 