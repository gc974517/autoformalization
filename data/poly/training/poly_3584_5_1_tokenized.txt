\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:g1> := <var:D> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> \end{verbatim} Allowing it to be that $ <var:D> = <var:S> $ --- given positive integers $ <var:S> $ --- prior to evaluating this program it holds that we have $ <var:f> = <nat:1> \cdot <var:S> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is given using standard Hoare logic . Moving forward to the next step , the binding statement \verb | <var:g1> := <var:D> ; | . This statement transfers $ \{ <var:D> = <var:S> \} $ toward the postcondition $ \{ <var:D> = <var:S> \land <var:g1> = <var:S> \} $ . This is sound by the assignment inference rule given by usual Hoare techniques . Considering the following line of code seen in the list of instructions , we have the binding statement \verb | <var:g0> := <nat:2> ; | . This line moves $ \{ <var:D> = <var:S> \land <var:g1> = <var:S> \} $ to the condition $ \{ <var:D> = <var:S> \land <var:g1> = <var:S> \land <var:g0> = <nat:2> \} $ . Shifting focus toward the upcoming piece of code contained in the segment of code , we have the environment update statement \verb | <var:g1> := <var:g1> * <nat:1> ; | . This line forwards the precondition $ \{ <var:D> = <var:S> \land <var:g1> = <var:S> \land <var:g0> = <nat:2> \} $ into the postcondition $ \{ <var:D> = <var:S> \land <var:g1> = <nat:1> \cdot <var:S> \land <var:g0> = <nat:2> \} $ . This is ensured using the assignment rule obtained from usual Hoare reasoning . Shifting focus toward the next bit of code seen in the list of commands , the assignment statement \verb | <var:f> := <var:g1> | . This takes the precondition $ \{ <var:D> = <var:S> \land <var:g1> = <nat:1> \cdot <var:S> \land <var:g0> = <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:S> \land <var:g0> = <nat:2> \land <var:f> = <nat:1> \cdot <var:S> \} $ . This is shown to be logically sound by the assignment inference rule of typical Hoare logic . Taking a look at the upcoming line of code in our code segment , the code letting $ <var:f> + <var:g0$ into $ <var:f>$ . This code moves the precondition $ \{ <var:D> = <var:S> \land <var:g0> = <nat:2> \land <var:f> = <nat:1> \cdot <var:S> \} $ to the condition $ \{ <var:D> = <var:S> \land <var:f> = <nat:1> \cdot <var:S> + <nat:2> \} $ . This is known to be sound with the assignment scheme obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:D> = <var:S> }} <var:g1> := <var:D> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:f> := <var:g1> <var:f> := <var:f> + <var:g0> {{ <var:f> = <nat:1> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:g1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:g1> = <var:S> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:g1> = <nat:1> * <var:S> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:g0> = <nat:2> /\ <var:f> = <nat:1> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:S> /\ <var:f> = <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 