\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:4> ; <var:J> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Given it to hold that $ <var:W> = <var:r> $ before evaluating the series of instructions , it must be that $ <var:J> = <nat:4> $ once segment of code terminates . \end{theorem} \begin{proof} The flow of logic for the segment of code is evident through usual Hoare techniques . Further , we have the statement giving $ <nat:4> $ into $ <var:A0>$ . This code forwards $ \{ <var:W> = <var:r> \} $ to the condition $ \{ <var:W> = <var:r> \land <var:A0> = <nat:4> \} $ . Taking another step toward the upcoming piece of code found in the code segment , we have the variable update code \verb | <var:J> := <var:A0> | . This code transfers the precondition $ \{ <var:W> = <var:r> \land <var:A0> = <nat:4> \} $ to the postcondition $ \{ <var:W> = <var:r> \land <var:J> = <nat:4> \} $ . This is given by the assignment law defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:4> ; <var:J> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:W> = <var:r> }} <def:poly> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:r> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 