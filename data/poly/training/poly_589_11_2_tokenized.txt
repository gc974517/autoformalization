\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> \end{verbatim} Allowing that we have $ <var:o> = <var:U> $ prior to evaluating the series of instructions , it must be that we see $ <var:Y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> $ after set of instructions has exited . \end{theorem} \begin{proof} The proof of this code is shown using usual Hoare logic . Now , we have the statement \verb | <var:Y> := <nat:4> ; | . This moves the condition $ \{ <var:o> = <var:U> \} $ to $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \} $ . Moving forward to the following statement found in the set of instructions , the assignment code \verb | <var:Y> := <nat:2> + <var:Y> * <var:o> ; | . This command forwards the condition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \} $ toward $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> + <nat:2> \} $ . This is shown to be logically sound using the assignment rule of standard Hoare techniques . Paying attention to the subsequent piece of code in the series of commands , we have the environment update statement giving $ <nat:3> + <var:Y> * <var:o> $ into $ <var:Y>$ . This transfers the condition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> + <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:3> \} $ . This is guaranteed through the assignment law defined in typical Hoare techniques . Paying attention to the subsequent step found in the list of commands , the variable binding code defining $ <nat:2> + <var:Y> * <var:o> $ into $ <var:Y>$ . This forwards the condition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:3> \} $ toward the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:2> \} $ . This is ensured using the assignment scheme obtained from standard Hoare logic . Jumping to the following step contained in our code segment , the statement giving $ <var:Y> * <var:o> $ into $ <var:Y>$ . This forwards the condition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + \} $ . This is sound with the assignment scheme in typical Hoare logic . Advancing on , we see the variable binding line \verb | <var:Y> := <nat:4> + <var:Y> * <var:o> ; | . This statement forwards the precondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + \} $ to the condition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:5> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \} $ . Honing in on the next line of code found in our set of commands , the variable binding command binding $ <nat:4> + <var:Y> * <var:o> $ as $ <var:Y>$ . This statement advances the precondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:5> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:6> + <nat:2> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> + <nat:4> \} $ . Jumping to the upcoming bit of code seen in our set of instructions , we see the variable assignmet statement \verb | <var:Y> := <nat:3> + <var:Y> * <var:o> ; | . This statement transfers the precondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:6> + <nat:2> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:2> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> + <nat:4> \} $ as the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:7> + <nat:2> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:5> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:3> \} $ . This is known to be sound by the assignment rule given in typical Hoare techniques . Shifting focus toward the following bit of code seen in our set of instructions , we see the code \verb | <var:Y> := <nat:2> + <var:Y> * <var:o> ; | . This forwards $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:7> + <nat:2> \cdot <var:U> ^ <nat:6> + <nat:3> \cdot <var:U> ^ <nat:5> + <nat:2> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:3> \} $ as the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:8> + <nat:2> \cdot <var:U> ^ <nat:7> + <nat:3> \cdot <var:U> ^ <nat:6> + <nat:2> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:2> \} $ . This is ensured through the assignment inference rule found in usual Hoare techniques . Observing the next command found in our list of commands , the variable assignmet line \verb | <var:Y> := <nat:1> + <var:Y> * <var:o> ; | . This statement moves the precondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:8> + <nat:2> \cdot <var:U> ^ <nat:7> + <nat:3> \cdot <var:U> ^ <nat:6> + <nat:2> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:2> \} $ as $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:9> + <nat:2> \cdot <var:U> ^ <nat:8> + <nat:3> \cdot <var:U> ^ <nat:7> + <nat:2> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:1> \} $ . Paying attention to the proceeding step seen in the segment of code , we have the variable assignmet statement \verb | <var:Y> := <nat:1> + <var:Y> * <var:o> | . This transfers the precondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:9> + <nat:2> \cdot <var:U> ^ <nat:8> + <nat:3> \cdot <var:U> ^ <nat:7> + <nat:2> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:1> \} $ toward the postcondition $ \{ <var:o> = <var:U> \land <var:Y> = <nat:4> \cdot <var:U> ^ <nat:10> + <nat:2> \cdot <var:U> ^ <nat:9> + <nat:3> \cdot <var:U> ^ <nat:8> + <nat:2> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:1> \} $ . This is given using the assignment scheme given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:o> = <var:U> }} <var:Y> := <nat:4> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:4> + <var:Y> * <var:o> ; <var:Y> := <nat:3> + <var:Y> * <var:o> ; <var:Y> := <nat:2> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> ; <var:Y> := <nat:1> + <var:Y> * <var:o> {{ <var:Y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:9> + <nat:2> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:Y> = <nat:4> * <var:U> ^ <nat:10> + <nat:2> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 