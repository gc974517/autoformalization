\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:w1> := <var:M> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:2> ; <var:e> := <var:w1> <var:e> := <var:e> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Given that we have $ <var:M> = <var:r> $ before executing this list of instructions it holds that we have $ <var:e> = <nat:2> \cdot <var:r> + <nat:2> $ when segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be accomplished by Hoare reasoning . Going forward , we see \begin{verbatim} { <var:M> = <var:r> } <var:w1> := <var:M> { <var:M> = <var:r> \land <var:w1> = <var:r> } { <var:M> = <var:r> \land <var:w1> = <var:r> } <var:w0> := <nat:2> { <var:M> = <var:r> \land <var:w1> = <var:r> \land <var:w0> = <nat:2> } { <var:M> = <var:r> \land <var:w1> = <var:r> \land <var:w0> = <nat:2> } <var:w1> := <var:w1> * <nat:2> { <var:M> = <var:r> \land <var:w1> = <nat:2> * <var:r> \land <var:w0> = <nat:2> } { <var:M> = <var:r> \land <var:w1> = <nat:2> * <var:r> \land <var:w0> = <nat:2> } <var:e> := <var:w1{ <var:M> = <var:r> \land <var:w0> = <nat:2> \land <var:e> = <nat:2> * <var:r> } { <var:M> = <var:r> \land <var:w0> = <nat:2> \land <var:e> = <nat:2> * <var:r> } <var:e> := <var:e> + <var:w0{ <var:M> = <var:r> \land <var:e> = <nat:2> * <var:r> + <nat:2> } \end{verbatim} This is known to be sound through the variable assignmet rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w1> := <var:M> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:2> ; <var:e> := <var:w1> <var:e> := <var:e> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:M> = <var:r> }} <def:poly> {{ <var:e> = <nat:2> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:w1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:w1> = <var:r> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:w1> = <nat:2> * <var:r> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:w0> = <nat:2> /\ <var:e> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:r> /\ <var:e> = <nat:2> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 