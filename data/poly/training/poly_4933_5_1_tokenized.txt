\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:I1> := <var:S> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:8> ; <var:E> := <var:I1> <var:E> := <var:E> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:S> = <var:e> $ , for all whole numbers $ <var:e> $ , ahead of evaluating our series of instructions , then we see $ <var:E> = <nat:8> \cdot <var:e> + <nat:3> $ . \end{theorem} \begin{proof} Observe the below decorated set of commands . \begin{eqnarray} \{ <var:S> = <var:e> \} \\ <var:I1> := <var:S> ; \\ \{ <var:S> = <var:e> \land <var:I1> = <var:e> \} \\ <var:I0> := <nat:3> ; \\ \{ <var:S> = <var:e> \land <var:I1> = <var:e> \land <var:I0> = <nat:3> \} \\ <var:I1> := <var:I1> * <nat:8> ; \\ \{ <var:S> = <var:e> \land <var:I1> = <nat:8> \times <var:e> \land <var:I0> = <nat:3> \} \\ <var:E> := <var:I1> \\ \{ <var:S> = <var:e> \land <var:I0> = <nat:3> \land <var:E> = <nat:8> \times <var:e> \} \\ <var:E> := <var:E> + <var:I0> \\ \{ <var:S> = <var:e> \land <var:E> = <nat:8> \times <var:e> + <nat:3> \} \end{eqnarray} Using usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I1> := <var:S> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:8> ; <var:E> := <var:I1> <var:E> := <var:E> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:S> = <var:e> }} <def:poly> {{ <var:E> = <nat:8> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:I1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:I1> = <var:e> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:I1> = <nat:8> * <var:e> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:I0> = <nat:3> /\ <var:E> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:e> /\ <var:E> = <nat:8> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 