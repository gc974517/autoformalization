\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:y> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:h> := <var:g1> <var:h> := <var:h> + <var:g0> \end{verbatim} Allow , given every positive coefficients $ <var:p> $ , it to hold that $ <var:y> = <var:p> $ ahead of running this segment of code , it must be that we have $ <var:h> = <nat:3> \times <var:p> + <nat:2> $ after series of instructions has terminated . \end{theorem} \begin{proof} The argument for the set of commands can be demonstrated with standard Hoare reasoning . Moving forward to the proceeding commands found in the code segment , we see \begin{verbatim} { <var:y> = <var:p> } <var:g1> := <var:y> { <var:y> = <var:p> \land <var:g1> = <var:p> } { <var:y> = <var:p> \land <var:g1> = <var:p> } <var:g0> := <nat:2> { <var:y> = <var:p> \land <var:g1> = <var:p> \land <var:g0> = <nat:2> } { <var:y> = <var:p> \land <var:g1> = <var:p> \land <var:g0> = <nat:2> } <var:g1> := <var:g1> * <nat:3> { <var:y> = <var:p> \land <var:g1> = <nat:3> * <var:p> \land <var:g0> = <nat:2> } { <var:y> = <var:p> \land <var:g1> = <nat:3> * <var:p> \land <var:g0> = <nat:2> } <var:h> := <var:g1{ <var:y> = <var:p> \land <var:g0> = <nat:2> \land <var:h> = <nat:3> * <var:p> } { <var:y> = <var:p> \land <var:g0> = <nat:2> \land <var:h> = <nat:3> * <var:p> } <var:h> := <var:h> + <var:g0{ <var:y> = <var:p> \land <var:h> = <nat:3> * <var:p> + <nat:2> } \end{verbatim} This is ensured using the variable binding law defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <var:g1> := <var:y> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:h> := <var:g1> <var:h> := <var:h> + <var:g0> {{ <var:h> = <nat:3> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:g1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:g1> = <var:p> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:g1> = <nat:3> * <var:p> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:g0> = <nat:2> /\ <var:h> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:h> = <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 