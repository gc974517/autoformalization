\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:F1> := <var:Q> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:7> ; <var:y> := <var:F1> <var:y> := <var:y> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Q> = <var:d> $ before the execution of our program then we see $ <var:y> = <nat:7> * <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be demonstrated through usual Hoare techniques . Moving onward , we have \verb | { <var:Q> = <var:d> } <var:F1> := <var:Q> { <var:Q> = <var:d> \land <var:F1> = <var:d> } | , \verb | { <var:Q> = <var:d> \land <var:F1> = <var:d> } <var:F0> := <nat:2> { <var:Q> = <var:d> \land <var:F1> = <var:d> \land <var:F0> = <nat:2> } | , \verb | { <var:Q> = <var:d> \land <var:F1> = <var:d> \land <var:F0> = <nat:2> } <var:F1> := <var:F1> * <nat:7> { <var:Q> = <var:d> \land <var:F1> = <nat:7> * <var:d> \land <var:F0> = <nat:2> } | and \verb | { <var:Q> = <var:d> \land <var:F1> = <nat:7> * <var:d> \land <var:F0> = <nat:2> } <var:y> := <var:F1{ <var:Q> = <var:d> \land <var:F0> = <nat:2> \land <var:y> = <nat:7> * <var:d> } | . Moving forward to the following statement seen in the list of commands , we see \verb | { <var:Q> = <var:d> } <var:F1> := <var:Q> { <var:Q> = <var:d> \land <var:F1> = <var:d> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F1> := <var:Q> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:7> ; <var:y> := <var:F1> <var:y> := <var:y> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Q> = <var:d> }} <def:poly> {{ <var:y> = <nat:7> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:F1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:F1> = <var:d> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:F1> = <nat:7> * <var:d> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:F0> = <nat:2> /\ <var:y> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:y> = <nat:7> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 