\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:E> ; <var:W2> := <var:W1> * <var:E> ; <var:W3> := <var:W2> * <var:E> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:9> ; <var:x> := <var:W3> <var:x> := <var:x> + <var:W2> <var:x> := <var:x> + <var:W1> <var:x> := <var:x> + <var:W0> \end{verbatim} Assuming it to be that $ <var:E> = <var:H> $ ( taking $ <var:H> $ ) prior to executing the code , it follows that we have $ <var:x> = <nat:9> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:9> \times <var:H> + <nat:3> $ after list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:H> \} \\ <var:W1> := <var:E> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <var:H> \} \\ <var:W2> := <var:W1> * <var:E> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:E> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:W1> := <var:W1> * <nat:9> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <nat:9> * <var:H> \land <var:W2> = <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:W2> := <var:W2> * <nat:2> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <nat:9> * <var:H> \land <var:W2> = <nat:2> * <var:H> ^ <nat:2> \land <var:W3> = <var:H> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:W3> := <var:W3> * <nat:9> ; \\ \{ <var:E> = <var:H> \land <var:W1> = <nat:9> * <var:H> \land <var:W2> = <nat:2> * <var:H> ^ <nat:2> \land <var:W3> = <nat:9> * <var:H> ^ <nat:3> \land <var:W0> = <nat:3> \} \\ <var:x> := <var:W3> \\ \{ <var:E> = <var:H> \land <var:W1> = <nat:9> * <var:H> \land <var:W2> = <nat:2> * <var:H> ^ <nat:2> \land <var:W0> = <nat:3> \land <var:x> = <nat:9> * <var:H> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:W2> \\ \{ <var:E> = <var:H> \land <var:W1> = <nat:9> * <var:H> \land <var:W0> = <nat:3> \land <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:W1> \\ \{ <var:E> = <var:H> \land <var:W0> = <nat:3> \land <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> \} \\ <var:x> := <var:x> + <var:W0> \\ \{ <var:E> = <var:H> \land <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:E> = <var:H> }} <var:W1> := <var:E> ; <var:W2> := <var:W1> * <var:E> ; <var:W3> := <var:W2> * <var:E> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:2> ; <var:W3> := <var:W3> * <nat:9> ; <var:x> := <var:W3> <var:x> := <var:x> + <var:W2> <var:x> := <var:x> + <var:W1> <var:x> := <var:x> + <var:W0> {{ <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:W3> = <var:H> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:W3> = <nat:9> * <var:H> ^ <nat:3> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:W0> = <nat:3> /\ <var:x> = <nat:9> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W1> = <nat:9> * <var:H> /\ <var:W0> = <nat:3> /\ <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:W0> = <nat:3> /\ <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:x> = <nat:9> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 