\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:v1> := <var:P> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:5> ; <var:t> := <var:v1> <var:t> := <var:t> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:P> = <var:o> $ given any positive integers $ <var:o> $ ahead of interpreting our series of commands , it must be that we see $ <var:t> = <nat:5> \cdot <var:o> + <nat:6> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:P> = <var:o> \} \\ <var:v1> := <var:P> ; \\ \{ <var:P> = <var:o> \land <var:v1> = <var:o> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:P> = <var:o> \land <var:v1> = <var:o> \land <var:v0> = <nat:6> \} \\ <var:v1> := <var:v1> * <nat:5> ; \\ \{ <var:P> = <var:o> \land <var:v1> = <nat:5> \times <var:o> \land <var:v0> = <nat:6> \} \\ <var:t> := <var:v1> \\ \{ <var:P> = <var:o> \land <var:v0> = <nat:6> \land <var:t> = <nat:5> \times <var:o> \} \\ <var:t> := <var:t> + <var:v0> \\ \{ <var:P> = <var:o> \land <var:t> = <nat:5> \times <var:o> + <nat:6> \} \end{eqnarray} As a result , our set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:P> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:5> ; <var:t> := <var:v1> <var:t> := <var:t> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <def:poly> {{ <var:t> = <nat:5> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:v1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:v1> = <var:o> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:v1> = <nat:5> * <var:o> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:v0> = <nat:6> /\ <var:t> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:t> = <nat:5> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 