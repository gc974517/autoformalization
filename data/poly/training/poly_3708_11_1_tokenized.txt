\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R3> := <var:R2> * <var:v> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:5> ; <var:W> := <var:R3> <var:W> := <var:W> + <var:R2> <var:W> := <var:W> + <var:R1> <var:W> := <var:W> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:v> = <var:q> $ , given natural numbers $ <var:q> $ , prior to the execution of our set of commands , it follows that $ <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:7> $ when list of instructions finishes . \end{theorem} \begin{proof} Observe the following decorated set of commands . \begin{eqnarray} \{ <var:v> = <var:q> \} \\ <var:R1> := <var:v> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <var:q> \} \\ <var:R2> := <var:R1> * <var:v> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:v> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R0> = <nat:7> \} \\ <var:R1> := <var:R1> * <nat:8> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <nat:8> * <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R0> = <nat:7> \} \\ <var:R2> := <var:R2> * <nat:5> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <nat:8> * <var:q> \land <var:R2> = <nat:5> * <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R0> = <nat:7> \} \\ <var:R3> := <var:R3> * <nat:5> ; \\ \{ <var:v> = <var:q> \land <var:R1> = <nat:8> * <var:q> \land <var:R2> = <nat:5> * <var:q> ^ <nat:2> \land <var:R3> = <nat:5> * <var:q> ^ <nat:3> \land <var:R0> = <nat:7> \} \\ <var:W> := <var:R3> \\ \{ <var:v> = <var:q> \land <var:R1> = <nat:8> * <var:q> \land <var:R2> = <nat:5> * <var:q> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:W> = <nat:5> * <var:q> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:R2> \\ \{ <var:v> = <var:q> \land <var:R1> = <nat:8> * <var:q> \land <var:R0> = <nat:7> \land <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:R1> \\ \{ <var:v> = <var:q> \land <var:R0> = <nat:7> \land <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> \} \\ <var:W> := <var:W> + <var:R0> \\ \{ <var:v> = <var:q> \land <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:7> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R3> := <var:R2> * <var:v> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:8> ; <var:R2> := <var:R2> * <nat:5> ; <var:R3> := <var:R3> * <nat:5> ; <var:W> := <var:R3> <var:W> := <var:W> + <var:R2> <var:W> := <var:W> + <var:R1> <var:W> := <var:W> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:v> = <var:q> }} <def:poly> {{ <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <nat:8> * <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <nat:8> * <var:q> /\ <var:R2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <nat:8> * <var:q> /\ <var:R2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:R3> = <nat:5> * <var:q> ^ <nat:3> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <nat:8> * <var:q> /\ <var:R2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:R0> = <nat:7> /\ <var:W> = <nat:5> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R1> = <nat:8> * <var:q> /\ <var:R0> = <nat:7> /\ <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:R0> = <nat:7> /\ <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:q> /\ <var:W> = <nat:5> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 