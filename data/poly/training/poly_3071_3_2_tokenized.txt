\begin{document} \begin{theorem} Take a program as follows \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> \end{verbatim} Allow that $ <var:A> = <var:k> $ prior to interpreting this list of instructions it follows that $ <var:h> = <nat:4> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:3> $ after segment of code is done . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:A> = <var:k> \} \\ <var:h> := <nat:4> ; \\ \{ <var:A> = <var:k> \land <var:h> = <nat:4> \} \\ <var:h> := <nat:2> + <var:h> * <var:A> ; \\ \{ <var:A> = <var:k> \land <var:h> = <nat:4> * <var:k> + <nat:2> \} \\ <var:h> := <nat:3> + <var:h> * <var:A> \\ \{ <var:A> = <var:k> \land <var:h> = <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> \} \end{eqnarray} Thusly , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> {{ <var:h> = <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:h> = <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:h> = <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 