\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:3> ; <var:I> := <var:w0> \end{verbatim} Assume $ <var:R> = <var:F> $ given some positive coefficients $ <var:F> $ before evaluating this program it must be that we have $ <var:I> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:F> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:R> = <var:F> \land <var:w0> = <nat:3> \} \\ <var:I> := <var:w0> \\ \{ <var:R> = <var:F> \land <var:I> = <nat:3> \} \end{eqnarray} The application of typical Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:R> = <var:F> }} <var:w0> := <nat:3> ; <var:I> := <var:w0> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:F> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 