\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:h> ; <var:G> := <var:t1> ; <var:G> := <var:G> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Assuming that we have $ <var:h> = <var:v> $ , taking positive numbers $ <var:v> $ , prior to executing the series of instructions , then $ <var:G> = <nat:4> \cdot <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is shown through Hoare techniques . Next , the environment update command \verb | <var:t0> := <nat:3> ; | . This transfers the precondition $ \{ <var:h> = <var:v> \} $ to the condition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \} $ . This is rigorously given using the assignment scheme given by standard Hoare techniques . Looking at the subsequent piece of code in the code segment , we see the variable assignmet command giving $ <nat:4> $ as $ <var:t1>$ . This forwards the precondition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \} $ to $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} $ . This is guaranteed with the assignment scheme obtained from typical Hoare reasoning . Moving on to the next step , we see the variable update command yielding $ <var:t1> * <var:h> $ as $ <var:t1>$ . This takes the condition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> \} $ toward the condition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> * <var:v> \} $ . This is shown by the assignment law obtained from Hoare techniques . Immediately following , we have the binding statement giving $ <var:t1> $ to $ <var:G>$ . This transfers the condition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:t1> = <nat:4> * <var:v> \} $ toward $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:G> = <nat:4> * <var:v> \} $ . This is given with the assignment scheme given by usual Hoare logic . Focusing on the subsequent statement in the set of instructions , we have the variable assignmet statement letting $ <var:G> + <var:t0$ toward $ <var:G>$ . This advances the condition $ \{ <var:h> = <var:v> \land <var:t0> = <nat:3> \land <var:G> = <nat:4> * <var:v> \} $ as the condition $ \{ <var:h> = <var:v> \land <var:G> = <nat:4> * <var:v> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:t1> := <nat:4> ; <var:t1> := <var:t1> * <var:h> ; <var:G> := <var:t1> ; <var:G> := <var:G> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:h> = <var:v> }} <def:poly> {{ <var:G> = <nat:4> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:t0> = <nat:3> /\ <var:t1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:t0> = <nat:3> /\ <var:G> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:G> = <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 