\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:S> ; <var:V2> := <var:V1> * <var:S> ; <var:V3> := <var:V2> * <var:S> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:5> ; <var:V3> := <var:V3> * <nat:7> ; <var:w> := <var:V3> <var:w> := <var:w> + <var:V2> <var:w> := <var:w> + <var:V1> <var:w> := <var:w> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:S> = <var:L> $ , for natural numbers $ <var:L> $ , ahead of running the list of instructions , it holds that we see $ <var:w> = <nat:7> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:L> \} \\ <var:V1> := <var:S> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <var:L> \} \\ <var:V2> := <var:V1> * <var:S> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:S> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \} \\ <var:V0> := <nat:7> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:7> \} \end{eqnarray} Allowing the execution of the list of instructions gives us : \begin{eqnarray} <var:V1> := <var:V1> * <nat:9> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <nat:9> \cdot <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:7> \} \\ <var:V2> := <var:V2> * <nat:5> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <nat:9> \cdot <var:L> \land <var:V2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:7> \} \\ <var:V3> := <var:V3> * <nat:7> ; \\ \{ <var:S> = <var:L> \land <var:V1> = <nat:9> \cdot <var:L> \land <var:V2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:V3> = <nat:7> \cdot <var:L> ^ <nat:3> \land <var:V0> = <nat:7> \} \end{eqnarray} Allowing interpreting this list of instructions gives us : \begin{eqnarray} <var:w> := <var:V3> \\ \{ <var:S> = <var:L> \land <var:V1> = <nat:9> \cdot <var:L> \land <var:V2> = <nat:5> \cdot <var:L> ^ <nat:2> \land <var:V0> = <nat:7> \land <var:w> = <nat:7> \cdot <var:L> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:V2> \\ \{ <var:S> = <var:L> \land <var:V1> = <nat:9> \cdot <var:L> \land <var:V0> = <nat:7> \land <var:w> = <nat:7> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:V1> \\ \{ <var:S> = <var:L> \land <var:V0> = <nat:7> \land <var:w> = <nat:7> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> \} \\ <var:w> := <var:w> + <var:V0> \\ \{ <var:S> = <var:L> \land <var:w> = <nat:7> \cdot <var:L> ^ <nat:3> + <nat:5> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:S> ; <var:V2> := <var:V1> * <var:S> ; <var:V3> := <var:V2> * <var:S> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:9> ; <var:V2> := <var:V2> * <nat:5> ; <var:V3> := <var:V3> * <nat:7> ; <var:w> := <var:V3> <var:w> := <var:w> + <var:V2> <var:w> := <var:w> + <var:V1> <var:w> := <var:w> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <def:poly> {{ <var:w> = <nat:7> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <nat:9> * <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <nat:9> * <var:L> /\ <var:V2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <nat:9> * <var:L> /\ <var:V2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:V3> = <nat:7> * <var:L> ^ <nat:3> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <nat:9> * <var:L> /\ <var:V2> = <nat:5> * <var:L> ^ <nat:2> /\ <var:V0> = <nat:7> /\ <var:w> = <nat:7> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V1> = <nat:9> * <var:L> /\ <var:V0> = <nat:7> /\ <var:w> = <nat:7> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:V0> = <nat:7> /\ <var:w> = <nat:7> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:w> = <nat:7> * <var:L> ^ <nat:3> + <nat:5> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 