\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:2> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:v> ; <var:e> := <var:A1> ; <var:e> := <var:e> + <var:A0> \end{verbatim} Allow $ <var:v> = <var:s> $ before executing the set of commands then $ <var:e> = <nat:1> \cdot <var:s> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:v> = <var:s> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:v> = <var:s> \land <var:A0> = <nat:2> \} \\ <var:A1> := <nat:1> ; \\ \{ <var:v> = <var:s> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \} \\ <var:A1> := <var:A1> * <var:v> ; \\ \{ <var:v> = <var:s> \land <var:A0> = <nat:2> \land <var:A1> = <nat:1> \cdot <var:s> \} \\ <var:e> := <var:A1> ; \\ \{ <var:v> = <var:s> \land <var:A0> = <nat:2> \land <var:e> = <nat:1> \cdot <var:s> \} \\ <var:e> := <var:e> + <var:A0> \\ \{ <var:v> = <var:s> \land <var:e> = <nat:1> \cdot <var:s> + <nat:2> \} \end{eqnarray} Thus , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:v> = <var:s> }} <var:A0> := <nat:2> ; <var:A1> := <nat:1> ; <var:A1> := <var:A1> * <var:v> ; <var:e> := <var:A1> ; <var:e> := <var:e> + <var:A0> {{ <var:e> = <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:A0> = <nat:2> /\ <var:A1> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:A0> = <nat:2> /\ <var:e> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:s> /\ <var:e> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 