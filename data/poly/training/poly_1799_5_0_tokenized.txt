\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:5> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:j> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for some integers $ <var:Q> $ , it to be that $ <var:j> = <var:Q> $ prior to evaluating our series of instructions it follows that we have $ <var:W> = <nat:8> \times <var:Q> + <nat:5> $ . \end{theorem} \begin{proof} The proof of our code segment can be demonstrated using this decorated code segment . \begin{eqnarray} \{ <var:j> = <var:Q> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:j> = <var:Q> \land <var:X0> = <nat:5> \} \\ <var:X1> := <nat:8> ; \\ \{ <var:j> = <var:Q> \land <var:X0> = <nat:5> \land <var:X1> = <nat:8> \} \\ <var:X1> := <var:X1> * <var:j> ; \\ \{ <var:j> = <var:Q> \land <var:X0> = <nat:5> \land <var:X1> = <nat:8> \times <var:Q> \} \\ <var:W> := <var:X1> ; \\ \{ <var:j> = <var:Q> \land <var:X0> = <nat:5> \land <var:W> = <nat:8> \times <var:Q> \} \\ <var:W> := <var:W> + <var:X0> \\ \{ <var:j> = <var:Q> \land <var:W> = <nat:8> \times <var:Q> + <nat:5> \} \end{eqnarray} The application of standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X0> := <nat:5> ; <var:X1> := <nat:8> ; <var:X1> := <var:X1> * <var:j> ; <var:W> := <var:X1> ; <var:W> := <var:W> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:j> = <var:Q> }} <def:poly> {{ <var:W> = <nat:8> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:X0> = <nat:5> /\ <var:W> = <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Q> /\ <var:W> = <nat:8> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 