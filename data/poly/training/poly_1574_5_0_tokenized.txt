\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:u> ; <var:B> := <var:b1> ; <var:B> := <var:B> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Assume that we have $ <var:u> = <var:M> $ before executing our series of instructions it must be that $ <var:B> = <nat:2> * <var:M> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for our code segment is accomplished by typical Hoare techniques . Moving forward to the proceeding commands found in the series of instructions , we have \verb | { <var:u> = <var:M> } <var:b0> := <nat:6> { <var:u> = <var:M> \land <var:b0> = <nat:6> } | and \verb | { <var:u> = <var:M> \land <var:b0> = <nat:6> } <var:b1> := <nat:2> { <var:u> = <var:M> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> } | . Focusing on the proceeding steps contained in the segment of code , we have \verb | { <var:u> = <var:M> } <var:b0> := <nat:6> { <var:u> = <var:M> \land <var:b0> = <nat:6> } | and \verb | { <var:u> = <var:M> \land <var:b0> = <nat:6> } <var:b1> := <nat:2> { <var:u> = <var:M> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> } | . Considering the following statement in our series of commands , we have \verb | { <var:u> = <var:M> } <var:b0> := <nat:6> { <var:u> = <var:M> \land <var:b0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:u> ; <var:B> := <var:b1> ; <var:B> := <var:B> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:u> = <var:M> }} <def:poly> {{ <var:B> = <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:b0> = <nat:6> /\ <var:B> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:M> /\ <var:B> = <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 