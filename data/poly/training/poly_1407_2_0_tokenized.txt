\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:4> ; <var:Y> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:D> = <var:R> $ --- for some whole numbers $ <var:R> $ --- ahead of executing the segment of code it follows that we see $ <var:Y> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the series of instructions can be demonstrated using standard Hoare logic . Now , we see \verb | { <var:D> = <var:R> } <var:k0> := <nat:4> { <var:D> = <var:R> \land <var:k0> = <nat:4> } | and \verb | { <var:D> = <var:R> \land <var:k0> = <nat:4> } <var:Y> := <var:k0{ <var:D> = <var:R> \land <var:Y> = <nat:4> } | . This is sound by the variable update scheme given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:Y> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:D> = <var:R> }} <def:poly> {{ <var:Y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:Y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 