\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:V0> := <nat:7> ; <var:n> := <var:V0> \end{verbatim} Assuming it to be that $ <var:f> = <var:i> $ before the evaluation of this program then we have $ <var:n> = <nat:7> $ . \end{theorem} \begin{proof} The proof of our series of commands is demonstrated with Hoare logic . Advancing to the next step , the statement \verb | <var:V0> := <nat:7> ; | . This code redefines the condition $ \{ <var:f> = <var:i> \} $ as the condition $ \{ <var:f> = <var:i> \land <var:V0> = <nat:7> \} $ . This is given by the assignment law obtained from usual Hoare techniques . Moving on , the binding code yielding $ <var:V0$ as $ <var:n>$ . This command redefines the precondition $ \{ <var:f> = <var:i> \land <var:V0> = <nat:7> \} $ to the condition $ \{ <var:f> = <var:i> \land <var:n> = <nat:7> \} $ . This is rigorously given through the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:f> = <var:i> }} <var:V0> := <nat:7> ; <var:n> := <var:V0> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 