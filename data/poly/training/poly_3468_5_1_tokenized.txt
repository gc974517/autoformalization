\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:G> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:W> := <var:K1> <var:W> := <var:W> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:G> = <var:s> $ ahead of the execution of this segment of code then we see $ <var:W> = <nat:2> \cdot <var:s> + <nat:6> $ after set of instructions has terminated . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:G> = <var:s> \} \\ <var:K1> := <var:G> ; \\ \{ <var:G> = <var:s> \land <var:K1> = <var:s> \} \\ <var:K0> := <nat:6> ; \\ \{ <var:G> = <var:s> \land <var:K1> = <var:s> \land <var:K0> = <nat:6> \} \\ <var:K1> := <var:K1> * <nat:2> ; \\ \{ <var:G> = <var:s> \land <var:K1> = <nat:2> * <var:s> \land <var:K0> = <nat:6> \} \\ <var:W> := <var:K1> \\ \{ <var:G> = <var:s> \land <var:K0> = <nat:6> \land <var:W> = <nat:2> * <var:s> \} \\ <var:W> := <var:W> + <var:K0> \\ \{ <var:G> = <var:s> \land <var:W> = <nat:2> * <var:s> + <nat:6> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K1> := <var:G> ; <var:K0> := <nat:6> ; <var:K1> := <var:K1> * <nat:2> ; <var:W> := <var:K1> <var:W> := <var:W> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:G> = <var:s> }} <def:poly> {{ <var:W> = <nat:2> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:K1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:K1> = <var:s> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:K1> = <nat:2> * <var:s> /\ <var:K0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:K0> = <nat:6> /\ <var:W> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:s> /\ <var:W> = <nat:2> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 