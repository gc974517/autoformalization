\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:9> ; <var:e> := <var:N3> <var:e> := <var:e> + <var:N2> <var:e> := <var:e> + <var:N1> <var:e> := <var:e> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Allow $ <var:T> = <var:P> $ prior to the evaluation of our code segment it follows that we have $ <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:4> $ after list of instructions finishes . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:T> = <var:P> \} \\ <var:N1> := <var:T> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <var:P> \} \\ <var:N2> := <var:N1> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:T> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N3> = <var:P> ^ <nat:3> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N3> = <var:P> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:5> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <nat:5> * <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N3> = <var:P> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N2> := <var:N2> * <nat:8> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <nat:5> * <var:P> \land <var:N2> = <nat:8> * <var:P> ^ <nat:2> \land <var:N3> = <var:P> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:N3> := <var:N3> * <nat:9> ; \\ \{ <var:T> = <var:P> \land <var:N1> = <nat:5> * <var:P> \land <var:N2> = <nat:8> * <var:P> ^ <nat:2> \land <var:N3> = <nat:9> * <var:P> ^ <nat:3> \land <var:N0> = <nat:4> \} \\ <var:e> := <var:N3> \\ \{ <var:T> = <var:P> \land <var:N1> = <nat:5> * <var:P> \land <var:N2> = <nat:8> * <var:P> ^ <nat:2> \land <var:N0> = <nat:4> \land <var:e> = <nat:9> * <var:P> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:N2> \\ \{ <var:T> = <var:P> \land <var:N1> = <nat:5> * <var:P> \land <var:N0> = <nat:4> \land <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:N1> \\ \{ <var:T> = <var:P> \land <var:N0> = <nat:4> \land <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> \} \\ <var:e> := <var:e> + <var:N0> \\ \{ <var:T> = <var:P> \land <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:4> \} \end{eqnarray} As a result , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N1> := <var:T> ; <var:N2> := <var:N1> * <var:T> ; <var:N3> := <var:N2> * <var:T> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:9> ; <var:e> := <var:N3> <var:e> := <var:e> + <var:N2> <var:e> := <var:e> + <var:N1> <var:e> := <var:e> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:T> = <var:P> }} <def:poly> {{ <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <var:P> /\ <var:N2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <var:P> /\ <var:N2> = <var:P> ^ <nat:2> /\ <var:N3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <var:P> /\ <var:N2> = <var:P> ^ <nat:2> /\ <var:N3> = <var:P> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <nat:5> * <var:P> /\ <var:N2> = <var:P> ^ <nat:2> /\ <var:N3> = <var:P> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <nat:5> * <var:P> /\ <var:N2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:N3> = <var:P> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <nat:5> * <var:P> /\ <var:N2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:P> ^ <nat:3> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <nat:5> * <var:P> /\ <var:N2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:N0> = <nat:4> /\ <var:e> = <nat:9> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N1> = <nat:5> * <var:P> /\ <var:N0> = <nat:4> /\ <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:N0> = <nat:4> /\ <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:P> /\ <var:e> = <nat:9> * <var:P> ^ <nat:3> + <nat:8> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 