\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:g0> := <nat:9> ; <var:b> := <var:g0> \end{verbatim} Assume that $ <var:H> = <var:X> $ before evaluating this set of instructions , it follows that we have $ <var:b> = <nat:9> $ after set of commands terminates . \end{theorem} \begin{proof} The method of proof for the segment of code is evident by standard Hoare reasoning . Taking a look at the next steps in our series of commands , we see \verb | { <var:H> = <var:X> } <var:g0> := <nat:9> { <var:H> = <var:X> \land <var:g0> = <nat:9> } | and \verb | { <var:H> = <var:X> \land <var:g0> = <nat:9> } <var:b> := <var:g0{ <var:H> = <var:X> \land <var:b> = <nat:9> } | . This is known to be sound through the inference rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:H> = <var:X> }} <var:g0> := <nat:9> ; <var:b> := <var:g0> {{ <var:b> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:X> /\ <var:b> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 