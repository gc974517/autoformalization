\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:k1> := <var:i> ; <var:k2> := <var:k1> * <var:i> ; <var:k3> := <var:k2> * <var:i> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:5> ; <var:q> := <var:k3> <var:q> := <var:q> + <var:k2> <var:q> := <var:q> + <var:k1> <var:q> := <var:q> + <var:k0> \end{verbatim} Assume ( given every positive integer coefficients $ <var:V> $ ) that we have $ <var:i> = <var:V> $ ahead of the execution of the code , it follows that we see $ <var:q> = <nat:5> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:5> \times <var:V> + <nat:9> $ when code is done executing . \end{theorem} \begin{proof} The argument for this set of instructions is given using Hoare logic . Advancing to the subsequent bit of code seen in our code segment , we have the assignment code \verb | <var:k1> := <var:i> ; | . This code transfers $ \{ <var:i> = <var:V> \} $ to the condition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \} $ . Honing in on the next line of code in the segment of code , we have the command \verb | <var:k2> := <var:k1> * <var:i> ; | . This command redefines the condition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \} $ to the postcondition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \} $ . Moving on , we have the assignment command defining $ <var:k2> * <var:i> $ to $ <var:k3>$ . This advances the condition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \} $ into $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \} $ . Honing in on the subsequent step seen in the set of commands , we see the binding code \verb | <var:k0> := <nat:9> ; | . This redefines the precondition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \} $ as the postcondition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Next , we see the line letting $ <var:k1> * <nat:5> $ toward $ <var:k1>$ . This transfers the condition $ \{ <var:i> = <var:V> \land <var:k1> = <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ as $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Taking a look at the following statement contained in the series of commands , we see the variable assignmet statement yielding $ <var:k2> * <nat:4> $ as $ <var:k2>$ . This forwards the condition $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ as $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Moving on to the next step , the variable assignmet line yielding $ <var:k3> * <nat:5> $ into $ <var:k3>$ . This moves $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k3> = <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ toward the postcondition $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k3> = <nat:5> * <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ . Advancing on , the variable update statement binding $ <var:k3$ to $ <var:q>$ . This code takes the condition $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k3> = <nat:5> * <var:V> ^ <nat:3> \land <var:k0> = <nat:9> \} $ to $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> \} $ . Paying attention to the subsequent command contained in our set of commands , we see the variable update code assigning $ <var:q> + <var:k2$ to $ <var:q>$ . This transfers the condition $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> \} $ as $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> \} $ . This is sound through the assignment scheme defined by typical Hoare techniques . Stepping through , the variable update code letting $ <var:q> + <var:k1$ as $ <var:q>$ . This line advances the precondition $ \{ <var:i> = <var:V> \land <var:k1> = <nat:5> * <var:V> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:i> = <var:V> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> \} $ . Advancing to the next step , the variable update code \verb | <var:q> := <var:q> + <var:k0> | . This command transfers the condition $ \{ <var:i> = <var:V> \land <var:k0> = <nat:9> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> \} $ as the condition $ \{ <var:i> = <var:V> \land <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <var:k1> := <var:i> ; <var:k2> := <var:k1> * <var:i> ; <var:k3> := <var:k2> * <var:i> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:5> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:5> ; <var:q> := <var:k3> <var:q> := <var:q> + <var:k2> <var:q> := <var:q> + <var:k1> <var:q> := <var:q> + <var:k0> {{ <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <var:V> /\ <var:k2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <var:V> /\ <var:k2> = <var:V> ^ <nat:2> /\ <var:k3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <var:V> /\ <var:k2> = <var:V> ^ <nat:2> /\ <var:k3> = <var:V> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <nat:5> * <var:V> /\ <var:k2> = <var:V> ^ <nat:2> /\ <var:k3> = <var:V> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <nat:5> * <var:V> /\ <var:k2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:k3> = <var:V> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <nat:5> * <var:V> /\ <var:k2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <nat:5> * <var:V> /\ <var:k2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:k0> = <nat:9> /\ <var:q> = <nat:5> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k1> = <nat:5> * <var:V> /\ <var:k0> = <nat:9> /\ <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:k0> = <nat:9> /\ <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:q> = <nat:5> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:5> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 