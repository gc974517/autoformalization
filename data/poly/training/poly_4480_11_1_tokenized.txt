\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:e> ; <var:b2> := <var:b1> * <var:e> ; <var:b3> := <var:b2> * <var:e> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:5> ; <var:b3> := <var:b3> * <nat:1> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> \end{verbatim} Assuming $ <var:e> = <var:k> $ --- given all positive numbers $ <var:k> $ --- before interpreting the code , it holds that $ <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> $ after set of instructions has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be seen through this decorated code . \begin{eqnarray} \{ <var:e> = <var:k> \} \\ <var:b1> := <var:e> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <var:k> \} \\ <var:b2> := <var:b1> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <var:k> \land <var:b2> = <var:k> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <var:k> \land <var:b2> = <var:k> ^ <nat:2> \land <var:b3> = <var:k> ^ <nat:3> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <var:k> \land <var:b2> = <var:k> ^ <nat:2> \land <var:b3> = <var:k> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:3> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <nat:3> * <var:k> \land <var:b2> = <var:k> ^ <nat:2> \land <var:b3> = <var:k> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b2> := <var:b2> * <nat:5> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <nat:3> * <var:k> \land <var:b2> = <nat:5> * <var:k> ^ <nat:2> \land <var:b3> = <var:k> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:b3> := <var:b3> * <nat:1> ; \\ \{ <var:e> = <var:k> \land <var:b1> = <nat:3> * <var:k> \land <var:b2> = <nat:5> * <var:k> ^ <nat:2> \land <var:b3> = <nat:1> * <var:k> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ <var:T> := <var:b3> \\ \{ <var:e> = <var:k> \land <var:b1> = <nat:3> * <var:k> \land <var:b2> = <nat:5> * <var:k> ^ <nat:2> \land <var:b0> = <nat:3> \land <var:T> = <nat:1> * <var:k> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:b2> \\ \{ <var:e> = <var:k> \land <var:b1> = <nat:3> * <var:k> \land <var:b0> = <nat:3> \land <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:b1> \\ \{ <var:e> = <var:k> \land <var:b0> = <nat:3> \land <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> \} \\ <var:T> := <var:T> + <var:b0> \\ \{ <var:e> = <var:k> \land <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:e> = <var:k> }} <var:b1> := <var:e> ; <var:b2> := <var:b1> * <var:e> ; <var:b3> := <var:b2> * <var:e> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:3> ; <var:b2> := <var:b2> * <nat:5> ; <var:b3> := <var:b3> * <nat:1> ; <var:T> := <var:b3> <var:T> := <var:T> + <var:b2> <var:T> := <var:T> + <var:b1> <var:T> := <var:T> + <var:b0> {{ <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <var:k> /\ <var:b2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <var:k> /\ <var:b2> = <var:k> ^ <nat:2> /\ <var:b3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <var:k> /\ <var:b2> = <var:k> ^ <nat:2> /\ <var:b3> = <var:k> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <nat:3> * <var:k> /\ <var:b2> = <var:k> ^ <nat:2> /\ <var:b3> = <var:k> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <nat:3> * <var:k> /\ <var:b2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:b3> = <var:k> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <nat:3> * <var:k> /\ <var:b2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:k> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <nat:3> * <var:k> /\ <var:b2> = <nat:5> * <var:k> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:1> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b1> = <nat:3> * <var:k> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:b0> = <nat:3> /\ <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:T> = <nat:1> * <var:k> ^ <nat:3> + <nat:5> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 