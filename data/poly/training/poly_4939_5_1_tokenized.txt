\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:d> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:6> ; <var:b> := <var:M1> <var:b> := <var:b> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:d> = <var:j> $ prior to the execution of our segment of code , then $ <var:b> = <nat:6> \cdot <var:j> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:j> \} \\ <var:M1> := <var:d> ; \\ \{ <var:d> = <var:j> \land <var:M1> = <var:j> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:d> = <var:j> \land <var:M1> = <var:j> \land <var:M0> = <nat:9> \} \\ <var:M1> := <var:M1> * <nat:6> ; \\ \{ <var:d> = <var:j> \land <var:M1> = <nat:6> \cdot <var:j> \land <var:M0> = <nat:9> \} \\ <var:b> := <var:M1> \\ \{ <var:d> = <var:j> \land <var:M0> = <nat:9> \land <var:b> = <nat:6> \cdot <var:j> \} \\ <var:b> := <var:b> + <var:M0> \\ \{ <var:d> = <var:j> \land <var:b> = <nat:6> \cdot <var:j> + <nat:9> \} \end{eqnarray} Utilizing Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:d> ; <var:M0> := <nat:9> ; <var:M1> := <var:M1> * <nat:6> ; <var:b> := <var:M1> <var:b> := <var:b> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:d> = <var:j> }} <def:poly> {{ <var:b> = <nat:6> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:M1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:M1> = <var:j> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:M1> = <nat:6> * <var:j> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:M0> = <nat:9> /\ <var:b> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:j> /\ <var:b> = <nat:6> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 