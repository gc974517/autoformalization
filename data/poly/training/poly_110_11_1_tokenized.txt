\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:l> ; <var:u2> := <var:u1> * <var:l> ; <var:u3> := <var:u2> * <var:l> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:8> ; <var:u3> := <var:u3> * <nat:8> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:l> = <var:r> $ ahead of executing this program , it holds that we have $ <var:A> = <nat:8> \times <var:r> ^ <nat:3> + <nat:8> \times <var:r> ^ <nat:2> + <nat:8> \times <var:r> + <nat:6> $ once code has terminated . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is evident with usual Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:l> = <var:r> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \, <var:u3> := <var:u2> * <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} \, <var:u0> := <nat:6> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u0> = <nat:6> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u0> = <nat:6> \} \, <var:u1> := <var:u1> * <nat:8> \, \{ <var:l> = <var:r> \land <var:u1> = <nat:8> * <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u0> = <nat:6> \} \end{eqnarray} Advancing to the subsequent pieces of code contained in our segment of code , \begin{eqnarray} \{ <var:l> = <var:r> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \end{eqnarray} Honing in on the following lines seen in the set of commands , we see \begin{eqnarray} \{ <var:l> = <var:r> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \end{eqnarray} Moving on to the next step , \begin{eqnarray} \{ <var:l> = <var:r> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \\ \{ <var:l> = <var:r> \land <var:u1> = <var:r> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:l> ; <var:u2> := <var:u1> * <var:l> ; <var:u3> := <var:u2> * <var:l> ; <var:u0> := <nat:6> ; <var:u1> := <var:u1> * <nat:8> ; <var:u2> := <var:u2> * <nat:8> ; <var:u3> := <var:u3> * <nat:8> ; <var:A> := <var:u3> <var:A> := <var:A> + <var:u2> <var:A> := <var:A> + <var:u1> <var:A> := <var:A> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:l> = <var:r> }} <def:poly> {{ <var:A> = <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <nat:8> * <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <nat:8> * <var:r> /\ <var:u2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <nat:8> * <var:r> /\ <var:u2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <nat:8> * <var:r> /\ <var:u2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:u0> = <nat:6> /\ <var:A> = <nat:8> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u1> = <nat:8> * <var:r> /\ <var:u0> = <nat:6> /\ <var:A> = <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:u0> = <nat:6> /\ <var:A> = <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:r> /\ <var:A> = <nat:8> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ^ <nat:2> + <nat:8> * <var:r> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 