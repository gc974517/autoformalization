\begin{document} \begin{theorem} Consider a series of commands as \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:L> ; <var:y> := <var:z1> ; <var:y> := <var:y> + <var:z0> \end{verbatim} Allowing for every whole numbers $ <var:x> $ it to hold that $ <var:L> = <var:x> $ prior to interpreting this program , it follows that $ <var:y> = <nat:8> \times <var:x> + <nat:1> $ once series of instructions has exited . \end{theorem} \begin{proof} Proving correctness for the series of commands is demonstrated using standard Hoare reasoning . Focusing on the next steps contained in the program , we see \begin{verbatim} { <var:L> = <var:x> } <var:z0> := <nat:1> { <var:L> = <var:x> \land <var:z0> = <nat:1> } { <var:L> = <var:x> \land <var:z0> = <nat:1> } <var:z1> := <nat:8> { <var:L> = <var:x> \land <var:z0> = <nat:1> \land <var:z1> = <nat:8> } \end{verbatim} This is rigorously given by the variable update inference rule given by standard Hoare techniques . Keeping momentum , we have \begin{verbatim} { <var:L> = <var:x> } <var:z0> := <nat:1> { <var:L> = <var:x> \land <var:z0> = <nat:1> } { <var:L> = <var:x> \land <var:z0> = <nat:1> } <var:z1> := <nat:8> { <var:L> = <var:x> \land <var:z0> = <nat:1> \land <var:z1> = <nat:8> } \end{verbatim} This is sound with the variable update scheme of standard Hoare reasoning . Taking another step toward the following step in the segment of code , we have \begin{verbatim} { <var:L> = <var:x> } <var:z0> := <nat:1> { <var:L> = <var:x> \land <var:z0> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:L> = <var:x> }} <var:z0> := <nat:1> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:L> ; <var:y> := <var:z1> ; <var:y> := <var:y> + <var:z0> {{ <var:y> = <nat:8> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:z0> = <nat:1> /\ <var:y> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:y> = <nat:8> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 