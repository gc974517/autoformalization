\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:f> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:f> ; <var:d2> := <var:d2> * <var:f> ; <var:k> := <var:d2> ; <var:k> := <var:k> + <var:d1> ; <var:k> := <var:k> + <var:d0> \end{verbatim} Allowing that $ <var:f> = <var:v> $ --- letting natural coefficients $ <var:v> $ --- before the execution of our segment of code it holds that we see $ <var:k> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is given using Hoare reasoning . Paying attention to the next pieces of code found in the series of commands , we have \verb | { <var:f> = <var:v> } <var:d0> := <nat:1> { <var:f> = <var:v> \land <var:d0> = <nat:1> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> } <var:d1> := <nat:7> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> } <var:d1> := <var:d1> * <var:f> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> } <var:d2> := <nat:8> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> } <var:d2> := <var:d2> * <var:f> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> \times <var:v> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> \times <var:v> } <var:d2> := <var:d2> * <var:f> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> \times <var:v> ^ <nat:2> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:d2> = <nat:8> \times <var:v> ^ <nat:2> } <var:k> := <var:d2> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:k> = <nat:8> \times <var:v> ^ <nat:2> } | , \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:d1> = <nat:7> \times <var:v> \land <var:k> = <nat:8> \times <var:v> ^ <nat:2> } <var:k> := <var:k> + <var:d1> { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:k> = <nat:8> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> } | and \verb | { <var:f> = <var:v> \land <var:d0> = <nat:1> \land <var:k> = <nat:8> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> } <var:k> := <var:k> + <var:d0{ <var:f> = <var:v> \land <var:k> = <nat:8> \times <var:v> ^ <nat:2> + <nat:7> \times <var:v> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:f> = <var:v> }} <var:d0> := <nat:1> ; <var:d1> := <nat:7> ; <var:d1> := <var:d1> * <var:f> ; <var:d2> := <nat:8> ; <var:d2> := <var:d2> * <var:f> ; <var:d2> := <var:d2> * <var:f> ; <var:k> := <var:d2> ; <var:k> := <var:k> + <var:d1> ; <var:k> := <var:k> + <var:d0> {{ <var:k> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:v> /\ <var:d2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:v> /\ <var:d2> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:v> /\ <var:d2> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:7> * <var:v> /\ <var:k> = <nat:8> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:d0> = <nat:1> /\ <var:k> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:k> = <nat:8> * <var:v> ^ <nat:2> + <nat:7> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 