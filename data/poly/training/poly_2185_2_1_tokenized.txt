\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:4> ; <var:O> := <var:j0> \end{verbatim} Allow it to be that $ <var:M> = <var:F> $ before the execution of this code segment , it must be that we have $ <var:O> = <nat:4> $ after segment of code exits . \end{theorem} \begin{proof} The proof of the code is clear through standard Hoare reasoning . Taking a look at the following step contained in our set of commands , we see the command \verb | <var:j0> := <nat:4> ; | . This advances the condition $ \{ <var:M> = <var:F> \} $ to the condition $ \{ <var:M> = <var:F> \land <var:j0> = <nat:4> \} $ . This is given with the assignment rule given in standard Hoare logic . Looking at the following statement seen in our code , we have the variable binding command yielding $ <var:j0$ to $ <var:O>$ . This statement transfers the condition $ \{ <var:M> = <var:F> \land <var:j0> = <nat:4> \} $ toward $ \{ <var:M> = <var:F> \land <var:O> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:M> = <var:F> }} <var:j0> := <nat:4> ; <var:O> := <var:j0> {{ <var:O> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:O> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 