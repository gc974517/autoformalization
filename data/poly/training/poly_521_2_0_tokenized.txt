\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:r0> := <nat:2> ; <var:R> := <var:r0> \end{verbatim} Allow ( given any whole numbers $ <var:x> $ ) it to be that $ <var:U> = <var:x> $ ahead of the execution of this list of commands , it must be that we have $ <var:R> = <nat:2> $ . \end{theorem} \begin{proof} Let this decorated segment of code . \begin{eqnarray} \{ <var:U> = <var:x> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:U> = <var:x> \land <var:r0> = <nat:2> \} \\ <var:R> := <var:r0> \\ \{ <var:U> = <var:x> \land <var:R> = <nat:2> \} \end{eqnarray} Applying Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <var:r0> := <nat:2> ; <var:R> := <var:r0> {{ <var:R> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:R> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 