\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:1> ; <var:b> := <var:U0> \end{verbatim} Given for $ <var:C> \in \mathbb{Z}^+ $ it to be that $ <var:H> = <var:C> $ ahead of executing the program it follows that we see $ <var:b> = <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:C> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:H> = <var:C> \land <var:U0> = <nat:1> \} \\ <var:b> := <var:U0> \\ \{ <var:H> = <var:C> \land <var:b> = <nat:1> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:H> = <var:C> }} <var:U0> := <nat:1> ; <var:b> := <var:U0> {{ <var:b> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:b> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 