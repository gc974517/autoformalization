\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:W> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:W> ; <var:e2> := <var:e2> * <var:W> ; <var:p> := <var:e2> ; <var:p> := <var:p> + <var:e1> ; <var:p> := <var:p> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given any natural numbers $ <var:X> $ --- that we have $ <var:W> = <var:X> $ ahead of running the series of commands it holds that we see $ <var:p> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:W> = <var:X> \} \\ <var:e0> := <nat:9> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \} \\ <var:e1> := <nat:7> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \} \\ <var:e1> := <var:e1> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \times <var:X> \} \\ <var:e2> := <nat:7> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \times <var:X> \land <var:e2> = <nat:7> \} \\ <var:e2> := <var:e2> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \times <var:X> \land <var:e2> = <nat:7> \times <var:X> \} \\ <var:e2> := <var:e2> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \times <var:X> \land <var:e2> = <nat:7> \times <var:X> ^ <nat:2> \} \\ <var:p> := <var:e2> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:e1> = <nat:7> \times <var:X> \land <var:p> = <nat:7> \times <var:X> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:e1> ; \\ \{ <var:W> = <var:X> \land <var:e0> = <nat:9> \land <var:p> = <nat:7> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> \} \\ <var:p> := <var:p> + <var:e0> \\ \{ <var:W> = <var:X> \land <var:p> = <nat:7> \times <var:X> ^ <nat:2> + <nat:7> \times <var:X> + <nat:9> \} \end{eqnarray} As a consequence , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:9> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:W> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:W> ; <var:e2> := <var:e2> * <var:W> ; <var:p> := <var:e2> ; <var:p> := <var:p> + <var:e1> ; <var:p> := <var:p> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:W> = <var:X> }} <def:poly> {{ <var:p> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> * <var:X> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> * <var:X> /\ <var:e2> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> * <var:X> /\ <var:e2> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:7> * <var:X> /\ <var:p> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:e0> = <nat:9> /\ <var:p> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:p> = <nat:7> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 