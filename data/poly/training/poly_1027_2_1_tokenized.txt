\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:4> ; <var:d> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assume it to be that $ <var:j> = <var:c> $ prior to evaluating the series of instructions , it holds that we see $ <var:d> = <nat:4> $ after series of commands executes . \end{theorem} \begin{proof} The application of usual Hoare logic returns : \begin{eqnarray} \{ <var:j> = <var:c> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:j> = <var:c> \land <var:F0> = <nat:4> \} \\ <var:d> := <var:F0> \\ \{ <var:j> = <var:c> \land <var:d> = <nat:4> \} \end{eqnarray} Thusly , the series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:d> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:j> = <var:c> }} <def:poly> {{ <var:d> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:d> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 