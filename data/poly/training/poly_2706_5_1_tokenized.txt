\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:W> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:B> := <var:k1> <var:B> := <var:B> + <var:k0> \end{verbatim} Allowing $ <var:W> = <var:G> $ , with some positive coefficients $ <var:G> $ , before executing our segment of code , it follows that $ <var:B> = <nat:3> * <var:G> + <nat:8> $ when segment of code has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is accomplished with typical Hoare techniques . Shifting focus toward the proceeding steps contained in the code , \verb | { <var:W> = <var:G> } <var:k1> := <var:W> { <var:W> = <var:G> \land <var:k1> = <var:G> } | , \verb | { <var:W> = <var:G> \land <var:k1> = <var:G> } <var:k0> := <nat:8> { <var:W> = <var:G> \land <var:k1> = <var:G> \land <var:k0> = <nat:8> } | , \verb | { <var:W> = <var:G> \land <var:k1> = <var:G> \land <var:k0> = <nat:8> } <var:k1> := <var:k1> * <nat:3> { <var:W> = <var:G> \land <var:k1> = <nat:3> \times <var:G> \land <var:k0> = <nat:8> } | , \verb | { <var:W> = <var:G> \land <var:k1> = <nat:3> \times <var:G> \land <var:k0> = <nat:8> } <var:B> := <var:k1{ <var:W> = <var:G> \land <var:k0> = <nat:8> \land <var:B> = <nat:3> \times <var:G> } | and \verb | { <var:W> = <var:G> \land <var:k0> = <nat:8> \land <var:B> = <nat:3> \times <var:G> } <var:B> := <var:B> + <var:k0{ <var:W> = <var:G> \land <var:B> = <nat:3> \times <var:G> + <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:W> = <var:G> }} <var:k1> := <var:W> ; <var:k0> := <nat:8> ; <var:k1> := <var:k1> * <nat:3> ; <var:B> := <var:k1> <var:B> := <var:B> + <var:k0> {{ <var:B> = <nat:3> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:k1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:k1> = <var:G> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:k1> = <nat:3> * <var:G> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:k0> = <nat:8> /\ <var:B> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:B> = <nat:3> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 