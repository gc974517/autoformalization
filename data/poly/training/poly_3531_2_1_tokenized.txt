\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:2> ; <var:D> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assume it to be that $ <var:c> = <var:t> $ prior to the execution of our series of commands it holds that $ <var:D> = <nat:2> $ when segment of code executes . \end{theorem} \begin{proof} The course of logic for the set of commands is shown using typical Hoare techniques . Going forward , the line \verb | <var:P0> := <nat:2> ; | . This takes the precondition $ \{ <var:c> = <var:t> \} $ as $ \{ <var:c> = <var:t> \land <var:P0> = <nat:2> \} $ . Paying attention to the subsequent step found in the set of instructions , we see the binding command \verb | <var:D> := <var:P0> | . This code moves $ \{ <var:c> = <var:t> \land <var:P0> = <nat:2> \} $ as the condition $ \{ <var:c> = <var:t> \land <var:D> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:D> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:c> = <var:t> }} <def:poly> {{ <var:D> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:t> /\ <var:D> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 