\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:h> ; <var:o> := <var:r1> ; <var:o> := <var:o> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:h> = <var:H> $ prior to running this series of commands , it holds that we see $ <var:o> = <nat:4> \times <var:H> + <nat:8> $ once list of commands has finished . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be done through usual Hoare logic . Looking at the next bit of code found in the list of commands , we see the assignment line assigning $ <nat:8> $ to $ <var:r0>$ . This command takes the precondition $ \{ <var:h> = <var:H> \} $ into $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \} $ . This is known to be sound by the assignment law given in usual Hoare reasoning . Moving on , we see the variable binding command \verb | <var:r1> := <nat:4> ; | . This advances the precondition $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \} $ to the condition $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:4> \} $ . Moving forward to the next step , we see the assignment command \verb | <var:r1> := <var:r1> * <var:h> ; | . This command redefines $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:4> \} $ as $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:4> \times <var:H> \} $ . This is shown using the assignment scheme obtained from usual Hoare logic . Observing the subsequent line of code in the program , we see the environment update command \verb | <var:o> := <var:r1> ; | . This line forwards the precondition $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:r1> = <nat:4> \times <var:H> \} $ as $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:o> = <nat:4> \times <var:H> \} $ . This is known to be sound through the assignment inference rule given by Hoare logic . Moving forward to the subsequent statement seen in our program , we see the environment update statement binding $ <var:o> + <var:r0$ toward $ <var:o>$ . This forwards $ \{ <var:h> = <var:H> \land <var:r0> = <nat:8> \land <var:o> = <nat:4> \times <var:H> \} $ toward $ \{ <var:h> = <var:H> \land <var:o> = <nat:4> \times <var:H> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:8> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:h> ; <var:o> := <var:r1> ; <var:o> := <var:o> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:h> = <var:H> }} <def:poly> {{ <var:o> = <nat:4> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:r0> = <nat:8> /\ <var:o> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:o> = <nat:4> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 