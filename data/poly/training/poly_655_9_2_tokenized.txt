\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:E> ; <var:H> := <nat:4> + <var:H> * <var:E> ; <var:H> := <nat:2> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> ; <var:H> := <nat:3> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> ; <var:H> := <nat:2> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:E> = <var:k> $ prior to evaluating our series of instructions it must be that we have $ <var:H> = <nat:2> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:4> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> $ once code segment has finished . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:E> = <var:k> \} \\ <var:H> := <nat:2> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \} \\ <var:H> := <nat:3> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> + <nat:3> \} \\ <var:H> := <nat:4> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:4> \} \\ <var:H> := <nat:2> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:2> \} \\ <var:H> := <nat:1> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \\ <var:H> := <nat:3> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \\ <var:H> := <nat:1> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:4> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:1> \} \\ <var:H> := <nat:2> + <var:H> * <var:E> ; \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:4> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:4> + <nat:1> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:2> \} \\ <var:H> := <nat:1> + <var:H> * <var:E> \\ \{ <var:E> = <var:k> \land <var:H> = <nat:2> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:4> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \end{eqnarray} Therefore , the segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:E> ; <var:H> := <nat:4> + <var:H> * <var:E> ; <var:H> := <nat:2> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> ; <var:H> := <nat:3> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> ; <var:H> := <nat:2> + <var:H> * <var:E> ; <var:H> := <nat:1> + <var:H> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:E> = <var:k> }} <def:poly> {{ <var:H> = <nat:2> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:k> /\ <var:H> = <nat:2> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 