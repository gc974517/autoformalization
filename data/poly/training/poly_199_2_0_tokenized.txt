\begin{document} \begin{theorem} We define a code segment such that \begin{verbatim} <var:G0> := <nat:5> ; <var:h> := <var:G0> \end{verbatim} Assume that $ <var:B> = <var:a> $ prior to the evaluation of our series of instructions , it must be that we have $ <var:h> = <nat:5> $ when set of commands has exited . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:B> = <var:a> \} \\ <var:G0> := <nat:5> ; \\ \{ <var:B> = <var:a> \land <var:G0> = <nat:5> \} \\ <var:h> := <var:G0> \\ \{ <var:B> = <var:a> \land <var:h> = <nat:5> \} \end{eqnarray} Given the preceding argument , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:B> = <var:a> }} <var:G0> := <nat:5> ; <var:h> := <var:G0> {{ <var:h> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:h> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 