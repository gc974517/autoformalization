\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:d0> := <nat:8> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:c> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:c> ; <var:d2> := <var:d2> * <var:c> ; <var:e> := <var:d2> ; <var:e> := <var:e> + <var:d1> ; <var:e> := <var:e> + <var:d0> \end{verbatim} Allow $ <var:c> = <var:f> $ prior to running our set of instructions , it must be that we see $ <var:e> = <nat:7> \cdot <var:f> ^ <nat:2> + <nat:1> \cdot <var:f> + <nat:8> $ when list of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:f> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \times <var:f> \} \\ <var:d2> := <nat:7> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \times <var:f> \land <var:d2> = <nat:7> \} \\ <var:d2> := <var:d2> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \times <var:f> \land <var:d2> = <nat:7> \times <var:f> \} \\ <var:d2> := <var:d2> * <var:c> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \times <var:f> \land <var:d2> = <nat:7> \times <var:f> ^ <nat:2> \} \\ <var:e> := <var:d2> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:d1> = <nat:1> \times <var:f> \land <var:e> = <nat:7> \times <var:f> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:d1> ; \\ \{ <var:c> = <var:f> \land <var:d0> = <nat:8> \land <var:e> = <nat:7> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> \} \\ <var:e> := <var:e> + <var:d0> \\ \{ <var:c> = <var:f> \land <var:e> = <nat:7> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:c> = <var:f> }} <var:d0> := <nat:8> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:c> ; <var:d2> := <nat:7> ; <var:d2> := <var:d2> * <var:c> ; <var:d2> := <var:d2> * <var:c> ; <var:e> := <var:d2> ; <var:e> := <var:e> + <var:d1> ; <var:e> := <var:e> + <var:d0> {{ <var:e> = <nat:7> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> * <var:f> /\ <var:d2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> * <var:f> /\ <var:d2> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> * <var:f> /\ <var:d2> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:1> * <var:f> /\ <var:e> = <nat:7> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:d0> = <nat:8> /\ <var:e> = <nat:7> * <var:f> ^ <nat:2> + <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:f> /\ <var:e> = <nat:7> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 