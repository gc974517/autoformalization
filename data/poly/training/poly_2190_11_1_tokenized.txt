\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:x> ; <var:e2> := <var:e1> * <var:x> ; <var:e3> := <var:e2> * <var:x> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:6> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:8> ; <var:U> := <var:e3> <var:U> := <var:U> + <var:e2> <var:U> := <var:U> + <var:e1> <var:U> := <var:U> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assuming that $ <var:x> = <var:u> $ prior to running this list of commands , it must be that $ <var:U> = <nat:8> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:u> \} \\ <var:e1> := <var:x> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <var:u> \} \\ <var:e2> := <var:e1> * <var:x> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:x> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e3> = <var:u> ^ <nat:3> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e3> = <var:u> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:e1> := <var:e1> * <nat:6> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <nat:6> \cdot <var:u> \land <var:e2> = <var:u> ^ <nat:2> \land <var:e3> = <var:u> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:e2> := <var:e2> * <nat:3> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <nat:6> \cdot <var:u> \land <var:e2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:e3> = <var:u> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:e3> := <var:e3> * <nat:8> ; \\ \{ <var:x> = <var:u> \land <var:e1> = <nat:6> \cdot <var:u> \land <var:e2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:e3> = <nat:8> \cdot <var:u> ^ <nat:3> \land <var:e0> = <nat:1> \} \\ <var:U> := <var:e3> \\ \{ <var:x> = <var:u> \land <var:e1> = <nat:6> \cdot <var:u> \land <var:e2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:e0> = <nat:1> \land <var:U> = <nat:8> \cdot <var:u> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:e2> \\ \{ <var:x> = <var:u> \land <var:e1> = <nat:6> \cdot <var:u> \land <var:e0> = <nat:1> \land <var:U> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:e1> \\ \{ <var:x> = <var:u> \land <var:e0> = <nat:1> \land <var:U> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:6> \cdot <var:u> \} \\ <var:U> := <var:U> + <var:e0> \\ \{ <var:x> = <var:u> \land <var:U> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> ^ <nat:2> + <nat:6> \cdot <var:u> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:x> ; <var:e2> := <var:e1> * <var:x> ; <var:e3> := <var:e2> * <var:x> ; <var:e0> := <nat:1> ; <var:e1> := <var:e1> * <nat:6> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:8> ; <var:U> := <var:e3> <var:U> := <var:U> + <var:e2> <var:U> := <var:U> + <var:e1> <var:U> := <var:U> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:x> = <var:u> }} <def:poly> {{ <var:U> = <nat:8> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <var:u> /\ <var:e2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <var:u> /\ <var:e2> = <var:u> ^ <nat:2> /\ <var:e3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <var:u> /\ <var:e2> = <var:u> ^ <nat:2> /\ <var:e3> = <var:u> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <nat:6> * <var:u> /\ <var:e2> = <var:u> ^ <nat:2> /\ <var:e3> = <var:u> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <nat:6> * <var:u> /\ <var:e2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:e3> = <var:u> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <nat:6> * <var:u> /\ <var:e2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <nat:6> * <var:u> /\ <var:e2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:e0> = <nat:1> /\ <var:U> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e1> = <nat:6> * <var:u> /\ <var:e0> = <nat:1> /\ <var:U> = <nat:8> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:e0> = <nat:1> /\ <var:U> = <nat:8> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:u> /\ <var:U> = <nat:8> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ^ <nat:2> + <nat:6> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 