\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:7> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:f> ; <var:L> := <var:h1> ; <var:L> := <var:L> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given all natural numbers $ <var:y> $ , that $ <var:f> = <var:y> $ prior to interpreting the list of commands , then $ <var:L> = <nat:6> \cdot <var:y> + <nat:7> $ . \end{theorem} \begin{proof} The argument for our list of commands can be seen by typical Hoare logic . Going forward , \begin{eqnarray} \{ <var:f> = <var:y> \} \, <var:h0> := <nat:7> \, \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \} \\ \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \} \, <var:h1> := <nat:6> \, \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:h1> = <nat:6> \} \\ \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:h1> = <nat:6> \} \, <var:h1> := <var:h1> * <var:f> \, \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:h1> = <nat:6> \times <var:y> \} \\ \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:h1> = <nat:6> \times <var:y> \} \, <var:L> := <var:h1> \, \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:L> = <nat:6> \times <var:y> \} \\ \{ <var:f> = <var:y> \land <var:h0> = <nat:7> \land <var:L> = <nat:6> \times <var:y> \} \, <var:L> := <var:L> + <var:h0\, \{ <var:f> = <var:y> \land <var:L> = <nat:6> \times <var:y> + <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:7> ; <var:h1> := <nat:6> ; <var:h1> := <var:h1> * <var:f> ; <var:L> := <var:h1> ; <var:L> := <var:L> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:f> = <var:y> }} <def:poly> {{ <var:L> = <nat:6> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:h0> = <nat:7> /\ <var:h1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:h0> = <nat:7> /\ <var:L> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:y> /\ <var:L> = <nat:6> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 