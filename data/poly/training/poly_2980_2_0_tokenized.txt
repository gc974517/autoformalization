\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:3> ; <var:B> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> in \emph{Imp} . Given $ <var:O> = <var:G> $ , for all positive numbers $ <var:G> $ , ahead of interpreting the segment of code it must be that $ <var:B> = <nat:3> $ when list of commands has finished . \end{theorem} \begin{proof} The course of logic for our code segment can be seen through typical Hoare logic . Looking at the subsequent bit of code found in the program , we see the environment update statement binding $ <nat:3> $ to $ <var:b0>$ . This moves $ \{ <var:O> = <var:G> \} $ to the condition $ \{ <var:O> = <var:G> \land <var:b0> = <nat:3> \} $ . This is shown to be logically sound through the assignment rule found in standard Hoare reasoning . After , we have the line \verb | <var:B> := <var:b0> | . This line redefines $ \{ <var:O> = <var:G> \land <var:b0> = <nat:3> \} $ as $ \{ <var:O> = <var:G> \land <var:B> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:3> ; <var:B> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:O> = <var:G> }} <def:poly> {{ <var:B> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:G> /\ <var:B> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 