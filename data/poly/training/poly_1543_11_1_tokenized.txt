\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:o1> := <var:J> ; <var:o2> := <var:o1> * <var:J> ; <var:o3> := <var:o2> * <var:J> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:8> ; <var:S> := <var:o3> <var:S> := <var:S> + <var:o2> <var:S> := <var:S> + <var:o1> <var:S> := <var:S> + <var:o0> \end{verbatim} Allowing it to be that $ <var:J> = <var:p> $ , taking integers $ <var:p> $ , ahead of evaluating the segment of code , it must be that we have $ <var:S> = <nat:8> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> + <nat:1> $ when set of instructions finishes . \end{theorem} \begin{proof} Notice the below decorated series of instructions . \begin{eqnarray} \{ <var:J> = <var:p> \} \\ <var:o1> := <var:J> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <var:p> \} \\ <var:o2> := <var:o1> * <var:J> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:J> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \land <var:o3> = <var:p> ^ <nat:3> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \land <var:o3> = <var:p> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o1> := <var:o1> * <nat:6> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <nat:6> \times <var:p> \land <var:o2> = <var:p> ^ <nat:2> \land <var:o3> = <var:p> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o2> := <var:o2> * <nat:8> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <nat:6> \times <var:p> \land <var:o2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:o3> = <var:p> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o3> := <var:o3> * <nat:8> ; \\ \{ <var:J> = <var:p> \land <var:o1> = <nat:6> \times <var:p> \land <var:o2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:o3> = <nat:8> \times <var:p> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:S> := <var:o3> \\ \{ <var:J> = <var:p> \land <var:o1> = <nat:6> \times <var:p> \land <var:o2> = <nat:8> \times <var:p> ^ <nat:2> \land <var:o0> = <nat:1> \land <var:S> = <nat:8> \times <var:p> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:o2> \\ \{ <var:J> = <var:p> \land <var:o1> = <nat:6> \times <var:p> \land <var:o0> = <nat:1> \land <var:S> = <nat:8> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:o1> \\ \{ <var:J> = <var:p> \land <var:o0> = <nat:1> \land <var:S> = <nat:8> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> \} \\ <var:S> := <var:S> + <var:o0> \\ \{ <var:J> = <var:p> \land <var:S> = <nat:8> \times <var:p> ^ <nat:3> + <nat:8> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> + <nat:1> \} \end{eqnarray} Applying usual Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:J> = <var:p> }} <var:o1> := <var:J> ; <var:o2> := <var:o1> * <var:J> ; <var:o3> := <var:o2> * <var:J> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:8> ; <var:S> := <var:o3> <var:S> := <var:S> + <var:o2> <var:S> := <var:S> + <var:o1> <var:S> := <var:S> + <var:o0> {{ <var:S> = <nat:8> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <var:p> ^ <nat:2> /\ <var:o3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <var:p> ^ <nat:2> /\ <var:o3> = <var:p> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <nat:6> * <var:p> /\ <var:o2> = <var:p> ^ <nat:2> /\ <var:o3> = <var:p> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <nat:6> * <var:p> /\ <var:o2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:o3> = <var:p> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <nat:6> * <var:p> /\ <var:o2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:o3> = <nat:8> * <var:p> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <nat:6> * <var:p> /\ <var:o2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:o0> = <nat:1> /\ <var:S> = <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o1> = <nat:6> * <var:p> /\ <var:o0> = <nat:1> /\ <var:S> = <nat:8> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:o0> = <nat:1> /\ <var:S> = <nat:8> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:p> /\ <var:S> = <nat:8> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 