\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:8> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:g> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:g> ; <var:e2> := <var:e2> * <var:g> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allow , given every natural numbers $ <var:m> $ , it to be that $ <var:g> = <var:m> $ ahead of running our list of instructions , it holds that we see $ <var:G> = <nat:7> \cdot <var:m> ^ <nat:2> + <nat:7> \cdot <var:m> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for this code can be seen using typical Hoare techniques . Following , \begin{eqnarray} \{ <var:g> = <var:m> \} \, <var:e0> := <nat:8> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \} \, <var:e1> := <nat:7> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> \} \, <var:e1> := <var:e1> * <var:g> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \} \, <var:e2> := <nat:7> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \land <var:e2> = <nat:7> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \land <var:e2> = <nat:7> \} \, <var:e2> := <var:e2> * <var:g> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \land <var:e2> = <nat:7> * <var:m> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \land <var:e2> = <nat:7> * <var:m> \} \, <var:e2> := <var:e2> * <var:g> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> * <var:m> \land <var:e2> = <nat:7> * <var:m> ^ <nat:2> \} \end{eqnarray} This is shown to be logically sound by the variable binding scheme of usual Hoare techniques . Considering the subsequent bits of codein our segment of code , we have \begin{eqnarray} \{ <var:g> = <var:m> \} \, <var:e0> := <nat:8> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \} \\ \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \} \, <var:e1> := <nat:7> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \land <var:e1> = <nat:7> \} \end{eqnarray} This is guaranteed using the rule from typical Hoare reasoning . After , \begin{eqnarray} \{ <var:g> = <var:m> \} \, <var:e0> := <nat:8> \, \{ <var:g> = <var:m> \land <var:e0> = <nat:8> \} \end{eqnarray} This is sound by the variable assignmet rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:8> ; <var:e1> := <nat:7> ; <var:e1> := <var:e1> * <var:g> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:g> ; <var:e2> := <var:e2> * <var:g> ; <var:G> := <var:e2> ; <var:G> := <var:G> + <var:e1> ; <var:G> := <var:G> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <def:poly> {{ <var:G> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> * <var:m> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> * <var:m> /\ <var:e2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> * <var:m> /\ <var:e2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:7> * <var:m> /\ <var:G> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:e0> = <nat:8> /\ <var:G> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:G> = <nat:7> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 