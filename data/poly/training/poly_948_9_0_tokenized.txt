\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:c> := <var:o2> ; <var:c> := <var:c> + <var:o1> ; <var:c> := <var:c> + <var:o0> \end{verbatim} Allowing it to be that $ <var:D> = <var:u> $ before the execution of our segment of code it must be that $ <var:c> = <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> $ after code has executed . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:D> = <var:u> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \} \\ <var:o1> := <nat:8> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \} \\ <var:o1> := <var:o1> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \cdot <var:u> \} \\ <var:o2> := <nat:6> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \cdot <var:u> \land <var:o2> = <nat:6> \} \\ <var:o2> := <var:o2> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \cdot <var:u> \land <var:o2> = <nat:6> \cdot <var:u> \} \\ <var:o2> := <var:o2> * <var:D> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \cdot <var:u> \land <var:o2> = <nat:6> \cdot <var:u> ^ <nat:2> \} \\ <var:c> := <var:o2> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:o1> = <nat:8> \cdot <var:u> \land <var:c> = <nat:6> \cdot <var:u> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:o1> ; \\ \{ <var:D> = <var:u> \land <var:o0> = <nat:2> \land <var:c> = <nat:6> \cdot <var:u> ^ <nat:2> + <nat:8> \cdot <var:u> \} \\ <var:c> := <var:c> + <var:o0> \\ \{ <var:D> = <var:u> \land <var:c> = <nat:6> \cdot <var:u> ^ <nat:2> + <nat:8> \cdot <var:u> + <nat:2> \} \end{eqnarray} Hence , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <var:o0> := <nat:2> ; <var:o1> := <nat:8> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:6> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:c> := <var:o2> ; <var:c> := <var:c> + <var:o1> ; <var:c> := <var:c> + <var:o0> {{ <var:c> = <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> * <var:u> /\ <var:o2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> * <var:u> /\ <var:o2> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> * <var:u> /\ <var:o2> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:8> * <var:u> /\ <var:c> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:o0> = <nat:2> /\ <var:c> = <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:c> = <nat:6> * <var:u> ^ <nat:2> + <nat:8> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 