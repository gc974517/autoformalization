\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:3> ; <var:K> := <var:f0> \end{verbatim} Given --- for any integers $ <var:H> $ --- that $ <var:U> = <var:H> $ ahead of running this code it follows that we see $ <var:K> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:U> = <var:H> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:U> = <var:H> \land <var:f0> = <nat:3> \} \end{eqnarray} Continuing the evaluation of the segment of code gives us : \begin{eqnarray} <var:K> := <var:f0> \\ \{ <var:U> = <var:H> \land <var:K> = <nat:3> \} \end{eqnarray} Hence , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:U> = <var:H> }} <var:f0> := <nat:3> ; <var:K> := <var:f0> {{ <var:K> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:K> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 