\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:K1> := <var:u> ; <var:K2> := <var:K1> * <var:u> ; <var:K3> := <var:K2> * <var:u> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> \end{verbatim} Assume that $ <var:u> = <var:y> $ before interpreting the code , it follows that we have $ <var:H> = <nat:9> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:2> $ when code segment finishes . \end{theorem} \begin{proof} The flow of logic for this list of instructions is demonstrated by typical Hoare techniques . Considering the upcoming commands seen in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:y> \} & <var:K1> := <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} & <var:K2> := <var:K1> * <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} & <var:K3> := <var:K2> * <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \} & <var:K0> := <nat:2> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} & <var:K1> := <var:K1> * <nat:8> & \{ <var:u> = <var:y> \land <var:K1> = <nat:8> \times <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <nat:8> \times <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} & <var:K2> := <var:K2> * <nat:3> & \{ <var:u> = <var:y> \land <var:K1> = <nat:8> \times <var:y> \land <var:K2> = <nat:3> \times <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <nat:8> \times <var:y> \land <var:K2> = <nat:3> \times <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} & <var:K3> := <var:K3> * <nat:9> & \{ <var:u> = <var:y> \land <var:K1> = <nat:8> \times <var:y> \land <var:K2> = <nat:3> \times <var:y> ^ <nat:2> \land <var:K3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \} \end{tabular} Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:y> \} & <var:K1> := <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} & <var:K2> := <var:K1> * <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} \end{tabular} This is known to be sound through the binding law of standard Hoare techniques . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:u> = <var:y> \} & <var:K1> := <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} \\ \{ <var:u> = <var:y> \land <var:K1> = <var:y> \} & <var:K2> := <var:K1> * <var:u> & \{ <var:u> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:u> = <var:y> }} <var:K1> := <var:u> ; <var:K2> := <var:K1> * <var:u> ; <var:K3> := <var:K2> * <var:u> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:8> ; <var:K2> := <var:K2> * <nat:3> ; <var:K3> := <var:K3> * <nat:9> ; <var:H> := <var:K3> <var:H> := <var:H> + <var:K2> <var:H> := <var:H> + <var:K1> <var:H> := <var:H> + <var:K0> {{ <var:H> = <nat:9> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <nat:8> * <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <nat:8> * <var:y> /\ <var:K2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <nat:8> * <var:y> /\ <var:K2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <nat:8> * <var:y> /\ <var:K2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:K0> = <nat:2> /\ <var:H> = <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K1> = <nat:8> * <var:y> /\ <var:K0> = <nat:2> /\ <var:H> = <nat:9> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:K0> = <nat:2> /\ <var:H> = <nat:9> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:y> /\ <var:H> = <nat:9> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 