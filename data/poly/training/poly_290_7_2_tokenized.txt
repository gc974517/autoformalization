\begin{document} \begin{theorem} Define a segment of code : \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> \end{verbatim} Assume it to be that $ <var:A> = <var:E> $ for some $ <var:E> \in \mathbb{Z}^+ $ before evaluating this series of instructions , it holds that $ <var:B> = <nat:3> \cdot <var:E> ^ <nat:6> + <nat:1> \cdot <var:E> ^ <nat:5> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:4> $ when set of instructions is done . \end{theorem} \begin{proof} The course of logic for our set of instructions can be seen through typical Hoare techniques . Looking at the subsequent line of code in our set of instructions , we have the variable update command binding $ <nat:3> $ to $ <var:B>$ . This line takes the condition $ \{ <var:A> = <var:E> \} $ toward $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \} $ . This is given through the assignment rule defined in Hoare logic . Taking another step toward the following piece of code in the code segment , we see the assignment code \verb | <var:B> := <nat:1> + <var:B> * <var:A> ; | . This redefines the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \} $ into the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> + <nat:1> \} $ . Advancing to the following piece of code contained in the series of instructions , the code \verb | <var:B> := <var:B> * <var:A> ; | . This line takes the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> + <nat:1> \} $ to the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + \} $ . This is deduced with the assignment inference rule defined by typical Hoare techniques . Now , the variable binding command giving $ <nat:1> + <var:B> * <var:A> $ into $ <var:B>$ . This transfers $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + \} $ into the postcondition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:1> \} $ . This is given through the assignment rule in usual Hoare logic . Jumping to the subsequent line contained in the series of instructions , we have the variable binding statement \verb | <var:B> := <nat:4> + <var:B> * <var:A> ; | . This moves the precondition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> + <nat:4> \} $ . Shifting focus toward the subsequent statement seen in our set of instructions , the variable assignmet command \verb | <var:B> := <nat:2> + <var:B> * <var:A> ; | . This code redefines the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:1> \cdot <var:E> + <nat:4> \} $ toward $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:5> + <nat:1> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:2> \} $ . Moving forward to the proceeding line contained in our set of instructions , we see the variable update statement \verb | <var:B> := <nat:4> + <var:B> * <var:A> | . This line transfers the condition $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:5> + <nat:1> \cdot <var:E> ^ <nat:4> + <nat:1> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:2> \} $ to $ \{ <var:A> = <var:E> \land <var:B> = <nat:3> \cdot <var:E> ^ <nat:6> + <nat:1> \cdot <var:E> ^ <nat:5> + <nat:1> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:4> \} $ . This is ensured through the assignment law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:A> = <var:E> }} <var:B> := <nat:3> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:1> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:2> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> {{ <var:B> = <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:E> /\ <var:B> = <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 