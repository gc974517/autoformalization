\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:D1> := <var:R> ; <var:D2> := <var:D1> * <var:R> ; <var:D3> := <var:D2> * <var:R> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:4> ; <var:D2> := <var:D2> * <nat:5> ; <var:D3> := <var:D3> * <nat:3> ; <var:k> := <var:D3> <var:k> := <var:k> + <var:D2> <var:k> := <var:k> + <var:D1> <var:k> := <var:k> + <var:D0> \end{verbatim} Allow it to be that $ <var:R> = <var:Y> $ ahead of interpreting this set of instructions , it must be that we see $ <var:k> = <nat:3> \times <var:Y> ^ <nat:3> + <nat:5> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:3> $ after list of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for the set of instructions can be demonstrated with typical Hoare techniques . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:Y> \} & <var:D1> := <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} & <var:D2> := <var:D1> * <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \} & <var:D3> := <var:D2> * <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \} \end{tabular} This is shown to be logically sound by the variable update scheme from usual Hoare logic . Moving forward to the next lines of codein our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:Y> \} & <var:D1> := <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} & <var:D2> := <var:D1> * <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \} & <var:D3> := <var:D2> * <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \} & <var:D0> := <nat:3> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D0> = <nat:3> \} & <var:D1> := <var:D1> * <nat:4> & \{ <var:R> = <var:Y> \land <var:D1> = <nat:4> * <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D0> = <nat:3> \} \\ \{ <var:R> = <var:Y> \land <var:D1> = <nat:4> * <var:Y> \land <var:D2> = <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D0> = <nat:3> \} & <var:D2> := <var:D2> * <nat:5> & \{ <var:R> = <var:Y> \land <var:D1> = <nat:4> * <var:Y> \land <var:D2> = <nat:5> * <var:Y> ^ <nat:2> \land <var:D3> = <var:Y> ^ <nat:3> \land <var:D0> = <nat:3> \} \end{tabular} This is deduced using the binding rule given by typical Hoare reasoning . Following , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:Y> \} & <var:D1> := <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} \end{tabular} This is guaranteed by the binding rule in typical Hoare logic . Looking at the upcoming statement found in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:Y> \} & <var:D1> := <var:R> & \{ <var:R> = <var:Y> \land <var:D1> = <var:Y> \} \end{tabular} This is ensured by the inference rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:R> = <var:Y> }} <var:D1> := <var:R> ; <var:D2> := <var:D1> * <var:R> ; <var:D3> := <var:D2> * <var:R> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:4> ; <var:D2> := <var:D2> * <nat:5> ; <var:D3> := <var:D3> * <nat:3> ; <var:k> := <var:D3> <var:k> := <var:k> + <var:D2> <var:k> := <var:k> + <var:D1> <var:k> := <var:k> + <var:D0> {{ <var:k> = <nat:3> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:D3> = <var:Y> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D2> = <nat:5> * <var:Y> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D1> = <nat:4> * <var:Y> /\ <var:D0> = <nat:3> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:D0> = <nat:3> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:k> = <nat:3> * <var:Y> ^ <nat:3> + <nat:5> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 