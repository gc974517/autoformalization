\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:7> ; <var:k> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:H> = <var:Y> $ ahead of interpreting this code segment it follows that we have $ <var:k> = <nat:7> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques results in : \begin{eqnarray} \{ <var:H> = <var:Y> \} \\ <var:P0> := <nat:7> ; \\ \{ <var:H> = <var:Y> \land <var:P0> = <nat:7> \} \\ <var:k> := <var:P0> \\ \{ <var:H> = <var:Y> \land <var:k> = <nat:7> \} \end{eqnarray} Considering the preceding argument , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:7> ; <var:k> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:H> = <var:Y> }} <def:poly> {{ <var:k> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Y> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Y> /\ <var:k> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 