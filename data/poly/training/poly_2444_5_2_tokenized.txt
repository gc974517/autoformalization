\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:P> := <nat:1> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:3> + <var:P> * <var:J> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <nat:2> + <var:P> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:J> = <var:X> $ before interpreting the list of instructions , then we see $ <var:P> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:J> = <var:X> \} \\ <var:P> := <nat:1> ; \\ \{ <var:J> = <var:X> \land <var:P> = <nat:1> \} \\ <var:P> := <var:P> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:P> = <nat:1> \cdot <var:X> + \} \\ <var:P> := <nat:3> + <var:P> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:P> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \} \\ <var:P> := <nat:1> + <var:P> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:P> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> + <nat:1> \} \\ <var:P> := <nat:2> + <var:P> * <var:J> \\ \{ <var:J> = <var:X> \land <var:P> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:2> \} \end{eqnarray} Considering the above , our series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:1> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:3> + <var:P> * <var:J> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <nat:2> + <var:P> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:J> = <var:X> }} <def:poly> {{ <var:P> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:P> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:P> = <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:P> = <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 