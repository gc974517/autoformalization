\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:w1> := <var:r> ; <var:w2> := <var:w1> * <var:r> ; <var:w3> := <var:w2> * <var:r> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:9> ; <var:E> := <var:w3> <var:E> := <var:E> + <var:w2> <var:E> := <var:E> + <var:w1> <var:E> := <var:E> + <var:w0> \end{verbatim} Allowing $ <var:r> = <var:i> $ prior to the execution of our set of commands it must be that we have $ <var:E> = <nat:9> \times <var:i> ^ <nat:3> + <nat:6> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:8> $ when set of commands executes . \end{theorem} \begin{proof} Using usual Hoare reasoning produces : \begin{eqnarray} \{ <var:r> = <var:i> \} \\ <var:w1> := <var:r> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <var:i> \} \\ <var:w2> := <var:w1> * <var:r> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:r> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w1> := <var:w1> * <nat:2> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <nat:2> \times <var:i> \land <var:w2> = <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w2> := <var:w2> * <nat:6> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <nat:2> \times <var:i> \land <var:w2> = <nat:6> \times <var:i> ^ <nat:2> \land <var:w3> = <var:i> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:w3> := <var:w3> * <nat:9> ; \\ \{ <var:r> = <var:i> \land <var:w1> = <nat:2> \times <var:i> \land <var:w2> = <nat:6> \times <var:i> ^ <nat:2> \land <var:w3> = <nat:9> \times <var:i> ^ <nat:3> \land <var:w0> = <nat:8> \} \\ <var:E> := <var:w3> \\ \{ <var:r> = <var:i> \land <var:w1> = <nat:2> \times <var:i> \land <var:w2> = <nat:6> \times <var:i> ^ <nat:2> \land <var:w0> = <nat:8> \land <var:E> = <nat:9> \times <var:i> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:w2> \\ \{ <var:r> = <var:i> \land <var:w1> = <nat:2> \times <var:i> \land <var:w0> = <nat:8> \land <var:E> = <nat:9> \times <var:i> ^ <nat:3> + <nat:6> \times <var:i> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:w1> \\ \{ <var:r> = <var:i> \land <var:w0> = <nat:8> \land <var:E> = <nat:9> \times <var:i> ^ <nat:3> + <nat:6> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> \} \\ <var:E> := <var:E> + <var:w0> \\ \{ <var:r> = <var:i> \land <var:E> = <nat:9> \times <var:i> ^ <nat:3> + <nat:6> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:8> \} \end{eqnarray} Hence , the code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:r> = <var:i> }} <var:w1> := <var:r> ; <var:w2> := <var:w1> * <var:r> ; <var:w3> := <var:w2> * <var:r> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:6> ; <var:w3> := <var:w3> * <nat:9> ; <var:E> := <var:w3> <var:E> := <var:E> + <var:w2> <var:E> := <var:E> + <var:w1> <var:E> := <var:E> + <var:w0> {{ <var:E> = <nat:9> * <var:i> ^ <nat:3> + <nat:6> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <nat:6> * <var:i> ^ <nat:2> /\ <var:w3> = <var:i> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <nat:6> * <var:i> ^ <nat:2> /\ <var:w3> = <nat:9> * <var:i> ^ <nat:3> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w2> = <nat:6> * <var:i> ^ <nat:2> /\ <var:w0> = <nat:8> /\ <var:E> = <nat:9> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w1> = <nat:2> * <var:i> /\ <var:w0> = <nat:8> /\ <var:E> = <nat:9> * <var:i> ^ <nat:3> + <nat:6> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:w0> = <nat:8> /\ <var:E> = <nat:9> * <var:i> ^ <nat:3> + <nat:6> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:E> = <nat:9> * <var:i> ^ <nat:3> + <nat:6> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 