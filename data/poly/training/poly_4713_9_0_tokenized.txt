\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:r0> := <nat:7> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:u> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:u> ; <var:r2> := <var:r2> * <var:u> ; <var:j> := <var:r2> ; <var:j> := <var:j> + <var:r1> ; <var:j> := <var:j> + <var:r0> \end{verbatim} Given , taking positive coefficients $ <var:R> $ , that $ <var:u> = <var:R> $ prior to the evaluation of this code segment then we have $ <var:j> = <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code is done with typical Hoare techniques . Taking another step toward the proceeding bit of code in the series of instructions , we have the statement assigning $ <nat:7> $ into $ <var:r0>$ . This line advances the precondition $ \{ <var:u> = <var:R> \} $ into the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \} $ . Advancing to the following step contained in the list of instructions , we have the variable update statement binding $ <nat:4> $ to $ <var:r1>$ . This statement forwards the precondition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \} $ into the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \} $ . This is deduced by the assignment rule from typical Hoare techniques . Going to the next step , we have the line binding $ <var:r1> * <var:u> $ toward $ <var:r1>$ . This transfers $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \} $ toward the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \} $ . This is ensured with the assignment inference rule given in typical Hoare techniques . Honing in on the next statement seen in our list of commands , we see the environment update line assigning $ <nat:6> $ into $ <var:r2>$ . This transfers $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \} $ toward the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \} $ . Moving forward to the subsequent step found in the code segment , we have the line \verb | <var:r2> := <var:r2> * <var:u> ; | . This code takes the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \} $ toward the postcondition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \times <var:R> \} $ . Looking at the next line seen in the segment of code , the variable update statement \verb | <var:r2> := <var:r2> * <var:u> ; | . This takes $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \times <var:R> \} $ as the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \times <var:R> ^ <nat:2> \} $ . Next , we have the assignment command \verb | <var:j> := <var:r2> ; | . This moves the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:r2> = <nat:6> \times <var:R> ^ <nat:2> \} $ as $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:j> = <nat:6> \times <var:R> ^ <nat:2> \} $ . This is guaranteed by the assignment scheme found in usual Hoare techniques . Observing the proceeding bit of code in the series of commands , we have the assignment code \verb | <var:j> := <var:j> + <var:r1> ; | . This redefines $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:r1> = <nat:4> \times <var:R> \land <var:j> = <nat:6> \times <var:R> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:j> = <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} $ . This is rigorously given with the assignment law given in usual Hoare techniques . Advancing to the subsequent line in our code , we have the binding line giving $ <var:j> + <var:r0$ to $ <var:j>$ . This command moves the condition $ \{ <var:u> = <var:R> \land <var:r0> = <nat:7> \land <var:j> = <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} $ toward $ \{ <var:u> = <var:R> \land <var:j> = <nat:6> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:7> \} $ . This is given with the assignment inference rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:u> = <var:R> }} <var:r0> := <nat:7> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:u> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:u> ; <var:r2> := <var:r2> * <var:u> ; <var:j> := <var:r2> ; <var:j> := <var:j> + <var:r1> ; <var:j> := <var:j> + <var:r0> {{ <var:j> = <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> * <var:R> /\ <var:r2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> * <var:R> /\ <var:r2> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> * <var:R> /\ <var:r2> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:r1> = <nat:4> * <var:R> /\ <var:j> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:r0> = <nat:7> /\ <var:j> = <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:R> /\ <var:j> = <nat:6> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 