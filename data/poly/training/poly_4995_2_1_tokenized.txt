\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:Y0> := <nat:8> ; <var:z> := <var:Y0> \end{verbatim} Assume it to be that $ <var:R> = <var:K> $ prior to the execution of this set of commands , it follows that $ <var:z> = <nat:8> $ when segment of code finishes . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:R> = <var:K> \} \\ <var:Y0> := <nat:8> ; \\ \{ <var:R> = <var:K> \land <var:Y0> = <nat:8> \} \\ <var:z> := <var:Y0> \\ \{ <var:R> = <var:K> \land <var:z> = <nat:8> \} \end{eqnarray} Therefore , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:R> = <var:K> }} <var:Y0> := <nat:8> ; <var:z> := <var:Y0> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:K> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 