\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:4> ; <var:C> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:I> = <var:w> $ ahead of interpreting the segment of code it holds that $ <var:C> = <nat:4> $ . \end{theorem} \begin{proof} The proof of our list of commands is clear with standard Hoare logic . Focusing on the proceeding lines in our segment of code , we have \begin{eqnarray} \{ <var:I> = <var:w> \} \, <var:U0> := <nat:4> \, \{ <var:I> = <var:w> \land <var:U0> = <nat:4> \} \\ \{ <var:I> = <var:w> \land <var:U0> = <nat:4> \} \, <var:C> := <var:U0\, \{ <var:I> = <var:w> \land <var:C> = <nat:4> \} \end{eqnarray} This is given by the environment update inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:4> ; <var:C> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:I> = <var:w> }} <def:poly> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:w> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 