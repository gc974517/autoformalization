\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:Z> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given --- given some $ <var:d> \in \mathbb{Z}^+ $ --- it to be that $ <var:G> = <var:d> $ prior to interpreting our list of commands it must be that we have $ <var:Z> = <nat:8> $ . \end{theorem} \begin{proof} The argument for the series of commands is clear with typical Hoare logic . Honing in on the following piece of code in our list of instructions , we have the assignment line \verb | <var:a0> := <nat:8> ; | . This redefines the precondition $ \{ <var:G> = <var:d> \} $ into the condition $ \{ <var:G> = <var:d> \land <var:a0> = <nat:8> \} $ . Stepping through , we see the statement letting $ <var:a0$ as $ <var:Z>$ . This forwards the precondition $ \{ <var:G> = <var:d> \land <var:a0> = <nat:8> \} $ toward $ \{ <var:G> = <var:d> \land <var:Z> = <nat:8> \} $ . This is sound by the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:Z> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <def:poly> {{ <var:Z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:Z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 