\begin{document} \begin{theorem} Consider a set of commands as \begin{verbatim} <var:U0> := <nat:6> ; <var:A> := <var:U0> \end{verbatim} Assuming it to be that $ <var:L> = <var:Z> $ ahead of the evaluation of the program it must be that $ <var:A> = <nat:6> $ when program has terminated . \end{theorem} \begin{proof} The proof of our code segment can be accomplished with Hoare logic . Moving forward to the next step , the binding line yielding $ <nat:6> $ toward $ <var:U0>$ . This forwards the precondition $ \{ <var:L> = <var:Z> \} $ toward $ \{ <var:L> = <var:Z> \land <var:U0> = <nat:6> \} $ . Moving forward to the next step , the variable binding code yielding $ <var:U0$ into $ <var:A>$ . This redefines the precondition $ \{ <var:L> = <var:Z> \land <var:U0> = <nat:6> \} $ into the postcondition $ \{ <var:L> = <var:Z> \land <var:A> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:L> = <var:Z> }} <var:U0> := <nat:6> ; <var:A> := <var:U0> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Z> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 