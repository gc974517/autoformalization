\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:S> ; <var:x> := <var:d1> ; <var:x> := <var:x> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:S> = <var:j> $ before the execution of the series of instructions it must be that $ <var:x> = <nat:1> * <var:j> + <nat:4> $ when set of instructions is done . \end{theorem} \begin{proof} The proof of the series of instructions can be done with this decorated list of instructions . \begin{eqnarray} \{ <var:S> = <var:j> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:S> = <var:j> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:S> = <var:j> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:S> ; \\ \{ <var:S> = <var:j> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \times <var:j> \} \\ <var:x> := <var:d1> ; \\ \{ <var:S> = <var:j> \land <var:d0> = <nat:4> \land <var:x> = <nat:1> \times <var:j> \} \\ <var:x> := <var:x> + <var:d0> \\ \{ <var:S> = <var:j> \land <var:x> = <nat:1> \times <var:j> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:S> ; <var:x> := <var:d1> ; <var:x> := <var:x> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:S> = <var:j> }} <def:poly> {{ <var:x> = <nat:1> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:d0> = <nat:4> /\ <var:x> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:j> /\ <var:x> = <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 