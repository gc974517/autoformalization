\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:m> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:4> ; <var:k> := <var:R1> <var:k> := <var:k> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> in \emph{Imp} . Allow it to be that $ <var:m> = <var:V> $ prior to the evaluation of our code , it holds that $ <var:k> = <nat:4> * <var:V> + <nat:6> $ when series of commands has finished executing . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:m> = <var:V> \} \\ <var:R1> := <var:m> ; \\ \{ <var:m> = <var:V> \land <var:R1> = <var:V> \} \\ <var:R0> := <nat:6> ; \\ \{ <var:m> = <var:V> \land <var:R1> = <var:V> \land <var:R0> = <nat:6> \} \\ <var:R1> := <var:R1> * <nat:4> ; \\ \{ <var:m> = <var:V> \land <var:R1> = <nat:4> * <var:V> \land <var:R0> = <nat:6> \} \\ <var:k> := <var:R1> \\ \{ <var:m> = <var:V> \land <var:R0> = <nat:6> \land <var:k> = <nat:4> * <var:V> \} \\ <var:k> := <var:k> + <var:R0> \\ \{ <var:m> = <var:V> \land <var:k> = <nat:4> * <var:V> + <nat:6> \} \end{eqnarray} As a consequence , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R1> := <var:m> ; <var:R0> := <nat:6> ; <var:R1> := <var:R1> * <nat:4> ; <var:k> := <var:R1> <var:k> := <var:k> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:m> = <var:V> }} <def:poly> {{ <var:k> = <nat:4> * <var:V> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:R1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:R1> = <var:V> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:R1> = <nat:4> * <var:V> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:R0> = <nat:6> /\ <var:k> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:V> /\ <var:k> = <nat:4> * <var:V> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 