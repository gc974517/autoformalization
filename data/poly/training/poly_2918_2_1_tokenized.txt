\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:3> ; <var:U> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Allowing it to hold that $ <var:d> = <var:e> $ ahead of interpreting our set of instructions then we see $ <var:U> = <nat:3> $ . \end{theorem} \begin{proof} The argument for this list of commands is done using standard Hoare reasoning . Further , we see \begin{verbatim} { <var:d> = <var:e> } <var:n0> := <nat:3> { <var:d> = <var:e> \land <var:n0> = <nat:3> } { <var:d> = <var:e> \land <var:n0> = <nat:3> } <var:U> := <var:n0{ <var:d> = <var:e> \land <var:U> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:3> ; <var:U> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:d> = <var:e> }} <def:poly> {{ <var:U> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:e> /\ <var:U> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 