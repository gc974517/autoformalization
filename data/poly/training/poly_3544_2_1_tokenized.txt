\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:x> := <var:Q0> \end{verbatim} Assume that $ <var:K> = <var:N> $ ahead of the execution of the series of instructions then $ <var:x> = <nat:3> $ after set of instructions has executed . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:K> = <var:N> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:K> = <var:N> \land <var:Q0> = <nat:3> \} \\ <var:x> := <var:Q0> \\ \{ <var:K> = <var:N> \land <var:x> = <nat:3> \} \end{eqnarray} Thusly , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:K> = <var:N> }} <var:Q0> := <nat:3> ; <var:x> := <var:Q0> {{ <var:x> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:N> /\ <var:x> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 