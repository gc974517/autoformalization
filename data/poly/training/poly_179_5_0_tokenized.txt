\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:E> ; <var:Y> := <var:T1> ; <var:Y> := <var:Y> + <var:T0> \end{verbatim} Allow it to be that $ <var:E> = <var:c> $ ahead of executing this list of commands it holds that $ <var:Y> = <nat:5> \times <var:c> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:c> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:E> = <var:c> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:5> ; \\ \{ <var:E> = <var:c> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \} \\ <var:T1> := <var:T1> * <var:E> ; \\ \{ <var:E> = <var:c> \land <var:T0> = <nat:9> \land <var:T1> = <nat:5> \cdot <var:c> \} \\ <var:Y> := <var:T1> ; \\ \{ <var:E> = <var:c> \land <var:T0> = <nat:9> \land <var:Y> = <nat:5> \cdot <var:c> \} \\ <var:Y> := <var:Y> + <var:T0> \\ \{ <var:E> = <var:c> \land <var:Y> = <nat:5> \cdot <var:c> + <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:E> = <var:c> }} <var:T0> := <nat:9> ; <var:T1> := <nat:5> ; <var:T1> := <var:T1> * <var:E> ; <var:Y> := <var:T1> ; <var:Y> := <var:Y> + <var:T0> {{ <var:Y> = <nat:5> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:T0> = <nat:9> /\ <var:Y> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:Y> = <nat:5> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 