\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:f> ; <var:r2> := <var:r1> * <var:f> ; <var:r3> := <var:r2> * <var:f> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:2> ; <var:r3> := <var:r3> * <nat:3> ; <var:Z> := <var:r3> <var:Z> := <var:Z> + <var:r1> <var:Z> := <var:Z> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Allowing given every $ <var:U> \in \mathbb{Z}^+ $ it to be that $ <var:f> = <var:U> $ before executing our set of instructions , then $ <var:Z> = <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> + <nat:9> $ once list of commands has finished . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:f> = <var:U> \} \\ <var:r1> := <var:f> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <var:U> \} \\ <var:r2> := <var:r1> * <var:f> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <var:U> \land <var:r2> = <var:U> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:f> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <var:U> \land <var:r2> = <var:U> ^ <nat:2> \land <var:r3> = <var:U> ^ <nat:3> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <var:U> \land <var:r2> = <var:U> ^ <nat:2> \land <var:r3> = <var:U> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ <var:r1> := <var:r1> * <nat:2> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <nat:2> * <var:U> \land <var:r2> = <var:U> ^ <nat:2> \land <var:r3> = <var:U> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ <var:r3> := <var:r3> * <nat:3> ; \\ \{ <var:f> = <var:U> \land <var:r1> = <nat:2> * <var:U> \land <var:r2> = <var:U> ^ <nat:2> \land <var:r3> = <nat:3> * <var:U> ^ <nat:3> \land <var:r0> = <nat:9> \} \\ <var:Z> := <var:r3> \\ \{ <var:f> = <var:U> \land <var:r1> = <nat:2> * <var:U> \land <var:r2> = <var:U> ^ <nat:2> \land <var:r0> = <nat:9> \land <var:Z> = <nat:3> * <var:U> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:r1> \\ \{ <var:f> = <var:U> \land <var:r0> = <nat:9> \land <var:Z> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> \} \\ <var:Z> := <var:Z> + <var:r0> \\ \{ <var:f> = <var:U> \land <var:Z> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:9> \} \end{eqnarray} Given the preceding argument , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:f> ; <var:r2> := <var:r1> * <var:f> ; <var:r3> := <var:r2> * <var:f> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:2> ; <var:r3> := <var:r3> * <nat:3> ; <var:Z> := <var:r3> <var:Z> := <var:Z> + <var:r1> <var:Z> := <var:Z> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:f> = <var:U> }} <def:poly> {{ <var:Z> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <var:U> /\ <var:r2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <var:U> /\ <var:r2> = <var:U> ^ <nat:2> /\ <var:r3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <var:U> /\ <var:r2> = <var:U> ^ <nat:2> /\ <var:r3> = <var:U> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <var:U> ^ <nat:2> /\ <var:r3> = <var:U> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <var:U> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:U> ^ <nat:3> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r1> = <nat:2> * <var:U> /\ <var:r2> = <var:U> ^ <nat:2> /\ <var:r0> = <nat:9> /\ <var:Z> = <nat:3> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:r0> = <nat:9> /\ <var:Z> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:Z> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 