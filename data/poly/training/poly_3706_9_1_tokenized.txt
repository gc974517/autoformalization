\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:X1> := <var:O> ; <var:X2> := <var:X1> * <var:O> ; <var:X3> := <var:X2> * <var:O> ; <var:X0> := <nat:7> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:7> ; <var:y> := <var:X3> <var:y> := <var:y> + <var:X2> <var:y> := <var:y> + <var:X0> \end{verbatim} Given it to be that $ <var:O> = <var:t> $ before the evaluation of the code segment it must be that $ <var:y> = <nat:7> \times <var:t> ^ <nat:3> + <nat:4> \times <var:t> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the code segment is demonstrated using Hoare reasoning . Going to the next step , we have the variable binding code giving $ <var:O> $ to $ <var:X1>$ . This code forwards the condition $ \{ <var:O> = <var:t> \} $ as the postcondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \} $ . After , we see the variable update line assigning $ <var:X1> * <var:O> $ as $ <var:X2>$ . This code transfers the precondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \} $ toward the postcondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule given by typical Hoare techniques . Focusing on the next piece of code seen in our segment of code , the binding statement binding $ <var:X2> * <var:O> $ into $ <var:X3>$ . This advances $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \} $ toward the postcondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \} $ . This is rigorously given using the assignment rule defined by typical Hoare logic . Further , we see the variable update line giving $ <nat:7> $ into $ <var:X0>$ . This line forwards the precondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \} $ to $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Taking another step toward the following line found in the list of commands , we see the variable update command giving $ <var:X2> * <nat:4> $ to $ <var:X2>$ . This statement redefines the precondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ toward $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Paying attention to the following line contained in our code segment , the variable binding line yielding $ <var:X3> * <nat:7> $ to $ <var:X3>$ . This line redefines $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X3> = <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ into the postcondition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X3> = <nat:7> * <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . This is known to be sound using the assignment inference rule in typical Hoare logic . Looking at the proceeding line in the set of commands , we have the statement yielding $ <var:X3$ to $ <var:y>$ . This statement advances $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X3> = <nat:7> * <var:t> ^ <nat:3> \land <var:X0> = <nat:7> \} $ to the condition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:y> = <nat:7> * <var:t> ^ <nat:3> \} $ . Keeping momentum , we have the environment update code \verb | <var:y> := <var:y> + <var:X2> | . This line forwards the condition $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X2> = <nat:4> * <var:t> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:y> = <nat:7> * <var:t> ^ <nat:3> \} $ into $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X0> = <nat:7> \land <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> \} $ . Observing the proceeding bit of code contained in our program , we have the variable assignmet code letting $ <var:y> + <var:X0$ into $ <var:y>$ . This command takes $ \{ <var:O> = <var:t> \land <var:X1> = <var:t> \land <var:X0> = <nat:7> \land <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> \} $ to the postcondition $ \{ <var:O> = <var:t> \land <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:7> \} $ . This is ensured through the assignment law in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:O> = <var:t> }} <var:X1> := <var:O> ; <var:X2> := <var:X1> * <var:O> ; <var:X3> := <var:X2> * <var:O> ; <var:X0> := <nat:7> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:7> ; <var:y> := <var:X3> <var:y> := <var:y> + <var:X2> <var:y> := <var:y> + <var:X0> {{ <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <var:t> ^ <nat:2> /\ <var:X3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <var:t> ^ <nat:2> /\ <var:X3> = <var:t> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:X3> = <var:t> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:X3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X2> = <nat:4> * <var:t> ^ <nat:2> /\ <var:X0> = <nat:7> /\ <var:y> = <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:X1> = <var:t> /\ <var:X0> = <nat:7> /\ <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:t> /\ <var:y> = <nat:7> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 