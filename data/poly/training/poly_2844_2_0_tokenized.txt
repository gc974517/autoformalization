\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:1> ; <var:Y> := <var:W0> \end{verbatim} Given that $ <var:Z> = <var:l> $ prior to running the series of instructions it must be that $ <var:Y> = <nat:1> $ after code segment executes . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be demonstrated with the following decorated series of instructions . \begin{eqnarray} \{ <var:Z> = <var:l> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:Z> = <var:l> \land <var:W0> = <nat:1> \} \\ <var:Y> := <var:W0> \\ \{ <var:Z> = <var:l> \land <var:Y> = <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Z> = <var:l> }} <var:W0> := <nat:1> ; <var:Y> := <var:W0> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:l> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 