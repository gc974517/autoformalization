\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:1> ; <var:Q> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:L> = <var:j> $ ahead of interpreting our segment of code , then we have $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is shown using usual Hoare logic . Honing in on the following command in the set of commands , \begin{eqnarray} \{ <var:L> = <var:j> \} \, <var:g0> := <nat:1> \, \{ <var:L> = <var:j> \land <var:g0> = <nat:1> \} \end{eqnarray} This is shown by the law defined in standard Hoare techniques . Taking another step toward the following piece of code found in the list of instructions , we have \begin{eqnarray} \{ <var:L> = <var:j> \} \, <var:g0> := <nat:1> \, \{ <var:L> = <var:j> \land <var:g0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:Q> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:L> = <var:j> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:j> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 