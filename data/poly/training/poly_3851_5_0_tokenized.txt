\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:Q> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Given for any whole numbers $ <var:t> $ it to be that $ <var:Q> = <var:t> $ before the execution of the segment of code , then $ <var:O> = <nat:1> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:Q> = <var:t> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:Q> = <var:t> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:1> ; \\ \{ <var:Q> = <var:t> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \} \\ <var:d1> := <var:d1> * <var:Q> ; \\ \{ <var:Q> = <var:t> \land <var:d0> = <nat:4> \land <var:d1> = <nat:1> \times <var:t> \} \\ <var:O> := <var:d1> ; \\ \{ <var:Q> = <var:t> \land <var:d0> = <nat:4> \land <var:O> = <nat:1> \times <var:t> \} \\ <var:O> := <var:O> + <var:d0> \\ \{ <var:Q> = <var:t> \land <var:O> = <nat:1> \times <var:t> + <nat:4> \} \end{eqnarray} Considering the above , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:1> ; <var:d1> := <var:d1> * <var:Q> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Q> = <var:t> }} <def:poly> {{ <var:O> = <nat:1> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:d0> = <nat:4> /\ <var:O> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:t> /\ <var:O> = <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 