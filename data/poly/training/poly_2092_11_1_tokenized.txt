\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p1> := <var:a> ; <var:p2> := <var:p1> * <var:a> ; <var:p3> := <var:p2> * <var:a> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:8> ; <var:I> := <var:p3> <var:I> := <var:I> + <var:p2> <var:I> := <var:I> + <var:p1> <var:I> := <var:I> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:a> = <var:h> $ , given all natural coefficients $ <var:h> $ , ahead of executing this series of instructions it holds that we see $ <var:I> = <nat:8> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:9> $ after series of instructions exits . \end{theorem} \begin{proof} Proving correctness for our set of instructions is given by this decorated list of instructions . \begin{eqnarray} \{ <var:a> = <var:h> \} \\ <var:p1> := <var:a> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <var:h> \} \\ <var:p2> := <var:p1> * <var:a> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <var:h> \land <var:p2> = <var:h> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:a> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <var:h> \land <var:p2> = <var:h> ^ <nat:2> \land <var:p3> = <var:h> ^ <nat:3> \} \\ <var:p0> := <nat:9> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <var:h> \land <var:p2> = <var:h> ^ <nat:2> \land <var:p3> = <var:h> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p1> := <var:p1> * <nat:2> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <nat:2> \times <var:h> \land <var:p2> = <var:h> ^ <nat:2> \land <var:p3> = <var:h> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p2> := <var:p2> * <nat:4> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <nat:2> \times <var:h> \land <var:p2> = <nat:4> \times <var:h> ^ <nat:2> \land <var:p3> = <var:h> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:p3> := <var:p3> * <nat:8> ; \\ \{ <var:a> = <var:h> \land <var:p1> = <nat:2> \times <var:h> \land <var:p2> = <nat:4> \times <var:h> ^ <nat:2> \land <var:p3> = <nat:8> \times <var:h> ^ <nat:3> \land <var:p0> = <nat:9> \} \\ <var:I> := <var:p3> \\ \{ <var:a> = <var:h> \land <var:p1> = <nat:2> \times <var:h> \land <var:p2> = <nat:4> \times <var:h> ^ <nat:2> \land <var:p0> = <nat:9> \land <var:I> = <nat:8> \times <var:h> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:p2> \\ \{ <var:a> = <var:h> \land <var:p1> = <nat:2> \times <var:h> \land <var:p0> = <nat:9> \land <var:I> = <nat:8> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:p1> \\ \{ <var:a> = <var:h> \land <var:p0> = <nat:9> \land <var:I> = <nat:8> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \\ <var:I> := <var:I> + <var:p0> \\ \{ <var:a> = <var:h> \land <var:I> = <nat:8> \times <var:h> ^ <nat:3> + <nat:4> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:9> \} \end{eqnarray} The application of typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:a> ; <var:p2> := <var:p1> * <var:a> ; <var:p3> := <var:p2> * <var:a> ; <var:p0> := <nat:9> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:8> ; <var:I> := <var:p3> <var:I> := <var:I> + <var:p2> <var:I> := <var:I> + <var:p1> <var:I> := <var:I> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <def:poly> {{ <var:I> = <nat:8> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <var:h> /\ <var:p2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <var:h> /\ <var:p2> = <var:h> ^ <nat:2> /\ <var:p3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <var:h> /\ <var:p2> = <var:h> ^ <nat:2> /\ <var:p3> = <var:h> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <nat:2> * <var:h> /\ <var:p2> = <var:h> ^ <nat:2> /\ <var:p3> = <var:h> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <nat:2> * <var:h> /\ <var:p2> = <nat:4> * <var:h> ^ <nat:2> /\ <var:p3> = <var:h> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <nat:2> * <var:h> /\ <var:p2> = <nat:4> * <var:h> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:p0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <nat:2> * <var:h> /\ <var:p2> = <nat:4> * <var:h> ^ <nat:2> /\ <var:p0> = <nat:9> /\ <var:I> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p1> = <nat:2> * <var:h> /\ <var:p0> = <nat:9> /\ <var:I> = <nat:8> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:p0> = <nat:9> /\ <var:I> = <nat:8> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:I> = <nat:8> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 