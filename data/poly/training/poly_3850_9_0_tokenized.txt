\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:8> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:d> ; <var:T2> := <nat:5> ; <var:T2> := <var:T2> * <var:d> ; <var:T2> := <var:T2> * <var:d> ; <var:K> := <var:T2> ; <var:K> := <var:K> + <var:T1> ; <var:K> := <var:K> + <var:T0> \end{verbatim} Assume $ <var:d> = <var:J> $ ahead of the evaluation of the code segment it must be that we see $ <var:K> = <nat:5> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:8> $ after list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:J> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \} \\ <var:T1> := <nat:4> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \} \\ <var:T1> := <var:T1> * <var:d> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \times <var:J> \} \\ <var:T2> := <nat:5> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \times <var:J> \land <var:T2> = <nat:5> \} \\ <var:T2> := <var:T2> * <var:d> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \times <var:J> \land <var:T2> = <nat:5> \times <var:J> \} \\ <var:T2> := <var:T2> * <var:d> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \times <var:J> \land <var:T2> = <nat:5> \times <var:J> ^ <nat:2> \} \\ <var:K> := <var:T2> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:T1> = <nat:4> \times <var:J> \land <var:K> = <nat:5> \times <var:J> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:T1> ; \\ \{ <var:d> = <var:J> \land <var:T0> = <nat:8> \land <var:K> = <nat:5> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} \\ <var:K> := <var:K> + <var:T0> \\ \{ <var:d> = <var:J> \land <var:K> = <nat:5> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:8> \} \end{eqnarray} The application of Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:d> = <var:J> }} <var:T0> := <nat:8> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:d> ; <var:T2> := <nat:5> ; <var:T2> := <var:T2> * <var:d> ; <var:T2> := <var:T2> * <var:d> ; <var:K> := <var:T2> ; <var:K> := <var:K> + <var:T1> ; <var:K> := <var:K> + <var:T0> {{ <var:K> = <nat:5> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> * <var:J> /\ <var:T2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> * <var:J> /\ <var:T2> = <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> * <var:J> /\ <var:T2> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:T1> = <nat:4> * <var:J> /\ <var:K> = <nat:5> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:T0> = <nat:8> /\ <var:K> = <nat:5> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:J> /\ <var:K> = <nat:5> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 