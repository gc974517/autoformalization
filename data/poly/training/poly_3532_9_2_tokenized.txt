\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:n> := <nat:4> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:3> + <var:n> * <var:m> ; <var:n> := <var:n> * <var:m> ; <var:n> := <nat:1> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:3> + <var:n> * <var:m> \end{verbatim} Allowing that $ <var:m> = <var:Q> $ ahead of evaluating our series of commands it must be that we see $ <var:n> = <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> $ when set of instructions has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:Q> \} \\ <var:n> := <nat:4> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> \} \end{eqnarray} Advancing evaluating this list of commands produces : \begin{eqnarray} <var:n> := <nat:2> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> + <nat:2> \} \\ <var:n> := <nat:2> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> \} \\ <var:n> := <nat:2> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> \} \\ <var:n> := <nat:3> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> \} \\ <var:n> := <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + \} \\ <var:n> := <nat:1> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> \} \\ <var:n> := <nat:2> + <var:n> * <var:m> ; \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:2> \} \\ <var:n> := <nat:3> + <var:n> * <var:m> \\ \{ <var:m> = <var:Q> \land <var:n> = <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> \} \end{eqnarray} Allowing the evaluation of our list of instructions results in : \begin{eqnarray} \end{eqnarray} Utilizing typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:m> = <var:Q> }} <var:n> := <nat:4> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:3> + <var:n> * <var:m> ; <var:n> := <var:n> * <var:m> ; <var:n> := <nat:1> + <var:n> * <var:m> ; <var:n> := <nat:2> + <var:n> * <var:m> ; <var:n> := <nat:3> + <var:n> * <var:m> {{ <var:n> = <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Q> /\ <var:n> = <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 