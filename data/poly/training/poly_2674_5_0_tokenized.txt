\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:2> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:m> ; <var:a> := <var:d1> ; <var:a> := <var:a> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Allow --- given any $ <var:R> $ --- that $ <var:m> = <var:R> $ ahead of interpreting this code segment it holds that we have $ <var:a> = <nat:4> * <var:R> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:R> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:m> = <var:R> \land <var:d0> = <nat:2> \} \\ <var:d1> := <nat:4> ; \\ \{ <var:m> = <var:R> \land <var:d0> = <nat:2> \land <var:d1> = <nat:4> \} \\ <var:d1> := <var:d1> * <var:m> ; \\ \{ <var:m> = <var:R> \land <var:d0> = <nat:2> \land <var:d1> = <nat:4> \cdot <var:R> \} \\ <var:a> := <var:d1> ; \\ \{ <var:m> = <var:R> \land <var:d0> = <nat:2> \land <var:a> = <nat:4> \cdot <var:R> \} \\ <var:a> := <var:a> + <var:d0> \\ \{ <var:m> = <var:R> \land <var:a> = <nat:4> \cdot <var:R> + <nat:2> \} \end{eqnarray} Applying standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:m> ; <var:a> := <var:d1> ; <var:a> := <var:a> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:m> = <var:R> }} <def:poly> {{ <var:a> = <nat:4> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:d0> = <nat:2> /\ <var:d1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:d0> = <nat:2> /\ <var:a> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:R> /\ <var:a> = <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 